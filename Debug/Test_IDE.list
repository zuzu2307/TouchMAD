
Test_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002693c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000520c  08026b0c  08026b0c  00036b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00006198  0802bd18  0802bd18  0003bd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000af630  08031eb0  08031eb0  00041eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000270  080e14e0  080e14e0  000f14e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080e1750  080e1750  001000fc  2**0
                  CONTENTS
  7 .ARM          00000008  080e1750  080e1750  000f1750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080e1758  080e1758  001000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080e1758  080e1758  000f1758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080e176c  080e176c  000f176c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080e1774  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000bab0  200000fc  080e1870  001000fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000bbac  080e1870  0010bbac  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  001000fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000ff0fd  00000000  00000000  0010012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0001a1cb  00000000  00000000  001ff229  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000059d8  00000000  00000000  002193f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005220  00000000  00000000  0021edd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003fcd4  00000000  00000000  00223ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00053784  00000000  00000000  00263cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013a9ea  00000000  00000000  002b7448  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003f1e32  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00018188  00000000  00000000  003f1f2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026af4 	.word	0x08026af4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08026af4 	.word	0x08026af4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f00b fa82 	bl	800bac4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f00b fa3d 	bl	800ba88 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00b fa07 	bl	800ba88 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000118 	.word	0x20000118

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00b f954 	bl	800ba88 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00b f946 	bl	800ba88 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00b f92b 	bl	800ba88 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00b f91d 	bl	800ba88 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000118 	.word	0x20000118
 8000890:	2000011c 	.word	0x2000011c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00b f8d0 	bl	800ba54 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00b f8bc 	bl	800ba54 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f00b f881 	bl	800ba40 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PollingControlMusicInit>:
uint8_t isPlay = 0;

//extern osSemaphoreId binarySemControlQHandle;

void PollingControlMusicInit()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	music_msg_q = xQueueGenericCreate(1, 1, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2101      	movs	r1, #1
 8000970:	2001      	movs	r0, #1
 8000972:	f008 fcbc 	bl	80092ee <xQueueGenericCreate>
 8000976:	4602      	mov	r2, r0
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <PollingControlMusicInit+0x48>)
 800097a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <PollingControlMusicInit+0x4c>)
 8000984:	f003 fc80 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N2_GPIO_Port, N2_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <PollingControlMusicInit+0x50>)
 8000990:	f003 fc7a 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N1_GPIO_Port, N1_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <PollingControlMusicInit+0x50>)
 800099c:	f003 fc74 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N0_GPIO_Port, N0_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <PollingControlMusicInit+0x54>)
 80009a6:	f003 fc6f 	bl	8004288 <HAL_GPIO_WritePin>

	//xSemaphoreGive(binarySemControlQHandle);
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000b688 	.word	0x2000b688
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40022000 	.word	0x40022000

080009c0 <signalOut>:

void signalOut(uint8_t controlSignal)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState n2_stat = RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState n1_stat = RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState n0_stat = RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	737b      	strb	r3, [r7, #13]

	switch (controlSignal)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d82f      	bhi.n	8000a3e <signalOut+0x7e>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <signalOut+0x24>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a01 	.word	0x08000a01
 80009e8:	08000a07 	.word	0x08000a07
 80009ec:	08000a0d 	.word	0x08000a0d
 80009f0:	08000a17 	.word	0x08000a17
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	08000a27 	.word	0x08000a27
 80009fc:	08000a31 	.word	0x08000a31
	{
	case 1:
		n0_stat = SET;
 8000a00:	2301      	movs	r3, #1
 8000a02:	737b      	strb	r3, [r7, #13]
		break;
 8000a04:	e01b      	b.n	8000a3e <signalOut+0x7e>
	case 2:
		n1_stat = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73bb      	strb	r3, [r7, #14]
		break;
 8000a0a:	e018      	b.n	8000a3e <signalOut+0x7e>
	case 3:
		n0_stat = SET;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	737b      	strb	r3, [r7, #13]
		n1_stat = SET;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73bb      	strb	r3, [r7, #14]
		break;
 8000a14:	e013      	b.n	8000a3e <signalOut+0x7e>
	case 4:
		n2_stat = SET;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
		break;
 8000a1a:	e010      	b.n	8000a3e <signalOut+0x7e>
	case 5:
		n0_stat = SET;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	737b      	strb	r3, [r7, #13]
		n2_stat = SET;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
		break;
 8000a24:	e00b      	b.n	8000a3e <signalOut+0x7e>
	case 6:
		n1_stat = SET;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73bb      	strb	r3, [r7, #14]
		n2_stat = SET;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a2e:	e006      	b.n	8000a3e <signalOut+0x7e>
	case 7:
		n0_stat = SET;
 8000a30:	2301      	movs	r3, #1
 8000a32:	737b      	strb	r3, [r7, #13]
		n1_stat = SET;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73bb      	strb	r3, [r7, #14]
		n2_stat = SET;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
		break;
 8000a3c:	bf00      	nop
	}

	HAL_GPIO_WritePin(N2_GPIO_Port, N2_Pin, n2_stat);
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	461a      	mov	r2, r3
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <signalOut+0xb0>)
 8000a48:	f003 fc1e 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N1_GPIO_Port, N1_Pin, n1_stat);
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <signalOut+0xb0>)
 8000a56:	f003 fc17 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N0_GPIO_Port, N0_Pin, n0_stat);
 8000a5a:	7b7b      	ldrb	r3, [r7, #13]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <signalOut+0xb4>)
 8000a62:	f003 fc11 	bl	8004288 <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40022000 	.word	0x40022000

08000a78 <PollingControlMusic>:

// PORT LSB->MSB I-A-A-B
void PollingControlMusic()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if (xQueueReceive(music_msg_q, &msg, 0) == pdTRUE)
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <PollingControlMusic+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4917      	ldr	r1, [pc, #92]	; (8000ae0 <PollingControlMusic+0x68>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f008 fe95 	bl	80097b4 <xQueueReceive>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d116      	bne.n	8000abe <PollingControlMusic+0x46>
	{
		signalOut(msg);
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <PollingControlMusic+0x68>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff93 	bl	80009c0 <signalOut>
		vTaskDelay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f009 fbca 	bl	800a234 <vTaskDelay>

		// Pulse out
		HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa6:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <PollingControlMusic+0x6c>)
 8000aa8:	f003 fbee 	bl	8004288 <HAL_GPIO_WritePin>
		vTaskDelay(2);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f009 fbc1 	bl	800a234 <vTaskDelay>
		HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <PollingControlMusic+0x6c>)
 8000aba:	f003 fbe5 	bl	8004288 <HAL_GPIO_WritePin>
		//xSemaphoreGive(binarySemControlQHandle);
	}

	isPlay = (GPIOB->IDR >> 14) & 0x01;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <PollingControlMusic+0x6c>)
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	0b9b      	lsrs	r3, r3, #14
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <PollingControlMusic+0x70>)
 8000ace:	701a      	strb	r2, [r3, #0]

	osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f008 f998 	bl	8008e06 <osDelay>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000b688 	.word	0x2000b688
 8000ae0:	2000b684 	.word	0x2000b684
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	2000011e 	.word	0x2000011e

08000aec <PollingInit>:
uint8_t uartMsgBuffer[UART_BUFF_SIZE];
uint8_t uartMsgData[2];
uint8_t msgIndex = 0;
uint8_t msgRdyFlag = 0;

void PollingInit(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	4903      	ldr	r1, [pc, #12]	; (8000b00 <PollingInit+0x14>)
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <PollingInit+0x18>)
 8000af6:	f007 f90f 	bl	8007d18 <HAL_UART_Receive_IT>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000b68c 	.word	0x2000b68c
 8000b04:	2000ba20 	.word	0x2000ba20

08000b08 <PollingRoutine>:


void PollingRoutine(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

	if(msgRdyFlag){
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <PollingRoutine+0x24>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d009      	beq.n	8000b28 <PollingRoutine+0x20>
		xSemaphoreGive(binarySemMsgUartHandle);
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <PollingRoutine+0x28>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f008 fcb5 	bl	800948c <xQueueGenericSend>
		msgRdyFlag = 0;
 8000b22:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <PollingRoutine+0x24>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
	}

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000120 	.word	0x20000120
 8000b30:	2000b9f8 	.word	0x2000b9f8

08000b34 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	if(msgIndex == 0){
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0x1a>
		memset(&uartMsgBuffer, 0, sizeof(uartMsgBuffer));
 8000b44:	2210      	movs	r2, #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <HAL_UART_RxCpltCallback+0x70>)
 8000b4a:	f025 f822 	bl	8025b92 <memset>
	}

	if(uartMsgData[0] == 13 || msgIndex==15){
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b0d      	cmp	r3, #13
 8000b54:	d003      	beq.n	8000b5e <HAL_UART_RxCpltCallback+0x2a>
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d10c      	bne.n	8000b78 <HAL_UART_RxCpltCallback+0x44>
		uartMsgBuffer[msgIndex] = 0;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_UART_RxCpltCallback+0x70>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	5499      	strb	r1, [r3, r2]
		msgIndex = 0;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]

		msgRdyFlag = 1;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_RxCpltCallback+0x78>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e00a      	b.n	8000b8e <HAL_UART_RxCpltCallback+0x5a>
	}else {
		uartMsgBuffer[msgIndex++] = uartMsgData[0];
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	b2d1      	uxtb	r1, r2
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b82:	7011      	strb	r1, [r2, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b88:	7819      	ldrb	r1, [r3, #0]
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_UART_RxCpltCallback+0x70>)
 8000b8c:	5499      	strb	r1, [r3, r2]
	}

	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4905      	ldr	r1, [pc, #20]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <HAL_UART_RxCpltCallback+0x7c>)
 8000b94:	f007 f8c0 	bl	8007d18 <HAL_UART_Receive_IT>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000011f 	.word	0x2000011f
 8000ba4:	2000b690 	.word	0x2000b690
 8000ba8:	2000b68c 	.word	0x2000b68c
 8000bac:	20000120 	.word	0x20000120
 8000bb0:	2000ba20 	.word	0x2000ba20

08000bb4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <vApplicationGetIdleTaskMemory+0x30>)
 8000bfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000124 	.word	0x20000124
 8000c18:	2000017c 	.word	0x2000017c

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b098      	sub	sp, #96	; 0x60
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f001 ff16 	bl	8002a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f873 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 fdbf 	bl	80017ac <MX_GPIO_Init>
  MX_ADC3_Init();
 8000c2e:	f000 f927 	bl	8000e80 <MX_ADC3_Init>
  MX_CRC_Init();
 8000c32:	f000 f977 	bl	8000f24 <MX_CRC_Init>
  MX_DCMI_Init();
 8000c36:	f000 f997 	bl	8000f68 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000c3a:	f000 f9c9 	bl	8000fd0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000c3e:	f000 fd09 	bl	8001654 <MX_FMC_Init>
  MX_I2C1_Init();
 8000c42:	f000 f9f7 	bl	8001034 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c46:	f000 fa35 	bl	80010b4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000c4a:	f000 fa73 	bl	8001134 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000c4e:	f000 fb27 	bl	80012a0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000c52:	f000 fb51 	bl	80012f8 <MX_RTC_Init>
  MX_SAI2_Init();
 8000c56:	f000 fbf5 	bl	8001444 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000c5a:	f000 fc9b 	bl	8001594 <MX_SPDIFRX_Init>
  MX_USART6_UART_Init();
 8000c5e:	f000 fcc9 	bl	80015f4 <MX_USART6_UART_Init>
  MX_TouchGFX_Init();
 8000c62:	f00a ff3a 	bl	800bada <MX_TouchGFX_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemMsgUart */
  osSemaphoreDef(binarySemMsgUart);
 8000c66:	2300      	movs	r3, #0
 8000c68:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  binarySemMsgUartHandle = osSemaphoreCreate(osSemaphore(binarySemMsgUart), 1);
 8000c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c72:	2101      	movs	r1, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f008 f8da 	bl	8008e2e <osSemaphoreCreate>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <main+0xd8>)
 8000c7e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <main+0xdc>)
 8000c82:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c86:	461d      	mov	r5, r3
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 f867 	bl	8008d6e <osThreadCreate>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <main+0xe0>)
 8000ca4:	601a      	str	r2, [r3, #0]

  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartUartTask, osPriorityNormal, 0, 512);
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <main+0xe4>)
 8000ca8:	f107 0420 	add.w	r4, r7, #32
 8000cac:	461d      	mov	r5, r3
 8000cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f008 f854 	bl	8008d6e <osThreadCreate>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <main+0xe8>)
 8000cca:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <main+0xec>)
 8000cce:	1d3c      	adds	r4, r7, #4
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 f843 	bl	8008d6e <osThreadCreate>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <main+0xf0>)
 8000cec:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cee:	f008 f837 	bl	8008d60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0xd6>
 8000cf4:	2000b9f8 	.word	0x2000b9f8
 8000cf8:	08026b18 	.word	0x08026b18
 8000cfc:	2000b724 	.word	0x2000b724
 8000d00:	08026b40 	.word	0x08026b40
 8000d04:	2000b95c 	.word	0x2000b95c
 8000d08:	08026b68 	.word	0x08026b68
 8000d0c:	2000bb14 	.word	0x2000bb14

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0b4      	sub	sp, #208	; 0xd0
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f024 ff37 	bl	8025b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	2284      	movs	r2, #132	; 0x84
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f024 ff28 	bl	8025b92 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d42:	f004 fc03 	bl	800554c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <SystemClock_Config+0x164>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <SystemClock_Config+0x164>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <SystemClock_Config+0x164>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <SystemClock_Config+0x168>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <SystemClock_Config+0x168>)
 8000d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <SystemClock_Config+0x168>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000d76:	2309      	movs	r3, #9
 8000d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d98:	2319      	movs	r3, #25
 8000d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000da2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000dac:	2309      	movs	r3, #9
 8000dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fcea 	bl	8005790 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000dc2:	f000 ff47 	bl	8001c54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dc6:	f004 fbd1 	bl	800556c <HAL_PWREx_EnableOverDrive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dd0:	f000 ff40 	bl	8001c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000de6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000df6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dfa:	2106      	movs	r1, #6
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 ff6b 	bl	8005cd8 <HAL_RCC_ClockConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000e08:	f000 ff24 	bl	8001c54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USART6 | RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <SystemClock_Config+0x16c>)
 8000e0e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e20:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e46:	2300      	movs	r3, #0
 8000e48:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 f940 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8000e66:	f000 fef5 	bl	8001c54 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	37d0      	adds	r7, #208	; 0xd0
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000
 8000e7c:	01114828 	.word	0x01114828

08000e80 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <MX_ADC3_Init+0x9c>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000e9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <MX_ADC3_Init+0xa0>)
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ee2:	f001 fe05 	bl	8002af0 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000eec:	f000 feb2 	bl	8001c54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000f02:	f001 fe39 	bl	8002b78 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000f0c:	f000 fea2 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000b960 	.word	0x2000b960
 8000f1c:	40012200 	.word	0x40012200
 8000f20:	0f000001 	.word	0x0f000001

08000f24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <MX_CRC_Init+0x40>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f4e:	f002 f969 	bl	8003224 <HAL_CRC_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f58:	f000 fe7c 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000b890 	.word	0x2000b890
 8000f64:	40023000 	.word	0x40023000

08000f68 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <MX_DCMI_Init+0x64>)
 8000f70:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000fb6:	f002 fa1f 	bl	80033f8 <HAL_DCMI_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000fc0:	f000 fe48 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000b9a8 	.word	0x2000b9a8
 8000fcc:	50050000 	.word	0x50050000

08000fd0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <MX_DMA2D_Init+0x60>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_DMA2D_Init+0x5c>)
 8001000:	2200      	movs	r2, #0
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <MX_DMA2D_Init+0x5c>)
 8001006:	f002 fa93 	bl	8003530 <HAL_DMA2D_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001010:	f000 fe20 	bl	8001c54 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001014:	2101      	movs	r1, #1
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_DMA2D_Init+0x5c>)
 8001018:	f002 fd54 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001022:	f000 fe17 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000baa0 	.word	0x2000baa0
 8001030:	4002b000 	.word	0x4002b000

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_I2C1_Init+0x74>)
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_I2C1_Init+0x78>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <MX_I2C1_Init+0x7c>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_I2C1_Init+0x74>)
 800104c:	2201      	movs	r2, #1
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001070:	f003 f924 	bl	80042bc <HAL_I2C_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800107a:	f000 fdeb 	bl	8001c54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001082:	f003 fe33 	bl	8004cec <HAL_I2CEx_ConfigAnalogFilter>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800108c:	f000 fde2 	bl	8001c54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001090:	2100      	movs	r1, #0
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001094:	f003 fe75 	bl	8004d82 <HAL_I2CEx_ConfigDigitalFilter>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 fdd9 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000b844 	.word	0x2000b844
 80010ac:	40005400 	.word	0x40005400
 80010b0:	00c0eaff 	.word	0x00c0eaff

080010b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_I2C3_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_I2C3_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_I2C3_Init+0x74>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_I2C3_Init+0x7c>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_I2C3_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_I2C3_Init+0x74>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_I2C3_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_I2C3_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C3_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_I2C3_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C3_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <MX_I2C3_Init+0x74>)
 80010f0:	f003 f8e4 	bl	80042bc <HAL_I2C_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010fa:	f000 fdab 	bl	8001c54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_I2C3_Init+0x74>)
 8001102:	f003 fdf3 	bl	8004cec <HAL_I2CEx_ConfigAnalogFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 fda2 	bl	8001c54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_I2C3_Init+0x74>)
 8001114:	f003 fe35 	bl	8004d82 <HAL_I2CEx_ConfigDigitalFilter>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 fd99 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000b728 	.word	0x2000b728
 800112c:	40005c00 	.word	0x40005c00
 8001130:	00c0eaff 	.word	0x00c0eaff

08001134 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09a      	sub	sp, #104	; 0x68
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800113a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800113e:	2234      	movs	r2, #52	; 0x34
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f024 fd25 	bl	8025b92 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2234      	movs	r2, #52	; 0x34
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f024 fd1f 	bl	8025b92 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001154:	4b50      	ldr	r3, [pc, #320]	; (8001298 <MX_LTDC_Init+0x164>)
 8001156:	4a51      	ldr	r2, [pc, #324]	; (800129c <MX_LTDC_Init+0x168>)
 8001158:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800115a:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <MX_LTDC_Init+0x164>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001160:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <MX_LTDC_Init+0x164>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001166:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <MX_LTDC_Init+0x164>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800116c:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <MX_LTDC_Init+0x164>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001172:	4b49      	ldr	r3, [pc, #292]	; (8001298 <MX_LTDC_Init+0x164>)
 8001174:	2228      	movs	r2, #40	; 0x28
 8001176:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001178:	4b47      	ldr	r3, [pc, #284]	; (8001298 <MX_LTDC_Init+0x164>)
 800117a:	2209      	movs	r2, #9
 800117c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <MX_LTDC_Init+0x164>)
 8001180:	2235      	movs	r2, #53	; 0x35
 8001182:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <MX_LTDC_Init+0x164>)
 8001186:	220b      	movs	r2, #11
 8001188:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <MX_LTDC_Init+0x164>)
 800118c:	f240 2215 	movw	r2, #533	; 0x215
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <MX_LTDC_Init+0x164>)
 8001194:	f240 121b 	movw	r2, #283	; 0x11b
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <MX_LTDC_Init+0x164>)
 800119c:	f240 2235 	movw	r2, #565	; 0x235
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <MX_LTDC_Init+0x164>)
 80011a4:	f240 121d 	movw	r2, #285	; 0x11d
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <MX_LTDC_Init+0x164>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <MX_LTDC_Init+0x164>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <MX_LTDC_Init+0x164>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011c2:	4835      	ldr	r0, [pc, #212]	; (8001298 <MX_LTDC_Init+0x164>)
 80011c4:	f003 fe2a 	bl	8004e1c <HAL_LTDC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80011ce:	f000 fd41 	bl	8001c54 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80011d6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80011e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011e4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80011e6:	2301      	movs	r3, #1
 80011e8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80011ea:	23ff      	movs	r3, #255	; 0xff
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011f8:	2305      	movs	r3, #5
 80011fa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 80011fc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001200:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001202:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001206:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001208:	f44f 7388 	mov.w	r3, #272	; 0x110
 800120c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001220:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	481b      	ldr	r0, [pc, #108]	; (8001298 <MX_LTDC_Init+0x164>)
 800122a:	f003 ff7f 	bl	800512c <HAL_LTDC_ConfigLayer>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001234:	f000 fd0e 	bl	8001c54 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001254:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001256:	2305      	movs	r3, #5
 8001258:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_LTDC_Init+0x164>)
 8001280:	f003 ff54 	bl	800512c <HAL_LTDC_ConfigLayer>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 800128a:	f000 fce3 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */
}
 800128e:	bf00      	nop
 8001290:	3768      	adds	r7, #104	; 0x68
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000b8b4 	.word	0x2000b8b4
 800129c:	40016800 	.word	0x40016800

080012a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <MX_QUADSPI_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012ac:	22ff      	movs	r2, #255	; 0xff
 80012ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012be:	2201      	movs	r2, #1
 80012c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012dc:	f004 f996 	bl	800560c <HAL_QSPI_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80012e6:	f000 fcb5 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000bb18 	.word	0x2000bb18
 80012f4:	a0001000 	.word	0xa0001000

080012f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b092      	sub	sp, #72	; 0x48
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	222c      	movs	r2, #44	; 0x2c
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f024 fc39 	bl	8025b92 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001320:	4b46      	ldr	r3, [pc, #280]	; (800143c <MX_RTC_Init+0x144>)
 8001322:	4a47      	ldr	r2, [pc, #284]	; (8001440 <MX_RTC_Init+0x148>)
 8001324:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <MX_RTC_Init+0x144>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800132c:	4b43      	ldr	r3, [pc, #268]	; (800143c <MX_RTC_Init+0x144>)
 800132e:	227f      	movs	r2, #127	; 0x7f
 8001330:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001332:	4b42      	ldr	r3, [pc, #264]	; (800143c <MX_RTC_Init+0x144>)
 8001334:	22ff      	movs	r2, #255	; 0xff
 8001336:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001338:	4b40      	ldr	r3, [pc, #256]	; (800143c <MX_RTC_Init+0x144>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <MX_RTC_Init+0x144>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001344:	4b3d      	ldr	r3, [pc, #244]	; (800143c <MX_RTC_Init+0x144>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800134a:	483c      	ldr	r0, [pc, #240]	; (800143c <MX_RTC_Init+0x144>)
 800134c:	f005 fbea 	bl	8006b24 <HAL_RTC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001356:	f000 fc7d 	bl	8001c54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001378:	2201      	movs	r2, #1
 800137a:	4619      	mov	r1, r3
 800137c:	482f      	ldr	r0, [pc, #188]	; (800143c <MX_RTC_Init+0x144>)
 800137e:	f005 fc4d 	bl	8006c1c <HAL_RTC_SetTime>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001388:	f000 fc64 	bl	8001c54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800138c:	2301      	movs	r3, #1
 800138e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001392:	2301      	movs	r3, #1
 8001394:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001398:	2301      	movs	r3, #1
 800139a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	4823      	ldr	r0, [pc, #140]	; (800143c <MX_RTC_Init+0x144>)
 80013ae:	f005 fcf3 	bl	8006d98 <HAL_RTC_SetDate>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80013b8:	f000 fc4c 	bl	8001c54 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80013bc:	2300      	movs	r3, #0
 80013be:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2201      	movs	r2, #1
 80013f0:	4619      	mov	r1, r3
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <MX_RTC_Init+0x144>)
 80013f4:	f005 fd78 	bl	8006ee8 <HAL_RTC_SetAlarm>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80013fe:	f000 fc29 	bl	8001c54 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <MX_RTC_Init+0x144>)
 8001410:	f005 fd6a 	bl	8006ee8 <HAL_RTC_SetAlarm>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800141a:	f000 fc1b 	bl	8001c54 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800141e:	2202      	movs	r2, #2
 8001420:	2100      	movs	r1, #0
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_RTC_Init+0x144>)
 8001424:	f005 feea 	bl	80071fc <HAL_RTCEx_SetTimeStamp>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800142e:	f000 fc11 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001432:	bf00      	nop
 8001434:	3748      	adds	r7, #72	; 0x48
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000b9fc 	.word	0x2000b9fc
 8001440:	40002800 	.word	0x40002800

08001444 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <MX_SAI2_Init+0x13c>)
 800144a:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <MX_SAI2_Init+0x140>)
 800144c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800144e:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001450:	2200      	movs	r2, #0
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <MX_SAI2_Init+0x13c>)
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001462:	2200      	movs	r2, #0
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001468:	2200      	movs	r2, #0
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800146c:	4b44      	ldr	r3, [pc, #272]	; (8001580 <MX_SAI2_Init+0x13c>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <MX_SAI2_Init+0x13c>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001484:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001486:	4a40      	ldr	r2, [pc, #256]	; (8001588 <MX_SAI2_Init+0x144>)
 8001488:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <MX_SAI2_Init+0x13c>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001496:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <MX_SAI2_Init+0x13c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014a4:	2208      	movs	r2, #8
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80014d8:	4829      	ldr	r0, [pc, #164]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014da:	f005 fee5 	bl	80072a8 <HAL_SAI_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80014e4:	f000 fbb6 	bl	8001c54 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <MX_SAI2_Init+0x148>)
 80014ea:	4a29      	ldr	r2, [pc, #164]	; (8001590 <MX_SAI2_Init+0x14c>)
 80014ec:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <MX_SAI2_Init+0x148>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_SAI2_Init+0x148>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_SAI2_Init+0x148>)
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_SAI2_Init+0x148>)
 8001502:	2200      	movs	r2, #0
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_SAI2_Init+0x148>)
 8001508:	2200      	movs	r2, #0
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_SAI2_Init+0x148>)
 800150e:	2201      	movs	r2, #1
 8001510:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_SAI2_Init+0x148>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_SAI2_Init+0x148>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_SAI2_Init+0x148>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_SAI2_Init+0x148>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_SAI2_Init+0x148>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_SAI2_Init+0x148>)
 8001532:	2200      	movs	r2, #0
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_SAI2_Init+0x148>)
 8001538:	2208      	movs	r2, #8
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_SAI2_Init+0x148>)
 800153e:	2201      	movs	r2, #1
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_SAI2_Init+0x148>)
 8001544:	2200      	movs	r2, #0
 8001546:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_SAI2_Init+0x148>)
 800154a:	2200      	movs	r2, #0
 800154c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_SAI2_Init+0x148>)
 8001550:	2200      	movs	r2, #0
 8001552:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <MX_SAI2_Init+0x148>)
 8001556:	2200      	movs	r2, #0
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_SAI2_Init+0x148>)
 800155c:	2200      	movs	r2, #0
 800155e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_SAI2_Init+0x148>)
 8001562:	2201      	movs	r2, #1
 8001564:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_SAI2_Init+0x148>)
 8001568:	2200      	movs	r2, #0
 800156a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_SAI2_Init+0x148>)
 800156e:	f005 fe9b 	bl	80072a8 <HAL_SAI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001578:	f000 fb6c 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000b7c0 	.word	0x2000b7c0
 8001584:	40015c04 	.word	0x40015c04
 8001588:	0002ee00 	.word	0x0002ee00
 800158c:	2000b6a0 	.word	0x2000b6a0
 8001590:	40015c24 	.word	0x40015c24

08001594 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 800159a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800159e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015de:	f006 f88b 	bl	80076f8 <HAL_SPDIFRX_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 fb34 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000b774 	.word	0x2000b774

080015f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_USART6_UART_Init+0x58>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	; (8001650 <MX_USART6_UART_Init+0x5c>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_USART6_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART6_UART_Init+0x58>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART6_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001638:	f006 fb20 	bl	8007c7c <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001642:	f000 fb07 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000ba20 	.word	0x2000ba20
 8001650:	40011400 	.word	0x40011400

08001654 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <MX_FMC_Init+0x14c>)
 800166e:	4a4d      	ldr	r2, [pc, #308]	; (80017a4 <MX_FMC_Init+0x150>)
 8001670:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001672:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <MX_FMC_Init+0x14c>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800167e:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001680:	2204      	movs	r2, #4
 8001682:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001684:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001686:	2210      	movs	r2, #16
 8001688:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <MX_FMC_Init+0x14c>)
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001692:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001696:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <MX_FMC_Init+0x14c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <MX_FMC_Init+0x14c>)
 80016a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <MX_FMC_Init+0x14c>)
 80016a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <MX_FMC_Init+0x14c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80016b8:	2307      	movs	r3, #7
 80016ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016bc:	2304      	movs	r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016c0:	2307      	movs	r3, #7
 80016c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016c4:	2303      	movs	r3, #3
 80016c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4832      	ldr	r0, [pc, #200]	; (80017a0 <MX_FMC_Init+0x14c>)
 80016d6:	f005 ff8f 	bl	80075f8 <HAL_SDRAM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_FMC_Init+0x90>
  {
    Error_Handler();
 80016e0:	f000 fab8 	bl	8001c54 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  __IO uint32_t tmpmrd = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <MX_FMC_Init+0x154>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <MX_FMC_Init+0x154>)
 80016f0:	2210      	movs	r2, #16
 80016f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber = 1;
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <MX_FMC_Init+0x154>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <MX_FMC_Init+0x154>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001704:	4928      	ldr	r1, [pc, #160]	; (80017a8 <MX_FMC_Init+0x154>)
 8001706:	4826      	ldr	r0, [pc, #152]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001708:	f005 ffaa 	bl	8007660 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f001 f9cd 	bl	8002aac <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <MX_FMC_Init+0x154>)
 8001714:	2202      	movs	r2, #2
 8001716:	601a      	str	r2, [r3, #0]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_FMC_Init+0x154>)
 800171a:	2210      	movs	r2, #16
 800171c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber = 1;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_FMC_Init+0x154>)
 8001720:	2201      	movs	r2, #1
 8001722:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_FMC_Init+0x154>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800172a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172e:	491e      	ldr	r1, [pc, #120]	; (80017a8 <MX_FMC_Init+0x154>)
 8001730:	481b      	ldr	r0, [pc, #108]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001732:	f005 ff95 	bl	8007660 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_FMC_Init+0x154>)
 8001738:	2203      	movs	r2, #3
 800173a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_FMC_Init+0x154>)
 800173e:	2210      	movs	r2, #16
 8001740:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber = 8;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_FMC_Init+0x154>)
 8001744:	2208      	movs	r2, #8
 8001746:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_FMC_Init+0x154>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800174e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001752:	4915      	ldr	r1, [pc, #84]	; (80017a8 <MX_FMC_Init+0x154>)
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001756:	f005 ff83 	bl	8007660 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |
 800175a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800175e:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
           SDRAM_MODEREG_CAS_LATENCY_3 |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_FMC_Init+0x154>)
 8001762:	2204      	movs	r2, #4
 8001764:	601a      	str	r2, [r3, #0]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_FMC_Init+0x154>)
 8001768:	2210      	movs	r2, #16
 800176a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber = 1;
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_FMC_Init+0x154>)
 800176e:	2201      	movs	r2, #1
 8001770:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <MX_FMC_Init+0x154>)
 8001776:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177c:	490a      	ldr	r1, [pc, #40]	; (80017a8 <MX_FMC_Init+0x154>)
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001780:	f005 ff6e 	bl	8007660 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001784:	f240 712b 	movw	r1, #1835	; 0x72b
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_FMC_Init+0x14c>)
 800178a:	f005 ff94 	bl	80076b6 <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 800178e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001792:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001796:	601a      	str	r2, [r3, #0]

  /* USER CODE END FMC_Init 2 */
}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000bae0 	.word	0x2000bae0
 80017a4:	a0000140 	.word	0xa0000140
 80017a8:	2000037c 	.word	0x2000037c

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b090      	sub	sp, #64	; 0x40
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c2:	4bb0      	ldr	r3, [pc, #704]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4aaf      	ldr	r2, [pc, #700]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4bad      	ldr	r3, [pc, #692]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4baa      	ldr	r3, [pc, #680]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4aa9      	ldr	r2, [pc, #676]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4ba7      	ldr	r3, [pc, #668]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	4ba4      	ldr	r3, [pc, #656]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4aa3      	ldr	r2, [pc, #652]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4ba1      	ldr	r3, [pc, #644]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b9e      	ldr	r3, [pc, #632]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a9d      	ldr	r2, [pc, #628]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b9b      	ldr	r3, [pc, #620]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001822:	4b98      	ldr	r3, [pc, #608]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a97      	ldr	r2, [pc, #604]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b95      	ldr	r3, [pc, #596]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800183a:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a91      	ldr	r2, [pc, #580]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001852:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a8b      	ldr	r2, [pc, #556]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800186a:	4b86      	ldr	r3, [pc, #536]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a85      	ldr	r2, [pc, #532]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b83      	ldr	r3, [pc, #524]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a7f      	ldr	r2, [pc, #508]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b7d      	ldr	r3, [pc, #500]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189a:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a79      	ldr	r2, [pc, #484]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b77      	ldr	r3, [pc, #476]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a73      	ldr	r2, [pc, #460]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, N1_Pin | N2_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80018d0:	486d      	ldr	r0, [pc, #436]	; (8001a88 <MX_GPIO_Init+0x2dc>)
 80018d2:	f002 fcd9 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2120      	movs	r1, #32
 80018da:	486c      	ldr	r0, [pc, #432]	; (8001a8c <MX_GPIO_Init+0x2e0>)
 80018dc:	f002 fcd4 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | N0_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	210c      	movs	r1, #12
 80018e4:	486a      	ldr	r0, [pc, #424]	; (8001a90 <MX_GPIO_Init+0x2e4>)
 80018e6:	f002 fccf 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2108      	movs	r1, #8
 80018ee:	4869      	ldr	r0, [pc, #420]	; (8001a94 <MX_GPIO_Init+0x2e8>)
 80018f0:	f002 fcca 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fa:	4865      	ldr	r0, [pc, #404]	; (8001a90 <MX_GPIO_Init+0x2e4>)
 80018fc:	f002 fcc4 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001906:	4864      	ldr	r0, [pc, #400]	; (8001a98 <MX_GPIO_Init+0x2ec>)
 8001908:	f002 fcbe 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	21c8      	movs	r1, #200	; 0xc8
 8001910:	4862      	ldr	r0, [pc, #392]	; (8001a9c <MX_GPIO_Init+0x2f0>)
 8001912:	f002 fcb9 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191c:	4860      	ldr	r0, [pc, #384]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 800191e:	f002 fcb3 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001922:	2308      	movs	r3, #8
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001926:	2300      	movs	r3, #0
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001932:	4619      	mov	r1, r3
 8001934:	485b      	ldr	r0, [pc, #364]	; (8001aa4 <MX_GPIO_Init+0x2f8>)
 8001936:	f002 f9f3 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
 800193a:	f643 0323 	movw	r3, #14371	; 0x3823
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800194c:	230a      	movs	r3, #10
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001954:	4619      	mov	r1, r3
 8001956:	4852      	ldr	r0, [pc, #328]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001958:	f002 f9e2 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800195c:	2310      	movs	r3, #16
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800196c:	2302      	movs	r3, #2
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	484a      	ldr	r0, [pc, #296]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001978:	f002 f9d2 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : N1_Pin N2_Pin */
  GPIO_InitStruct.Pin = N1_Pin | N2_Pin;
 800197c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001992:	4619      	mov	r1, r3
 8001994:	483c      	ldr	r0, [pc, #240]	; (8001a88 <MX_GPIO_Init+0x2dc>)
 8001996:	f002 f9c3 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800199a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	483e      	ldr	r0, [pc, #248]	; (8001aa8 <MX_GPIO_Init+0x2fc>)
 80019b0:	f002 f9b6 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80019b4:	2340      	movs	r3, #64	; 0x40
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <MX_GPIO_Init+0x300>)
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c4:	4619      	mov	r1, r3
 80019c6:	4831      	ldr	r0, [pc, #196]	; (8001a8c <MX_GPIO_Init+0x2e0>)
 80019c8:	f002 f9aa 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80019cc:	2320      	movs	r3, #32
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e0:	4619      	mov	r1, r3
 80019e2:	482a      	ldr	r0, [pc, #168]	; (8001a8c <MX_GPIO_Init+0x2e0>)
 80019e4:	f002 f99c 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin N0_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | N0_Pin | LCD_DISP_Pin;
 80019e8:	f241 030c 	movw	r3, #4108	; 0x100c
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	4823      	ldr	r0, [pc, #140]	; (8001a90 <MX_GPIO_Init+0x2e4>)
 8001a02:	f002 f98d 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4825      	ldr	r0, [pc, #148]	; (8001ab0 <MX_GPIO_Init+0x304>)
 8001a1c:	f002 f980 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a20:	2308      	movs	r3, #8
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a34:	4619      	mov	r1, r3
 8001a36:	4817      	ldr	r0, [pc, #92]	; (8001a94 <MX_GPIO_Init+0x2e8>)
 8001a38:	f002 f972 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480f      	ldr	r0, [pc, #60]	; (8001a8c <MX_GPIO_Init+0x2e0>)
 8001a50:	f002 f966 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001a54:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a66:	4619      	mov	r1, r3
 8001a68:	480b      	ldr	r0, [pc, #44]	; (8001a98 <MX_GPIO_Init+0x2ec>)
 8001a6a:	f002 f959 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a80:	e018      	b.n	8001ab4 <MX_GPIO_Init+0x308>
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40022800 	.word	0x40022800
 8001a98:	40021c00 	.word	0x40021c00
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40022400 	.word	0x40022400
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	40020800 	.word	0x40020800
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4845      	ldr	r0, [pc, #276]	; (8001bd0 <MX_GPIO_Init+0x424>)
 8001abc:	f002 f930 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	483e      	ldr	r0, [pc, #248]	; (8001bd4 <MX_GPIO_Init+0x428>)
 8001adc:	f002 f920 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <MX_GPIO_Init+0x42c>)
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af2:	4619      	mov	r1, r3
 8001af4:	4837      	ldr	r0, [pc, #220]	; (8001bd4 <MX_GPIO_Init+0x428>)
 8001af6:	f002 f913 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001afa:	2310      	movs	r3, #16
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	482e      	ldr	r0, [pc, #184]	; (8001bd0 <MX_GPIO_Init+0x424>)
 8001b16:	f002 f903 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8001b1a:	23c8      	movs	r3, #200	; 0xc8
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	482a      	ldr	r0, [pc, #168]	; (8001bdc <MX_GPIO_Init+0x430>)
 8001b32:	f002 f8f5 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8001b36:	2305      	movs	r3, #5
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b46:	230a      	movs	r3, #10
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4823      	ldr	r0, [pc, #140]	; (8001be0 <MX_GPIO_Init+0x434>)
 8001b52:	f002 f8e5 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b56:	2304      	movs	r3, #4
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b66:	4619      	mov	r1, r3
 8001b68:	481c      	ldr	r0, [pc, #112]	; (8001bdc <MX_GPIO_Init+0x430>)
 8001b6a:	f002 f8d9 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001b6e:	2328      	movs	r3, #40	; 0x28
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b7e:	230a      	movs	r3, #10
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4816      	ldr	r0, [pc, #88]	; (8001be4 <MX_GPIO_Init+0x438>)
 8001b8a:	f002 f8c9 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Play_IN_Pin */
  GPIO_InitStruct.Pin = Play_IN_Pin;
 8001b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Play_IN_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4811      	ldr	r0, [pc, #68]	; (8001be8 <MX_GPIO_Init+0x43c>)
 8001ba4:	f002 f8bc 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : N3_Pin */
  GPIO_InitStruct.Pin = N3_Pin;
 8001ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(N3_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <MX_GPIO_Init+0x43c>)
 8001bc2:	f002 f8ad 	bl	8003d20 <HAL_GPIO_Init>
}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	; 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021c00 	.word	0x40021c00
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	10120000 	.word	0x10120000
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400

08001bec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001bf4:	f009 ff77 	bl	800bae6 <MX_TouchGFX_Process>
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f007 f904 	bl	8008e06 <osDelay>
 8001bfe:	e7fb      	b.n	8001bf8 <StartDefaultTask+0xc>

08001c00 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const *argument)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
  /* Infinite loop */

  PollingInit();
 8001c08:	f7fe ff70 	bl	8000aec <PollingInit>
  for (;;)
  {
    PollingRoutine();
 8001c0c:	f7fe ff7c 	bl	8000b08 <PollingRoutine>
    osDelay(1);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f007 f8f8 	bl	8008e06 <osDelay>
    PollingRoutine();
 8001c16:	e7f9      	b.n	8001c0c <StartUartTask+0xc>

08001c18 <StartMusicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const *argument)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
  /* Infinite loop */
  PollingControlMusicInit();
 8001c20:	f7fe fea2 	bl	8000968 <PollingControlMusicInit>
  for (;;)
  {
    PollingControlMusic();
 8001c24:	f7fe ff28 	bl	8000a78 <PollingControlMusic>
    osDelay(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f007 f8ec 	bl	8008e06 <osDelay>
    PollingControlMusic();
 8001c2e:	e7f9      	b.n	8001c24 <StartMusicTask+0xc>

08001c30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001c42:	f000 ff13 	bl	8002a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40001000 	.word	0x40001000

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	210f      	movs	r1, #15
 8001c9e:	f06f 0001 	mvn.w	r0, #1
 8001ca2:	f001 fa87 	bl	80031b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a21      	ldr	r2, [pc, #132]	; (8001d58 <HAL_ADC_MspInit+0xa4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d13c      	bne.n	8001d50 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a20      	ldr	r2, [pc, #128]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cf4:	f043 0320 	orr.w	r3, r3, #32
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001d1e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001d22:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	480b      	ldr	r0, [pc, #44]	; (8001d60 <HAL_ADC_MspInit+0xac>)
 8001d34:	f001 fff4 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <HAL_ADC_MspInit+0xb0>)
 8001d4c:	f001 ffe8 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40012200 	.word	0x40012200
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40021400 	.word	0x40021400
 8001d64:	40020000 	.word	0x40020000

08001d68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_CRC_MspInit+0x38>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10b      	bne.n	8001d92 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_CRC_MspInit+0x3c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_CRC_MspInit+0x3c>)
 8001d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_CRC_MspInit+0x3c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023000 	.word	0x40023000
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	; (8001f08 <HAL_DCMI_MspInit+0x160>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f040 809a 	bne.w	8001f00 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6353      	str	r3, [r2, #52]	; 0x34
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	623b      	str	r3, [r7, #32]
 8001de2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de4:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	6313      	str	r3, [r2, #48]	; 0x30
 8001df0:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e14:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a3c      	ldr	r2, [pc, #240]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2c:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e36:	6313      	str	r3, [r2, #48]	; 0x30
 8001e38:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a30      	ldr	r2, [pc, #192]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e6c:	230d      	movs	r3, #13
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4826      	ldr	r0, [pc, #152]	; (8001f10 <HAL_DCMI_MspInit+0x168>)
 8001e78:	f001 ff52 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e8c:	230d      	movs	r3, #13
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	481f      	ldr	r0, [pc, #124]	; (8001f14 <HAL_DCMI_MspInit+0x16c>)
 8001e98:	f001 ff42 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eae:	230d      	movs	r3, #13
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4817      	ldr	r0, [pc, #92]	; (8001f18 <HAL_DCMI_MspInit+0x170>)
 8001eba:	f001 ff31 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ebe:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4810      	ldr	r0, [pc, #64]	; (8001f1c <HAL_DCMI_MspInit+0x174>)
 8001edc:	f001 ff20 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ee0:	2350      	movs	r3, #80	; 0x50
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ef0:	230d      	movs	r3, #13
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4809      	ldr	r0, [pc, #36]	; (8001f20 <HAL_DCMI_MspInit+0x178>)
 8001efc:	f001 ff10 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3738      	adds	r7, #56	; 0x38
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	50050000 	.word	0x50050000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021800 	.word	0x40021800
 8001f1c:	40021c00 	.word	0x40021c00
 8001f20:	40020000 	.word	0x40020000

08001f24 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_DMA2D_MspInit+0x44>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d113      	bne.n	8001f5e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_DMA2D_MspInit+0x48>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_DMA2D_MspInit+0x48>)
 8001f3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_DMA2D_MspInit+0x48>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	205a      	movs	r0, #90	; 0x5a
 8001f54:	f001 f92e 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f58:	205a      	movs	r0, #90	; 0x5a
 8001f5a:	f001 f947 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	4002b000 	.word	0x4002b000
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_DMA2D_MspDeInit+0x2c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_DMA2D_MspDeInit+0x30>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_DMA2D_MspDeInit+0x30>)
 8001f88:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001f8e:	205a      	movs	r0, #90	; 0x5a
 8001f90:	f001 f93a 	bl	8003208 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	4002b000 	.word	0x4002b000
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <HAL_I2C_MspInit+0xdc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d129      	bne.n	800201a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a2e      	ldr	r2, [pc, #184]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4823      	ldr	r0, [pc, #140]	; (8002088 <HAL_I2C_MspInit+0xe4>)
 8001ffc:	f001 fe90 	bl	8003d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800200a:	6413      	str	r3, [r2, #64]	; 0x40
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002018:	e02d      	b.n	8002076 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_I2C_MspInit+0xe8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d128      	bne.n	8002076 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 800202a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202e:	6313      	str	r3, [r2, #48]	; 0x30
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800203c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002042:	2312      	movs	r3, #18
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002046:	2301      	movs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800204e:	2304      	movs	r3, #4
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <HAL_I2C_MspInit+0xec>)
 800205a:	f001 fe61 	bl	8003d20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002064:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
}
 8002076:	bf00      	nop
 8002078:	3730      	adds	r7, #48	; 0x30
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005400 	.word	0x40005400
 8002084:	40023800 	.word	0x40023800
 8002088:	40020400 	.word	0x40020400
 800208c:	40005c00 	.word	0x40005c00
 8002090:	40021c00 	.word	0x40021c00

08002094 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_I2C_MspDeInit+0x64>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d110      	bne.n	80020c8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_I2C_MspDeInit+0x68>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_I2C_MspDeInit+0x68>)
 80020ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80020b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b6:	4812      	ldr	r0, [pc, #72]	; (8002100 <HAL_I2C_MspDeInit+0x6c>)
 80020b8:	f001 ffdc 	bl	8004074 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80020bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c0:	480f      	ldr	r0, [pc, #60]	; (8002100 <HAL_I2C_MspDeInit+0x6c>)
 80020c2:	f001 ffd7 	bl	8004074 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80020c6:	e013      	b.n	80020f0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <HAL_I2C_MspDeInit+0x70>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10e      	bne.n	80020f0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_I2C_MspDeInit+0x68>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_I2C_MspDeInit+0x68>)
 80020d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <HAL_I2C_MspDeInit+0x74>)
 80020e2:	f001 ffc7 	bl	8004074 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80020e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ea:	4807      	ldr	r0, [pc, #28]	; (8002108 <HAL_I2C_MspDeInit+0x74>)
 80020ec:	f001 ffc2 	bl	8004074 <HAL_GPIO_DeInit>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40005400 	.word	0x40005400
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400
 8002104:	40005c00 	.word	0x40005c00
 8002108:	40021c00 	.word	0x40021c00

0800210c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a55      	ldr	r2, [pc, #340]	; (8002280 <HAL_LTDC_MspInit+0x174>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 80a3 	bne.w	8002276 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002130:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	4a53      	ldr	r2, [pc, #332]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800213a:	6453      	str	r3, [r2, #68]	; 0x44
 800213c:	4b51      	ldr	r3, [pc, #324]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002148:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	4a4d      	ldr	r2, [pc, #308]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	6313      	str	r3, [r2, #48]	; 0x30
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002160:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a47      	ldr	r2, [pc, #284]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
 800216c:	4b45      	ldr	r3, [pc, #276]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002178:	4b42      	ldr	r3, [pc, #264]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a41      	ldr	r2, [pc, #260]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800217e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002182:	6313      	str	r3, [r2, #48]	; 0x30
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002190:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4a3b      	ldr	r2, [pc, #236]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219a:	6313      	str	r3, [r2, #48]	; 0x30
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	4a35      	ldr	r2, [pc, #212]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6313      	str	r3, [r2, #48]	; 0x30
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80021c0:	2310      	movs	r3, #16
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021d0:	230e      	movs	r3, #14
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d8:	4619      	mov	r1, r3
 80021da:	482b      	ldr	r0, [pc, #172]	; (8002288 <HAL_LTDC_MspInit+0x17c>)
 80021dc:	f001 fda0 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80021e0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f2:	230e      	movs	r3, #14
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	4823      	ldr	r0, [pc, #140]	; (800228c <HAL_LTDC_MspInit+0x180>)
 80021fe:	f001 fd8f 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002202:	23f7      	movs	r3, #247	; 0xf7
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002212:	230e      	movs	r3, #14
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	4619      	mov	r1, r3
 800221c:	481c      	ldr	r0, [pc, #112]	; (8002290 <HAL_LTDC_MspInit+0x184>)
 800221e:	f001 fd7f 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002234:	2309      	movs	r3, #9
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	4815      	ldr	r0, [pc, #84]	; (8002294 <HAL_LTDC_MspInit+0x188>)
 8002240:	f001 fd6e 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002244:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002256:	230e      	movs	r3, #14
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	4619      	mov	r1, r3
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <HAL_LTDC_MspInit+0x18c>)
 8002262:	f001 fd5d 	bl	8003d20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2058      	movs	r0, #88	; 0x58
 800226c:	f000 ffa2 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002270:	2058      	movs	r0, #88	; 0x58
 8002272:	f000 ffbb 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3738      	adds	r7, #56	; 0x38
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40016800 	.word	0x40016800
 8002284:	40023800 	.word	0x40023800
 8002288:	40021000 	.word	0x40021000
 800228c:	40022400 	.word	0x40022400
 8002290:	40022800 	.word	0x40022800
 8002294:	40021800 	.word	0x40021800
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a3b      	ldr	r2, [pc, #236]	; (80023a8 <HAL_QSPI_MspInit+0x10c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d170      	bne.n	80023a0 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6393      	str	r3, [r2, #56]	; 0x38
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a34      	ldr	r2, [pc, #208]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022dc:	f043 0310 	orr.w	r3, r3, #16
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a2e      	ldr	r2, [pc, #184]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a28      	ldr	r2, [pc, #160]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800231e:	2304      	movs	r3, #4
 8002320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800232e:	2309      	movs	r3, #9
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	4619      	mov	r1, r3
 8002338:	481d      	ldr	r0, [pc, #116]	; (80023b0 <HAL_QSPI_MspInit+0x114>)
 800233a:	f001 fcf1 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800233e:	2340      	movs	r3, #64	; 0x40
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800234e:	230a      	movs	r3, #10
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	4816      	ldr	r0, [pc, #88]	; (80023b4 <HAL_QSPI_MspInit+0x118>)
 800235a:	f001 fce1 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800235e:	2304      	movs	r3, #4
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800236e:	2309      	movs	r3, #9
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	480e      	ldr	r0, [pc, #56]	; (80023b4 <HAL_QSPI_MspInit+0x118>)
 800237a:	f001 fcd1 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800237e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002390:	2309      	movs	r3, #9
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4807      	ldr	r0, [pc, #28]	; (80023b8 <HAL_QSPI_MspInit+0x11c>)
 800239c:	f001 fcc0 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3730      	adds	r7, #48	; 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	a0001000 	.word	0xa0001000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020c00 	.word	0x40020c00

080023bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_RTC_MspInit+0x2c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d105      	bne.n	80023da <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RTC_MspInit+0x30>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_RTC_MspInit+0x30>)
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40002800 	.word	0x40002800
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002410:	d127      	bne.n	8002462 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002452:	2308      	movs	r3, #8
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <HAL_SPDIFRX_MspInit+0x80>)
 800245e:	f001 fc5f 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40020c00 	.word	0x40020c00

08002474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_UART_MspInit+0x8c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12f      	bne.n	80024f6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_UART_MspInit+0x90>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_UART_MspInit+0x90>)
 800249c:	f043 0320 	orr.w	r3, r3, #32
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_UART_MspInit+0x90>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_UART_MspInit+0x90>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a14      	ldr	r2, [pc, #80]	; (8002504 <HAL_UART_MspInit+0x90>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_UART_MspInit+0x90>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80024c6:	23c0      	movs	r3, #192	; 0xc0
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024d6:	2308      	movs	r3, #8
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	4809      	ldr	r0, [pc, #36]	; (8002508 <HAL_UART_MspInit+0x94>)
 80024e2:	f001 fc1d 	bl	8003d20 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2047      	movs	r0, #71	; 0x47
 80024ec:	f000 fe62 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024f0:	2047      	movs	r0, #71	; 0x47
 80024f2:	f000 fe7b 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40011400 	.word	0x40011400
 8002504:	40023800 	.word	0x40023800
 8002508:	40020800 	.word	0x40020800

0800250c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_FMC_MspInit+0x100>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d16d      	bne.n	8002604 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <HAL_FMC_MspInit+0x100>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800252e:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_FMC_MspInit+0x104>)
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	4a37      	ldr	r2, [pc, #220]	; (8002610 <HAL_FMC_MspInit+0x104>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6393      	str	r3, [r2, #56]	; 0x38
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_FMC_MspInit+0x104>)
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002546:	f64f 7383 	movw	r3, #65411	; 0xff83
 800254a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002558:	230c      	movs	r3, #12
 800255a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4619      	mov	r1, r3
 8002560:	482c      	ldr	r0, [pc, #176]	; (8002614 <HAL_FMC_MspInit+0x108>)
 8002562:	f001 fbdd 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002566:	f248 1333 	movw	r3, #33075	; 0x8133
 800256a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002578:	230c      	movs	r3, #12
 800257a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	4619      	mov	r1, r3
 8002580:	4825      	ldr	r0, [pc, #148]	; (8002618 <HAL_FMC_MspInit+0x10c>)
 8002582:	f001 fbcd 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002586:	f24c 7303 	movw	r3, #50947	; 0xc703
 800258a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002598:	230c      	movs	r3, #12
 800259a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	4619      	mov	r1, r3
 80025a0:	481e      	ldr	r0, [pc, #120]	; (800261c <HAL_FMC_MspInit+0x110>)
 80025a2:	f001 fbbd 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80025a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80025aa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025b8:	230c      	movs	r3, #12
 80025ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4817      	ldr	r0, [pc, #92]	; (8002620 <HAL_FMC_MspInit+0x114>)
 80025c2:	f001 fbad 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80025c6:	2328      	movs	r3, #40	; 0x28
 80025c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025d6:	230c      	movs	r3, #12
 80025d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	4811      	ldr	r0, [pc, #68]	; (8002624 <HAL_FMC_MspInit+0x118>)
 80025e0:	f001 fb9e 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80025e4:	2308      	movs	r3, #8
 80025e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025f4:	230c      	movs	r3, #12
 80025f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	480a      	ldr	r0, [pc, #40]	; (8002628 <HAL_FMC_MspInit+0x11c>)
 80025fe:	f001 fb8f 	bl	8003d20 <HAL_GPIO_Init>
 8002602:	e000      	b.n	8002606 <HAL_FMC_MspInit+0xfa>
    return;
 8002604:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000038c 	.word	0x2000038c
 8002610:	40023800 	.word	0x40023800
 8002614:	40021000 	.word	0x40021000
 8002618:	40021800 	.word	0x40021800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40021400 	.word	0x40021400
 8002624:	40021c00 	.word	0x40021c00
 8002628:	40020800 	.word	0x40020800

0800262c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002634:	f7ff ff6a 	bl	800250c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_SAI_MspInit+0xbc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d124      	bne.n	800269c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10b      	bne.n	8002672 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 8002660:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002672:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a21      	ldr	r2, [pc, #132]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 800267a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800267c:	23f0      	movs	r3, #240	; 0xf0
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800268c:	230a      	movs	r3, #10
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	481c      	ldr	r0, [pc, #112]	; (8002708 <HAL_SAI_MspInit+0xc8>)
 8002698:	f001 fb42 	bl	8003d20 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1a      	ldr	r2, [pc, #104]	; (800270c <HAL_SAI_MspInit+0xcc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d125      	bne.n	80026f2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 80026b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 80026ce:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80026d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026e2:	230a      	movs	r3, #10
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4808      	ldr	r0, [pc, #32]	; (8002710 <HAL_SAI_MspInit+0xd0>)
 80026ee:	f001 fb17 	bl	8003d20 <HAL_GPIO_Init>

    }
}
 80026f2:	bf00      	nop
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40015c04 	.word	0x40015c04
 8002700:	20000390 	.word	0x20000390
 8002704:	40023800 	.word	0x40023800
 8002708:	40022000 	.word	0x40022000
 800270c:	40015c24 	.word	0x40015c24
 8002710:	40021800 	.word	0x40021800

08002714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	2036      	movs	r0, #54	; 0x36
 800272a:	f000 fd43 	bl	80031b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800272e:	2036      	movs	r0, #54	; 0x36
 8002730:	f000 fd5c 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_InitTick+0xa0>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_InitTick+0xa0>)
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	6413      	str	r3, [r2, #64]	; 0x40
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_InitTick+0xa0>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800274c:	f107 0210 	add.w	r2, r7, #16
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fc90 	bl	800607c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800275c:	f003 fc66 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8002760:	4603      	mov	r3, r0
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_InitTick+0xa4>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	3b01      	subs	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_InitTick+0xa8>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <HAL_InitTick+0xac>)
 8002778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_InitTick+0xa8>)
 800277c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_InitTick+0xa8>)
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_InitTick+0xa8>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_InitTick+0xa8>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <HAL_InitTick+0xa8>)
 8002796:	f005 f80b 	bl	80077b0 <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027a0:	4806      	ldr	r0, [pc, #24]	; (80027bc <HAL_InitTick+0xa8>)
 80027a2:	f005 f83b 	bl	800781c <HAL_TIM_Base_Start_IT>
 80027a6:	4603      	mov	r3, r0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3730      	adds	r7, #48	; 0x30
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	2000bb64 	.word	0x2000bb64
 80027c0:	40001000 	.word	0x40001000

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <HardFault_Handler+0x4>

080027d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <MemManage_Handler+0x4>

080027de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <BusFault_Handler+0x4>

080027e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <UsageFault_Handler+0x4>

080027ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <TIM6_DAC_IRQHandler+0x10>)
 80027fe:	f005 f837 	bl	8007870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000bb64 	.word	0x2000bb64

0800280c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <USART6_IRQHandler+0x10>)
 8002812:	f005 fb23 	bl	8007e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000ba20 	.word	0x2000ba20

08002820 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <LTDC_IRQHandler+0x10>)
 8002826:	f002 fbc9 	bl	8004fbc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000b8b4 	.word	0x2000b8b4

08002834 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <DMA2D_IRQHandler+0x10>)
 800283a:	f001 f832 	bl	80038a2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000baa0 	.word	0x2000baa0

08002848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
	return 1;
 800284c:	2301      	movs	r3, #1
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_kill>:

int _kill(int pid, int sig)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002862:	f023 f93f 	bl	8025ae4 <__errno>
 8002866:	4602      	mov	r2, r0
 8002868:	2316      	movs	r3, #22
 800286a:	6013      	str	r3, [r2, #0]
	return -1;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_exit>:

void _exit (int status)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ffe7 	bl	8002858 <_kill>
	while (1) {}		/* Make sure we hang here */
 800288a:	e7fe      	b.n	800288a <_exit+0x12>

0800288c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	e00a      	b.n	80028b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800289e:	f3af 8000 	nop.w
 80028a2:	4601      	mov	r1, r0
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	60ba      	str	r2, [r7, #8]
 80028aa:	b2ca      	uxtb	r2, r1
 80028ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3301      	adds	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	dbf0      	blt.n	800289e <_read+0x12>
	}

return len;
 80028bc:	687b      	ldr	r3, [r7, #4]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e009      	b.n	80028ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	60ba      	str	r2, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3301      	adds	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	dbf1      	blt.n	80028d8 <_write+0x12>
	}
	return len;
 80028f4:	687b      	ldr	r3, [r7, #4]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_close>:

int _close(int file)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
	return -1;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002926:	605a      	str	r2, [r3, #4]
	return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <_isatty>:

int _isatty(int file)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	return 1;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
	return 0;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <_sbrk+0x5c>)
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <_sbrk+0x60>)
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <_sbrk+0x64>)
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <_sbrk+0x68>)
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <_sbrk+0x64>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d207      	bcs.n	80029a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002998:	f023 f8a4 	bl	8025ae4 <__errno>
 800299c:	4602      	mov	r2, r0
 800299e:	230c      	movs	r3, #12
 80029a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	e009      	b.n	80029bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <_sbrk+0x64>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <_sbrk+0x64>)
 80029b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20050000 	.word	0x20050000
 80029c8:	00000400 	.word	0x00000400
 80029cc:	20000394 	.word	0x20000394
 80029d0:	2000bbb0 	.word	0x2000bbb0

080029d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <SystemInit+0x28>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <SystemInit+0x28>)
 80029e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SystemInit+0x28>)
 80029ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ee:	609a      	str	r2, [r3, #8]
#endif
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a06:	e003      	b.n	8002a10 <LoopCopyDataInit>

08002a08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a0e:	3104      	adds	r1, #4

08002a10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a10:	480b      	ldr	r0, [pc, #44]	; (8002a40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a18:	d3f6      	bcc.n	8002a08 <CopyDataInit>
  ldr  r2, =_sbss
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a1c:	e002      	b.n	8002a24 <LoopFillZerobss>

08002a1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a20:	f842 3b04 	str.w	r3, [r2], #4

08002a24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a28:	d3f9      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a2a:	f7ff ffd3 	bl	80029d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2e:	f023 f871 	bl	8025b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a32:	f7fe f8f3 	bl	8000c1c <main>
  bx  lr    
 8002a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002a3c:	080e1774 	.word	0x080e1774
  ldr  r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a44:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002a48:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002a4c:	2000bbac 	.word	0x2000bbac

08002a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a50:	e7fe      	b.n	8002a50 <ADC_IRQHandler>

08002a52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a56:	2003      	movs	r0, #3
 8002a58:	f000 fba1 	bl	800319e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7ff fe59 	bl	8002714 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a62:	f7ff f8ff 	bl	8001c64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x20>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_IncTick+0x24>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_IncTick+0x24>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000034 	.word	0x20000034
 8002a90:	2000bba4 	.word	0x2000bba4

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000bba4 	.word	0x2000bba4

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d005      	beq.n	8002ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_Delay+0x40>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad2:	bf00      	nop
 8002ad4:	f7ff ffde 	bl	8002a94 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8f7      	bhi.n	8002ad4 <HAL_Delay+0x28>
  {
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000034 	.word	0x20000034

08002af0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e031      	b.n	8002b6a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff f8d0 	bl	8001cb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_ADC_Init+0x84>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f964 	bl	8002e0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5a:	e001      	b.n	8002b60 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	ffffeefd 	.word	0xffffeefd

08002b78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x1c>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e12a      	b.n	8002dea <HAL_ADC_ConfigChannel+0x272>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d93a      	bls.n	8002c1a <HAL_ADC_ConfigChannel+0xa2>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bac:	d035      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68d9      	ldr	r1, [r3, #12]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a87      	ldr	r2, [pc, #540]	; (8002df8 <HAL_ADC_ConfigChannel+0x280>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68d9      	ldr	r1, [r3, #12]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	061a      	lsls	r2, r3, #24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bf2:	e035      	b.n	8002c60 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68d9      	ldr	r1, [r3, #12]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4403      	add	r3, r0
 8002c0c:	3b1e      	subs	r3, #30
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c18:	e022      	b.n	8002c60 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6919      	ldr	r1, [r3, #16]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	2207      	movs	r2, #7
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43da      	mvns	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6919      	ldr	r1, [r3, #16]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4603      	mov	r3, r0
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4403      	add	r3, r0
 8002c56:	409a      	lsls	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d824      	bhi.n	8002cb2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	3b05      	subs	r3, #5
 8002c7a:	221f      	movs	r2, #31
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43da      	mvns	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	400a      	ands	r2, r1
 8002c88:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b05      	subs	r3, #5
 8002ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb0:	e04c      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d824      	bhi.n	8002d04 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	3b23      	subs	r3, #35	; 0x23
 8002ccc:	221f      	movs	r2, #31
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	400a      	ands	r2, r1
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b23      	subs	r3, #35	; 0x23
 8002cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
 8002d02:	e023      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b41      	subs	r3, #65	; 0x41
 8002d16:	221f      	movs	r2, #31
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	400a      	ands	r2, r1
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b41      	subs	r3, #65	; 0x41
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_ADC_ConfigChannel+0x284>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1f4>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d5e:	d105      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002d66:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d6a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a22      	ldr	r2, [pc, #136]	; (8002dfc <HAL_ADC_ConfigChannel+0x284>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d109      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x212>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b12      	cmp	r3, #18
 8002d7c:	d105      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d88:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_ADC_ConfigChannel+0x284>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d125      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x268>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_ADC_ConfigChannel+0x280>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x22e>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b11      	cmp	r3, #17
 8002da4:	d11c      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002db0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_ADC_ConfigChannel+0x280>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d111      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_ADC_ConfigChannel+0x28c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_ADC_ConfigChannel+0x290>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9a      	lsrs	r2, r3, #18
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dd2:	e002      	b.n	8002dda <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f9      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	10000012 	.word	0x10000012
 8002dfc:	40012000 	.word	0x40012000
 8002e00:	40012300 	.word	0x40012300
 8002e04:	2000002c 	.word	0x2000002c
 8002e08:	431bde83 	.word	0x431bde83

08002e0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e14:	4b78      	ldr	r3, [pc, #480]	; (8002ff8 <ADC_Init+0x1ec>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a77      	ldr	r2, [pc, #476]	; (8002ff8 <ADC_Init+0x1ec>)
 8002e1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e1e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e20:	4b75      	ldr	r3, [pc, #468]	; (8002ff8 <ADC_Init+0x1ec>)
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4973      	ldr	r1, [pc, #460]	; (8002ff8 <ADC_Init+0x1ec>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <ADC_Init+0x1f0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	e00f      	b.n	8002f06 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0202 	bic.w	r2, r2, #2
 8002f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6899      	ldr	r1, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	005a      	lsls	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01b      	beq.n	8002f6c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	035a      	lsls	r2, r3, #13
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	e007      	b.n	8002f7c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	051a      	lsls	r2, r3, #20
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fbe:	025a      	lsls	r2, r3, #9
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	029a      	lsls	r2, r3, #10
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012300 	.word	0x40012300
 8002ffc:	0f000001 	.word	0x0f000001

08003000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <__NVIC_SetPriorityGrouping+0x40>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	4313      	orrs	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x40>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00
 8003044:	05fa0000 	.word	0x05fa0000

08003048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <__NVIC_GetPriorityGrouping+0x18>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 0307 	and.w	r3, r3, #7
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db0b      	blt.n	800308e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4907      	ldr	r1, [pc, #28]	; (800309c <__NVIC_EnableIRQ+0x38>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2001      	movs	r0, #1
 8003086:	fa00 f202 	lsl.w	r2, r0, r2
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100

080030a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db10      	blt.n	80030d4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4909      	ldr	r1, [pc, #36]	; (80030e0 <__NVIC_DisableIRQ+0x40>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	3320      	adds	r3, #32
 80030c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100

080030e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	db0a      	blt.n	800310e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	490c      	ldr	r1, [pc, #48]	; (8003130 <__NVIC_SetPriority+0x4c>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	440b      	add	r3, r1
 8003108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800310c:	e00a      	b.n	8003124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <__NVIC_SetPriority+0x50>)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	3b04      	subs	r3, #4
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	440b      	add	r3, r1
 8003122:	761a      	strb	r2, [r3, #24]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000e100 	.word	0xe000e100
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f1c3 0307 	rsb	r3, r3, #7
 8003152:	2b04      	cmp	r3, #4
 8003154:	bf28      	it	cs
 8003156:	2304      	movcs	r3, #4
 8003158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3304      	adds	r3, #4
 800315e:	2b06      	cmp	r3, #6
 8003160:	d902      	bls.n	8003168 <NVIC_EncodePriority+0x30>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3b03      	subs	r3, #3
 8003166:	e000      	b.n	800316a <NVIC_EncodePriority+0x32>
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	f04f 32ff 	mov.w	r2, #4294967295
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	401a      	ands	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003180:	f04f 31ff 	mov.w	r1, #4294967295
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43d9      	mvns	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	4313      	orrs	r3, r2
         );
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	; 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ff2a 	bl	8003000 <__NVIC_SetPriorityGrouping>
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c6:	f7ff ff3f 	bl	8003048 <__NVIC_GetPriorityGrouping>
 80031ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	6978      	ldr	r0, [r7, #20]
 80031d2:	f7ff ffb1 	bl	8003138 <NVIC_EncodePriority>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff80 	bl	80030e4 <__NVIC_SetPriority>
}
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff32 	bl	8003064 <__NVIC_EnableIRQ>
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff42 	bl	80030a0 <__NVIC_DisableIRQ>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e054      	b.n	80032e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f5b      	ldrb	r3, [r3, #29]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe fd8e 	bl	8001d68 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	791b      	ldrb	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <HAL_CRC_Init+0xc4>)
 8003260:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0218 	bic.w	r2, r2, #24
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e00c      	b.n	800328e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	461a      	mov	r2, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f834 	bl	80032ec <HAL_CRCEx_Polynomial_Set>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e028      	b.n	80032e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	795b      	ldrb	r3, [r3, #5]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	611a      	str	r2, [r3, #16]
 80032a0:	e004      	b.n	80032ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6912      	ldr	r2, [r2, #16]
 80032aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	04c11db7 	.word	0x04c11db7

080032ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032fc:	231f      	movs	r3, #31
 80032fe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003300:	bf00      	nop
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	613a      	str	r2, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_CRCEx_Polynomial_Set+0x34>
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b18      	cmp	r3, #24
 8003324:	d846      	bhi.n	80033b4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	080033bb 	.word	0x080033bb
 8003330:	080033b5 	.word	0x080033b5
 8003334:	080033b5 	.word	0x080033b5
 8003338:	080033b5 	.word	0x080033b5
 800333c:	080033b5 	.word	0x080033b5
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033b5 	.word	0x080033b5
 8003348:	080033b5 	.word	0x080033b5
 800334c:	080033a9 	.word	0x080033a9
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	080033b5 	.word	0x080033b5
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080033b5 	.word	0x080033b5
 800336c:	0800339d 	.word	0x0800339d
 8003370:	080033b5 	.word	0x080033b5
 8003374:	080033b5 	.word	0x080033b5
 8003378:	080033b5 	.word	0x080033b5
 800337c:	080033b5 	.word	0x080033b5
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033b5 	.word	0x080033b5
 8003388:	080033b5 	.word	0x080033b5
 800338c:	08003391 	.word	0x08003391
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d913      	bls.n	80033be <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800339a:	e010      	b.n	80033be <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b07      	cmp	r3, #7
 80033a0:	d90f      	bls.n	80033c2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80033a6:	e00c      	b.n	80033c2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d90b      	bls.n	80033c6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80033b2:	e008      	b.n	80033c6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
      break;
 80033b8:	e006      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 0118 	bic.w	r1, r3, #24
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e069      	b.n	80034de <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fcc6 	bl	8001da8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <HAL_DCMI_Init+0xf0>)
 800343e:	400b      	ands	r3, r1
 8003440:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003456:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003462:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800346e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800347a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003486:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b10      	cmp	r3, #16
 8003496:	d112      	bne.n	80034be <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7f1b      	ldrb	r3, [r3, #28]
 800349c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7f5b      	ldrb	r3, [r3, #29]
 80034a2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80034a4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7f9b      	ldrb	r3, [r3, #30]
 80034aa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80034ac:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7fdb      	ldrb	r3, [r3, #31]
 80034b4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80034ba:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80034bc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 021e 	orr.w	r2, r2, #30
 80034cc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	ffe0f007 	.word	0xffe0f007

080034ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00c      	b.n	8003524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2205      	movs	r2, #5
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e039      	b.n	80035b6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fce4 	bl	8001f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	f023 0107 	bic.w	r1, r3, #7
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_DMA2D_Init+0x90>)
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d1      	ldr	r1, [r2, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	ffffc000 	.word	0xffffc000

080035c4 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e05f      	b.n	8003696 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80035d6:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_DMA2D_DeInit+0xdc>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d02e      	beq.n	8003640 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8c1 	bl	8003778 <HAL_DMA2D_Abort>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d021      	beq.n	8003640 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e04a      	b.n	8003696 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d108      	bne.n	8003620 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800360e:	2100      	movs	r1, #0
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8f7 	bl	8003804 <HAL_DMA2D_CLUTLoading_Abort>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e03a      	b.n	8003696 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b20      	cmp	r3, #32
 800362c:	d108      	bne.n	8003640 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800362e:	2101      	movs	r1, #1
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8e7 	bl	8003804 <HAL_DMA2D_CLUTLoading_Abort>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e02a      	b.n	8003696 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	223f      	movs	r2, #63	; 0x3f
 800364e:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2200      	movs	r2, #0
 8003666:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fe fc79 	bl	8001f70 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_DMA2D_Start_IT+0x1c>
 80036bc:	2302      	movs	r3, #2
 80036be:	e020      	b.n	8003702 <HAL_DMA2D_Start_IT+0x5e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa84 	bl	8003be8 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80036ee:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b086      	sub	sp, #24
 800370e:	af02      	add	r7, sp, #8
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003722:	2302      	movs	r3, #2
 8003724:	e024      	b.n	8003770 <HAL_DMA2D_BlendingStart_IT+0x66>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fa4d 	bl	8003be8 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800375c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0205 	bic.w	r2, r3, #5
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0204 	orr.w	r2, r2, #4
 8003792:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003794:	f7ff f97e 	bl	8002a94 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800379a:	e017      	b.n	80037cc <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800379c:	f7ff f97a 	bl	8002a94 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037aa:	d90f      	bls.n	80037cc <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2203      	movs	r2, #3
 80037bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e017      	b.n	80037fc <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e0      	bne.n	800379c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80037e8:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0204 	orr.w	r2, r2, #4
 8003824:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d103      	bne.n	8003834 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	331c      	adds	r3, #28
 8003832:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003834:	f7ff f92e 	bl	8002a94 <HAL_GetTick>
 8003838:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800383a:	e017      	b.n	800386c <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800383c:	f7ff f92a 	bl	8002a94 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800384a:	d90f      	bls.n	800386c <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2203      	movs	r2, #3
 800385c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e016      	b.n	800389a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e1      	bne.n	800383c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8003886:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d026      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d021      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038dc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d026      	beq.n	800396a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d021      	beq.n	800396a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003934:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2220      	movs	r2, #32
 800393c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2204      	movs	r2, #4
 800394e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d026      	beq.n	80039c2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397a:	2b00      	cmp	r3, #0
 800397c:	d021      	beq.n	80039c2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2208      	movs	r2, #8
 8003994:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	f043 0204 	orr.w	r2, r3, #4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2204      	movs	r2, #4
 80039ec:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f853 	bl	8003a9a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d024      	beq.n	8003a48 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01f      	beq.n	8003a48 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01f      	beq.n	8003a92 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01a      	beq.n	8003a92 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2210      	movs	r2, #16
 8003a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f80e 	bl	8003aae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_DMA2D_ConfigLayer+0x20>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e079      	b.n	8003bd8 <HAL_DMA2D_ConfigLayer+0x114>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	3318      	adds	r3, #24
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	041b      	lsls	r3, r3, #16
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b0e:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b10:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b0a      	cmp	r3, #10
 8003b18:	d003      	beq.n	8003b22 <HAL_DMA2D_ConfigLayer+0x5e>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b09      	cmp	r3, #9
 8003b20:	d107      	bne.n	8003b32 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e005      	b.n	8003b3e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d120      	bne.n	8003b86 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	ea02 0103 	and.w	r1, r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	d003      	beq.n	8003b76 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b09      	cmp	r3, #9
 8003b74:	d127      	bne.n	8003bc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
 8003b84:	e01f      	b.n	8003bc6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	ea02 0103 	and.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b0a      	cmp	r3, #10
 8003bae:	d003      	beq.n	8003bb8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	d106      	bne.n	8003bc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bc4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	ff03000f 	.word	0xff03000f

08003be8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b08b      	sub	sp, #44	; 0x2c
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	041a      	lsls	r2, r3, #16
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c20:	d174      	bne.n	8003d0c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c28:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c30:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c38:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d108      	bne.n	8003c5a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	e053      	b.n	8003d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d106      	bne.n	8003c70 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	e048      	b.n	8003d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d111      	bne.n	8003c9c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	0cdb      	lsrs	r3, r3, #19
 8003c7c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	0a9b      	lsrs	r3, r3, #10
 8003c82:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	02db      	lsls	r3, r3, #11
 8003c92:	4313      	orrs	r3, r2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	e032      	b.n	8003d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d117      	bne.n	8003cd4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	0fdb      	lsrs	r3, r3, #31
 8003ca8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	0cdb      	lsrs	r3, r3, #19
 8003cae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	0adb      	lsrs	r3, r3, #11
 8003cb4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	03db      	lsls	r3, r3, #15
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	e016      	b.n	8003d02 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	0f1b      	lsrs	r3, r3, #28
 8003cd8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	0d1b      	lsrs	r3, r3, #20
 8003cde:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	0b1b      	lsrs	r3, r3, #12
 8003ce4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	011a      	lsls	r2, r3, #4
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	031b      	lsls	r3, r3, #12
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003d0a:	e003      	b.n	8003d14 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	60da      	str	r2, [r3, #12]
}
 8003d14:	bf00      	nop
 8003d16:	372c      	adds	r7, #44	; 0x2c
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e175      	b.n	800402c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 8164 	bne.w	8004026 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d00b      	beq.n	8003d7e <HAL_GPIO_Init+0x5e>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d007      	beq.n	8003d7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d72:	2b11      	cmp	r3, #17
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b12      	cmp	r3, #18
 8003d7c:	d130      	bne.n	8003de0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	2203      	movs	r2, #3
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db4:	2201      	movs	r2, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 0201 	and.w	r2, r3, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x100>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b12      	cmp	r3, #18
 8003e1e:	d123      	bne.n	8003e68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80be 	beq.w	8004026 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	4b65      	ldr	r3, [pc, #404]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	4a64      	ldr	r2, [pc, #400]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb6:	4b62      	ldr	r3, [pc, #392]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ec2:	4a60      	ldr	r2, [pc, #384]	; (8004044 <HAL_GPIO_Init+0x324>)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	3302      	adds	r3, #2
 8003eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	220f      	movs	r2, #15
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_GPIO_Init+0x328>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d037      	beq.n	8003f5e <HAL_GPIO_Init+0x23e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_GPIO_Init+0x32c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_GPIO_Init+0x23a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a55      	ldr	r2, [pc, #340]	; (8004050 <HAL_GPIO_Init+0x330>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d02b      	beq.n	8003f56 <HAL_GPIO_Init+0x236>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a54      	ldr	r2, [pc, #336]	; (8004054 <HAL_GPIO_Init+0x334>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d025      	beq.n	8003f52 <HAL_GPIO_Init+0x232>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a53      	ldr	r2, [pc, #332]	; (8004058 <HAL_GPIO_Init+0x338>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01f      	beq.n	8003f4e <HAL_GPIO_Init+0x22e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_GPIO_Init+0x33c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d019      	beq.n	8003f4a <HAL_GPIO_Init+0x22a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a51      	ldr	r2, [pc, #324]	; (8004060 <HAL_GPIO_Init+0x340>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_GPIO_Init+0x226>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a50      	ldr	r2, [pc, #320]	; (8004064 <HAL_GPIO_Init+0x344>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <HAL_GPIO_Init+0x222>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4f      	ldr	r2, [pc, #316]	; (8004068 <HAL_GPIO_Init+0x348>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <HAL_GPIO_Init+0x21e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4e      	ldr	r2, [pc, #312]	; (800406c <HAL_GPIO_Init+0x34c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_GPIO_Init+0x21a>
 8003f36:	2309      	movs	r3, #9
 8003f38:	e012      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	e010      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	e00e      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f42:	2307      	movs	r3, #7
 8003f44:	e00c      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f46:	2306      	movs	r3, #6
 8003f48:	e00a      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f4a:	2305      	movs	r3, #5
 8003f4c:	e008      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f4e:	2304      	movs	r3, #4
 8003f50:	e006      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f52:	2303      	movs	r3, #3
 8003f54:	e004      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e002      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	f002 0203 	and.w	r2, r2, #3
 8003f66:	0092      	lsls	r2, r2, #2
 8003f68:	4093      	lsls	r3, r2
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f70:	4934      	ldr	r1, [pc, #208]	; (8004044 <HAL_GPIO_Init+0x324>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	3302      	adds	r3, #2
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f7e:	4b3c      	ldr	r3, [pc, #240]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa2:	4a33      	ldr	r2, [pc, #204]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fa8:	4b31      	ldr	r3, [pc, #196]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fcc:	4a28      	ldr	r2, [pc, #160]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fd2:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <HAL_GPIO_Init+0x350>)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3301      	adds	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	f67f ae86 	bls.w	8003d40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004034:	bf00      	nop
 8004036:	3724      	adds	r7, #36	; 0x24
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40023800 	.word	0x40023800
 8004044:	40013800 	.word	0x40013800
 8004048:	40020000 	.word	0x40020000
 800404c:	40020400 	.word	0x40020400
 8004050:	40020800 	.word	0x40020800
 8004054:	40020c00 	.word	0x40020c00
 8004058:	40021000 	.word	0x40021000
 800405c:	40021400 	.word	0x40021400
 8004060:	40021800 	.word	0x40021800
 8004064:	40021c00 	.word	0x40021c00
 8004068:	40022000 	.word	0x40022000
 800406c:	40022400 	.word	0x40022400
 8004070:	40013c00 	.word	0x40013c00

08004074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e0d9      	b.n	8004244 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004090:	2201      	movs	r2, #1
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	f040 80c9 	bne.w	800423e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80040ac:	4a6a      	ldr	r2, [pc, #424]	; (8004258 <HAL_GPIO_DeInit+0x1e4>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	220f      	movs	r2, #15
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a62      	ldr	r2, [pc, #392]	; (800425c <HAL_GPIO_DeInit+0x1e8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d037      	beq.n	8004146 <HAL_GPIO_DeInit+0xd2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a61      	ldr	r2, [pc, #388]	; (8004260 <HAL_GPIO_DeInit+0x1ec>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d031      	beq.n	8004142 <HAL_GPIO_DeInit+0xce>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a60      	ldr	r2, [pc, #384]	; (8004264 <HAL_GPIO_DeInit+0x1f0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d02b      	beq.n	800413e <HAL_GPIO_DeInit+0xca>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a5f      	ldr	r2, [pc, #380]	; (8004268 <HAL_GPIO_DeInit+0x1f4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d025      	beq.n	800413a <HAL_GPIO_DeInit+0xc6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_GPIO_DeInit+0x1f8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01f      	beq.n	8004136 <HAL_GPIO_DeInit+0xc2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a5d      	ldr	r2, [pc, #372]	; (8004270 <HAL_GPIO_DeInit+0x1fc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d019      	beq.n	8004132 <HAL_GPIO_DeInit+0xbe>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a5c      	ldr	r2, [pc, #368]	; (8004274 <HAL_GPIO_DeInit+0x200>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_GPIO_DeInit+0xba>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a5b      	ldr	r2, [pc, #364]	; (8004278 <HAL_GPIO_DeInit+0x204>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00d      	beq.n	800412a <HAL_GPIO_DeInit+0xb6>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a5a      	ldr	r2, [pc, #360]	; (800427c <HAL_GPIO_DeInit+0x208>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <HAL_GPIO_DeInit+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a59      	ldr	r2, [pc, #356]	; (8004280 <HAL_GPIO_DeInit+0x20c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_GPIO_DeInit+0xae>
 800411e:	2309      	movs	r3, #9
 8004120:	e012      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004122:	230a      	movs	r3, #10
 8004124:	e010      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004126:	2308      	movs	r3, #8
 8004128:	e00e      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800412a:	2307      	movs	r3, #7
 800412c:	e00c      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800412e:	2306      	movs	r3, #6
 8004130:	e00a      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004132:	2305      	movs	r3, #5
 8004134:	e008      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004136:	2304      	movs	r3, #4
 8004138:	e006      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800413a:	2303      	movs	r3, #3
 800413c:	e004      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800413e:	2302      	movs	r3, #2
 8004140:	e002      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004146:	2300      	movs	r3, #0
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	f002 0203 	and.w	r2, r2, #3
 800414e:	0092      	lsls	r2, r2, #2
 8004150:	4093      	lsls	r3, r2
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d132      	bne.n	80041be <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004158:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	4948      	ldr	r1, [pc, #288]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004162:	4013      	ands	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	43db      	mvns	r3, r3
 800416e:	4945      	ldr	r1, [pc, #276]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004170:	4013      	ands	r3, r2
 8004172:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	4941      	ldr	r1, [pc, #260]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 800417e:	4013      	ands	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	493e      	ldr	r1, [pc, #248]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 800418c:	4013      	ands	r3, r2
 800418e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	220f      	movs	r2, #15
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80041a0:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <HAL_GPIO_DeInit+0x1e4>)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	3302      	adds	r3, #2
 80041a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	4829      	ldr	r0, [pc, #164]	; (8004258 <HAL_GPIO_DeInit+0x1e4>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	400a      	ands	r2, r1
 80041b8:	3302      	adds	r3, #2
 80041ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2103      	movs	r1, #3
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	401a      	ands	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	220f      	movs	r2, #15
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	08d2      	lsrs	r2, r2, #3
 80041f4:	4019      	ands	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3208      	adds	r2, #8
 80041fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2103      	movs	r1, #3
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	2101      	movs	r1, #1
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	401a      	ands	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2103      	movs	r1, #3
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	401a      	ands	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	3301      	adds	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	f67f af22 	bls.w	8004090 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40013800 	.word	0x40013800
 800425c:	40020000 	.word	0x40020000
 8004260:	40020400 	.word	0x40020400
 8004264:	40020800 	.word	0x40020800
 8004268:	40020c00 	.word	0x40020c00
 800426c:	40021000 	.word	0x40021000
 8004270:	40021400 	.word	0x40021400
 8004274:	40021800 	.word	0x40021800
 8004278:	40021c00 	.word	0x40021c00
 800427c:	40022000 	.word	0x40022000
 8004280:	40022400 	.word	0x40022400
 8004284:	40013c00 	.word	0x40013c00

08004288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
 8004294:	4613      	mov	r3, r2
 8004296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004298:	787b      	ldrb	r3, [r7, #1]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042a4:	e003      	b.n	80042ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042a6:	887b      	ldrh	r3, [r7, #2]
 80042a8:	041a      	lsls	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	619a      	str	r2, [r3, #24]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07f      	b.n	80043ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd fe5e 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800430c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d107      	bne.n	8004336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	e006      	b.n	8004344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d104      	bne.n	8004356 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_I2C_Init+0x11c>)
 8004362:	430b      	orrs	r3, r1
 8004364:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004374:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	ea42 0103 	orr.w	r1, r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69d9      	ldr	r1, [r3, #28]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	02008000 	.word	0x02008000

080043dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e021      	b.n	8004432 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2224      	movs	r2, #36	; 0x24
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fe44 	bl	8002094 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	4608      	mov	r0, r1
 8004446:	4611      	mov	r1, r2
 8004448:	461a      	mov	r2, r3
 800444a:	4603      	mov	r3, r0
 800444c:	817b      	strh	r3, [r7, #10]
 800444e:	460b      	mov	r3, r1
 8004450:	813b      	strh	r3, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b20      	cmp	r3, #32
 8004460:	f040 80f9 	bne.w	8004656 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_I2C_Mem_Write+0x34>
 800446a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0ed      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_I2C_Mem_Write+0x4e>
 8004486:	2302      	movs	r3, #2
 8004488:	e0e6      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004492:	f7fe faff 	bl	8002a94 <HAL_GetTick>
 8004496:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	2319      	movs	r3, #25
 800449e:	2201      	movs	r2, #1
 80044a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fad1 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0d1      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2221      	movs	r2, #33	; 0x21
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044dc:	88f8      	ldrh	r0, [r7, #6]
 80044de:	893a      	ldrh	r2, [r7, #8]
 80044e0:	8979      	ldrh	r1, [r7, #10]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	4603      	mov	r3, r0
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f9e1 	bl	80048b4 <I2C_RequestMemoryWrite>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0a9      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2bff      	cmp	r3, #255	; 0xff
 800450c:	d90e      	bls.n	800452c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	22ff      	movs	r2, #255	; 0xff
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	b2da      	uxtb	r2, r3
 800451a:	8979      	ldrh	r1, [r7, #10]
 800451c:	2300      	movs	r3, #0
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fbb3 	bl	8004c90 <I2C_TransferConfig>
 800452a:	e00f      	b.n	800454c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453a:	b2da      	uxtb	r2, r3
 800453c:	8979      	ldrh	r1, [r7, #10]
 800453e:	2300      	movs	r3, #0
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fba2 	bl	8004c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fabb 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e07b      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d034      	beq.n	8004604 <HAL_I2C_Mem_Write+0x1c8>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d130      	bne.n	8004604 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fa4d 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e04d      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2bff      	cmp	r3, #255	; 0xff
 80045c4:	d90e      	bls.n	80045e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	22ff      	movs	r2, #255	; 0xff
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	8979      	ldrh	r1, [r7, #10]
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fb57 	bl	8004c90 <I2C_TransferConfig>
 80045e2:	e00f      	b.n	8004604 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fb46 	bl	8004c90 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d19e      	bne.n	800454c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fa9a 	bl	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e01a      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2220      	movs	r2, #32
 8004628:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_I2C_Mem_Write+0x224>)
 8004636:	400b      	ands	r3, r1
 8004638:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	fe00e800 	.word	0xfe00e800

08004664 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	461a      	mov	r2, r3
 8004672:	4603      	mov	r3, r0
 8004674:	817b      	strh	r3, [r7, #10]
 8004676:	460b      	mov	r3, r1
 8004678:	813b      	strh	r3, [r7, #8]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b20      	cmp	r3, #32
 8004688:	f040 80fd 	bne.w	8004886 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_I2C_Mem_Read+0x34>
 8004692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0f1      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_I2C_Mem_Read+0x4e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e0ea      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ba:	f7fe f9eb 	bl	8002a94 <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2319      	movs	r3, #25
 80046c6:	2201      	movs	r2, #1
 80046c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f9bd 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0d5      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2222      	movs	r2, #34	; 0x22
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2240      	movs	r2, #64	; 0x40
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004704:	88f8      	ldrh	r0, [r7, #6]
 8004706:	893a      	ldrh	r2, [r7, #8]
 8004708:	8979      	ldrh	r1, [r7, #10]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	4603      	mov	r3, r0
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f921 	bl	800495c <I2C_RequestMemoryRead>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0ad      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2bff      	cmp	r3, #255	; 0xff
 8004734:	d90e      	bls.n	8004754 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	b2da      	uxtb	r2, r3
 8004742:	8979      	ldrh	r1, [r7, #10]
 8004744:	4b52      	ldr	r3, [pc, #328]	; (8004890 <HAL_I2C_Mem_Read+0x22c>)
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fa9f 	bl	8004c90 <I2C_TransferConfig>
 8004752:	e00f      	b.n	8004774 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004762:	b2da      	uxtb	r2, r3
 8004764:	8979      	ldrh	r1, [r7, #10]
 8004766:	4b4a      	ldr	r3, [pc, #296]	; (8004890 <HAL_I2C_Mem_Read+0x22c>)
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa8e 	bl	8004c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2200      	movs	r2, #0
 800477c:	2104      	movs	r1, #4
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f964 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07c      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d034      	beq.n	8004834 <HAL_I2C_Mem_Read+0x1d0>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d130      	bne.n	8004834 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	2200      	movs	r2, #0
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f935 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e04d      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2bff      	cmp	r3, #255	; 0xff
 80047f4:	d90e      	bls.n	8004814 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	22ff      	movs	r2, #255	; 0xff
 80047fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	b2da      	uxtb	r2, r3
 8004802:	8979      	ldrh	r1, [r7, #10]
 8004804:	2300      	movs	r3, #0
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fa3f 	bl	8004c90 <I2C_TransferConfig>
 8004812:	e00f      	b.n	8004834 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	b2da      	uxtb	r2, r3
 8004824:	8979      	ldrh	r1, [r7, #10]
 8004826:	2300      	movs	r3, #0
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fa2e 	bl	8004c90 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d19a      	bne.n	8004774 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f982 	bl	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e01a      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2220      	movs	r2, #32
 8004858:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_I2C_Mem_Read+0x230>)
 8004866:	400b      	ands	r3, r1
 8004868:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004886:	2302      	movs	r3, #2
  }
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	80002400 	.word	0x80002400
 8004894:	fe00e800 	.word	0xfe00e800

08004898 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a6:	b2db      	uxtb	r3, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	4608      	mov	r0, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	461a      	mov	r2, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	817b      	strh	r3, [r7, #10]
 80048c6:	460b      	mov	r3, r1
 80048c8:	813b      	strh	r3, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	8979      	ldrh	r1, [r7, #10]
 80048d4:	4b20      	ldr	r3, [pc, #128]	; (8004958 <I2C_RequestMemoryWrite+0xa4>)
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f9d7 	bl	8004c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	69b9      	ldr	r1, [r7, #24]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f8f0 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e02c      	b.n	8004950 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048fc:	893b      	ldrh	r3, [r7, #8]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
 8004906:	e015      	b.n	8004934 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004908:	893b      	ldrh	r3, [r7, #8]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	b29b      	uxth	r3, r3
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	69b9      	ldr	r1, [r7, #24]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f8d6 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e012      	b.n	8004950 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800492a:	893b      	ldrh	r3, [r7, #8]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2200      	movs	r2, #0
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f884 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	80002000 	.word	0x80002000

0800495c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	460b      	mov	r3, r1
 8004970:	813b      	strh	r3, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	8979      	ldrh	r1, [r7, #10]
 800497c:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <I2C_RequestMemoryRead+0xa4>)
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2300      	movs	r3, #0
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f984 	bl	8004c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	69b9      	ldr	r1, [r7, #24]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f89d 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e02c      	b.n	80049f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d105      	bne.n	80049ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a2:	893b      	ldrh	r3, [r7, #8]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
 80049ac:	e015      	b.n	80049da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049ae:	893b      	ldrh	r3, [r7, #8]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	69b9      	ldr	r1, [r7, #24]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f883 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e012      	b.n	80049f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049d0:	893b      	ldrh	r3, [r7, #8]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2140      	movs	r1, #64	; 0x40
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f831 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	80002000 	.word	0x80002000

08004a04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d007      	beq.n	8004a40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	619a      	str	r2, [r3, #24]
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a5c:	e022      	b.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d01e      	beq.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fe f815 	bl	8002a94 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d113      	bne.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e00f      	b.n	8004ac4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d0cd      	beq.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ad8:	e02c      	b.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f870 	bl	8004bc4 <I2C_IsAcknowledgeFailed>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e02a      	b.n	8004b44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d01e      	beq.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af6:	f7fd ffcd 	bl	8002a94 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d113      	bne.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e007      	b.n	8004b44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d1cb      	bne.n	8004ada <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b58:	e028      	b.n	8004bac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f830 	bl	8004bc4 <I2C_IsAcknowledgeFailed>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e026      	b.n	8004bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fd ff91 	bl	8002a94 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d113      	bne.n	8004bac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e007      	b.n	8004bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d1cf      	bne.n	8004b5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d151      	bne.n	8004c82 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bde:	e022      	b.n	8004c26 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d01e      	beq.n	8004c26 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fd ff54 	bl	8002a94 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_IsAcknowledgeFailed+0x3a>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d113      	bne.n	8004c26 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e02e      	b.n	8004c84 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d1d5      	bne.n	8004be0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2210      	movs	r2, #16
 8004c3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2220      	movs	r2, #32
 8004c42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff fedd 	bl	8004a04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <I2C_IsAcknowledgeFailed+0xc8>)
 8004c56:	400b      	ands	r3, r1
 8004c58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	fe00e800 	.word	0xfe00e800

08004c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	0d5b      	lsrs	r3, r3, #21
 8004cac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <I2C_TransferConfig+0x58>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	ea02 0103 	and.w	r1, r2, r3
 8004cba:	897b      	ldrh	r3, [r7, #10]
 8004cbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cc0:	7a7b      	ldrb	r3, [r7, #9]
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	03ff63ff 	.word	0x03ff63ff

08004cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d138      	bne.n	8004d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e032      	b.n	8004d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	; 0x24
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e000      	b.n	8004d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d139      	bne.n	8004e0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e033      	b.n	8004e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2224      	movs	r2, #36	; 0x24
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0bf      	b.n	8004fae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fd f962 	bl	800210c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e74:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b4a      	ldr	r3, [pc, #296]	; (8004fb8 <HAL_LTDC_Init+0x19c>)
 8004e90:	400b      	ands	r3, r1
 8004e92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6899      	ldr	r1, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68d9      	ldr	r1, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b3e      	ldr	r3, [pc, #248]	; (8004fb8 <HAL_LTDC_Init+0x19c>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68d9      	ldr	r1, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6919      	ldr	r1, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b33      	ldr	r3, [pc, #204]	; (8004fb8 <HAL_LTDC_Init+0x19c>)
 8004eec:	400b      	ands	r3, r1
 8004eee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6919      	ldr	r1, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6959      	ldr	r1, [r3, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <HAL_LTDC_Init+0x19c>)
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6959      	ldr	r1, [r3, #20]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0206 	orr.w	r2, r2, #6
 8004f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	f000f800 	.word	0xf000f800

08004fbc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d023      	beq.n	8005026 <HAL_LTDC_IRQHandler+0x6a>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01e      	beq.n	8005026 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0204 	bic.w	r2, r2, #4
 8004ff6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2204      	movs	r2, #4
 8005014:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f86f 	bl	8005104 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d023      	beq.n	8005078 <HAL_LTDC_IRQHandler+0xbc>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01e      	beq.n	8005078 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0202 	bic.w	r2, r2, #2
 8005048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005058:	f043 0202 	orr.w	r2, r3, #2
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2204      	movs	r2, #4
 8005066:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f846 	bl	8005104 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01b      	beq.n	80050ba <HAL_LTDC_IRQHandler+0xfe>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d016      	beq.n	80050ba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2201      	movs	r2, #1
 80050a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f010 fcdf 	bl	8015a78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01b      	beq.n	80050fc <HAL_LTDC_IRQHandler+0x140>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0208 	bic.w	r2, r2, #8
 80050dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2208      	movs	r2, #8
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f80e 	bl	8005118 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_LTDC_ConfigLayer+0x1a>
 8005142:	2302      	movs	r3, #2
 8005144:	e02c      	b.n	80051a0 <HAL_LTDC_ConfigLayer+0x74>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2134      	movs	r1, #52	; 0x34
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4614      	mov	r4, r2
 800516a:	461d      	mov	r5, r3
 800516c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800516e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f849 	bl	8005218 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bdb0      	pop	{r4, r5, r7, pc}

080051a8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_LTDC_ProgramLineEvent+0x18>
 80051bc:	2302      	movs	r3, #2
 80051be:	e023      	b.n	8005208 <HAL_LTDC_ProgramLineEvent+0x60>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80051e0:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40016800 	.word	0x40016800

08005218 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005234:	4413      	add	r3, r2
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	01db      	lsls	r3, r3, #7
 8005244:	4413      	add	r3, r2
 8005246:	3384      	adds	r3, #132	; 0x84
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	4611      	mov	r1, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	01d2      	lsls	r2, r2, #7
 8005254:	440a      	add	r2, r1
 8005256:	3284      	adds	r2, #132	; 0x84
 8005258:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800525c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526e:	4413      	add	r3, r2
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	01db      	lsls	r3, r3, #7
 800527c:	440b      	add	r3, r1
 800527e:	3384      	adds	r3, #132	; 0x84
 8005280:	4619      	mov	r1, r3
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005296:	4413      	add	r3, r2
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	01db      	lsls	r3, r3, #7
 80052a6:	4413      	add	r3, r2
 80052a8:	3384      	adds	r3, #132	; 0x84
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	4611      	mov	r1, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	01d2      	lsls	r2, r2, #7
 80052b6:	440a      	add	r2, r1
 80052b8:	3284      	adds	r2, #132	; 0x84
 80052ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ce:	4413      	add	r3, r2
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	01db      	lsls	r3, r3, #7
 80052dc:	440b      	add	r3, r1
 80052de:	3384      	adds	r3, #132	; 0x84
 80052e0:	4619      	mov	r1, r3
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	01db      	lsls	r3, r3, #7
 80052f2:	4413      	add	r3, r2
 80052f4:	3384      	adds	r3, #132	; 0x84
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	4611      	mov	r1, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	01d2      	lsls	r2, r2, #7
 8005302:	440a      	add	r2, r1
 8005304:	3284      	adds	r2, #132	; 0x84
 8005306:	f023 0307 	bic.w	r3, r3, #7
 800530a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	01db      	lsls	r3, r3, #7
 8005316:	4413      	add	r3, r2
 8005318:	3384      	adds	r3, #132	; 0x84
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	01db      	lsls	r3, r3, #7
 8005348:	4413      	add	r3, r2
 800534a:	3384      	adds	r3, #132	; 0x84
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	01db      	lsls	r3, r3, #7
 8005358:	4413      	add	r3, r2
 800535a:	3384      	adds	r3, #132	; 0x84
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005368:	461a      	mov	r2, r3
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	431a      	orrs	r2, r3
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4619      	mov	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	01db      	lsls	r3, r3, #7
 800537c:	440b      	add	r3, r1
 800537e:	3384      	adds	r3, #132	; 0x84
 8005380:	4619      	mov	r1, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	01db      	lsls	r3, r3, #7
 8005392:	4413      	add	r3, r2
 8005394:	3384      	adds	r3, #132	; 0x84
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	4611      	mov	r1, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	01d2      	lsls	r2, r2, #7
 80053a2:	440a      	add	r2, r1
 80053a4:	3284      	adds	r2, #132	; 0x84
 80053a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	01db      	lsls	r3, r3, #7
 80053b6:	4413      	add	r3, r2
 80053b8:	3384      	adds	r3, #132	; 0x84
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	01db      	lsls	r3, r3, #7
 80053cc:	4413      	add	r3, r2
 80053ce:	3384      	adds	r3, #132	; 0x84
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	01db      	lsls	r3, r3, #7
 80053dc:	440b      	add	r3, r1
 80053de:	3384      	adds	r3, #132	; 0x84
 80053e0:	4619      	mov	r1, r3
 80053e2:	4b58      	ldr	r3, [pc, #352]	; (8005544 <LTDC_SetConfig+0x32c>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	6809      	ldr	r1, [r1, #0]
 80053f4:	4608      	mov	r0, r1
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	01c9      	lsls	r1, r1, #7
 80053fa:	4401      	add	r1, r0
 80053fc:	3184      	adds	r1, #132	; 0x84
 80053fe:	4313      	orrs	r3, r2
 8005400:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	01db      	lsls	r3, r3, #7
 800540c:	4413      	add	r3, r2
 800540e:	3384      	adds	r3, #132	; 0x84
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	01db      	lsls	r3, r3, #7
 800541c:	4413      	add	r3, r2
 800541e:	3384      	adds	r3, #132	; 0x84
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	01db      	lsls	r3, r3, #7
 8005430:	4413      	add	r3, r2
 8005432:	3384      	adds	r3, #132	; 0x84
 8005434:	461a      	mov	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005444:	2304      	movs	r3, #4
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e01b      	b.n	8005482 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d102      	bne.n	8005458 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005452:	2303      	movs	r3, #3
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	e014      	b.n	8005482 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d00b      	beq.n	8005478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005464:	2b02      	cmp	r3, #2
 8005466:	d007      	beq.n	8005478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800546c:	2b03      	cmp	r3, #3
 800546e:	d003      	beq.n	8005478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005474:	2b07      	cmp	r3, #7
 8005476:	d102      	bne.n	800547e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005478:	2302      	movs	r3, #2
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	e001      	b.n	8005482 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	01db      	lsls	r3, r3, #7
 800548c:	4413      	add	r3, r2
 800548e:	3384      	adds	r3, #132	; 0x84
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	4611      	mov	r1, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	01d2      	lsls	r2, r2, #7
 800549c:	440a      	add	r2, r1
 800549e:	3284      	adds	r2, #132	; 0x84
 80054a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80054a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	041a      	lsls	r2, r3, #16
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1acb      	subs	r3, r1, r3
 80054bc:	69f9      	ldr	r1, [r7, #28]
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	3303      	adds	r3, #3
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	6809      	ldr	r1, [r1, #0]
 80054c8:	4608      	mov	r0, r1
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	01c9      	lsls	r1, r1, #7
 80054ce:	4401      	add	r1, r0
 80054d0:	3184      	adds	r1, #132	; 0x84
 80054d2:	4313      	orrs	r3, r2
 80054d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	01db      	lsls	r3, r3, #7
 80054e0:	4413      	add	r3, r2
 80054e2:	3384      	adds	r3, #132	; 0x84
 80054e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4619      	mov	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	440b      	add	r3, r1
 80054f2:	3384      	adds	r3, #132	; 0x84
 80054f4:	4619      	mov	r1, r3
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <LTDC_SetConfig+0x330>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	01db      	lsls	r3, r3, #7
 8005506:	4413      	add	r3, r2
 8005508:	3384      	adds	r3, #132	; 0x84
 800550a:	461a      	mov	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	01db      	lsls	r3, r3, #7
 800551c:	4413      	add	r3, r2
 800551e:	3384      	adds	r3, #132	; 0x84
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	4611      	mov	r1, r2
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	01d2      	lsls	r2, r2, #7
 800552c:	440a      	add	r2, r1
 800552e:	3284      	adds	r2, #132	; 0x84
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	6013      	str	r3, [r2, #0]
}
 8005536:	bf00      	nop
 8005538:	3724      	adds	r7, #36	; 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	fffff8f8 	.word	0xfffff8f8
 8005548:	fffff800 	.word	0xfffff800

0800554c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a04      	ldr	r2, [pc, #16]	; (8005568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555a:	6013      	str	r3, [r2, #0]
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40007000 	.word	0x40007000

0800556c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005576:	4b23      	ldr	r3, [pc, #140]	; (8005604 <HAL_PWREx_EnableOverDrive+0x98>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	4a22      	ldr	r2, [pc, #136]	; (8005604 <HAL_PWREx_EnableOverDrive+0x98>)
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005580:	6413      	str	r3, [r2, #64]	; 0x40
 8005582:	4b20      	ldr	r3, [pc, #128]	; (8005604 <HAL_PWREx_EnableOverDrive+0x98>)
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800558e:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005598:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800559a:	f7fd fa7b 	bl	8002a94 <HAL_GetTick>
 800559e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055a0:	e009      	b.n	80055b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055a2:	f7fd fa77 	bl	8002a94 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055b0:	d901      	bls.n	80055b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e022      	b.n	80055fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c2:	d1ee      	bne.n	80055a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055c4:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a0f      	ldr	r2, [pc, #60]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d0:	f7fd fa60 	bl	8002a94 <HAL_GetTick>
 80055d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055d6:	e009      	b.n	80055ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055d8:	f7fd fa5c 	bl	8002a94 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055e6:	d901      	bls.n	80055ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e007      	b.n	80055fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f8:	d1ee      	bne.n	80055d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40023800 	.word	0x40023800
 8005608:	40007000 	.word	0x40007000

0800560c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005614:	f7fd fa3e 	bl	8002a94 <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e067      	b.n	80056f4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fc fe2f 	bl	800229c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800563e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f85e 	bl	8005704 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	3b01      	subs	r3, #1
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	2120      	movs	r1, #32
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f856 	bl	8005720 <QSPI_WaitFlagStateUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d135      	bne.n	80056ea <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <HAL_QSPI_Init+0xf0>)
 8005686:	4013      	ands	r3, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6852      	ldr	r2, [r2, #4]
 800568c:	0611      	lsls	r1, r2, #24
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68d2      	ldr	r2, [r2, #12]
 8005692:	4311      	orrs	r1, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	69d2      	ldr	r2, [r2, #28]
 8005698:	4311      	orrs	r1, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6a12      	ldr	r2, [r2, #32]
 800569e:	4311      	orrs	r1, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	4b14      	ldr	r3, [pc, #80]	; (8005700 <HAL_QSPI_Init+0xf4>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6912      	ldr	r2, [r2, #16]
 80056b6:	0411      	lsls	r1, r2, #16
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6952      	ldr	r2, [r2, #20]
 80056bc:	4311      	orrs	r1, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6992      	ldr	r2, [r2, #24]
 80056c2:	4311      	orrs	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80056f2:	7afb      	ldrb	r3, [r7, #11]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	00ffff2f 	.word	0x00ffff2f
 8005700:	ffe0f8fe 	.word	0xffe0f8fe

08005704 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005730:	e01a      	b.n	8005768 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d016      	beq.n	8005768 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fd f9ab 	bl	8002a94 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2204      	movs	r2, #4
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575c:	f043 0201 	orr.w	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e00e      	b.n	8005786 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d1d6      	bne.n	8005732 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005798:	2300      	movs	r3, #0
 800579a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e291      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8087 	beq.w	80058c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057b4:	4b96      	ldr	r3, [pc, #600]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d00c      	beq.n	80057da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057c0:	4b93      	ldr	r3, [pc, #588]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d112      	bne.n	80057f2 <HAL_RCC_OscConfig+0x62>
 80057cc:	4b90      	ldr	r3, [pc, #576]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d8:	d10b      	bne.n	80057f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057da:	4b8d      	ldr	r3, [pc, #564]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d06c      	beq.n	80058c0 <HAL_RCC_OscConfig+0x130>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d168      	bne.n	80058c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e26b      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fa:	d106      	bne.n	800580a <HAL_RCC_OscConfig+0x7a>
 80057fc:	4b84      	ldr	r3, [pc, #528]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a83      	ldr	r2, [pc, #524]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e02e      	b.n	8005868 <HAL_RCC_OscConfig+0xd8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0x9c>
 8005812:	4b7f      	ldr	r3, [pc, #508]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a7e      	ldr	r2, [pc, #504]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4b7c      	ldr	r3, [pc, #496]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a7b      	ldr	r2, [pc, #492]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e01d      	b.n	8005868 <HAL_RCC_OscConfig+0xd8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005834:	d10c      	bne.n	8005850 <HAL_RCC_OscConfig+0xc0>
 8005836:	4b76      	ldr	r3, [pc, #472]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a75      	ldr	r2, [pc, #468]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800583c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	4b73      	ldr	r3, [pc, #460]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a72      	ldr	r2, [pc, #456]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00b      	b.n	8005868 <HAL_RCC_OscConfig+0xd8>
 8005850:	4b6f      	ldr	r3, [pc, #444]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a6e      	ldr	r2, [pc, #440]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b6c      	ldr	r3, [pc, #432]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a6b      	ldr	r2, [pc, #428]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fd f910 	bl	8002a94 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fd f90c 	bl	8002a94 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e21f      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588a:	4b61      	ldr	r3, [pc, #388]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0xe8>
 8005896:	e014      	b.n	80058c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd f8fc 	bl	8002a94 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fd f8f8 	bl	8002a94 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	; 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e20b      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b2:	4b57      	ldr	r3, [pc, #348]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x110>
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d069      	beq.n	80059a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ce:	4b50      	ldr	r3, [pc, #320]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058da:	4b4d      	ldr	r3, [pc, #308]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d11c      	bne.n	8005920 <HAL_RCC_OscConfig+0x190>
 80058e6:	4b4a      	ldr	r3, [pc, #296]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d116      	bne.n	8005920 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058f2:	4b47      	ldr	r3, [pc, #284]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <HAL_RCC_OscConfig+0x17a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d001      	beq.n	800590a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e1df      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590a:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	493d      	ldr	r1, [pc, #244]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591e:	e040      	b.n	80059a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d023      	beq.n	8005970 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005928:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a38      	ldr	r2, [pc, #224]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fd f8ae 	bl	8002a94 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593c:	f7fd f8aa 	bl	8002a94 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e1bd      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594e:	4b30      	ldr	r3, [pc, #192]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595a:	4b2d      	ldr	r3, [pc, #180]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4929      	ldr	r1, [pc, #164]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
 800596e:	e018      	b.n	80059a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005970:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a26      	ldr	r2, [pc, #152]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd f88a 	bl	8002a94 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005984:	f7fd f886 	bl	8002a94 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e199      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005996:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d038      	beq.n	8005a20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d019      	beq.n	80059ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059b6:	4b16      	ldr	r3, [pc, #88]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ba:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c2:	f7fd f867 	bl	8002a94 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ca:	f7fd f863 	bl	8002a94 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e176      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x23a>
 80059e8:	e01a      	b.n	8005a20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ee:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f6:	f7fd f84d 	bl	8002a94 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059fc:	e00a      	b.n	8005a14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059fe:	f7fd f849 	bl	8002a94 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d903      	bls.n	8005a14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e15c      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
 8005a10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a14:	4b91      	ldr	r3, [pc, #580]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ee      	bne.n	80059fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80a4 	beq.w	8005b76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a2e:	4b8b      	ldr	r3, [pc, #556]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10d      	bne.n	8005a56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a3a:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	4a87      	ldr	r2, [pc, #540]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a44:	6413      	str	r3, [r2, #64]	; 0x40
 8005a46:	4b85      	ldr	r3, [pc, #532]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a56:	4b82      	ldr	r3, [pc, #520]	; (8005c60 <HAL_RCC_OscConfig+0x4d0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d118      	bne.n	8005a94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a62:	4b7f      	ldr	r3, [pc, #508]	; (8005c60 <HAL_RCC_OscConfig+0x4d0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a7e      	ldr	r2, [pc, #504]	; (8005c60 <HAL_RCC_OscConfig+0x4d0>)
 8005a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a6e:	f7fd f811 	bl	8002a94 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a76:	f7fd f80d 	bl	8002a94 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b64      	cmp	r3, #100	; 0x64
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e120      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a88:	4b75      	ldr	r3, [pc, #468]	; (8005c60 <HAL_RCC_OscConfig+0x4d0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCC_OscConfig+0x31a>
 8005a9c:	4b6f      	ldr	r3, [pc, #444]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a6e      	ldr	r2, [pc, #440]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa8:	e02d      	b.n	8005b06 <HAL_RCC_OscConfig+0x376>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCC_OscConfig+0x33c>
 8005ab2:	4b6a      	ldr	r3, [pc, #424]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	4a69      	ldr	r2, [pc, #420]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	6713      	str	r3, [r2, #112]	; 0x70
 8005abe:	4b67      	ldr	r3, [pc, #412]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	4a66      	ldr	r2, [pc, #408]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aca:	e01c      	b.n	8005b06 <HAL_RCC_OscConfig+0x376>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b05      	cmp	r3, #5
 8005ad2:	d10c      	bne.n	8005aee <HAL_RCC_OscConfig+0x35e>
 8005ad4:	4b61      	ldr	r3, [pc, #388]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	4a60      	ldr	r2, [pc, #384]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ada:	f043 0304 	orr.w	r3, r3, #4
 8005ade:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae0:	4b5e      	ldr	r3, [pc, #376]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	4a5d      	ldr	r2, [pc, #372]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	6713      	str	r3, [r2, #112]	; 0x70
 8005aec:	e00b      	b.n	8005b06 <HAL_RCC_OscConfig+0x376>
 8005aee:	4b5b      	ldr	r3, [pc, #364]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a5a      	ldr	r2, [pc, #360]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	6713      	str	r3, [r2, #112]	; 0x70
 8005afa:	4b58      	ldr	r3, [pc, #352]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	4a57      	ldr	r2, [pc, #348]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b00:	f023 0304 	bic.w	r3, r3, #4
 8005b04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d015      	beq.n	8005b3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7fc ffc1 	bl	8002a94 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fc ffbd 	bl	8002a94 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e0ce      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b2c:	4b4b      	ldr	r3, [pc, #300]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0ee      	beq.n	8005b16 <HAL_RCC_OscConfig+0x386>
 8005b38:	e014      	b.n	8005b64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fc ffab 	bl	8002a94 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b40:	e00a      	b.n	8005b58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fc ffa7 	bl	8002a94 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e0b8      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b58:	4b40      	ldr	r3, [pc, #256]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1ee      	bne.n	8005b42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6a:	4b3c      	ldr	r3, [pc, #240]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a3b      	ldr	r2, [pc, #236]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80a4 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b80:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 030c 	and.w	r3, r3, #12
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d06b      	beq.n	8005c64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d149      	bne.n	8005c28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b94:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a30      	ldr	r2, [pc, #192]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fc ff78 	bl	8002a94 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fc ff74 	bl	8002a94 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e087      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bba:	4b28      	ldr	r3, [pc, #160]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	3b01      	subs	r3, #1
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	061b      	lsls	r3, r3, #24
 8005bea:	4313      	orrs	r3, r2
 8005bec:	4a1b      	ldr	r2, [pc, #108]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bf2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fc ff48 	bl	8002a94 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fc ff44 	bl	8002a94 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e057      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f0      	beq.n	8005c08 <HAL_RCC_OscConfig+0x478>
 8005c26:	e04f      	b.n	8005cc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c28:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a0b      	ldr	r2, [pc, #44]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fc ff2e 	bl	8002a94 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fc ff2a 	bl	8002a94 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e03d      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c4e:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x4ac>
 8005c5a:	e035      	b.n	8005cc8 <HAL_RCC_OscConfig+0x538>
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c64:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <HAL_RCC_OscConfig+0x544>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d028      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d121      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d11a      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c94:	4013      	ands	r3, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d111      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	3b01      	subs	r3, #1
 8005cae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40023800 	.word	0x40023800

08005cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0d0      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b6a      	ldr	r3, [pc, #424]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d910      	bls.n	8005d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b67      	ldr	r3, [pc, #412]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 020f 	bic.w	r2, r3, #15
 8005d06:	4965      	ldr	r1, [pc, #404]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	4b63      	ldr	r3, [pc, #396]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0b8      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d020      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d38:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d50:	4b53      	ldr	r3, [pc, #332]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a52      	ldr	r2, [pc, #328]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d5c:	4b50      	ldr	r3, [pc, #320]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	494d      	ldr	r1, [pc, #308]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d040      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d82:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d115      	bne.n	8005dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e07f      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9a:	4b41      	ldr	r3, [pc, #260]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e073      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e06b      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4936      	ldr	r1, [pc, #216]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dcc:	f7fc fe62 	bl	8002a94 <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd4:	f7fc fe5e 	bl	8002a94 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e053      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 020c 	and.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1eb      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d210      	bcs.n	8005e2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 020f 	bic.w	r2, r3, #15
 8005e12:	4922      	ldr	r1, [pc, #136]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e032      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e38:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4916      	ldr	r1, [pc, #88]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e56:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	490e      	ldr	r1, [pc, #56]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e6a:	f000 f821 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8005e6e:	4601      	mov	r1, r0
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8005e7c:	5cd3      	ldrb	r3, [r2, r3]
 8005e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8005e82:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8005e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <HAL_RCC_ClockConfig+0x1d4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fc fc42 	bl	8002714 <HAL_InitTick>

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40023c00 	.word	0x40023c00
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	080275fc 	.word	0x080275fc
 8005ea8:	2000002c 	.word	0x2000002c
 8005eac:	20000030 	.word	0x20000030

08005eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec6:	4b50      	ldr	r3, [pc, #320]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d007      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x32>
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d008      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x38>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 808d 	bne.w	8005ff6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005edc:	4b4b      	ldr	r3, [pc, #300]	; (800600c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ede:	60bb      	str	r3, [r7, #8]
      break;
 8005ee0:	e08c      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ee2:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ee4:	60bb      	str	r3, [r7, #8]
      break;
 8005ee6:	e089      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee8:	4b47      	ldr	r3, [pc, #284]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ef2:	4b45      	ldr	r3, [pc, #276]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d023      	beq.n	8005f46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b42      	ldr	r3, [pc, #264]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	f04f 0400 	mov.w	r4, #0
 8005f08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	ea03 0501 	and.w	r5, r3, r1
 8005f14:	ea04 0602 	and.w	r6, r4, r2
 8005f18:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f1a:	fb02 f106 	mul.w	r1, r2, r6
 8005f1e:	2200      	movs	r2, #0
 8005f20:	fb02 f205 	mul.w	r2, r2, r5
 8005f24:	440a      	add	r2, r1
 8005f26:	493a      	ldr	r1, [pc, #232]	; (8006010 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f28:	fba5 0101 	umull	r0, r1, r5, r1
 8005f2c:	1853      	adds	r3, r2, r1
 8005f2e:	4619      	mov	r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f04f 0400 	mov.w	r4, #0
 8005f36:	461a      	mov	r2, r3
 8005f38:	4623      	mov	r3, r4
 8005f3a:	f7fa f9b9 	bl	80002b0 <__aeabi_uldivmod>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	460c      	mov	r4, r1
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e049      	b.n	8005fda <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f46:	4b30      	ldr	r3, [pc, #192]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	f04f 0400 	mov.w	r4, #0
 8005f50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	ea03 0501 	and.w	r5, r3, r1
 8005f5c:	ea04 0602 	and.w	r6, r4, r2
 8005f60:	4629      	mov	r1, r5
 8005f62:	4632      	mov	r2, r6
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	f04f 0400 	mov.w	r4, #0
 8005f6c:	0154      	lsls	r4, r2, #5
 8005f6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f72:	014b      	lsls	r3, r1, #5
 8005f74:	4619      	mov	r1, r3
 8005f76:	4622      	mov	r2, r4
 8005f78:	1b49      	subs	r1, r1, r5
 8005f7a:	eb62 0206 	sbc.w	r2, r2, r6
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	f04f 0400 	mov.w	r4, #0
 8005f86:	0194      	lsls	r4, r2, #6
 8005f88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f8c:	018b      	lsls	r3, r1, #6
 8005f8e:	1a5b      	subs	r3, r3, r1
 8005f90:	eb64 0402 	sbc.w	r4, r4, r2
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	00e2      	lsls	r2, r4, #3
 8005f9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fa2:	00d9      	lsls	r1, r3, #3
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	195b      	adds	r3, r3, r5
 8005faa:	eb44 0406 	adc.w	r4, r4, r6
 8005fae:	f04f 0100 	mov.w	r1, #0
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	02a2      	lsls	r2, r4, #10
 8005fb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fbc:	0299      	lsls	r1, r3, #10
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f04f 0400 	mov.w	r4, #0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	f7fa f96e 	bl	80002b0 <__aeabi_uldivmod>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005fda:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	0c1b      	lsrs	r3, r3, #16
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	60bb      	str	r3, [r7, #8]
      break;
 8005ff4:	e002      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ff8:	60bb      	str	r3, [r7, #8]
      break;
 8005ffa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800
 800600c:	00f42400 	.word	0x00f42400
 8006010:	017d7840 	.word	0x017d7840

08006014 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006018:	4b03      	ldr	r3, [pc, #12]	; (8006028 <HAL_RCC_GetHCLKFreq+0x14>)
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	2000002c 	.word	0x2000002c

0800602c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006030:	f7ff fff0 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8006034:	4601      	mov	r1, r0
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	0a9b      	lsrs	r3, r3, #10
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4a03      	ldr	r2, [pc, #12]	; (8006050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40023800 	.word	0x40023800
 8006050:	0802760c 	.word	0x0802760c

08006054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006058:	f7ff ffdc 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 800605c:	4601      	mov	r1, r0
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	0b5b      	lsrs	r3, r3, #13
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	4a03      	ldr	r2, [pc, #12]	; (8006078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40023800 	.word	0x40023800
 8006078:	0802760c 	.word	0x0802760c

0800607c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	220f      	movs	r2, #15
 800608a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0203 	and.w	r2, r3, #3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060a4:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80060b0:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	08db      	lsrs	r3, r3, #3
 80060b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <HAL_RCC_GetClockConfig+0x60>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40023800 	.word	0x40023800
 80060dc:	40023c00 	.word	0x40023c00

080060e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d012      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006108:	4b69      	ldr	r3, [pc, #420]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a68      	ldr	r2, [pc, #416]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006112:	6093      	str	r3, [r2, #8]
 8006114:	4b66      	ldr	r3, [pc, #408]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	4964      	ldr	r1, [pc, #400]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d017      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800613a:	4b5d      	ldr	r3, [pc, #372]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006148:	4959      	ldr	r1, [pc, #356]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006158:	d101      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006166:	2301      	movs	r3, #1
 8006168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d017      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006176:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	494a      	ldr	r1, [pc, #296]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006194:	d101      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061b2:	2301      	movs	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 808b 	beq.w	80062da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061c4:	4b3a      	ldr	r3, [pc, #232]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	4a39      	ldr	r2, [pc, #228]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ce:	6413      	str	r3, [r2, #64]	; 0x40
 80061d0:	4b37      	ldr	r3, [pc, #220]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061dc:	4b35      	ldr	r3, [pc, #212]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a34      	ldr	r2, [pc, #208]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e8:	f7fc fc54 	bl	8002a94 <HAL_GetTick>
 80061ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f0:	f7fc fc50 	bl	8002a94 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b64      	cmp	r3, #100	; 0x64
 80061fc:	d901      	bls.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e355      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006202:	4b2c      	ldr	r3, [pc, #176]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800620e:	4b28      	ldr	r3, [pc, #160]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d035      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	429a      	cmp	r2, r3
 800622a:	d02e      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800622c:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006234:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006236:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006242:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a1a      	ldr	r2, [pc, #104]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006254:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b01      	cmp	r3, #1
 800625e:	d114      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fc fc18 	bl	8002a94 <HAL_GetTick>
 8006264:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006266:	e00a      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f7fc fc14 	bl	8002a94 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f241 3288 	movw	r2, #5000	; 0x1388
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e317      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800627e:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0ee      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006296:	d111      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006298:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062a4:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062a6:	400b      	ands	r3, r1
 80062a8:	4901      	ldr	r1, [pc, #4]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
 80062ae:	e00b      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062b0:	40023800 	.word	0x40023800
 80062b4:	40007000 	.word	0x40007000
 80062b8:	0ffffcff 	.word	0x0ffffcff
 80062bc:	4bb0      	ldr	r3, [pc, #704]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4aaf      	ldr	r2, [pc, #700]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062c6:	6093      	str	r3, [r2, #8]
 80062c8:	4bad      	ldr	r3, [pc, #692]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d4:	49aa      	ldr	r1, [pc, #680]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d010      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062e6:	4ba6      	ldr	r3, [pc, #664]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ec:	4aa4      	ldr	r2, [pc, #656]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062f6:	4ba2      	ldr	r3, [pc, #648]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	499f      	ldr	r1, [pc, #636]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006314:	4b9a      	ldr	r3, [pc, #616]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006322:	4997      	ldr	r1, [pc, #604]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006336:	4b92      	ldr	r3, [pc, #584]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006344:	498e      	ldr	r1, [pc, #568]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006358:	4b89      	ldr	r3, [pc, #548]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006366:	4986      	ldr	r1, [pc, #536]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800637a:	4b81      	ldr	r3, [pc, #516]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800637c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	497d      	ldr	r1, [pc, #500]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800639c:	4b78      	ldr	r3, [pc, #480]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f023 0203 	bic.w	r2, r3, #3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	4975      	ldr	r1, [pc, #468]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063be:	4b70      	ldr	r3, [pc, #448]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c4:	f023 020c 	bic.w	r2, r3, #12
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063cc:	496c      	ldr	r1, [pc, #432]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063e0:	4b67      	ldr	r3, [pc, #412]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ee:	4964      	ldr	r1, [pc, #400]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006402:	4b5f      	ldr	r3, [pc, #380]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006408:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006410:	495b      	ldr	r1, [pc, #364]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006424:	4b56      	ldr	r3, [pc, #344]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006432:	4953      	ldr	r1, [pc, #332]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006446:	4b4e      	ldr	r3, [pc, #312]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	494a      	ldr	r1, [pc, #296]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006468:	4b45      	ldr	r3, [pc, #276]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006476:	4942      	ldr	r1, [pc, #264]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800648a:	4b3d      	ldr	r3, [pc, #244]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	4939      	ldr	r1, [pc, #228]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064ac:	4b34      	ldr	r3, [pc, #208]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ba:	4931      	ldr	r1, [pc, #196]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d011      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064ce:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064dc:	4928      	ldr	r1, [pc, #160]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ec:	d101      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064ee:	2301      	movs	r3, #1
 80064f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064fe:	2301      	movs	r3, #1
 8006500:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800650e:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651c:	4918      	ldr	r1, [pc, #96]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006540:	490f      	ldr	r1, [pc, #60]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d005      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006556:	f040 80d8 	bne.w	800670a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a08      	ldr	r2, [pc, #32]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006566:	f7fc fa95 	bl	8002a94 <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800656c:	e00a      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800656e:	f7fc fa91 	bl	8002a94 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b64      	cmp	r3, #100	; 0x64
 800657a:	d903      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e196      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006580:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006584:	4b6c      	ldr	r3, [pc, #432]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1ee      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d021      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11d      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065a4:	4b64      	ldr	r3, [pc, #400]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065b2:	4b61      	ldr	r3, [pc, #388]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b8:	0e1b      	lsrs	r3, r3, #24
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	019a      	lsls	r2, r3, #6
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	431a      	orrs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	071b      	lsls	r3, r3, #28
 80065d8:	4957      	ldr	r1, [pc, #348]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f4:	d00a      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02e      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800660a:	d129      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800660c:	4b4a      	ldr	r3, [pc, #296]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800660e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800661a:	4b47      	ldr	r3, [pc, #284]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800661c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006620:	0f1b      	lsrs	r3, r3, #28
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	019a      	lsls	r2, r3, #6
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	061b      	lsls	r3, r3, #24
 800663a:	431a      	orrs	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	071b      	lsls	r3, r3, #28
 8006640:	493d      	ldr	r1, [pc, #244]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006648:	4b3b      	ldr	r3, [pc, #236]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800664a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664e:	f023 021f 	bic.w	r2, r3, #31
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	3b01      	subs	r3, #1
 8006658:	4937      	ldr	r1, [pc, #220]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01d      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800666c:	4b32      	ldr	r3, [pc, #200]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800666e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006672:	0e1b      	lsrs	r3, r3, #24
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800667a:	4b2f      	ldr	r3, [pc, #188]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800667c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006680:	0f1b      	lsrs	r3, r3, #28
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	019a      	lsls	r2, r3, #6
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	431a      	orrs	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	071b      	lsls	r3, r3, #28
 80066a0:	4925      	ldr	r1, [pc, #148]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	019a      	lsls	r2, r3, #6
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	061b      	lsls	r3, r3, #24
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	071b      	lsls	r3, r3, #28
 80066d0:	4919      	ldr	r1, [pc, #100]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066d8:	4b17      	ldr	r3, [pc, #92]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a16      	ldr	r2, [pc, #88]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e4:	f7fc f9d6 	bl	8002a94 <HAL_GetTick>
 80066e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066ec:	f7fc f9d2 	bl	8002a94 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	; 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e0d7      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066fe:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b01      	cmp	r3, #1
 800670e:	f040 80cd 	bne.w	80068ac <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a08      	ldr	r2, [pc, #32]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671e:	f7fc f9b9 	bl	8002a94 <HAL_GetTick>
 8006722:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006726:	f7fc f9b5 	bl	8002a94 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b64      	cmp	r3, #100	; 0x64
 8006732:	d903      	bls.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e0ba      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006738:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800673c:	4b5e      	ldr	r3, [pc, #376]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006748:	d0ed      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d009      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006766:	2b00      	cmp	r3, #0
 8006768:	d02e      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d12a      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006772:	4b51      	ldr	r3, [pc, #324]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006780:	4b4d      	ldr	r3, [pc, #308]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	0f1b      	lsrs	r3, r3, #28
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	019a      	lsls	r2, r3, #6
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	041b      	lsls	r3, r3, #16
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	061b      	lsls	r3, r3, #24
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	071b      	lsls	r3, r3, #28
 80067a6:	4944      	ldr	r1, [pc, #272]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067ae:	4b42      	ldr	r3, [pc, #264]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	3b01      	subs	r3, #1
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	493d      	ldr	r1, [pc, #244]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d022      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067dc:	d11d      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067de:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	0e1b      	lsrs	r3, r3, #24
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067ec:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f2:	0f1b      	lsrs	r3, r3, #28
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	019a      	lsls	r2, r3, #6
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	431a      	orrs	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	061b      	lsls	r3, r3, #24
 800680c:	431a      	orrs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	071b      	lsls	r3, r3, #28
 8006812:	4929      	ldr	r1, [pc, #164]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d028      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682c:	0e1b      	lsrs	r3, r3, #24
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006834:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	0c1b      	lsrs	r3, r3, #16
 800683c:	f003 0303 	and.w	r3, r3, #3
 8006840:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	019a      	lsls	r2, r3, #6
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	431a      	orrs	r2, r3
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	061b      	lsls	r3, r3, #24
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	071b      	lsls	r3, r3, #28
 800685a:	4917      	ldr	r1, [pc, #92]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4911      	ldr	r1, [pc, #68]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a0e      	ldr	r2, [pc, #56]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800687e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006884:	f7fc f906 	bl	8002a94 <HAL_GetTick>
 8006888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800688a:	e008      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800688c:	f7fc f902 	bl	8002a94 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b64      	cmp	r3, #100	; 0x64
 8006898:	d901      	bls.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e007      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068aa:	d1ef      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800

080068bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068da:	f040 8086 	bne.w	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80068de:	4b8d      	ldr	r3, [pc, #564]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068ec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f4:	d03e      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80068f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068fa:	d073      	beq.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d000      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006900:	e074      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006902:	4b84      	ldr	r3, [pc, #528]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d108      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800690e:	4b81      	ldr	r3, [pc, #516]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006916:	4a80      	ldr	r2, [pc, #512]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006918:	fbb2 f3f3 	udiv	r3, r2, r3
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	e007      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006920:	4b7c      	ldr	r3, [pc, #496]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006928:	4a7c      	ldr	r2, [pc, #496]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800692a:	fbb2 f3f3 	udiv	r3, r2, r3
 800692e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006930:	4b78      	ldr	r3, [pc, #480]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006936:	0e1b      	lsrs	r3, r3, #24
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800693e:	4b75      	ldr	r3, [pc, #468]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006944:	099b      	lsrs	r3, r3, #6
 8006946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	fb02 f203 	mul.w	r2, r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006958:	4b6e      	ldr	r3, [pc, #440]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800695a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]
        break;
 8006972:	e03b      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006974:	4b67      	ldr	r3, [pc, #412]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d108      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006980:	4b64      	ldr	r3, [pc, #400]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006988:	4a63      	ldr	r2, [pc, #396]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e007      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006992:	4b60      	ldr	r3, [pc, #384]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800699a:	4a60      	ldr	r2, [pc, #384]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80069a2:	4b5c      	ldr	r3, [pc, #368]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a8:	0e1b      	lsrs	r3, r3, #24
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80069b0:	4b58      	ldr	r3, [pc, #352]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b6:	099b      	lsrs	r3, r3, #6
 80069b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	fb02 f203 	mul.w	r2, r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80069ca:	4b52      	ldr	r3, [pc, #328]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	617b      	str	r3, [r7, #20]
        break;
 80069e2:	e003      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80069e4:	4b4e      	ldr	r3, [pc, #312]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80069e6:	617b      	str	r3, [r7, #20]
        break;
 80069e8:	e000      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80069ea:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f2:	f040 8086 	bne.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80069f6:	4b47      	ldr	r3, [pc, #284]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006a04:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a0c:	d03e      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a12:	d073      	beq.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d000      	beq.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006a18:	e074      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006a1a:	4b3e      	ldr	r3, [pc, #248]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d108      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a26:	4b3b      	ldr	r3, [pc, #236]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a2e:	4a3a      	ldr	r2, [pc, #232]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e007      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006a38:	4b36      	ldr	r3, [pc, #216]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a40:	4a36      	ldr	r2, [pc, #216]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006a48:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	0e1b      	lsrs	r3, r3, #24
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006a56:	4b2f      	ldr	r3, [pc, #188]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5c:	099b      	lsrs	r3, r3, #6
 8006a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	fb02 f203 	mul.w	r2, r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006a70:	4b28      	ldr	r3, [pc, #160]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	617b      	str	r3, [r7, #20]
        break;
 8006a8a:	e03b      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006a8c:	4b21      	ldr	r3, [pc, #132]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d108      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a98:	4b1e      	ldr	r3, [pc, #120]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	e007      	b.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ab2:	4a1a      	ldr	r2, [pc, #104]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006ac8:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ace:	099b      	lsrs	r3, r3, #6
 8006ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	fb02 f203 	mul.w	r2, r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	617b      	str	r3, [r7, #20]
        break;
 8006afa:	e003      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006afe:	617b      	str	r3, [r7, #20]
        break;
 8006b00:	e000      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006b02:	bf00      	nop

  return frequency;
 8006b04:	697b      	ldr	r3, [r7, #20]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40023800 	.word	0x40023800
 8006b18:	00f42400 	.word	0x00f42400
 8006b1c:	017d7840 	.word	0x017d7840
 8006b20:	00bb8000 	.word	0x00bb8000

08006b24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e06b      	b.n	8006c0e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7f5b      	ldrb	r3, [r3, #29]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d105      	bne.n	8006b4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fb fc38 	bl	80023bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	22ca      	movs	r2, #202	; 0xca
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2253      	movs	r2, #83	; 0x53
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fb00 	bl	8007168 <RTC_EnterInitMode>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	22ff      	movs	r2, #255	; 0xff
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e046      	b.n	8006c0e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6899      	ldr	r1, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b23      	ldr	r3, [pc, #140]	; (8006c18 <HAL_RTC_Init+0xf4>)
 8006b8c:	400b      	ands	r3, r1
 8006b8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6899      	ldr	r1, [r3, #8]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68d2      	ldr	r2, [r2, #12]
 8006bb6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6919      	ldr	r1, [r3, #16]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	041a      	lsls	r2, r3, #16
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bda:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0208 	bic.w	r2, r2, #8
 8006bea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	22ff      	movs	r2, #255	; 0xff
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	ff8fffbf 	.word	0xff8fffbf

08006c1c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c1c:	b590      	push	{r4, r7, lr}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	7f1b      	ldrb	r3, [r3, #28]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_RTC_SetTime+0x1c>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e0a8      	b.n	8006d8a <HAL_RTC_SetTime+0x16e>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2202      	movs	r2, #2
 8006c42:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d126      	bne.n	8006c98 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 faac 	bl	80071c0 <RTC_ByteToBcd2>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 faa5 	bl	80071c0 <RTC_ByteToBcd2>
 8006c76:	4603      	mov	r3, r0
 8006c78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c7a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	789b      	ldrb	r3, [r3, #2]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fa9d 	bl	80071c0 <RTC_ByteToBcd2>
 8006c86:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	7b1b      	ldrb	r3, [r3, #12]
 8006c90:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	e018      	b.n	8006cca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cb8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006cbe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	7b1b      	ldrb	r3, [r3, #12]
 8006cc4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	22ca      	movs	r2, #202	; 0xca
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2253      	movs	r2, #83	; 0x53
 8006cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fa44 	bl	8007168 <RTC_EnterInitMode>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	22ff      	movs	r2, #255	; 0xff
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e045      	b.n	8006d8a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	6979      	ldr	r1, [r7, #20]
 8006d04:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <HAL_RTC_SetTime+0x178>)
 8006d06:	400b      	ands	r3, r1
 8006d08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6899      	ldr	r1, [r3, #8]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d40:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d111      	bne.n	8006d74 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f9e1 	bl	8007118 <HAL_RTC_WaitForSynchro>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	22ff      	movs	r2, #255	; 0xff
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2204      	movs	r2, #4
 8006d68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e00a      	b.n	8006d8a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	22ff      	movs	r2, #255	; 0xff
 8006d7a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006d88:	2300      	movs	r3, #0
  }
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd90      	pop	{r4, r7, pc}
 8006d92:	bf00      	nop
 8006d94:	007f7f7f 	.word	0x007f7f7f

08006d98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d98:	b590      	push	{r4, r7, lr}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	7f1b      	ldrb	r3, [r3, #28]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_RTC_SetDate+0x1c>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e092      	b.n	8006eda <HAL_RTC_SetDate+0x142>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10e      	bne.n	8006de4 <HAL_RTC_SetDate+0x4c>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	f023 0310 	bic.w	r3, r3, #16
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	330a      	adds	r3, #10
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d11c      	bne.n	8006e24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	78db      	ldrb	r3, [r3, #3]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f9e6 	bl	80071c0 <RTC_ByteToBcd2>
 8006df4:	4603      	mov	r3, r0
 8006df6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 f9df 	bl	80071c0 <RTC_ByteToBcd2>
 8006e02:	4603      	mov	r3, r0
 8006e04:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006e06:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	789b      	ldrb	r3, [r3, #2]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f9d7 	bl	80071c0 <RTC_ByteToBcd2>
 8006e12:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006e14:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	e00e      	b.n	8006e42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	78db      	ldrb	r3, [r3, #3]
 8006e28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e30:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006e36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	22ca      	movs	r2, #202	; 0xca
 8006e48:	625a      	str	r2, [r3, #36]	; 0x24
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2253      	movs	r2, #83	; 0x53
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f988 	bl	8007168 <RTC_EnterInitMode>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	22ff      	movs	r2, #255	; 0xff
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e031      	b.n	8006eda <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	6979      	ldr	r1, [r7, #20]
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <HAL_RTC_SetDate+0x14c>)
 8006e7e:	400b      	ands	r3, r1
 8006e80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e90:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d111      	bne.n	8006ec4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f939 	bl	8007118 <HAL_RTC_WaitForSynchro>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	22ff      	movs	r2, #255	; 0xff
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e00a      	b.n	8006eda <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
  }
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd90      	pop	{r4, r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	00ffff3f 	.word	0x00ffff3f

08006ee8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b089      	sub	sp, #36	; 0x24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	7f1b      	ldrb	r3, [r3, #28]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_RTC_SetAlarm+0x24>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e101      	b.n	8007110 <HAL_RTC_SetAlarm+0x228>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2202      	movs	r2, #2
 8006f16:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d137      	bne.n	8006f8e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f942 	bl	80071c0 <RTC_ByteToBcd2>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 f93b 	bl	80071c0 <RTC_ByteToBcd2>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f4e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	789b      	ldrb	r3, [r3, #2]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f933 	bl	80071c0 <RTC_ByteToBcd2>
 8006f5a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f5c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	7b1b      	ldrb	r3, [r3, #12]
 8006f64:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f66:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 f925 	bl	80071c0 <RTC_ByteToBcd2>
 8006f76:	4603      	mov	r3, r0
 8006f78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f7a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	61fb      	str	r3, [r7, #28]
 8006f8c:	e023      	b.n	8006fd6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fae:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006fb4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	7b1b      	ldrb	r3, [r3, #12]
 8006fba:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006fbc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fc4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006fc6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006fcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	22ca      	movs	r2, #202	; 0xca
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2253      	movs	r2, #83	; 0x53
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffa:	d13f      	bne.n	800707c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800700a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800701a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800701c:	f7fb fd3a 	bl	8002a94 <HAL_GetTick>
 8007020:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007022:	e013      	b.n	800704c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007024:	f7fb fd36 	bl	8002a94 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007032:	d90b      	bls.n	800704c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	22ff      	movs	r2, #255	; 0xff
 800703a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2203      	movs	r2, #3
 8007040:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e061      	b.n	8007110 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0e4      	beq.n	8007024 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007078:	609a      	str	r2, [r3, #8]
 800707a:	e03e      	b.n	80070fa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800708a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800709a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800709c:	f7fb fcfa 	bl	8002a94 <HAL_GetTick>
 80070a0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80070a2:	e013      	b.n	80070cc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80070a4:	f7fb fcf6 	bl	8002a94 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070b2:	d90b      	bls.n	80070cc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2203      	movs	r2, #3
 80070c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e021      	b.n	8007110 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0e4      	beq.n	80070a4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	22ff      	movs	r2, #255	; 0xff
 8007100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3724      	adds	r7, #36	; 0x24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd90      	pop	{r4, r7, pc}

08007118 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007132:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007134:	f7fb fcae 	bl	8002a94 <HAL_GetTick>
 8007138:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800713a:	e009      	b.n	8007150 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800713c:	f7fb fcaa 	bl	8002a94 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800714a:	d901      	bls.n	8007150 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e007      	b.n	8007160 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0ee      	beq.n	800713c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d119      	bne.n	80071b6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f04f 32ff 	mov.w	r2, #4294967295
 800718a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800718c:	f7fb fc82 	bl	8002a94 <HAL_GetTick>
 8007190:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007192:	e009      	b.n	80071a8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007194:	f7fb fc7e 	bl	8002a94 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071a2:	d901      	bls.n	80071a8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e007      	b.n	80071b8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0ee      	beq.n	8007194 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80071ce:	e005      	b.n	80071dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	3b0a      	subs	r3, #10
 80071da:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	2b09      	cmp	r3, #9
 80071e0:	d8f6      	bhi.n	80071d0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b2db      	uxtb	r3, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	7f1b      	ldrb	r3, [r3, #28]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007214:	2302      	movs	r3, #2
 8007216:	e03e      	b.n	8007296 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2201      	movs	r2, #1
 800721c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2202      	movs	r2, #2
 8007222:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800722c:	4013      	ands	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	22ca      	movs	r2, #202	; 0xca
 800723e:	625a      	str	r2, [r3, #36]	; 0x24
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2253      	movs	r2, #83	; 0x53
 8007246:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0206 	bic.w	r2, r2, #6
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	430a      	orrs	r2, r1
 8007266:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800727e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	22ff      	movs	r2, #255	; 0xff
 8007286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	fffff7f7 	.word	0xfffff7f7

080072a8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e149      	b.n	800755a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fb f9b0 	bl	8002640 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f94f 	bl	800758c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d007      	beq.n	8007306 <HAL_SAI_Init+0x5e>
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d302      	bcc.n	8007300 <HAL_SAI_Init+0x58>
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d006      	beq.n	800730c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80072fe:	e008      	b.n	8007312 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
      break;
 8007304:	e005      	b.n	8007312 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007306:	2310      	movs	r3, #16
 8007308:	61fb      	str	r3, [r7, #28]
      break;
 800730a:	e002      	b.n	8007312 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800730c:	2320      	movs	r3, #32
 800730e:	61fb      	str	r3, [r7, #28]
      break;
 8007310:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d81d      	bhi.n	8007356 <HAL_SAI_Init+0xae>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <HAL_SAI_Init+0x78>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007331 	.word	0x08007331
 8007324:	08007337 	.word	0x08007337
 8007328:	0800733f 	.word	0x0800733f
 800732c:	08007347 	.word	0x08007347
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
      }
      break;
 8007334:	e010      	b.n	8007358 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733a:	617b      	str	r3, [r7, #20]
      }
      break;
 800733c:	e00c      	b.n	8007358 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800733e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007342:	617b      	str	r3, [r7, #20]
      }
      break;
 8007344:	e008      	b.n	8007358 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800734a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007354:	e000      	b.n	8007358 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007356:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a81      	ldr	r2, [pc, #516]	; (8007564 <HAL_SAI_Init+0x2bc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_SAI_Init+0xc4>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a80      	ldr	r2, [pc, #512]	; (8007568 <HAL_SAI_Init+0x2c0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d103      	bne.n	8007374 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800736c:	4a7f      	ldr	r2, [pc, #508]	; (800756c <HAL_SAI_Init+0x2c4>)
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e002      	b.n	800737a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007374:	4a7e      	ldr	r2, [pc, #504]	; (8007570 <HAL_SAI_Init+0x2c8>)
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d043      	beq.n	800740a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a76      	ldr	r2, [pc, #472]	; (8007564 <HAL_SAI_Init+0x2bc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_SAI_Init+0xf2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a74      	ldr	r2, [pc, #464]	; (8007568 <HAL_SAI_Init+0x2c0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d104      	bne.n	80073a4 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800739a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800739e:	f7ff fa8d 	bl	80068bc <HAL_RCCEx_GetPeriphCLKFreq>
 80073a2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a72      	ldr	r2, [pc, #456]	; (8007574 <HAL_SAI_Init+0x2cc>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_SAI_Init+0x110>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a71      	ldr	r2, [pc, #452]	; (8007578 <HAL_SAI_Init+0x2d0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d104      	bne.n	80073c2 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80073b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073bc:	f7ff fa7e 	bl	80068bc <HAL_RCCEx_GetPeriphCLKFreq>
 80073c0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	461a      	mov	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a67      	ldr	r2, [pc, #412]	; (800757c <HAL_SAI_Init+0x2d4>)
 80073de:	fba2 2303 	umull	r2, r3, r2, r3
 80073e2:	08da      	lsrs	r2, r3, #3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80073e8:	68f9      	ldr	r1, [r7, #12]
 80073ea:	4b64      	ldr	r3, [pc, #400]	; (800757c <HAL_SAI_Init+0x2d4>)
 80073ec:	fba3 2301 	umull	r2, r3, r3, r1
 80073f0:	08da      	lsrs	r2, r3, #3
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	1aca      	subs	r2, r1, r3
 80073fc:	2a08      	cmp	r2, #8
 80073fe:	d904      	bls.n	800740a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_SAI_Init+0x172>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d109      	bne.n	800742e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_SAI_Init+0x17e>
 8007422:	2300      	movs	r3, #0
 8007424:	e001      	b.n	800742a <HAL_SAI_Init+0x182>
 8007426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	e008      	b.n	8007440 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007432:	2b01      	cmp	r3, #1
 8007434:	d102      	bne.n	800743c <HAL_SAI_Init+0x194>
 8007436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743a:	e000      	b.n	800743e <HAL_SAI_Init+0x196>
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4b4d      	ldr	r3, [pc, #308]	; (8007580 <HAL_SAI_Init+0x2d8>)
 800744c:	400b      	ands	r3, r1
 800744e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6819      	ldr	r1, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007464:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	431a      	orrs	r2, r3
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007478:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007484:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	051b      	lsls	r3, r3, #20
 800748c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6859      	ldr	r1, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4b38      	ldr	r3, [pc, #224]	; (8007584 <HAL_SAI_Init+0x2dc>)
 80074a2:	400b      	ands	r3, r1
 80074a4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6859      	ldr	r1, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6899      	ldr	r1, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	4b2e      	ldr	r3, [pc, #184]	; (8007588 <HAL_SAI_Init+0x2e0>)
 80074d0:	400b      	ands	r3, r1
 80074d2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6899      	ldr	r1, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074e4:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80074ea:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80074f0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f6:	3b01      	subs	r3, #1
 80074f8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80074fa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68d9      	ldr	r1, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007512:	400b      	ands	r3, r1
 8007514:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68d9      	ldr	r1, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752a:	041b      	lsls	r3, r3, #16
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007532:	3b01      	subs	r3, #1
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40015804 	.word	0x40015804
 8007568:	40015824 	.word	0x40015824
 800756c:	40015800 	.word	0x40015800
 8007570:	40015c00 	.word	0x40015c00
 8007574:	40015c04 	.word	0x40015c04
 8007578:	40015c24 	.word	0x40015c24
 800757c:	cccccccd 	.word	0xcccccccd
 8007580:	ff05c010 	.word	0xff05c010
 8007584:	ffff1ff0 	.word	0xffff1ff0
 8007588:	fff88000 	.word	0xfff88000

0800758c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800758c:	b490      	push	{r4, r7}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007594:	4b16      	ldr	r3, [pc, #88]	; (80075f0 <SAI_Disable+0x64>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <SAI_Disable+0x68>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	0b1b      	lsrs	r3, r3, #12
 80075a0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075b4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80075b6:	4623      	mov	r3, r4
 80075b8:	1e5c      	subs	r4, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	73fb      	strb	r3, [r7, #15]
      break;
 80075d2:	e006      	b.n	80075e2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e9      	bne.n	80075b6 <SAI_Disable+0x2a>

  return status;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc90      	pop	{r4, r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	2000002c 	.word	0x2000002c
 80075f4:	95cbec1b 	.word	0x95cbec1b

080075f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e025      	b.n	8007658 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fb f803 	bl	800262c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f001 fa41 	bl	8008ac0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	461a      	mov	r2, r3
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	f001 faab 	bl	8008ba4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d101      	bne.n	800767c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
 800767a:	e018      	b.n	80076ae <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fb09 	bl	8008ca4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d104      	bne.n	80076a4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2205      	movs	r2, #5
 800769e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80076a2:	e003      	b.n	80076ac <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d101      	bne.n	80076d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80076cc:	2302      	movs	r3, #2
 80076ce:	e00e      	b.n	80076ee <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fb01 	bl	8008ce6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e04c      	b.n	80077a4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fa fe66 	bl	80023f0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0203 	bic.w	r2, r2, #3
 800773a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4b19      	ldr	r3, [pc, #100]	; (80077ac <HAL_SPDIFRX_Init+0xb4>)
 8007748:	4013      	ands	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007754:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800775a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007760:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8007766:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800776c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007772:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007778:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800777e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8007784:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	fff88407 	.word	0xfff88407

080077b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e01d      	b.n	80077fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f815 	bl	8007806 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4619      	mov	r1, r3
 80077ee:	4610      	mov	r0, r2
 80077f0:	f000 f986 	bl	8007b00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <HAL_TIM_Base_Start_IT+0x50>)
 800783c:	4013      	ands	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b06      	cmp	r3, #6
 8007844:	d00b      	beq.n	800785e <HAL_TIM_Base_Start_IT+0x42>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784c:	d007      	beq.n	800785e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0201 	orr.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	00010007 	.word	0x00010007

08007870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b02      	cmp	r3, #2
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0202 	mvn.w	r2, #2
 800789c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f905 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8f7 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f908 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d122      	bne.n	8007920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d11b      	bne.n	8007920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0204 	mvn.w	r2, #4
 80078f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2202      	movs	r2, #2
 80078f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f8db 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f8cd 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f8de 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b08      	cmp	r3, #8
 800792c:	d122      	bne.n	8007974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b08      	cmp	r3, #8
 800793a:	d11b      	bne.n	8007974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0208 	mvn.w	r2, #8
 8007944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2204      	movs	r2, #4
 800794a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8b1 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 8007960:	e005      	b.n	800796e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8a3 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f8b4 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b10      	cmp	r3, #16
 8007980:	d122      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d11b      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0210 	mvn.w	r2, #16
 8007998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2208      	movs	r2, #8
 800799e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f887 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 80079b4:	e005      	b.n	80079c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f879 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f88a 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10e      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d107      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0201 	mvn.w	r2, #1
 80079ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fa f91e 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d10e      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0c:	2b80      	cmp	r3, #128	; 0x80
 8007a0e:	d107      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f91a 	bl	8007c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2e:	d10e      	bne.n	8007a4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3a:	2b80      	cmp	r3, #128	; 0x80
 8007a3c:	d107      	bne.n	8007a4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f90d 	bl	8007c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d10e      	bne.n	8007a7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a66:	2b40      	cmp	r3, #64	; 0x40
 8007a68:	d107      	bne.n	8007a7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f838 	bl	8007aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d10e      	bne.n	8007aa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d107      	bne.n	8007aa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f06f 0220 	mvn.w	r2, #32
 8007a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f8cd 	bl	8007c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a40      	ldr	r2, [pc, #256]	; (8007c14 <TIM_Base_SetConfig+0x114>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1e:	d00f      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a3d      	ldr	r2, [pc, #244]	; (8007c18 <TIM_Base_SetConfig+0x118>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00b      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a3c      	ldr	r2, [pc, #240]	; (8007c1c <TIM_Base_SetConfig+0x11c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d007      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a3b      	ldr	r2, [pc, #236]	; (8007c20 <TIM_Base_SetConfig+0x120>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a3a      	ldr	r2, [pc, #232]	; (8007c24 <TIM_Base_SetConfig+0x124>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d108      	bne.n	8007b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a2f      	ldr	r2, [pc, #188]	; (8007c14 <TIM_Base_SetConfig+0x114>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d02b      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b60:	d027      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a2c      	ldr	r2, [pc, #176]	; (8007c18 <TIM_Base_SetConfig+0x118>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d023      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a2b      	ldr	r2, [pc, #172]	; (8007c1c <TIM_Base_SetConfig+0x11c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d01f      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a2a      	ldr	r2, [pc, #168]	; (8007c20 <TIM_Base_SetConfig+0x120>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d01b      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a29      	ldr	r2, [pc, #164]	; (8007c24 <TIM_Base_SetConfig+0x124>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d017      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a28      	ldr	r2, [pc, #160]	; (8007c28 <TIM_Base_SetConfig+0x128>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a27      	ldr	r2, [pc, #156]	; (8007c2c <TIM_Base_SetConfig+0x12c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00f      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a26      	ldr	r2, [pc, #152]	; (8007c30 <TIM_Base_SetConfig+0x130>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00b      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <TIM_Base_SetConfig+0x134>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d007      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <TIM_Base_SetConfig+0x138>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d003      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a23      	ldr	r2, [pc, #140]	; (8007c3c <TIM_Base_SetConfig+0x13c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d108      	bne.n	8007bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a0a      	ldr	r2, [pc, #40]	; (8007c14 <TIM_Base_SetConfig+0x114>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_Base_SetConfig+0xf8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a0c      	ldr	r2, [pc, #48]	; (8007c24 <TIM_Base_SetConfig+0x124>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d103      	bne.n	8007c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	615a      	str	r2, [r3, #20]
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40010000 	.word	0x40010000
 8007c18:	40000400 	.word	0x40000400
 8007c1c:	40000800 	.word	0x40000800
 8007c20:	40000c00 	.word	0x40000c00
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800
 8007c34:	40001800 	.word	0x40001800
 8007c38:	40001c00 	.word	0x40001c00
 8007c3c:	40002000 	.word	0x40002000

08007c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e040      	b.n	8007d10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fa fbe8 	bl	8002474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2224      	movs	r2, #36	; 0x24
 8007ca8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0201 	bic.w	r2, r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa14 	bl	80080e8 <UART_SetConfig>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e022      	b.n	8007d10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fcb2 	bl	800863c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0201 	orr.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fd39 	bl	8008780 <UART_CheckIdleState>
 8007d0e:	4603      	mov	r3, r0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	4613      	mov	r3, r2
 8007d24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	f040 808a 	bne.w	8007e44 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <HAL_UART_Receive_IT+0x24>
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e082      	b.n	8007e46 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Receive_IT+0x36>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e07b      	b.n	8007e46 <HAL_UART_Receive_IT+0x12e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	88fa      	ldrh	r2, [r7, #6]
 8007d60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	88fa      	ldrh	r2, [r7, #6]
 8007d68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7a:	d10e      	bne.n	8007d9a <HAL_UART_Receive_IT+0x82>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <HAL_UART_Receive_IT+0x78>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d8e:	e02d      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	22ff      	movs	r2, #255	; 0xff
 8007d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d98:	e028      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10d      	bne.n	8007dbe <HAL_UART_Receive_IT+0xa6>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <HAL_UART_Receive_IT+0x9c>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	22ff      	movs	r2, #255	; 0xff
 8007dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007db2:	e01b      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	227f      	movs	r2, #127	; 0x7f
 8007db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dbc:	e016      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dc6:	d10d      	bne.n	8007de4 <HAL_UART_Receive_IT+0xcc>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <HAL_UART_Receive_IT+0xc2>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	227f      	movs	r2, #127	; 0x7f
 8007dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dd8:	e008      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	223f      	movs	r2, #63	; 0x3f
 8007dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007de2:	e003      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2222      	movs	r2, #34	; 0x22
 8007df6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e10:	d107      	bne.n	8007e22 <HAL_UART_Receive_IT+0x10a>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a0d      	ldr	r2, [pc, #52]	; (8007e54 <HAL_UART_Receive_IT+0x13c>)
 8007e1e:	661a      	str	r2, [r3, #96]	; 0x60
 8007e20:	e002      	b.n	8007e28 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a0c      	ldr	r2, [pc, #48]	; (8007e58 <HAL_UART_Receive_IT+0x140>)
 8007e26:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007e3e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e000      	b.n	8007e46 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	08008a19 	.word	0x08008a19
 8007e58:	08008973 	.word	0x08008973

08007e5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e82:	4013      	ands	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d113      	bne.n	8007eb4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00e      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8100 	beq.w	80080aa <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	4798      	blx	r3
      }
      return;
 8007eb2:	e0fa      	b.n	80080aa <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80d5 	beq.w	8008066 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d105      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80ca 	beq.w	8008066 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <HAL_UART_IRQHandler+0x9e>
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2201      	movs	r2, #1
 8007eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef2:	f043 0201 	orr.w	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00e      	beq.n	8007f22 <HAL_UART_IRQHandler+0xc6>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2202      	movs	r2, #2
 8007f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1a:	f043 0204 	orr.w	r2, r3, #4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00e      	beq.n	8007f4a <HAL_UART_IRQHandler+0xee>
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f42:	f043 0202 	orr.w	r2, r3, #2
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	f003 0308 	and.w	r3, r3, #8
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d013      	beq.n	8007f7c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f74:	f043 0208 	orr.w	r2, r3, #8
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x14a>
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00a      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9e:	f043 0220 	orr.w	r2, r3, #32
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d07f      	beq.n	80080ae <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00c      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d004      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d031      	beq.n	8008054 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc6f 	bl	80088d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008000:	2b40      	cmp	r3, #64	; 0x40
 8008002:	d123      	bne.n	800804c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008012:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d013      	beq.n	8008044 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008020:	4a26      	ldr	r2, [pc, #152]	; (80080bc <HAL_UART_IRQHandler+0x260>)
 8008022:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008028:	4618      	mov	r0, r3
 800802a:	f7fb fa5f 	bl	80034ec <HAL_DMA_Abort_IT>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d016      	beq.n	8008062 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800803e:	4610      	mov	r0, r2
 8008040:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008042:	e00e      	b.n	8008062 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f845 	bl	80080d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804a:	e00a      	b.n	8008062 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f841 	bl	80080d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008052:	e006      	b.n	8008062 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f83d 	bl	80080d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008060:	e025      	b.n	80080ae <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008062:	bf00      	nop
    return;
 8008064:	e023      	b.n	80080ae <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00d      	beq.n	800808c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d008      	beq.n	800808c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800807e:	2b00      	cmp	r3, #0
 8008080:	d017      	beq.n	80080b2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
    }
    return;
 800808a:	e012      	b.n	80080b2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00e      	beq.n	80080b4 <HAL_UART_IRQHandler+0x258>
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fc4d 	bl	8008940 <UART_EndTransmit_IT>
    return;
 80080a6:	bf00      	nop
 80080a8:	e004      	b.n	80080b4 <HAL_UART_IRQHandler+0x258>
      return;
 80080aa:	bf00      	nop
 80080ac:	e002      	b.n	80080b4 <HAL_UART_IRQHandler+0x258>
    return;
 80080ae:	bf00      	nop
 80080b0:	e000      	b.n	80080b4 <HAL_UART_IRQHandler+0x258>
    return;
 80080b2:	bf00      	nop
  }

}
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	08008915 	.word	0x08008915

080080c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4bb1      	ldr	r3, [pc, #708]	; (80083dc <UART_SetConfig+0x2f4>)
 8008118:	4013      	ands	r3, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6812      	ldr	r2, [r2, #0]
 800811e:	6939      	ldr	r1, [r7, #16]
 8008120:	430b      	orrs	r3, r1
 8008122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	430a      	orrs	r2, r1
 800815c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a9f      	ldr	r2, [pc, #636]	; (80083e0 <UART_SetConfig+0x2f8>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d121      	bne.n	80081ac <UART_SetConfig+0xc4>
 8008168:	4b9e      	ldr	r3, [pc, #632]	; (80083e4 <UART_SetConfig+0x2fc>)
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b03      	cmp	r3, #3
 8008174:	d816      	bhi.n	80081a4 <UART_SetConfig+0xbc>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0x94>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	0800818d 	.word	0x0800818d
 8008180:	08008199 	.word	0x08008199
 8008184:	08008193 	.word	0x08008193
 8008188:	0800819f 	.word	0x0800819f
 800818c:	2301      	movs	r3, #1
 800818e:	77fb      	strb	r3, [r7, #31]
 8008190:	e151      	b.n	8008436 <UART_SetConfig+0x34e>
 8008192:	2302      	movs	r3, #2
 8008194:	77fb      	strb	r3, [r7, #31]
 8008196:	e14e      	b.n	8008436 <UART_SetConfig+0x34e>
 8008198:	2304      	movs	r3, #4
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	e14b      	b.n	8008436 <UART_SetConfig+0x34e>
 800819e:	2308      	movs	r3, #8
 80081a0:	77fb      	strb	r3, [r7, #31]
 80081a2:	e148      	b.n	8008436 <UART_SetConfig+0x34e>
 80081a4:	2310      	movs	r3, #16
 80081a6:	77fb      	strb	r3, [r7, #31]
 80081a8:	bf00      	nop
 80081aa:	e144      	b.n	8008436 <UART_SetConfig+0x34e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a8d      	ldr	r2, [pc, #564]	; (80083e8 <UART_SetConfig+0x300>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d134      	bne.n	8008220 <UART_SetConfig+0x138>
 80081b6:	4b8b      	ldr	r3, [pc, #556]	; (80083e4 <UART_SetConfig+0x2fc>)
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081bc:	f003 030c 	and.w	r3, r3, #12
 80081c0:	2b0c      	cmp	r3, #12
 80081c2:	d829      	bhi.n	8008218 <UART_SetConfig+0x130>
 80081c4:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <UART_SetConfig+0xe4>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	08008201 	.word	0x08008201
 80081d0:	08008219 	.word	0x08008219
 80081d4:	08008219 	.word	0x08008219
 80081d8:	08008219 	.word	0x08008219
 80081dc:	0800820d 	.word	0x0800820d
 80081e0:	08008219 	.word	0x08008219
 80081e4:	08008219 	.word	0x08008219
 80081e8:	08008219 	.word	0x08008219
 80081ec:	08008207 	.word	0x08008207
 80081f0:	08008219 	.word	0x08008219
 80081f4:	08008219 	.word	0x08008219
 80081f8:	08008219 	.word	0x08008219
 80081fc:	08008213 	.word	0x08008213
 8008200:	2300      	movs	r3, #0
 8008202:	77fb      	strb	r3, [r7, #31]
 8008204:	e117      	b.n	8008436 <UART_SetConfig+0x34e>
 8008206:	2302      	movs	r3, #2
 8008208:	77fb      	strb	r3, [r7, #31]
 800820a:	e114      	b.n	8008436 <UART_SetConfig+0x34e>
 800820c:	2304      	movs	r3, #4
 800820e:	77fb      	strb	r3, [r7, #31]
 8008210:	e111      	b.n	8008436 <UART_SetConfig+0x34e>
 8008212:	2308      	movs	r3, #8
 8008214:	77fb      	strb	r3, [r7, #31]
 8008216:	e10e      	b.n	8008436 <UART_SetConfig+0x34e>
 8008218:	2310      	movs	r3, #16
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	bf00      	nop
 800821e:	e10a      	b.n	8008436 <UART_SetConfig+0x34e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a71      	ldr	r2, [pc, #452]	; (80083ec <UART_SetConfig+0x304>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d120      	bne.n	800826c <UART_SetConfig+0x184>
 800822a:	4b6e      	ldr	r3, [pc, #440]	; (80083e4 <UART_SetConfig+0x2fc>)
 800822c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008230:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008234:	2b10      	cmp	r3, #16
 8008236:	d00f      	beq.n	8008258 <UART_SetConfig+0x170>
 8008238:	2b10      	cmp	r3, #16
 800823a:	d802      	bhi.n	8008242 <UART_SetConfig+0x15a>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <UART_SetConfig+0x164>
 8008240:	e010      	b.n	8008264 <UART_SetConfig+0x17c>
 8008242:	2b20      	cmp	r3, #32
 8008244:	d005      	beq.n	8008252 <UART_SetConfig+0x16a>
 8008246:	2b30      	cmp	r3, #48	; 0x30
 8008248:	d009      	beq.n	800825e <UART_SetConfig+0x176>
 800824a:	e00b      	b.n	8008264 <UART_SetConfig+0x17c>
 800824c:	2300      	movs	r3, #0
 800824e:	77fb      	strb	r3, [r7, #31]
 8008250:	e0f1      	b.n	8008436 <UART_SetConfig+0x34e>
 8008252:	2302      	movs	r3, #2
 8008254:	77fb      	strb	r3, [r7, #31]
 8008256:	e0ee      	b.n	8008436 <UART_SetConfig+0x34e>
 8008258:	2304      	movs	r3, #4
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e0eb      	b.n	8008436 <UART_SetConfig+0x34e>
 800825e:	2308      	movs	r3, #8
 8008260:	77fb      	strb	r3, [r7, #31]
 8008262:	e0e8      	b.n	8008436 <UART_SetConfig+0x34e>
 8008264:	2310      	movs	r3, #16
 8008266:	77fb      	strb	r3, [r7, #31]
 8008268:	bf00      	nop
 800826a:	e0e4      	b.n	8008436 <UART_SetConfig+0x34e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a5f      	ldr	r2, [pc, #380]	; (80083f0 <UART_SetConfig+0x308>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d120      	bne.n	80082b8 <UART_SetConfig+0x1d0>
 8008276:	4b5b      	ldr	r3, [pc, #364]	; (80083e4 <UART_SetConfig+0x2fc>)
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008280:	2b40      	cmp	r3, #64	; 0x40
 8008282:	d00f      	beq.n	80082a4 <UART_SetConfig+0x1bc>
 8008284:	2b40      	cmp	r3, #64	; 0x40
 8008286:	d802      	bhi.n	800828e <UART_SetConfig+0x1a6>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <UART_SetConfig+0x1b0>
 800828c:	e010      	b.n	80082b0 <UART_SetConfig+0x1c8>
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d005      	beq.n	800829e <UART_SetConfig+0x1b6>
 8008292:	2bc0      	cmp	r3, #192	; 0xc0
 8008294:	d009      	beq.n	80082aa <UART_SetConfig+0x1c2>
 8008296:	e00b      	b.n	80082b0 <UART_SetConfig+0x1c8>
 8008298:	2300      	movs	r3, #0
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	e0cb      	b.n	8008436 <UART_SetConfig+0x34e>
 800829e:	2302      	movs	r3, #2
 80082a0:	77fb      	strb	r3, [r7, #31]
 80082a2:	e0c8      	b.n	8008436 <UART_SetConfig+0x34e>
 80082a4:	2304      	movs	r3, #4
 80082a6:	77fb      	strb	r3, [r7, #31]
 80082a8:	e0c5      	b.n	8008436 <UART_SetConfig+0x34e>
 80082aa:	2308      	movs	r3, #8
 80082ac:	77fb      	strb	r3, [r7, #31]
 80082ae:	e0c2      	b.n	8008436 <UART_SetConfig+0x34e>
 80082b0:	2310      	movs	r3, #16
 80082b2:	77fb      	strb	r3, [r7, #31]
 80082b4:	bf00      	nop
 80082b6:	e0be      	b.n	8008436 <UART_SetConfig+0x34e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a4d      	ldr	r2, [pc, #308]	; (80083f4 <UART_SetConfig+0x30c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d124      	bne.n	800830c <UART_SetConfig+0x224>
 80082c2:	4b48      	ldr	r3, [pc, #288]	; (80083e4 <UART_SetConfig+0x2fc>)
 80082c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d0:	d012      	beq.n	80082f8 <UART_SetConfig+0x210>
 80082d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d6:	d802      	bhi.n	80082de <UART_SetConfig+0x1f6>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <UART_SetConfig+0x204>
 80082dc:	e012      	b.n	8008304 <UART_SetConfig+0x21c>
 80082de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e2:	d006      	beq.n	80082f2 <UART_SetConfig+0x20a>
 80082e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e8:	d009      	beq.n	80082fe <UART_SetConfig+0x216>
 80082ea:	e00b      	b.n	8008304 <UART_SetConfig+0x21c>
 80082ec:	2300      	movs	r3, #0
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e0a1      	b.n	8008436 <UART_SetConfig+0x34e>
 80082f2:	2302      	movs	r3, #2
 80082f4:	77fb      	strb	r3, [r7, #31]
 80082f6:	e09e      	b.n	8008436 <UART_SetConfig+0x34e>
 80082f8:	2304      	movs	r3, #4
 80082fa:	77fb      	strb	r3, [r7, #31]
 80082fc:	e09b      	b.n	8008436 <UART_SetConfig+0x34e>
 80082fe:	2308      	movs	r3, #8
 8008300:	77fb      	strb	r3, [r7, #31]
 8008302:	e098      	b.n	8008436 <UART_SetConfig+0x34e>
 8008304:	2310      	movs	r3, #16
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	bf00      	nop
 800830a:	e094      	b.n	8008436 <UART_SetConfig+0x34e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a39      	ldr	r2, [pc, #228]	; (80083f8 <UART_SetConfig+0x310>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d124      	bne.n	8008360 <UART_SetConfig+0x278>
 8008316:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <UART_SetConfig+0x2fc>)
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008324:	d012      	beq.n	800834c <UART_SetConfig+0x264>
 8008326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800832a:	d802      	bhi.n	8008332 <UART_SetConfig+0x24a>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d007      	beq.n	8008340 <UART_SetConfig+0x258>
 8008330:	e012      	b.n	8008358 <UART_SetConfig+0x270>
 8008332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008336:	d006      	beq.n	8008346 <UART_SetConfig+0x25e>
 8008338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800833c:	d009      	beq.n	8008352 <UART_SetConfig+0x26a>
 800833e:	e00b      	b.n	8008358 <UART_SetConfig+0x270>
 8008340:	2301      	movs	r3, #1
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e077      	b.n	8008436 <UART_SetConfig+0x34e>
 8008346:	2302      	movs	r3, #2
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e074      	b.n	8008436 <UART_SetConfig+0x34e>
 800834c:	2304      	movs	r3, #4
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e071      	b.n	8008436 <UART_SetConfig+0x34e>
 8008352:	2308      	movs	r3, #8
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e06e      	b.n	8008436 <UART_SetConfig+0x34e>
 8008358:	2310      	movs	r3, #16
 800835a:	77fb      	strb	r3, [r7, #31]
 800835c:	bf00      	nop
 800835e:	e06a      	b.n	8008436 <UART_SetConfig+0x34e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a25      	ldr	r2, [pc, #148]	; (80083fc <UART_SetConfig+0x314>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d124      	bne.n	80083b4 <UART_SetConfig+0x2cc>
 800836a:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <UART_SetConfig+0x2fc>)
 800836c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008370:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008378:	d012      	beq.n	80083a0 <UART_SetConfig+0x2b8>
 800837a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837e:	d802      	bhi.n	8008386 <UART_SetConfig+0x29e>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <UART_SetConfig+0x2ac>
 8008384:	e012      	b.n	80083ac <UART_SetConfig+0x2c4>
 8008386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800838a:	d006      	beq.n	800839a <UART_SetConfig+0x2b2>
 800838c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008390:	d009      	beq.n	80083a6 <UART_SetConfig+0x2be>
 8008392:	e00b      	b.n	80083ac <UART_SetConfig+0x2c4>
 8008394:	2300      	movs	r3, #0
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e04d      	b.n	8008436 <UART_SetConfig+0x34e>
 800839a:	2302      	movs	r3, #2
 800839c:	77fb      	strb	r3, [r7, #31]
 800839e:	e04a      	b.n	8008436 <UART_SetConfig+0x34e>
 80083a0:	2304      	movs	r3, #4
 80083a2:	77fb      	strb	r3, [r7, #31]
 80083a4:	e047      	b.n	8008436 <UART_SetConfig+0x34e>
 80083a6:	2308      	movs	r3, #8
 80083a8:	77fb      	strb	r3, [r7, #31]
 80083aa:	e044      	b.n	8008436 <UART_SetConfig+0x34e>
 80083ac:	2310      	movs	r3, #16
 80083ae:	77fb      	strb	r3, [r7, #31]
 80083b0:	bf00      	nop
 80083b2:	e040      	b.n	8008436 <UART_SetConfig+0x34e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a11      	ldr	r2, [pc, #68]	; (8008400 <UART_SetConfig+0x318>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d139      	bne.n	8008432 <UART_SetConfig+0x34a>
 80083be:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <UART_SetConfig+0x2fc>)
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083cc:	d027      	beq.n	800841e <UART_SetConfig+0x336>
 80083ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d2:	d817      	bhi.n	8008404 <UART_SetConfig+0x31c>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01c      	beq.n	8008412 <UART_SetConfig+0x32a>
 80083d8:	e027      	b.n	800842a <UART_SetConfig+0x342>
 80083da:	bf00      	nop
 80083dc:	efff69f3 	.word	0xefff69f3
 80083e0:	40011000 	.word	0x40011000
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40004400 	.word	0x40004400
 80083ec:	40004800 	.word	0x40004800
 80083f0:	40004c00 	.word	0x40004c00
 80083f4:	40005000 	.word	0x40005000
 80083f8:	40011400 	.word	0x40011400
 80083fc:	40007800 	.word	0x40007800
 8008400:	40007c00 	.word	0x40007c00
 8008404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008408:	d006      	beq.n	8008418 <UART_SetConfig+0x330>
 800840a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800840e:	d009      	beq.n	8008424 <UART_SetConfig+0x33c>
 8008410:	e00b      	b.n	800842a <UART_SetConfig+0x342>
 8008412:	2300      	movs	r3, #0
 8008414:	77fb      	strb	r3, [r7, #31]
 8008416:	e00e      	b.n	8008436 <UART_SetConfig+0x34e>
 8008418:	2302      	movs	r3, #2
 800841a:	77fb      	strb	r3, [r7, #31]
 800841c:	e00b      	b.n	8008436 <UART_SetConfig+0x34e>
 800841e:	2304      	movs	r3, #4
 8008420:	77fb      	strb	r3, [r7, #31]
 8008422:	e008      	b.n	8008436 <UART_SetConfig+0x34e>
 8008424:	2308      	movs	r3, #8
 8008426:	77fb      	strb	r3, [r7, #31]
 8008428:	e005      	b.n	8008436 <UART_SetConfig+0x34e>
 800842a:	2310      	movs	r3, #16
 800842c:	77fb      	strb	r3, [r7, #31]
 800842e:	bf00      	nop
 8008430:	e001      	b.n	8008436 <UART_SetConfig+0x34e>
 8008432:	2310      	movs	r3, #16
 8008434:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800843e:	d17f      	bne.n	8008540 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008440:	7ffb      	ldrb	r3, [r7, #31]
 8008442:	2b08      	cmp	r3, #8
 8008444:	d85c      	bhi.n	8008500 <UART_SetConfig+0x418>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <UART_SetConfig+0x364>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	08008471 	.word	0x08008471
 8008450:	08008491 	.word	0x08008491
 8008454:	080084b1 	.word	0x080084b1
 8008458:	08008501 	.word	0x08008501
 800845c:	080084c9 	.word	0x080084c9
 8008460:	08008501 	.word	0x08008501
 8008464:	08008501 	.word	0x08008501
 8008468:	08008501 	.word	0x08008501
 800846c:	080084e9 	.word	0x080084e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008470:	f7fd fddc 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008474:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	005a      	lsls	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	441a      	add	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	fbb2 f3f3 	udiv	r3, r2, r3
 800848a:	b29b      	uxth	r3, r3
 800848c:	61bb      	str	r3, [r7, #24]
        break;
 800848e:	e03a      	b.n	8008506 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008490:	f7fd fde0 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008494:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	005a      	lsls	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	441a      	add	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	61bb      	str	r3, [r7, #24]
        break;
 80084ae:	e02a      	b.n	8008506 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	085a      	lsrs	r2, r3, #1
 80084b6:	4b5f      	ldr	r3, [pc, #380]	; (8008634 <UART_SetConfig+0x54c>)
 80084b8:	4413      	add	r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6852      	ldr	r2, [r2, #4]
 80084be:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	61bb      	str	r3, [r7, #24]
        break;
 80084c6:	e01e      	b.n	8008506 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084c8:	f7fd fcf2 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80084cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	005a      	lsls	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	441a      	add	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	61bb      	str	r3, [r7, #24]
        break;
 80084e6:	e00e      	b.n	8008506 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	61bb      	str	r3, [r7, #24]
        break;
 80084fe:	e002      	b.n	8008506 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	75fb      	strb	r3, [r7, #23]
        break;
 8008504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	2b0f      	cmp	r3, #15
 800850a:	d916      	bls.n	800853a <UART_SetConfig+0x452>
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008512:	d212      	bcs.n	800853a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f023 030f 	bic.w	r3, r3, #15
 800851c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	085b      	lsrs	r3, r3, #1
 8008522:	b29b      	uxth	r3, r3
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	b29a      	uxth	r2, r3
 800852a:	897b      	ldrh	r3, [r7, #10]
 800852c:	4313      	orrs	r3, r2
 800852e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	897a      	ldrh	r2, [r7, #10]
 8008536:	60da      	str	r2, [r3, #12]
 8008538:	e070      	b.n	800861c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e06d      	b.n	800861c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008540:	7ffb      	ldrb	r3, [r7, #31]
 8008542:	2b08      	cmp	r3, #8
 8008544:	d859      	bhi.n	80085fa <UART_SetConfig+0x512>
 8008546:	a201      	add	r2, pc, #4	; (adr r2, 800854c <UART_SetConfig+0x464>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	08008571 	.word	0x08008571
 8008550:	0800858f 	.word	0x0800858f
 8008554:	080085ad 	.word	0x080085ad
 8008558:	080085fb 	.word	0x080085fb
 800855c:	080085c5 	.word	0x080085c5
 8008560:	080085fb 	.word	0x080085fb
 8008564:	080085fb 	.word	0x080085fb
 8008568:	080085fb 	.word	0x080085fb
 800856c:	080085e3 	.word	0x080085e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008570:	f7fd fd5c 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008574:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	085a      	lsrs	r2, r3, #1
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	441a      	add	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	b29b      	uxth	r3, r3
 800858a:	61bb      	str	r3, [r7, #24]
        break;
 800858c:	e038      	b.n	8008600 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800858e:	f7fd fd61 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008592:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	085a      	lsrs	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	441a      	add	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	61bb      	str	r3, [r7, #24]
        break;
 80085aa:	e029      	b.n	8008600 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	085a      	lsrs	r2, r3, #1
 80085b2:	4b21      	ldr	r3, [pc, #132]	; (8008638 <UART_SetConfig+0x550>)
 80085b4:	4413      	add	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6852      	ldr	r2, [r2, #4]
 80085ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80085be:	b29b      	uxth	r3, r3
 80085c0:	61bb      	str	r3, [r7, #24]
        break;
 80085c2:	e01d      	b.n	8008600 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c4:	f7fd fc74 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80085c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	085a      	lsrs	r2, r3, #1
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	441a      	add	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085dc:	b29b      	uxth	r3, r3
 80085de:	61bb      	str	r3, [r7, #24]
        break;
 80085e0:	e00e      	b.n	8008600 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	085b      	lsrs	r3, r3, #1
 80085e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	61bb      	str	r3, [r7, #24]
        break;
 80085f8:	e002      	b.n	8008600 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]
        break;
 80085fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b0f      	cmp	r3, #15
 8008604:	d908      	bls.n	8008618 <UART_SetConfig+0x530>
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800860c:	d204      	bcs.n	8008618 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	e001      	b.n	800861c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008628:	7dfb      	ldrb	r3, [r7, #23]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	01e84800 	.word	0x01e84800
 8008638:	00f42400 	.word	0x00f42400

0800863c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01a      	beq.n	8008752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873a:	d10a      	bne.n	8008752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800878e:	f7fa f981 	bl	8002a94 <HAL_GetTick>
 8008792:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d10e      	bne.n	80087c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f814 	bl	80087de <UART_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e00a      	b.n	80087d6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ee:	e05d      	b.n	80088ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d059      	beq.n	80088ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f8:	f7fa f94c 	bl	8002a94 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <UART_WaitOnFlagUntilTimeout+0x30>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d11b      	bne.n	8008846 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800881c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0201 	bic.w	r2, r2, #1
 800882c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2220      	movs	r2, #32
 8008832:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2220      	movs	r2, #32
 8008838:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e042      	b.n	80088cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d02b      	beq.n	80088ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800885e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008862:	d123      	bne.n	80088ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800886c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800887c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2220      	movs	r2, #32
 8008892:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2220      	movs	r2, #32
 8008898:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e00f      	b.n	80088cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	69da      	ldr	r2, [r3, #28]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4013      	ands	r3, r2
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	bf0c      	ite	eq
 80088bc:	2301      	moveq	r3, #1
 80088be:	2300      	movne	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d092      	beq.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0201 	bic.w	r2, r2, #1
 80088fa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fbce 	bl	80080d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008956:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2220      	movs	r2, #32
 800895c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff fbab 	bl	80080c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008980:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008986:	2b22      	cmp	r3, #34	; 0x22
 8008988:	d13a      	bne.n	8008a00 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008992:	89bb      	ldrh	r3, [r7, #12]
 8008994:	b2d9      	uxtb	r1, r3
 8008996:	89fb      	ldrh	r3, [r7, #14]
 8008998:	b2da      	uxtb	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899e:	400a      	ands	r2, r1
 80089a0:	b2d2      	uxtb	r2, r2
 80089a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d121      	bne.n	8008a10 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0201 	bic.w	r2, r2, #1
 80089ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7f8 f89b 	bl	8000b34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089fe:	e007      	b.n	8008a10 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0208 	orr.w	r2, r2, #8
 8008a0e:	619a      	str	r2, [r3, #24]
}
 8008a10:	bf00      	nop
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a26:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a2c:	2b22      	cmp	r3, #34	; 0x22
 8008a2e:	d13a      	bne.n	8008aa6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a3e:	89ba      	ldrh	r2, [r7, #12]
 8008a40:	89fb      	ldrh	r3, [r7, #14]
 8008a42:	4013      	ands	r3, r2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4e:	1c9a      	adds	r2, r3, #2
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d121      	bne.n	8008ab6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a80:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0201 	bic.w	r2, r2, #1
 8008a90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7f8 f848 	bl	8000b34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aa4:	e007      	b.n	8008ab6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	699a      	ldr	r2, [r3, #24]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f042 0208 	orr.w	r2, r2, #8
 8008ab4:	619a      	str	r2, [r3, #24]
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d027      	beq.n	8008b2a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4b2f      	ldr	r3, [pc, #188]	; (8008ba0 <FMC_SDRAM_Init+0xe0>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008af0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008af6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008afc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008b02:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008b08:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008b0e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008b14:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b1a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e032      	b.n	8008b90 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b36:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b40:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <FMC_SDRAM_Init+0xe0>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b64:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008b6a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008b70:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008b76:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008b7c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	ffff8000 	.word	0xffff8000

08008ba4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d02e      	beq.n	8008c1c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008bca:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bda:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008be4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bee:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008bf8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008c02:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	609a      	str	r2, [r3, #8]
 8008c1a:	e039      	b.n	8008c90 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4b1e      	ldr	r3, [pc, #120]	; (8008ca0 <FMC_SDRAM_Timing_Init+0xfc>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c4e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c5e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c68:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c72:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	ff0f0fff 	.word	0xff0f0fff

08008ca4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008cbc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008cc6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	695a      	ldr	r2, [r3, #20]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d1e:	2b84      	cmp	r3, #132	; 0x84
 8008d20:	d005      	beq.n	8008d2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	3303      	adds	r3, #3
 8008d2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d42:	f3ef 8305 	mrs	r3, IPSR
 8008d46:	607b      	str	r3, [r7, #4]
  return(result);
 8008d48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bf14      	ite	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	2300      	moveq	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d64:	f001 fa9c 	bl	800a2a0 <vTaskStartScheduler>
  
  return osOK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d70:	b089      	sub	sp, #36	; 0x24
 8008d72:	af04      	add	r7, sp, #16
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d020      	beq.n	8008dc2 <osThreadCreate+0x54>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01c      	beq.n	8008dc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685c      	ldr	r4, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681d      	ldr	r5, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691e      	ldr	r6, [r3, #16]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff ffb6 	bl	8008d0c <makeFreeRtosPriority>
 8008da0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008daa:	9202      	str	r2, [sp, #8]
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	9100      	str	r1, [sp, #0]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	4632      	mov	r2, r6
 8008db4:	4629      	mov	r1, r5
 8008db6:	4620      	mov	r0, r4
 8008db8:	f001 f899 	bl	8009eee <xTaskCreateStatic>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e01c      	b.n	8008dfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685c      	ldr	r4, [r3, #4]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dce:	b29e      	uxth	r6, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff ff98 	bl	8008d0c <makeFreeRtosPriority>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	f107 030c 	add.w	r3, r7, #12
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	9200      	str	r2, [sp, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	4632      	mov	r2, r6
 8008dea:	4629      	mov	r1, r5
 8008dec:	4620      	mov	r0, r4
 8008dee:	f001 f8de 	bl	8009fae <xTaskCreate>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d001      	beq.n	8008dfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e000      	b.n	8008dfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <osDelay+0x16>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	e000      	b.n	8008e1e <osDelay+0x18>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f001 fa08 	bl	800a234 <vTaskDelay>
  
  return osOK;
 8008e24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b086      	sub	sp, #24
 8008e32:	af02      	add	r7, sp, #8
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d017      	beq.n	8008e70 <osSemaphoreCreate+0x42>
    if (count == 1) {
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d10b      	bne.n	8008e5e <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	2200      	movs	r2, #0
 8008e52:	2100      	movs	r1, #0
 8008e54:	2001      	movs	r0, #1
 8008e56:	f000 f9cd 	bl	80091f4 <xQueueGenericCreateStatic>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	e023      	b.n	8008ea6 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8008e5e:	6838      	ldr	r0, [r7, #0]
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f000 faa1 	bl	80093ae <xQueueCreateCountingSemaphoreStatic>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	e01a      	b.n	8008ea6 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d110      	bne.n	8008e98 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 8008e76:	2203      	movs	r2, #3
 8008e78:	2100      	movs	r1, #0
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	f000 fa37 	bl	80092ee <xQueueGenericCreate>
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <osSemaphoreCreate+0x66>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fafc 	bl	800948c <xQueueGenericSend>
      return sema;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	e006      	b.n	8008ea6 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fabe 	bl	8009420 <xQueueCreateCountingSemaphore>
 8008ea4:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008ec4:	2380      	movs	r3, #128	; 0x80
 8008ec6:	e03a      	b.n	8008f3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed2:	d103      	bne.n	8008edc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	e009      	b.n	8008ef0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d006      	beq.n	8008ef0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <osSemaphoreWait+0x40>
      ticks = 1;
 8008eec:	2301      	movs	r3, #1
 8008eee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008ef0:	f7ff ff24 	bl	8008d3c <inHandlerMode>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d017      	beq.n	8008f2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	461a      	mov	r2, r3
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fe48 	bl	8009b98 <xQueueReceiveFromISR>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d001      	beq.n	8008f12 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008f0e:	23ff      	movs	r3, #255	; 0xff
 8008f10:	e015      	b.n	8008f3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d011      	beq.n	8008f3c <osSemaphoreWait+0x8c>
 8008f18:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <osSemaphoreWait+0x98>)
 8008f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	e008      	b.n	8008f3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fd23 	bl	8009978 <xQueueSemaphoreTake>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d001      	beq.n	8008f3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008f38:	23ff      	movs	r3, #255	; 0xff
 8008f3a:	e000      	b.n	8008f3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008f5c:	f7ff feee 	bl	8008d3c <inHandlerMode>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d016      	beq.n	8008f94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fb8f 	bl	8009690 <xQueueGiveFromISR>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d001      	beq.n	8008f7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008f78:	23ff      	movs	r3, #255	; 0xff
 8008f7a:	e017      	b.n	8008fac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d013      	beq.n	8008faa <osSemaphoreRelease+0x5e>
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <osSemaphoreRelease+0x68>)
 8008f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	e00a      	b.n	8008faa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008f94:	2300      	movs	r3, #0
 8008f96:	2200      	movs	r2, #0
 8008f98:	2100      	movs	r1, #0
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa76 	bl	800948c <xQueueGenericSend>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d001      	beq.n	8008faa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008fa6:	23ff      	movs	r3, #255	; 0xff
 8008fa8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008faa:	68fb      	ldr	r3, [r7, #12]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	e000ed04 	.word	0xe000ed04

08008fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f103 0208 	add.w	r2, r3, #8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f103 0208 	add.w	r2, r3, #8
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f103 0208 	add.w	r2, r3, #8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	601a      	str	r2, [r3, #0]
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009070:	d103      	bne.n	800907a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e00c      	b.n	8009094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3308      	adds	r3, #8
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	e002      	b.n	8009088 <vListInsert+0x2e>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	429a      	cmp	r2, r3
 8009092:	d2f6      	bcs.n	8009082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]
}
 80090c0:	bf00      	nop
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	6892      	ldr	r2, [r2, #8]
 80090e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6852      	ldr	r2, [r2, #4]
 80090ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d103      	bne.n	8009100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	1e5a      	subs	r2, r3, #1
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	b672      	cpsid	i
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	b662      	cpsie	i
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	e7fe      	b.n	800914a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800914c:	f002 f81c 	bl	800b188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009158:	68f9      	ldr	r1, [r7, #12]
 800915a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800915c:	fb01 f303 	mul.w	r3, r1, r3
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917c:	3b01      	subs	r3, #1
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009182:	fb01 f303 	mul.w	r3, r1, r3
 8009186:	441a      	add	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	22ff      	movs	r2, #255	; 0xff
 8009190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	22ff      	movs	r2, #255	; 0xff
 8009198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d114      	bne.n	80091cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d01a      	beq.n	80091e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3310      	adds	r3, #16
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 fae6 	bl	800a780 <xTaskRemoveFromEventList>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d012      	beq.n	80091e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091ba:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <xQueueGenericReset+0xd0>)
 80091bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	e009      	b.n	80091e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3310      	adds	r3, #16
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff fef1 	bl	8008fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3324      	adds	r3, #36	; 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff feec 	bl	8008fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091e0:	f002 f804 	bl	800b1ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091e4:	2301      	movs	r3, #1
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08e      	sub	sp, #56	; 0x38
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10b      	bne.n	8009220 <xQueueGenericCreateStatic+0x2c>
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	b672      	cpsid	i
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	b662      	cpsie	i
 800921c:	62bb      	str	r3, [r7, #40]	; 0x28
 800921e:	e7fe      	b.n	800921e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10b      	bne.n	800923e <xQueueGenericCreateStatic+0x4a>
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	b672      	cpsid	i
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	b662      	cpsie	i
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
 800923c:	e7fe      	b.n	800923c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <xQueueGenericCreateStatic+0x56>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <xQueueGenericCreateStatic+0x5a>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericCreateStatic+0x5c>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <xQueueGenericCreateStatic+0x78>
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	b672      	cpsid	i
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	b662      	cpsie	i
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	e7fe      	b.n	800926a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <xQueueGenericCreateStatic+0x84>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <xQueueGenericCreateStatic+0x88>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <xQueueGenericCreateStatic+0x8a>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10b      	bne.n	800929a <xQueueGenericCreateStatic+0xa6>
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	b672      	cpsid	i
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	b662      	cpsie	i
 8009296:	61fb      	str	r3, [r7, #28]
 8009298:	e7fe      	b.n	8009298 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800929a:	2348      	movs	r3, #72	; 0x48
 800929c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b48      	cmp	r3, #72	; 0x48
 80092a2:	d00b      	beq.n	80092bc <xQueueGenericCreateStatic+0xc8>
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	b672      	cpsid	i
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	b662      	cpsie	i
 80092b8:	61bb      	str	r3, [r7, #24]
 80092ba:	e7fe      	b.n	80092ba <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00d      	beq.n	80092e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4613      	mov	r3, r2
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f846 	bl	8009370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3730      	adds	r7, #48	; 0x30
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b08a      	sub	sp, #40	; 0x28
 80092f2:	af02      	add	r7, sp, #8
 80092f4:	60f8      	str	r0, [r7, #12]
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	4613      	mov	r3, r2
 80092fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <xQueueGenericCreate+0x2c>
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	e7fe      	b.n	8009318 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009320:	2300      	movs	r3, #0
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	e004      	b.n	8009330 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	fb02 f303 	mul.w	r3, r2, r3
 800932e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	3348      	adds	r3, #72	; 0x48
 8009334:	4618      	mov	r0, r3
 8009336:	f002 f849 	bl	800b3cc <pvPortMalloc>
 800933a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d011      	beq.n	8009366 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	3348      	adds	r3, #72	; 0x48
 800934a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009354:	79fa      	ldrb	r2, [r7, #7]
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	4613      	mov	r3, r2
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f805 	bl	8009370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009366:	69bb      	ldr	r3, [r7, #24]
	}
 8009368:	4618      	mov	r0, r3
 800936a:	3720      	adds	r7, #32
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d103      	bne.n	800938c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	e002      	b.n	8009392 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800939e:	2101      	movs	r1, #1
 80093a0:	69b8      	ldr	r0, [r7, #24]
 80093a2:	f7ff febd 	bl	8009120 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b08a      	sub	sp, #40	; 0x28
 80093b2:	af02      	add	r7, sp, #8
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	b672      	cpsid	i
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	b662      	cpsie	i
 80093d4:	61bb      	str	r3, [r7, #24]
 80093d6:	e7fe      	b.n	80093d6 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d90b      	bls.n	80093f8 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	b672      	cpsid	i
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	b662      	cpsie	i
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	e7fe      	b.n	80093f6 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093f8:	2302      	movs	r3, #2
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	2100      	movs	r1, #0
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff fef6 	bl	80091f4 <xQueueGenericCreateStatic>
 8009408:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009416:	69fb      	ldr	r3, [r7, #28]
	}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10b      	bne.n	8009448 <xQueueCreateCountingSemaphore+0x28>
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	b672      	cpsid	i
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	b662      	cpsie	i
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	e7fe      	b.n	8009446 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	429a      	cmp	r2, r3
 800944e:	d90b      	bls.n	8009468 <xQueueCreateCountingSemaphore+0x48>
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	b672      	cpsid	i
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	b662      	cpsie	i
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e7fe      	b.n	8009466 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009468:	2202      	movs	r2, #2
 800946a:	2100      	movs	r1, #0
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff ff3e 	bl	80092ee <xQueueGenericCreate>
 8009472:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009480:	697b      	ldr	r3, [r7, #20]
	}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08e      	sub	sp, #56	; 0x38
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800949a:	2300      	movs	r3, #0
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10b      	bne.n	80094c0 <xQueueGenericSend+0x34>
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	b672      	cpsid	i
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	b662      	cpsie	i
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80094be:	e7fe      	b.n	80094be <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <xQueueGenericSend+0x42>
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <xQueueGenericSend+0x46>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e000      	b.n	80094d4 <xQueueGenericSend+0x48>
 80094d2:	2300      	movs	r3, #0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10b      	bne.n	80094f0 <xQueueGenericSend+0x64>
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	b672      	cpsid	i
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	b662      	cpsie	i
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
 80094ee:	e7fe      	b.n	80094ee <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d103      	bne.n	80094fe <xQueueGenericSend+0x72>
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <xQueueGenericSend+0x76>
 80094fe:	2301      	movs	r3, #1
 8009500:	e000      	b.n	8009504 <xQueueGenericSend+0x78>
 8009502:	2300      	movs	r3, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10b      	bne.n	8009520 <xQueueGenericSend+0x94>
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	b672      	cpsid	i
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	b662      	cpsie	i
 800951c:	623b      	str	r3, [r7, #32]
 800951e:	e7fe      	b.n	800951e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009520:	f001 faee 	bl	800ab00 <xTaskGetSchedulerState>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <xQueueGenericSend+0xa4>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <xQueueGenericSend+0xa8>
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <xQueueGenericSend+0xaa>
 8009534:	2300      	movs	r3, #0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <xQueueGenericSend+0xc6>
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	b672      	cpsid	i
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	b662      	cpsie	i
 800954e:	61fb      	str	r3, [r7, #28]
 8009550:	e7fe      	b.n	8009550 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009552:	f001 fe19 	bl	800b188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955e:	429a      	cmp	r2, r3
 8009560:	d302      	bcc.n	8009568 <xQueueGenericSend+0xdc>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b02      	cmp	r3, #2
 8009566:	d129      	bne.n	80095bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800956e:	f000 fbae 	bl	8009cce <prvCopyDataToQueue>
 8009572:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	2b00      	cmp	r3, #0
 800957a:	d010      	beq.n	800959e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	3324      	adds	r3, #36	; 0x24
 8009580:	4618      	mov	r0, r3
 8009582:	f001 f8fd 	bl	800a780 <xTaskRemoveFromEventList>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d013      	beq.n	80095b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800958c:	4b3f      	ldr	r3, [pc, #252]	; (800968c <xQueueGenericSend+0x200>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	e00a      	b.n	80095b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095a4:	4b39      	ldr	r3, [pc, #228]	; (800968c <xQueueGenericSend+0x200>)
 80095a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095b4:	f001 fe1a 	bl	800b1ec <vPortExitCritical>
				return pdPASS;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e063      	b.n	8009684 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d103      	bne.n	80095ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095c2:	f001 fe13 	bl	800b1ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e05c      	b.n	8009684 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d106      	bne.n	80095de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095d0:	f107 0314 	add.w	r3, r7, #20
 80095d4:	4618      	mov	r0, r3
 80095d6:	f001 f937 	bl	800a848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095da:	2301      	movs	r3, #1
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095de:	f001 fe05 	bl	800b1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095e2:	f000 febf 	bl	800a364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095e6:	f001 fdcf 	bl	800b188 <vPortEnterCritical>
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f6:	d103      	bne.n	8009600 <xQueueGenericSend+0x174>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009606:	b25b      	sxtb	r3, r3
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d103      	bne.n	8009616 <xQueueGenericSend+0x18a>
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009616:	f001 fde9 	bl	800b1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800961a:	1d3a      	adds	r2, r7, #4
 800961c:	f107 0314 	add.w	r3, r7, #20
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f001 f926 	bl	800a874 <xTaskCheckForTimeOut>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d124      	bne.n	8009678 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800962e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009630:	f000 fc45 	bl	8009ebe <prvIsQueueFull>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d018      	beq.n	800966c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	3310      	adds	r3, #16
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f001 f876 	bl	800a734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800964a:	f000 fbd0 	bl	8009dee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800964e:	f000 fe97 	bl	800a380 <xTaskResumeAll>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	f47f af7c 	bne.w	8009552 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800965a:	4b0c      	ldr	r3, [pc, #48]	; (800968c <xQueueGenericSend+0x200>)
 800965c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	e772      	b.n	8009552 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800966c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800966e:	f000 fbbe 	bl	8009dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009672:	f000 fe85 	bl	800a380 <xTaskResumeAll>
 8009676:	e76c      	b.n	8009552 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800967a:	f000 fbb8 	bl	8009dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800967e:	f000 fe7f 	bl	800a380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009682:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009684:	4618      	mov	r0, r3
 8009686:	3738      	adds	r7, #56	; 0x38
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	e000ed04 	.word	0xe000ed04

08009690 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08e      	sub	sp, #56	; 0x38
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10b      	bne.n	80096bc <xQueueGiveFromISR+0x2c>
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	b672      	cpsid	i
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	b662      	cpsie	i
 80096b8:	623b      	str	r3, [r7, #32]
 80096ba:	e7fe      	b.n	80096ba <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00b      	beq.n	80096dc <xQueueGiveFromISR+0x4c>
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	b672      	cpsid	i
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	b662      	cpsie	i
 80096d8:	61fb      	str	r3, [r7, #28]
 80096da:	e7fe      	b.n	80096da <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <xQueueGiveFromISR+0x5c>
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <xQueueGiveFromISR+0x60>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <xQueueGiveFromISR+0x62>
 80096f0:	2300      	movs	r3, #0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10b      	bne.n	800970e <xQueueGiveFromISR+0x7e>
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	b672      	cpsid	i
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	b662      	cpsie	i
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	e7fe      	b.n	800970c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800970e:	f001 fe1b 	bl	800b348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009712:	f3ef 8211 	mrs	r2, BASEPRI
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	b672      	cpsid	i
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	b662      	cpsie	i
 800972a:	617a      	str	r2, [r7, #20]
 800972c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800972e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800973e:	429a      	cmp	r2, r3
 8009740:	d22b      	bcs.n	800979a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975c:	d112      	bne.n	8009784 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d016      	beq.n	8009794 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	3324      	adds	r3, #36	; 0x24
 800976a:	4618      	mov	r0, r3
 800976c:	f001 f808 	bl	800a780 <xTaskRemoveFromEventList>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00e      	beq.n	8009794 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2201      	movs	r2, #1
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e007      	b.n	8009794 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009788:	3301      	adds	r3, #1
 800978a:	b2db      	uxtb	r3, r3
 800978c:	b25a      	sxtb	r2, r3
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009794:	2301      	movs	r3, #1
 8009796:	637b      	str	r3, [r7, #52]	; 0x34
 8009798:	e001      	b.n	800979e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800979a:	2300      	movs	r3, #0
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3738      	adds	r7, #56	; 0x38
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08c      	sub	sp, #48	; 0x30
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097c0:	2300      	movs	r3, #0
 80097c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <xQueueReceive+0x32>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	b672      	cpsid	i
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	b662      	cpsie	i
 80097e2:	623b      	str	r3, [r7, #32]
 80097e4:	e7fe      	b.n	80097e4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <xQueueReceive+0x40>
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <xQueueReceive+0x44>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e000      	b.n	80097fa <xQueueReceive+0x46>
 80097f8:	2300      	movs	r3, #0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <xQueueReceive+0x62>
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	b672      	cpsid	i
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	b662      	cpsie	i
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	e7fe      	b.n	8009814 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009816:	f001 f973 	bl	800ab00 <xTaskGetSchedulerState>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <xQueueReceive+0x72>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <xQueueReceive+0x76>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueReceive+0x78>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10b      	bne.n	8009848 <xQueueReceive+0x94>
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	b672      	cpsid	i
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	b662      	cpsie	i
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e7fe      	b.n	8009846 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009848:	f001 fc9e 	bl	800b188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01f      	beq.n	8009898 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985c:	f000 faa1 	bl	8009da2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	1e5a      	subs	r2, r3, #1
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00f      	beq.n	8009890 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	3310      	adds	r3, #16
 8009874:	4618      	mov	r0, r3
 8009876:	f000 ff83 	bl	800a780 <xTaskRemoveFromEventList>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d007      	beq.n	8009890 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009880:	4b3c      	ldr	r3, [pc, #240]	; (8009974 <xQueueReceive+0x1c0>)
 8009882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009890:	f001 fcac 	bl	800b1ec <vPortExitCritical>
				return pdPASS;
 8009894:	2301      	movs	r3, #1
 8009896:	e069      	b.n	800996c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d103      	bne.n	80098a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800989e:	f001 fca5 	bl	800b1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098a2:	2300      	movs	r3, #0
 80098a4:	e062      	b.n	800996c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d106      	bne.n	80098ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098ac:	f107 0310 	add.w	r3, r7, #16
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 ffc9 	bl	800a848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098b6:	2301      	movs	r3, #1
 80098b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098ba:	f001 fc97 	bl	800b1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098be:	f000 fd51 	bl	800a364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098c2:	f001 fc61 	bl	800b188 <vPortEnterCritical>
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098cc:	b25b      	sxtb	r3, r3
 80098ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d2:	d103      	bne.n	80098dc <xQueueReceive+0x128>
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098e2:	b25b      	sxtb	r3, r3
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e8:	d103      	bne.n	80098f2 <xQueueReceive+0x13e>
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098f2:	f001 fc7b 	bl	800b1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098f6:	1d3a      	adds	r2, r7, #4
 80098f8:	f107 0310 	add.w	r3, r7, #16
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 ffb8 	bl	800a874 <xTaskCheckForTimeOut>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d123      	bne.n	8009952 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800990a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990c:	f000 fac1 	bl	8009e92 <prvIsQueueEmpty>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d017      	beq.n	8009946 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	3324      	adds	r3, #36	; 0x24
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	4611      	mov	r1, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f000 ff08 	bl	800a734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009926:	f000 fa62 	bl	8009dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800992a:	f000 fd29 	bl	800a380 <xTaskResumeAll>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d189      	bne.n	8009848 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <xQueueReceive+0x1c0>)
 8009936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	e780      	b.n	8009848 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009948:	f000 fa51 	bl	8009dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800994c:	f000 fd18 	bl	800a380 <xTaskResumeAll>
 8009950:	e77a      	b.n	8009848 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009954:	f000 fa4b 	bl	8009dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009958:	f000 fd12 	bl	800a380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800995c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995e:	f000 fa98 	bl	8009e92 <prvIsQueueEmpty>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	f43f af6f 	beq.w	8009848 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800996a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800996c:	4618      	mov	r0, r3
 800996e:	3730      	adds	r7, #48	; 0x30
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b08e      	sub	sp, #56	; 0x38
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009982:	2300      	movs	r3, #0
 8009984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10b      	bne.n	80099ac <xQueueSemaphoreTake+0x34>
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	b672      	cpsid	i
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	b662      	cpsie	i
 80099a8:	623b      	str	r3, [r7, #32]
 80099aa:	e7fe      	b.n	80099aa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00b      	beq.n	80099cc <xQueueSemaphoreTake+0x54>
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	b672      	cpsid	i
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	b662      	cpsie	i
 80099c8:	61fb      	str	r3, [r7, #28]
 80099ca:	e7fe      	b.n	80099ca <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099cc:	f001 f898 	bl	800ab00 <xTaskGetSchedulerState>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <xQueueSemaphoreTake+0x64>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <xQueueSemaphoreTake+0x68>
 80099dc:	2301      	movs	r3, #1
 80099de:	e000      	b.n	80099e2 <xQueueSemaphoreTake+0x6a>
 80099e0:	2300      	movs	r3, #0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10b      	bne.n	80099fe <xQueueSemaphoreTake+0x86>
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	b672      	cpsid	i
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	b662      	cpsie	i
 80099fa:	61bb      	str	r3, [r7, #24]
 80099fc:	e7fe      	b.n	80099fc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099fe:	f001 fbc3 	bl	800b188 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d024      	beq.n	8009a58 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	1e5a      	subs	r2, r3, #1
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a1e:	f001 fa31 	bl	800ae84 <pvTaskIncrementMutexHeldCount>
 8009a22:	4602      	mov	r2, r0
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00f      	beq.n	8009a50 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	3310      	adds	r3, #16
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fea3 	bl	800a780 <xTaskRemoveFromEventList>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a40:	4b54      	ldr	r3, [pc, #336]	; (8009b94 <xQueueSemaphoreTake+0x21c>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a50:	f001 fbcc 	bl	800b1ec <vPortExitCritical>
				return pdPASS;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e098      	b.n	8009b8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d112      	bne.n	8009a84 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <xQueueSemaphoreTake+0x104>
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	b672      	cpsid	i
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	b662      	cpsie	i
 8009a78:	617b      	str	r3, [r7, #20]
 8009a7a:	e7fe      	b.n	8009a7a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a7c:	f001 fbb6 	bl	800b1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e082      	b.n	8009b8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a8a:	f107 030c 	add.w	r3, r7, #12
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 feda 	bl	800a848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a98:	f001 fba8 	bl	800b1ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a9c:	f000 fc62 	bl	800a364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa0:	f001 fb72 	bl	800b188 <vPortEnterCritical>
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aaa:	b25b      	sxtb	r3, r3
 8009aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab0:	d103      	bne.n	8009aba <xQueueSemaphoreTake+0x142>
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ac0:	b25b      	sxtb	r3, r3
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac6:	d103      	bne.n	8009ad0 <xQueueSemaphoreTake+0x158>
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad0:	f001 fb8c 	bl	800b1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	f107 030c 	add.w	r3, r7, #12
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 fec9 	bl	800a874 <xTaskCheckForTimeOut>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d132      	bne.n	8009b4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009aea:	f000 f9d2 	bl	8009e92 <prvIsQueueEmpty>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d026      	beq.n	8009b42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d109      	bne.n	8009b10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009afc:	f001 fb44 	bl	800b188 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 f819 	bl	800ab3c <xTaskPriorityInherit>
 8009b0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009b0c:	f001 fb6e 	bl	800b1ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	3324      	adds	r3, #36	; 0x24
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	4611      	mov	r1, r2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fe0b 	bl	800a734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b20:	f000 f965 	bl	8009dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b24:	f000 fc2c 	bl	800a380 <xTaskResumeAll>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f47f af67 	bne.w	80099fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009b30:	4b18      	ldr	r3, [pc, #96]	; (8009b94 <xQueueSemaphoreTake+0x21c>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	e75d      	b.n	80099fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b44:	f000 f953 	bl	8009dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b48:	f000 fc1a 	bl	800a380 <xTaskResumeAll>
 8009b4c:	e757      	b.n	80099fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b50:	f000 f94d 	bl	8009dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b54:	f000 fc14 	bl	800a380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b5a:	f000 f99a 	bl	8009e92 <prvIsQueueEmpty>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f43f af4c 	beq.w	80099fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00d      	beq.n	8009b88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009b6c:	f001 fb0c 	bl	800b188 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b72:	f000 f894 	bl	8009c9e <prvGetDisinheritPriorityAfterTimeout>
 8009b76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 f8e4 	bl	800ad4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b84:	f001 fb32 	bl	800b1ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3738      	adds	r7, #56	; 0x38
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08e      	sub	sp, #56	; 0x38
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10b      	bne.n	8009bc6 <xQueueReceiveFromISR+0x2e>
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	b672      	cpsid	i
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	b662      	cpsie	i
 8009bc2:	623b      	str	r3, [r7, #32]
 8009bc4:	e7fe      	b.n	8009bc4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d103      	bne.n	8009bd4 <xQueueReceiveFromISR+0x3c>
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <xQueueReceiveFromISR+0x40>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e000      	b.n	8009bda <xQueueReceiveFromISR+0x42>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <xQueueReceiveFromISR+0x5e>
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	b672      	cpsid	i
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	b662      	cpsie	i
 8009bf2:	61fb      	str	r3, [r7, #28]
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bf6:	f001 fba7 	bl	800b348 <vPortValidateInterruptPriority>
	__asm volatile
 8009bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	b672      	cpsid	i
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	b662      	cpsie	i
 8009c12:	61ba      	str	r2, [r7, #24]
 8009c14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d02f      	beq.n	8009c86 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c30:	68b9      	ldr	r1, [r7, #8]
 8009c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c34:	f000 f8b5 	bl	8009da2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	1e5a      	subs	r2, r3, #1
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c48:	d112      	bne.n	8009c70 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	3310      	adds	r3, #16
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fd92 	bl	800a780 <xTaskRemoveFromEventList>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00e      	beq.n	8009c80 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	e007      	b.n	8009c80 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c74:	3301      	adds	r3, #1
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	b25a      	sxtb	r2, r3
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c80:	2301      	movs	r3, #1
 8009c82:	637b      	str	r3, [r7, #52]	; 0x34
 8009c84:	e001      	b.n	8009c8a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	637b      	str	r3, [r7, #52]	; 0x34
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3738      	adds	r7, #56	; 0x38
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b085      	sub	sp, #20
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d006      	beq.n	8009cbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f1c3 0307 	rsb	r3, r3, #7
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	e001      	b.n	8009cc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
	}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10d      	bne.n	8009d08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d14d      	bne.n	8009d90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 ff9f 	bl	800ac3c <xTaskPriorityDisinherit>
 8009cfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	609a      	str	r2, [r3, #8]
 8009d06:	e043      	b.n	8009d90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d119      	bne.n	8009d42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6858      	ldr	r0, [r3, #4]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d16:	461a      	mov	r2, r3
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	f01b ff2f 	bl	8025b7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	441a      	add	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d32b      	bcc.n	8009d90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	605a      	str	r2, [r3, #4]
 8009d40:	e026      	b.n	8009d90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	68d8      	ldr	r0, [r3, #12]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	f01b ff15 	bl	8025b7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	425b      	negs	r3, r3
 8009d5c:	441a      	add	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d207      	bcs.n	8009d7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	425b      	negs	r3, r3
 8009d78:	441a      	add	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d105      	bne.n	8009d90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d98:	697b      	ldr	r3, [r7, #20]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b082      	sub	sp, #8
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d018      	beq.n	8009de6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	441a      	add	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d303      	bcc.n	8009dd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68d9      	ldr	r1, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	461a      	mov	r2, r3
 8009de0:	6838      	ldr	r0, [r7, #0]
 8009de2:	f01b fecb 	bl	8025b7c <memcpy>
	}
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009df6:	f001 f9c7 	bl	800b188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e02:	e011      	b.n	8009e28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d012      	beq.n	8009e32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3324      	adds	r3, #36	; 0x24
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 fcb5 	bl	800a780 <xTaskRemoveFromEventList>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e1c:	f000 fd8e 	bl	800a93c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dce9      	bgt.n	8009e04 <prvUnlockQueue+0x16>
 8009e30:	e000      	b.n	8009e34 <prvUnlockQueue+0x46>
					break;
 8009e32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	22ff      	movs	r2, #255	; 0xff
 8009e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e3c:	f001 f9d6 	bl	800b1ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e40:	f001 f9a2 	bl	800b188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e4c:	e011      	b.n	8009e72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d012      	beq.n	8009e7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3310      	adds	r3, #16
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fc90 	bl	800a780 <xTaskRemoveFromEventList>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e66:	f000 fd69 	bl	800a93c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dce9      	bgt.n	8009e4e <prvUnlockQueue+0x60>
 8009e7a:	e000      	b.n	8009e7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	22ff      	movs	r2, #255	; 0xff
 8009e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e86:	f001 f9b1 	bl	800b1ec <vPortExitCritical>
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e9a:	f001 f975 	bl	800b188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	60fb      	str	r3, [r7, #12]
 8009eaa:	e001      	b.n	8009eb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eb0:	f001 f99c 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ec6:	f001 f95f 	bl	800b188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d102      	bne.n	8009edc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	e001      	b.n	8009ee0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ee0:	f001 f984 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b08e      	sub	sp, #56	; 0x38
 8009ef2:	af04      	add	r7, sp, #16
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
 8009efa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10b      	bne.n	8009f1a <xTaskCreateStatic+0x2c>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	b672      	cpsid	i
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	b662      	cpsie	i
 8009f16:	623b      	str	r3, [r7, #32]
 8009f18:	e7fe      	b.n	8009f18 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10b      	bne.n	8009f38 <xTaskCreateStatic+0x4a>
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	b672      	cpsid	i
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	b662      	cpsie	i
 8009f34:	61fb      	str	r3, [r7, #28]
 8009f36:	e7fe      	b.n	8009f36 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f38:	2358      	movs	r3, #88	; 0x58
 8009f3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2b58      	cmp	r3, #88	; 0x58
 8009f40:	d00b      	beq.n	8009f5a <xTaskCreateStatic+0x6c>
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	b672      	cpsid	i
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	b662      	cpsie	i
 8009f56:	61bb      	str	r3, [r7, #24]
 8009f58:	e7fe      	b.n	8009f58 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d01e      	beq.n	8009fa0 <xTaskCreateStatic+0xb2>
 8009f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d01b      	beq.n	8009fa0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	2202      	movs	r2, #2
 8009f76:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	9302      	str	r3, [sp, #8]
 8009f82:	f107 0314 	add.w	r3, r7, #20
 8009f86:	9301      	str	r3, [sp, #4]
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	68b9      	ldr	r1, [r7, #8]
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 f850 	bl	800a038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f9a:	f000 f8e1 	bl	800a160 <prvAddNewTaskToReadyList>
 8009f9e:	e001      	b.n	8009fa4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009fa4:	697b      	ldr	r3, [r7, #20]
	}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3728      	adds	r7, #40	; 0x28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b08c      	sub	sp, #48	; 0x30
 8009fb2:	af04      	add	r7, sp, #16
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	603b      	str	r3, [r7, #0]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fbe:	88fb      	ldrh	r3, [r7, #6]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 fa02 	bl	800b3cc <pvPortMalloc>
 8009fc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00e      	beq.n	8009fee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009fd0:	2058      	movs	r0, #88	; 0x58
 8009fd2:	f001 f9fb 	bl	800b3cc <pvPortMalloc>
 8009fd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8009fe4:	e005      	b.n	8009ff2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fe6:	6978      	ldr	r0, [r7, #20]
 8009fe8:	f001 fabc 	bl	800b564 <vPortFree>
 8009fec:	e001      	b.n	8009ff2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d017      	beq.n	800a028 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a000:	88fa      	ldrh	r2, [r7, #6]
 800a002:	2300      	movs	r3, #0
 800a004:	9303      	str	r3, [sp, #12]
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	9302      	str	r3, [sp, #8]
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	9301      	str	r3, [sp, #4]
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f80e 	bl	800a038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a01c:	69f8      	ldr	r0, [r7, #28]
 800a01e:	f000 f89f 	bl	800a160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a022:	2301      	movs	r3, #1
 800a024:	61bb      	str	r3, [r7, #24]
 800a026:	e002      	b.n	800a02e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a028:	f04f 33ff 	mov.w	r3, #4294967295
 800a02c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a02e:	69bb      	ldr	r3, [r7, #24]
	}
 800a030:	4618      	mov	r0, r3
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	461a      	mov	r2, r3
 800a050:	21a5      	movs	r1, #165	; 0xa5
 800a052:	f01b fd9e 	bl	8025b92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a060:	440b      	add	r3, r1
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	f023 0307 	bic.w	r3, r3, #7
 800a06e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00b      	beq.n	800a092 <prvInitialiseNewTask+0x5a>
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	b672      	cpsid	i
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	b662      	cpsie	i
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	e7fe      	b.n	800a090 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d01f      	beq.n	800a0d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a098:	2300      	movs	r3, #0
 800a09a:	61fb      	str	r3, [r7, #28]
 800a09c:	e012      	b.n	800a0c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	7819      	ldrb	r1, [r3, #0]
 800a0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3334      	adds	r3, #52	; 0x34
 800a0ae:	460a      	mov	r2, r1
 800a0b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d006      	beq.n	800a0cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	2b0f      	cmp	r3, #15
 800a0c8:	d9e9      	bls.n	800a09e <prvInitialiseNewTask+0x66>
 800a0ca:	e000      	b.n	800a0ce <prvInitialiseNewTask+0x96>
			{
				break;
 800a0cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0d6:	e003      	b.n	800a0e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	2b06      	cmp	r3, #6
 800a0e4:	d901      	bls.n	800a0ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0e6:	2306      	movs	r3, #6
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	3304      	adds	r3, #4
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe ff79 	bl	8008ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	3318      	adds	r3, #24
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe ff74 	bl	8008ff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a114:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	f1c3 0207 	rsb	r2, r3, #7
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a124:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2200      	movs	r2, #0
 800a12a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	2200      	movs	r2, #0
 800a130:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	68f9      	ldr	r1, [r7, #12]
 800a13e:	69b8      	ldr	r0, [r7, #24]
 800a140:	f000 ff1a 	bl	800af78 <pxPortInitialiseStack>
 800a144:	4602      	mov	r2, r0
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a156:	bf00      	nop
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a168:	f001 f80e 	bl	800b188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a16c:	4b2a      	ldr	r3, [pc, #168]	; (800a218 <prvAddNewTaskToReadyList+0xb8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3301      	adds	r3, #1
 800a172:	4a29      	ldr	r2, [pc, #164]	; (800a218 <prvAddNewTaskToReadyList+0xb8>)
 800a174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a176:	4b29      	ldr	r3, [pc, #164]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a17e:	4a27      	ldr	r2, [pc, #156]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a184:	4b24      	ldr	r3, [pc, #144]	; (800a218 <prvAddNewTaskToReadyList+0xb8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d110      	bne.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a18c:	f000 fbfc 	bl	800a988 <prvInitialiseTaskLists>
 800a190:	e00d      	b.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a192:	4b23      	ldr	r3, [pc, #140]	; (800a220 <prvAddNewTaskToReadyList+0xc0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d109      	bne.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a19a:	4b20      	ldr	r3, [pc, #128]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d802      	bhi.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1a8:	4a1c      	ldr	r2, [pc, #112]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1ae:	4b1d      	ldr	r3, [pc, #116]	; (800a224 <prvAddNewTaskToReadyList+0xc4>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	4a1b      	ldr	r2, [pc, #108]	; (800a224 <prvAddNewTaskToReadyList+0xc4>)
 800a1b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	2201      	movs	r2, #1
 800a1be:	409a      	lsls	r2, r3
 800a1c0:	4b19      	ldr	r3, [pc, #100]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	4a18      	ldr	r2, [pc, #96]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4a15      	ldr	r2, [pc, #84]	; (800a22c <prvAddNewTaskToReadyList+0xcc>)
 800a1d8:	441a      	add	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f7fe ff16 	bl	8009012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1e6:	f001 f801 	bl	800b1ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <prvAddNewTaskToReadyList+0xc0>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00e      	beq.n	800a210 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1f2:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d207      	bcs.n	800a210 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a200:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <prvAddNewTaskToReadyList+0xd0>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000498 	.word	0x20000498
 800a21c:	20000398 	.word	0x20000398
 800a220:	200004a4 	.word	0x200004a4
 800a224:	200004b4 	.word	0x200004b4
 800a228:	200004a0 	.word	0x200004a0
 800a22c:	2000039c 	.word	0x2000039c
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a23c:	2300      	movs	r3, #0
 800a23e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d018      	beq.n	800a278 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a246:	4b14      	ldr	r3, [pc, #80]	; (800a298 <vTaskDelay+0x64>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00b      	beq.n	800a266 <vTaskDelay+0x32>
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	b672      	cpsid	i
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	b662      	cpsie	i
 800a262:	60bb      	str	r3, [r7, #8]
 800a264:	e7fe      	b.n	800a264 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a266:	f000 f87d 	bl	800a364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a26a:	2100      	movs	r1, #0
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fe1d 	bl	800aeac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a272:	f000 f885 	bl	800a380 <xTaskResumeAll>
 800a276:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d107      	bne.n	800a28e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a27e:	4b07      	ldr	r3, [pc, #28]	; (800a29c <vTaskDelay+0x68>)
 800a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	200004c0 	.word	0x200004c0
 800a29c:	e000ed04 	.word	0xe000ed04

0800a2a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08a      	sub	sp, #40	; 0x28
 800a2a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2ae:	463a      	mov	r2, r7
 800a2b0:	1d39      	adds	r1, r7, #4
 800a2b2:	f107 0308 	add.w	r3, r7, #8
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f6 fc96 	bl	8000be8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	9202      	str	r2, [sp, #8]
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	460a      	mov	r2, r1
 800a2ce:	491f      	ldr	r1, [pc, #124]	; (800a34c <vTaskStartScheduler+0xac>)
 800a2d0:	481f      	ldr	r0, [pc, #124]	; (800a350 <vTaskStartScheduler+0xb0>)
 800a2d2:	f7ff fe0c 	bl	8009eee <xTaskCreateStatic>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	4b1e      	ldr	r3, [pc, #120]	; (800a354 <vTaskStartScheduler+0xb4>)
 800a2da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2dc:	4b1d      	ldr	r3, [pc, #116]	; (800a354 <vTaskStartScheduler+0xb4>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	e001      	b.n	800a2ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d117      	bne.n	800a324 <vTaskStartScheduler+0x84>
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a30a:	4b13      	ldr	r3, [pc, #76]	; (800a358 <vTaskStartScheduler+0xb8>)
 800a30c:	f04f 32ff 	mov.w	r2, #4294967295
 800a310:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <vTaskStartScheduler+0xbc>)
 800a314:	2201      	movs	r2, #1
 800a316:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a318:	4b11      	ldr	r3, [pc, #68]	; (800a360 <vTaskStartScheduler+0xc0>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a31e:	f000 feb7 	bl	800b090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a322:	e00f      	b.n	800a344 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32a:	d10b      	bne.n	800a344 <vTaskStartScheduler+0xa4>
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	b672      	cpsid	i
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	b662      	cpsie	i
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	e7fe      	b.n	800a342 <vTaskStartScheduler+0xa2>
}
 800a344:	bf00      	nop
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	08026b84 	.word	0x08026b84
 800a350:	0800a955 	.word	0x0800a955
 800a354:	200004bc 	.word	0x200004bc
 800a358:	200004b8 	.word	0x200004b8
 800a35c:	200004a4 	.word	0x200004a4
 800a360:	2000049c 	.word	0x2000049c

0800a364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a364:	b480      	push	{r7}
 800a366:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a368:	4b04      	ldr	r3, [pc, #16]	; (800a37c <vTaskSuspendAll+0x18>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3301      	adds	r3, #1
 800a36e:	4a03      	ldr	r2, [pc, #12]	; (800a37c <vTaskSuspendAll+0x18>)
 800a370:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a372:	bf00      	nop
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	200004c0 	.word	0x200004c0

0800a380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a38e:	4b42      	ldr	r3, [pc, #264]	; (800a498 <xTaskResumeAll+0x118>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <xTaskResumeAll+0x2e>
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	b672      	cpsid	i
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	b662      	cpsie	i
 800a3aa:	603b      	str	r3, [r7, #0]
 800a3ac:	e7fe      	b.n	800a3ac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3ae:	f000 feeb 	bl	800b188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3b2:	4b39      	ldr	r3, [pc, #228]	; (800a498 <xTaskResumeAll+0x118>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	4a37      	ldr	r2, [pc, #220]	; (800a498 <xTaskResumeAll+0x118>)
 800a3ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3bc:	4b36      	ldr	r3, [pc, #216]	; (800a498 <xTaskResumeAll+0x118>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d161      	bne.n	800a488 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3c4:	4b35      	ldr	r3, [pc, #212]	; (800a49c <xTaskResumeAll+0x11c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d05d      	beq.n	800a488 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3cc:	e02e      	b.n	800a42c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ce:	4b34      	ldr	r3, [pc, #208]	; (800a4a0 <xTaskResumeAll+0x120>)
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3318      	adds	r3, #24
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fe76 	bl	80090cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fe71 	bl	80090cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	409a      	lsls	r2, r3
 800a3f2:	4b2c      	ldr	r3, [pc, #176]	; (800a4a4 <xTaskResumeAll+0x124>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	4a2a      	ldr	r2, [pc, #168]	; (800a4a4 <xTaskResumeAll+0x124>)
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4a27      	ldr	r2, [pc, #156]	; (800a4a8 <xTaskResumeAll+0x128>)
 800a40a:	441a      	add	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3304      	adds	r3, #4
 800a410:	4619      	mov	r1, r3
 800a412:	4610      	mov	r0, r2
 800a414:	f7fe fdfd 	bl	8009012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41c:	4b23      	ldr	r3, [pc, #140]	; (800a4ac <xTaskResumeAll+0x12c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	429a      	cmp	r2, r3
 800a424:	d302      	bcc.n	800a42c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a426:	4b22      	ldr	r3, [pc, #136]	; (800a4b0 <xTaskResumeAll+0x130>)
 800a428:	2201      	movs	r2, #1
 800a42a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a42c:	4b1c      	ldr	r3, [pc, #112]	; (800a4a0 <xTaskResumeAll+0x120>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1cc      	bne.n	800a3ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a43a:	f000 fb41 	bl	800aac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a43e:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <xTaskResumeAll+0x134>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d010      	beq.n	800a46c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a44a:	f000 f837 	bl	800a4bc <xTaskIncrementTick>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a454:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <xTaskResumeAll+0x130>)
 800a456:	2201      	movs	r2, #1
 800a458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1f1      	bne.n	800a44a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a466:	4b13      	ldr	r3, [pc, #76]	; (800a4b4 <xTaskResumeAll+0x134>)
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a46c:	4b10      	ldr	r3, [pc, #64]	; (800a4b0 <xTaskResumeAll+0x130>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d009      	beq.n	800a488 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a474:	2301      	movs	r3, #1
 800a476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a478:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <xTaskResumeAll+0x138>)
 800a47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a488:	f000 feb0 	bl	800b1ec <vPortExitCritical>

	return xAlreadyYielded;
 800a48c:	68bb      	ldr	r3, [r7, #8]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200004c0 	.word	0x200004c0
 800a49c:	20000498 	.word	0x20000498
 800a4a0:	20000458 	.word	0x20000458
 800a4a4:	200004a0 	.word	0x200004a0
 800a4a8:	2000039c 	.word	0x2000039c
 800a4ac:	20000398 	.word	0x20000398
 800a4b0:	200004ac 	.word	0x200004ac
 800a4b4:	200004a8 	.word	0x200004a8
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c6:	4b4f      	ldr	r3, [pc, #316]	; (800a604 <xTaskIncrementTick+0x148>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 8089 	bne.w	800a5e2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4d0:	4b4d      	ldr	r3, [pc, #308]	; (800a608 <xTaskIncrementTick+0x14c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4d8:	4a4b      	ldr	r2, [pc, #300]	; (800a608 <xTaskIncrementTick+0x14c>)
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d121      	bne.n	800a528 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4e4:	4b49      	ldr	r3, [pc, #292]	; (800a60c <xTaskIncrementTick+0x150>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00b      	beq.n	800a506 <xTaskIncrementTick+0x4a>
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	b672      	cpsid	i
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	b662      	cpsie	i
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	e7fe      	b.n	800a504 <xTaskIncrementTick+0x48>
 800a506:	4b41      	ldr	r3, [pc, #260]	; (800a60c <xTaskIncrementTick+0x150>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	4b40      	ldr	r3, [pc, #256]	; (800a610 <xTaskIncrementTick+0x154>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a3e      	ldr	r2, [pc, #248]	; (800a60c <xTaskIncrementTick+0x150>)
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	4a3e      	ldr	r2, [pc, #248]	; (800a610 <xTaskIncrementTick+0x154>)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	4b3e      	ldr	r3, [pc, #248]	; (800a614 <xTaskIncrementTick+0x158>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3301      	adds	r3, #1
 800a520:	4a3c      	ldr	r2, [pc, #240]	; (800a614 <xTaskIncrementTick+0x158>)
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	f000 facc 	bl	800aac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a528:	4b3b      	ldr	r3, [pc, #236]	; (800a618 <xTaskIncrementTick+0x15c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d348      	bcc.n	800a5c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a532:	4b36      	ldr	r3, [pc, #216]	; (800a60c <xTaskIncrementTick+0x150>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d104      	bne.n	800a546 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a53c:	4b36      	ldr	r3, [pc, #216]	; (800a618 <xTaskIncrementTick+0x15c>)
 800a53e:	f04f 32ff 	mov.w	r2, #4294967295
 800a542:	601a      	str	r2, [r3, #0]
					break;
 800a544:	e03e      	b.n	800a5c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a546:	4b31      	ldr	r3, [pc, #196]	; (800a60c <xTaskIncrementTick+0x150>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d203      	bcs.n	800a566 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a55e:	4a2e      	ldr	r2, [pc, #184]	; (800a618 <xTaskIncrementTick+0x15c>)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a564:	e02e      	b.n	800a5c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	3304      	adds	r3, #4
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fdae 	bl	80090cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3318      	adds	r3, #24
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe fda5 	bl	80090cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a586:	2201      	movs	r2, #1
 800a588:	409a      	lsls	r2, r3
 800a58a:	4b24      	ldr	r3, [pc, #144]	; (800a61c <xTaskIncrementTick+0x160>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4313      	orrs	r3, r2
 800a590:	4a22      	ldr	r2, [pc, #136]	; (800a61c <xTaskIncrementTick+0x160>)
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a598:	4613      	mov	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4a1f      	ldr	r2, [pc, #124]	; (800a620 <xTaskIncrementTick+0x164>)
 800a5a2:	441a      	add	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f7fe fd31 	bl	8009012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b4:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <xTaskIncrementTick+0x168>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d3b9      	bcc.n	800a532 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5c2:	e7b6      	b.n	800a532 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5c4:	4b17      	ldr	r3, [pc, #92]	; (800a624 <xTaskIncrementTick+0x168>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ca:	4915      	ldr	r1, [pc, #84]	; (800a620 <xTaskIncrementTick+0x164>)
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	440b      	add	r3, r1
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d907      	bls.n	800a5ec <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e004      	b.n	800a5ec <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5e2:	4b11      	ldr	r3, [pc, #68]	; (800a628 <xTaskIncrementTick+0x16c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	4a0f      	ldr	r2, [pc, #60]	; (800a628 <xTaskIncrementTick+0x16c>)
 800a5ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5ec:	4b0f      	ldr	r3, [pc, #60]	; (800a62c <xTaskIncrementTick+0x170>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5f8:	697b      	ldr	r3, [r7, #20]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200004c0 	.word	0x200004c0
 800a608:	2000049c 	.word	0x2000049c
 800a60c:	20000450 	.word	0x20000450
 800a610:	20000454 	.word	0x20000454
 800a614:	200004b0 	.word	0x200004b0
 800a618:	200004b8 	.word	0x200004b8
 800a61c:	200004a0 	.word	0x200004a0
 800a620:	2000039c 	.word	0x2000039c
 800a624:	20000398 	.word	0x20000398
 800a628:	200004a8 	.word	0x200004a8
 800a62c:	200004ac 	.word	0x200004ac

0800a630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b088      	sub	sp, #32
 800a634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a636:	4b3a      	ldr	r3, [pc, #232]	; (800a720 <vTaskSwitchContext+0xf0>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a63e:	4b39      	ldr	r3, [pc, #228]	; (800a724 <vTaskSwitchContext+0xf4>)
 800a640:	2201      	movs	r2, #1
 800a642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a644:	e067      	b.n	800a716 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800a646:	4b37      	ldr	r3, [pc, #220]	; (800a724 <vTaskSwitchContext+0xf4>)
 800a648:	2200      	movs	r2, #0
 800a64a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a64c:	4b36      	ldr	r3, [pc, #216]	; (800a728 <vTaskSwitchContext+0xf8>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	429a      	cmp	r2, r3
 800a662:	d111      	bne.n	800a688 <vTaskSwitchContext+0x58>
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	3304      	adds	r3, #4
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d10b      	bne.n	800a688 <vTaskSwitchContext+0x58>
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	3308      	adds	r3, #8
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d105      	bne.n	800a688 <vTaskSwitchContext+0x58>
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	330c      	adds	r3, #12
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	429a      	cmp	r2, r3
 800a686:	d008      	beq.n	800a69a <vTaskSwitchContext+0x6a>
 800a688:	4b27      	ldr	r3, [pc, #156]	; (800a728 <vTaskSwitchContext+0xf8>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	4b26      	ldr	r3, [pc, #152]	; (800a728 <vTaskSwitchContext+0xf8>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3334      	adds	r3, #52	; 0x34
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f7f6 fa94 	bl	8000bc2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a69a:	4b24      	ldr	r3, [pc, #144]	; (800a72c <vTaskSwitchContext+0xfc>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	fab3 f383 	clz	r3, r3
 800a6a6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a6a8:	7afb      	ldrb	r3, [r7, #11]
 800a6aa:	f1c3 031f 	rsb	r3, r3, #31
 800a6ae:	617b      	str	r3, [r7, #20]
 800a6b0:	491f      	ldr	r1, [pc, #124]	; (800a730 <vTaskSwitchContext+0x100>)
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	440b      	add	r3, r1
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <vTaskSwitchContext+0xac>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	b672      	cpsid	i
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	b662      	cpsie	i
 800a6d8:	607b      	str	r3, [r7, #4]
 800a6da:	e7fe      	b.n	800a6da <vTaskSwitchContext+0xaa>
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4a12      	ldr	r2, [pc, #72]	; (800a730 <vTaskSwitchContext+0x100>)
 800a6e8:	4413      	add	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	605a      	str	r2, [r3, #4]
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d104      	bne.n	800a70c <vTaskSwitchContext+0xdc>
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	605a      	str	r2, [r3, #4]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	4a05      	ldr	r2, [pc, #20]	; (800a728 <vTaskSwitchContext+0xf8>)
 800a714:	6013      	str	r3, [r2, #0]
}
 800a716:	bf00      	nop
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	200004c0 	.word	0x200004c0
 800a724:	200004ac 	.word	0x200004ac
 800a728:	20000398 	.word	0x20000398
 800a72c:	200004a0 	.word	0x200004a0
 800a730:	2000039c 	.word	0x2000039c

0800a734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10b      	bne.n	800a75c <vTaskPlaceOnEventList+0x28>
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	b672      	cpsid	i
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	b662      	cpsie	i
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	e7fe      	b.n	800a75a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a75c:	4b07      	ldr	r3, [pc, #28]	; (800a77c <vTaskPlaceOnEventList+0x48>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3318      	adds	r3, #24
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7fe fc78 	bl	800905a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a76a:	2101      	movs	r1, #1
 800a76c:	6838      	ldr	r0, [r7, #0]
 800a76e:	f000 fb9d 	bl	800aeac <prvAddCurrentTaskToDelayedList>
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000398 	.word	0x20000398

0800a780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <xTaskRemoveFromEventList+0x2e>
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	b672      	cpsid	i
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	b662      	cpsie	i
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e7fe      	b.n	800a7ac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fc8a 	bl	80090cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <xTaskRemoveFromEventList+0xb0>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d11c      	bne.n	800a7fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe fc81 	bl	80090cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	409a      	lsls	r2, r3
 800a7d2:	4b18      	ldr	r3, [pc, #96]	; (800a834 <xTaskRemoveFromEventList+0xb4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	4a16      	ldr	r2, [pc, #88]	; (800a834 <xTaskRemoveFromEventList+0xb4>)
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4a13      	ldr	r2, [pc, #76]	; (800a838 <xTaskRemoveFromEventList+0xb8>)
 800a7ea:	441a      	add	r2, r3
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fe fc0d 	bl	8009012 <vListInsertEnd>
 800a7f8:	e005      	b.n	800a806 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	3318      	adds	r3, #24
 800a7fe:	4619      	mov	r1, r3
 800a800:	480e      	ldr	r0, [pc, #56]	; (800a83c <xTaskRemoveFromEventList+0xbc>)
 800a802:	f7fe fc06 	bl	8009012 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80a:	4b0d      	ldr	r3, [pc, #52]	; (800a840 <xTaskRemoveFromEventList+0xc0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	429a      	cmp	r2, r3
 800a812:	d905      	bls.n	800a820 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <xTaskRemoveFromEventList+0xc4>)
 800a81a:	2201      	movs	r2, #1
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	e001      	b.n	800a824 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a824:	697b      	ldr	r3, [r7, #20]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	200004c0 	.word	0x200004c0
 800a834:	200004a0 	.word	0x200004a0
 800a838:	2000039c 	.word	0x2000039c
 800a83c:	20000458 	.word	0x20000458
 800a840:	20000398 	.word	0x20000398
 800a844:	200004ac 	.word	0x200004ac

0800a848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a850:	4b06      	ldr	r3, [pc, #24]	; (800a86c <vTaskInternalSetTimeOutState+0x24>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <vTaskInternalSetTimeOutState+0x28>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	605a      	str	r2, [r3, #4]
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	200004b0 	.word	0x200004b0
 800a870:	2000049c 	.word	0x2000049c

0800a874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10b      	bne.n	800a89c <xTaskCheckForTimeOut+0x28>
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	b672      	cpsid	i
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	b662      	cpsie	i
 800a898:	613b      	str	r3, [r7, #16]
 800a89a:	e7fe      	b.n	800a89a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10b      	bne.n	800a8ba <xTaskCheckForTimeOut+0x46>
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	b672      	cpsid	i
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	b662      	cpsie	i
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e7fe      	b.n	800a8b8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800a8ba:	f000 fc65 	bl	800b188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8be:	4b1d      	ldr	r3, [pc, #116]	; (800a934 <xTaskCheckForTimeOut+0xc0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d6:	d102      	bne.n	800a8de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	61fb      	str	r3, [r7, #28]
 800a8dc:	e023      	b.n	800a926 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	4b15      	ldr	r3, [pc, #84]	; (800a938 <xTaskCheckForTimeOut+0xc4>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d007      	beq.n	800a8fa <xTaskCheckForTimeOut+0x86>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d302      	bcc.n	800a8fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	e015      	b.n	800a926 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	429a      	cmp	r2, r3
 800a902:	d20b      	bcs.n	800a91c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff99 	bl	800a848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	e004      	b.n	800a926 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a922:	2301      	movs	r3, #1
 800a924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a926:	f000 fc61 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 800a92a:	69fb      	ldr	r3, [r7, #28]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3720      	adds	r7, #32
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	2000049c 	.word	0x2000049c
 800a938:	200004b0 	.word	0x200004b0

0800a93c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a940:	4b03      	ldr	r3, [pc, #12]	; (800a950 <vTaskMissedYield+0x14>)
 800a942:	2201      	movs	r2, #1
 800a944:	601a      	str	r2, [r3, #0]
}
 800a946:	bf00      	nop
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	200004ac 	.word	0x200004ac

0800a954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a95c:	f000 f854 	bl	800aa08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a960:	4b07      	ldr	r3, [pc, #28]	; (800a980 <prvIdleTask+0x2c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d907      	bls.n	800a978 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <prvIdleTask+0x30>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a978:	f7f6 f91c 	bl	8000bb4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a97c:	e7ee      	b.n	800a95c <prvIdleTask+0x8>
 800a97e:	bf00      	nop
 800a980:	2000039c 	.word	0x2000039c
 800a984:	e000ed04 	.word	0xe000ed04

0800a988 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a98e:	2300      	movs	r3, #0
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	e00c      	b.n	800a9ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	4613      	mov	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4a12      	ldr	r2, [pc, #72]	; (800a9e8 <prvInitialiseTaskLists+0x60>)
 800a9a0:	4413      	add	r3, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fe fb08 	bl	8008fb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b06      	cmp	r3, #6
 800a9b2:	d9ef      	bls.n	800a994 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9b4:	480d      	ldr	r0, [pc, #52]	; (800a9ec <prvInitialiseTaskLists+0x64>)
 800a9b6:	f7fe faff 	bl	8008fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9ba:	480d      	ldr	r0, [pc, #52]	; (800a9f0 <prvInitialiseTaskLists+0x68>)
 800a9bc:	f7fe fafc 	bl	8008fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9c0:	480c      	ldr	r0, [pc, #48]	; (800a9f4 <prvInitialiseTaskLists+0x6c>)
 800a9c2:	f7fe faf9 	bl	8008fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9c6:	480c      	ldr	r0, [pc, #48]	; (800a9f8 <prvInitialiseTaskLists+0x70>)
 800a9c8:	f7fe faf6 	bl	8008fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9cc:	480b      	ldr	r0, [pc, #44]	; (800a9fc <prvInitialiseTaskLists+0x74>)
 800a9ce:	f7fe faf3 	bl	8008fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <prvInitialiseTaskLists+0x78>)
 800a9d4:	4a05      	ldr	r2, [pc, #20]	; (800a9ec <prvInitialiseTaskLists+0x64>)
 800a9d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <prvInitialiseTaskLists+0x7c>)
 800a9da:	4a05      	ldr	r2, [pc, #20]	; (800a9f0 <prvInitialiseTaskLists+0x68>)
 800a9dc:	601a      	str	r2, [r3, #0]
}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	2000039c 	.word	0x2000039c
 800a9ec:	20000428 	.word	0x20000428
 800a9f0:	2000043c 	.word	0x2000043c
 800a9f4:	20000458 	.word	0x20000458
 800a9f8:	2000046c 	.word	0x2000046c
 800a9fc:	20000484 	.word	0x20000484
 800aa00:	20000450 	.word	0x20000450
 800aa04:	20000454 	.word	0x20000454

0800aa08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa0e:	e019      	b.n	800aa44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa10:	f000 fbba 	bl	800b188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <prvCheckTasksWaitingTermination+0x4c>)
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fb53 	bl	80090cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa26:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <prvCheckTasksWaitingTermination+0x50>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	4a0a      	ldr	r2, [pc, #40]	; (800aa58 <prvCheckTasksWaitingTermination+0x50>)
 800aa2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa30:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <prvCheckTasksWaitingTermination+0x54>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <prvCheckTasksWaitingTermination+0x54>)
 800aa38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa3a:	f000 fbd7 	bl	800b1ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f80e 	bl	800aa60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa44:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <prvCheckTasksWaitingTermination+0x54>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e1      	bne.n	800aa10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	2000046c 	.word	0x2000046c
 800aa58:	20000498 	.word	0x20000498
 800aa5c:	20000480 	.word	0x20000480

0800aa60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d108      	bne.n	800aa84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 fd74 	bl	800b564 <vPortFree>
				vPortFree( pxTCB );
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fd71 	bl	800b564 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa82:	e019      	b.n	800aab8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d103      	bne.n	800aa96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fd68 	bl	800b564 <vPortFree>
	}
 800aa94:	e010      	b.n	800aab8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d00b      	beq.n	800aab8 <prvDeleteTCB+0x58>
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	b672      	cpsid	i
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	b662      	cpsie	i
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	e7fe      	b.n	800aab6 <prvDeleteTCB+0x56>
	}
 800aab8:	bf00      	nop
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aac6:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <prvResetNextTaskUnblockTime+0x38>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d104      	bne.n	800aada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <prvResetNextTaskUnblockTime+0x3c>)
 800aad2:	f04f 32ff 	mov.w	r2, #4294967295
 800aad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aad8:	e008      	b.n	800aaec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aada:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <prvResetNextTaskUnblockTime+0x38>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	4a04      	ldr	r2, [pc, #16]	; (800aafc <prvResetNextTaskUnblockTime+0x3c>)
 800aaea:	6013      	str	r3, [r2, #0]
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	20000450 	.word	0x20000450
 800aafc:	200004b8 	.word	0x200004b8

0800ab00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab06:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <xTaskGetSchedulerState+0x34>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d102      	bne.n	800ab14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	607b      	str	r3, [r7, #4]
 800ab12:	e008      	b.n	800ab26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab14:	4b08      	ldr	r3, [pc, #32]	; (800ab38 <xTaskGetSchedulerState+0x38>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	e001      	b.n	800ab26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab22:	2300      	movs	r3, #0
 800ab24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab26:	687b      	ldr	r3, [r7, #4]
	}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	200004a4 	.word	0x200004a4
 800ab38:	200004c0 	.word	0x200004c0

0800ab3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d069      	beq.n	800ac26 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	4b36      	ldr	r3, [pc, #216]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d259      	bcs.n	800ac14 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	db06      	blt.n	800ab76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab68:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	f1c3 0207 	rsb	r2, r3, #7
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	6959      	ldr	r1, [r3, #20]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4a2b      	ldr	r2, [pc, #172]	; (800ac34 <xTaskPriorityInherit+0xf8>)
 800ab88:	4413      	add	r3, r2
 800ab8a:	4299      	cmp	r1, r3
 800ab8c:	d13a      	bne.n	800ac04 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	3304      	adds	r3, #4
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fa9a 	bl	80090cc <uxListRemove>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d115      	bne.n	800abca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba2:	4924      	ldr	r1, [pc, #144]	; (800ac34 <xTaskPriorityInherit+0xf8>)
 800aba4:	4613      	mov	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	440b      	add	r3, r1
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xTaskPriorityInherit+0x8e>
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb8:	2201      	movs	r2, #1
 800abba:	fa02 f303 	lsl.w	r3, r2, r3
 800abbe:	43da      	mvns	r2, r3
 800abc0:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <xTaskPriorityInherit+0xfc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4013      	ands	r3, r2
 800abc6:	4a1c      	ldr	r2, [pc, #112]	; (800ac38 <xTaskPriorityInherit+0xfc>)
 800abc8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abca:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	2201      	movs	r2, #1
 800abda:	409a      	lsls	r2, r3
 800abdc:	4b16      	ldr	r3, [pc, #88]	; (800ac38 <xTaskPriorityInherit+0xfc>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <xTaskPriorityInherit+0xfc>)
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4a10      	ldr	r2, [pc, #64]	; (800ac34 <xTaskPriorityInherit+0xf8>)
 800abf4:	441a      	add	r2, r3
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	3304      	adds	r3, #4
 800abfa:	4619      	mov	r1, r3
 800abfc:	4610      	mov	r0, r2
 800abfe:	f7fe fa08 	bl	8009012 <vListInsertEnd>
 800ac02:	e004      	b.n	800ac0e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	e008      	b.n	800ac26 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac18:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d201      	bcs.n	800ac26 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac22:	2301      	movs	r3, #1
 800ac24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac26:	68fb      	ldr	r3, [r7, #12]
	}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20000398 	.word	0x20000398
 800ac34:	2000039c 	.word	0x2000039c
 800ac38:	200004a0 	.word	0x200004a0

0800ac3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d070      	beq.n	800ad34 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac52:	4b3b      	ldr	r3, [pc, #236]	; (800ad40 <xTaskPriorityDisinherit+0x104>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d00b      	beq.n	800ac74 <xTaskPriorityDisinherit+0x38>
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	b672      	cpsid	i
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	b662      	cpsie	i
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	e7fe      	b.n	800ac72 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <xTaskPriorityDisinherit+0x58>
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	b672      	cpsid	i
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	b662      	cpsie	i
 800ac90:	60bb      	str	r3, [r7, #8]
 800ac92:	e7fe      	b.n	800ac92 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac98:	1e5a      	subs	r2, r3, #1
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d044      	beq.n	800ad34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d140      	bne.n	800ad34 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	3304      	adds	r3, #4
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fa08 	bl	80090cc <uxListRemove>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d115      	bne.n	800acee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc6:	491f      	ldr	r1, [pc, #124]	; (800ad44 <xTaskPriorityDisinherit+0x108>)
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <xTaskPriorityDisinherit+0xb2>
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	2201      	movs	r2, #1
 800acde:	fa02 f303 	lsl.w	r3, r2, r3
 800ace2:	43da      	mvns	r2, r3
 800ace4:	4b18      	ldr	r3, [pc, #96]	; (800ad48 <xTaskPriorityDisinherit+0x10c>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4013      	ands	r3, r2
 800acea:	4a17      	ldr	r2, [pc, #92]	; (800ad48 <xTaskPriorityDisinherit+0x10c>)
 800acec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfa:	f1c3 0207 	rsb	r2, r3, #7
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad06:	2201      	movs	r2, #1
 800ad08:	409a      	lsls	r2, r3
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <xTaskPriorityDisinherit+0x10c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	4a0d      	ldr	r2, [pc, #52]	; (800ad48 <xTaskPriorityDisinherit+0x10c>)
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4a08      	ldr	r2, [pc, #32]	; (800ad44 <xTaskPriorityDisinherit+0x108>)
 800ad22:	441a      	add	r2, r3
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	3304      	adds	r3, #4
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	f7fe f971 	bl	8009012 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad30:	2301      	movs	r3, #1
 800ad32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad34:	697b      	ldr	r3, [r7, #20]
	}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20000398 	.word	0x20000398
 800ad44:	2000039c 	.word	0x2000039c
 800ad48:	200004a0 	.word	0x200004a0

0800ad4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 8085 	beq.w	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10b      	bne.n	800ad86 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	b672      	cpsid	i
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	b662      	cpsie	i
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	e7fe      	b.n	800ad84 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d902      	bls.n	800ad96 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	e002      	b.n	800ad9c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d064      	beq.n	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	429a      	cmp	r2, r3
 800adae:	d15f      	bne.n	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800adb0:	4b31      	ldr	r3, [pc, #196]	; (800ae78 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d10b      	bne.n	800add2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	b672      	cpsid	i
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	b662      	cpsie	i
 800adce:	60bb      	str	r3, [r7, #8]
 800add0:	e7fe      	b.n	800add0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	69fa      	ldr	r2, [r7, #28]
 800addc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	db04      	blt.n	800adf0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	f1c3 0207 	rsb	r2, r3, #7
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	6959      	ldr	r1, [r3, #20]
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4a1f      	ldr	r2, [pc, #124]	; (800ae7c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae00:	4413      	add	r3, r2
 800ae02:	4299      	cmp	r1, r3
 800ae04:	d134      	bne.n	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe f95e 	bl	80090cc <uxListRemove>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d115      	bne.n	800ae42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1a:	4918      	ldr	r1, [pc, #96]	; (800ae7c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	440b      	add	r3, r1
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10a      	bne.n	800ae42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	2201      	movs	r2, #1
 800ae32:	fa02 f303 	lsl.w	r3, r2, r3
 800ae36:	43da      	mvns	r2, r3
 800ae38:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	4a10      	ldr	r2, [pc, #64]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	2201      	movs	r2, #1
 800ae48:	409a      	lsls	r2, r3
 800ae4a:	4b0d      	ldr	r3, [pc, #52]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	4a0b      	ldr	r2, [pc, #44]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae58:	4613      	mov	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4a06      	ldr	r2, [pc, #24]	; (800ae7c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae62:	441a      	add	r2, r3
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	3304      	adds	r3, #4
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	f7fe f8d1 	bl	8009012 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae70:	bf00      	nop
 800ae72:	3720      	adds	r7, #32
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20000398 	.word	0x20000398
 800ae7c:	2000039c 	.word	0x2000039c
 800ae80:	200004a0 	.word	0x200004a0

0800ae84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae84:	b480      	push	{r7}
 800ae86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae88:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d004      	beq.n	800ae9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae96:	3201      	adds	r2, #1
 800ae98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae9a:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
	}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	20000398 	.word	0x20000398

0800aeac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aeb6:	4b29      	ldr	r3, [pc, #164]	; (800af5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aebc:	4b28      	ldr	r3, [pc, #160]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3304      	adds	r3, #4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe f902 	bl	80090cc <uxListRemove>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10b      	bne.n	800aee6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aece:	4b24      	ldr	r3, [pc, #144]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	2201      	movs	r2, #1
 800aed6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeda:	43da      	mvns	r2, r3
 800aedc:	4b21      	ldr	r3, [pc, #132]	; (800af64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4013      	ands	r3, r2
 800aee2:	4a20      	ldr	r2, [pc, #128]	; (800af64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aee4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeec:	d10a      	bne.n	800af04 <prvAddCurrentTaskToDelayedList+0x58>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aef4:	4b1a      	ldr	r3, [pc, #104]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3304      	adds	r3, #4
 800aefa:	4619      	mov	r1, r3
 800aefc:	481a      	ldr	r0, [pc, #104]	; (800af68 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aefe:	f7fe f888 	bl	8009012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af02:	e026      	b.n	800af52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4413      	add	r3, r2
 800af0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af0c:	4b14      	ldr	r3, [pc, #80]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d209      	bcs.n	800af30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af1c:	4b13      	ldr	r3, [pc, #76]	; (800af6c <prvAddCurrentTaskToDelayedList+0xc0>)
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3304      	adds	r3, #4
 800af26:	4619      	mov	r1, r3
 800af28:	4610      	mov	r0, r2
 800af2a:	f7fe f896 	bl	800905a <vListInsert>
}
 800af2e:	e010      	b.n	800af52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af30:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <prvAddCurrentTaskToDelayedList+0xc4>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3304      	adds	r3, #4
 800af3a:	4619      	mov	r1, r3
 800af3c:	4610      	mov	r0, r2
 800af3e:	f7fe f88c 	bl	800905a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af42:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d202      	bcs.n	800af52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800af4c:	4a09      	ldr	r2, [pc, #36]	; (800af74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	6013      	str	r3, [r2, #0]
}
 800af52:	bf00      	nop
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	2000049c 	.word	0x2000049c
 800af60:	20000398 	.word	0x20000398
 800af64:	200004a0 	.word	0x200004a0
 800af68:	20000484 	.word	0x20000484
 800af6c:	20000454 	.word	0x20000454
 800af70:	20000450 	.word	0x20000450
 800af74:	200004b8 	.word	0x200004b8

0800af78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	3b04      	subs	r3, #4
 800af88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	3b04      	subs	r3, #4
 800af96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	f023 0201 	bic.w	r2, r3, #1
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3b04      	subs	r3, #4
 800afa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800afa8:	4a0c      	ldr	r2, [pc, #48]	; (800afdc <pxPortInitialiseStack+0x64>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3b14      	subs	r3, #20
 800afb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3b04      	subs	r3, #4
 800afbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f06f 0202 	mvn.w	r2, #2
 800afc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3b20      	subs	r3, #32
 800afcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afce:	68fb      	ldr	r3, [r7, #12]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	0800afe1 	.word	0x0800afe1

0800afe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <prvTaskExitError+0x58>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff2:	d00b      	beq.n	800b00c <prvTaskExitError+0x2c>
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	b672      	cpsid	i
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	b662      	cpsie	i
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	e7fe      	b.n	800b00a <prvTaskExitError+0x2a>
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	b672      	cpsid	i
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	b662      	cpsie	i
 800b020:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b022:	bf00      	nop
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0fc      	beq.n	800b024 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b02a:	bf00      	nop
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	20000038 	.word	0x20000038
 800b03c:	00000000 	.word	0x00000000

0800b040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <pxCurrentTCBConst2>)
 800b042:	6819      	ldr	r1, [r3, #0]
 800b044:	6808      	ldr	r0, [r1, #0]
 800b046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	f380 8809 	msr	PSP, r0
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f04f 0000 	mov.w	r0, #0
 800b056:	f380 8811 	msr	BASEPRI, r0
 800b05a:	4770      	bx	lr
 800b05c:	f3af 8000 	nop.w

0800b060 <pxCurrentTCBConst2>:
 800b060:	20000398 	.word	0x20000398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop

0800b068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b068:	4808      	ldr	r0, [pc, #32]	; (800b08c <prvPortStartFirstTask+0x24>)
 800b06a:	6800      	ldr	r0, [r0, #0]
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	f380 8808 	msr	MSP, r0
 800b072:	f04f 0000 	mov.w	r0, #0
 800b076:	f380 8814 	msr	CONTROL, r0
 800b07a:	b662      	cpsie	i
 800b07c:	b661      	cpsie	f
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	df00      	svc	0
 800b088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b08a:	bf00      	nop
 800b08c:	e000ed08 	.word	0xe000ed08

0800b090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b096:	4b36      	ldr	r3, [pc, #216]	; (800b170 <xPortStartScheduler+0xe0>)
 800b098:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	22ff      	movs	r2, #255	; 0xff
 800b0a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0b0:	78fb      	ldrb	r3, [r7, #3]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	4b2e      	ldr	r3, [pc, #184]	; (800b174 <xPortStartScheduler+0xe4>)
 800b0bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0be:	4b2e      	ldr	r3, [pc, #184]	; (800b178 <xPortStartScheduler+0xe8>)
 800b0c0:	2207      	movs	r2, #7
 800b0c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0c4:	e009      	b.n	800b0da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b0c6:	4b2c      	ldr	r3, [pc, #176]	; (800b178 <xPortStartScheduler+0xe8>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	4a2a      	ldr	r2, [pc, #168]	; (800b178 <xPortStartScheduler+0xe8>)
 800b0ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0da:	78fb      	ldrb	r3, [r7, #3]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0e2:	2b80      	cmp	r3, #128	; 0x80
 800b0e4:	d0ef      	beq.n	800b0c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0e6:	4b24      	ldr	r3, [pc, #144]	; (800b178 <xPortStartScheduler+0xe8>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f1c3 0307 	rsb	r3, r3, #7
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d00b      	beq.n	800b10a <xPortStartScheduler+0x7a>
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	b672      	cpsid	i
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	b662      	cpsie	i
 800b106:	60bb      	str	r3, [r7, #8]
 800b108:	e7fe      	b.n	800b108 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b10a:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <xPortStartScheduler+0xe8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	4a19      	ldr	r2, [pc, #100]	; (800b178 <xPortStartScheduler+0xe8>)
 800b112:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b114:	4b18      	ldr	r3, [pc, #96]	; (800b178 <xPortStartScheduler+0xe8>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b11c:	4a16      	ldr	r2, [pc, #88]	; (800b178 <xPortStartScheduler+0xe8>)
 800b11e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	b2da      	uxtb	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b128:	4b14      	ldr	r3, [pc, #80]	; (800b17c <xPortStartScheduler+0xec>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a13      	ldr	r2, [pc, #76]	; (800b17c <xPortStartScheduler+0xec>)
 800b12e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b132:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b134:	4b11      	ldr	r3, [pc, #68]	; (800b17c <xPortStartScheduler+0xec>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a10      	ldr	r2, [pc, #64]	; (800b17c <xPortStartScheduler+0xec>)
 800b13a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b13e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b140:	f000 f8d4 	bl	800b2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b144:	4b0e      	ldr	r3, [pc, #56]	; (800b180 <xPortStartScheduler+0xf0>)
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b14a:	f000 f8f3 	bl	800b334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b14e:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <xPortStartScheduler+0xf4>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a0c      	ldr	r2, [pc, #48]	; (800b184 <xPortStartScheduler+0xf4>)
 800b154:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b158:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b15a:	f7ff ff85 	bl	800b068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b15e:	f7ff fa67 	bl	800a630 <vTaskSwitchContext>
	prvTaskExitError();
 800b162:	f7ff ff3d 	bl	800afe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	e000e400 	.word	0xe000e400
 800b174:	200004c4 	.word	0x200004c4
 800b178:	200004c8 	.word	0x200004c8
 800b17c:	e000ed20 	.word	0xe000ed20
 800b180:	20000038 	.word	0x20000038
 800b184:	e000ef34 	.word	0xe000ef34

0800b188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	b672      	cpsid	i
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	b662      	cpsie	i
 800b1a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1a4:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <vPortEnterCritical+0x5c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	4a0e      	ldr	r2, [pc, #56]	; (800b1e4 <vPortEnterCritical+0x5c>)
 800b1ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1ae:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <vPortEnterCritical+0x5c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d110      	bne.n	800b1d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1b6:	4b0c      	ldr	r3, [pc, #48]	; (800b1e8 <vPortEnterCritical+0x60>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <vPortEnterCritical+0x50>
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	b672      	cpsid	i
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	b662      	cpsie	i
 800b1d4:	603b      	str	r3, [r7, #0]
 800b1d6:	e7fe      	b.n	800b1d6 <vPortEnterCritical+0x4e>
	}
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	20000038 	.word	0x20000038
 800b1e8:	e000ed04 	.word	0xe000ed04

0800b1ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1f2:	4b12      	ldr	r3, [pc, #72]	; (800b23c <vPortExitCritical+0x50>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10b      	bne.n	800b212 <vPortExitCritical+0x26>
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	b672      	cpsid	i
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	b662      	cpsie	i
 800b20e:	607b      	str	r3, [r7, #4]
 800b210:	e7fe      	b.n	800b210 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800b212:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <vPortExitCritical+0x50>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3b01      	subs	r3, #1
 800b218:	4a08      	ldr	r2, [pc, #32]	; (800b23c <vPortExitCritical+0x50>)
 800b21a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b21c:	4b07      	ldr	r3, [pc, #28]	; (800b23c <vPortExitCritical+0x50>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d104      	bne.n	800b22e <vPortExitCritical+0x42>
 800b224:	2300      	movs	r3, #0
 800b226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b22e:	bf00      	nop
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	20000038 	.word	0x20000038

0800b240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b240:	f3ef 8009 	mrs	r0, PSP
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	4b15      	ldr	r3, [pc, #84]	; (800b2a0 <pxCurrentTCBConst>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	f01e 0f10 	tst.w	lr, #16
 800b250:	bf08      	it	eq
 800b252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	6010      	str	r0, [r2, #0]
 800b25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b264:	b672      	cpsid	i
 800b266:	f380 8811 	msr	BASEPRI, r0
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	b662      	cpsie	i
 800b274:	f7ff f9dc 	bl	800a630 <vTaskSwitchContext>
 800b278:	f04f 0000 	mov.w	r0, #0
 800b27c:	f380 8811 	msr	BASEPRI, r0
 800b280:	bc09      	pop	{r0, r3}
 800b282:	6819      	ldr	r1, [r3, #0]
 800b284:	6808      	ldr	r0, [r1, #0]
 800b286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28a:	f01e 0f10 	tst.w	lr, #16
 800b28e:	bf08      	it	eq
 800b290:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b294:	f380 8809 	msr	PSP, r0
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop

0800b2a0 <pxCurrentTCBConst>:
 800b2a0:	20000398 	.word	0x20000398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop

0800b2a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	b672      	cpsid	i
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	b662      	cpsie	i
 800b2c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2c4:	f7ff f8fa 	bl	800a4bc <xTaskIncrementTick>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2ce:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <SysTick_Handler+0x40>)
 800b2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	e000ed04 	.word	0xe000ed04

0800b2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <vPortSetupTimerInterrupt+0x38>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <vPortSetupTimerInterrupt+0x3c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0a      	ldr	r2, [pc, #40]	; (800b32c <vPortSetupTimerInterrupt+0x40>)
 800b302:	fba2 2303 	umull	r2, r3, r2, r3
 800b306:	099b      	lsrs	r3, r3, #6
 800b308:	4a09      	ldr	r2, [pc, #36]	; (800b330 <vPortSetupTimerInterrupt+0x44>)
 800b30a:	3b01      	subs	r3, #1
 800b30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b310:	2207      	movs	r2, #7
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	e000e010 	.word	0xe000e010
 800b324:	e000e018 	.word	0xe000e018
 800b328:	2000002c 	.word	0x2000002c
 800b32c:	10624dd3 	.word	0x10624dd3
 800b330:	e000e014 	.word	0xe000e014

0800b334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b344 <vPortEnableVFP+0x10>
 800b338:	6801      	ldr	r1, [r0, #0]
 800b33a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b33e:	6001      	str	r1, [r0, #0]
 800b340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b342:	bf00      	nop
 800b344:	e000ed88 	.word	0xe000ed88

0800b348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b34e:	f3ef 8305 	mrs	r3, IPSR
 800b352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b0f      	cmp	r3, #15
 800b358:	d915      	bls.n	800b386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b35a:	4a18      	ldr	r2, [pc, #96]	; (800b3bc <vPortValidateInterruptPriority+0x74>)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b364:	4b16      	ldr	r3, [pc, #88]	; (800b3c0 <vPortValidateInterruptPriority+0x78>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	7afa      	ldrb	r2, [r7, #11]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d20b      	bcs.n	800b386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	b672      	cpsid	i
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	b662      	cpsie	i
 800b382:	607b      	str	r3, [r7, #4]
 800b384:	e7fe      	b.n	800b384 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <vPortValidateInterruptPriority+0x7c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b38e:	4b0e      	ldr	r3, [pc, #56]	; (800b3c8 <vPortValidateInterruptPriority+0x80>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d90b      	bls.n	800b3ae <vPortValidateInterruptPriority+0x66>
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	b672      	cpsid	i
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	b662      	cpsie	i
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	e7fe      	b.n	800b3ac <vPortValidateInterruptPriority+0x64>
	}
 800b3ae:	bf00      	nop
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	e000e3f0 	.word	0xe000e3f0
 800b3c0:	200004c4 	.word	0x200004c4
 800b3c4:	e000ed0c 	.word	0xe000ed0c
 800b3c8:	200004c8 	.word	0x200004c8

0800b3cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08a      	sub	sp, #40	; 0x28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3d8:	f7fe ffc4 	bl	800a364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3dc:	4b5c      	ldr	r3, [pc, #368]	; (800b550 <pvPortMalloc+0x184>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3e4:	f000 f91a 	bl	800b61c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3e8:	4b5a      	ldr	r3, [pc, #360]	; (800b554 <pvPortMalloc+0x188>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f040 8090 	bne.w	800b516 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d01e      	beq.n	800b43a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4413      	add	r3, r2
 800b402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d015      	beq.n	800b43a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f023 0307 	bic.w	r3, r3, #7
 800b414:	3308      	adds	r3, #8
 800b416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f003 0307 	and.w	r3, r3, #7
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00b      	beq.n	800b43a <pvPortMalloc+0x6e>
 800b422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b426:	b672      	cpsid	i
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	b662      	cpsie	i
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	e7fe      	b.n	800b438 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d06a      	beq.n	800b516 <pvPortMalloc+0x14a>
 800b440:	4b45      	ldr	r3, [pc, #276]	; (800b558 <pvPortMalloc+0x18c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d865      	bhi.n	800b516 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b44a:	4b44      	ldr	r3, [pc, #272]	; (800b55c <pvPortMalloc+0x190>)
 800b44c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b44e:	4b43      	ldr	r3, [pc, #268]	; (800b55c <pvPortMalloc+0x190>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b454:	e004      	b.n	800b460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	429a      	cmp	r2, r3
 800b468:	d903      	bls.n	800b472 <pvPortMalloc+0xa6>
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1f1      	bne.n	800b456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b472:	4b37      	ldr	r3, [pc, #220]	; (800b550 <pvPortMalloc+0x184>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b478:	429a      	cmp	r2, r3
 800b47a:	d04c      	beq.n	800b516 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2208      	movs	r2, #8
 800b482:	4413      	add	r3, r2
 800b484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	1ad2      	subs	r2, r2, r3
 800b496:	2308      	movs	r3, #8
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d920      	bls.n	800b4e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00b      	beq.n	800b4c8 <pvPortMalloc+0xfc>
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	b672      	cpsid	i
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	b662      	cpsie	i
 800b4c4:	613b      	str	r3, [r7, #16]
 800b4c6:	e7fe      	b.n	800b4c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4da:	69b8      	ldr	r0, [r7, #24]
 800b4dc:	f000 f900 	bl	800b6e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4e0:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <pvPortMalloc+0x18c>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	4a1b      	ldr	r2, [pc, #108]	; (800b558 <pvPortMalloc+0x18c>)
 800b4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4ee:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <pvPortMalloc+0x18c>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	4b1b      	ldr	r3, [pc, #108]	; (800b560 <pvPortMalloc+0x194>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d203      	bcs.n	800b502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4fa:	4b17      	ldr	r3, [pc, #92]	; (800b558 <pvPortMalloc+0x18c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a18      	ldr	r2, [pc, #96]	; (800b560 <pvPortMalloc+0x194>)
 800b500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	4b13      	ldr	r3, [pc, #76]	; (800b554 <pvPortMalloc+0x188>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b516:	f7fe ff33 	bl	800a380 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b520:	f7f5 fb5a 	bl	8000bd8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00b      	beq.n	800b546 <pvPortMalloc+0x17a>
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	b672      	cpsid	i
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	b662      	cpsie	i
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	e7fe      	b.n	800b544 <pvPortMalloc+0x178>
	return pvReturn;
 800b546:	69fb      	ldr	r3, [r7, #28]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3728      	adds	r7, #40	; 0x28
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	200084d4 	.word	0x200084d4
 800b554:	200084e0 	.word	0x200084e0
 800b558:	200084d8 	.word	0x200084d8
 800b55c:	200084cc 	.word	0x200084cc
 800b560:	200084dc 	.word	0x200084dc

0800b564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d04a      	beq.n	800b60c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b576:	2308      	movs	r3, #8
 800b578:	425b      	negs	r3, r3
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	4413      	add	r3, r2
 800b57e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	4b22      	ldr	r3, [pc, #136]	; (800b614 <vPortFree+0xb0>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4013      	ands	r3, r2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10b      	bne.n	800b5aa <vPortFree+0x46>
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	b672      	cpsid	i
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	b662      	cpsie	i
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	e7fe      	b.n	800b5a8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00b      	beq.n	800b5ca <vPortFree+0x66>
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	b672      	cpsid	i
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	b662      	cpsie	i
 800b5c6:	60bb      	str	r3, [r7, #8]
 800b5c8:	e7fe      	b.n	800b5c8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	4b11      	ldr	r3, [pc, #68]	; (800b614 <vPortFree+0xb0>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d019      	beq.n	800b60c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d115      	bne.n	800b60c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <vPortFree+0xb0>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	401a      	ands	r2, r3
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5f0:	f7fe feb8 	bl	800a364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	4b07      	ldr	r3, [pc, #28]	; (800b618 <vPortFree+0xb4>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	4a06      	ldr	r2, [pc, #24]	; (800b618 <vPortFree+0xb4>)
 800b600:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b602:	6938      	ldr	r0, [r7, #16]
 800b604:	f000 f86c 	bl	800b6e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b608:	f7fe feba 	bl	800a380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b60c:	bf00      	nop
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200084e0 	.word	0x200084e0
 800b618:	200084d8 	.word	0x200084d8

0800b61c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b626:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b628:	4b27      	ldr	r3, [pc, #156]	; (800b6c8 <prvHeapInit+0xac>)
 800b62a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00c      	beq.n	800b650 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3307      	adds	r3, #7
 800b63a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	4a1f      	ldr	r2, [pc, #124]	; (800b6c8 <prvHeapInit+0xac>)
 800b64c:	4413      	add	r3, r2
 800b64e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b654:	4a1d      	ldr	r2, [pc, #116]	; (800b6cc <prvHeapInit+0xb0>)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b65a:	4b1c      	ldr	r3, [pc, #112]	; (800b6cc <prvHeapInit+0xb0>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	4413      	add	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b668:	2208      	movs	r2, #8
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	1a9b      	subs	r3, r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0307 	bic.w	r3, r3, #7
 800b676:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4a15      	ldr	r2, [pc, #84]	; (800b6d0 <prvHeapInit+0xb4>)
 800b67c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b67e:	4b14      	ldr	r3, [pc, #80]	; (800b6d0 <prvHeapInit+0xb4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b686:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <prvHeapInit+0xb4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2200      	movs	r2, #0
 800b68c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	1ad2      	subs	r2, r2, r3
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b69c:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <prvHeapInit+0xb4>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	4a0a      	ldr	r2, [pc, #40]	; (800b6d4 <prvHeapInit+0xb8>)
 800b6aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	4a09      	ldr	r2, [pc, #36]	; (800b6d8 <prvHeapInit+0xbc>)
 800b6b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6b4:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <prvHeapInit+0xc0>)
 800b6b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6ba:	601a      	str	r2, [r3, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	200004cc 	.word	0x200004cc
 800b6cc:	200084cc 	.word	0x200084cc
 800b6d0:	200084d4 	.word	0x200084d4
 800b6d4:	200084dc 	.word	0x200084dc
 800b6d8:	200084d8 	.word	0x200084d8
 800b6dc:	200084e0 	.word	0x200084e0

0800b6e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6e8:	4b28      	ldr	r3, [pc, #160]	; (800b78c <prvInsertBlockIntoFreeList+0xac>)
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	e002      	b.n	800b6f4 <prvInsertBlockIntoFreeList+0x14>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d8f7      	bhi.n	800b6ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	4413      	add	r3, r2
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d108      	bne.n	800b722 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	441a      	add	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	441a      	add	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d118      	bne.n	800b768 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b15      	ldr	r3, [pc, #84]	; (800b790 <prvInsertBlockIntoFreeList+0xb0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d00d      	beq.n	800b75e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	441a      	add	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e008      	b.n	800b770 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <prvInsertBlockIntoFreeList+0xb0>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	e003      	b.n	800b770 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d002      	beq.n	800b77e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b77e:	bf00      	nop
 800b780:	3714      	adds	r7, #20
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	200084cc 	.word	0x200084cc
 800b790:	200084d4 	.word	0x200084d4

0800b794 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b08c      	sub	sp, #48	; 0x30
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a51      	ldr	r2, [pc, #324]	; (800b8e4 <I2Cx_MspInit+0x150>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d14d      	bne.n	800b840 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b7a4:	4b50      	ldr	r3, [pc, #320]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a8:	4a4f      	ldr	r2, [pc, #316]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ae:	6313      	str	r3, [r2, #48]	; 0x30
 800b7b0:	4b4d      	ldr	r3, [pc, #308]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7b8:	61bb      	str	r3, [r7, #24]
 800b7ba:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800b7bc:	2380      	movs	r3, #128	; 0x80
 800b7be:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b7c0:	2312      	movs	r3, #18
 800b7c2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800b7cc:	2304      	movs	r3, #4
 800b7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b7d0:	f107 031c 	add.w	r3, r7, #28
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4845      	ldr	r0, [pc, #276]	; (800b8ec <I2Cx_MspInit+0x158>)
 800b7d8:	f7f8 faa2 	bl	8003d20 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800b7dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b7e2:	f107 031c 	add.w	r3, r7, #28
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4840      	ldr	r0, [pc, #256]	; (800b8ec <I2Cx_MspInit+0x158>)
 800b7ea:	f7f8 fa99 	bl	8003d20 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800b7ee:	4b3e      	ldr	r3, [pc, #248]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f2:	4a3d      	ldr	r2, [pc, #244]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7f8:	6413      	str	r3, [r2, #64]	; 0x40
 800b7fa:	4b3b      	ldr	r3, [pc, #236]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b802:	617b      	str	r3, [r7, #20]
 800b804:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800b806:	4b38      	ldr	r3, [pc, #224]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	4a37      	ldr	r2, [pc, #220]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b80c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b810:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800b812:	4b35      	ldr	r3, [pc, #212]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	4a34      	ldr	r2, [pc, #208]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b818:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b81c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800b81e:	2200      	movs	r2, #0
 800b820:	210f      	movs	r1, #15
 800b822:	2048      	movs	r0, #72	; 0x48
 800b824:	f7f7 fcc6 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800b828:	2048      	movs	r0, #72	; 0x48
 800b82a:	f7f7 fcdf 	bl	80031ec <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800b82e:	2200      	movs	r2, #0
 800b830:	210f      	movs	r1, #15
 800b832:	2049      	movs	r0, #73	; 0x49
 800b834:	f7f7 fcbe 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800b838:	2049      	movs	r0, #73	; 0x49
 800b83a:	f7f7 fcd7 	bl	80031ec <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800b83e:	e04d      	b.n	800b8dc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b840:	4b29      	ldr	r3, [pc, #164]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b844:	4a28      	ldr	r2, [pc, #160]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b846:	f043 0302 	orr.w	r3, r3, #2
 800b84a:	6313      	str	r3, [r2, #48]	; 0x30
 800b84c:	4b26      	ldr	r3, [pc, #152]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b850:	f003 0302 	and.w	r3, r3, #2
 800b854:	613b      	str	r3, [r7, #16]
 800b856:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800b858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b85c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b85e:	2312      	movs	r3, #18
 800b860:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b862:	2300      	movs	r3, #0
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b866:	2302      	movs	r3, #2
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800b86a:	2304      	movs	r3, #4
 800b86c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b86e:	f107 031c 	add.w	r3, r7, #28
 800b872:	4619      	mov	r1, r3
 800b874:	481e      	ldr	r0, [pc, #120]	; (800b8f0 <I2Cx_MspInit+0x15c>)
 800b876:	f7f8 fa53 	bl	8003d20 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800b87a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b87e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b880:	f107 031c 	add.w	r3, r7, #28
 800b884:	4619      	mov	r1, r3
 800b886:	481a      	ldr	r0, [pc, #104]	; (800b8f0 <I2Cx_MspInit+0x15c>)
 800b888:	f7f8 fa4a 	bl	8003d20 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800b88c:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b890:	4a15      	ldr	r2, [pc, #84]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b896:	6413      	str	r3, [r2, #64]	; 0x40
 800b898:	4b13      	ldr	r3, [pc, #76]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800b8a4:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b8a6:	6a1b      	ldr	r3, [r3, #32]
 800b8a8:	4a0f      	ldr	r2, [pc, #60]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b8aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8ae:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800b8b0:	4b0d      	ldr	r3, [pc, #52]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	4a0c      	ldr	r2, [pc, #48]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b8b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8ba:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800b8bc:	2200      	movs	r2, #0
 800b8be:	210f      	movs	r1, #15
 800b8c0:	201f      	movs	r0, #31
 800b8c2:	f7f7 fc77 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800b8c6:	201f      	movs	r0, #31
 800b8c8:	f7f7 fc90 	bl	80031ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	210f      	movs	r1, #15
 800b8d0:	2020      	movs	r0, #32
 800b8d2:	f7f7 fc6f 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800b8d6:	2020      	movs	r0, #32
 800b8d8:	f7f7 fc88 	bl	80031ec <HAL_NVIC_EnableIRQ>
}
 800b8dc:	bf00      	nop
 800b8de:	3730      	adds	r7, #48	; 0x30
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	200084e4 	.word	0x200084e4
 800b8e8:	40023800 	.word	0x40023800
 800b8ec:	40021c00 	.word	0x40021c00
 800b8f0:	40020400 	.word	0x40020400

0800b8f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7f8 ffcb 	bl	8004898 <HAL_I2C_GetState>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d125      	bne.n	800b954 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a14      	ldr	r2, [pc, #80]	; (800b95c <I2Cx_Init+0x68>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d103      	bne.n	800b918 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a13      	ldr	r2, [pc, #76]	; (800b960 <I2Cx_Init+0x6c>)
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	e002      	b.n	800b91e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a12      	ldr	r2, [pc, #72]	; (800b964 <I2Cx_Init+0x70>)
 800b91c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a11      	ldr	r2, [pc, #68]	; (800b968 <I2Cx_Init+0x74>)
 800b922:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff ff23 	bl	800b794 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7f8 fcb4 	bl	80042bc <HAL_I2C_Init>
  }
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	200084e4 	.word	0x200084e4
 800b960:	40005c00 	.word	0x40005c00
 800b964:	40005400 	.word	0x40005400
 800b968:	40912732 	.word	0x40912732

0800b96c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b08a      	sub	sp, #40	; 0x28
 800b970:	af04      	add	r7, sp, #16
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	461a      	mov	r2, r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	72fb      	strb	r3, [r7, #11]
 800b97e:	460b      	mov	r3, r1
 800b980:	813b      	strh	r3, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b98a:	7afb      	ldrb	r3, [r7, #11]
 800b98c:	b299      	uxth	r1, r3
 800b98e:	88f8      	ldrh	r0, [r7, #6]
 800b990:	893a      	ldrh	r2, [r7, #8]
 800b992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b996:	9302      	str	r3, [sp, #8]
 800b998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7f8 fe5e 	bl	8004664 <HAL_I2C_Mem_Read>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d004      	beq.n	800b9bc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800b9b2:	7afb      	ldrb	r3, [r7, #11]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 f832 	bl	800ba20 <I2Cx_Error>
  }
  return status;    
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b08a      	sub	sp, #40	; 0x28
 800b9ca:	af04      	add	r7, sp, #16
 800b9cc:	60f8      	str	r0, [r7, #12]
 800b9ce:	4608      	mov	r0, r1
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	72fb      	strb	r3, [r7, #11]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	813b      	strh	r3, [r7, #8]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	b299      	uxth	r1, r3
 800b9e8:	88f8      	ldrh	r0, [r7, #6]
 800b9ea:	893a      	ldrh	r2, [r7, #8]
 800b9ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9f0:	9302      	str	r3, [sp, #8]
 800b9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f7f8 fd1d 	bl	800443c <HAL_I2C_Mem_Write>
 800ba02:	4603      	mov	r3, r0
 800ba04:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800ba0c:	7afb      	ldrb	r3, [r7, #11]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f805 	bl	800ba20 <I2Cx_Error>
  }
  return status;
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7f8 fcd5 	bl	80043dc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff ff5e 	bl	800b8f4 <I2Cx_Init>
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ba44:	4802      	ldr	r0, [pc, #8]	; (800ba50 <TS_IO_Init+0x10>)
 800ba46:	f7ff ff55 	bl	800b8f4 <I2Cx_Init>
}
 800ba4a:	bf00      	nop
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	200084e4 	.word	0x200084e4

0800ba54 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	71fb      	strb	r3, [r7, #7]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	71bb      	strb	r3, [r7, #6]
 800ba62:	4613      	mov	r3, r2
 800ba64:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800ba66:	79bb      	ldrb	r3, [r7, #6]
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	79f9      	ldrb	r1, [r7, #7]
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	9301      	str	r3, [sp, #4]
 800ba70:	1d7b      	adds	r3, r7, #5
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	2301      	movs	r3, #1
 800ba76:	4803      	ldr	r0, [pc, #12]	; (800ba84 <TS_IO_Write+0x30>)
 800ba78:	f7ff ffa5 	bl	800b9c6 <I2Cx_WriteMultiple>
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200084e4 	.word	0x200084e4

0800ba88 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af02      	add	r7, sp, #8
 800ba8e:	4603      	mov	r3, r0
 800ba90:	460a      	mov	r2, r1
 800ba92:	71fb      	strb	r3, [r7, #7]
 800ba94:	4613      	mov	r3, r2
 800ba96:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800ba9c:	79bb      	ldrb	r3, [r7, #6]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	79f9      	ldrb	r1, [r7, #7]
 800baa2:	2301      	movs	r3, #1
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	f107 030f 	add.w	r3, r7, #15
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	2301      	movs	r3, #1
 800baae:	4804      	ldr	r0, [pc, #16]	; (800bac0 <TS_IO_Read+0x38>)
 800bab0:	f7ff ff5c 	bl	800b96c <I2Cx_ReadMultiple>

  return read_value;
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	200084e4 	.word	0x200084e4

0800bac4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7f6 ffed 	bl	8002aac <HAL_Delay>
}
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800bade:	f009 fbf5 	bl	80152cc <touchgfx_init>
}
 800bae2:	bf00      	nop
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800baea:	f009 fc19 	bl	8015320 <touchgfx_taskEntry>
}
 800baee:	bf00      	nop
 800baf0:	bd80      	pop	{r7, pc}
	...

0800baf4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
    {
 800bafc:	4a04      	ldr	r2, [pc, #16]	; (800bb10 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	601a      	str	r2, [r3, #0]
    }
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	08027630 	.word	0x08027630

0800bb14 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
    }
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ffe9 	bl	800baf4 <_ZN8touchgfx12FontProviderD1Ev>
 800bb22:	2104      	movs	r1, #4
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f019 ff7f 	bl	8025a28 <_ZdlPvj>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800bb40:	887b      	ldrh	r3, [r7, #2]
 800bb42:	2b06      	cmp	r3, #6
 800bb44:	d833      	bhi.n	800bbae <_ZN23ApplicationFontProvider7getFontEt+0x7a>
 800bb46:	a201      	add	r2, pc, #4	; (adr r2, 800bb4c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800bb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4c:	0800bb69 	.word	0x0800bb69
 800bb50:	0800bb73 	.word	0x0800bb73
 800bb54:	0800bb7d 	.word	0x0800bb7d
 800bb58:	0800bb87 	.word	0x0800bb87
 800bb5c:	0800bb91 	.word	0x0800bb91
 800bb60:	0800bb9b 	.word	0x0800bb9b
 800bb64:	0800bba5 	.word	0x0800bba5
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800bb68:	f007 f80c 	bl	8012b84 <_ZN17TypedTextDatabase8getFontsEv>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	e01e      	b.n	800bbb0 <_ZN23ApplicationFontProvider7getFontEt+0x7c>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800bb72:	f007 f807 	bl	8012b84 <_ZN17TypedTextDatabase8getFontsEv>
 800bb76:	4603      	mov	r3, r0
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	e019      	b.n	800bbb0 <_ZN23ApplicationFontProvider7getFontEt+0x7c>
    case Typography::SMALL:
        // verdana_19_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800bb7c:	f007 f802 	bl	8012b84 <_ZN17TypedTextDatabase8getFontsEv>
 800bb80:	4603      	mov	r3, r0
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	e014      	b.n	800bbb0 <_ZN23ApplicationFontProvider7getFontEt+0x7c>
    case Typography::TYPOGRAPHY_00:
        // verdana_27_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800bb86:	f006 fffd 	bl	8012b84 <_ZN17TypedTextDatabase8getFontsEv>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	e00f      	b.n	800bbb0 <_ZN23ApplicationFontProvider7getFontEt+0x7c>
    case Typography::TYPOGRAPHY_01:
        // verdana_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800bb90:	f006 fff8 	bl	8012b84 <_ZN17TypedTextDatabase8getFontsEv>
 800bb94:	4603      	mov	r3, r0
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	e00a      	b.n	800bbb0 <_ZN23ApplicationFontProvider7getFontEt+0x7c>
    case Typography::TYPOGRAPHY_02:
        // verdana_28_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800bb9a:	f006 fff3 	bl	8012b84 <_ZN17TypedTextDatabase8getFontsEv>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	e005      	b.n	800bbb0 <_ZN23ApplicationFontProvider7getFontEt+0x7c>
    case Typography::TYPOGRAPHY_03:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800bba4:	f006 ffee 	bl	8012b84 <_ZN17TypedTextDatabase8getFontsEv>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	e000      	b.n	800bbb0 <_ZN23ApplicationFontProvider7getFontEt+0x7c>
    default:
        return 0;
 800bbae:	2300      	movs	r3, #0
    }
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_02 = 5; // verdana_28_4bpp
    static const touchgfx::FontId TYPOGRAPHY_03 = 6; // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	4a05      	ldr	r2, [pc, #20]	; (800bbd8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7ff ff93 	bl	800baf4 <_ZN8touchgfx12FontProviderD1Ev>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	0802761c 	.word	0x0802761c

0800bbdc <_ZN23ApplicationFontProviderD0Ev>:
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff ffe7 	bl	800bbb8 <_ZN23ApplicationFontProviderD1Ev>
 800bbea:	2104      	movs	r1, #4
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f019 ff1b 	bl	8025a28 <_ZdlPvj>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
    {
 800bc04:	4a04      	ldr	r2, [pc, #16]	; (800bc18 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	601a      	str	r2, [r3, #0]
    }
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	080287d0 	.word	0x080287d0

0800bc1c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
    }
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff ffe9 	bl	800bbfc <_ZN8touchgfx4FontD1Ev>
 800bc2a:	2110      	movs	r1, #16
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f019 fefb 	bl	8025a28 <_ZdlPvj>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800bc48:	887b      	ldrh	r3, [r7, #2]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d101      	bne.n	800bc52 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e010      	b.n	800bc74 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3308      	adds	r3, #8
 800bc60:	681c      	ldr	r4, [r3, #0]
 800bc62:	f107 030f 	add.w	r3, r7, #15
 800bc66:	f107 0210 	add.w	r2, r7, #16
 800bc6a:	8879      	ldrh	r1, [r7, #2]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	47a0      	blx	r4
 800bc70:	6178      	str	r0, [r7, #20]
        return glyph;
 800bc72:	697b      	ldr	r3, [r7, #20]
    }
 800bc74:	4618      	mov	r0, r3
 800bc76:	371c      	adds	r7, #28
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd90      	pop	{r4, r7, pc}

0800bc7c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	895b      	ldrh	r3, [r3, #10]
    }
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	899b      	ldrh	r3, [r3, #12]
    }
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	889b      	ldrh	r3, [r3, #4]
    }
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	889a      	ldrh	r2, [r3, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	799b      	ldrb	r3, [r3, #6]
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	4413      	add	r3, r2
 800bcd8:	b29b      	uxth	r3, r3
    }
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	79db      	ldrb	r3, [r3, #7]
 800bcf2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800bcf6:	b2db      	uxtb	r3, r3
    }
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	79db      	ldrb	r3, [r3, #7]
 800bd10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bd14:	b2db      	uxtb	r3, r3
    }
 800bd16:	4618      	mov	r0, r3
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
	...

0800bd24 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	4a05      	ldr	r2, [pc, #20]	; (800bd44 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	601a      	str	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff ff61 	bl	800bbfc <_ZN8touchgfx4FontD1Ev>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	0802a790 	.word	0x0802a790

0800bd48 <_ZN8touchgfx9ConstFontD0Ev>:
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff ffe7 	bl	800bd24 <_ZN8touchgfx9ConstFontD1Ev>
 800bd56:	2118      	movs	r1, #24
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f019 fe65 	bl	8025a28 <_ZdlPvj>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	4a05      	ldr	r2, [pc, #20]	; (800bd88 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7ff ffd3 	bl	800bd24 <_ZN8touchgfx9ConstFontD1Ev>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4618      	mov	r0, r3
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	08027654 	.word	0x08027654

0800bd8c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff ffe7 	bl	800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bd9a:	2124      	movs	r1, #36	; 0x24
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f019 fe43 	bl	8025a28 <_ZdlPvj>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
    {
 800bdb4:	4a04      	ldr	r2, [pc, #16]	; (800bdc8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	601a      	str	r2, [r3, #0]
    }
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	08027644 	.word	0x08027644

0800bdcc <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
    }
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7ff ffe9 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
 800bdda:	2108      	movs	r1, #8
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f019 fe23 	bl	8025a28 <_ZdlPvj>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
    }
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800be04:	b580      	push	{r7, lr}
 800be06:	b08c      	sub	sp, #48	; 0x30
 800be08:	af08      	add	r7, sp, #32
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	4611      	mov	r1, r2
 800be10:	461a      	mov	r2, r3
 800be12:	460b      	mov	r3, r1
 800be14:	80fb      	strh	r3, [r7, #6]
 800be16:	4613      	mov	r3, r2
 800be18:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	88b9      	ldrh	r1, [r7, #4]
 800be1e:	88fa      	ldrh	r2, [r7, #6]
 800be20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800be22:	9306      	str	r3, [sp, #24]
 800be24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800be26:	9305      	str	r3, [sp, #20]
 800be28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be32:	9303      	str	r3, [sp, #12]
 800be34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be38:	9302      	str	r3, [sp, #8]
 800be3a:	7f3b      	ldrb	r3, [r7, #28]
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	7e3b      	ldrb	r3, [r7, #24]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	460b      	mov	r3, r1
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	f00e f979 	bl	801a13c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800be4a:	4a08      	ldr	r2, [pc, #32]	; (800be6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be54:	619a      	str	r2, [r3, #24]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5a:	61da      	str	r2, [r3, #28]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be60:	621a      	str	r2, [r3, #32]
{
}
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	08027654 	.word	0x08027654

0800be70 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	889b      	ldrh	r3, [r3, #4]
 800be84:	0adb      	lsrs	r3, r3, #11
 800be86:	b29b      	uxth	r3, r3
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	4413      	add	r3, r2
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4413      	add	r3, r2
}
 800be96:	4618      	mov	r0, r3
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800bea2:	b480      	push	{r7}
 800bea4:	b089      	sub	sp, #36	; 0x24
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	60f8      	str	r0, [r7, #12]
 800beaa:	460b      	mov	r3, r1
 800beac:	607a      	str	r2, [r7, #4]
 800beae:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	7b1b      	ldrb	r3, [r3, #12]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e030      	b.n	800bf24 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	69da      	ldr	r2, [r3, #28]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	7b5b      	ldrb	r3, [r3, #13]
 800bece:	021b      	lsls	r3, r3, #8
 800bed0:	b21b      	sxth	r3, r3
 800bed2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bed6:	b219      	sxth	r1, r3
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	7adb      	ldrb	r3, [r3, #11]
 800bedc:	b21b      	sxth	r3, r3
 800bede:	430b      	orrs	r3, r1
 800bee0:	b21b      	sxth	r3, r3
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	7b1b      	ldrb	r3, [r3, #12]
 800beee:	837b      	strh	r3, [r7, #26]
 800bef0:	8b7b      	ldrh	r3, [r7, #26]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d015      	beq.n	800bf22 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	881b      	ldrh	r3, [r3, #0]
 800befa:	897a      	ldrh	r2, [r7, #10]
 800befc:	429a      	cmp	r2, r3
 800befe:	d103      	bne.n	800bf08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bf06:	e00d      	b.n	800bf24 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	881b      	ldrh	r3, [r3, #0]
 800bf0c:	897a      	ldrh	r2, [r7, #10]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d306      	bcc.n	800bf20 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800bf12:	8b7b      	ldrh	r3, [r7, #26]
 800bf14:	3b01      	subs	r3, #1
 800bf16:	837b      	strh	r3, [r7, #26]
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	61fb      	str	r3, [r7, #28]
 800bf1e:	e7e7      	b.n	800bef0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800bf20:	bf00      	nop
        }
    }
    return 0;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3724      	adds	r7, #36	; 0x24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 31, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	4801      	ldr	r0, [pc, #4]	; (800bf3c <__tcf_0+0xc>)
 800bf36:	f7ff ff17 	bl	800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20008530 	.word	0x20008530

0800bf40 <_Z23getFont_verdana_10_4bppv>:
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	; 0x28
 800bf44:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 31, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800bf46:	4b15      	ldr	r3, [pc, #84]	; (800bf9c <_Z23getFont_verdana_10_4bppv+0x5c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d11f      	bne.n	800bf92 <_Z23getFont_verdana_10_4bppv+0x52>
 800bf52:	2300      	movs	r3, #0
 800bf54:	9309      	str	r3, [sp, #36]	; 0x24
 800bf56:	2300      	movs	r3, #0
 800bf58:	9308      	str	r3, [sp, #32]
 800bf5a:	233f      	movs	r3, #63	; 0x3f
 800bf5c:	9307      	str	r3, [sp, #28]
 800bf5e:	4b10      	ldr	r3, [pc, #64]	; (800bfa0 <_Z23getFont_verdana_10_4bppv+0x60>)
 800bf60:	9306      	str	r3, [sp, #24]
 800bf62:	4b10      	ldr	r3, [pc, #64]	; (800bfa4 <_Z23getFont_verdana_10_4bppv+0x64>)
 800bf64:	9305      	str	r3, [sp, #20]
 800bf66:	2301      	movs	r3, #1
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	9303      	str	r3, [sp, #12]
 800bf6e:	2301      	movs	r3, #1
 800bf70:	9302      	str	r3, [sp, #8]
 800bf72:	2304      	movs	r3, #4
 800bf74:	9301      	str	r3, [sp, #4]
 800bf76:	2302      	movs	r3, #2
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	230a      	movs	r3, #10
 800bf7c:	221f      	movs	r2, #31
 800bf7e:	490a      	ldr	r1, [pc, #40]	; (800bfa8 <_Z23getFont_verdana_10_4bppv+0x68>)
 800bf80:	480a      	ldr	r0, [pc, #40]	; (800bfac <_Z23getFont_verdana_10_4bppv+0x6c>)
 800bf82:	f7ff ff3f 	bl	800be04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bf86:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <_Z23getFont_verdana_10_4bppv+0x5c>)
 800bf88:	2201      	movs	r2, #1
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	4808      	ldr	r0, [pc, #32]	; (800bfb0 <_Z23getFont_verdana_10_4bppv+0x70>)
 800bf8e:	f019 fd95 	bl	8025abc <atexit>
    return verdana_10_4bpp;
 800bf92:	4b06      	ldr	r3, [pc, #24]	; (800bfac <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20008554 	.word	0x20008554
 800bfa0:	08030fb8 	.word	0x08030fb8
 800bfa4:	080276a0 	.word	0x080276a0
 800bfa8:	08031300 	.word	0x08031300
 800bfac:	20008530 	.word	0x20008530
 800bfb0:	0800bf31 	.word	0x0800bf31

0800bfb4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_19_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_19_4bpp();

touchgfx::GeneratedFont& getFont_verdana_19_4bpp()
{
    static touchgfx::GeneratedFont verdana_19_4bpp(glyphs_verdana_19_4bpp, 6, 19, 0, 4, 1, 0, 0, unicodes_verdana_19_4bpp, kerning_verdana_19_4bpp, 63, 0, 0);
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	4801      	ldr	r0, [pc, #4]	; (800bfc0 <__tcf_0+0xc>)
 800bfba:	f7ff fed5 	bl	800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	20008558 	.word	0x20008558

0800bfc4 <_Z23getFont_verdana_19_4bppv>:
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b08a      	sub	sp, #40	; 0x28
 800bfc8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_19_4bpp(glyphs_verdana_19_4bpp, 6, 19, 0, 4, 1, 0, 0, unicodes_verdana_19_4bpp, kerning_verdana_19_4bpp, 63, 0, 0);
 800bfca:	4b15      	ldr	r3, [pc, #84]	; (800c020 <_Z23getFont_verdana_19_4bppv+0x5c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d11f      	bne.n	800c016 <_Z23getFont_verdana_19_4bppv+0x52>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfda:	2300      	movs	r3, #0
 800bfdc:	9308      	str	r3, [sp, #32]
 800bfde:	233f      	movs	r3, #63	; 0x3f
 800bfe0:	9307      	str	r3, [sp, #28]
 800bfe2:	4b10      	ldr	r3, [pc, #64]	; (800c024 <_Z23getFont_verdana_19_4bppv+0x60>)
 800bfe4:	9306      	str	r3, [sp, #24]
 800bfe6:	4b10      	ldr	r3, [pc, #64]	; (800c028 <_Z23getFont_verdana_19_4bppv+0x64>)
 800bfe8:	9305      	str	r3, [sp, #20]
 800bfea:	2300      	movs	r3, #0
 800bfec:	9304      	str	r3, [sp, #16]
 800bfee:	2300      	movs	r3, #0
 800bff0:	9303      	str	r3, [sp, #12]
 800bff2:	2301      	movs	r3, #1
 800bff4:	9302      	str	r3, [sp, #8]
 800bff6:	2304      	movs	r3, #4
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	2300      	movs	r3, #0
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	2313      	movs	r3, #19
 800c000:	2206      	movs	r2, #6
 800c002:	490a      	ldr	r1, [pc, #40]	; (800c02c <_Z23getFont_verdana_19_4bppv+0x68>)
 800c004:	480a      	ldr	r0, [pc, #40]	; (800c030 <_Z23getFont_verdana_19_4bppv+0x6c>)
 800c006:	f7ff fefd 	bl	800be04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c00a:	4b05      	ldr	r3, [pc, #20]	; (800c020 <_Z23getFont_verdana_19_4bppv+0x5c>)
 800c00c:	2201      	movs	r2, #1
 800c00e:	601a      	str	r2, [r3, #0]
 800c010:	4808      	ldr	r0, [pc, #32]	; (800c034 <_Z23getFont_verdana_19_4bppv+0x70>)
 800c012:	f019 fd53 	bl	8025abc <atexit>
    return verdana_19_4bpp;
 800c016:	4b06      	ldr	r3, [pc, #24]	; (800c030 <_Z23getFont_verdana_19_4bppv+0x6c>)
}
 800c018:	4618      	mov	r0, r3
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	2000857c 	.word	0x2000857c
 800c024:	08030fbc 	.word	0x08030fbc
 800c028:	080276a4 	.word	0x080276a4
 800c02c:	080314b4 	.word	0x080314b4
 800c030:	20008558 	.word	0x20008558
 800c034:	0800bfb5 	.word	0x0800bfb5

0800c038 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 43, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800c038:	b580      	push	{r7, lr}
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	4801      	ldr	r0, [pc, #4]	; (800c044 <__tcf_0+0xc>)
 800c03e:	f7ff fe93 	bl	800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c042:	bd80      	pop	{r7, pc}
 800c044:	20008580 	.word	0x20008580

0800c048 <_Z23getFont_verdana_20_4bppv>:
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08a      	sub	sp, #40	; 0x28
 800c04c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 43, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800c04e:	4b15      	ldr	r3, [pc, #84]	; (800c0a4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 0301 	and.w	r3, r3, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	d11f      	bne.n	800c09a <_Z23getFont_verdana_20_4bppv+0x52>
 800c05a:	2300      	movs	r3, #0
 800c05c:	9309      	str	r3, [sp, #36]	; 0x24
 800c05e:	2300      	movs	r3, #0
 800c060:	9308      	str	r3, [sp, #32]
 800c062:	233f      	movs	r3, #63	; 0x3f
 800c064:	9307      	str	r3, [sp, #28]
 800c066:	4b10      	ldr	r3, [pc, #64]	; (800c0a8 <_Z23getFont_verdana_20_4bppv+0x60>)
 800c068:	9306      	str	r3, [sp, #24]
 800c06a:	4b10      	ldr	r3, [pc, #64]	; (800c0ac <_Z23getFont_verdana_20_4bppv+0x64>)
 800c06c:	9305      	str	r3, [sp, #20]
 800c06e:	2301      	movs	r3, #1
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	2300      	movs	r3, #0
 800c074:	9303      	str	r3, [sp, #12]
 800c076:	2301      	movs	r3, #1
 800c078:	9302      	str	r3, [sp, #8]
 800c07a:	2304      	movs	r3, #4
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	2304      	movs	r3, #4
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	2314      	movs	r3, #20
 800c084:	222b      	movs	r2, #43	; 0x2b
 800c086:	490a      	ldr	r1, [pc, #40]	; (800c0b0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800c088:	480a      	ldr	r0, [pc, #40]	; (800c0b4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800c08a:	f7ff febb 	bl	800be04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c08e:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800c090:	2201      	movs	r2, #1
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	4808      	ldr	r0, [pc, #32]	; (800c0b8 <_Z23getFont_verdana_20_4bppv+0x70>)
 800c096:	f019 fd11 	bl	8025abc <atexit>
    return verdana_20_4bpp;
 800c09a:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	200085a4 	.word	0x200085a4
 800c0a8:	08030fc0 	.word	0x08030fc0
 800c0ac:	080276a8 	.word	0x080276a8
 800c0b0:	08031508 	.word	0x08031508
 800c0b4:	20008580 	.word	0x20008580
 800c0b8:	0800c039 	.word	0x0800c039

0800c0bc <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_24_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_24_4bpp();

touchgfx::GeneratedFont& getFont_verdana_24_4bpp()
{
    static touchgfx::GeneratedFont verdana_24_4bpp(glyphs_verdana_24_4bpp, 95, 24, 5, 4, 1, 1, 2, unicodes_verdana_24_4bpp, kerning_verdana_24_4bpp, 63, 0, 0);
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	4801      	ldr	r0, [pc, #4]	; (800c0c8 <__tcf_0+0xc>)
 800c0c2:	f7ff fe51 	bl	800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	200085a8 	.word	0x200085a8

0800c0cc <_Z23getFont_verdana_24_4bppv>:
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08a      	sub	sp, #40	; 0x28
 800c0d0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_24_4bpp(glyphs_verdana_24_4bpp, 95, 24, 5, 4, 1, 1, 2, unicodes_verdana_24_4bpp, kerning_verdana_24_4bpp, 63, 0, 0);
 800c0d2:	4b15      	ldr	r3, [pc, #84]	; (800c128 <_Z23getFont_verdana_24_4bppv+0x5c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d11f      	bne.n	800c11e <_Z23getFont_verdana_24_4bppv+0x52>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	9308      	str	r3, [sp, #32]
 800c0e6:	233f      	movs	r3, #63	; 0x3f
 800c0e8:	9307      	str	r3, [sp, #28]
 800c0ea:	4b10      	ldr	r3, [pc, #64]	; (800c12c <_Z23getFont_verdana_24_4bppv+0x60>)
 800c0ec:	9306      	str	r3, [sp, #24]
 800c0ee:	4b10      	ldr	r3, [pc, #64]	; (800c130 <_Z23getFont_verdana_24_4bppv+0x64>)
 800c0f0:	9305      	str	r3, [sp, #20]
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	9304      	str	r3, [sp, #16]
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	9303      	str	r3, [sp, #12]
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	9302      	str	r3, [sp, #8]
 800c0fe:	2304      	movs	r3, #4
 800c100:	9301      	str	r3, [sp, #4]
 800c102:	2305      	movs	r3, #5
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	2318      	movs	r3, #24
 800c108:	225f      	movs	r2, #95	; 0x5f
 800c10a:	490a      	ldr	r1, [pc, #40]	; (800c134 <_Z23getFont_verdana_24_4bppv+0x68>)
 800c10c:	480a      	ldr	r0, [pc, #40]	; (800c138 <_Z23getFont_verdana_24_4bppv+0x6c>)
 800c10e:	f7ff fe79 	bl	800be04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c112:	4b05      	ldr	r3, [pc, #20]	; (800c128 <_Z23getFont_verdana_24_4bppv+0x5c>)
 800c114:	2201      	movs	r2, #1
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	4808      	ldr	r0, [pc, #32]	; (800c13c <_Z23getFont_verdana_24_4bppv+0x70>)
 800c11a:	f019 fccf 	bl	8025abc <atexit>
    return verdana_24_4bpp;
 800c11e:	4b06      	ldr	r3, [pc, #24]	; (800c138 <_Z23getFont_verdana_24_4bppv+0x6c>)
}
 800c120:	4618      	mov	r0, r3
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200085cc 	.word	0x200085cc
 800c12c:	08031034 	.word	0x08031034
 800c130:	080276ac 	.word	0x080276ac
 800c134:	08031764 	.word	0x08031764
 800c138:	200085a8 	.word	0x200085a8
 800c13c:	0800c0bd 	.word	0x0800c0bd

0800c140 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_27_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_27_4bpp();

touchgfx::GeneratedFont& getFont_verdana_27_4bpp()
{
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 1, 27, 0, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
 800c144:	4801      	ldr	r0, [pc, #4]	; (800c14c <__tcf_0+0xc>)
 800c146:	f7ff fe0f 	bl	800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	200085d0 	.word	0x200085d0

0800c150 <_Z23getFont_verdana_27_4bppv>:
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08a      	sub	sp, #40	; 0x28
 800c154:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 1, 27, 0, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800c156:	4b15      	ldr	r3, [pc, #84]	; (800c1ac <_Z23getFont_verdana_27_4bppv+0x5c>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d11f      	bne.n	800c1a2 <_Z23getFont_verdana_27_4bppv+0x52>
 800c162:	2300      	movs	r3, #0
 800c164:	9309      	str	r3, [sp, #36]	; 0x24
 800c166:	2300      	movs	r3, #0
 800c168:	9308      	str	r3, [sp, #32]
 800c16a:	233f      	movs	r3, #63	; 0x3f
 800c16c:	9307      	str	r3, [sp, #28]
 800c16e:	4b10      	ldr	r3, [pc, #64]	; (800c1b0 <_Z23getFont_verdana_27_4bppv+0x60>)
 800c170:	9306      	str	r3, [sp, #24]
 800c172:	4b10      	ldr	r3, [pc, #64]	; (800c1b4 <_Z23getFont_verdana_27_4bppv+0x64>)
 800c174:	9305      	str	r3, [sp, #20]
 800c176:	2300      	movs	r3, #0
 800c178:	9304      	str	r3, [sp, #16]
 800c17a:	2300      	movs	r3, #0
 800c17c:	9303      	str	r3, [sp, #12]
 800c17e:	2301      	movs	r3, #1
 800c180:	9302      	str	r3, [sp, #8]
 800c182:	2304      	movs	r3, #4
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	2300      	movs	r3, #0
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	231b      	movs	r3, #27
 800c18c:	2201      	movs	r2, #1
 800c18e:	490a      	ldr	r1, [pc, #40]	; (800c1b8 <_Z23getFont_verdana_27_4bppv+0x68>)
 800c190:	480a      	ldr	r0, [pc, #40]	; (800c1bc <_Z23getFont_verdana_27_4bppv+0x6c>)
 800c192:	f7ff fe37 	bl	800be04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c196:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <_Z23getFont_verdana_27_4bppv+0x5c>)
 800c198:	2201      	movs	r2, #1
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	4808      	ldr	r0, [pc, #32]	; (800c1c0 <_Z23getFont_verdana_27_4bppv+0x70>)
 800c19e:	f019 fc8d 	bl	8025abc <atexit>
    return verdana_27_4bpp;
 800c1a2:	4b06      	ldr	r3, [pc, #24]	; (800c1bc <_Z23getFont_verdana_27_4bppv+0x6c>)
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	200085f4 	.word	0x200085f4
 800c1b0:	080312a8 	.word	0x080312a8
 800c1b4:	080276b0 	.word	0x080276b0
 800c1b8:	08031c98 	.word	0x08031c98
 800c1bc:	200085d0 	.word	0x200085d0
 800c1c0:	0800c141 	.word	0x0800c141

0800c1c4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_28_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_28_4bpp();

touchgfx::GeneratedFont& getFont_verdana_28_4bpp()
{
    static touchgfx::GeneratedFont verdana_28_4bpp(glyphs_verdana_28_4bpp, 19, 28, 6, 4, 1, 1, 1, unicodes_verdana_28_4bpp, kerning_verdana_28_4bpp, 63, 0, 0);
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	4801      	ldr	r0, [pc, #4]	; (800c1d0 <__tcf_0+0xc>)
 800c1ca:	f7ff fdcd 	bl	800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	200085f8 	.word	0x200085f8

0800c1d4 <_Z23getFont_verdana_28_4bppv>:
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08a      	sub	sp, #40	; 0x28
 800c1d8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_28_4bpp(glyphs_verdana_28_4bpp, 19, 28, 6, 4, 1, 1, 1, unicodes_verdana_28_4bpp, kerning_verdana_28_4bpp, 63, 0, 0);
 800c1da:	4b15      	ldr	r3, [pc, #84]	; (800c230 <_Z23getFont_verdana_28_4bppv+0x5c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d11f      	bne.n	800c226 <_Z23getFont_verdana_28_4bppv+0x52>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	9308      	str	r3, [sp, #32]
 800c1ee:	233f      	movs	r3, #63	; 0x3f
 800c1f0:	9307      	str	r3, [sp, #28]
 800c1f2:	4b10      	ldr	r3, [pc, #64]	; (800c234 <_Z23getFont_verdana_28_4bppv+0x60>)
 800c1f4:	9306      	str	r3, [sp, #24]
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <_Z23getFont_verdana_28_4bppv+0x64>)
 800c1f8:	9305      	str	r3, [sp, #20]
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	9304      	str	r3, [sp, #16]
 800c1fe:	2301      	movs	r3, #1
 800c200:	9303      	str	r3, [sp, #12]
 800c202:	2301      	movs	r3, #1
 800c204:	9302      	str	r3, [sp, #8]
 800c206:	2304      	movs	r3, #4
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	2306      	movs	r3, #6
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	231c      	movs	r3, #28
 800c210:	2213      	movs	r2, #19
 800c212:	490a      	ldr	r1, [pc, #40]	; (800c23c <_Z23getFont_verdana_28_4bppv+0x68>)
 800c214:	480a      	ldr	r0, [pc, #40]	; (800c240 <_Z23getFont_verdana_28_4bppv+0x6c>)
 800c216:	f7ff fdf5 	bl	800be04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c21a:	4b05      	ldr	r3, [pc, #20]	; (800c230 <_Z23getFont_verdana_28_4bppv+0x5c>)
 800c21c:	2201      	movs	r2, #1
 800c21e:	601a      	str	r2, [r3, #0]
 800c220:	4808      	ldr	r0, [pc, #32]	; (800c244 <_Z23getFont_verdana_28_4bppv+0x70>)
 800c222:	f019 fc4b 	bl	8025abc <atexit>
    return verdana_28_4bpp;
 800c226:	4b06      	ldr	r3, [pc, #24]	; (800c240 <_Z23getFont_verdana_28_4bppv+0x6c>)
}
 800c228:	4618      	mov	r0, r3
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	2000861c 	.word	0x2000861c
 800c234:	080312ac 	.word	0x080312ac
 800c238:	080276b4 	.word	0x080276b4
 800c23c:	08031ca8 	.word	0x08031ca8
 800c240:	200085f8 	.word	0x200085f8
 800c244:	0800c1c5 	.word	0x0800c1c5

0800c248 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	4801      	ldr	r0, [pc, #4]	; (800c254 <__tcf_0+0xc>)
 800c24e:	f7ff fd8b 	bl	800bd68 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c252:	bd80      	pop	{r7, pc}
 800c254:	20008620 	.word	0x20008620

0800c258 <_Z23getFont_verdana_40_4bppv>:
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08a      	sub	sp, #40	; 0x28
 800c25c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c25e:	4b15      	ldr	r3, [pc, #84]	; (800c2b4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d11f      	bne.n	800c2aa <_Z23getFont_verdana_40_4bppv+0x52>
 800c26a:	2300      	movs	r3, #0
 800c26c:	9309      	str	r3, [sp, #36]	; 0x24
 800c26e:	2300      	movs	r3, #0
 800c270:	9308      	str	r3, [sp, #32]
 800c272:	233f      	movs	r3, #63	; 0x3f
 800c274:	9307      	str	r3, [sp, #28]
 800c276:	4b10      	ldr	r3, [pc, #64]	; (800c2b8 <_Z23getFont_verdana_40_4bppv+0x60>)
 800c278:	9306      	str	r3, [sp, #24]
 800c27a:	4b10      	ldr	r3, [pc, #64]	; (800c2bc <_Z23getFont_verdana_40_4bppv+0x64>)
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	2301      	movs	r3, #1
 800c280:	9304      	str	r3, [sp, #16]
 800c282:	2300      	movs	r3, #0
 800c284:	9303      	str	r3, [sp, #12]
 800c286:	2301      	movs	r3, #1
 800c288:	9302      	str	r3, [sp, #8]
 800c28a:	2304      	movs	r3, #4
 800c28c:	9301      	str	r3, [sp, #4]
 800c28e:	2308      	movs	r3, #8
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	2328      	movs	r3, #40	; 0x28
 800c294:	2212      	movs	r2, #18
 800c296:	490a      	ldr	r1, [pc, #40]	; (800c2c0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800c298:	480a      	ldr	r0, [pc, #40]	; (800c2c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800c29a:	f7ff fdb3 	bl	800be04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c29e:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	4808      	ldr	r0, [pc, #32]	; (800c2c8 <_Z23getFont_verdana_40_4bppv+0x70>)
 800c2a6:	f019 fc09 	bl	8025abc <atexit>
    return verdana_40_4bpp;
 800c2aa:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20008644 	.word	0x20008644
 800c2b8:	080312c0 	.word	0x080312c0
 800c2bc:	080276b8 	.word	0x080276b8
 800c2c0:	08031db4 	.word	0x08031db4
 800c2c4:	20008620 	.word	0x20008620
 800c2c8:	0800c249 	.word	0x0800c249

0800c2cc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	80da      	strh	r2, [r3, #6]
    }
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4618      	mov	r0, r3
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800c312:	b480      	push	{r7}
 800c314:	b085      	sub	sp, #20
 800c316:	af00      	add	r7, sp, #0
 800c318:	60f8      	str	r0, [r7, #12]
 800c31a:	4608      	mov	r0, r1
 800c31c:	4611      	mov	r1, r2
 800c31e:	461a      	mov	r2, r3
 800c320:	4603      	mov	r3, r0
 800c322:	817b      	strh	r3, [r7, #10]
 800c324:	460b      	mov	r3, r1
 800c326:	813b      	strh	r3, [r7, #8]
 800c328:	4613      	mov	r3, r2
 800c32a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	897a      	ldrh	r2, [r7, #10]
 800c330:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	893a      	ldrh	r2, [r7, #8]
 800c336:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	88fa      	ldrh	r2, [r7, #6]
 800c33c:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	8b3a      	ldrh	r2, [r7, #24]
 800c342:	80da      	strh	r2, [r3, #6]
    }
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	4618      	mov	r0, r3
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	6039      	str	r1, [r7, #0]
    {
    }
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
    {
    }
 800c372:	bf00      	nop
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c37e:	b480      	push	{r7}
 800c380:	b083      	sub	sp, #12
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
    {
    }
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
    {
    }
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
    {
    }
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
    {
 800c3dc:	4a04      	ldr	r2, [pc, #16]	; (800c3f0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	601a      	str	r2, [r3, #0]
    }
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	08027924 	.word	0x08027924

0800c3f4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
    }
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff ffe9 	bl	800c3d4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c402:	2104      	movs	r1, #4
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f019 fb0f 	bl	8025a28 <_ZdlPvj>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4618      	mov	r0, r3
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800c41c:	4a07      	ldr	r2, [pc, #28]	; (800c43c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	601a      	str	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	605a      	str	r2, [r3, #4]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	721a      	strb	r2, [r3, #8]
    {
    }
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4618      	mov	r0, r3
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	08027904 	.word	0x08027904

0800c440 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
    {
 800c448:	4a04      	ldr	r2, [pc, #16]	; (800c45c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	601a      	str	r2, [r3, #0]
    }
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	08027904 	.word	0x08027904

0800c460 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
    }
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7ff ffe9 	bl	800c440 <_ZN8touchgfx10TransitionD1Ev>
 800c46e:	210c      	movs	r1, #12
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f019 fad9 	bl	8025a28 <_ZdlPvj>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
    {
    }
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
    {
    }
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
    {
    }
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	605a      	str	r2, [r3, #4]
    }
 800c4cc:	bf00      	nop
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800c502:	6810      	ldr	r0, [r2, #0]
 800c504:	6851      	ldr	r1, [r2, #4]
 800c506:	c303      	stmia	r3!, {r0, r1}
    };
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
    {
 800c51c:	4a04      	ldr	r2, [pc, #16]	; (800c530 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	601a      	str	r2, [r3, #0]
    }
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	080278ec 	.word	0x080278ec

0800c534 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
    }
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff ffe9 	bl	800c514 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c542:	2104      	movs	r1, #4
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f019 fa6f 	bl	8025a28 <_ZdlPvj>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4618      	mov	r0, r3
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af02      	add	r7, sp, #8
 800c55a:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800c55c:	4a13      	ldr	r2, [pc, #76]	; (800c5ac <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	1d18      	adds	r0, r3, #4
 800c566:	2300      	movs	r3, #0
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	2300      	movs	r3, #0
 800c56c:	2200      	movs	r2, #0
 800c56e:	2100      	movs	r1, #0
 800c570:	f7ff fecf 	bl	800c312 <_ZN8touchgfx4RectC1Essss>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	330c      	adds	r3, #12
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff feb3 	bl	800c2e4 <_ZN8touchgfx4RectC1Ev>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	615a      	str	r2, [r3, #20]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	619a      	str	r2, [r3, #24]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	61da      	str	r2, [r3, #28]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	0802a728 	.word	0x0802a728

0800c5b0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
    {
 800c5b8:	4a04      	ldr	r2, [pc, #16]	; (800c5cc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	601a      	str	r2, [r3, #0]
    }
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	0802a728 	.word	0x0802a728

0800c5d0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
    }
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff ffe9 	bl	800c5b0 <_ZN8touchgfx8DrawableD1Ev>
 800c5de:	2128      	movs	r1, #40	; 0x28
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f019 fa21 	bl	8025a28 <_ZdlPvj>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	4608      	mov	r0, r1
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	4603      	mov	r3, r0
 800c600:	817b      	strh	r3, [r7, #10]
 800c602:	460b      	mov	r3, r1
 800c604:	813b      	strh	r3, [r7, #8]
 800c606:	4613      	mov	r3, r2
 800c608:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3334      	adds	r3, #52	; 0x34
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c616:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	4798      	blx	r3
        setWidth(width);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3338      	adds	r3, #56	; 0x38
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c62a:	4611      	mov	r1, r2
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	4798      	blx	r3
        setHeight(height);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	333c      	adds	r3, #60	; 0x3c
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c63c:	4611      	mov	r1, r2
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	4798      	blx	r3
    }
 800c642:	bf00      	nop
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c64a:	b480      	push	{r7}
 800c64c:	b083      	sub	sp, #12
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c658:	4618      	mov	r0, r3
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c672:	4618      	mov	r0, r3
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800c67e:	b480      	push	{r7}
 800c680:	b083      	sub	sp, #12
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	460b      	mov	r3, r1
 800c688:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	887a      	ldrh	r2, [r7, #2]
 800c68e:	809a      	strh	r2, [r3, #4]
    }
 800c690:	bf00      	nop
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	887a      	ldrh	r2, [r7, #2]
 800c6ac:	80da      	strh	r2, [r3, #6]
    }
 800c6ae:	bf00      	nop
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	807b      	strh	r3, [r7, #2]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	332c      	adds	r3, #44	; 0x2c
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	4798      	blx	r3
        setY(y);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3330      	adds	r3, #48	; 0x30
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	4798      	blx	r3
    }
 800c6ee:	bf00      	nop
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800c6f6:	b480      	push	{r7}
 800c6f8:	b083      	sub	sp, #12
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	460b      	mov	r3, r1
 800c700:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	887a      	ldrh	r2, [r7, #2]
 800c706:	811a      	strh	r2, [r3, #8]
    }
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	460b      	mov	r3, r1
 800c71e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	887a      	ldrh	r2, [r7, #2]
 800c724:	815a      	strh	r2, [r3, #10]
    }
 800c726:	bf00      	nop
 800c728:	370c      	adds	r7, #12
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr

0800c732 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800c732:	b480      	push	{r7}
 800c734:	b083      	sub	sp, #12
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
    {
    }
 800c73a:	bf00      	nop
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800c746:	b480      	push	{r7}
 800c748:	b083      	sub	sp, #12
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
    {
    }
 800c750:	bf00      	nop
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
    {
    }
 800c766:	bf00      	nop
 800c768:	370c      	adds	r7, #12
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800c772:	b480      	push	{r7}
 800c774:	b083      	sub	sp, #12
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	6039      	str	r1, [r7, #0]
    {
    }
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
    {
    }
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c7b6:	b480      	push	{r7}
 800c7b8:	b083      	sub	sp, #12
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	807b      	strh	r3, [r7, #2]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	3354      	adds	r3, #84	; 0x54
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	8879      	ldrh	r1, [r7, #2]
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c7f0:	b292      	uxth	r2, r2
 800c7f2:	1a8a      	subs	r2, r1, r2
 800c7f4:	b292      	uxth	r2, r2
 800c7f6:	b210      	sxth	r0, r2
 800c7f8:	8839      	ldrh	r1, [r7, #0]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c800:	b292      	uxth	r2, r2
 800c802:	1a8a      	subs	r2, r1, r2
 800c804:	b292      	uxth	r2, r2
 800c806:	b212      	sxth	r2, r2
 800c808:	4601      	mov	r1, r0
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	4798      	blx	r3
    }
 800c80e:	bf00      	nop
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800c816:	b480      	push	{r7}
 800c818:	b083      	sub	sp, #12
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c824:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c82c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c834:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800c836:	bf00      	nop
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	60f8      	str	r0, [r7, #12]
 800c84a:	60b9      	str	r1, [r7, #8]
 800c84c:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f7ff ffe1 	bl	800c816 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	601a      	str	r2, [r3, #0]
    }
 800c862:	bf00      	nop
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
	...

0800c86c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c86c:	b480      	push	{r7}
 800c86e:	af00      	add	r7, sp, #0
    {
        return instance;
 800c870:	4b03      	ldr	r3, [pc, #12]	; (800c880 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c872:	681b      	ldr	r3, [r3, #0]
    }
 800c874:	4618      	mov	r0, r3
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	2000b3c8 	.word	0x2000b3c8

0800c884 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c884:	b480      	push	{r7}
 800c886:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c888:	4b0b      	ldr	r3, [pc, #44]	; (800c8b8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c890:	2b00      	cmp	r3, #0
 800c892:	d008      	beq.n	800c8a6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c894:	4b08      	ldr	r3, [pc, #32]	; (800c8b8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c89e:	4b06      	ldr	r3, [pc, #24]	; (800c8b8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a4:	e002      	b.n	800c8ac <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800c8a6:	4b04      	ldr	r3, [pc, #16]	; (800c8b8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	689b      	ldr	r3, [r3, #8]
        }
    }
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	2000b3c8 	.word	0x2000b3c8

0800c8bc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	4a05      	ldr	r2, [pc, #20]	; (800c8dc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff fd81 	bl	800c3d4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	0802a638 	.word	0x0802a638

0800c8e0 <_ZN8touchgfx11ApplicationD0Ev>:
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff ffe7 	bl	800c8bc <_ZN8touchgfx11ApplicationD1Ev>
 800c8ee:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f019 f898 	bl	8025a28 <_ZdlPvj>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4618      	mov	r0, r3
 800c910:	f00c ff6e 	bl	80197f0 <_ZN8touchgfx11ApplicationC1Ev>
 800c914:	4a09      	ldr	r2, [pc, #36]	; (800c93c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4a04      	ldr	r2, [pc, #16]	; (800c940 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c92e:	6013      	str	r3, [r2, #0]
    }
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4618      	mov	r0, r3
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	080278a8 	.word	0x080278a8
 800c940:	2000b454 	.word	0x2000b454

0800c944 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f804 	bl	800c95a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00f      	beq.n	800c98c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	330c      	adds	r3, #12
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4610      	mov	r0, r2
 800c980:	4798      	blx	r3
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c988:	2301      	movs	r3, #1
 800c98a:	e000      	b.n	800c98e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c98c:	2300      	movs	r3, #0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00e      	beq.n	800c9b0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3308      	adds	r3, #8
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	601a      	str	r2, [r3, #0]
    }
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	4a05      	ldr	r2, [pc, #20]	; (800c9f4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	601a      	str	r2, [r3, #0]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7ff ff69 	bl	800c8bc <_ZN8touchgfx11ApplicationD1Ev>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	080278a8 	.word	0x080278a8

0800c9f8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7ff ffe7 	bl	800c9d4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ca06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f019 f80c 	bl	8025a28 <_ZdlPvj>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	4a08      	ldr	r2, [pc, #32]	; (800ca48 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ca30:	4618      	mov	r0, r3
 800ca32:	f002 f921 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7ff ffcb 	bl	800c9d4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	0802784c 	.word	0x0802784c

0800ca4c <_ZN23FrontendApplicationBaseD0Ev>:
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7ff ffe1 	bl	800ca1c <_ZN23FrontendApplicationBaseD1Ev>
 800ca5a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f018 ffe2 	bl	8025a28 <_ZdlPvj>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4618      	mov	r0, r3
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	721a      	strb	r2, [r3, #8]
    }
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	607b      	str	r3, [r7, #4]
 800ca92:	460b      	mov	r3, r1
 800ca94:	817b      	strh	r3, [r7, #10]
 800ca96:	4613      	mov	r3, r2
 800ca98:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff fe7d 	bl	800c79c <_ZNK8touchgfx8Drawable9isVisibleEv>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d008      	beq.n	800caba <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff fe83 	bl	800c7b6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cab6:	2301      	movs	r3, #1
 800cab8:	e000      	b.n	800cabc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800caba:	2300      	movs	r3, #0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	601a      	str	r2, [r3, #0]
        }
    }
 800cac6:	bf00      	nop
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	605a      	str	r2, [r3, #4]
    }
 800cade:	bf00      	nop
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
	...

0800caec <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fd2c 	bl	800c554 <_ZN8touchgfx8DrawableC1Ev>
 800cafc:	4a03      	ldr	r2, [pc, #12]	; (800cb0c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4618      	mov	r0, r3
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	080277c4 	.word	0x080277c4

0800cb10 <_ZN8touchgfx6WidgetD1Ev>:
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	4a05      	ldr	r2, [pc, #20]	; (800cb30 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff fd45 	bl	800c5b0 <_ZN8touchgfx8DrawableD1Ev>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	080277c4 	.word	0x080277c4

0800cb34 <_ZN8touchgfx6WidgetD0Ev>:
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7ff ffe7 	bl	800cb10 <_ZN8touchgfx6WidgetD1Ev>
 800cb42:	2128      	movs	r1, #40	; 0x28
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f018 ff6f 	bl	8025a28 <_ZdlPvj>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/gallery_screen/galleryView.hpp>
#include <gui/gallery_screen/galleryPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7ff fece 	bl	800c904 <_ZN8touchgfx14MVPApplicationC1Ev>
 800cb68:	4a13      	ldr	r2, [pc, #76]	; (800cbb8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cb74:	4618      	mov	r0, r3
 800cb76:	f000 fa89 	bl	800d08c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800cb8a:	f7ff fe6f 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	6813      	ldr	r3, [r2, #0]
 800cb92:	3308      	adds	r3, #8
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2100      	movs	r1, #0
 800cb98:	4610      	mov	r0, r2
 800cb9a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	f005 ff79 	bl	8012a94 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800cba2:	f7ff fe6f 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 800cba6:	4603      	mov	r3, r0
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f012 fc42 	bl	801f432 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	0802784c 	.word	0x0802784c

0800cbbc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7ff ffe9 	bl	800cbbc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	605a      	str	r2, [r3, #4]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	3308      	adds	r3, #8
 800cbf8:	3208      	adds	r2, #8
 800cbfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cbfe:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800cc0c:	b590      	push	{r4, r7, lr}
 800cc0e:	b089      	sub	sp, #36	; 0x24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cc1a:	4b10      	ldr	r3, [pc, #64]	; (800cc5c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800cc1c:	61bb      	str	r3, [r7, #24]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	61fb      	str	r3, [r7, #28]
 800cc22:	f107 0008 	add.w	r0, r7, #8
 800cc26:	f107 0318 	add.w	r3, r7, #24
 800cc2a:	cb0c      	ldmia	r3, {r2, r3}
 800cc2c:	6879      	ldr	r1, [r7, #4]
 800cc2e:	f000 fa49 	bl	800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	4619      	mov	r1, r3
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f7ff ffcb 	bl	800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cc3e:	f107 0308 	add.w	r3, r7, #8
 800cc42:	4618      	mov	r0, r3
 800cc44:	f002 f818 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cc54:	bf00      	nop
 800cc56:	3724      	adds	r7, #36	; 0x24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd90      	pop	{r4, r7, pc}
 800cc5c:	0800cc61 	.word	0x0800cc61

0800cc60 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cc74:	461a      	mov	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	4b04      	ldr	r3, [pc, #16]	; (800cc90 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800cc80:	4804      	ldr	r0, [pc, #16]	; (800cc94 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800cc82:	f000 fa51 	bl	800d128 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	2000b448 	.word	0x2000b448
 800cc94:	2000b444 	.word	0x2000b444

0800cc98 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEast()
{
 800cc98:	b590      	push	{r4, r7, lr}
 800cc9a:	b089      	sub	sp, #36	; 0x24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenSlideTransitionEastImpl);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cca6:	4b10      	ldr	r3, [pc, #64]	; (800cce8 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv+0x50>)
 800cca8:	61bb      	str	r3, [r7, #24]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	61fb      	str	r3, [r7, #28]
 800ccae:	f107 0008 	add.w	r0, r7, #8
 800ccb2:	f107 0318 	add.w	r3, r7, #24
 800ccb6:	cb0c      	ldmia	r3, {r2, r3}
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	f000 fa03 	bl	800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ccbe:	f107 0308 	add.w	r3, r7, #8
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7ff ff85 	bl	800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ccca:	f107 0308 	add.w	r3, r7, #8
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 ffd2 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cce0:	bf00      	nop
 800cce2:	3724      	adds	r7, #36	; 0x24
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd90      	pop	{r4, r7, pc}
 800cce8:	0800cced 	.word	0x0800cced

0800ccec <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEastImpl()
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af02      	add	r7, sp, #8
 800ccf2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cd00:	461a      	mov	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cd08:	9300      	str	r3, [sp, #0]
 800cd0a:	4b04      	ldr	r3, [pc, #16]	; (800cd1c <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x30>)
 800cd0c:	4804      	ldr	r0, [pc, #16]	; (800cd20 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x34>)
 800cd0e:	f000 fb37 	bl	800d380 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	2000b448 	.word	0x2000b448
 800cd20:	2000b444 	.word	0x2000b444

0800cd24 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEast()
{
 800cd24:	b590      	push	{r4, r7, lr}
 800cd26:	b089      	sub	sp, #36	; 0x24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenCoverTransitionEastImpl);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cd32:	4b10      	ldr	r3, [pc, #64]	; (800cd74 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv+0x50>)
 800cd34:	61bb      	str	r3, [r7, #24]
 800cd36:	2300      	movs	r3, #0
 800cd38:	61fb      	str	r3, [r7, #28]
 800cd3a:	f107 0008 	add.w	r0, r7, #8
 800cd3e:	f107 0318 	add.w	r3, r7, #24
 800cd42:	cb0c      	ldmia	r3, {r2, r3}
 800cd44:	6879      	ldr	r1, [r7, #4]
 800cd46:	f000 f9bd 	bl	800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cd4a:	f107 0308 	add.w	r3, r7, #8
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4620      	mov	r0, r4
 800cd52:	f7ff ff3f 	bl	800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cd56:	f107 0308 	add.w	r3, r7, #8
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f001 ff8c 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cd6c:	bf00      	nop
 800cd6e:	3724      	adds	r7, #36	; 0x24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd90      	pop	{r4, r7, pc}
 800cd74:	0800cd79 	.word	0x0800cd79

0800cd78 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEastImpl()
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af02      	add	r7, sp, #8
 800cd7e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	4b04      	ldr	r3, [pc, #16]	; (800cda8 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x30>)
 800cd98:	4804      	ldr	r0, [pc, #16]	; (800cdac <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x34>)
 800cd9a:	f000 fc1d 	bl	800d5d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cd9e:	bf00      	nop
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	2000b448 	.word	0x2000b448
 800cdac:	2000b444 	.word	0x2000b444

0800cdb0 <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>:

// Music

void FrontendApplicationBase::gotoMusicScreenNoTransition()
{
 800cdb0:	b590      	push	{r4, r7, lr}
 800cdb2:	b089      	sub	sp, #36	; 0x24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMusicScreenNoTransitionImpl);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cdbe:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv+0x50>)
 800cdc0:	61bb      	str	r3, [r7, #24]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	61fb      	str	r3, [r7, #28]
 800cdc6:	f107 0008 	add.w	r0, r7, #8
 800cdca:	f107 0318 	add.w	r3, r7, #24
 800cdce:	cb0c      	ldmia	r3, {r2, r3}
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	f000 f977 	bl	800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cdd6:	f107 0308 	add.w	r3, r7, #8
 800cdda:	4619      	mov	r1, r3
 800cddc:	4620      	mov	r0, r4
 800cdde:	f7ff fef9 	bl	800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cde2:	f107 0308 	add.w	r3, r7, #8
 800cde6:	4618      	mov	r0, r3
 800cde8:	f001 ff46 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cdf8:	bf00      	nop
 800cdfa:	3724      	adds	r7, #36	; 0x24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd90      	pop	{r4, r7, pc}
 800ce00:	0800ce05 	.word	0x0800ce05

0800ce04 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMusicScreenNoTransitionImpl()
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af02      	add	r7, sp, #8
 800ce0a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MusicView, MusicPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ce18:	461a      	mov	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	4b04      	ldr	r3, [pc, #16]	; (800ce34 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x30>)
 800ce24:	4804      	ldr	r0, [pc, #16]	; (800ce38 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x34>)
 800ce26:	f000 fd03 	bl	800d830 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	2000b448 	.word	0x2000b448
 800ce38:	2000b444 	.word	0x2000b444

0800ce3c <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>:

// gameover

void FrontendApplicationBase::gotogameoverScreenNoTransition()
{
 800ce3c:	b590      	push	{r4, r7, lr}
 800ce3e:	b089      	sub	sp, #36	; 0x24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogameoverScreenNoTransitionImpl);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ce4a:	4b10      	ldr	r3, [pc, #64]	; (800ce8c <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv+0x50>)
 800ce4c:	61bb      	str	r3, [r7, #24]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	61fb      	str	r3, [r7, #28]
 800ce52:	f107 0008 	add.w	r0, r7, #8
 800ce56:	f107 0318 	add.w	r3, r7, #24
 800ce5a:	cb0c      	ldmia	r3, {r2, r3}
 800ce5c:	6879      	ldr	r1, [r7, #4]
 800ce5e:	f000 f931 	bl	800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ce62:	f107 0308 	add.w	r3, r7, #8
 800ce66:	4619      	mov	r1, r3
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f7ff feb3 	bl	800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ce6e:	f107 0308 	add.w	r3, r7, #8
 800ce72:	4618      	mov	r0, r3
 800ce74:	f001 ff00 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ce84:	bf00      	nop
 800ce86:	3724      	adds	r7, #36	; 0x24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd90      	pop	{r4, r7, pc}
 800ce8c:	0800ce91 	.word	0x0800ce91

0800ce90 <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotogameoverScreenNoTransitionImpl()
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<gameoverView, gameoverPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cea4:	461a      	mov	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	4b04      	ldr	r3, [pc, #16]	; (800cec0 <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv+0x30>)
 800ceb0:	4804      	ldr	r0, [pc, #16]	; (800cec4 <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv+0x34>)
 800ceb2:	f000 fde9 	bl	800da88 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ceb6:	bf00      	nop
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	2000b448 	.word	0x2000b448
 800cec4:	2000b444 	.word	0x2000b444

0800cec8 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>:

// Pong

void FrontendApplicationBase::gotoPongScreenCoverTransitionEast()
{
 800cec8:	b590      	push	{r4, r7, lr}
 800ceca:	b089      	sub	sp, #36	; 0x24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenCoverTransitionEastImpl);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ced6:	4b10      	ldr	r3, [pc, #64]	; (800cf18 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv+0x50>)
 800ced8:	61bb      	str	r3, [r7, #24]
 800ceda:	2300      	movs	r3, #0
 800cedc:	61fb      	str	r3, [r7, #28]
 800cede:	f107 0008 	add.w	r0, r7, #8
 800cee2:	f107 0318 	add.w	r3, r7, #24
 800cee6:	cb0c      	ldmia	r3, {r2, r3}
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	f000 f8eb 	bl	800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ceee:	f107 0308 	add.w	r3, r7, #8
 800cef2:	4619      	mov	r1, r3
 800cef4:	4620      	mov	r0, r4
 800cef6:	f7ff fe6d 	bl	800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cefa:	f107 0308 	add.w	r3, r7, #8
 800cefe:	4618      	mov	r0, r3
 800cf00:	f001 feba 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cf10:	bf00      	nop
 800cf12:	3724      	adds	r7, #36	; 0x24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd90      	pop	{r4, r7, pc}
 800cf18:	0800cf1d 	.word	0x0800cf1d

0800cf1c <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoPongScreenCoverTransitionEastImpl()
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af02      	add	r7, sp, #8
 800cf22:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cf30:	461a      	mov	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	4b04      	ldr	r3, [pc, #16]	; (800cf4c <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x30>)
 800cf3c:	4804      	ldr	r0, [pc, #16]	; (800cf50 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x34>)
 800cf3e:	f000 fecf 	bl	800dce0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cf42:	bf00      	nop
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	2000b448 	.word	0x2000b448
 800cf50:	2000b444 	.word	0x2000b444

0800cf54 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv>:

void FrontendApplicationBase::gotoPongScreenNoTransition()
{
 800cf54:	b590      	push	{r4, r7, lr}
 800cf56:	b089      	sub	sp, #36	; 0x24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenNoTransitionImpl);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cf62:	4b10      	ldr	r3, [pc, #64]	; (800cfa4 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv+0x50>)
 800cf64:	61bb      	str	r3, [r7, #24]
 800cf66:	2300      	movs	r3, #0
 800cf68:	61fb      	str	r3, [r7, #28]
 800cf6a:	f107 0008 	add.w	r0, r7, #8
 800cf6e:	f107 0318 	add.w	r3, r7, #24
 800cf72:	cb0c      	ldmia	r3, {r2, r3}
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	f000 f8a5 	bl	800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cf7a:	f107 0308 	add.w	r3, r7, #8
 800cf7e:	4619      	mov	r1, r3
 800cf80:	4620      	mov	r0, r4
 800cf82:	f7ff fe27 	bl	800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cf86:	f107 0308 	add.w	r3, r7, #8
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f001 fe74 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cf9c:	bf00      	nop
 800cf9e:	3724      	adds	r7, #36	; 0x24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd90      	pop	{r4, r7, pc}
 800cfa4:	0800cfa9 	.word	0x0800cfa9

0800cfa8 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoPongScreenNoTransitionImpl()
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af02      	add	r7, sp, #8
 800cfae:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv+0x30>)
 800cfc8:	4804      	ldr	r0, [pc, #16]	; (800cfdc <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv+0x34>)
 800cfca:	f000 ffb7 	bl	800df3c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cfce:	bf00      	nop
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	2000b448 	.word	0x2000b448
 800cfdc:	2000b444 	.word	0x2000b444

0800cfe0 <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv>:

// gallery

void FrontendApplicationBase::gotogalleryScreenCoverTransitionEast()
{
 800cfe0:	b590      	push	{r4, r7, lr}
 800cfe2:	b089      	sub	sp, #36	; 0x24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogalleryScreenCoverTransitionEastImpl);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cfee:	4b10      	ldr	r3, [pc, #64]	; (800d030 <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv+0x50>)
 800cff0:	61bb      	str	r3, [r7, #24]
 800cff2:	2300      	movs	r3, #0
 800cff4:	61fb      	str	r3, [r7, #28]
 800cff6:	f107 0008 	add.w	r0, r7, #8
 800cffa:	f107 0318 	add.w	r3, r7, #24
 800cffe:	cb0c      	ldmia	r3, {r2, r3}
 800d000:	6879      	ldr	r1, [r7, #4]
 800d002:	f000 f85f 	bl	800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800d006:	f107 0308 	add.w	r3, r7, #8
 800d00a:	4619      	mov	r1, r3
 800d00c:	4620      	mov	r0, r4
 800d00e:	f7ff fde1 	bl	800cbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800d012:	f107 0308 	add.w	r3, r7, #8
 800d016:	4618      	mov	r0, r3
 800d018:	f001 fe2e 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800d028:	bf00      	nop
 800d02a:	3724      	adds	r7, #36	; 0x24
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd90      	pop	{r4, r7, pc}
 800d030:	0800d035 	.word	0x0800d035

0800d034 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotogalleryScreenCoverTransitionEastImpl()
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af02      	add	r7, sp, #8
 800d03a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<galleryView, galleryPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d048:	461a      	mov	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	4b04      	ldr	r3, [pc, #16]	; (800d064 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv+0x30>)
 800d054:	4804      	ldr	r0, [pc, #16]	; (800d068 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv+0x34>)
 800d056:	f001 f89d 	bl	800e194 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	2000b448 	.word	0x2000b448
 800d068:	2000b444 	.word	0x2000b444

0800d06c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	4a04      	ldr	r2, [pc, #16]	; (800d088 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	080278ec 	.word	0x080278ec

0800d08c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff ffe8 	bl	800d06c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d09c:	4a08      	ldr	r2, [pc, #32]	; (800d0c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	605a      	str	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	609a      	str	r2, [r3, #8]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	60da      	str	r2, [r3, #12]
    {
    }
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	08027890 	.word	0x08027890

0800d0c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	4639      	mov	r1, r7
 800d0d0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff ffc8 	bl	800d06c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d0dc:	4a08      	ldr	r2, [pc, #32]	; (800d100 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3308      	adds	r3, #8
 800d0ec:	463a      	mov	r2, r7
 800d0ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	08027890 	.word	0x08027890

0800d104 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4618      	mov	r0, r3
 800d110:	f7ff f980 	bl	800c414 <_ZN8touchgfx10TransitionC1Ev>
 800d114:	4a03      	ldr	r2, [pc, #12]	; (800d124 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4618      	mov	r0, r3
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	0802782c 	.word	0x0802782c

0800d128 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d128:	b590      	push	{r4, r7, lr}
 800d12a:	b08f      	sub	sp, #60	; 0x3c
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
 800d134:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	689a      	ldr	r2, [r3, #8]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3320      	adds	r3, #32
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4610      	mov	r0, r2
 800d146:	4798      	blx	r3
 800d148:	4603      	mov	r3, r0
 800d14a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800d14e:	d205      	bcs.n	800d15c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d150:	4b86      	ldr	r3, [pc, #536]	; (800d36c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d152:	4a87      	ldr	r2, [pc, #540]	; (800d370 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d154:	21a7      	movs	r1, #167	; 0xa7
 800d156:	4887      	ldr	r0, [pc, #540]	; (800d374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d158:	f018 fc92 	bl	8025a80 <__assert_func>
 800d15c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685a      	ldr	r2, [r3, #4]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3320      	adds	r3, #32
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4610      	mov	r0, r2
 800d16e:	4798      	blx	r3
 800d170:	4603      	mov	r3, r0
 800d172:	2b0f      	cmp	r3, #15
 800d174:	d805      	bhi.n	800d182 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d176:	4b80      	ldr	r3, [pc, #512]	; (800d378 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d178:	4a7d      	ldr	r2, [pc, #500]	; (800d370 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d17a:	21a8      	movs	r1, #168	; 0xa8
 800d17c:	487d      	ldr	r0, [pc, #500]	; (800d374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d17e:	f018 fc7f 	bl	8025a80 <__assert_func>
 800d182:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68da      	ldr	r2, [r3, #12]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3320      	adds	r3, #32
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4610      	mov	r0, r2
 800d194:	4798      	blx	r3
 800d196:	4603      	mov	r3, r0
 800d198:	2b0b      	cmp	r3, #11
 800d19a:	d805      	bhi.n	800d1a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d19c:	4b77      	ldr	r3, [pc, #476]	; (800d37c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d19e:	4a74      	ldr	r2, [pc, #464]	; (800d370 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d1a0:	21a9      	movs	r1, #169	; 0xa9
 800d1a2:	4874      	ldr	r0, [pc, #464]	; (800d374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d1a4:	f018 fc6c 	bl	8025a80 <__assert_func>
 800d1a8:	bf00      	nop
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d1b6:	f00c fae3 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f00c fafb 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d008      	beq.n	800d1dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d1ca:	6a3b      	ldr	r3, [r7, #32]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	330c      	adds	r3, #12
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4610      	mov	r0, r2
 800d1da:	4798      	blx	r3
    if (*currentTrans)
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d1e4:	6a3b      	ldr	r3, [r7, #32]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	4798      	blx	r3
    if (*currentScreen)
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d008      	beq.n	800d20e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3314      	adds	r3, #20
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4610      	mov	r0, r2
 800d20c:	4798      	blx	r3
    if (*currentPresenter)
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d008      	beq.n	800d228 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3304      	adds	r3, #4
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4610      	mov	r0, r2
 800d226:	4798      	blx	r3
    if (*currentScreen)
 800d228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4610      	mov	r0, r2
 800d23e:	4798      	blx	r3
    if (*currentPresenter)
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d008      	beq.n	800d25a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3308      	adds	r3, #8
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4610      	mov	r0, r2
 800d258:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	2100      	movs	r1, #0
 800d260:	4618      	mov	r0, r3
 800d262:	f001 f8c3 	bl	800e3ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d266:	4603      	mov	r3, r0
 800d268:	4619      	mov	r1, r3
 800d26a:	200c      	movs	r0, #12
 800d26c:	f7ff f82e 	bl	800c2cc <_ZnwjPv>
 800d270:	4604      	mov	r4, r0
 800d272:	2c00      	cmp	r4, #0
 800d274:	d004      	beq.n	800d280 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d276:	4620      	mov	r0, r4
 800d278:	f7ff ff44 	bl	800d104 <_ZN8touchgfx12NoTransitionC1Ev>
 800d27c:	4623      	mov	r3, r4
 800d27e:	e000      	b.n	800d282 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d280:	4623      	mov	r3, r4
 800d282:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	2100      	movs	r1, #0
 800d28a:	4618      	mov	r0, r3
 800d28c:	f001 f8c1 	bl	800e412 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d290:	4603      	mov	r3, r0
 800d292:	4619      	mov	r1, r3
 800d294:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d298:	f7ff f818 	bl	800c2cc <_ZnwjPv>
 800d29c:	4604      	mov	r4, r0
 800d29e:	2c00      	cmp	r4, #0
 800d2a0:	d004      	beq.n	800d2ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f006 fd5c 	bl	8013d60 <_ZN10screenViewC1Ev>
 800d2a8:	4623      	mov	r3, r4
 800d2aa:	e000      	b.n	800d2ae <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d2ac:	4623      	mov	r3, r4
 800d2ae:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f001 f8be 	bl	800e438 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	4619      	mov	r1, r3
 800d2c0:	2010      	movs	r0, #16
 800d2c2:	f7ff f803 	bl	800c2cc <_ZnwjPv>
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	2c00      	cmp	r4, #0
 800d2ca:	d005      	beq.n	800d2d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d2cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f006 fcee 	bl	8013cb0 <_ZN15screenPresenterC1ER10screenView>
 800d2d4:	4623      	mov	r3, r4
 800d2d6:	e000      	b.n	800d2da <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d2d8:	4623      	mov	r3, r4
 800d2da:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2e0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2e6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ec:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	e000      	b.n	800d2fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d300:	f7ff fb5a 	bl	800c9b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d306:	3304      	adds	r3, #4
 800d308:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7ff fbdf 	bl	800cace <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d314:	4618      	mov	r0, r3
 800d316:	f001 f8a2 	bl	800e45e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31c:	61fb      	str	r3, [r7, #28]
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	61bb      	str	r3, [r7, #24]
 800d322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d324:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	330c      	adds	r3, #12
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	69f8      	ldr	r0, [r7, #28]
 800d330:	4798      	blx	r3
    newPresenter->activate();
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	69b8      	ldr	r0, [r7, #24]
 800d33a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d33c:	6979      	ldr	r1, [r7, #20]
 800d33e:	69f8      	ldr	r0, [r7, #28]
 800d340:	f00d fb50 	bl	801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	3310      	adds	r3, #16
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6978      	ldr	r0, [r7, #20]
 800d34e:	4798      	blx	r3
    Application::getInstance()->draw();
 800d350:	f00c fa16 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800d354:	4602      	mov	r2, r0
 800d356:	6813      	ldr	r3, [r2, #0]
 800d358:	3330      	adds	r3, #48	; 0x30
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4610      	mov	r0, r2
 800d35e:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d362:	4618      	mov	r0, r3
 800d364:	373c      	adds	r7, #60	; 0x3c
 800d366:	46bd      	mov	sp, r7
 800d368:	bd90      	pop	{r4, r7, pc}
 800d36a:	bf00      	nop
 800d36c:	08026b8c 	.word	0x08026b8c
 800d370:	08027944 	.word	0x08027944
 800d374:	08026c1c 	.word	0x08026c1c
 800d378:	08026c60 	.word	0x08026c60
 800d37c:	08026d04 	.word	0x08026d04

0800d380 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d380:	b590      	push	{r4, r7, lr}
 800d382:	b08f      	sub	sp, #60	; 0x3c
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	689a      	ldr	r2, [r3, #8]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	3320      	adds	r3, #32
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4610      	mov	r0, r2
 800d39e:	4798      	blx	r3
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800d3a6:	d205      	bcs.n	800d3b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d3a8:	4b86      	ldr	r3, [pc, #536]	; (800d5c4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d3aa:	4a87      	ldr	r2, [pc, #540]	; (800d5c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d3ac:	21a7      	movs	r1, #167	; 0xa7
 800d3ae:	4887      	ldr	r0, [pc, #540]	; (800d5cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d3b0:	f018 fb66 	bl	8025a80 <__assert_func>
 800d3b4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	685a      	ldr	r2, [r3, #4]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3320      	adds	r3, #32
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	4798      	blx	r3
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b0f      	cmp	r3, #15
 800d3cc:	d805      	bhi.n	800d3da <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d3ce:	4b80      	ldr	r3, [pc, #512]	; (800d5d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d3d0:	4a7d      	ldr	r2, [pc, #500]	; (800d5c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d3d2:	21a8      	movs	r1, #168	; 0xa8
 800d3d4:	487d      	ldr	r0, [pc, #500]	; (800d5cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d3d6:	f018 fb53 	bl	8025a80 <__assert_func>
 800d3da:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	68da      	ldr	r2, [r3, #12]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	3320      	adds	r3, #32
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	4798      	blx	r3
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b53      	cmp	r3, #83	; 0x53
 800d3f2:	d805      	bhi.n	800d400 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d3f4:	4b77      	ldr	r3, [pc, #476]	; (800d5d4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d3f6:	4a74      	ldr	r2, [pc, #464]	; (800d5c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d3f8:	21a9      	movs	r1, #169	; 0xa9
 800d3fa:	4874      	ldr	r0, [pc, #464]	; (800d5cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d3fc:	f018 fb40 	bl	8025a80 <__assert_func>
 800d400:	bf00      	nop
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	62bb      	str	r3, [r7, #40]	; 0x28
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	627b      	str	r3, [r7, #36]	; 0x24
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d40e:	f00c f9b7 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800d412:	4603      	mov	r3, r0
 800d414:	4618      	mov	r0, r3
 800d416:	f00c f9cf 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d41a:	6a3b      	ldr	r3, [r7, #32]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d008      	beq.n	800d434 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d422:	6a3b      	ldr	r3, [r7, #32]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	330c      	adds	r3, #12
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4610      	mov	r0, r2
 800d432:	4798      	blx	r3
    if (*currentTrans)
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d007      	beq.n	800d44c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	6a3b      	ldr	r3, [r7, #32]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4610      	mov	r0, r2
 800d44a:	4798      	blx	r3
    if (*currentScreen)
 800d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d008      	beq.n	800d466 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3314      	adds	r3, #20
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4610      	mov	r0, r2
 800d464:	4798      	blx	r3
    if (*currentPresenter)
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d008      	beq.n	800d480 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	3304      	adds	r3, #4
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4610      	mov	r0, r2
 800d47e:	4798      	blx	r3
    if (*currentScreen)
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d007      	beq.n	800d498 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4610      	mov	r0, r2
 800d496:	4798      	blx	r3
    if (*currentPresenter)
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d008      	beq.n	800d4b2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f000 ffde 	bl	800e47a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	2054      	movs	r0, #84	; 0x54
 800d4c4:	f7fe ff02 	bl	800c2cc <_ZnwjPv>
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	2c00      	cmp	r4, #0
 800d4cc:	d005      	beq.n	800d4da <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d4ce:	2114      	movs	r1, #20
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f001 f829 	bl	800e528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800d4d6:	4623      	mov	r3, r4
 800d4d8:	e000      	b.n	800d4dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d4da:	4623      	mov	r3, r4
 800d4dc:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 ff94 	bl	800e412 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d4f2:	f7fe feeb 	bl	800c2cc <_ZnwjPv>
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	2c00      	cmp	r4, #0
 800d4fa:	d004      	beq.n	800d506 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f006 fc2f 	bl	8013d60 <_ZN10screenViewC1Ev>
 800d502:	4623      	mov	r3, r4
 800d504:	e000      	b.n	800d508 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d506:	4623      	mov	r3, r4
 800d508:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	2100      	movs	r1, #0
 800d510:	4618      	mov	r0, r3
 800d512:	f000 ff91 	bl	800e438 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d516:	4603      	mov	r3, r0
 800d518:	4619      	mov	r1, r3
 800d51a:	2010      	movs	r0, #16
 800d51c:	f7fe fed6 	bl	800c2cc <_ZnwjPv>
 800d520:	4604      	mov	r4, r0
 800d522:	2c00      	cmp	r4, #0
 800d524:	d005      	beq.n	800d532 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d528:	4620      	mov	r0, r4
 800d52a:	f006 fbc1 	bl	8013cb0 <_ZN15screenPresenterC1ER10screenView>
 800d52e:	4623      	mov	r3, r4
 800d530:	e000      	b.n	800d534 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d532:	4623      	mov	r3, r4
 800d534:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d53a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d540:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d546:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	3304      	adds	r3, #4
 800d552:	e000      	b.n	800d556 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d554:	2300      	movs	r3, #0
 800d556:	4619      	mov	r1, r3
 800d558:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d55a:	f7ff fa2d 	bl	800c9b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	3304      	adds	r3, #4
 800d562:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff fab2 	bl	800cace <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 ff75 	bl	800e45e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d576:	61fb      	str	r3, [r7, #28]
 800d578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57a:	61bb      	str	r3, [r7, #24]
 800d57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	330c      	adds	r3, #12
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	69f8      	ldr	r0, [r7, #28]
 800d58a:	4798      	blx	r3
    newPresenter->activate();
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	69b8      	ldr	r0, [r7, #24]
 800d594:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d596:	6979      	ldr	r1, [r7, #20]
 800d598:	69f8      	ldr	r0, [r7, #28]
 800d59a:	f00d fa23 	bl	801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	3310      	adds	r3, #16
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6978      	ldr	r0, [r7, #20]
 800d5a8:	4798      	blx	r3
    Application::getInstance()->draw();
 800d5aa:	f00c f8e9 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	6813      	ldr	r3, [r2, #0]
 800d5b2:	3330      	adds	r3, #48	; 0x30
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	4798      	blx	r3
    return newPresenter;
 800d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	373c      	adds	r7, #60	; 0x3c
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd90      	pop	{r4, r7, pc}
 800d5c4:	08026b8c 	.word	0x08026b8c
 800d5c8:	08027a48 	.word	0x08027a48
 800d5cc:	08026c1c 	.word	0x08026c1c
 800d5d0:	08026c60 	.word	0x08026c60
 800d5d4:	08026d04 	.word	0x08026d04

0800d5d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d5d8:	b590      	push	{r4, r7, lr}
 800d5da:	b08f      	sub	sp, #60	; 0x3c
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	689a      	ldr	r2, [r3, #8]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	3320      	adds	r3, #32
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	4798      	blx	r3
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800d5fe:	d205      	bcs.n	800d60c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d600:	4b86      	ldr	r3, [pc, #536]	; (800d81c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d602:	4a87      	ldr	r2, [pc, #540]	; (800d820 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d604:	21a7      	movs	r1, #167	; 0xa7
 800d606:	4887      	ldr	r0, [pc, #540]	; (800d824 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d608:	f018 fa3a 	bl	8025a80 <__assert_func>
 800d60c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3320      	adds	r3, #32
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4610      	mov	r0, r2
 800d61e:	4798      	blx	r3
 800d620:	4603      	mov	r3, r0
 800d622:	2b0f      	cmp	r3, #15
 800d624:	d805      	bhi.n	800d632 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d626:	4b80      	ldr	r3, [pc, #512]	; (800d828 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d628:	4a7d      	ldr	r2, [pc, #500]	; (800d820 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d62a:	21a8      	movs	r1, #168	; 0xa8
 800d62c:	487d      	ldr	r0, [pc, #500]	; (800d824 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d62e:	f018 fa27 	bl	8025a80 <__assert_func>
 800d632:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68da      	ldr	r2, [r3, #12]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3320      	adds	r3, #32
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4610      	mov	r0, r2
 800d644:	4798      	blx	r3
 800d646:	4603      	mov	r3, r0
 800d648:	2b4f      	cmp	r3, #79	; 0x4f
 800d64a:	d805      	bhi.n	800d658 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d64c:	4b77      	ldr	r3, [pc, #476]	; (800d82c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d64e:	4a74      	ldr	r2, [pc, #464]	; (800d820 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d650:	21a9      	movs	r1, #169	; 0xa9
 800d652:	4874      	ldr	r0, [pc, #464]	; (800d824 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d654:	f018 fa14 	bl	8025a80 <__assert_func>
 800d658:	bf00      	nop
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	627b      	str	r3, [r7, #36]	; 0x24
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d666:	f00c f88b 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800d66a:	4603      	mov	r3, r0
 800d66c:	4618      	mov	r0, r3
 800d66e:	f00c f8a3 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d008      	beq.n	800d68c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d67a:	6a3b      	ldr	r3, [r7, #32]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	330c      	adds	r3, #12
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4610      	mov	r0, r2
 800d68a:	4798      	blx	r3
    if (*currentTrans)
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d007      	beq.n	800d6a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	4798      	blx	r3
    if (*currentScreen)
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d008      	beq.n	800d6be <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3314      	adds	r3, #20
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4610      	mov	r0, r2
 800d6bc:	4798      	blx	r3
    if (*currentPresenter)
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d008      	beq.n	800d6d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	4798      	blx	r3
    if (*currentScreen)
 800d6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d007      	beq.n	800d6f0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	4798      	blx	r3
    if (*currentPresenter)
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d008      	beq.n	800d70a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3308      	adds	r3, #8
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4610      	mov	r0, r2
 800d708:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	2100      	movs	r1, #0
 800d710:	4618      	mov	r0, r3
 800d712:	f000 ff9d 	bl	800e650 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800d716:	4603      	mov	r3, r0
 800d718:	4619      	mov	r1, r3
 800d71a:	2050      	movs	r0, #80	; 0x50
 800d71c:	f7fe fdd6 	bl	800c2cc <_ZnwjPv>
 800d720:	4604      	mov	r4, r0
 800d722:	2c00      	cmp	r4, #0
 800d724:	d005      	beq.n	800d732 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d726:	2114      	movs	r1, #20
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 fffb 	bl	800e724 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800d72e:	4623      	mov	r3, r4
 800d730:	e000      	b.n	800d734 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d732:	4623      	mov	r3, r4
 800d734:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	2100      	movs	r1, #0
 800d73c:	4618      	mov	r0, r3
 800d73e:	f000 fe68 	bl	800e412 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d742:	4603      	mov	r3, r0
 800d744:	4619      	mov	r1, r3
 800d746:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d74a:	f7fe fdbf 	bl	800c2cc <_ZnwjPv>
 800d74e:	4604      	mov	r4, r0
 800d750:	2c00      	cmp	r4, #0
 800d752:	d004      	beq.n	800d75e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d754:	4620      	mov	r0, r4
 800d756:	f006 fb03 	bl	8013d60 <_ZN10screenViewC1Ev>
 800d75a:	4623      	mov	r3, r4
 800d75c:	e000      	b.n	800d760 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d75e:	4623      	mov	r3, r4
 800d760:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	2100      	movs	r1, #0
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 fe65 	bl	800e438 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d76e:	4603      	mov	r3, r0
 800d770:	4619      	mov	r1, r3
 800d772:	2010      	movs	r0, #16
 800d774:	f7fe fdaa 	bl	800c2cc <_ZnwjPv>
 800d778:	4604      	mov	r4, r0
 800d77a:	2c00      	cmp	r4, #0
 800d77c:	d005      	beq.n	800d78a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d77e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d780:	4620      	mov	r0, r4
 800d782:	f006 fa95 	bl	8013cb0 <_ZN15screenPresenterC1ER10screenView>
 800d786:	4623      	mov	r3, r4
 800d788:	e000      	b.n	800d78c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d78a:	4623      	mov	r3, r4
 800d78c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d792:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d798:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d79e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	e000      	b.n	800d7ae <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d7b2:	f7ff f901 	bl	800c9b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff f986 	bl	800cace <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f000 fe49 	bl	800e45e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ce:	61fb      	str	r3, [r7, #28]
 800d7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d2:	61bb      	str	r3, [r7, #24]
 800d7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	330c      	adds	r3, #12
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	69f8      	ldr	r0, [r7, #28]
 800d7e2:	4798      	blx	r3
    newPresenter->activate();
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	69b8      	ldr	r0, [r7, #24]
 800d7ec:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d7ee:	6979      	ldr	r1, [r7, #20]
 800d7f0:	69f8      	ldr	r0, [r7, #28]
 800d7f2:	f00d f8f7 	bl	801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3310      	adds	r3, #16
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6978      	ldr	r0, [r7, #20]
 800d800:	4798      	blx	r3
    Application::getInstance()->draw();
 800d802:	f00b ffbd 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800d806:	4602      	mov	r2, r0
 800d808:	6813      	ldr	r3, [r2, #0]
 800d80a:	3330      	adds	r3, #48	; 0x30
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4610      	mov	r0, r2
 800d810:	4798      	blx	r3
    return newPresenter;
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d814:	4618      	mov	r0, r3
 800d816:	373c      	adds	r7, #60	; 0x3c
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd90      	pop	{r4, r7, pc}
 800d81c:	08026b8c 	.word	0x08026b8c
 800d820:	08027b68 	.word	0x08027b68
 800d824:	08026c1c 	.word	0x08026c1c
 800d828:	08026c60 	.word	0x08026c60
 800d82c:	08026d04 	.word	0x08026d04

0800d830 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d830:	b590      	push	{r4, r7, lr}
 800d832:	b08f      	sub	sp, #60	; 0x3c
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
 800d83c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	689a      	ldr	r2, [r3, #8]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3320      	adds	r3, #32
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4610      	mov	r0, r2
 800d84e:	4798      	blx	r3
 800d850:	4603      	mov	r3, r0
 800d852:	f5b3 7f46 	cmp.w	r3, #792	; 0x318
 800d856:	d205      	bcs.n	800d864 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d858:	4b86      	ldr	r3, [pc, #536]	; (800da74 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d85a:	4a87      	ldr	r2, [pc, #540]	; (800da78 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d85c:	21a7      	movs	r1, #167	; 0xa7
 800d85e:	4887      	ldr	r0, [pc, #540]	; (800da7c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d860:	f018 f90e 	bl	8025a80 <__assert_func>
 800d864:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3320      	adds	r3, #32
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4610      	mov	r0, r2
 800d876:	4798      	blx	r3
 800d878:	4603      	mov	r3, r0
 800d87a:	2b0f      	cmp	r3, #15
 800d87c:	d805      	bhi.n	800d88a <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d87e:	4b80      	ldr	r3, [pc, #512]	; (800da80 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d880:	4a7d      	ldr	r2, [pc, #500]	; (800da78 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d882:	21a8      	movs	r1, #168	; 0xa8
 800d884:	487d      	ldr	r0, [pc, #500]	; (800da7c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d886:	f018 f8fb 	bl	8025a80 <__assert_func>
 800d88a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	68da      	ldr	r2, [r3, #12]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	3320      	adds	r3, #32
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4610      	mov	r0, r2
 800d89c:	4798      	blx	r3
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b0b      	cmp	r3, #11
 800d8a2:	d805      	bhi.n	800d8b0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d8a4:	4b77      	ldr	r3, [pc, #476]	; (800da84 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d8a6:	4a74      	ldr	r2, [pc, #464]	; (800da78 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d8a8:	21a9      	movs	r1, #169	; 0xa9
 800d8aa:	4874      	ldr	r0, [pc, #464]	; (800da7c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d8ac:	f018 f8e8 	bl	8025a80 <__assert_func>
 800d8b0:	bf00      	nop
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d8be:	f00b ff5f 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f00b ff77 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d8ca:	6a3b      	ldr	r3, [r7, #32]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d008      	beq.n	800d8e4 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	330c      	adds	r3, #12
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4798      	blx	r3
    if (*currentTrans)
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d007      	beq.n	800d8fc <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4610      	mov	r0, r2
 800d8fa:	4798      	blx	r3
    if (*currentScreen)
 800d8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d008      	beq.n	800d916 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	3314      	adds	r3, #20
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4610      	mov	r0, r2
 800d914:	4798      	blx	r3
    if (*currentPresenter)
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d008      	beq.n	800d930 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3304      	adds	r3, #4
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4610      	mov	r0, r2
 800d92e:	4798      	blx	r3
    if (*currentScreen)
 800d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d007      	beq.n	800d948 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4610      	mov	r0, r2
 800d946:	4798      	blx	r3
    if (*currentPresenter)
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d008      	beq.n	800d962 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3308      	adds	r3, #8
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4610      	mov	r0, r2
 800d960:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	2100      	movs	r1, #0
 800d968:	4618      	mov	r0, r3
 800d96a:	f000 fd3f 	bl	800e3ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d96e:	4603      	mov	r3, r0
 800d970:	4619      	mov	r1, r3
 800d972:	200c      	movs	r0, #12
 800d974:	f7fe fcaa 	bl	800c2cc <_ZnwjPv>
 800d978:	4604      	mov	r4, r0
 800d97a:	2c00      	cmp	r4, #0
 800d97c:	d004      	beq.n	800d988 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d97e:	4620      	mov	r0, r4
 800d980:	f7ff fbc0 	bl	800d104 <_ZN8touchgfx12NoTransitionC1Ev>
 800d984:	4623      	mov	r3, r4
 800d986:	e000      	b.n	800d98a <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d988:	4623      	mov	r3, r4
 800d98a:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	2100      	movs	r1, #0
 800d992:	4618      	mov	r0, r3
 800d994:	f000 ff4a 	bl	800e82c <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>
 800d998:	4603      	mov	r3, r0
 800d99a:	4619      	mov	r1, r3
 800d99c:	f44f 7046 	mov.w	r0, #792	; 0x318
 800d9a0:	f7fe fc94 	bl	800c2cc <_ZnwjPv>
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	2c00      	cmp	r4, #0
 800d9a8:	d004      	beq.n	800d9b4 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f005 fc24 	bl	80131f8 <_ZN9MusicViewC1Ev>
 800d9b0:	4623      	mov	r3, r4
 800d9b2:	e000      	b.n	800d9b6 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d9b4:	4623      	mov	r3, r4
 800d9b6:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	2100      	movs	r1, #0
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 ff47 	bl	800e852 <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	2010      	movs	r0, #16
 800d9ca:	f7fe fc7f 	bl	800c2cc <_ZnwjPv>
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	2c00      	cmp	r4, #0
 800d9d2:	d005      	beq.n	800d9e0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d9d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f005 fbae 	bl	8013138 <_ZN14MusicPresenterC1ER9MusicView>
 800d9dc:	4623      	mov	r3, r4
 800d9de:	e000      	b.n	800d9e2 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d9e0:	4623      	mov	r3, r4
 800d9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9e8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9ee:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9f4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	3304      	adds	r3, #4
 800da00:	e000      	b.n	800da04 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800da02:	2300      	movs	r3, #0
 800da04:	4619      	mov	r1, r3
 800da06:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800da08:	f7fe ffd6 	bl	800c9b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0e:	3304      	adds	r3, #4
 800da10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff f85b 	bl	800cace <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 ff2b 	bl	800e878 <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	61fb      	str	r3, [r7, #28]
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	61bb      	str	r3, [r7, #24]
 800da2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da2c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	330c      	adds	r3, #12
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	69f8      	ldr	r0, [r7, #28]
 800da38:	4798      	blx	r3
    newPresenter->activate();
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	69b8      	ldr	r0, [r7, #24]
 800da42:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800da44:	6979      	ldr	r1, [r7, #20]
 800da46:	69f8      	ldr	r0, [r7, #28]
 800da48:	f00c ffcc 	bl	801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	3310      	adds	r3, #16
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	6978      	ldr	r0, [r7, #20]
 800da56:	4798      	blx	r3
    Application::getInstance()->draw();
 800da58:	f00b fe92 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800da5c:	4602      	mov	r2, r0
 800da5e:	6813      	ldr	r3, [r2, #0]
 800da60:	3330      	adds	r3, #48	; 0x30
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4610      	mov	r0, r2
 800da66:	4798      	blx	r3
    return newPresenter;
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	373c      	adds	r7, #60	; 0x3c
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd90      	pop	{r4, r7, pc}
 800da72:	bf00      	nop
 800da74:	08026b8c 	.word	0x08026b8c
 800da78:	08027c88 	.word	0x08027c88
 800da7c:	08026c1c 	.word	0x08026c1c
 800da80:	08026c60 	.word	0x08026c60
 800da84:	08026d04 	.word	0x08026d04

0800da88 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800da88:	b590      	push	{r4, r7, lr}
 800da8a:	b08f      	sub	sp, #60	; 0x3c
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
 800da94:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	689a      	ldr	r2, [r3, #8]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3320      	adds	r3, #32
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4610      	mov	r0, r2
 800daa6:	4798      	blx	r3
 800daa8:	4603      	mov	r3, r0
 800daaa:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800daae:	d205      	bcs.n	800dabc <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800dab0:	4b86      	ldr	r3, [pc, #536]	; (800dccc <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800dab2:	4a87      	ldr	r2, [pc, #540]	; (800dcd0 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800dab4:	21a7      	movs	r1, #167	; 0xa7
 800dab6:	4887      	ldr	r0, [pc, #540]	; (800dcd4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dab8:	f017 ffe2 	bl	8025a80 <__assert_func>
 800dabc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	3320      	adds	r3, #32
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4610      	mov	r0, r2
 800dace:	4798      	blx	r3
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b0f      	cmp	r3, #15
 800dad4:	d805      	bhi.n	800dae2 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800dad6:	4b80      	ldr	r3, [pc, #512]	; (800dcd8 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dad8:	4a7d      	ldr	r2, [pc, #500]	; (800dcd0 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800dada:	21a8      	movs	r1, #168	; 0xa8
 800dadc:	487d      	ldr	r0, [pc, #500]	; (800dcd4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dade:	f017 ffcf 	bl	8025a80 <__assert_func>
 800dae2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	68da      	ldr	r2, [r3, #12]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	3320      	adds	r3, #32
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4610      	mov	r0, r2
 800daf4:	4798      	blx	r3
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b0b      	cmp	r3, #11
 800dafa:	d805      	bhi.n	800db08 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800dafc:	4b77      	ldr	r3, [pc, #476]	; (800dcdc <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800dafe:	4a74      	ldr	r2, [pc, #464]	; (800dcd0 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800db00:	21a9      	movs	r1, #169	; 0xa9
 800db02:	4874      	ldr	r0, [pc, #464]	; (800dcd4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800db04:	f017 ffbc 	bl	8025a80 <__assert_func>
 800db08:	bf00      	nop
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	627b      	str	r3, [r7, #36]	; 0x24
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800db16:	f00b fe33 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800db1a:	4603      	mov	r3, r0
 800db1c:	4618      	mov	r0, r3
 800db1e:	f00b fe4b 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d008      	beq.n	800db3c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	330c      	adds	r3, #12
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4610      	mov	r0, r2
 800db3a:	4798      	blx	r3
    if (*currentTrans)
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d007      	beq.n	800db54 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	6a3b      	ldr	r3, [r7, #32]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4610      	mov	r0, r2
 800db52:	4798      	blx	r3
    if (*currentScreen)
 800db54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d008      	beq.n	800db6e <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	3314      	adds	r3, #20
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4610      	mov	r0, r2
 800db6c:	4798      	blx	r3
    if (*currentPresenter)
 800db6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d008      	beq.n	800db88 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800db76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	3304      	adds	r3, #4
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4610      	mov	r0, r2
 800db86:	4798      	blx	r3
    if (*currentScreen)
 800db88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d007      	beq.n	800dba0 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4610      	mov	r0, r2
 800db9e:	4798      	blx	r3
    if (*currentPresenter)
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d008      	beq.n	800dbba <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3308      	adds	r3, #8
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4610      	mov	r0, r2
 800dbb8:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f000 fc13 	bl	800e3ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	4619      	mov	r1, r3
 800dbca:	200c      	movs	r0, #12
 800dbcc:	f7fe fb7e 	bl	800c2cc <_ZnwjPv>
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	2c00      	cmp	r4, #0
 800dbd4:	d004      	beq.n	800dbe0 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	f7ff fa94 	bl	800d104 <_ZN8touchgfx12NoTransitionC1Ev>
 800dbdc:	4623      	mov	r3, r4
 800dbde:	e000      	b.n	800dbe2 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800dbe0:	4623      	mov	r3, r4
 800dbe2:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	2100      	movs	r1, #0
 800dbea:	4618      	mov	r0, r3
 800dbec:	f000 fe52 	bl	800e894 <_ZN8touchgfx17AbstractPartition2atI12gameoverViewEERT_t>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 800dbf8:	f7fe fb68 	bl	800c2cc <_ZnwjPv>
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	2c00      	cmp	r4, #0
 800dc00:	d004      	beq.n	800dc0c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800dc02:	4620      	mov	r0, r4
 800dc04:	f005 fa0c 	bl	8013020 <_ZN12gameoverViewC1Ev>
 800dc08:	4623      	mov	r3, r4
 800dc0a:	e000      	b.n	800dc0e <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800dc0c:	4623      	mov	r3, r4
 800dc0e:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	2100      	movs	r1, #0
 800dc16:	4618      	mov	r0, r3
 800dc18:	f000 fe4f 	bl	800e8ba <_ZN8touchgfx17AbstractPartition2atI17gameoverPresenterEERT_t>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	4619      	mov	r1, r3
 800dc20:	2010      	movs	r0, #16
 800dc22:	f7fe fb53 	bl	800c2cc <_ZnwjPv>
 800dc26:	4604      	mov	r4, r0
 800dc28:	2c00      	cmp	r4, #0
 800dc2a:	d005      	beq.n	800dc38 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800dc2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f005 f99e 	bl	8012f70 <_ZN17gameoverPresenterC1ER12gameoverView>
 800dc34:	4623      	mov	r3, r4
 800dc36:	e000      	b.n	800dc3a <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800dc38:	4623      	mov	r3, r4
 800dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc40:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc46:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc4c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800dc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc56:	3304      	adds	r3, #4
 800dc58:	e000      	b.n	800dc5c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dc60:	f7fe feaa 	bl	800c9b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc66:	3304      	adds	r3, #4
 800dc68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe ff2f 	bl	800cace <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc74:	4618      	mov	r0, r3
 800dc76:	f000 fe33 	bl	800e8e0 <_ZN8touchgfx4ViewI17gameoverPresenterE4bindERS1_>
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	61fb      	str	r3, [r7, #28]
 800dc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc80:	61bb      	str	r3, [r7, #24]
 800dc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc84:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	330c      	adds	r3, #12
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	69f8      	ldr	r0, [r7, #28]
 800dc90:	4798      	blx	r3
    newPresenter->activate();
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	69b8      	ldr	r0, [r7, #24]
 800dc9a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800dc9c:	6979      	ldr	r1, [r7, #20]
 800dc9e:	69f8      	ldr	r0, [r7, #28]
 800dca0:	f00c fea0 	bl	801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	3310      	adds	r3, #16
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6978      	ldr	r0, [r7, #20]
 800dcae:	4798      	blx	r3
    Application::getInstance()->draw();
 800dcb0:	f00b fd66 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	6813      	ldr	r3, [r2, #0]
 800dcb8:	3330      	adds	r3, #48	; 0x30
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4798      	blx	r3
    return newPresenter;
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	373c      	adds	r7, #60	; 0x3c
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd90      	pop	{r4, r7, pc}
 800dcca:	bf00      	nop
 800dccc:	08026b8c 	.word	0x08026b8c
 800dcd0:	08027d88 	.word	0x08027d88
 800dcd4:	08026c1c 	.word	0x08026c1c
 800dcd8:	08026c60 	.word	0x08026c60
 800dcdc:	08026d04 	.word	0x08026d04

0800dce0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b08f      	sub	sp, #60	; 0x3c
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	689a      	ldr	r2, [r3, #8]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	689b      	ldr	r3, [r3, #8]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	3320      	adds	r3, #32
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	4798      	blx	r3
 800dd00:	4602      	mov	r2, r0
 800dd02:	f641 634f 	movw	r3, #7759	; 0x1e4f
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d805      	bhi.n	800dd16 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800dd0a:	4b87      	ldr	r3, [pc, #540]	; (800df28 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800dd0c:	4a87      	ldr	r2, [pc, #540]	; (800df2c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dd0e:	21a7      	movs	r1, #167	; 0xa7
 800dd10:	4887      	ldr	r0, [pc, #540]	; (800df30 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dd12:	f017 feb5 	bl	8025a80 <__assert_func>
 800dd16:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	3320      	adds	r3, #32
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4610      	mov	r0, r2
 800dd28:	4798      	blx	r3
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b0f      	cmp	r3, #15
 800dd2e:	d805      	bhi.n	800dd3c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800dd30:	4b80      	ldr	r3, [pc, #512]	; (800df34 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800dd32:	4a7e      	ldr	r2, [pc, #504]	; (800df2c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dd34:	21a8      	movs	r1, #168	; 0xa8
 800dd36:	487e      	ldr	r0, [pc, #504]	; (800df30 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dd38:	f017 fea2 	bl	8025a80 <__assert_func>
 800dd3c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	68da      	ldr	r2, [r3, #12]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	3320      	adds	r3, #32
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4798      	blx	r3
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b4f      	cmp	r3, #79	; 0x4f
 800dd54:	d805      	bhi.n	800dd62 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800dd56:	4b78      	ldr	r3, [pc, #480]	; (800df38 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 800dd58:	4a74      	ldr	r2, [pc, #464]	; (800df2c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dd5a:	21a9      	movs	r1, #169	; 0xa9
 800dd5c:	4874      	ldr	r0, [pc, #464]	; (800df30 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dd5e:	f017 fe8f 	bl	8025a80 <__assert_func>
 800dd62:	bf00      	nop
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dd70:	f00b fd06 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800dd74:	4603      	mov	r3, r0
 800dd76:	4618      	mov	r0, r3
 800dd78:	f00b fd1e 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800dd7c:	6a3b      	ldr	r3, [r7, #32]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d008      	beq.n	800dd96 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	6a3b      	ldr	r3, [r7, #32]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	330c      	adds	r3, #12
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4610      	mov	r0, r2
 800dd94:	4798      	blx	r3
    if (*currentTrans)
 800dd96:	6a3b      	ldr	r3, [r7, #32]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d007      	beq.n	800ddae <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4610      	mov	r0, r2
 800ddac:	4798      	blx	r3
    if (*currentScreen)
 800ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d008      	beq.n	800ddc8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	3314      	adds	r3, #20
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	4798      	blx	r3
    if (*currentPresenter)
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d008      	beq.n	800dde2 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3304      	adds	r3, #4
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4610      	mov	r0, r2
 800dde0:	4798      	blx	r3
    if (*currentScreen)
 800dde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d007      	beq.n	800ddfa <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800ddea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	4798      	blx	r3
    if (*currentPresenter)
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d008      	beq.n	800de14 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	3308      	adds	r3, #8
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4610      	mov	r0, r2
 800de12:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	2100      	movs	r1, #0
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 fc18 	bl	800e650 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800de20:	4603      	mov	r3, r0
 800de22:	4619      	mov	r1, r3
 800de24:	2050      	movs	r0, #80	; 0x50
 800de26:	f7fe fa51 	bl	800c2cc <_ZnwjPv>
 800de2a:	4604      	mov	r4, r0
 800de2c:	2c00      	cmp	r4, #0
 800de2e:	d005      	beq.n	800de3c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800de30:	2114      	movs	r1, #20
 800de32:	4620      	mov	r0, r4
 800de34:	f000 fc76 	bl	800e724 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800de38:	4623      	mov	r3, r4
 800de3a:	e000      	b.n	800de3e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 800de3c:	4623      	mov	r3, r4
 800de3e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	2100      	movs	r1, #0
 800de46:	4618      	mov	r0, r3
 800de48:	f000 fd58 	bl	800e8fc <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 800de4c:	4603      	mov	r3, r0
 800de4e:	4619      	mov	r1, r3
 800de50:	f641 6050 	movw	r0, #7760	; 0x1e50
 800de54:	f7fe fa3a 	bl	800c2cc <_ZnwjPv>
 800de58:	4604      	mov	r4, r0
 800de5a:	2c00      	cmp	r4, #0
 800de5c:	d004      	beq.n	800de68 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800de5e:	4620      	mov	r0, r4
 800de60:	f005 fb98 	bl	8013594 <_ZN8PongViewC1Ev>
 800de64:	4623      	mov	r3, r4
 800de66:	e000      	b.n	800de6a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 800de68:	4623      	mov	r3, r4
 800de6a:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	2100      	movs	r1, #0
 800de72:	4618      	mov	r0, r3
 800de74:	f000 fd55 	bl	800e922 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 800de78:	4603      	mov	r3, r0
 800de7a:	4619      	mov	r1, r3
 800de7c:	2010      	movs	r0, #16
 800de7e:	f7fe fa25 	bl	800c2cc <_ZnwjPv>
 800de82:	4604      	mov	r4, r0
 800de84:	2c00      	cmp	r4, #0
 800de86:	d005      	beq.n	800de94 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800de88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de8a:	4620      	mov	r0, r4
 800de8c:	f005 fb10 	bl	80134b0 <_ZN13PongPresenterC1ER8PongView>
 800de90:	4623      	mov	r3, r4
 800de92:	e000      	b.n	800de96 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800de94:	4623      	mov	r3, r4
 800de96:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de9c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dea2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dea8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	2b00      	cmp	r3, #0
 800deae:	d002      	beq.n	800deb6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	3304      	adds	r3, #4
 800deb4:	e000      	b.n	800deb8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 800deb6:	2300      	movs	r3, #0
 800deb8:	4619      	mov	r1, r3
 800deba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800debc:	f7fe fd7c 	bl	800c9b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec2:	3304      	adds	r3, #4
 800dec4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fe fe01 	bl	800cace <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800decc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 fd39 	bl	800e948 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 800ded6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded8:	61fb      	str	r3, [r7, #28]
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	61bb      	str	r3, [r7, #24]
 800dede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	330c      	adds	r3, #12
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	69f8      	ldr	r0, [r7, #28]
 800deec:	4798      	blx	r3
    newPresenter->activate();
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	69b8      	ldr	r0, [r7, #24]
 800def6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800def8:	6979      	ldr	r1, [r7, #20]
 800defa:	69f8      	ldr	r0, [r7, #28]
 800defc:	f00c fd72 	bl	801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3310      	adds	r3, #16
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6978      	ldr	r0, [r7, #20]
 800df0a:	4798      	blx	r3
    Application::getInstance()->draw();
 800df0c:	f00b fc38 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800df10:	4602      	mov	r2, r0
 800df12:	6813      	ldr	r3, [r2, #0]
 800df14:	3330      	adds	r3, #48	; 0x30
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4610      	mov	r0, r2
 800df1a:	4798      	blx	r3
    return newPresenter;
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800df1e:	4618      	mov	r0, r3
 800df20:	373c      	adds	r7, #60	; 0x3c
 800df22:	46bd      	mov	sp, r7
 800df24:	bd90      	pop	{r4, r7, pc}
 800df26:	bf00      	nop
 800df28:	08026b8c 	.word	0x08026b8c
 800df2c:	08027e90 	.word	0x08027e90
 800df30:	08026c1c 	.word	0x08026c1c
 800df34:	08026c60 	.word	0x08026c60
 800df38:	08026d04 	.word	0x08026d04

0800df3c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800df3c:	b590      	push	{r4, r7, lr}
 800df3e:	b08f      	sub	sp, #60	; 0x3c
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	689a      	ldr	r2, [r3, #8]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	3320      	adds	r3, #32
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4610      	mov	r0, r2
 800df5a:	4798      	blx	r3
 800df5c:	4602      	mov	r2, r0
 800df5e:	f641 634f 	movw	r3, #7759	; 0x1e4f
 800df62:	429a      	cmp	r2, r3
 800df64:	d805      	bhi.n	800df72 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800df66:	4b86      	ldr	r3, [pc, #536]	; (800e180 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800df68:	4a86      	ldr	r2, [pc, #536]	; (800e184 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800df6a:	21a7      	movs	r1, #167	; 0xa7
 800df6c:	4886      	ldr	r0, [pc, #536]	; (800e188 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800df6e:	f017 fd87 	bl	8025a80 <__assert_func>
 800df72:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	3320      	adds	r3, #32
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4610      	mov	r0, r2
 800df84:	4798      	blx	r3
 800df86:	4603      	mov	r3, r0
 800df88:	2b0f      	cmp	r3, #15
 800df8a:	d805      	bhi.n	800df98 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800df8c:	4b7f      	ldr	r3, [pc, #508]	; (800e18c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800df8e:	4a7d      	ldr	r2, [pc, #500]	; (800e184 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800df90:	21a8      	movs	r1, #168	; 0xa8
 800df92:	487d      	ldr	r0, [pc, #500]	; (800e188 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800df94:	f017 fd74 	bl	8025a80 <__assert_func>
 800df98:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68da      	ldr	r2, [r3, #12]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3320      	adds	r3, #32
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	4798      	blx	r3
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b0b      	cmp	r3, #11
 800dfb0:	d805      	bhi.n	800dfbe <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800dfb2:	4b77      	ldr	r3, [pc, #476]	; (800e190 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800dfb4:	4a73      	ldr	r2, [pc, #460]	; (800e184 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800dfb6:	21a9      	movs	r1, #169	; 0xa9
 800dfb8:	4873      	ldr	r0, [pc, #460]	; (800e188 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dfba:	f017 fd61 	bl	8025a80 <__assert_func>
 800dfbe:	bf00      	nop
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	627b      	str	r3, [r7, #36]	; 0x24
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dfcc:	f00b fbd8 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f00b fbf0 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d008      	beq.n	800dff2 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800dfe0:	6a3b      	ldr	r3, [r7, #32]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	6a3b      	ldr	r3, [r7, #32]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	330c      	adds	r3, #12
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4610      	mov	r0, r2
 800dff0:	4798      	blx	r3
    if (*currentTrans)
 800dff2:	6a3b      	ldr	r3, [r7, #32]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d007      	beq.n	800e00a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	6a3b      	ldr	r3, [r7, #32]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4610      	mov	r0, r2
 800e008:	4798      	blx	r3
    if (*currentScreen)
 800e00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d008      	beq.n	800e024 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800e012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3314      	adds	r3, #20
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4610      	mov	r0, r2
 800e022:	4798      	blx	r3
    if (*currentPresenter)
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d008      	beq.n	800e03e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3304      	adds	r3, #4
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4610      	mov	r0, r2
 800e03c:	4798      	blx	r3
    if (*currentScreen)
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d007      	beq.n	800e056 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800e046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4610      	mov	r0, r2
 800e054:	4798      	blx	r3
    if (*currentPresenter)
 800e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d008      	beq.n	800e070 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800e05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3308      	adds	r3, #8
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4610      	mov	r0, r2
 800e06e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	2100      	movs	r1, #0
 800e076:	4618      	mov	r0, r3
 800e078:	f000 f9b8 	bl	800e3ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e07c:	4603      	mov	r3, r0
 800e07e:	4619      	mov	r1, r3
 800e080:	200c      	movs	r0, #12
 800e082:	f7fe f923 	bl	800c2cc <_ZnwjPv>
 800e086:	4604      	mov	r4, r0
 800e088:	2c00      	cmp	r4, #0
 800e08a:	d004      	beq.n	800e096 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800e08c:	4620      	mov	r0, r4
 800e08e:	f7ff f839 	bl	800d104 <_ZN8touchgfx12NoTransitionC1Ev>
 800e092:	4623      	mov	r3, r4
 800e094:	e000      	b.n	800e098 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800e096:	4623      	mov	r3, r4
 800e098:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	2100      	movs	r1, #0
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f000 fc2b 	bl	800e8fc <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	f641 6050 	movw	r0, #7760	; 0x1e50
 800e0ae:	f7fe f90d 	bl	800c2cc <_ZnwjPv>
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	2c00      	cmp	r4, #0
 800e0b6:	d004      	beq.n	800e0c2 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f005 fa6b 	bl	8013594 <_ZN8PongViewC1Ev>
 800e0be:	4623      	mov	r3, r4
 800e0c0:	e000      	b.n	800e0c4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800e0c2:	4623      	mov	r3, r4
 800e0c4:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 fc28 	bl	800e922 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	2010      	movs	r0, #16
 800e0d8:	f7fe f8f8 	bl	800c2cc <_ZnwjPv>
 800e0dc:	4604      	mov	r4, r0
 800e0de:	2c00      	cmp	r4, #0
 800e0e0:	d005      	beq.n	800e0ee <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e0e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f005 f9e3 	bl	80134b0 <_ZN13PongPresenterC1ER8PongView>
 800e0ea:	4623      	mov	r3, r4
 800e0ec:	e000      	b.n	800e0f0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e0ee:	4623      	mov	r3, r4
 800e0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0f6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0fc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e102:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800e10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10c:	3304      	adds	r3, #4
 800e10e:	e000      	b.n	800e112 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800e110:	2300      	movs	r3, #0
 800e112:	4619      	mov	r1, r3
 800e114:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e116:	f7fe fc4f 	bl	800c9b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11c:	3304      	adds	r3, #4
 800e11e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe fcd4 	bl	800cace <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 fc0c 	bl	800e948 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 800e130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e132:	61fb      	str	r3, [r7, #28]
 800e134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e136:	61bb      	str	r3, [r7, #24]
 800e138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e13a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	330c      	adds	r3, #12
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	69f8      	ldr	r0, [r7, #28]
 800e146:	4798      	blx	r3
    newPresenter->activate();
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	69b8      	ldr	r0, [r7, #24]
 800e150:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e152:	6979      	ldr	r1, [r7, #20]
 800e154:	69f8      	ldr	r0, [r7, #28]
 800e156:	f00c fc45 	bl	801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	3310      	adds	r3, #16
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6978      	ldr	r0, [r7, #20]
 800e164:	4798      	blx	r3
    Application::getInstance()->draw();
 800e166:	f00b fb0b 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800e16a:	4602      	mov	r2, r0
 800e16c:	6813      	ldr	r3, [r2, #0]
 800e16e:	3330      	adds	r3, #48	; 0x30
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4610      	mov	r0, r2
 800e174:	4798      	blx	r3
    return newPresenter;
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e178:	4618      	mov	r0, r3
 800e17a:	373c      	adds	r7, #60	; 0x3c
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd90      	pop	{r4, r7, pc}
 800e180:	08026b8c 	.word	0x08026b8c
 800e184:	08027fac 	.word	0x08027fac
 800e188:	08026c1c 	.word	0x08026c1c
 800e18c:	08026c60 	.word	0x08026c60
 800e190:	08026d04 	.word	0x08026d04

0800e194 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e194:	b590      	push	{r4, r7, lr}
 800e196:	b08f      	sub	sp, #60	; 0x3c
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
 800e1a0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	689a      	ldr	r2, [r3, #8]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	689b      	ldr	r3, [r3, #8]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3320      	adds	r3, #32
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	4798      	blx	r3
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 800e1ba:	d205      	bcs.n	800e1c8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800e1bc:	4b86      	ldr	r3, [pc, #536]	; (800e3d8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800e1be:	4a87      	ldr	r2, [pc, #540]	; (800e3dc <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e1c0:	21a7      	movs	r1, #167	; 0xa7
 800e1c2:	4887      	ldr	r0, [pc, #540]	; (800e3e0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e1c4:	f017 fc5c 	bl	8025a80 <__assert_func>
 800e1c8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685a      	ldr	r2, [r3, #4]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	3320      	adds	r3, #32
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4610      	mov	r0, r2
 800e1da:	4798      	blx	r3
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b0f      	cmp	r3, #15
 800e1e0:	d805      	bhi.n	800e1ee <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800e1e2:	4b80      	ldr	r3, [pc, #512]	; (800e3e4 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800e1e4:	4a7d      	ldr	r2, [pc, #500]	; (800e3dc <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e1e6:	21a8      	movs	r1, #168	; 0xa8
 800e1e8:	487d      	ldr	r0, [pc, #500]	; (800e3e0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e1ea:	f017 fc49 	bl	8025a80 <__assert_func>
 800e1ee:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	68da      	ldr	r2, [r3, #12]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3320      	adds	r3, #32
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4610      	mov	r0, r2
 800e200:	4798      	blx	r3
 800e202:	4603      	mov	r3, r0
 800e204:	2b4f      	cmp	r3, #79	; 0x4f
 800e206:	d805      	bhi.n	800e214 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800e208:	4b77      	ldr	r3, [pc, #476]	; (800e3e8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800e20a:	4a74      	ldr	r2, [pc, #464]	; (800e3dc <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e20c:	21a9      	movs	r1, #169	; 0xa9
 800e20e:	4874      	ldr	r0, [pc, #464]	; (800e3e0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e210:	f017 fc36 	bl	8025a80 <__assert_func>
 800e214:	bf00      	nop
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	62bb      	str	r3, [r7, #40]	; 0x28
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	627b      	str	r3, [r7, #36]	; 0x24
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e222:	f00b faad 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800e226:	4603      	mov	r3, r0
 800e228:	4618      	mov	r0, r3
 800e22a:	f00b fac5 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d008      	beq.n	800e248 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	330c      	adds	r3, #12
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4610      	mov	r0, r2
 800e246:	4798      	blx	r3
    if (*currentTrans)
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d007      	beq.n	800e260 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800e250:	6a3b      	ldr	r3, [r7, #32]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4610      	mov	r0, r2
 800e25e:	4798      	blx	r3
    if (*currentScreen)
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d008      	beq.n	800e27a <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	3314      	adds	r3, #20
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4610      	mov	r0, r2
 800e278:	4798      	blx	r3
    if (*currentPresenter)
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d008      	beq.n	800e294 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800e282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3304      	adds	r3, #4
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4610      	mov	r0, r2
 800e292:	4798      	blx	r3
    if (*currentScreen)
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d007      	beq.n	800e2ac <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800e29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	4798      	blx	r3
    if (*currentPresenter)
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d008      	beq.n	800e2c6 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	3308      	adds	r3, #8
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f000 f9bf 	bl	800e650 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	2050      	movs	r0, #80	; 0x50
 800e2d8:	f7fd fff8 	bl	800c2cc <_ZnwjPv>
 800e2dc:	4604      	mov	r4, r0
 800e2de:	2c00      	cmp	r4, #0
 800e2e0:	d005      	beq.n	800e2ee <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800e2e2:	2114      	movs	r1, #20
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 fa1d 	bl	800e724 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800e2ea:	4623      	mov	r3, r4
 800e2ec:	e000      	b.n	800e2f0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800e2ee:	4623      	mov	r3, r4
 800e2f0:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f000 fb33 	bl	800e964 <_ZN8touchgfx17AbstractPartition2atI11galleryViewEERT_t>
 800e2fe:	4603      	mov	r3, r0
 800e300:	4619      	mov	r1, r3
 800e302:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800e306:	f7fd ffe1 	bl	800c2cc <_ZnwjPv>
 800e30a:	4604      	mov	r4, r0
 800e30c:	2c00      	cmp	r4, #0
 800e30e:	d004      	beq.n	800e31a <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800e310:	4620      	mov	r0, r4
 800e312:	f004 fdcf 	bl	8012eb4 <_ZN11galleryViewC1Ev>
 800e316:	4623      	mov	r3, r4
 800e318:	e000      	b.n	800e31c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800e31a:	4623      	mov	r3, r4
 800e31c:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	2100      	movs	r1, #0
 800e324:	4618      	mov	r0, r3
 800e326:	f000 fb30 	bl	800e98a <_ZN8touchgfx17AbstractPartition2atI16galleryPresenterEERT_t>
 800e32a:	4603      	mov	r3, r0
 800e32c:	4619      	mov	r1, r3
 800e32e:	2010      	movs	r0, #16
 800e330:	f7fd ffcc 	bl	800c2cc <_ZnwjPv>
 800e334:	4604      	mov	r4, r0
 800e336:	2c00      	cmp	r4, #0
 800e338:	d005      	beq.n	800e346 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e33a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e33c:	4620      	mov	r0, r4
 800e33e:	f004 fd61 	bl	8012e04 <_ZN16galleryPresenterC1ER11galleryView>
 800e342:	4623      	mov	r3, r4
 800e344:	e000      	b.n	800e348 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e346:	4623      	mov	r3, r4
 800e348:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e34e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e354:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e35a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d002      	beq.n	800e368 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800e362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e364:	3304      	adds	r3, #4
 800e366:	e000      	b.n	800e36a <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800e368:	2300      	movs	r3, #0
 800e36a:	4619      	mov	r1, r3
 800e36c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e36e:	f7fe fb23 	bl	800c9b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	3304      	adds	r3, #4
 800e376:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fe fba8 	bl	800cace <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e382:	4618      	mov	r0, r3
 800e384:	f000 fb14 	bl	800e9b0 <_ZN8touchgfx4ViewI16galleryPresenterE4bindERS1_>
 800e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38a:	61fb      	str	r3, [r7, #28]
 800e38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38e:	61bb      	str	r3, [r7, #24]
 800e390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e392:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	330c      	adds	r3, #12
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	69f8      	ldr	r0, [r7, #28]
 800e39e:	4798      	blx	r3
    newPresenter->activate();
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	69b8      	ldr	r0, [r7, #24]
 800e3a8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e3aa:	6979      	ldr	r1, [r7, #20]
 800e3ac:	69f8      	ldr	r0, [r7, #28]
 800e3ae:	f00c fb19 	bl	801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	3310      	adds	r3, #16
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6978      	ldr	r0, [r7, #20]
 800e3bc:	4798      	blx	r3
    Application::getInstance()->draw();
 800e3be:	f00b f9df 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	6813      	ldr	r3, [r2, #0]
 800e3c6:	3330      	adds	r3, #48	; 0x30
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4610      	mov	r0, r2
 800e3cc:	4798      	blx	r3
    return newPresenter;
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	373c      	adds	r7, #60	; 0x3c
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd90      	pop	{r4, r7, pc}
 800e3d8:	08026b8c 	.word	0x08026b8c
 800e3dc:	080280ac 	.word	0x080280ac
 800e3e0:	08026c1c 	.word	0x08026c1c
 800e3e4:	08026c60 	.word	0x08026c60
 800e3e8:	08026d04 	.word	0x08026d04

0800e3ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3324      	adds	r3, #36	; 0x24
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	887a      	ldrh	r2, [r7, #2]
 800e402:	4611      	mov	r1, r2
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	4798      	blx	r3
 800e408:	4603      	mov	r3, r0
    }
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800e412:	b580      	push	{r7, lr}
 800e414:	b082      	sub	sp, #8
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	460b      	mov	r3, r1
 800e41c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3324      	adds	r3, #36	; 0x24
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	887a      	ldrh	r2, [r7, #2]
 800e428:	4611      	mov	r1, r2
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	4798      	blx	r3
 800e42e:	4603      	mov	r3, r0
    }
 800e430:	4618      	mov	r0, r3
 800e432:	3708      	adds	r7, #8
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	460b      	mov	r3, r1
 800e442:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3324      	adds	r3, #36	; 0x24
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	887a      	ldrh	r2, [r7, #2]
 800e44e:	4611      	mov	r1, r2
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	4798      	blx	r3
 800e454:	4603      	mov	r3, r0
    }
 800e456:	4618      	mov	r0, r3
 800e458:	3708      	adds	r7, #8
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800e45e:	b480      	push	{r7}
 800e460:	b083      	sub	sp, #12
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	683a      	ldr	r2, [r7, #0]
 800e46c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e46e:	bf00      	nop
 800e470:	370c      	adds	r7, #12
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr

0800e47a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b082      	sub	sp, #8
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
 800e482:	460b      	mov	r3, r1
 800e484:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3324      	adds	r3, #36	; 0x24
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	887a      	ldrh	r2, [r7, #2]
 800e490:	4611      	mov	r1, r2
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	4798      	blx	r3
 800e496:	4603      	mov	r3, r0
    }
 800e498:	4618      	mov	r0, r3
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	4a05      	ldr	r2, [pc, #20]	; (800e4c0 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fe fb2d 	bl	800cb10 <_ZN8touchgfx6WidgetD1Ev>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	08029ea0 	.word	0x08029ea0

0800e4c4 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff ffe7 	bl	800e4a0 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800e4d2:	212c      	movs	r1, #44	; 0x2c
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f017 faa7 	bl	8025a28 <_ZdlPvj>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	4a05      	ldr	r2, [pc, #20]	; (800e504 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f000 fad3 	bl	800eaa0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	080276ec 	.word	0x080276ec

0800e508 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7ff ffe7 	bl	800e4e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800e516:	2110      	movs	r1, #16
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f017 fa85 	bl	8025a28 <_ZdlPvj>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4618      	mov	r0, r3
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800e528:	b590      	push	{r4, r7, lr}
 800e52a:	b087      	sub	sp, #28
 800e52c:	af02      	add	r7, sp, #8
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4618      	mov	r0, r3
 800e538:	f7fd ff6c 	bl	800c414 <_ZN8touchgfx10TransitionC1Ev>
 800e53c:	4a3f      	ldr	r2, [pc, #252]	; (800e63c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	601a      	str	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	330c      	adds	r3, #12
 800e546:	4618      	mov	r0, r3
 800e548:	f009 fa78 	bl	8017a3c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f103 020c 	add.w	r2, r3, #12
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	639a      	str	r2, [r3, #56]	; 0x38
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800e55c:	4a38      	ldr	r2, [pc, #224]	; (800e640 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800e55e:	f107 0308 	add.w	r3, r7, #8
 800e562:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e566:	e883 0003 	stmia.w	r3, {r0, r1}
 800e56a:	f107 0308 	add.w	r3, r7, #8
 800e56e:	cb0c      	ldmia	r3, {r2, r3}
 800e570:	6879      	ldr	r1, [r7, #4]
 800e572:	4620      	mov	r0, r4
 800e574:	f000 fa74 	bl	800ea60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2202      	movs	r2, #2
 800e57c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	78fa      	ldrb	r2, [r7, #3]
 800e584:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2200      	movs	r2, #0
 800e58c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800e598:	4b2a      	ldr	r3, [pc, #168]	; (800e644 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d047      	beq.n	800e630 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f103 000c 	add.w	r0, r3, #12
 800e5a6:	4b28      	ldr	r3, [pc, #160]	; (800e648 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	b21a      	sxth	r2, r3
 800e5ac:	4b27      	ldr	r3, [pc, #156]	; (800e64c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e5ae:	881b      	ldrh	r3, [r3, #0]
 800e5b0:	b21b      	sxth	r3, r3
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	f7fe f819 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f009 f9bd 	bl	8017942 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d82a      	bhi.n	800e628 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800e5d2:	a201      	add	r2, pc, #4	; (adr r2, 800e5d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800e5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d8:	0800e609 	.word	0x0800e609
 800e5dc:	0800e617 	.word	0x0800e617
 800e5e0:	0800e5e9 	.word	0x0800e5e9
 800e5e4:	0800e5fb 	.word	0x0800e5fb
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800e5e8:	4b17      	ldr	r3, [pc, #92]	; (800e648 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e5ea:	881b      	ldrh	r3, [r3, #0]
 800e5ec:	425b      	negs	r3, r3
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	b21a      	sxth	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e5f8:	e01a      	b.n	800e630 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800e5fa:	4b13      	ldr	r3, [pc, #76]	; (800e648 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	b21a      	sxth	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e606:	e013      	b.n	800e630 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800e608:	4b10      	ldr	r3, [pc, #64]	; (800e64c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	b21a      	sxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e614:	e00c      	b.n	800e630 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800e616:	4b0d      	ldr	r3, [pc, #52]	; (800e64c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e618:	881b      	ldrh	r3, [r3, #0]
 800e61a:	425b      	negs	r3, r3
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	b21a      	sxth	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e626:	e003      	b.n	800e630 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2201      	movs	r2, #1
 800e62c:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800e62e:	bf00      	nop
            }
        }
    }
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4618      	mov	r0, r3
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	bd90      	pop	{r4, r7, pc}
 800e63a:	bf00      	nop
 800e63c:	080276c4 	.word	0x080276c4
 800e640:	08026da8 	.word	0x08026da8
 800e644:	2000b3c7 	.word	0x2000b3c7
 800e648:	2000b3bc 	.word	0x2000b3bc
 800e64c:	2000b3be 	.word	0x2000b3be

0800e650 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	460b      	mov	r3, r1
 800e65a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	3324      	adds	r3, #36	; 0x24
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	887a      	ldrh	r2, [r7, #2]
 800e666:	4611      	mov	r1, r2
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	4798      	blx	r3
 800e66c:	4603      	mov	r3, r0
    }
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
	...

0800e678 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	4a05      	ldr	r2, [pc, #20]	; (800e698 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	601a      	str	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4618      	mov	r0, r3
 800e68a:	f000 fa09 	bl	800eaa0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4618      	mov	r0, r3
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	08027794 	.word	0x08027794

0800e69c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff ffe7 	bl	800e678 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800e6aa:	2110      	movs	r1, #16
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f017 f9bb 	bl	8025a28 <_ZdlPvj>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fe fa10 	bl	800caec <_ZN8touchgfx6WidgetC1Ev>
 800e6cc:	4a03      	ldr	r2, [pc, #12]	; (800e6dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	0802772c 	.word	0x0802772c

0800e6e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	4a05      	ldr	r2, [pc, #20]	; (800e700 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	601a      	str	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe fa0d 	bl	800cb10 <_ZN8touchgfx6WidgetD1Ev>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	0802772c 	.word	0x0802772c

0800e704 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7ff ffe7 	bl	800e6e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800e712:	2128      	movs	r1, #40	; 0x28
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f017 f987 	bl	8025a28 <_ZdlPvj>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800e724:	b590      	push	{r4, r7, lr}
 800e726:	b087      	sub	sp, #28
 800e728:	af02      	add	r7, sp, #8
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	460b      	mov	r3, r1
 800e72e:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4618      	mov	r0, r3
 800e734:	f7fd fe6e 	bl	800c414 <_ZN8touchgfx10TransitionC1Ev>
 800e738:	4a38      	ldr	r2, [pc, #224]	; (800e81c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f103 040c 	add.w	r4, r3, #12
 800e744:	4a36      	ldr	r2, [pc, #216]	; (800e820 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 800e746:	f107 0308 	add.w	r3, r7, #8
 800e74a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e74e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e752:	f107 0308 	add.w	r3, r7, #8
 800e756:	cb0c      	ldmia	r3, {r2, r3}
 800e758:	6879      	ldr	r1, [r7, #4]
 800e75a:	4620      	mov	r0, r4
 800e75c:	f000 f9f2 	bl	800eb44 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2202      	movs	r2, #2
 800e764:	771a      	strb	r2, [r3, #28]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	78fa      	ldrb	r2, [r7, #3]
 800e76a:	775a      	strb	r2, [r3, #29]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	779a      	strb	r2, [r3, #30]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	845a      	strh	r2, [r3, #34]	; 0x22
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	849a      	strh	r2, [r3, #36]	; 0x24
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	3328      	adds	r3, #40	; 0x28
 800e782:	2228      	movs	r2, #40	; 0x28
 800e784:	2100      	movs	r1, #0
 800e786:	4618      	mov	r0, r3
 800e788:	f017 fa03 	bl	8025b92 <memset>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	3328      	adds	r3, #40	; 0x28
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff ff93 	bl	800e6bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	7f1b      	ldrb	r3, [r3, #28]
 800e79a:	2b03      	cmp	r3, #3
 800e79c:	d826      	bhi.n	800e7ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 800e79e:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7d1 	.word	0x0800e7d1
 800e7a8:	0800e7dd 	.word	0x0800e7dd
 800e7ac:	0800e7b5 	.word	0x0800e7b5
 800e7b0:	0800e7c5 	.word	0x0800e7c5
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800e7b4:	4b1b      	ldr	r3, [pc, #108]	; (800e824 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e7b6:	881b      	ldrh	r3, [r3, #0]
 800e7b8:	425b      	negs	r3, r3
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	b21a      	sxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	841a      	strh	r2, [r3, #32]
            break;
 800e7c2:	e017      	b.n	800e7f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800e7c4:	4b17      	ldr	r3, [pc, #92]	; (800e824 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e7c6:	881b      	ldrh	r3, [r3, #0]
 800e7c8:	b21a      	sxth	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	841a      	strh	r2, [r3, #32]
            break;
 800e7ce:	e011      	b.n	800e7f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 800e7d0:	4b15      	ldr	r3, [pc, #84]	; (800e828 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e7d2:	881b      	ldrh	r3, [r3, #0]
 800e7d4:	b21a      	sxth	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	841a      	strh	r2, [r3, #32]
            break;
 800e7da:	e00b      	b.n	800e7f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 800e7dc:	4b12      	ldr	r3, [pc, #72]	; (800e828 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e7de:	881b      	ldrh	r3, [r3, #0]
 800e7e0:	425b      	negs	r3, r3
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	b21a      	sxth	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	841a      	strh	r2, [r3, #32]
            break;
 800e7ea:	e003      	b.n	800e7f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 800e7f2:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800e7fa:	4b0a      	ldr	r3, [pc, #40]	; (800e824 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e7fc:	881b      	ldrh	r3, [r3, #0]
 800e7fe:	b21a      	sxth	r2, r3
 800e800:	4b09      	ldr	r3, [pc, #36]	; (800e828 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	b21b      	sxth	r3, r3
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	4613      	mov	r3, r2
 800e80a:	2200      	movs	r2, #0
 800e80c:	2100      	movs	r1, #0
 800e80e:	f7fd feef 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	4618      	mov	r0, r3
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd90      	pop	{r4, r7, pc}
 800e81c:	08027704 	.word	0x08027704
 800e820:	08026db0 	.word	0x08026db0
 800e824:	2000b3bc 	.word	0x2000b3bc
 800e828:	2000b3be 	.word	0x2000b3be

0800e82c <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>:
    T& at(const uint16_t index)
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	460b      	mov	r3, r1
 800e836:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3324      	adds	r3, #36	; 0x24
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	887a      	ldrh	r2, [r7, #2]
 800e842:	4611      	mov	r1, r2
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	4798      	blx	r3
 800e848:	4603      	mov	r3, r0
    }
 800e84a:	4618      	mov	r0, r3
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>:
    T& at(const uint16_t index)
 800e852:	b580      	push	{r7, lr}
 800e854:	b082      	sub	sp, #8
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	460b      	mov	r3, r1
 800e85c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3324      	adds	r3, #36	; 0x24
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	887a      	ldrh	r2, [r7, #2]
 800e868:	4611      	mov	r1, r2
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	4798      	blx	r3
 800e86e:	4603      	mov	r3, r0
    }
 800e870:	4618      	mov	r0, r3
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	683a      	ldr	r2, [r7, #0]
 800e886:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e888:	bf00      	nop
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <_ZN8touchgfx17AbstractPartition2atI12gameoverViewEERT_t>:
    T& at(const uint16_t index)
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	460b      	mov	r3, r1
 800e89e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	3324      	adds	r3, #36	; 0x24
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	887a      	ldrh	r2, [r7, #2]
 800e8aa:	4611      	mov	r1, r2
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	4798      	blx	r3
 800e8b0:	4603      	mov	r3, r0
    }
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <_ZN8touchgfx17AbstractPartition2atI17gameoverPresenterEERT_t>:
    T& at(const uint16_t index)
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b082      	sub	sp, #8
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3324      	adds	r3, #36	; 0x24
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	887a      	ldrh	r2, [r7, #2]
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	4798      	blx	r3
 800e8d6:	4603      	mov	r3, r0
    }
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <_ZN8touchgfx4ViewI17gameoverPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	683a      	ldr	r2, [r7, #0]
 800e8ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>:
    T& at(const uint16_t index)
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	460b      	mov	r3, r1
 800e906:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	3324      	adds	r3, #36	; 0x24
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	887a      	ldrh	r2, [r7, #2]
 800e912:	4611      	mov	r1, r2
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	4798      	blx	r3
 800e918:	4603      	mov	r3, r0
    }
 800e91a:	4618      	mov	r0, r3
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>:
    T& at(const uint16_t index)
 800e922:	b580      	push	{r7, lr}
 800e924:	b082      	sub	sp, #8
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	460b      	mov	r3, r1
 800e92c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	3324      	adds	r3, #36	; 0x24
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	887a      	ldrh	r2, [r7, #2]
 800e938:	4611      	mov	r1, r2
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	4798      	blx	r3
 800e93e:	4603      	mov	r3, r0
    }
 800e940:	4618      	mov	r0, r3
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e958:	bf00      	nop
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <_ZN8touchgfx17AbstractPartition2atI11galleryViewEERT_t>:
    T& at(const uint16_t index)
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	3324      	adds	r3, #36	; 0x24
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	887a      	ldrh	r2, [r7, #2]
 800e97a:	4611      	mov	r1, r2
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	4798      	blx	r3
 800e980:	4603      	mov	r3, r0
    }
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <_ZN8touchgfx17AbstractPartition2atI16galleryPresenterEERT_t>:
    T& at(const uint16_t index)
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b082      	sub	sp, #8
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	460b      	mov	r3, r1
 800e994:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	3324      	adds	r3, #36	; 0x24
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	887a      	ldrh	r2, [r7, #2]
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	4798      	blx	r3
 800e9a6:	4603      	mov	r3, r0
    }
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <_ZN8touchgfx4ViewI16galleryPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	683a      	ldr	r2, [r7, #0]
 800e9be:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d02a      	beq.n	800ea36 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e9e6:	2b03      	cmp	r3, #3
 800e9e8:	d820      	bhi.n	800ea2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800e9ea:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800e9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f0:	0800ea17 	.word	0x0800ea17
 800e9f4:	0800ea17 	.word	0x0800ea17
 800e9f8:	0800ea01 	.word	0x0800ea01
 800e9fc:	0800ea01 	.word	0x0800ea01
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	3354      	adds	r3, #84	; 0x54
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800ea0e:	2200      	movs	r2, #0
 800ea10:	6838      	ldr	r0, [r7, #0]
 800ea12:	4798      	blx	r3
            break;
 800ea14:	e010      	b.n	800ea38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	3354      	adds	r3, #84	; 0x54
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800ea24:	2100      	movs	r1, #0
 800ea26:	6838      	ldr	r0, [r7, #0]
 800ea28:	4798      	blx	r3
            break;
 800ea2a:	e005      	b.n	800ea38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	721a      	strb	r2, [r3, #8]
            break;
 800ea32:	bf00      	nop
 800ea34:	e000      	b.n	800ea38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800ea36:	bf00      	nop
        }
    }
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop

0800ea40 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	4a04      	ldr	r2, [pc, #16]	; (800ea5c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4618      	mov	r0, r3
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr
 800ea5c:	080277ac 	.word	0x080277ac

0800ea60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff ffe4 	bl	800ea40 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800ea78:	4a08      	ldr	r2, [pc, #32]	; (800ea9c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	3308      	adds	r3, #8
 800ea88:	463a      	mov	r2, r7
 800ea8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	080276ec 	.word	0x080276ec

0800eaa0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
    }
 800eaa8:	4a04      	ldr	r2, [pc, #16]	; (800eabc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	601a      	str	r2, [r3, #0]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4618      	mov	r0, r3
 800eab2:	370c      	adds	r7, #12
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr
 800eabc:	080277ac 	.word	0x080277ac

0800eac0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
    }
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7ff ffe9 	bl	800eaa0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800eace:	2104      	movs	r1, #4
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f016 ffa9 	bl	8025a28 <_ZdlPvj>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7f1b      	ldrb	r3, [r3, #28]
 800eaee:	2b03      	cmp	r3, #3
 800eaf0:	d820      	bhi.n	800eb34 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 800eaf2:	a201      	add	r2, pc, #4	; (adr r2, 800eaf8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 800eaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf8:	0800eb1f 	.word	0x0800eb1f
 800eafc:	0800eb1f 	.word	0x0800eb1f
 800eb00:	0800eb09 	.word	0x0800eb09
 800eb04:	0800eb09 	.word	0x0800eb09
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3354      	adds	r3, #84	; 0x54
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 800eb16:	2200      	movs	r2, #0
 800eb18:	6838      	ldr	r0, [r7, #0]
 800eb1a:	4798      	blx	r3
            break;
 800eb1c:	e00e      	b.n	800eb3c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	3354      	adds	r3, #84	; 0x54
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	6838      	ldr	r0, [r7, #0]
 800eb30:	4798      	blx	r3
            break;
 800eb32:	e003      	b.n	800eb3c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	721a      	strb	r2, [r3, #8]
            break;
 800eb3a:	bf00      	nop
        }
    }
 800eb3c:	bf00      	nop
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	4639      	mov	r1, r7
 800eb50:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff ff72 	bl	800ea40 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800eb5c:	4a08      	ldr	r2, [pc, #32]	; (800eb80 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	3308      	adds	r3, #8
 800eb6c:	463a      	mov	r2, r7
 800eb6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb72:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	08027794 	.word	0x08027794

0800eb84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	4a0a      	ldr	r2, [pc, #40]	; (800ebb8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	601a      	str	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	333c      	adds	r3, #60	; 0x3c
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff fca4 	bl	800e4e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	330c      	adds	r3, #12
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7ff fc7d 	bl	800e4a0 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fd fc49 	bl	800c440 <_ZN8touchgfx10TransitionD1Ev>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	080276c4 	.word	0x080276c4

0800ebbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff ffdd 	bl	800eb84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800ebca:	2154      	movs	r1, #84	; 0x54
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f016 ff2b 	bl	8025a28 <_ZdlPvj>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	4a0a      	ldr	r2, [pc, #40]	; (800ec10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	601a      	str	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	3328      	adds	r3, #40	; 0x28
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff fd76 	bl	800e6e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	330c      	adds	r3, #12
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7ff fd3d 	bl	800e678 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7fd fc1d 	bl	800c440 <_ZN8touchgfx10TransitionD1Ev>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	08027704 	.word	0x08027704

0800ec14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff ffdd 	bl	800ebdc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800ec22:	2150      	movs	r1, #80	; 0x50
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f016 feff 	bl	8025a28 <_ZdlPvj>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <_ZN8touchgfx12NoTransitionD1Ev>:
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	4a05      	ldr	r2, [pc, #20]	; (800ec54 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	601a      	str	r2, [r3, #0]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fd fbfb 	bl	800c440 <_ZN8touchgfx10TransitionD1Ev>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	0802782c 	.word	0x0802782c

0800ec58 <_ZN8touchgfx12NoTransitionD0Ev>:
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff ffe7 	bl	800ec34 <_ZN8touchgfx12NoTransitionD1Ev>
 800ec66:	210c      	movs	r1, #12
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f016 fedd 	bl	8025a28 <_ZdlPvj>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4618      	mov	r0, r3
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	4a05      	ldr	r2, [pc, #20]	; (800ec98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	601a      	str	r2, [r3, #0]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fd fc43 	bl	800c514 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	4618      	mov	r0, r3
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	08027890 	.word	0x08027890

0800ec9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff ffe7 	bl	800ec78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ecaa:	2110      	movs	r1, #16
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f016 febb 	bl	8025a28 <_ZdlPvj>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800ecc4:	4b59      	ldr	r3, [pc, #356]	; (800ee2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	f083 0301 	eor.w	r3, r3, #1
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d003      	beq.n	800ecda <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	721a      	strb	r2, [r3, #8]
            return;
 800ecd8:	e0a5      	b.n	800ee26 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fd fbcf 	bl	800c480 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ece8:	3301      	adds	r3, #1
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d82f      	bhi.n	800ed62 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ed08:	b298      	uxth	r0, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	2100      	movs	r1, #0
 800ed1a:	f00b fe69 	bl	801a9f0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	461a      	mov	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	f003 0301 	and.w	r3, r3, #1
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d01b      	beq.n	800ed72 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800ed48:	2a00      	cmp	r2, #0
 800ed4a:	dd01      	ble.n	800ed50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	e001      	b.n	800ed54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800ed50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed54:	4413      	add	r3, r2
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	b21a      	sxth	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800ed60:	e007      	b.n	800ed72 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2201      	movs	r2, #1
 800ed66:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800ed70:	e059      	b.n	800ee26 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ed78:	2b03      	cmp	r3, #3
 800ed7a:	d845      	bhi.n	800ee08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800ed7c:	a201      	add	r2, pc, #4	; (adr r2, 800ed84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800ed7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed82:	bf00      	nop
 800ed84:	0800edcf 	.word	0x0800edcf
 800ed88:	0800edcf 	.word	0x0800edcf
 800ed8c:	0800ed95 	.word	0x0800ed95
 800ed90:	0800ed95 	.word	0x0800ed95
            calculatedValue -= snapshot.getX();
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	330c      	adds	r3, #12
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fd fc56 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	4619      	mov	r1, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	b28b      	uxth	r3, r1
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	b29b      	uxth	r3, r3
 800edb0:	b21a      	sxth	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f103 000c 	add.w	r0, r3, #12
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800edc4:	2200      	movs	r2, #0
 800edc6:	4619      	mov	r1, r3
 800edc8:	f00b f92c 	bl	801a024 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800edcc:	e020      	b.n	800ee10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	330c      	adds	r3, #12
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fd fc46 	bl	800c664 <_ZNK8touchgfx8Drawable4getYEv>
 800edd8:	4603      	mov	r3, r0
 800edda:	4619      	mov	r1, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	b28b      	uxth	r3, r1
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	b29b      	uxth	r3, r3
 800edea:	b21a      	sxth	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f103 000c 	add.w	r0, r3, #12
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800edfe:	461a      	mov	r2, r3
 800ee00:	2100      	movs	r1, #0
 800ee02:	f00b f90f 	bl	801a024 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800ee06:	e003      	b.n	800ee10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	721a      	strb	r2, [r3, #8]
            break;
 800ee0e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6858      	ldr	r0, [r3, #4]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	3378      	adds	r3, #120	; 0x78
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	323c      	adds	r2, #60	; 0x3c
 800ee22:	4611      	mov	r1, r2
 800ee24:	4798      	blx	r3
    }
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	2000b3c7 	.word	0x2000b3c7

0800ee30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800ee38:	4b0b      	ldr	r3, [pc, #44]	; (800ee68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00e      	beq.n	800ee5e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00a      	beq.n	800ee5e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6858      	ldr	r0, [r3, #4]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	3364      	adds	r3, #100	; 0x64
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	320c      	adds	r2, #12
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	4798      	blx	r3
    }
 800ee5e:	bf00      	nop
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	2000b3c7 	.word	0x2000b3c7

0800ee6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b088      	sub	sp, #32
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800ee74:	4b1a      	ldr	r3, [pc, #104]	; (800eee0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d02d      	beq.n	800eed8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fd fb12 	bl	800c4a8 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ee84:	4a17      	ldr	r2, [pc, #92]	; (800eee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800ee86:	f107 0318 	add.w	r3, r7, #24
 800ee8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee8e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee92:	f107 0008 	add.w	r0, r7, #8
 800ee96:	f107 0318 	add.w	r3, r7, #24
 800ee9a:	cb0c      	ldmia	r3, {r2, r3}
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	f7ff fddf 	bl	800ea60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	685a      	ldr	r2, [r3, #4]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	3378      	adds	r3, #120	; 0x78
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f107 0108 	add.w	r1, r7, #8
 800eeb4:	4610      	mov	r0, r2
 800eeb6:	4798      	blx	r3
            screenContainer->add(snapshot);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6858      	ldr	r0, [r3, #4]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3360      	adds	r3, #96	; 0x60
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	320c      	adds	r2, #12
 800eeca:	4611      	mov	r1, r2
 800eecc:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800eece:	f107 0308 	add.w	r3, r7, #8
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7ff fb06 	bl	800e4e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800eed8:	bf00      	nop
 800eeda:	3720      	adds	r7, #32
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	2000b3c7 	.word	0x2000b3c7
 800eee4:	08026db8 	.word	0x08026db8

0800eee8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
        switch (direction)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	d83b      	bhi.n	800ef74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800eefc:	a201      	add	r2, pc, #4	; (adr r2, 800ef04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800eefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef02:	bf00      	nop
 800ef04:	0800ef45 	.word	0x0800ef45
 800ef08:	0800ef5f 	.word	0x0800ef5f
 800ef0c:	0800ef15 	.word	0x0800ef15
 800ef10:	0800ef2b 	.word	0x0800ef2b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3354      	adds	r3, #84	; 0x54
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4a18      	ldr	r2, [pc, #96]	; (800ef80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800ef1e:	8812      	ldrh	r2, [r2, #0]
 800ef20:	b211      	sxth	r1, r2
 800ef22:	2200      	movs	r2, #0
 800ef24:	6838      	ldr	r0, [r7, #0]
 800ef26:	4798      	blx	r3
            break;
 800ef28:	e025      	b.n	800ef76 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	3354      	adds	r3, #84	; 0x54
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4a13      	ldr	r2, [pc, #76]	; (800ef80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800ef34:	8812      	ldrh	r2, [r2, #0]
 800ef36:	4252      	negs	r2, r2
 800ef38:	b292      	uxth	r2, r2
 800ef3a:	b211      	sxth	r1, r2
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	6838      	ldr	r0, [r7, #0]
 800ef40:	4798      	blx	r3
            break;
 800ef42:	e018      	b.n	800ef76 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	3354      	adds	r3, #84	; 0x54
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a0d      	ldr	r2, [pc, #52]	; (800ef84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800ef4e:	8812      	ldrh	r2, [r2, #0]
 800ef50:	4252      	negs	r2, r2
 800ef52:	b292      	uxth	r2, r2
 800ef54:	b212      	sxth	r2, r2
 800ef56:	2100      	movs	r1, #0
 800ef58:	6838      	ldr	r0, [r7, #0]
 800ef5a:	4798      	blx	r3
            break;
 800ef5c:	e00b      	b.n	800ef76 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	3354      	adds	r3, #84	; 0x54
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a07      	ldr	r2, [pc, #28]	; (800ef84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800ef68:	8812      	ldrh	r2, [r2, #0]
 800ef6a:	b212      	sxth	r2, r2
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	6838      	ldr	r0, [r7, #0]
 800ef70:	4798      	blx	r3
            break;
 800ef72:	e000      	b.n	800ef76 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800ef74:	bf00      	nop
    }
 800ef76:	bf00      	nop
 800ef78:	3708      	adds	r7, #8
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	2000b3bc 	.word	0x2000b3bc
 800ef84:	2000b3be 	.word	0x2000b3be

0800ef88 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	68d2      	ldr	r2, [r2, #12]
 800ef9a:	1052      	asrs	r2, r2, #1
 800ef9c:	1898      	adds	r0, r3, r2
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	f003 0301 	and.w	r3, r3, #1
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d102      	bne.n	800efb0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	e00a      	b.n	800efc6 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	68d2      	ldr	r2, [r2, #12]
 800efb8:	1052      	asrs	r2, r2, #1
 800efba:	4413      	add	r3, r2
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	6892      	ldr	r2, [r2, #8]
 800efc2:	4413      	add	r3, r2
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	6839      	ldr	r1, [r7, #0]
 800efc8:	4798      	blx	r3
    }
 800efca:	bf00      	nop
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800efd2:	b480      	push	{r7}
 800efd4:	b083      	sub	sp, #12
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d010      	beq.n	800f004 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d107      	bne.n	800effa <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d101      	bne.n	800effa <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800eff6:	2301      	movs	r3, #1
 800eff8:	e000      	b.n	800effc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800effa:	2300      	movs	r3, #0
 800effc:	2b01      	cmp	r3, #1
 800effe:	d001      	beq.n	800f004 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f000:	2301      	movs	r3, #1
 800f002:	e000      	b.n	800f006 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800f004:	2300      	movs	r3, #0
    }
 800f006:	4618      	mov	r0, r3
 800f008:	370c      	adds	r7, #12
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
	...

0800f014 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800f014:	b590      	push	{r4, r7, lr}
 800f016:	b08b      	sub	sp, #44	; 0x2c
 800f018:	af02      	add	r7, sp, #8
 800f01a:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd fa2e 	bl	800c480 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	7f9b      	ldrb	r3, [r3, #30]
 800f028:	3301      	adds	r3, #1
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	7f9a      	ldrb	r2, [r3, #30]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	7f5b      	ldrb	r3, [r3, #29]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d82b      	bhi.n	800f094 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	7f9b      	ldrb	r3, [r3, #30]
 800f040:	b298      	uxth	r0, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7f5b      	ldrb	r3, [r3, #29]
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	2100      	movs	r1, #0
 800f050:	f00b fcce 	bl	801a9f0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800f054:	4603      	mov	r3, r0
 800f056:	461a      	mov	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f062:	b29b      	uxth	r3, r3
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	b29b      	uxth	r3, r3
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d019      	beq.n	800f0a2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f074:	b29b      	uxth	r3, r3
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800f07c:	2a00      	cmp	r2, #0
 800f07e:	dd01      	ble.n	800f084 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800f080:	2201      	movs	r2, #1
 800f082:	e001      	b.n	800f088 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800f084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f088:	4413      	add	r3, r2
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	b21a      	sxth	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	845a      	strh	r2, [r3, #34]	; 0x22
 800f092:	e006      	b.n	800f0a2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	779a      	strb	r2, [r3, #30]
            return;
 800f0a0:	e0c0      	b.n	800f224 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	b21a      	sxth	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	4413      	add	r3, r2
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	b21a      	sxth	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	7f9b      	ldrb	r3, [r3, #30]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	f040 8097 	bne.w	800f20e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 800f0e0:	4b52      	ldr	r3, [pc, #328]	; (800f22c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f000 8092 	beq.w	800f20e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 800f0ea:	f107 0314 	add.w	r3, r7, #20
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fd f8f8 	bl	800c2e4 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	7f1b      	ldrb	r3, [r3, #28]
 800f0f8:	2b03      	cmp	r3, #3
 800f0fa:	d85b      	bhi.n	800f1b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 800f0fc:	a201      	add	r2, pc, #4	; (adr r2, 800f104 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 800f0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f102:	bf00      	nop
 800f104:	0800f165 	.word	0x0800f165
 800f108:	0800f18f 	.word	0x0800f18f
 800f10c:	0800f115 	.word	0x0800f115
 800f110:	0800f13b 	.word	0x0800f13b
                rect.x = 0;
 800f114:	2300      	movs	r3, #0
 800f116:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800f118:	2300      	movs	r3, #0
 800f11a:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f122:	b29a      	uxth	r2, r3
 800f124:	4b42      	ldr	r3, [pc, #264]	; (800f230 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	4413      	add	r3, r2
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	b21b      	sxth	r3, r3
 800f12e:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800f130:	4b40      	ldr	r3, [pc, #256]	; (800f234 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f132:	881b      	ldrh	r3, [r3, #0]
 800f134:	b21b      	sxth	r3, r3
 800f136:	837b      	strh	r3, [r7, #26]
                break;
 800f138:	e03d      	b.n	800f1b6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f140:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800f142:	2300      	movs	r3, #0
 800f144:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 800f146:	4b3a      	ldr	r3, [pc, #232]	; (800f230 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f148:	881a      	ldrh	r2, [r3, #0]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f150:	b29b      	uxth	r3, r3
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	b29b      	uxth	r3, r3
 800f156:	b21b      	sxth	r3, r3
 800f158:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800f15a:	4b36      	ldr	r3, [pc, #216]	; (800f234 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	b21b      	sxth	r3, r3
 800f160:	837b      	strh	r3, [r7, #26]
                break;
 800f162:	e028      	b.n	800f1b6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800f164:	2300      	movs	r3, #0
 800f166:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f16e:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800f170:	4b2f      	ldr	r3, [pc, #188]	; (800f230 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f172:	881b      	ldrh	r3, [r3, #0]
 800f174:	b21b      	sxth	r3, r3
 800f176:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 800f178:	4b2e      	ldr	r3, [pc, #184]	; (800f234 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f17a:	881a      	ldrh	r2, [r3, #0]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f182:	b29b      	uxth	r3, r3
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	b29b      	uxth	r3, r3
 800f188:	b21b      	sxth	r3, r3
 800f18a:	837b      	strh	r3, [r7, #26]
                break;
 800f18c:	e013      	b.n	800f1b6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800f18e:	2300      	movs	r3, #0
 800f190:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800f192:	2300      	movs	r3, #0
 800f194:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800f196:	4b26      	ldr	r3, [pc, #152]	; (800f230 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	b21b      	sxth	r3, r3
 800f19c:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	4b23      	ldr	r3, [pc, #140]	; (800f234 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	4413      	add	r3, r2
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	b21b      	sxth	r3, r3
 800f1b0:	837b      	strh	r3, [r7, #26]
                break;
 800f1b2:	e000      	b.n	800f1b6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 800f1b4:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800f1b6:	f7fd fb59 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	6813      	ldr	r3, [r2, #0]
 800f1be:	3328      	adds	r3, #40	; 0x28
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4610      	mov	r0, r2
 800f1c4:	4798      	blx	r3
 800f1c6:	61f8      	str	r0, [r7, #28]
            Rect source;
 800f1c8:	f107 030c 	add.w	r3, r7, #12
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fd f889 	bl	800c2e4 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 800f1da:	4b15      	ldr	r3, [pc, #84]	; (800f230 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	b21b      	sxth	r3, r3
 800f1e0:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 800f1e2:	4b14      	ldr	r3, [pc, #80]	; (800f234 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	b21b      	sxth	r3, r3
 800f1e8:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800f1ea:	f7fd fb3f 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 800f1ee:	f7fd fb49 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 800f1f2:	6803      	ldr	r3, [r0, #0]
 800f1f4:	330c      	adds	r3, #12
 800f1f6:	681c      	ldr	r4, [r3, #0]
 800f1f8:	f107 0114 	add.w	r1, r7, #20
 800f1fc:	f107 020c 	add.w	r2, r7, #12
 800f200:	2300      	movs	r3, #0
 800f202:	9301      	str	r3, [sp, #4]
 800f204:	23ff      	movs	r3, #255	; 0xff
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	460b      	mov	r3, r1
 800f20a:	69f9      	ldr	r1, [r7, #28]
 800f20c:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6858      	ldr	r0, [r3, #4]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	3378      	adds	r3, #120	; 0x78
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	320c      	adds	r2, #12
 800f220:	4611      	mov	r1, r2
 800f222:	4798      	blx	r3
    }
 800f224:	3724      	adds	r7, #36	; 0x24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd90      	pop	{r4, r7, pc}
 800f22a:	bf00      	nop
 800f22c:	2000b3c6 	.word	0x2000b3c6
 800f230:	2000b3bc 	.word	0x2000b3bc
 800f234:	2000b3be 	.word	0x2000b3be

0800f238 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6858      	ldr	r0, [r3, #4]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	3364      	adds	r3, #100	; 0x64
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	3228      	adds	r2, #40	; 0x28
 800f252:	4611      	mov	r1, r2
 800f254:	4798      	blx	r3
    }
 800f256:	bf00      	nop
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
	...

0800f260 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800f260:	b580      	push	{r7, lr}
 800f262:	b088      	sub	sp, #32
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
        Transition::init();
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fd f91c 	bl	800c4a8 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800f270:	4a16      	ldr	r2, [pc, #88]	; (800f2cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 800f272:	f107 0318 	add.w	r3, r7, #24
 800f276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f27a:	e883 0003 	stmia.w	r3, {r0, r1}
 800f27e:	f107 0008 	add.w	r0, r7, #8
 800f282:	f107 0318 	add.w	r3, r7, #24
 800f286:	cb0c      	ldmia	r3, {r2, r3}
 800f288:	6879      	ldr	r1, [r7, #4]
 800f28a:	f7ff fc5b 	bl	800eb44 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	685a      	ldr	r2, [r3, #4]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	3378      	adds	r3, #120	; 0x78
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f107 0108 	add.w	r1, r7, #8
 800f2a0:	4610      	mov	r0, r2
 800f2a2:	4798      	blx	r3
        screenContainer->add(solid);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6858      	ldr	r0, [r3, #4]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	3360      	adds	r3, #96	; 0x60
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	3228      	adds	r2, #40	; 0x28
 800f2b6:	4611      	mov	r1, r2
 800f2b8:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800f2ba:	f107 0308 	add.w	r3, r7, #8
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7ff f9da 	bl	800e678 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800f2c4:	bf00      	nop
 800f2c6:	3720      	adds	r7, #32
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	08026dc0 	.word	0x08026dc0

0800f2d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
        switch (direction)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	7f1b      	ldrb	r3, [r3, #28]
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d83a      	bhi.n	800f358 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 800f2e2:	a201      	add	r2, pc, #4	; (adr r2, 800f2e8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 800f2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e8:	0800f329 	.word	0x0800f329
 800f2ec:	0800f343 	.word	0x0800f343
 800f2f0:	0800f2f9 	.word	0x0800f2f9
 800f2f4:	0800f30f 	.word	0x0800f30f
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	3354      	adds	r3, #84	; 0x54
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a18      	ldr	r2, [pc, #96]	; (800f364 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 800f302:	8812      	ldrh	r2, [r2, #0]
 800f304:	b211      	sxth	r1, r2
 800f306:	2200      	movs	r2, #0
 800f308:	6838      	ldr	r0, [r7, #0]
 800f30a:	4798      	blx	r3
            break;
 800f30c:	e025      	b.n	800f35a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	3354      	adds	r3, #84	; 0x54
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a13      	ldr	r2, [pc, #76]	; (800f364 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 800f318:	8812      	ldrh	r2, [r2, #0]
 800f31a:	4252      	negs	r2, r2
 800f31c:	b292      	uxth	r2, r2
 800f31e:	b211      	sxth	r1, r2
 800f320:	2200      	movs	r2, #0
 800f322:	6838      	ldr	r0, [r7, #0]
 800f324:	4798      	blx	r3
            break;
 800f326:	e018      	b.n	800f35a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	3354      	adds	r3, #84	; 0x54
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a0d      	ldr	r2, [pc, #52]	; (800f368 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800f332:	8812      	ldrh	r2, [r2, #0]
 800f334:	4252      	negs	r2, r2
 800f336:	b292      	uxth	r2, r2
 800f338:	b212      	sxth	r2, r2
 800f33a:	2100      	movs	r1, #0
 800f33c:	6838      	ldr	r0, [r7, #0]
 800f33e:	4798      	blx	r3
            break;
 800f340:	e00b      	b.n	800f35a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	3354      	adds	r3, #84	; 0x54
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a07      	ldr	r2, [pc, #28]	; (800f368 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800f34c:	8812      	ldrh	r2, [r2, #0]
 800f34e:	b212      	sxth	r2, r2
 800f350:	2100      	movs	r1, #0
 800f352:	6838      	ldr	r0, [r7, #0]
 800f354:	4798      	blx	r3
            break;
 800f356:	e000      	b.n	800f35a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 800f358:	bf00      	nop
    }
 800f35a:	bf00      	nop
 800f35c:	3708      	adds	r7, #8
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	2000b3bc 	.word	0x2000b3bc
 800f368:	2000b3be 	.word	0x2000b3be

0800f36c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
        }
 800f376:	bf00      	nop
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
	...

0800f384 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af02      	add	r7, sp, #8
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800f38e:	4b08      	ldr	r3, [pc, #32]	; (800f3b0 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 800f390:	881b      	ldrh	r3, [r3, #0]
 800f392:	b21a      	sxth	r2, r3
 800f394:	4b07      	ldr	r3, [pc, #28]	; (800f3b4 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	b21b      	sxth	r3, r3
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	4613      	mov	r3, r2
 800f39e:	2200      	movs	r2, #0
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7fc ffb5 	bl	800c312 <_ZN8touchgfx4RectC1Essss>
        }
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	2000b3bc 	.word	0x2000b3bc
 800f3b4:	2000b3be 	.word	0x2000b3be

0800f3b8 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	68d2      	ldr	r2, [r2, #12]
 800f3ca:	1052      	asrs	r2, r2, #1
 800f3cc:	1898      	adds	r0, r3, r2
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	f003 0301 	and.w	r3, r3, #1
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d102      	bne.n	800f3e0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	e00a      	b.n	800f3f6 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	68d2      	ldr	r2, [r2, #12]
 800f3e8:	1052      	asrs	r2, r2, #1
 800f3ea:	4413      	add	r3, r2
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	6892      	ldr	r2, [r2, #8]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	6839      	ldr	r1, [r7, #0]
 800f3f8:	4798      	blx	r3
    }
 800f3fa:	bf00      	nop
 800f3fc:	3708      	adds	r7, #8
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800f402:	b480      	push	{r7}
 800f404:	b083      	sub	sp, #12
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d010      	beq.n	800f434 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d107      	bne.n	800f42a <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f003 0301 	and.w	r3, r3, #1
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f426:	2301      	movs	r3, #1
 800f428:	e000      	b.n	800f42c <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800f42a:	2300      	movs	r3, #0
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d001      	beq.n	800f434 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f430:	2301      	movs	r3, #1
 800f432:	e000      	b.n	800f436 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800f434:	2300      	movs	r3, #0
    }
 800f436:	4618      	mov	r0, r3
 800f438:	370c      	adds	r7, #12
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr

0800f442 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800f442:	b580      	push	{r7, lr}
 800f444:	b082      	sub	sp, #8
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	68d2      	ldr	r2, [r2, #12]
 800f452:	1052      	asrs	r2, r2, #1
 800f454:	1899      	adds	r1, r3, r2
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	f003 0301 	and.w	r3, r3, #1
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d102      	bne.n	800f468 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	e00a      	b.n	800f47e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	68d2      	ldr	r2, [r2, #12]
 800f470:	1052      	asrs	r2, r2, #1
 800f472:	4413      	add	r3, r2
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	6892      	ldr	r2, [r2, #8]
 800f47a:	4413      	add	r3, r2
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	4608      	mov	r0, r1
 800f480:	4798      	blx	r3
    }
 800f482:	bf00      	nop
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f48a:	b480      	push	{r7}
 800f48c:	b083      	sub	sp, #12
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d010      	beq.n	800f4bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	689b      	ldr	r3, [r3, #8]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d107      	bne.n	800f4b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	f003 0301 	and.w	r3, r3, #1
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d101      	bne.n	800f4b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e000      	b.n	800f4b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d001      	beq.n	800f4bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e000      	b.n	800f4be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f4bc:	2300      	movs	r3, #0
    }
 800f4be:	4618      	mov	r0, r3
 800f4c0:	370c      	adds	r7, #12
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr

0800f4ca <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f4ca:	b480      	push	{r7}
 800f4cc:	b083      	sub	sp, #12
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	6039      	str	r1, [r7, #0]
        color = col;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	683a      	ldr	r2, [r7, #0]
 800f4d8:	601a      	str	r2, [r3, #0]
    }
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	887a      	ldrh	r2, [r7, #2]
 800f4f8:	801a      	strh	r2, [r3, #0]
    {
    }
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	370c      	adds	r7, #12
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
    {
 800f510:	4a06      	ldr	r2, [pc, #24]	; (800f52c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	3304      	adds	r3, #4
 800f51a:	4618      	mov	r0, r3
 800f51c:	f000 fbf8 	bl	800fd10 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4618      	mov	r0, r3
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	0802a820 	.word	0x0802a820

0800f530 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
    }
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7ff ffe5 	bl	800f508 <_ZN8touchgfx6ScreenD1Ev>
 800f53e:	213c      	movs	r1, #60	; 0x3c
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f016 fa71 	bl	8025a28 <_ZdlPvj>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4618      	mov	r0, r3
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
    {
    }
 800f558:	bf00      	nop
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
    {
    }
 800f56c:	bf00      	nop
 800f56e:	370c      	adds	r7, #12
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
    {
    }
 800f580:	bf00      	nop
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
    {
    }
 800f594:	bf00      	nop
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f5ac:	bf00      	nop
 800f5ae:	370c      	adds	r7, #12
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f006 fbbb 	bl	8015d44 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f5ce:	bf00      	nop
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800f5d6:	b480      	push	{r7}
 800f5d8:	b083      	sub	sp, #12
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f5e6:	bf00      	nop
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
	...

0800f5f4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	4a05      	ldr	r2, [pc, #20]	; (800f614 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	601a      	str	r2, [r3, #0]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4618      	mov	r0, r3
 800f606:	f7fd fa83 	bl	800cb10 <_ZN8touchgfx6WidgetD1Ev>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	08029e34 	.word	0x08029e34

0800f618 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7ff ffe7 	bl	800f5f4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f626:	2130      	movs	r1, #48	; 0x30
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f016 f9fd 	bl	8025a28 <_ZdlPvj>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4618      	mov	r0, r3
 800f644:	2326      	movs	r3, #38	; 0x26
 800f646:	461a      	mov	r2, r3
 800f648:	2100      	movs	r1, #0
 800f64a:	f016 faa2 	bl	8025b92 <memset>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4618      	mov	r0, r3
 800f652:	f7fd fa4b 	bl	800caec <_ZN8touchgfx6WidgetC1Ev>
 800f656:	4a0b      	ldr	r2, [pc, #44]	; (800f684 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	22ff      	movs	r2, #255	; 0xff
 800f660:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	3328      	adds	r3, #40	; 0x28
 800f668:	2100      	movs	r1, #0
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7ff ff2d 	bl	800f4ca <_ZN8touchgfx9colortypeC1Em>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4618      	mov	r0, r3
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	0802a07c 	.word	0x0802a07c

0800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	887a      	ldrh	r2, [r7, #2]
 800f6b4:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800f6b6:	bf00      	nop
 800f6b8:	370c      	adds	r7, #12
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 800f6c2:	b480      	push	{r7}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	887a      	ldrh	r2, [r7, #2]
 800f6d2:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	807b      	strh	r3, [r7, #2]
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800f6f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7ff ffd4 	bl	800f6a4 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800f6fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f700:	4619      	mov	r1, r3
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7ff ffdd 	bl	800f6c2 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800f708:	bf00      	nop
 800f70a:	3708      	adds	r7, #8
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4618      	mov	r0, r3
 800f71e:	2326      	movs	r3, #38	; 0x26
 800f720:	461a      	mov	r2, r3
 800f722:	2100      	movs	r1, #0
 800f724:	f016 fa35 	bl	8025b92 <memset>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fd f9de 	bl	800caec <_ZN8touchgfx6WidgetC1Ev>
 800f730:	4a0b      	ldr	r2, [pc, #44]	; (800f760 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	601a      	str	r2, [r3, #0]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	3326      	adds	r3, #38	; 0x26
 800f73a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff fed2 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	22ff      	movs	r2, #255	; 0xff
 800f748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f008 fe26 	bl	80183a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	0802a340 	.word	0x0802a340

0800f764 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f770:	4a06      	ldr	r2, [pc, #24]	; (800f78c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	601a      	str	r2, [r3, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	887a      	ldrh	r2, [r7, #2]
 800f77a:	809a      	strh	r2, [r3, #4]
    }
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4618      	mov	r0, r3
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	08027644 	.word	0x08027644

0800f790 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4618      	mov	r0, r3
 800f79c:	2326      	movs	r3, #38	; 0x26
 800f79e:	461a      	mov	r2, r3
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	f016 f9f6 	bl	8025b92 <memset>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fd f99f 	bl	800caec <_ZN8touchgfx6WidgetC1Ev>
 800f7ae:	4a14      	ldr	r2, [pc, #80]	; (800f800 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	3328      	adds	r3, #40	; 0x28
 800f7b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7ff ffd1 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	3330      	adds	r3, #48	; 0x30
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7ff fe7e 	bl	800f4ca <_ZN8touchgfx9colortypeC1Em>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	869a      	strh	r2, [r3, #52]	; 0x34
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	22ff      	movs	r2, #255	; 0xff
 800f7d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	08029fd0 	.word	0x08029fd0

0800f804 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>:
class View : public Screen
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	4a05      	ldr	r2, [pc, #20]	; (800f824 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev+0x20>)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4618      	mov	r0, r3
 800f816:	f7ff fe77 	bl	800f508 <_ZN8touchgfx6ScreenD1Ev>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4618      	mov	r0, r3
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	08028220 	.word	0x08028220

0800f828 <_ZN8touchgfx4ViewI16galleryPresenterED0Ev>:
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f7ff ffe7 	bl	800f804 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>
 800f836:	2140      	movs	r1, #64	; 0x40
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f016 f8f5 	bl	8025a28 <_ZdlPvj>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <_ZN15galleryViewBaseD1Ev>:

class galleryViewBase : public touchgfx::View<galleryPresenter>
{
public:
    galleryViewBase();
    virtual ~galleryViewBase() {}
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	4a15      	ldr	r2, [pc, #84]	; (800f8a8 <_ZN15galleryViewBaseD1Ev+0x60>)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	601a      	str	r2, [r3, #0]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f85c:	4618      	mov	r0, r3
 800f85e:	f000 fa35 	bl	800fccc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f868:	4618      	mov	r0, r3
 800f86a:	f000 fafb 	bl	800fe64 <_ZN8touchgfx8TextAreaD1Ev>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	33d8      	adds	r3, #216	; 0xd8
 800f872:	4618      	mov	r0, r3
 800f874:	f000 faf6 	bl	800fe64 <_ZN8touchgfx8TextAreaD1Ev>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	33ac      	adds	r3, #172	; 0xac
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 facf 	bl	800fe20 <_ZN8touchgfx5ImageD1Ev>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	3370      	adds	r3, #112	; 0x70
 800f886:	4618      	mov	r0, r3
 800f888:	f000 faa8 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	3340      	adds	r3, #64	; 0x40
 800f890:	4618      	mov	r0, r3
 800f892:	f000 fa5f 	bl	800fd54 <_ZN8touchgfx3BoxD1Ev>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4618      	mov	r0, r3
 800f89a:	f7ff ffb3 	bl	800f804 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	080281d4 	.word	0x080281d4

0800f8ac <_ZN15galleryViewBaseD0Ev>:
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7ff ffc7 	bl	800f848 <_ZN15galleryViewBaseD1Ev>
 800f8ba:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f016 f8b2 	bl	8025a28 <_ZdlPvj>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <_ZN15galleryViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b082      	sub	sp, #8
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f8d6:	f009 ff53 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 800f8da:	4603      	mov	r3, r0
    }
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800f8e4:	b590      	push	{r4, r7, lr}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	71fb      	strb	r3, [r7, #7]
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	71bb      	strb	r3, [r7, #6]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800f8f6:	f7fc ffb9 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d105      	bne.n	800f90c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800f900:	4b0a      	ldr	r3, [pc, #40]	; (800f92c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800f902:	4a0b      	ldr	r2, [pc, #44]	; (800f930 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800f904:	2135      	movs	r1, #53	; 0x35
 800f906:	480b      	ldr	r0, [pc, #44]	; (800f934 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800f908:	f016 f8ba 	bl	8025a80 <__assert_func>
 800f90c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800f90e:	f7fc ffb9 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 800f912:	6803      	ldr	r3, [r0, #0]
 800f914:	3328      	adds	r3, #40	; 0x28
 800f916:	681c      	ldr	r4, [r3, #0]
 800f918:	797b      	ldrb	r3, [r7, #5]
 800f91a:	79ba      	ldrb	r2, [r7, #6]
 800f91c:	79f9      	ldrb	r1, [r7, #7]
 800f91e:	47a0      	blx	r4
 800f920:	4603      	mov	r3, r0
    }
 800f922:	4618      	mov	r0, r3
 800f924:	370c      	adds	r7, #12
 800f926:	46bd      	mov	sp, r7
 800f928:	bd90      	pop	{r4, r7, pc}
 800f92a:	bf00      	nop
 800f92c:	08026dc8 	.word	0x08026dc8
 800f930:	08028264 	.word	0x08028264
 800f934:	08026e0c 	.word	0x08026e0c

0800f938 <_ZN15galleryViewBaseC1Ev>:
#include <gui_generated/gallery_screen/galleryViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

galleryViewBase::galleryViewBase() :
 800f938:	b590      	push	{r4, r7, lr}
 800f93a:	b099      	sub	sp, #100	; 0x64
 800f93c:	af02      	add	r7, sp, #8
 800f93e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &galleryViewBase::buttonCallbackHandler)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4618      	mov	r0, r3
 800f944:	f000 f95c 	bl	800fc00 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev>
 800f948:	4a9b      	ldr	r2, [pc, #620]	; (800fbb8 <_ZN15galleryViewBaseC1Ev+0x280>)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	3340      	adds	r3, #64	; 0x40
 800f952:	4618      	mov	r0, r3
 800f954:	f7ff fe70 	bl	800f638 <_ZN8touchgfx3BoxC1Ev>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3370      	adds	r3, #112	; 0x70
 800f95c:	4618      	mov	r0, r3
 800f95e:	f008 fcfb 	bl	8018358 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 800f968:	f107 0310 	add.w	r3, r7, #16
 800f96c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f970:	4618      	mov	r0, r3
 800f972:	f7ff fdb9 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800f976:	f107 0310 	add.w	r3, r7, #16
 800f97a:	4619      	mov	r1, r3
 800f97c:	4620      	mov	r0, r4
 800f97e:	f7ff fec7 	bl	800f710 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	33d8      	adds	r3, #216	; 0xd8
 800f986:	4618      	mov	r0, r3
 800f988:	f7ff ff02 	bl	800f790 <_ZN8touchgfx8TextAreaC1Ev>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f992:	4618      	mov	r0, r3
 800f994:	f7ff fefc 	bl	800f790 <_ZN8touchgfx8TextAreaC1Ev>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 800f99e:	4b87      	ldr	r3, [pc, #540]	; (800fbbc <_ZN15galleryViewBaseC1Ev+0x284>)
 800f9a0:	617b      	str	r3, [r7, #20]
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	61bb      	str	r3, [r7, #24]
 800f9a6:	f107 0314 	add.w	r3, r7, #20
 800f9aa:	cb0c      	ldmia	r3, {r2, r3}
 800f9ac:	6879      	ldr	r1, [r7, #4]
 800f9ae:	f000 f94d 	bl	800fc4c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f9b8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f9bc:	9300      	str	r3, [sp, #0]
 800f9be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	2100      	movs	r1, #0
 800f9c6:	f7fc fe13 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(29, 166, 152));
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f9d0:	2298      	movs	r2, #152	; 0x98
 800f9d2:	21a6      	movs	r1, #166	; 0xa6
 800f9d4:	201d      	movs	r0, #29
 800f9d6:	f7ff ff85 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f7ff fe52 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Back_Button.setXY(0, 0);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	3370      	adds	r3, #112	; 0x70
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fc fe64 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f9f8:	f107 031c 	add.w	r3, r7, #28
 800f9fc:	2102      	movs	r1, #2
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7ff fd72 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800fa04:	f107 0320 	add.w	r3, r7, #32
 800fa08:	2103      	movs	r1, #3
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7ff fd6c 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800fa10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa14:	2108      	movs	r1, #8
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7ff fd66 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800fa1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa20:	2108      	movs	r1, #8
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7ff fd60 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800fa28:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fa2c:	f107 0220 	add.w	r2, r7, #32
 800fa30:	f107 011c 	add.w	r1, r7, #28
 800fa34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa38:	9300      	str	r3, [sp, #0]
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	f008 fbe7 	bl	8018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3370      	adds	r3, #112	; 0x70
 800fa46:	220f      	movs	r2, #15
 800fa48:	2113      	movs	r1, #19
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7ff fe48 	bl	800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	4610      	mov	r0, r2
 800fa60:	f7ff fdb9 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image1.setXY(21, 66);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	33ac      	adds	r3, #172	; 0xac
 800fa68:	2242      	movs	r2, #66	; 0x42
 800fa6a:	2115      	movs	r1, #21
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7fc fe24 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_COOLTEAM_ID));
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 800fa78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fa7c:	2107      	movs	r1, #7
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7ff fd32 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800fa84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fa88:	4619      	mov	r1, r3
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	f008 fc88 	bl	80183a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(188, 18);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	33d8      	adds	r3, #216	; 0xd8
 800fa94:	2212      	movs	r2, #18
 800fa96:	21bc      	movs	r1, #188	; 0xbc
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fc fe0e 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800faa4:	22ff      	movs	r2, #255	; 0xff
 800faa6:	21ff      	movs	r1, #255	; 0xff
 800faa8:	20ff      	movs	r0, #255	; 0xff
 800faaa:	f7ff ff1b 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800faae:	4603      	mov	r3, r0
 800fab0:	643c      	str	r4, [r7, #64]	; 0x40
 800fab2:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800fab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fab6:	68fa      	ldr	r2, [r7, #12]
 800fab8:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	33d8      	adds	r3, #216	; 0xd8
 800fabe:	64bb      	str	r3, [r7, #72]	; 0x48
 800fac0:	2300      	movs	r3, #0
 800fac2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800fac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fac8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800facc:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800fad4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fad8:	2115      	movs	r1, #21
 800fada:	4618      	mov	r0, r3
 800fadc:	f7ff fe42 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 800fae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fae4:	4619      	mov	r1, r3
 800fae6:	4620      	mov	r0, r4
 800fae8:	f008 f9ac 	bl	8017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800faec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fc f95b 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>

    textArea2.setPosition(329, 76, 141, 84);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f503 708a 	add.w	r0, r3, #276	; 0x114
 800fafc:	2354      	movs	r3, #84	; 0x54
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	238d      	movs	r3, #141	; 0x8d
 800fb02:	224c      	movs	r2, #76	; 0x4c
 800fb04:	f240 1149 	movw	r1, #329	; 0x149
 800fb08:	f7fc fd72 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f503 748a 	add.w	r4, r3, #276	; 0x114
 800fb12:	22ff      	movs	r2, #255	; 0xff
 800fb14:	21ff      	movs	r1, #255	; 0xff
 800fb16:	20ff      	movs	r0, #255	; 0xff
 800fb18:	f7ff fee4 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	64fc      	str	r4, [r7, #76]	; 0x4c
 800fb20:	60bb      	str	r3, [r7, #8]
        this->color = color;
 800fb22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb24:	68ba      	ldr	r2, [r7, #8]
 800fb26:	631a      	str	r2, [r3, #48]	; 0x30
    textArea2.setLinespacing(0);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800fb2e:	657b      	str	r3, [r7, #84]	; 0x54
 800fb30:	2300      	movs	r3, #0
 800fb32:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        linespace = space;
 800fb36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb38:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800fb3c:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID39));
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f503 748a 	add.w	r4, r3, #276	; 0x114
 800fb44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fb48:	2118      	movs	r1, #24
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff fe0a 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 800fb50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fb54:	4619      	mov	r1, r3
 800fb56:	4620      	mov	r0, r4
 800fb58:	f008 f974 	bl	8017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800fb5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fc f923 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>

    add(bg);
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	3340      	adds	r3, #64	; 0x40
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	4610      	mov	r0, r2
 800fb70:	f7ff fd22 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	3370      	adds	r3, #112	; 0x70
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	4610      	mov	r0, r2
 800fb7e:	f7ff fd1b 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	33ac      	adds	r3, #172	; 0xac
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	f7ff fd14 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	33d8      	adds	r3, #216	; 0xd8
 800fb96:	4619      	mov	r1, r3
 800fb98:	4610      	mov	r0, r2
 800fb9a:	f7ff fd0d 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800fba6:	4619      	mov	r1, r3
 800fba8:	4610      	mov	r0, r2
 800fbaa:	f7ff fd05 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	375c      	adds	r7, #92	; 0x5c
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd90      	pop	{r4, r7, pc}
 800fbb8:	080281d4 	.word	0x080281d4
 800fbbc:	0800fbd5 	.word	0x0800fbd5

0800fbc0 <_ZN15galleryViewBase11setupScreenEv>:

void galleryViewBase::setupScreen()
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]

}
 800fbc8:	bf00      	nop
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <_ZN15galleryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void galleryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	3370      	adds	r3, #112	; 0x70
 800fbe2:	683a      	ldr	r2, [r7, #0]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d106      	bne.n	800fbf6 <_ZN15galleryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //back
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenCoverTransitionEast();
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7ff fe70 	bl	800f8ce <_ZN15galleryViewBase11applicationEv>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fd f897 	bl	800cd24 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>
    }
}
 800fbf6:	bf00      	nop
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
	...

0800fc00 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev>:
    View()
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f00a fd6e 	bl	801a6ec <_ZN8touchgfx6ScreenC1Ev>
 800fc10:	4a05      	ldr	r2, [pc, #20]	; (800fc28 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev+0x28>)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	601a      	str	r2, [r3, #0]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	08028220 	.word	0x08028220

0800fc2c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	4a04      	ldr	r2, [pc, #16]	; (800fc48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr
 800fc48:	08028254 	.word	0x08028254

0800fc4c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	4639      	mov	r1, r7
 800fc58:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7ff ffe4 	bl	800fc2c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800fc64:	4a08      	ldr	r2, [pc, #32]	; (800fc88 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	3308      	adds	r3, #8
 800fc74:	463a      	mov	r2, r7
 800fc76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc7a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	4618      	mov	r0, r3
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	08028208 	.word	0x08028208

0800fc8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
    }
 800fc94:	4a04      	ldr	r2, [pc, #16]	; (800fca8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr
 800fca8:	08028254 	.word	0x08028254

0800fcac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
    }
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f7ff ffe9 	bl	800fc8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fcba:	2104      	movs	r1, #4
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f015 feb3 	bl	8025a28 <_ZdlPvj>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3708      	adds	r7, #8
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	4a05      	ldr	r2, [pc, #20]	; (800fcec <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	601a      	str	r2, [r3, #0]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7ff ffd5 	bl	800fc8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4618      	mov	r0, r3
 800fce6:	3708      	adds	r7, #8
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	08028208 	.word	0x08028208

0800fcf0 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff ffe7 	bl	800fccc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fcfe:	2110      	movs	r1, #16
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f015 fe91 	bl	8025a28 <_ZdlPvj>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	4a05      	ldr	r2, [pc, #20]	; (800fd30 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	601a      	str	r2, [r3, #0]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fc fc45 	bl	800c5b0 <_ZN8touchgfx8DrawableD1Ev>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	08029368 	.word	0x08029368

0800fd34 <_ZN8touchgfx9ContainerD0Ev>:
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff ffe7 	bl	800fd10 <_ZN8touchgfx9ContainerD1Ev>
 800fd42:	212c      	movs	r1, #44	; 0x2c
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f015 fe6f 	bl	8025a28 <_ZdlPvj>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3708      	adds	r7, #8
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	4a05      	ldr	r2, [pc, #20]	; (800fd74 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	601a      	str	r2, [r3, #0]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7fc fed3 	bl	800cb10 <_ZN8touchgfx6WidgetD1Ev>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3708      	adds	r7, #8
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	0802a07c 	.word	0x0802a07c

0800fd78 <_ZN8touchgfx3BoxD0Ev>:
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f7ff ffe7 	bl	800fd54 <_ZN8touchgfx3BoxD1Ev>
 800fd86:	2130      	movs	r1, #48	; 0x30
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f015 fe4d 	bl	8025a28 <_ZdlPvj>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4618      	mov	r0, r3
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	4a05      	ldr	r2, [pc, #20]	; (800fdb8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7ff fc23 	bl	800f5f4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	0802a148 	.word	0x0802a148

0800fdbc <_ZN8touchgfx6ButtonD0Ev>:
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff ffe7 	bl	800fd98 <_ZN8touchgfx6ButtonD1Ev>
 800fdca:	2134      	movs	r1, #52	; 0x34
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f015 fe2b 	bl	8025a28 <_ZdlPvj>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	4a05      	ldr	r2, [pc, #20]	; (800fdfc <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	601a      	str	r2, [r3, #0]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7ff ffd3 	bl	800fd98 <_ZN8touchgfx6ButtonD1Ev>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	0802a298 	.word	0x0802a298

0800fe00 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7ff ffe7 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 800fe0e:	213c      	movs	r1, #60	; 0x3c
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f015 fe09 	bl	8025a28 <_ZdlPvj>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	4a05      	ldr	r2, [pc, #20]	; (800fe40 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fc fe6d 	bl	800cb10 <_ZN8touchgfx6WidgetD1Ev>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	0802a340 	.word	0x0802a340

0800fe44 <_ZN8touchgfx5ImageD0Ev>:
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f7ff ffe7 	bl	800fe20 <_ZN8touchgfx5ImageD1Ev>
 800fe52:	212c      	movs	r1, #44	; 0x2c
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f015 fde7 	bl	8025a28 <_ZdlPvj>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	4a08      	ldr	r2, [pc, #32]	; (800fe90 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	601a      	str	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	3328      	adds	r3, #40	; 0x28
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fb ff98 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fc fe46 	bl	800cb10 <_ZN8touchgfx6WidgetD1Ev>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	08029fd0 	.word	0x08029fd0

0800fe94 <_ZN8touchgfx8TextAreaD0Ev>:
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f7ff ffe1 	bl	800fe64 <_ZN8touchgfx8TextAreaD1Ev>
 800fea2:	213c      	movs	r1, #60	; 0x3c
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f015 fdbf 	bl	8025a28 <_ZdlPvj>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4618      	mov	r0, r3
 800feae:	3708      	adds	r7, #8
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	68d2      	ldr	r2, [r2, #12]
 800fec6:	1052      	asrs	r2, r2, #1
 800fec8:	1898      	adds	r0, r3, r2
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	f003 0301 	and.w	r3, r3, #1
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d102      	bne.n	800fedc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	689b      	ldr	r3, [r3, #8]
 800feda:	e00a      	b.n	800fef2 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	68d2      	ldr	r2, [r2, #12]
 800fee4:	1052      	asrs	r2, r2, #1
 800fee6:	4413      	add	r3, r2
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	6892      	ldr	r2, [r2, #8]
 800feee:	4413      	add	r3, r2
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6839      	ldr	r1, [r7, #0]
 800fef4:	4798      	blx	r3
    }
 800fef6:	bf00      	nop
 800fef8:	3708      	adds	r7, #8
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}

0800fefe <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800fefe:	b480      	push	{r7}
 800ff00:	b083      	sub	sp, #12
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d010      	beq.n	800ff30 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d107      	bne.n	800ff26 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	f003 0301 	and.w	r3, r3, #1
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d101      	bne.n	800ff26 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800ff22:	2301      	movs	r3, #1
 800ff24:	e000      	b.n	800ff28 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800ff26:	2300      	movs	r3, #0
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d001      	beq.n	800ff30 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e000      	b.n	800ff32 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800ff30:	2300      	movs	r3, #0
    }
 800ff32:	4618      	mov	r0, r3
 800ff34:	370c      	adds	r7, #12
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr

0800ff3e <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ff3e:	b480      	push	{r7}
 800ff40:	b083      	sub	sp, #12
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
 800ff46:	460b      	mov	r3, r1
 800ff48:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	78fa      	ldrb	r2, [r7, #3]
 800ff4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800ff52:	bf00      	nop
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
	...

0800ff60 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	2326      	movs	r3, #38	; 0x26
 800ff6e:	461a      	mov	r2, r3
 800ff70:	2100      	movs	r1, #0
 800ff72:	f015 fe0e 	bl	8025b92 <memset>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fc fdb7 	bl	800caec <_ZN8touchgfx6WidgetC1Ev>
 800ff7e:	4a0a      	ldr	r2, [pc, #40]	; (800ffa8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	601a      	str	r2, [r3, #0]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	629a      	str	r2, [r3, #40]	; 0x28
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2101      	movs	r1, #1
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7ff ffd1 	bl	800ff3e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	08029e34 	.word	0x08029e34

0800ffac <_ZN8touchgfx6ButtonC1Ev>:
{
public:
    Button()
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7ff ffd2 	bl	800ff60 <_ZN8touchgfx14AbstractButtonC1Ev>
 800ffbc:	4a0c      	ldr	r2, [pc, #48]	; (800fff0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	601a      	str	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	332e      	adds	r3, #46	; 0x2e
 800ffc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7ff fa8c 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	3330      	adds	r3, #48	; 0x30
 800ffd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7ff fa85 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	22ff      	movs	r2, #255	; 0xff
 800ffe2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	0802a148 	.word	0x0802a148

0800fff4 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	889a      	ldrh	r2, [r3, #4]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	809a      	strh	r2, [r3, #4]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4618      	mov	r0, r3
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	3334      	adds	r3, #52	; 0x34
 8010022:	6839      	ldr	r1, [r7, #0]
 8010024:	4618      	mov	r0, r3
 8010026:	f7ff ffe5 	bl	800fff4 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f820 	bl	8010070 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	683a      	ldr	r2, [r7, #0]
 8010046:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010048:	bf00      	nop
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	683a      	ldr	r2, [r7, #0]
 8010062:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8010064:	bf00      	nop
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8010070:	b590      	push	{r4, r7, lr}
 8010072:	b08b      	sub	sp, #44	; 0x2c
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	3334      	adds	r3, #52	; 0x34
 801007c:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	889b      	ldrh	r3, [r3, #4]
 8010082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010086:	4293      	cmp	r3, r2
 8010088:	bf14      	ite	ne
 801008a:	2301      	movne	r3, #1
 801008c:	2300      	moveq	r3, #0
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2b00      	cmp	r3, #0
 8010092:	d06f      	beq.n	8010174 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	3334      	adds	r3, #52	; 0x34
 8010098:	613b      	str	r3, [r7, #16]
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801009e:	4b39      	ldr	r3, [pc, #228]	; (8010184 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d105      	bne.n	80100b2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 80100a6:	4b38      	ldr	r3, [pc, #224]	; (8010188 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 80100a8:	4a38      	ldr	r2, [pc, #224]	; (801018c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80100aa:	21b1      	movs	r1, #177	; 0xb1
 80100ac:	4838      	ldr	r0, [pc, #224]	; (8010190 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80100ae:	f015 fce7 	bl	8025a80 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	889a      	ldrh	r2, [r3, #4]
 80100b6:	4b37      	ldr	r3, [pc, #220]	; (8010194 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80100b8:	881b      	ldrh	r3, [r3, #0]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d305      	bcc.n	80100ca <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 80100be:	4b36      	ldr	r3, [pc, #216]	; (8010198 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80100c0:	4a32      	ldr	r2, [pc, #200]	; (801018c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80100c2:	21b2      	movs	r1, #178	; 0xb2
 80100c4:	4832      	ldr	r0, [pc, #200]	; (8010190 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80100c6:	f015 fcdb 	bl	8025a80 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80100ca:	4b34      	ldr	r3, [pc, #208]	; (801019c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	4b2d      	ldr	r3, [pc, #180]	; (8010184 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80100d0:	6819      	ldr	r1, [r3, #0]
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	889b      	ldrh	r3, [r3, #4]
 80100d6:	005b      	lsls	r3, r3, #1
 80100d8:	440b      	add	r3, r1
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	4413      	add	r3, r2
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	3334      	adds	r3, #52	; 0x34
 80100e8:	61bb      	str	r3, [r7, #24]
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80100ee:	4b25      	ldr	r3, [pc, #148]	; (8010184 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d105      	bne.n	8010102 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 80100f6:	4b24      	ldr	r3, [pc, #144]	; (8010188 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 80100f8:	4a24      	ldr	r2, [pc, #144]	; (801018c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80100fa:	21b1      	movs	r1, #177	; 0xb1
 80100fc:	4824      	ldr	r0, [pc, #144]	; (8010190 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80100fe:	f015 fcbf 	bl	8025a80 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	889a      	ldrh	r2, [r3, #4]
 8010106:	4b23      	ldr	r3, [pc, #140]	; (8010194 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8010108:	881b      	ldrh	r3, [r3, #0]
 801010a:	429a      	cmp	r2, r3
 801010c:	d305      	bcc.n	801011a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 801010e:	4b22      	ldr	r3, [pc, #136]	; (8010198 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8010110:	4a1e      	ldr	r2, [pc, #120]	; (801018c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8010112:	21b2      	movs	r1, #178	; 0xb2
 8010114:	481e      	ldr	r0, [pc, #120]	; (8010190 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8010116:	f015 fcb3 	bl	8025a80 <__assert_func>
        return texts->getText(typedTextId);
 801011a:	4b21      	ldr	r3, [pc, #132]	; (80101a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	889b      	ldrh	r3, [r3, #4]
 8010122:	4619      	mov	r1, r3
 8010124:	4610      	mov	r0, r2
 8010126:	f002 fd0b 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 801012a:	4603      	mov	r3, r0
 801012c:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 801012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	3328      	adds	r3, #40	; 0x28
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	6a39      	ldr	r1, [r7, #32]
 8010138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801013a:	4798      	blx	r3
 801013c:	4603      	mov	r3, r0
 801013e:	b2dc      	uxtb	r4, r3
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	3340      	adds	r3, #64	; 0x40
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	6a39      	ldr	r1, [r7, #32]
 801014a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801014c:	4798      	blx	r3
 801014e:	4603      	mov	r3, r0
 8010150:	b2db      	uxtb	r3, r3
 8010152:	fb14 f303 	smulbb	r3, r4, r3
 8010156:	b2dc      	uxtb	r4, r3
 8010158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3324      	adds	r3, #36	; 0x24
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6a39      	ldr	r1, [r7, #32]
 8010162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010164:	4798      	blx	r3
 8010166:	4603      	mov	r3, r0
 8010168:	4423      	add	r3, r4
 801016a:	b2da      	uxtb	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8010172:	e003      	b.n	801017c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2200      	movs	r2, #0
 8010178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 801017c:	bf00      	nop
 801017e:	372c      	adds	r7, #44	; 0x2c
 8010180:	46bd      	mov	sp, r7
 8010182:	bd90      	pop	{r4, r7, pc}
 8010184:	2000b458 	.word	0x2000b458
 8010188:	08026e4c 	.word	0x08026e4c
 801018c:	08028340 	.word	0x08028340
 8010190:	08026e90 	.word	0x08026e90
 8010194:	2000b45c 	.word	0x2000b45c
 8010198:	08026ed4 	.word	0x08026ed4
 801019c:	2000b460 	.word	0x2000b460
 80101a0:	2000b464 	.word	0x2000b464

080101a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7ff faee 	bl	800f790 <_ZN8touchgfx8TextAreaC1Ev>
 80101b4:	4a05      	ldr	r2, [pc, #20]	; (80101cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	601a      	str	r2, [r3, #0]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2200      	movs	r2, #0
 80101be:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4618      	mov	r0, r3
 80101c4:	3708      	adds	r7, #8
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	0802a1ec 	.word	0x0802a1ec

080101d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	683a      	ldr	r2, [r7, #0]
 80101de:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>:
class View : public Screen
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	4a05      	ldr	r2, [pc, #20]	; (801020c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev+0x20>)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	601a      	str	r2, [r3, #0]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7ff f983 	bl	800f508 <_ZN8touchgfx6ScreenD1Ev>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	4618      	mov	r0, r3
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	08028314 	.word	0x08028314

08010210 <_ZN8touchgfx4ViewI17gameoverPresenterED0Ev>:
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7ff ffe7 	bl	80101ec <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>
 801021e:	2140      	movs	r1, #64	; 0x40
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f015 fc01 	bl	8025a28 <_ZdlPvj>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <_ZN16gameoverViewBaseD1Ev>:

class gameoverViewBase : public touchgfx::View<gameoverPresenter>
{
public:
    gameoverViewBase();
    virtual ~gameoverViewBase() {}
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	4a15      	ldr	r2, [pc, #84]	; (8010290 <_ZN16gameoverViewBaseD1Ev+0x60>)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010244:	4618      	mov	r0, r3
 8010246:	f000 fa3f 	bl	80106c8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010250:	4618      	mov	r0, r3
 8010252:	f7ff fda1 	bl	800fd98 <_ZN8touchgfx6ButtonD1Ev>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	33f4      	adds	r3, #244	; 0xf4
 801025a:	4618      	mov	r0, r3
 801025c:	f000 fa7e 	bl	801075c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	33b8      	adds	r3, #184	; 0xb8
 8010264:	4618      	mov	r0, r3
 8010266:	f7ff fdfd 	bl	800fe64 <_ZN8touchgfx8TextAreaD1Ev>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	3370      	adds	r3, #112	; 0x70
 801026e:	4618      	mov	r0, r3
 8010270:	f000 fa4c 	bl	801070c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3340      	adds	r3, #64	; 0x40
 8010278:	4618      	mov	r0, r3
 801027a:	f7ff fd6b 	bl	800fd54 <_ZN8touchgfx3BoxD1Ev>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4618      	mov	r0, r3
 8010282:	f7ff ffb3 	bl	80101ec <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4618      	mov	r0, r3
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	080282c8 	.word	0x080282c8

08010294 <_ZN16gameoverViewBaseD0Ev>:
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7ff ffc7 	bl	8010230 <_ZN16gameoverViewBaseD1Ev>
 80102a2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f015 fbbe 	bl	8025a28 <_ZdlPvj>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4618      	mov	r0, r3
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <_ZN16gameoverViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80102be:	f009 fa5f 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 80102c2:	4603      	mov	r3, r0
    }
 80102c4:	4618      	mov	r0, r3
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <_ZN16gameoverViewBaseC1Ev>:
#include <gui_generated/gameover_screen/gameoverViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

gameoverViewBase::gameoverViewBase() :
 80102cc:	b590      	push	{r4, r7, lr}
 80102ce:	b09d      	sub	sp, #116	; 0x74
 80102d0:	af02      	add	r7, sp, #8
 80102d2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &gameoverViewBase::buttonCallbackHandler)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f000 f9c0 	bl	801065c <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev>
 80102dc:	4ac5      	ldr	r2, [pc, #788]	; (80105f4 <_ZN16gameoverViewBaseC1Ev+0x328>)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	601a      	str	r2, [r3, #0]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	3340      	adds	r3, #64	; 0x40
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7ff f9a6 	bl	800f638 <_ZN8touchgfx3BoxC1Ev>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	3370      	adds	r3, #112	; 0x70
 80102f0:	4618      	mov	r0, r3
 80102f2:	f008 f991 	bl	8018618 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	33b8      	adds	r3, #184	; 0xb8
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7ff fa48 	bl	800f790 <_ZN8touchgfx8TextAreaC1Ev>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	33f4      	adds	r3, #244	; 0xf4
 8010304:	4618      	mov	r0, r3
 8010306:	f7ff ff4d 	bl	80101a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff fe4b 	bl	800ffac <_ZN8touchgfx6ButtonC1Ev>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 801031c:	4bb6      	ldr	r3, [pc, #728]	; (80105f8 <_ZN16gameoverViewBaseC1Ev+0x32c>)
 801031e:	617b      	str	r3, [r7, #20]
 8010320:	2300      	movs	r3, #0
 8010322:	61bb      	str	r3, [r7, #24]
 8010324:	f107 0314 	add.w	r3, r7, #20
 8010328:	cb0c      	ldmia	r3, {r2, r3}
 801032a:	6879      	ldr	r1, [r7, #4]
 801032c:	f000 f9ac 	bl	8010688 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010336:	f44f 7388 	mov.w	r3, #272	; 0x110
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010340:	2200      	movs	r2, #0
 8010342:	2100      	movs	r1, #0
 8010344:	f7fc f954 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801034e:	22ff      	movs	r2, #255	; 0xff
 8010350:	21ff      	movs	r1, #255	; 0xff
 8010352:	20ff      	movs	r0, #255	; 0xff
 8010354:	f7ff fac6 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010358:	4603      	mov	r3, r0
 801035a:	4619      	mov	r1, r3
 801035c:	4620      	mov	r0, r4
 801035e:	f7ff f993 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 0);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	3370      	adds	r3, #112	; 0x70
 8010366:	2200      	movs	r2, #0
 8010368:	2100      	movs	r1, #0
 801036a:	4618      	mov	r0, r3
 801036c:	f7fc f9a5 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010376:	f107 031c 	add.w	r3, r7, #28
 801037a:	2102      	movs	r1, #2
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff f8b3 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010382:	f107 0320 	add.w	r3, r7, #32
 8010386:	2103      	movs	r1, #3
 8010388:	4618      	mov	r0, r3
 801038a:	f7ff f8ad 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 801038e:	f107 0220 	add.w	r2, r7, #32
 8010392:	f107 031c 	add.w	r3, r7, #28
 8010396:	4619      	mov	r1, r3
 8010398:	4620      	mov	r0, r4
 801039a:	f007 fd8d 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID21));
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80103a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103a8:	210b      	movs	r1, #11
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7ff f9da 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 80103b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103b4:	4619      	mov	r1, r3
 80103b6:	4620      	mov	r0, r4
 80103b8:	f7ff fe2c 	bl	8010014 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80103bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fb fcf3 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80103cc:	22ff      	movs	r2, #255	; 0xff
 80103ce:	21ff      	movs	r1, #255	; 0xff
 80103d0:	20ff      	movs	r0, #255	; 0xff
 80103d2:	f7ff fa87 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80103d6:	4603      	mov	r3, r0
 80103d8:	4619      	mov	r1, r3
 80103da:	4620      	mov	r0, r4
 80103dc:	f7ff fe2c 	bl	8010038 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80103e6:	22ff      	movs	r2, #255	; 0xff
 80103e8:	21ff      	movs	r1, #255	; 0xff
 80103ea:	20ff      	movs	r0, #255	; 0xff
 80103ec:	f7ff fa7a 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80103f0:	4603      	mov	r3, r0
 80103f2:	4619      	mov	r1, r3
 80103f4:	4620      	mov	r0, r4
 80103f6:	f7ff fe2d 	bl	8010054 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010406:	4619      	mov	r1, r3
 8010408:	4610      	mov	r0, r2
 801040a:	f7ff f8e4 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    gameover_text.setXY(179, 124);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	33b8      	adds	r3, #184	; 0xb8
 8010412:	227c      	movs	r2, #124	; 0x7c
 8010414:	21b3      	movs	r1, #179	; 0xb3
 8010416:	4618      	mov	r0, r3
 8010418:	f7fc f94f 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    gameover_text.setColor(touchgfx::Color::getColorFrom24BitRGB(235, 0, 0));
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010422:	2200      	movs	r2, #0
 8010424:	2100      	movs	r1, #0
 8010426:	20eb      	movs	r0, #235	; 0xeb
 8010428:	f7ff fa5c 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801042c:	4603      	mov	r3, r0
 801042e:	64fc      	str	r4, [r7, #76]	; 0x4c
 8010430:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010434:	693a      	ldr	r2, [r7, #16]
 8010436:	631a      	str	r2, [r3, #48]	; 0x30
    gameover_text.setLinespacing(0);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	33b8      	adds	r3, #184	; 0xb8
 801043c:	657b      	str	r3, [r7, #84]	; 0x54
 801043e:	2300      	movs	r3, #0
 8010440:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        linespace = space;
 8010444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010446:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 801044a:	869a      	strh	r2, [r3, #52]	; 0x34
    gameover_text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010456:	2112      	movs	r1, #18
 8010458:	4618      	mov	r0, r3
 801045a:	f7ff f983 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 801045e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010462:	4619      	mov	r1, r3
 8010464:	4620      	mov	r0, r4
 8010466:	f007 fced 	bl	8017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 801046a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801046e:	4618      	mov	r0, r3
 8010470:	f7fb fc9c 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>

    score.setXY(166, 149);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	33f4      	adds	r3, #244	; 0xf4
 8010478:	2295      	movs	r2, #149	; 0x95
 801047a:	21a6      	movs	r1, #166	; 0xa6
 801047c:	4618      	mov	r0, r3
 801047e:	f7fc f91c 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 173, 173));
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 8010488:	22ad      	movs	r2, #173	; 0xad
 801048a:	21ad      	movs	r1, #173	; 0xad
 801048c:	2000      	movs	r0, #0
 801048e:	f7ff fa29 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010492:	4603      	mov	r3, r0
 8010494:	65bc      	str	r4, [r7, #88]	; 0x58
 8010496:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8010498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801049a:	68fa      	ldr	r2, [r7, #12]
 801049c:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	33f4      	adds	r3, #244	; 0xf4
 80104a2:	663b      	str	r3, [r7, #96]	; 0x60
 80104a4:	2300      	movs	r3, #0
 80104a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        linespace = space;
 80104aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104ac:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80104b0:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID35).getText());
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80104b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80104bc:	2114      	movs	r1, #20
 80104be:	4618      	mov	r0, r3
 80104c0:	f7ff f950 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 80104c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80104c8:	667b      	str	r3, [r7, #100]	; 0x64
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80104ca:	4b4c      	ldr	r3, [pc, #304]	; (80105fc <_ZN16gameoverViewBaseC1Ev+0x330>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d105      	bne.n	80104de <_ZN16gameoverViewBaseC1Ev+0x212>
 80104d2:	4b4b      	ldr	r3, [pc, #300]	; (8010600 <_ZN16gameoverViewBaseC1Ev+0x334>)
 80104d4:	4a4b      	ldr	r2, [pc, #300]	; (8010604 <_ZN16gameoverViewBaseC1Ev+0x338>)
 80104d6:	21b1      	movs	r1, #177	; 0xb1
 80104d8:	484b      	ldr	r0, [pc, #300]	; (8010608 <_ZN16gameoverViewBaseC1Ev+0x33c>)
 80104da:	f015 fad1 	bl	8025a80 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80104de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104e0:	889a      	ldrh	r2, [r3, #4]
 80104e2:	4b4a      	ldr	r3, [pc, #296]	; (801060c <_ZN16gameoverViewBaseC1Ev+0x340>)
 80104e4:	881b      	ldrh	r3, [r3, #0]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d305      	bcc.n	80104f6 <_ZN16gameoverViewBaseC1Ev+0x22a>
 80104ea:	4b49      	ldr	r3, [pc, #292]	; (8010610 <_ZN16gameoverViewBaseC1Ev+0x344>)
 80104ec:	4a45      	ldr	r2, [pc, #276]	; (8010604 <_ZN16gameoverViewBaseC1Ev+0x338>)
 80104ee:	21b2      	movs	r1, #178	; 0xb2
 80104f0:	4845      	ldr	r0, [pc, #276]	; (8010608 <_ZN16gameoverViewBaseC1Ev+0x33c>)
 80104f2:	f015 fac5 	bl	8025a80 <__assert_func>
        return texts->getText(typedTextId);
 80104f6:	4b47      	ldr	r3, [pc, #284]	; (8010614 <_ZN16gameoverViewBaseC1Ev+0x348>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80104fc:	4611      	mov	r1, r2
 80104fe:	4618      	mov	r0, r3
 8010500:	f002 fb1e 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 8010504:	4603      	mov	r3, r0
 8010506:	4a44      	ldr	r2, [pc, #272]	; (8010618 <_ZN16gameoverViewBaseC1Ev+0x34c>)
 8010508:	2114      	movs	r1, #20
 801050a:	4620      	mov	r0, r4
 801050c:	f00b fb92 	bl	801bc34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010514:	4618      	mov	r0, r3
 8010516:	f7fb fc49 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010526:	4619      	mov	r1, r3
 8010528:	4610      	mov	r0, r2
 801052a:	f7ff fe51 	bl	80101d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	33f4      	adds	r3, #244	; 0xf4
 8010532:	4618      	mov	r0, r3
 8010534:	f007 fc5c 	bl	8017df0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 801053e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010542:	2113      	movs	r1, #19
 8010544:	4618      	mov	r0, r3
 8010546:	f7ff f90d 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 801054a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801054e:	4619      	mov	r1, r3
 8010550:	4620      	mov	r0, r4
 8010552:	f007 fc77 	bl	8017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010556:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801055a:	4618      	mov	r0, r3
 801055c:	f7fb fc26 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>

    button1.setXY(569, -60);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010566:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 801056a:	f240 2139 	movw	r1, #569	; 0x239
 801056e:	4618      	mov	r0, r3
 8010570:	f7fc f8a3 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f503 749a 	add.w	r4, r3, #308	; 0x134
 801057a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801057e:	2100      	movs	r1, #0
 8010580:	4618      	mov	r0, r3
 8010582:	f7fe ffb1 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801058a:	2101      	movs	r1, #1
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe ffab 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010592:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010596:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801059a:	4619      	mov	r1, r3
 801059c:	4620      	mov	r0, r4
 801059e:	f007 fc8b 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    add(bg);
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3340      	adds	r3, #64	; 0x40
 80105a8:	4619      	mov	r1, r3
 80105aa:	4610      	mov	r0, r2
 80105ac:	f7ff f804 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	3370      	adds	r3, #112	; 0x70
 80105b6:	4619      	mov	r1, r3
 80105b8:	4610      	mov	r0, r2
 80105ba:	f7fe fffd 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gameover_text);
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	33b8      	adds	r3, #184	; 0xb8
 80105c4:	4619      	mov	r1, r3
 80105c6:	4610      	mov	r0, r2
 80105c8:	f7fe fff6 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	33f4      	adds	r3, #244	; 0xf4
 80105d2:	4619      	mov	r1, r3
 80105d4:	4610      	mov	r0, r2
 80105d6:	f7fe ffef 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80105e2:	4619      	mov	r1, r3
 80105e4:	4610      	mov	r0, r2
 80105e6:	f7fe ffe7 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4618      	mov	r0, r3
 80105ee:	376c      	adds	r7, #108	; 0x6c
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd90      	pop	{r4, r7, pc}
 80105f4:	080282c8 	.word	0x080282c8
 80105f8:	08010631 	.word	0x08010631
 80105fc:	2000b458 	.word	0x2000b458
 8010600:	08026e4c 	.word	0x08026e4c
 8010604:	08028340 	.word	0x08028340
 8010608:	08026e90 	.word	0x08026e90
 801060c:	2000b45c 	.word	0x2000b45c
 8010610:	08026ed4 	.word	0x08026ed4
 8010614:	2000b464 	.word	0x2000b464
 8010618:	08026fac 	.word	0x08026fac

0801061c <_ZN16gameoverViewBase11setupScreenEv>:

void gameoverViewBase::setupScreen()
{
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]

}
 8010624:	bf00      	nop
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <_ZN16gameoverViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void gameoverViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	3370      	adds	r3, #112	; 0x70
 801063e:	683a      	ldr	r2, [r7, #0]
 8010640:	429a      	cmp	r2, r3
 8010642:	d106      	bne.n	8010652 <_ZN16gameoverViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with no screen transition
        application().gotoPongScreenNoTransition();
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7ff fe36 	bl	80102b6 <_ZN16gameoverViewBase11applicationEv>
 801064a:	4603      	mov	r3, r0
 801064c:	4618      	mov	r0, r3
 801064e:	f7fc fc81 	bl	800cf54 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv>
    }
}
 8010652:	bf00      	nop
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
	...

0801065c <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev>:
    View()
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4618      	mov	r0, r3
 8010668:	f00a f840 	bl	801a6ec <_ZN8touchgfx6ScreenC1Ev>
 801066c:	4a05      	ldr	r2, [pc, #20]	; (8010684 <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev+0x28>)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	601a      	str	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2200      	movs	r2, #0
 8010676:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	4618      	mov	r0, r3
 801067c:	3708      	adds	r7, #8
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	08028314 	.word	0x08028314

08010688 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	4639      	mov	r1, r7
 8010694:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	4618      	mov	r0, r3
 801069c:	f7ff fac6 	bl	800fc2c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80106a0:	4a08      	ldr	r2, [pc, #32]	; (80106c4 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	3308      	adds	r3, #8
 80106b0:	463a      	mov	r2, r7
 80106b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106b6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	4618      	mov	r0, r3
 80106be:	3710      	adds	r7, #16
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	080282fc 	.word	0x080282fc

080106c8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	4a05      	ldr	r2, [pc, #20]	; (80106e8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff fad7 	bl	800fc8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	080282fc 	.word	0x080282fc

080106ec <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f7ff ffe7 	bl	80106c8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80106fa:	2110      	movs	r1, #16
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f015 f993 	bl	8025a28 <_ZdlPvj>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4618      	mov	r0, r3
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	4a08      	ldr	r2, [pc, #32]	; (8010738 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	601a      	str	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	3334      	adds	r3, #52	; 0x34
 801071e:	4618      	mov	r0, r3
 8010720:	f7fb fb44 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	f7ff fb36 	bl	800fd98 <_ZN8touchgfx6ButtonD1Ev>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4618      	mov	r0, r3
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	0802a3ac 	.word	0x0802a3ac

0801073c <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7ff ffe1 	bl	801070c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801074a:	2148      	movs	r1, #72	; 0x48
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f015 f96b 	bl	8025a28 <_ZdlPvj>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	4a05      	ldr	r2, [pc, #20]	; (801077c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	601a      	str	r2, [r3, #0]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff fb79 	bl	800fe64 <_ZN8touchgfx8TextAreaD1Ev>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	0802a1ec 	.word	0x0802a1ec

08010780 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff ffe7 	bl	801075c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801078e:	2140      	movs	r1, #64	; 0x40
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f015 f949 	bl	8025a28 <_ZdlPvj>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	4618      	mov	r0, r3
 801079a:	3708      	adds	r7, #8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	68d2      	ldr	r2, [r2, #12]
 80107b2:	1052      	asrs	r2, r2, #1
 80107b4:	1898      	adds	r0, r3, r2
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	f003 0301 	and.w	r3, r3, #1
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d102      	bne.n	80107c8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	689b      	ldr	r3, [r3, #8]
 80107c6:	e00a      	b.n	80107de <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	68d2      	ldr	r2, [r2, #12]
 80107d0:	1052      	asrs	r2, r2, #1
 80107d2:	4413      	add	r3, r2
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	687a      	ldr	r2, [r7, #4]
 80107d8:	6892      	ldr	r2, [r2, #8]
 80107da:	4413      	add	r3, r2
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	4798      	blx	r3
    }
 80107e2:	bf00      	nop
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80107ea:	b480      	push	{r7}
 80107ec:	b083      	sub	sp, #12
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d010      	beq.n	801081c <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	689b      	ldr	r3, [r3, #8]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d107      	bne.n	8010812 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	f003 0301 	and.w	r3, r3, #1
 801080a:	2b00      	cmp	r3, #0
 801080c:	d101      	bne.n	8010812 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801080e:	2301      	movs	r3, #1
 8010810:	e000      	b.n	8010814 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010812:	2300      	movs	r3, #0
 8010814:	2b01      	cmp	r3, #1
 8010816:	d001      	beq.n	801081c <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010818:	2301      	movs	r3, #1
 801081a:	e000      	b.n	801081e <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801081c:	2300      	movs	r3, #0
    }
 801081e:	4618      	mov	r0, r3
 8010820:	370c      	adds	r7, #12
 8010822:	46bd      	mov	sp, r7
 8010824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010828:	4770      	bx	lr

0801082a <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 801082a:	b480      	push	{r7}
 801082c:	b083      	sub	sp, #12
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
 8010832:	460b      	mov	r3, r1
 8010834:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	78fa      	ldrb	r2, [r7, #3]
 801083a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801083e:	bf00      	nop
 8010840:	370c      	adds	r7, #12
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr
	...

0801084c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>:
class View : public Screen
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	4a05      	ldr	r2, [pc, #20]	; (801086c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev+0x20>)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4618      	mov	r0, r3
 801085e:	f7fe fe53 	bl	800f508 <_ZN8touchgfx6ScreenD1Ev>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	4618      	mov	r0, r3
 8010866:	3708      	adds	r7, #8
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	080283dc 	.word	0x080283dc

08010870 <_ZN8touchgfx4ViewI14MusicPresenterED0Ev>:
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7ff ffe7 	bl	801084c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 801087e:	2140      	movs	r1, #64	; 0x40
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f015 f8d1 	bl	8025a28 <_ZdlPvj>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4618      	mov	r0, r3
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <_ZN13MusicViewBaseD1Ev>:

class MusicViewBase : public touchgfx::View<MusicPresenter>
{
public:
    MusicViewBase();
    virtual ~MusicViewBase() {}
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	4a27      	ldr	r2, [pc, #156]	; (8010938 <_ZN13MusicViewBaseD1Ev+0xa8>)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	601a      	str	r2, [r3, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80108a4:	4618      	mov	r0, r3
 80108a6:	f000 fd23 	bl	80112f0 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7ff fa93 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80108bc:	4618      	mov	r0, r3
 80108be:	f7ff ff25 	bl	801070c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7ff ff1f 	bl	801070c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7ff fa81 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff fa7b 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7ff fa75 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7ff fa6f 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	33e8      	adds	r3, #232	; 0xe8
 8010902:	4618      	mov	r0, r3
 8010904:	f7ff ff2a 	bl	801075c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	33ac      	adds	r3, #172	; 0xac
 801090c:	4618      	mov	r0, r3
 801090e:	f7ff fa65 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	3370      	adds	r3, #112	; 0x70
 8010916:	4618      	mov	r0, r3
 8010918:	f7ff faa4 	bl	800fe64 <_ZN8touchgfx8TextAreaD1Ev>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	3340      	adds	r3, #64	; 0x40
 8010920:	4618      	mov	r0, r3
 8010922:	f7ff fa17 	bl	800fd54 <_ZN8touchgfx3BoxD1Ev>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	4618      	mov	r0, r3
 801092a:	f7ff ff8f 	bl	801084c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	4618      	mov	r0, r3
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	08028378 	.word	0x08028378

0801093c <_ZN13MusicViewBaseD0Ev>:
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f7ff ffa3 	bl	8010890 <_ZN13MusicViewBaseD1Ev>
 801094a:	f44f 7146 	mov.w	r1, #792	; 0x318
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f015 f86a 	bl	8025a28 <_ZdlPvj>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4618      	mov	r0, r3
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <_ZN13MusicViewBase11controlPlayEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void controlPlay()
 801095e:	b480      	push	{r7}
 8010960:	b083      	sub	sp, #12
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 8010966:	bf00      	nop
 8010968:	370c      	adds	r7, #12
 801096a:	46bd      	mov	sp, r7
 801096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010970:	4770      	bx	lr

08010972 <_ZN13MusicViewBase11controlStopEv>:

    virtual void controlStop()
 8010972:	b480      	push	{r7}
 8010974:	b083      	sub	sp, #12
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 801097a:	bf00      	nop
 801097c:	370c      	adds	r7, #12
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr

08010986 <_ZN13MusicViewBase11controlPrevEv>:

    virtual void controlPrev()
 8010986:	b480      	push	{r7}
 8010988:	b083      	sub	sp, #12
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 801098e:	bf00      	nop
 8010990:	370c      	adds	r7, #12
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr

0801099a <_ZN13MusicViewBase11controlNextEv>:

    virtual void controlNext()
 801099a:	b480      	push	{r7}
 801099c:	b083      	sub	sp, #12
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80109a2:	bf00      	nop
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <_ZN13MusicViewBase17controlVolumeDownEv>:

    virtual void controlVolumeDown()
 80109ae:	b480      	push	{r7}
 80109b0:	b083      	sub	sp, #12
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80109b6:	bf00      	nop
 80109b8:	370c      	adds	r7, #12
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr

080109c2 <_ZN13MusicViewBase15controlVolumeUpEv>:

    virtual void controlVolumeUp()
 80109c2:	b480      	push	{r7}
 80109c4:	b083      	sub	sp, #12
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80109ca:	bf00      	nop
 80109cc:	370c      	adds	r7, #12
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr

080109d6 <_ZN13MusicViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b082      	sub	sp, #8
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80109de:	f008 fecf 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 80109e2:	4603      	mov	r3, r0
    }
 80109e4:	4618      	mov	r0, r3
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <_ZN13MusicViewBaseC1Ev>:
#include <gui_generated/music_screen/MusicViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MusicViewBase::MusicViewBase() :
 80109ec:	b590      	push	{r4, r7, lr}
 80109ee:	b0b7      	sub	sp, #220	; 0xdc
 80109f0:	af02      	add	r7, sp, #8
 80109f2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MusicViewBase::buttonCallbackHandler)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f000 fc44 	bl	8011284 <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>
 80109fc:	4a94      	ldr	r2, [pc, #592]	; (8010c50 <_ZN13MusicViewBaseC1Ev+0x264>)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	601a      	str	r2, [r3, #0]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	3340      	adds	r3, #64	; 0x40
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fe fe16 	bl	800f638 <_ZN8touchgfx3BoxC1Ev>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	3370      	adds	r3, #112	; 0x70
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7fe febd 	bl	800f790 <_ZN8touchgfx8TextAreaC1Ev>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	33ac      	adds	r3, #172	; 0xac
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f007 fc9c 	bl	8018358 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	33e8      	adds	r3, #232	; 0xe8
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7ff fbbd 	bl	80101a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010a30:	4618      	mov	r0, r3
 8010a32:	f007 fc91 	bl	8018358 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f007 fc8b 	bl	8018358 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f007 fc85 	bl	8018358 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010a54:	4618      	mov	r0, r3
 8010a56:	f007 fc7f 	bl	8018358 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010a60:	4618      	mov	r0, r3
 8010a62:	f007 fdd9 	bl	8018618 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f007 fdd3 	bl	8018618 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f007 fc6d 	bl	8018358 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8010a84:	4b73      	ldr	r3, [pc, #460]	; (8010c54 <_ZN13MusicViewBaseC1Ev+0x268>)
 8010a86:	617b      	str	r3, [r7, #20]
 8010a88:	2300      	movs	r3, #0
 8010a8a:	61bb      	str	r3, [r7, #24]
 8010a8c:	f107 0314 	add.w	r3, r7, #20
 8010a90:	cb0c      	ldmia	r3, {r2, r3}
 8010a92:	6879      	ldr	r1, [r7, #4]
 8010a94:	f000 fc0c 	bl	80112b0 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010a9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	2100      	movs	r1, #0
 8010aac:	f7fb fda0 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 142, 18));
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010ab6:	2212      	movs	r2, #18
 8010ab8:	218e      	movs	r1, #142	; 0x8e
 8010aba:	20f0      	movs	r0, #240	; 0xf0
 8010abc:	f7fe ff12 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f7fe fddf 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(132, 6);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	3370      	adds	r3, #112	; 0x70
 8010ace:	2206      	movs	r2, #6
 8010ad0:	2184      	movs	r1, #132	; 0x84
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fb fdf1 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010ade:	2200      	movs	r2, #0
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	f7fe fefe 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 8010aee:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010af0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3370      	adds	r3, #112	; 0x70
 8010afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010b00:	2300      	movs	r3, #0
 8010b02:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 8010b06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b0a:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8010b0e:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010b16:	f107 031c 	add.w	r3, r7, #28
 8010b1a:	2108      	movs	r1, #8
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fe fe21 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 8010b22:	f107 031c 	add.w	r3, r7, #28
 8010b26:	4619      	mov	r1, r3
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f007 f98b 	bl	8017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010b2e:	f107 031c 	add.w	r3, r7, #28
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fb f93a 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>

    Play_Button.setXY(48, 212);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	33ac      	adds	r3, #172	; 0xac
 8010b3c:	22d4      	movs	r2, #212	; 0xd4
 8010b3e:	2130      	movs	r1, #48	; 0x30
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fb fdba 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    Play_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8010b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b50:	2104      	movs	r1, #4
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fe fcc8 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b5c:	2105      	movs	r1, #5
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fe fcc2 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010b68:	210c      	movs	r1, #12
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fe fcbc 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010b70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010b74:	210c      	movs	r1, #12
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7fe fcb6 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010b7c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010b80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b84:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8010b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	4603      	mov	r3, r0
 8010b90:	4620      	mov	r0, r4
 8010b92:	f007 fb3d 	bl	8018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Play_Button.setIconXY(19, 14);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	33ac      	adds	r3, #172	; 0xac
 8010b9a:	220e      	movs	r2, #14
 8010b9c:	2113      	movs	r1, #19
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fe fd9e 	bl	800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Play_Button.setAction(buttonCallback);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	4610      	mov	r0, r2
 8010bb4:	f7fe fd0f 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    MusicTextArea.setPosition(67, 109, 379, 54);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8010bbe:	2336      	movs	r3, #54	; 0x36
 8010bc0:	9300      	str	r3, [sp, #0]
 8010bc2:	f240 137b 	movw	r3, #379	; 0x17b
 8010bc6:	226d      	movs	r2, #109	; 0x6d
 8010bc8:	2143      	movs	r1, #67	; 0x43
 8010bca:	f7fb fd11 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    MusicTextArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	2100      	movs	r1, #0
 8010bd8:	2000      	movs	r0, #0
 8010bda:	f7fe fe83 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010bde:	4603      	mov	r3, r0
 8010be0:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8010be4:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8010be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	631a      	str	r2, [r3, #48]	; 0x30
    MusicTextArea.setLinespacing(0);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	33e8      	adds	r3, #232	; 0xe8
 8010bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 8010bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010c00:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8010c04:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(MusicTextAreaBuffer, MUSICTEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 8010c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010c10:	2116      	movs	r1, #22
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fe fda6 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 8010c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010c1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010c20:	4b0d      	ldr	r3, [pc, #52]	; (8010c58 <_ZN13MusicViewBaseC1Ev+0x26c>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d105      	bne.n	8010c34 <_ZN13MusicViewBaseC1Ev+0x248>
 8010c28:	4b0c      	ldr	r3, [pc, #48]	; (8010c5c <_ZN13MusicViewBaseC1Ev+0x270>)
 8010c2a:	4a0d      	ldr	r2, [pc, #52]	; (8010c60 <_ZN13MusicViewBaseC1Ev+0x274>)
 8010c2c:	21b1      	movs	r1, #177	; 0xb1
 8010c2e:	480d      	ldr	r0, [pc, #52]	; (8010c64 <_ZN13MusicViewBaseC1Ev+0x278>)
 8010c30:	f014 ff26 	bl	8025a80 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010c38:	889a      	ldrh	r2, [r3, #4]
 8010c3a:	4b0b      	ldr	r3, [pc, #44]	; (8010c68 <_ZN13MusicViewBaseC1Ev+0x27c>)
 8010c3c:	881b      	ldrh	r3, [r3, #0]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d316      	bcc.n	8010c70 <_ZN13MusicViewBaseC1Ev+0x284>
 8010c42:	4b0a      	ldr	r3, [pc, #40]	; (8010c6c <_ZN13MusicViewBaseC1Ev+0x280>)
 8010c44:	4a06      	ldr	r2, [pc, #24]	; (8010c60 <_ZN13MusicViewBaseC1Ev+0x274>)
 8010c46:	21b2      	movs	r1, #178	; 0xb2
 8010c48:	4806      	ldr	r0, [pc, #24]	; (8010c64 <_ZN13MusicViewBaseC1Ev+0x278>)
 8010c4a:	f014 ff19 	bl	8025a80 <__assert_func>
 8010c4e:	bf00      	nop
 8010c50:	08028378 	.word	0x08028378
 8010c54:	080111a5 	.word	0x080111a5
 8010c58:	2000b458 	.word	0x2000b458
 8010c5c:	08026fb0 	.word	0x08026fb0
 8010c60:	08028408 	.word	0x08028408
 8010c64:	08026ff4 	.word	0x08026ff4
 8010c68:	2000b45c 	.word	0x2000b45c
 8010c6c:	08027038 	.word	0x08027038
        return texts->getText(typedTextId);
 8010c70:	4be8      	ldr	r3, [pc, #928]	; (8011014 <_ZN13MusicViewBaseC1Ev+0x628>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010c76:	4611      	mov	r1, r2
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f001 ff61 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	4ae5      	ldr	r2, [pc, #916]	; (8011018 <_ZN13MusicViewBaseC1Ev+0x62c>)
 8010c82:	2111      	movs	r1, #17
 8010c84:	4620      	mov	r0, r4
 8010c86:	f00a ffd5 	bl	801bc34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010c8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fb f88c 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    MusicTextArea.setWildcard(MusicTextAreaBuffer);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	f7ff fa94 	bl	80101d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MusicTextArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8010cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010cb2:	210f      	movs	r1, #15
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fe fd55 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 8010cba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f007 f8bf 	bl	8017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010cc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fb f86e 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>

    Pause_Button.setXY(48, 212);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010cd6:	22d4      	movs	r2, #212	; 0xd4
 8010cd8:	2130      	movs	r1, #48	; 0x30
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fb fced 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    Pause_Button.setVisible(false);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7ff fd9e 	bl	801082a <_ZN8touchgfx8Drawable10setVisibleEb>
    Pause_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID));
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8010cf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010cf8:	2104      	movs	r1, #4
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fe fbf4 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010d00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d04:	2105      	movs	r1, #5
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fe fbee 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010d0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010d10:	210b      	movs	r1, #11
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fe fbe8 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010d18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d1c:	210b      	movs	r1, #11
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fe fbe2 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010d24:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010d28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010d2c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8010d30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	4603      	mov	r3, r0
 8010d38:	4620      	mov	r0, r4
 8010d3a:	f007 fa69 	bl	8018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Pause_Button.setIconXY(17, 14);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010d44:	220e      	movs	r2, #14
 8010d46:	2111      	movs	r1, #17
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7fe fcc9 	bl	800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Pause_Button.setAction(buttonCallback);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	4610      	mov	r0, r2
 8010d5e:	f7fe fc3a 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Stop_Button.setXY(116, 212);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010d68:	22d4      	movs	r2, #212	; 0xd4
 8010d6a:	2174      	movs	r1, #116	; 0x74
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7fb fca4 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    Stop_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID));
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8010d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010d7c:	2104      	movs	r1, #4
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fe fbb2 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010d84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010d88:	2105      	movs	r1, #5
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fe fbac 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010d90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010d94:	2106      	movs	r1, #6
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fe fba6 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010d9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010da0:	2106      	movs	r1, #6
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7fe fba0 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010da8:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8010dac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010db0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010db4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010db8:	9300      	str	r3, [sp, #0]
 8010dba:	4603      	mov	r3, r0
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f007 fa27 	bl	8018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Stop_Button.setIconXY(15, 15);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010dc8:	220f      	movs	r2, #15
 8010dca:	210f      	movs	r1, #15
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fe fc87 	bl	800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Stop_Button.setAction(buttonCallback);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010dde:	4619      	mov	r1, r3
 8010de0:	4610      	mov	r0, r2
 8010de2:	f7fe fbf8 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Prev_Button.setXY(188, 212);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010dec:	22d4      	movs	r2, #212	; 0xd4
 8010dee:	21bc      	movs	r1, #188	; 0xbc
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fb fc62 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    Prev_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID));
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8010dfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010e00:	2104      	movs	r1, #4
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fb70 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010e08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010e0c:	2105      	movs	r1, #5
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fe fb6a 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010e14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e18:	2109      	movs	r1, #9
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fe fb64 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010e20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010e24:	2109      	movs	r1, #9
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fe fb5e 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010e2c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010e30:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8010e34:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010e38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010e3c:	9300      	str	r3, [sp, #0]
 8010e3e:	4603      	mov	r3, r0
 8010e40:	4620      	mov	r0, r4
 8010e42:	f007 f9e5 	bl	8018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Prev_Button.setIconXY(14, 15);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010e4c:	220f      	movs	r2, #15
 8010e4e:	210e      	movs	r1, #14
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7fe fc45 	bl	800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Prev_Button.setAction(buttonCallback);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010e62:	4619      	mov	r1, r3
 8010e64:	4610      	mov	r0, r2
 8010e66:	f7fe fbb6 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Next_Button.setXY(256, 212);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010e70:	22d4      	movs	r2, #212	; 0xd4
 8010e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fb fc1f 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    Next_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID));
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8010e82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010e86:	2104      	movs	r1, #4
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7fe fb2d 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010e8e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010e92:	2105      	movs	r1, #5
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fe fb27 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010e9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010e9e:	210a      	movs	r1, #10
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fe fb21 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010ea6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010eaa:	210a      	movs	r1, #10
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fe fb1b 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010eb2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8010eb6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010eba:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8010ebe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010ec2:	9300      	str	r3, [sp, #0]
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f007 f9a2 	bl	8018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Next_Button.setIconXY(14, 15);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010ed2:	220f      	movs	r2, #15
 8010ed4:	210e      	movs	r1, #14
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fe fc02 	bl	800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Next_Button.setAction(buttonCallback);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010ee8:	4619      	mov	r1, r3
 8010eea:	4610      	mov	r0, r2
 8010eec:	f7fe fb73 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VolUp_Button.setXY(390, 212);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010ef6:	22d4      	movs	r2, #212	; 0xd4
 8010ef8:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7fb fbdc 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    VolUp_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010f08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010f0c:	2104      	movs	r1, #4
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fe faea 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010f14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010f18:	2105      	movs	r1, #5
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fe fae4 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010f20:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8010f24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	f006 ffc4 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolUp_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID31));
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010f36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010f3a:	2110      	movs	r1, #16
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7fe fc11 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 8010f42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010f46:	4619      	mov	r1, r3
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f7ff f863 	bl	8010014 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010f4e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7fa ff2a 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    VolUp_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010f5e:	22ff      	movs	r2, #255	; 0xff
 8010f60:	21ff      	movs	r1, #255	; 0xff
 8010f62:	20ff      	movs	r0, #255	; 0xff
 8010f64:	f7fe fcbe 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	f7ff f863 	bl	8010038 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolUp_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010f78:	22ff      	movs	r2, #255	; 0xff
 8010f7a:	21ff      	movs	r1, #255	; 0xff
 8010f7c:	20ff      	movs	r0, #255	; 0xff
 8010f7e:	f7fe fcb1 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f82:	4603      	mov	r3, r0
 8010f84:	4619      	mov	r1, r3
 8010f86:	4620      	mov	r0, r4
 8010f88:	f7ff f864 	bl	8010054 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    VolUp_Button.setAction(buttonCallback);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010f98:	4619      	mov	r1, r3
 8010f9a:	4610      	mov	r0, r2
 8010f9c:	f7fe fb1b 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VolDown_Button.setXY(323, 212);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010fa6:	22d4      	movs	r2, #212	; 0xd4
 8010fa8:	f240 1143 	movw	r1, #323	; 0x143
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fb fb84 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    VolDown_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010fb8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010fbc:	2104      	movs	r1, #4
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7fe fa92 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010fc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010fc8:	2105      	movs	r1, #5
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fe fa8c 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8010fd0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8010fd4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010fd8:	4619      	mov	r1, r3
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f006 ff6c 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolDown_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID32));
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010fe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010fea:	2111      	movs	r1, #17
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fe fbb9 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 8010ff2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f7ff f80b 	bl	8010014 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010ffe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011002:	4618      	mov	r0, r3
 8011004:	f7fa fed2 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    VolDown_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f503 7418 	add.w	r4, r3, #608	; 0x260
 801100e:	22ff      	movs	r2, #255	; 0xff
 8011010:	21ff      	movs	r1, #255	; 0xff
 8011012:	e003      	b.n	801101c <_ZN13MusicViewBaseC1Ev+0x630>
 8011014:	2000b464 	.word	0x2000b464
 8011018:	08027110 	.word	0x08027110
 801101c:	20ff      	movs	r0, #255	; 0xff
 801101e:	f7fe fc61 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011022:	4603      	mov	r3, r0
 8011024:	4619      	mov	r1, r3
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff f806 	bl	8010038 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolDown_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8011032:	22ff      	movs	r2, #255	; 0xff
 8011034:	21ff      	movs	r1, #255	; 0xff
 8011036:	20ff      	movs	r0, #255	; 0xff
 8011038:	f7fe fc54 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801103c:	4603      	mov	r3, r0
 801103e:	4619      	mov	r1, r3
 8011040:	4620      	mov	r0, r4
 8011042:	f7ff f807 	bl	8010054 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    VolDown_Button.setAction(buttonCallback);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f503 7218 	add.w	r2, r3, #608	; 0x260
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8011052:	4619      	mov	r1, r3
 8011054:	4610      	mov	r0, r2
 8011056:	f7fe fabe 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Back_Button.setXY(0, 0);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011060:	2200      	movs	r2, #0
 8011062:	2100      	movs	r1, #0
 8011064:	4618      	mov	r0, r3
 8011066:	f7fb fb28 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f503 742a 	add.w	r4, r3, #680	; 0x2a8
 8011070:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011074:	2102      	movs	r1, #2
 8011076:	4618      	mov	r0, r3
 8011078:	f7fe fa36 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 801107c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011080:	2103      	movs	r1, #3
 8011082:	4618      	mov	r0, r3
 8011084:	f7fe fa30 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011088:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801108c:	2108      	movs	r1, #8
 801108e:	4618      	mov	r0, r3
 8011090:	f7fe fa2a 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011094:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011098:	2108      	movs	r1, #8
 801109a:	4618      	mov	r0, r3
 801109c:	f7fe fa24 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 80110a0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80110a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80110a8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80110ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80110b0:	9300      	str	r3, [sp, #0]
 80110b2:	4603      	mov	r3, r0
 80110b4:	4620      	mov	r0, r4
 80110b6:	f007 f8ab 	bl	8018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80110c0:	220f      	movs	r2, #15
 80110c2:	2113      	movs	r1, #19
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fe fb0b 	bl	800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f503 722a 	add.w	r2, r3, #680	; 0x2a8
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80110d6:	4619      	mov	r1, r3
 80110d8:	4610      	mov	r0, r2
 80110da:	f7fe fa7c 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 80110de:	687a      	ldr	r2, [r7, #4]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	3340      	adds	r3, #64	; 0x40
 80110e4:	4619      	mov	r1, r3
 80110e6:	4610      	mov	r0, r2
 80110e8:	f7fe fa66 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	3370      	adds	r3, #112	; 0x70
 80110f2:	4619      	mov	r1, r3
 80110f4:	4610      	mov	r0, r2
 80110f6:	f7fe fa5f 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Play_Button);
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	33ac      	adds	r3, #172	; 0xac
 8011100:	4619      	mov	r1, r3
 8011102:	4610      	mov	r0, r2
 8011104:	f7fe fa58 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MusicTextArea);
 8011108:	687a      	ldr	r2, [r7, #4]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	33e8      	adds	r3, #232	; 0xe8
 801110e:	4619      	mov	r1, r3
 8011110:	4610      	mov	r0, r2
 8011112:	f7fe fa51 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pause_Button);
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 801111e:	4619      	mov	r1, r3
 8011120:	4610      	mov	r0, r2
 8011122:	f7fe fa49 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Stop_Button);
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801112e:	4619      	mov	r1, r3
 8011130:	4610      	mov	r0, r2
 8011132:	f7fe fa41 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Prev_Button);
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801113e:	4619      	mov	r1, r3
 8011140:	4610      	mov	r0, r2
 8011142:	f7fe fa39 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Next_Button);
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801114e:	4619      	mov	r1, r3
 8011150:	4610      	mov	r0, r2
 8011152:	f7fe fa31 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolUp_Button);
 8011156:	687a      	ldr	r2, [r7, #4]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 801115e:	4619      	mov	r1, r3
 8011160:	4610      	mov	r0, r2
 8011162:	f7fe fa29 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolDown_Button);
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801116e:	4619      	mov	r1, r3
 8011170:	4610      	mov	r0, r2
 8011172:	f7fe fa21 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 8011176:	687a      	ldr	r2, [r7, #4]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801117e:	4619      	mov	r1, r3
 8011180:	4610      	mov	r0, r2
 8011182:	f7fe fa19 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4618      	mov	r0, r3
 801118a:	37d4      	adds	r7, #212	; 0xd4
 801118c:	46bd      	mov	sp, r7
 801118e:	bd90      	pop	{r4, r7, pc}

08011190 <_ZN13MusicViewBase11setupScreenEv>:

void MusicViewBase::setupScreen()
{
 8011190:	b480      	push	{r7}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]

}
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MusicViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
    if (&src == &Play_Button)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	33ac      	adds	r3, #172	; 0xac
 80111b2:	683a      	ldr	r2, [r7, #0]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d106      	bne.n	80111c6 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //control_play
        //When Play_Button clicked call virtual function
        //Call controlPlay
        controlPlay();
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	332c      	adds	r3, #44	; 0x2c
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	4798      	blx	r3
        //back_to_menu
        //When Back_Button clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
    }
}
 80111c4:	e05a      	b.n	801127c <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Pause_Button)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80111cc:	683a      	ldr	r2, [r7, #0]
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d106      	bne.n	80111e0 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        controlPlay();
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	332c      	adds	r3, #44	; 0x2c
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	4798      	blx	r3
}
 80111de:	e04d      	b.n	801127c <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Stop_Button)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80111e6:	683a      	ldr	r2, [r7, #0]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d106      	bne.n	80111fa <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
        controlStop();
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	3330      	adds	r3, #48	; 0x30
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	4798      	blx	r3
}
 80111f8:	e040      	b.n	801127c <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Prev_Button)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011200:	683a      	ldr	r2, [r7, #0]
 8011202:	429a      	cmp	r2, r3
 8011204:	d106      	bne.n	8011214 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        controlPrev();
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	3334      	adds	r3, #52	; 0x34
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	4798      	blx	r3
}
 8011212:	e033      	b.n	801127c <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Next_Button)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801121a:	683a      	ldr	r2, [r7, #0]
 801121c:	429a      	cmp	r2, r3
 801121e:	d106      	bne.n	801122e <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8a>
        controlNext();
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	3338      	adds	r3, #56	; 0x38
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	4798      	blx	r3
}
 801122c:	e026      	b.n	801127c <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &VolUp_Button)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8011234:	683a      	ldr	r2, [r7, #0]
 8011236:	429a      	cmp	r2, r3
 8011238:	d106      	bne.n	8011248 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa4>
        controlVolumeUp();
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3340      	adds	r3, #64	; 0x40
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	4798      	blx	r3
}
 8011246:	e019      	b.n	801127c <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &VolDown_Button)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801124e:	683a      	ldr	r2, [r7, #0]
 8011250:	429a      	cmp	r2, r3
 8011252:	d106      	bne.n	8011262 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
        controlVolumeDown();
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	333c      	adds	r3, #60	; 0x3c
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	4798      	blx	r3
}
 8011260:	e00c      	b.n	801127c <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Back_Button)
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011268:	683a      	ldr	r2, [r7, #0]
 801126a:	429a      	cmp	r2, r3
 801126c:	d106      	bne.n	801127c <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
        application().gotoscreenScreenNoTransition();
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f7ff fbb1 	bl	80109d6 <_ZN13MusicViewBase11applicationEv>
 8011274:	4603      	mov	r3, r0
 8011276:	4618      	mov	r0, r3
 8011278:	f7fb fcc8 	bl	800cc0c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
}
 801127c:	bf00      	nop
 801127e:	3708      	adds	r7, #8
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>:
    View()
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4618      	mov	r0, r3
 8011290:	f009 fa2c 	bl	801a6ec <_ZN8touchgfx6ScreenC1Ev>
 8011294:	4a05      	ldr	r2, [pc, #20]	; (80112ac <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev+0x28>)
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	601a      	str	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2200      	movs	r2, #0
 801129e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	4618      	mov	r0, r3
 80112a4:	3708      	adds	r7, #8
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	080283dc 	.word	0x080283dc

080112b0 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	4639      	mov	r1, r7
 80112bc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fe fcb2 	bl	800fc2c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80112c8:	4a08      	ldr	r2, [pc, #32]	; (80112ec <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	68ba      	ldr	r2, [r7, #8]
 80112d2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	3308      	adds	r3, #8
 80112d8:	463a      	mov	r2, r7
 80112da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112de:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	4618      	mov	r0, r3
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	080283c4 	.word	0x080283c4

080112f0 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	4a05      	ldr	r2, [pc, #20]	; (8011310 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	601a      	str	r2, [r3, #0]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4618      	mov	r0, r3
 8011302:	f7fe fcc3 	bl	800fc8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4618      	mov	r0, r3
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	080283c4 	.word	0x080283c4

08011314 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7ff ffe7 	bl	80112f0 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011322:	2110      	movs	r1, #16
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f014 fb7f 	bl	8025a28 <_ZdlPvj>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	4618      	mov	r0, r3
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	68d2      	ldr	r2, [r2, #12]
 8011346:	1052      	asrs	r2, r2, #1
 8011348:	1898      	adds	r0, r3, r2
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	f003 0301 	and.w	r3, r3, #1
 8011352:	2b00      	cmp	r3, #0
 8011354:	d102      	bne.n	801135c <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	689b      	ldr	r3, [r3, #8]
 801135a:	e00a      	b.n	8011372 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	68d2      	ldr	r2, [r2, #12]
 8011364:	1052      	asrs	r2, r2, #1
 8011366:	4413      	add	r3, r2
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	6892      	ldr	r2, [r2, #8]
 801136e:	4413      	add	r3, r2
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	6839      	ldr	r1, [r7, #0]
 8011374:	4798      	blx	r3
    }
 8011376:	bf00      	nop
 8011378:	3708      	adds	r7, #8
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}

0801137e <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801137e:	b480      	push	{r7}
 8011380:	b083      	sub	sp, #12
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d010      	beq.n	80113b0 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d107      	bne.n	80113a6 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	f003 0301 	and.w	r3, r3, #1
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d101      	bne.n	80113a6 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80113a2:	2301      	movs	r3, #1
 80113a4:	e000      	b.n	80113a8 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80113a6:	2300      	movs	r3, #0
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d001      	beq.n	80113b0 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80113ac:	2301      	movs	r3, #1
 80113ae:	e000      	b.n	80113b2 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80113b0:	2300      	movs	r3, #0
    }
 80113b2:	4618      	mov	r0, r3
 80113b4:	370c      	adds	r7, #12
 80113b6:	46bd      	mov	sp, r7
 80113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113bc:	4770      	bx	lr

080113be <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
    /**
     * Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 80113be:	b480      	push	{r7}
 80113c0:	b083      	sub	sp, #12
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	1ad3      	subs	r3, r2, r3
 80113d8:	b29b      	uxth	r3, r3
 80113da:	b21b      	sxth	r3, r3
    }
 80113dc:	4618      	mov	r0, r3
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
    /**
     * Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80113fe:	b29b      	uxth	r3, r3
 8011400:	1ad3      	subs	r3, r2, r3
 8011402:	b29b      	uxth	r3, r3
 8011404:	b21b      	sxth	r3, r3
    }
 8011406:	4618      	mov	r0, r3
 8011408:	370c      	adds	r7, #12
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr

08011412 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8011412:	b480      	push	{r7}
 8011414:	b083      	sub	sp, #12
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 801141e:	4618      	mov	r0, r3
 8011420:	370c      	adds	r7, #12
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr
	...

0801142c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 8011434:	4a0a      	ldr	r2, [pc, #40]	; (8011460 <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2200      	movs	r2, #0
 801143e:	809a      	strh	r2, [r3, #4]
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2200      	movs	r2, #0
 8011444:	80da      	strh	r2, [r3, #6]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	22ff      	movs	r2, #255	; 0xff
 801144a:	721a      	strb	r2, [r3, #8]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	22ff      	movs	r2, #255	; 0xff
 8011450:	725a      	strb	r2, [r3, #9]
    {
    }
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4618      	mov	r0, r3
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr
 8011460:	080285b0 	.word	0x080285b0

08011464 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
    {
 801146c:	4a04      	ldr	r2, [pc, #16]	; (8011480 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	601a      	str	r2, [r3, #0]
    }
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	4618      	mov	r0, r3
 8011476:	370c      	adds	r7, #12
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr
 8011480:	080285b0 	.word	0x080285b0

08011484 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
    }
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7ff ffe9 	bl	8011464 <_ZN8touchgfx15AbstractPainterD1Ev>
 8011492:	210c      	movs	r1, #12
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f014 fac7 	bl	8025a28 <_ZdlPvj>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4618      	mov	r0, r3
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}

080114a4 <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	460b      	mov	r3, r1
 80114ae:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	78fa      	ldrb	r2, [r7, #3]
 80114b4:	725a      	strb	r2, [r3, #9]
    }
 80114b6:	bf00      	nop
 80114b8:	370c      	adds	r7, #12
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr

080114c2 <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 80114c2:	b480      	push	{r7}
 80114c4:	b083      	sub	sp, #12
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	7a5b      	ldrb	r3, [r3, #9]
    }
 80114ce:	4618      	mov	r0, r3
 80114d0:	370c      	adds	r7, #12
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr

080114da <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 80114da:	b480      	push	{r7}
 80114dc:	b083      	sub	sp, #12
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	6039      	str	r1, [r7, #0]
            : v(i)
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	683a      	ldr	r2, [r7, #0]
 80114e8:	601a      	str	r2, [r3, #0]
        {
        }
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4618      	mov	r0, r3
 80114ee:	370c      	adds	r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @note The painter set with setPainter() can also have an alpha value. The alpha value of
     *       the painter and the alpha value of the CanvasWidget are combine to a single
     *       alpha value.
     */
    virtual void setAlpha(uint8_t alpha)
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	460b      	mov	r3, r1
 8011502:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	78fa      	ldrb	r2, [r7, #3]
 8011508:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 801150c:	bf00      	nop
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     * @return Gets the current alpha value of the Box.
     *
     * @see setAlpha
     */
    virtual uint8_t getAlpha() const
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 8011526:	4618      	mov	r0, r3
 8011528:	370c      	adds	r7, #12
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
	...

08011534 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4618      	mov	r0, r3
 8011540:	f7ff ff74 	bl	801142c <_ZN8touchgfx15AbstractPainterC1Ev>
 8011544:	4a27      	ldr	r2, [pc, #156]	; (80115e4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	601a      	str	r2, [r3, #0]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2200      	movs	r2, #0
 801154e:	60da      	str	r2, [r3, #12]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2200      	movs	r2, #0
 8011554:	611a      	str	r2, [r3, #16]
 8011556:	2301      	movs	r3, #1
 8011558:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801155a:	f7fb f993 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 801155e:	4602      	mov	r2, r0
 8011560:	6813      	ldr	r3, [r2, #0]
 8011562:	3320      	adds	r3, #32
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	4610      	mov	r0, r2
 8011568:	4798      	blx	r3
 801156a:	4603      	mov	r3, r0
 801156c:	461a      	mov	r2, r3
 801156e:	7bfb      	ldrb	r3, [r7, #15]
 8011570:	4293      	cmp	r3, r2
 8011572:	bf0c      	ite	eq
 8011574:	2301      	moveq	r3, #1
 8011576:	2300      	movne	r3, #0
 8011578:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 801157a:	f7fb f977 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 801157e:	4603      	mov	r3, r0
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff ff46 	bl	8011412 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8011586:	4603      	mov	r3, r0
 8011588:	2b00      	cmp	r3, #0
 801158a:	bf14      	ite	ne
 801158c:	2301      	movne	r3, #1
 801158e:	2300      	moveq	r3, #0
 8011590:	b2db      	uxtb	r3, r3
 8011592:	2b00      	cmp	r3, #0
 8011594:	d016      	beq.n	80115c4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x90>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8011596:	f7fb f969 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 801159a:	4603      	mov	r3, r0
 801159c:	4618      	mov	r0, r3
 801159e:	f7ff ff38 	bl	8011412 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80115a2:	4602      	mov	r2, r0
 80115a4:	6813      	ldr	r3, [r2, #0]
 80115a6:	3320      	adds	r3, #32
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4610      	mov	r0, r2
 80115ac:	4798      	blx	r3
 80115ae:	4603      	mov	r3, r0
 80115b0:	461a      	mov	r2, r3
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
 80115b4:	4293      	cmp	r3, r2
 80115b6:	bf0c      	ite	eq
 80115b8:	2301      	moveq	r3, #1
 80115ba:	2300      	movne	r3, #0
 80115bc:	b2da      	uxtb	r2, r3
 80115be:	7bbb      	ldrb	r3, [r7, #14]
 80115c0:	4313      	orrs	r3, r2
 80115c2:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80115c4:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d105      	bne.n	80115d6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa2>
 80115ca:	4b07      	ldr	r3, [pc, #28]	; (80115e8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 80115cc:	4a07      	ldr	r2, [pc, #28]	; (80115ec <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 80115ce:	212b      	movs	r1, #43	; 0x2b
 80115d0:	4807      	ldr	r0, [pc, #28]	; (80115f0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 80115d2:	f014 fa55 	bl	8025a80 <__assert_func>
 80115d6:	bf00      	nop
    }
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	4618      	mov	r0, r3
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	08029b78 	.word	0x08029b78
 80115e8:	08027198 	.word	0x08027198
 80115ec:	080285c4 	.word	0x080285c4
 80115f0:	080271f8 	.word	0x080271f8

080115f4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	4a05      	ldr	r2, [pc, #20]	; (8011614 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	601a      	str	r2, [r3, #0]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4618      	mov	r0, r3
 8011606:	f7ff ff2d 	bl	8011464 <_ZN8touchgfx15AbstractPainterD1Ev>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4618      	mov	r0, r3
 801160e:	3708      	adds	r7, #8
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	08029b78 	.word	0x08029b78

08011618 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f7ff ffe7 	bl	80115f4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011626:	2114      	movs	r1, #20
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f014 f9fd 	bl	8025a28 <_ZdlPvj>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	4618      	mov	r0, r3
 8011632:	3708      	adds	r7, #8
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB888(colortype color = 0, uint8_t alpha = 255)
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	4613      	mov	r3, r2
 8011644:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB888()
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff ff73 	bl	8011534 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 801164e:	4a09      	ldr	r2, [pc, #36]	; (8011674 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x3c>)
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 8011654:	68b9      	ldr	r1, [r7, #8]
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f000 f80e 	bl	8011678 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        setAlpha(alpha);
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	79fa      	ldrb	r2, [r7, #7]
 8011660:	4611      	mov	r1, r2
 8011662:	4618      	mov	r0, r3
 8011664:	f7ff ff1e 	bl	80114a4 <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	4618      	mov	r0, r3
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	08029cd8 	.word	0x08029cd8

08011678 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8011678:	b580      	push	{r7, lr}
 801167a:	b086      	sub	sp, #24
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	6039      	str	r1, [r7, #0]
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	617b      	str	r3, [r7, #20]
     *
     * @see LCD16bpp::getRedFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedColor(colortype color)
    {
        return HAL::lcd().getRedColor(color);
 8011686:	f7fb f8fd 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 801168a:	4602      	mov	r2, r0
 801168c:	6813      	ldr	r3, [r2, #0]
 801168e:	332c      	adds	r3, #44	; 0x2c
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	6979      	ldr	r1, [r7, #20]
 8011694:	4610      	mov	r0, r2
 8011696:	4798      	blx	r3
 8011698:	4603      	mov	r3, r0
 801169a:	461a      	mov	r2, r3
    {
        painterRed = Color::getRedColor(color);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	751a      	strb	r2, [r3, #20]
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	613b      	str	r3, [r7, #16]
     *
     * @see LCD16bpp::getGreenFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenColor(colortype color)
    {
        return HAL::lcd().getGreenColor(color);
 80116a4:	f7fb f8ee 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 80116a8:	4602      	mov	r2, r0
 80116aa:	6813      	ldr	r3, [r2, #0]
 80116ac:	3330      	adds	r3, #48	; 0x30
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	6939      	ldr	r1, [r7, #16]
 80116b2:	4610      	mov	r0, r2
 80116b4:	4798      	blx	r3
 80116b6:	4603      	mov	r3, r0
 80116b8:	461a      	mov	r2, r3
        painterGreen = Color::getGreenColor(color);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	755a      	strb	r2, [r3, #21]
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	60fb      	str	r3, [r7, #12]
     *
     * @see LCD16bpp::getBlueFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueColor(colortype color)
    {
        return HAL::lcd().getBlueColor(color);
 80116c2:	f7fb f8df 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 80116c6:	4602      	mov	r2, r0
 80116c8:	6813      	ldr	r3, [r2, #0]
 80116ca:	3334      	adds	r3, #52	; 0x34
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	68f9      	ldr	r1, [r7, #12]
 80116d0:	4610      	mov	r0, r2
 80116d2:	4798      	blx	r3
 80116d4:	4603      	mov	r3, r0
 80116d6:	461a      	mov	r2, r3
        painterBlue = Color::getBlueColor(color);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	759a      	strb	r2, [r3, #22]
    }
 80116dc:	bf00      	nop
 80116de:	3718      	adds	r7, #24
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>:
class View : public Screen
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	4a05      	ldr	r2, [pc, #20]	; (8011704 <_ZN8touchgfx4ViewI13PongPresenterED1Ev+0x20>)
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	601a      	str	r2, [r3, #0]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fd ff07 	bl	800f508 <_ZN8touchgfx6ScreenD1Ev>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4618      	mov	r0, r3
 80116fe:	3708      	adds	r7, #8
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	0802857c 	.word	0x0802857c

08011708 <_ZN8touchgfx4ViewI13PongPresenterED0Ev>:
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7ff ffe7 	bl	80116e4 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 8011716:	2140      	movs	r1, #64	; 0x40
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f014 f985 	bl	8025a28 <_ZdlPvj>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	4618      	mov	r0, r3
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <_ZN12PongViewBaseD1Ev>:

class PongViewBase : public touchgfx::View<PongPresenter>
{
public:
    PongViewBase();
    virtual ~PongViewBase() {}
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	4a1b      	ldr	r2, [pc, #108]	; (80117a0 <_ZN12PongViewBaseD1Ev+0x78>)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801173c:	4618      	mov	r0, r3
 801173e:	f000 fb99 	bl	8011e74 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011748:	4618      	mov	r0, r3
 801174a:	f7fe fb25 	bl	800fd98 <_ZN8touchgfx6ButtonD1Ev>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011754:	4618      	mov	r0, r3
 8011756:	f7fe fb41 	bl	800fddc <_ZN8touchgfx14ButtonWithIconD1Ev>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011760:	4618      	mov	r0, r3
 8011762:	f7fe fffb 	bl	801075c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	33ec      	adds	r3, #236	; 0xec
 801176a:	4618      	mov	r0, r3
 801176c:	f000 fba4 	bl	8011eb8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	33d4      	adds	r3, #212	; 0xd4
 8011774:	4618      	mov	r0, r3
 8011776:	f000 fbe3 	bl	8011f40 <_ZN8touchgfx13PainterRGB888D1Ev>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	336c      	adds	r3, #108	; 0x6c
 801177e:	4618      	mov	r0, r3
 8011780:	f000 fbbc 	bl	8011efc <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	3340      	adds	r3, #64	; 0x40
 8011788:	4618      	mov	r0, r3
 801178a:	f7fe fb49 	bl	800fe20 <_ZN8touchgfx5ImageD1Ev>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	4618      	mov	r0, r3
 8011792:	f7ff ffa7 	bl	80116e4 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	4618      	mov	r0, r3
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	08028440 	.word	0x08028440

080117a4 <_ZN12PongViewBaseD0Ev>:
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f7ff ffbb 	bl	8011728 <_ZN12PongViewBaseD1Ev>
 80117b2:	f641 6124 	movw	r1, #7716	; 0x1e24
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f014 f936 	bl	8025a28 <_ZdlPvj>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4618      	mov	r0, r3
 80117c0:	3708      	adds	r7, #8
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <_ZN12PongViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b082      	sub	sp, #8
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80117ce:	f007 ffd7 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 80117d2:	4603      	mov	r3, r0
    }
 80117d4:	4618      	mov	r0, r3
 80117d6:	3708      	adds	r7, #8
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}

080117dc <_ZN12PongViewBaseC1Ev>:
#include <gui_generated/pong_screen/PongViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

PongViewBase::PongViewBase() :
 80117dc:	b590      	push	{r4, r7, lr}
 80117de:	b099      	sub	sp, #100	; 0x64
 80117e0:	af02      	add	r7, sp, #8
 80117e2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &PongViewBase::buttonCallbackHandler)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4618      	mov	r0, r3
 80117e8:	f000 fa62 	bl	8011cb0 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>
 80117ec:	4a7e      	ldr	r2, [pc, #504]	; (80119e8 <_ZN12PongViewBaseC1Ev+0x20c>)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	601a      	str	r2, [r3, #0]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80117f8:	f107 030c 	add.w	r3, r7, #12
 80117fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011800:	4618      	mov	r0, r3
 8011802:	f7fd fe71 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011806:	f107 030c 	add.w	r3, r7, #12
 801180a:	4619      	mov	r1, r3
 801180c:	4620      	mov	r0, r4
 801180e:	f7fd ff7f 	bl	800f710 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	336c      	adds	r3, #108	; 0x6c
 8011816:	4618      	mov	r0, r3
 8011818:	f000 faa4 	bl	8011d64 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8011822:	f107 0310 	add.w	r3, r7, #16
 8011826:	2100      	movs	r1, #0
 8011828:	4618      	mov	r0, r3
 801182a:	f7fd fe4e 	bl	800f4ca <_ZN8touchgfx9colortypeC1Em>
 801182e:	22ff      	movs	r2, #255	; 0xff
 8011830:	6939      	ldr	r1, [r7, #16]
 8011832:	4620      	mov	r0, r4
 8011834:	f7ff ff00 	bl	8011638 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	33ec      	adds	r3, #236	; 0xec
 801183c:	4618      	mov	r0, r3
 801183e:	f000 fab3 	bl	8011da8 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011848:	4618      	mov	r0, r3
 801184a:	f7fe fcab 	bl	80101a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011854:	4618      	mov	r0, r3
 8011856:	f006 fd7f 	bl	8018358 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011860:	4618      	mov	r0, r3
 8011862:	f7fe fba3 	bl	800ffac <_ZN8touchgfx6ButtonC1Ev>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 801186c:	4b5f      	ldr	r3, [pc, #380]	; (80119ec <_ZN12PongViewBaseC1Ev+0x210>)
 801186e:	617b      	str	r3, [r7, #20]
 8011870:	2300      	movs	r3, #0
 8011872:	61bb      	str	r3, [r7, #24]
 8011874:	f107 0314 	add.w	r3, r7, #20
 8011878:	cb0c      	ldmia	r3, {r2, r3}
 801187a:	6879      	ldr	r1, [r7, #4]
 801187c:	f000 faac 	bl	8011dd8 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8011886:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801188a:	4618      	mov	r0, r3
 801188c:	f006 fef0 	bl	8018670 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    image1.setXY(0, 0);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	3340      	adds	r3, #64	; 0x40
 8011894:	2200      	movs	r2, #0
 8011896:	2100      	movs	r1, #0
 8011898:	4618      	mov	r0, r3
 801189a:	f7fa ff0e 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_S_ID));
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80118a4:	f107 031c 	add.w	r3, r7, #28
 80118a8:	210d      	movs	r1, #13
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fd fe1c 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 80118b0:	f107 031c 	add.w	r3, r7, #28
 80118b4:	4619      	mov	r1, r3
 80118b6:	4620      	mov	r0, r4
 80118b8:	f006 fd72 	bl	80183a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    ball.setPosition(200, 85, 80, 80);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80118c2:	2350      	movs	r3, #80	; 0x50
 80118c4:	9300      	str	r3, [sp, #0]
 80118c6:	2350      	movs	r3, #80	; 0x50
 80118c8:	2255      	movs	r2, #85	; 0x55
 80118ca:	21c8      	movs	r1, #200	; 0xc8
 80118cc:	f7fa fe90 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    ball.setCenter(40, 40);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	336c      	adds	r3, #108	; 0x6c
 80118d4:	2228      	movs	r2, #40	; 0x28
 80118d6:	2128      	movs	r1, #40	; 0x28
 80118d8:	4618      	mov	r0, r3
 80118da:	f000 f99d 	bl	8011c18 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    ball.setRadius(20);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	336c      	adds	r3, #108	; 0x6c
 80118e2:	2114      	movs	r1, #20
 80118e4:	4618      	mov	r0, r3
 80118e6:	f000 fa97 	bl	8011e18 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    ball.setLineWidth(0);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	336c      	adds	r3, #108	; 0x6c
 80118ee:	2100      	movs	r1, #0
 80118f0:	4618      	mov	r0, r3
 80118f2:	f000 faa8 	bl	8011e46 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    ball.setArc(0, 360);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	336c      	adds	r3, #108	; 0x6c
 80118fa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80118fe:	2100      	movs	r1, #0
 8011900:	4618      	mov	r0, r3
 8011902:	f000 f9af 	bl	8011c64 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    ballPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 255, 141));
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 801190c:	228d      	movs	r2, #141	; 0x8d
 801190e:	21ff      	movs	r1, #255	; 0xff
 8011910:	2006      	movs	r0, #6
 8011912:	f7fd ffe7 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011916:	4603      	mov	r3, r0
 8011918:	4619      	mov	r1, r3
 801191a:	4620      	mov	r0, r4
 801191c:	f7ff feac 	bl	8011678 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    ball.setPainter(ballPainter);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	33d4      	adds	r3, #212	; 0xd4
 801192a:	4619      	mov	r1, r3
 801192c:	4610      	mov	r0, r2
 801192e:	f005 ff01 	bl	8017734 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    paddle1.setPosition(66, 212, 134, 29);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8011938:	231d      	movs	r3, #29
 801193a:	9300      	str	r3, [sp, #0]
 801193c:	2386      	movs	r3, #134	; 0x86
 801193e:	22d4      	movs	r2, #212	; 0xd4
 8011940:	2142      	movs	r1, #66	; 0x42
 8011942:	f7fa fe55 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    paddle1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 171, 6));
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801194c:	2206      	movs	r2, #6
 801194e:	21ab      	movs	r1, #171	; 0xab
 8011950:	20ff      	movs	r0, #255	; 0xff
 8011952:	f7fd ffc7 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011956:	4603      	mov	r3, r0
 8011958:	4619      	mov	r1, r3
 801195a:	4620      	mov	r0, r4
 801195c:	f7fd fe94 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    score.setXY(363, 0);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011966:	2200      	movs	r2, #0
 8011968:	f240 116b 	movw	r1, #363	; 0x16b
 801196c:	4618      	mov	r0, r3
 801196e:	f7fa fea4 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(18, 252, 62));
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8011978:	223e      	movs	r2, #62	; 0x3e
 801197a:	21fc      	movs	r1, #252	; 0xfc
 801197c:	2012      	movs	r0, #18
 801197e:	f7fd ffb1 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011982:	4603      	mov	r3, r0
 8011984:	64bc      	str	r4, [r7, #72]	; 0x48
 8011986:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8011988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801198a:	68ba      	ldr	r2, [r7, #8]
 801198c:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011994:	653b      	str	r3, [r7, #80]	; 0x50
 8011996:	2300      	movs	r3, #0
 8011998:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        linespace = space;
 801199c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801199e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80119a2:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID29).getText());
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80119aa:	f107 0320 	add.w	r3, r7, #32
 80119ae:	210e      	movs	r1, #14
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fd fed7 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 80119b6:	f107 0320 	add.w	r3, r7, #32
 80119ba:	657b      	str	r3, [r7, #84]	; 0x54
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80119bc:	4b0c      	ldr	r3, [pc, #48]	; (80119f0 <_ZN12PongViewBaseC1Ev+0x214>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d105      	bne.n	80119d0 <_ZN12PongViewBaseC1Ev+0x1f4>
 80119c4:	4b0b      	ldr	r3, [pc, #44]	; (80119f4 <_ZN12PongViewBaseC1Ev+0x218>)
 80119c6:	4a0c      	ldr	r2, [pc, #48]	; (80119f8 <_ZN12PongViewBaseC1Ev+0x21c>)
 80119c8:	21b1      	movs	r1, #177	; 0xb1
 80119ca:	480c      	ldr	r0, [pc, #48]	; (80119fc <_ZN12PongViewBaseC1Ev+0x220>)
 80119cc:	f014 f858 	bl	8025a80 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80119d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119d2:	889a      	ldrh	r2, [r3, #4]
 80119d4:	4b0a      	ldr	r3, [pc, #40]	; (8011a00 <_ZN12PongViewBaseC1Ev+0x224>)
 80119d6:	881b      	ldrh	r3, [r3, #0]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d315      	bcc.n	8011a08 <_ZN12PongViewBaseC1Ev+0x22c>
 80119dc:	4b09      	ldr	r3, [pc, #36]	; (8011a04 <_ZN12PongViewBaseC1Ev+0x228>)
 80119de:	4a06      	ldr	r2, [pc, #24]	; (80119f8 <_ZN12PongViewBaseC1Ev+0x21c>)
 80119e0:	21b2      	movs	r1, #178	; 0xb2
 80119e2:	4806      	ldr	r0, [pc, #24]	; (80119fc <_ZN12PongViewBaseC1Ev+0x220>)
 80119e4:	f014 f84c 	bl	8025a80 <__assert_func>
 80119e8:	08028440 	.word	0x08028440
 80119ec:	08011bd1 	.word	0x08011bd1
 80119f0:	2000b458 	.word	0x2000b458
 80119f4:	08027258 	.word	0x08027258
 80119f8:	08028600 	.word	0x08028600
 80119fc:	0802729c 	.word	0x0802729c
 8011a00:	2000b45c 	.word	0x2000b45c
 8011a04:	080272e0 	.word	0x080272e0
        return texts->getText(typedTextId);
 8011a08:	4b6a      	ldr	r3, [pc, #424]	; (8011bb4 <_ZN12PongViewBaseC1Ev+0x3d8>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a0e:	4611      	mov	r1, r2
 8011a10:	4618      	mov	r0, r3
 8011a12:	f001 f895 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 8011a16:	4603      	mov	r3, r0
 8011a18:	4a67      	ldr	r2, [pc, #412]	; (8011bb8 <_ZN12PongViewBaseC1Ev+0x3dc>)
 8011a1a:	2114      	movs	r1, #20
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f00a f909 	bl	801bc34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011a22:	f107 0320 	add.w	r3, r7, #32
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fa f9c0 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011a38:	4619      	mov	r1, r3
 8011a3a:	4610      	mov	r0, r2
 8011a3c:	f7fe fbc8 	bl	80101d0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011a46:	4618      	mov	r0, r3
 8011a48:	f006 f9d2 	bl	8017df0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8011a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a56:	210d      	movs	r1, #13
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fd fe83 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 8011a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a62:	4619      	mov	r1, r3
 8011a64:	4620      	mov	r0, r4
 8011a66:	f006 f9ed 	bl	8017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fa f99c 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>

    Back_Button.setXY(0, 0);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fa fe1b 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 8011a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011a8e:	2102      	movs	r1, #2
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7fd fd29 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011a9a:	2103      	movs	r1, #3
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7fd fd23 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011aa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011aa6:	2108      	movs	r1, #8
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7fd fd1d 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011aae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011ab2:	2108      	movs	r1, #8
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fd fd17 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011aba:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8011abe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011ac2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011ac6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	4603      	mov	r3, r0
 8011ace:	4620      	mov	r0, r4
 8011ad0:	f006 fb9e 	bl	8018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011ada:	220f      	movs	r2, #15
 8011adc:	2113      	movs	r1, #19
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7fd fdfe 	bl	800f6e0 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011af0:	4619      	mov	r1, r3
 8011af2:	4610      	mov	r0, r2
 8011af4:	f7fd fd6f 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    button1.setXY(636, -35);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011afe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8011b02:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fa fdd7 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 8011b12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011b16:	2100      	movs	r1, #0
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7fd fce5 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011b1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011b22:	2101      	movs	r1, #1
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fd fcdf 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8011b2a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011b2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011b32:	4619      	mov	r1, r3
 8011b34:	4620      	mov	r0, r4
 8011b36:	f006 f9bf 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011b46:	4619      	mov	r1, r3
 8011b48:	4610      	mov	r0, r2
 8011b4a:	f7fd fd44 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(image1);
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	3340      	adds	r3, #64	; 0x40
 8011b54:	4619      	mov	r1, r3
 8011b56:	4610      	mov	r0, r2
 8011b58:	f7fd fd2e 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ball);
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	336c      	adds	r3, #108	; 0x6c
 8011b62:	4619      	mov	r1, r3
 8011b64:	4610      	mov	r0, r2
 8011b66:	f7fd fd27 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(paddle1);
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	33ec      	adds	r3, #236	; 0xec
 8011b70:	4619      	mov	r1, r3
 8011b72:	4610      	mov	r0, r2
 8011b74:	f7fd fd20 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011b80:	4619      	mov	r1, r3
 8011b82:	4610      	mov	r0, r2
 8011b84:	f7fd fd18 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011b90:	4619      	mov	r1, r3
 8011b92:	4610      	mov	r0, r2
 8011b94:	f7fd fd10 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	f7fd fd08 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	4618      	mov	r0, r3
 8011bac:	375c      	adds	r7, #92	; 0x5c
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd90      	pop	{r4, r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	2000b464 	.word	0x2000b464
 8011bb8:	08027334 	.word	0x08027334

08011bbc <_ZN12PongViewBase11setupScreenEv>:

void PongViewBase::setupScreen()
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]

}
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void PongViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011be0:	683a      	ldr	r2, [r7, #0]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d107      	bne.n	8011bf6 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //back_to_main_screen
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenSlideTransitionEast();
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f7ff fded 	bl	80117c6 <_ZN12PongViewBase11applicationEv>
 8011bec:	4603      	mov	r3, r0
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fb f852 	bl	800cc98 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>
        //over
        //When button1 clicked change screen to gameover
        //Go to gameover with no screen transition
        application().gotogameoverScreenNoTransition();
    }
}
 8011bf4:	e00c      	b.n	8011c10 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
    else if (&src == &button1)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011bfc:	683a      	ldr	r2, [r7, #0]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d106      	bne.n	8011c10 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
        application().gotogameoverScreenNoTransition();
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f7ff fddf 	bl	80117c6 <_ZN12PongViewBase11applicationEv>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fb f916 	bl	800ce3c <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>
}
 8011c10:	bf00      	nop
 8011c12:	3708      	adds	r7, #8
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b088      	sub	sp, #32
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	607a      	str	r2, [r7, #4]
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	015a      	lsls	r2, r3, #5
 8011c2c:	f107 0314 	add.w	r3, r7, #20
 8011c30:	4611      	mov	r1, r2
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7ff fc51 	bl	80114da <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	61fb      	str	r3, [r7, #28]
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	015a      	lsls	r2, r3, #5
 8011c48:	f107 0310 	add.w	r3, r7, #16
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7ff fc43 	bl	80114da <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8011c5c:	bf00      	nop
 8011c5e:	3720      	adds	r7, #32
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}

08011c64 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see getArc, updateArcStart, updateArcEnd, updateArc
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b088      	sub	sp, #32
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	607a      	str	r2, [r7, #4]
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	61bb      	str	r3, [r7, #24]
 8011c74:	69bb      	ldr	r3, [r7, #24]
 8011c76:	015a      	lsls	r2, r3, #5
 8011c78:	f107 0314 	add.w	r3, r7, #20
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ff fc2b 	bl	80114da <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	61fb      	str	r3, [r7, #28]
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	015a      	lsls	r2, r3, #5
 8011c94:	f107 0310 	add.w	r3, r7, #16
 8011c98:	4611      	mov	r1, r2
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7ff fc1d 	bl	80114da <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8011ca8:	bf00      	nop
 8011caa:	3720      	adds	r7, #32
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>:
    View()
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f008 fd16 	bl	801a6ec <_ZN8touchgfx6ScreenC1Ev>
 8011cc0:	4a05      	ldr	r2, [pc, #20]	; (8011cd8 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev+0x28>)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	601a      	str	r2, [r3, #0]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3708      	adds	r7, #8
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	0802857c 	.word	0x0802857c

08011cdc <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	4a05      	ldr	r2, [pc, #20]	; (8011cfc <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	601a      	str	r2, [r3, #0]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fa ff0f 	bl	800cb10 <_ZN8touchgfx6WidgetD1Ev>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	08029d64 	.word	0x08029d64

08011d00 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7ff ffe7 	bl	8011cdc <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011d0e:	2130      	movs	r1, #48	; 0x30
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f013 fe89 	bl	8025a28 <_ZdlPvj>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	4a05      	ldr	r2, [pc, #20]	; (8011d40 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	601a      	str	r2, [r3, #0]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7ff ffd3 	bl	8011cdc <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	08029c58 	.word	0x08029c58

08011d44 <_ZN8touchgfx6CircleD0Ev>:
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f7ff ffe7 	bl	8011d20 <_ZN8touchgfx6CircleD1Ev>
 8011d52:	214c      	movs	r1, #76	; 0x4c
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f013 fe67 	bl	8025a28 <_ZdlPvj>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
        : T(),
          moveAnimationRunning(false),
          moveAnimationCounter(0),
          moveAnimationDelay(0),
          moveAnimationEndedCallback(0)
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f005 f8ba 	bl	8016ee8 <_ZN8touchgfx6CircleC1Ev>
 8011d74:	4a0b      	ldr	r2, [pc, #44]	; (8011da4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev+0x40>)
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	601a      	str	r2, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2200      	movs	r2, #0
 8011d86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2200      	movs	r2, #0
 8011d96:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3708      	adds	r7, #8
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	080284f4 	.word	0x080284f4

08011da8 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>:
template <class T>
class Draggable : public T
{
public:
    /** Initializes a new instance of the Draggable class. Make the object touchable. */
    Draggable()
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
        : T()
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fd fc40 	bl	800f638 <_ZN8touchgfx3BoxC1Ev>
 8011db8:	4a06      	ldr	r2, [pc, #24]	; (8011dd4 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev+0x2c>)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	601a      	str	r2, [r3, #0]
    {
        T::setTouchable(true);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2101      	movs	r1, #1
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fe f8bb 	bl	800ff3e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3708      	adds	r7, #8
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	0802848c 	.word	0x0802848c

08011dd8 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	4639      	mov	r1, r7
 8011de4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7fd ff1e 	bl	800fc2c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8011df0:	4a08      	ldr	r2, [pc, #32]	; (8011e14 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	3308      	adds	r3, #8
 8011e00:	463a      	mov	r2, r7
 8011e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e06:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3710      	adds	r7, #16
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	08028474 	.word	0x08028474

08011e18 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	60fb      	str	r3, [r7, #12]
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	015a      	lsls	r2, r3, #5
 8011e2a:	f107 0308 	add.w	r3, r7, #8
 8011e2e:	4611      	mov	r1, r2
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7ff fb52 	bl	80114da <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8011e3e:	bf00      	nop
 8011e40:	3710      	adds	r7, #16
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b084      	sub	sp, #16
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
 8011e4e:	6039      	str	r1, [r7, #0]
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	015a      	lsls	r2, r3, #5
 8011e58:	f107 0308 	add.w	r3, r7, #8
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7ff fb3b 	bl	80114da <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8011e6c:	bf00      	nop
 8011e6e:	3710      	adds	r7, #16
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	4a05      	ldr	r2, [pc, #20]	; (8011e94 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	601a      	str	r2, [r3, #0]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fd ff01 	bl	800fc8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	08028474 	.word	0x08028474

08011e98 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f7ff ffe7 	bl	8011e74 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011ea6:	2110      	movs	r1, #16
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f013 fdbd 	bl	8025a28 <_ZdlPvj>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3708      	adds	r7, #8
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>:
class Draggable : public T
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	4a05      	ldr	r2, [pc, #20]	; (8011ed8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev+0x20>)
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	601a      	str	r2, [r3, #0]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7fd ff43 	bl	800fd54 <_ZN8touchgfx3BoxD1Ev>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	0802848c 	.word	0x0802848c

08011edc <_ZN8touchgfx9DraggableINS_3BoxEED0Ev>:
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f7ff ffe7 	bl	8011eb8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8011eea:	2130      	movs	r1, #48	; 0x30
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f013 fd9b 	bl	8025a28 <_ZdlPvj>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3708      	adds	r7, #8
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
class MoveAnimator : public T
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	4a05      	ldr	r2, [pc, #20]	; (8011f1c <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev+0x20>)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	601a      	str	r2, [r3, #0]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7ff ff07 	bl	8011d20 <_ZN8touchgfx6CircleD1Ev>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4618      	mov	r0, r3
 8011f16:	3708      	adds	r7, #8
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}
 8011f1c:	080284f4 	.word	0x080284f4

08011f20 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f7ff ffe7 	bl	8011efc <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8011f2e:	2168      	movs	r1, #104	; 0x68
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f013 fd79 	bl	8025a28 <_ZdlPvj>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	4a05      	ldr	r2, [pc, #20]	; (8011f60 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	601a      	str	r2, [r3, #0]
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7ff fb4f 	bl	80115f4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	08029cd8 	.word	0x08029cd8

08011f64 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f7ff ffe7 	bl	8011f40 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011f72:	2118      	movs	r1, #24
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f013 fd57 	bl	8025a28 <_ZdlPvj>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	68d2      	ldr	r2, [r2, #12]
 8011f96:	1052      	asrs	r2, r2, #1
 8011f98:	1898      	adds	r0, r3, r2
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	68db      	ldr	r3, [r3, #12]
 8011f9e:	f003 0301 	and.w	r3, r3, #1
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d102      	bne.n	8011fac <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	689b      	ldr	r3, [r3, #8]
 8011faa:	e00a      	b.n	8011fc2 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	68d2      	ldr	r2, [r2, #12]
 8011fb4:	1052      	asrs	r2, r2, #1
 8011fb6:	4413      	add	r3, r2
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	6892      	ldr	r2, [r2, #8]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	6839      	ldr	r1, [r7, #0]
 8011fc4:	4798      	blx	r3
    }
 8011fc6:	bf00      	nop
 8011fc8:	3708      	adds	r7, #8
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8011fce:	b480      	push	{r7}
 8011fd0:	b083      	sub	sp, #12
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d010      	beq.n	8012000 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	689b      	ldr	r3, [r3, #8]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d107      	bne.n	8011ff6 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	f003 0301 	and.w	r3, r3, #1
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d101      	bne.n	8011ff6 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e000      	b.n	8011ff8 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d001      	beq.n	8012000 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e000      	b.n	8012002 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012000:	2300      	movs	r3, #0
    }
 8012002:	4618      	mov	r0, r3
 8012004:	370c      	adds	r7, #12
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr

0801200e <_ZN8touchgfx9DraggableINS_3BoxEE15handleDragEventERKNS_9DragEventE>:
     * Called when dragging the Draggable object. The object is moved according to the drag
     * event.
     *
     * @param  evt The drag event.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 801200e:	b5b0      	push	{r4, r5, r7, lr}
 8012010:	b082      	sub	sp, #8
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
 8012016:	6039      	str	r1, [r7, #0]
    {
        T::handleDragEvent(evt);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	4618      	mov	r0, r3
 801201e:	f7fa fba8 	bl	800c772 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>
        T::moveRelative(evt.getDeltaX(), evt.getDeltaY());
 8012022:	687c      	ldr	r4, [r7, #4]
 8012024:	6838      	ldr	r0, [r7, #0]
 8012026:	f7ff f9ca 	bl	80113be <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 801202a:	4603      	mov	r3, r0
 801202c:	461d      	mov	r5, r3
 801202e:	6838      	ldr	r0, [r7, #0]
 8012030:	f7ff f9da 	bl	80113e8 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 8012034:	4603      	mov	r3, r0
 8012036:	461a      	mov	r2, r3
 8012038:	4629      	mov	r1, r5
 801203a:	4620      	mov	r0, r4
 801203c:	f007 fff2 	bl	801a024 <_ZN8touchgfx8Drawable12moveRelativeEss>
    }
 8012040:	bf00      	nop
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bdb0      	pop	{r4, r5, r7, pc}

08012048 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:
        }
    }

protected:
    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	4618      	mov	r0, r3
 8012054:	f7fa fb98 	bl	800c788 <_ZN8touchgfx8Drawable15handleTickEventEv>

        nextMoveAnimationStep();
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f000 f821 	bl	80120a0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 801205e:	bf00      	nop
 8012060:	3708      	adds	r7, #8
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 8012066:	b480      	push	{r7}
 8012068:	b083      	sub	sp, #12
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
 801206e:	460b      	mov	r3, r1
 8012070:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	887a      	ldrh	r2, [r7, #2]
 8012076:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
 801207a:	bf00      	nop
 801207c:	370c      	adds	r7, #12
 801207e:	46bd      	mov	sp, r7
 8012080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012084:	4770      	bx	lr

08012086 <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 8012086:	b480      	push	{r7}
 8012088:	b083      	sub	sp, #12
 801208a:	af00      	add	r7, sp, #0
 801208c:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    }
 8012094:	4618      	mov	r0, r3
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>:

    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 80120a0:	b590      	push	{r4, r7, lr}
 80120a2:	b085      	sub	sp, #20
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f000 80ad 	beq.w	801220e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d208      	bcs.n	80120d6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x36>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80120ca:	3301      	adds	r3, #1
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 80120d4:	e09b      	b.n	801220e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80120dc:	461a      	mov	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80120e4:	4619      	mov	r1, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80120ec:	440b      	add	r3, r1
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d850      	bhi.n	8012194 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0xf4>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80120f8:	461a      	mov	r2, r3
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012100:	1ad3      	subs	r3, r2, r3
 8012102:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	b298      	uxth	r0, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8012112:	b29a      	uxth	r2, r3
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801211a:	b29b      	uxth	r3, r3
 801211c:	1ad3      	subs	r3, r2, r3
 801211e:	b29b      	uxth	r3, r3
 8012120:	b21a      	sxth	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012128:	2100      	movs	r1, #0
 801212a:	47a0      	blx	r4
 801212c:	4603      	mov	r3, r0
 801212e:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	b298      	uxth	r0, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 801213e:	b29a      	uxth	r2, r3
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8012146:	b29b      	uxth	r3, r3
 8012148:	1ad3      	subs	r3, r2, r3
 801214a:	b29b      	uxth	r3, r3
 801214c:	b21a      	sxth	r2, r3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012154:	2100      	movs	r1, #0
 8012156:	47a0      	blx	r4
 8012158:	4603      	mov	r3, r0
 801215a:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012164:	b29a      	uxth	r2, r3
 8012166:	897b      	ldrh	r3, [r7, #10]
 8012168:	4413      	add	r3, r2
 801216a:	b29b      	uxth	r3, r3
 801216c:	b219      	sxth	r1, r3
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8012174:	b29a      	uxth	r2, r3
 8012176:	893b      	ldrh	r3, [r7, #8]
 8012178:	4413      	add	r3, r2
 801217a:	b29b      	uxth	r3, r3
 801217c:	b21b      	sxth	r3, r3
 801217e:	461a      	mov	r2, r3
 8012180:	f7fa fb26 	bl	800c7d0 <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801218a:	3301      	adds	r3, #1
 801218c:	b29a      	uxth	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801219a:	461a      	mov	r2, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80121a2:	4619      	mov	r1, r3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80121aa:	440b      	add	r3, r1
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d92e      	bls.n	801220e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                    moveAnimationRunning = false;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    moveAnimationCounter = 0;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2200      	movs	r2, #0
 80121bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    Application::getInstance()->unregisterTimerWidget(this);
 80121c0:	f007 fade 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 80121c4:	4602      	mov	r2, r0
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4619      	mov	r1, r3
 80121ca:	4610      	mov	r0, r2
 80121cc:	f007 fade 	bl	801978c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00d      	beq.n	80121f4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	330c      	adds	r3, #12
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4610      	mov	r0, r2
 80121e8:	4798      	blx	r3
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d001      	beq.n	80121f4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 80121f0:	2301      	movs	r3, #1
 80121f2:	e000      	b.n	80121f6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x156>
 80121f4:	2300      	movs	r3, #0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d009      	beq.n	801220e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                        moveAnimationEndedCallback->execute(*this);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	3308      	adds	r3, #8
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	6879      	ldr	r1, [r7, #4]
 801220a:	4610      	mov	r0, r2
 801220c:	4798      	blx	r3
    }
 801220e:	bf00      	nop
 8012210:	3714      	adds	r7, #20
 8012212:	46bd      	mov	sp, r7
 8012214:	bd90      	pop	{r4, r7, pc}
	...

08012218 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	4a05      	ldr	r2, [pc, #20]	; (8012238 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	601a      	str	r2, [r3, #0]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	f7fd f96d 	bl	800f508 <_ZN8touchgfx6ScreenD1Ev>
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	3708      	adds	r7, #8
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	08028684 	.word	0x08028684

0801223c <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f7ff ffe7 	bl	8012218 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801224a:	2140      	movs	r1, #64	; 0x40
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f013 fbeb 	bl	8025a28 <_ZdlPvj>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	4618      	mov	r0, r3
 8012256:	3708      	adds	r7, #8
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	4a16      	ldr	r2, [pc, #88]	; (80122c0 <_ZN14screenViewBaseD1Ev+0x64>)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	601a      	str	r2, [r3, #0]
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8012270:	4618      	mov	r0, r3
 8012272:	f000 fa65 	bl	8012740 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801227c:	4618      	mov	r0, r3
 801227e:	f7fd fdf1 	bl	800fe64 <_ZN8touchgfx8TextAreaD1Ev>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012288:	4618      	mov	r0, r3
 801228a:	f7fe fa3f 	bl	801070c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	33b8      	adds	r3, #184	; 0xb8
 8012292:	4618      	mov	r0, r3
 8012294:	f7fe fa3a 	bl	801070c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	3370      	adds	r3, #112	; 0x70
 801229c:	4618      	mov	r0, r3
 801229e:	f7fe fa35 	bl	801070c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	3340      	adds	r3, #64	; 0x40
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7fd fd54 	bl	800fd54 <_ZN8touchgfx3BoxD1Ev>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ff ffb2 	bl	8012218 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	4618      	mov	r0, r3
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	08028638 	.word	0x08028638

080122c4 <_ZN14screenViewBaseD0Ev>:
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff ffc5 	bl	801225c <_ZN14screenViewBaseD1Ev>
 80122d2:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f013 fba6 	bl	8025a28 <_ZdlPvj>
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	4618      	mov	r0, r3
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b082      	sub	sp, #8
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80122ee:	f007 fa47 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 80122f2:	4603      	mov	r3, r0
    }
 80122f4:	4618      	mov	r0, r3
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 80122fc:	b590      	push	{r4, r7, lr}
 80122fe:	b099      	sub	sp, #100	; 0x64
 8012300:	af02      	add	r7, sp, #8
 8012302:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	4618      	mov	r0, r3
 8012308:	f000 f9e4 	bl	80126d4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 801230c:	4ad2      	ldr	r2, [pc, #840]	; (8012658 <_ZN14screenViewBaseC1Ev+0x35c>)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	601a      	str	r2, [r3, #0]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	3340      	adds	r3, #64	; 0x40
 8012316:	4618      	mov	r0, r3
 8012318:	f7fd f98e 	bl	800f638 <_ZN8touchgfx3BoxC1Ev>
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	3370      	adds	r3, #112	; 0x70
 8012320:	4618      	mov	r0, r3
 8012322:	f006 f979 	bl	8018618 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	33b8      	adds	r3, #184	; 0xb8
 801232a:	4618      	mov	r0, r3
 801232c:	f006 f974 	bl	8018618 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012336:	4618      	mov	r0, r3
 8012338:	f006 f96e 	bl	8018618 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012342:	4618      	mov	r0, r3
 8012344:	f7fd fa24 	bl	800f790 <_ZN8touchgfx8TextAreaC1Ev>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 801234e:	4bc3      	ldr	r3, [pc, #780]	; (801265c <_ZN14screenViewBaseC1Ev+0x360>)
 8012350:	60fb      	str	r3, [r7, #12]
 8012352:	2300      	movs	r3, #0
 8012354:	613b      	str	r3, [r7, #16]
 8012356:	f107 030c 	add.w	r3, r7, #12
 801235a:	cb0c      	ldmia	r3, {r2, r3}
 801235c:	6879      	ldr	r1, [r7, #4]
 801235e:	f000 f9cf 	bl	8012700 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012368:	f44f 7388 	mov.w	r3, #272	; 0x110
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012372:	2200      	movs	r2, #0
 8012374:	2100      	movs	r1, #0
 8012376:	f7fa f93b 	bl	800c5f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(138, 219, 0));
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012380:	2200      	movs	r2, #0
 8012382:	21db      	movs	r1, #219	; 0xdb
 8012384:	208a      	movs	r0, #138	; 0x8a
 8012386:	f7fd faad 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801238a:	4603      	mov	r3, r0
 801238c:	4619      	mov	r1, r3
 801238e:	4620      	mov	r0, r4
 8012390:	f7fd f97a 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 70);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	3370      	adds	r3, #112	; 0x70
 8012398:	2246      	movs	r2, #70	; 0x46
 801239a:	219b      	movs	r1, #155	; 0x9b
 801239c:	4618      	mov	r0, r3
 801239e:	f7fa f98c 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80123a8:	f107 0314 	add.w	r3, r7, #20
 80123ac:	2100      	movs	r1, #0
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fd f89a 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 80123b4:	f107 0318 	add.w	r3, r7, #24
 80123b8:	2101      	movs	r1, #1
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7fd f894 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 80123c0:	f107 0218 	add.w	r2, r7, #24
 80123c4:	f107 0314 	add.w	r3, r7, #20
 80123c8:	4619      	mov	r1, r3
 80123ca:	4620      	mov	r0, r4
 80123cc:	f005 fd74 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80123d6:	f107 031c 	add.w	r3, r7, #28
 80123da:	2100      	movs	r1, #0
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fd f9c1 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 80123e2:	f107 031c 	add.w	r3, r7, #28
 80123e6:	4619      	mov	r1, r3
 80123e8:	4620      	mov	r0, r4
 80123ea:	f7fd fe13 	bl	8010014 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80123ee:	f107 031c 	add.w	r3, r7, #28
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f9 fcda 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80123fe:	22ff      	movs	r2, #255	; 0xff
 8012400:	21ff      	movs	r1, #255	; 0xff
 8012402:	20ff      	movs	r0, #255	; 0xff
 8012404:	f7fd fa6e 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012408:	4603      	mov	r3, r0
 801240a:	4619      	mov	r1, r3
 801240c:	4620      	mov	r0, r4
 801240e:	f7fd fe13 	bl	8010038 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012418:	22ff      	movs	r2, #255	; 0xff
 801241a:	21ff      	movs	r1, #255	; 0xff
 801241c:	20ff      	movs	r0, #255	; 0xff
 801241e:	f7fd fa61 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012422:	4603      	mov	r3, r0
 8012424:	4619      	mov	r1, r3
 8012426:	4620      	mov	r0, r4
 8012428:	f7fd fe14 	bl	8010054 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8012438:	4619      	mov	r1, r3
 801243a:	4610      	mov	r0, r2
 801243c:	f7fd f8cb 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel2.setXY(155, 136);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	33b8      	adds	r3, #184	; 0xb8
 8012444:	2288      	movs	r2, #136	; 0x88
 8012446:	219b      	movs	r1, #155	; 0x9b
 8012448:	4618      	mov	r0, r3
 801244a:	f7fa f936 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8012454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012458:	2100      	movs	r1, #0
 801245a:	4618      	mov	r0, r3
 801245c:	f7fd f844 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 8012460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012464:	2101      	movs	r1, #1
 8012466:	4618      	mov	r0, r3
 8012468:	f7fd f83e 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 801246c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012474:	4619      	mov	r1, r3
 8012476:	4620      	mov	r0, r4
 8012478:	f005 fd1e 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8012482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012486:	2101      	movs	r1, #1
 8012488:	4618      	mov	r0, r3
 801248a:	f7fd f96b 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 801248e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012492:	4619      	mov	r1, r3
 8012494:	4620      	mov	r0, r4
 8012496:	f7fd fdbd 	bl	8010014 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801249a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801249e:	4618      	mov	r0, r3
 80124a0:	f7f9 fc84 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80124aa:	22ff      	movs	r2, #255	; 0xff
 80124ac:	21ff      	movs	r1, #255	; 0xff
 80124ae:	20ff      	movs	r0, #255	; 0xff
 80124b0:	f7fd fa18 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80124b4:	4603      	mov	r3, r0
 80124b6:	4619      	mov	r1, r3
 80124b8:	4620      	mov	r0, r4
 80124ba:	f7fd fdbd 	bl	8010038 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80124c4:	22ff      	movs	r2, #255	; 0xff
 80124c6:	21ff      	movs	r1, #255	; 0xff
 80124c8:	20ff      	movs	r0, #255	; 0xff
 80124ca:	f7fd fa0b 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80124ce:	4603      	mov	r3, r0
 80124d0:	4619      	mov	r1, r3
 80124d2:	4620      	mov	r0, r4
 80124d4:	f7fd fdbe 	bl	8010054 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel2.setAction(buttonCallback);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80124e4:	4619      	mov	r1, r3
 80124e6:	4610      	mov	r0, r2
 80124e8:	f7fd f875 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel3.setXY(155, 203);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80124f2:	22cb      	movs	r2, #203	; 0xcb
 80124f4:	219b      	movs	r1, #155	; 0x9b
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7fa f8df 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012502:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012506:	2100      	movs	r1, #0
 8012508:	4618      	mov	r0, r3
 801250a:	f7fc ffed 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 801250e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012512:	2101      	movs	r1, #1
 8012514:	4618      	mov	r0, r3
 8012516:	f7fc ffe7 	bl	800f4e8 <_ZN8touchgfx6BitmapC1Et>
 801251a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801251e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012522:	4619      	mov	r1, r3
 8012524:	4620      	mov	r0, r4
 8012526:	f005 fcc7 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012530:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012534:	2102      	movs	r1, #2
 8012536:	4618      	mov	r0, r3
 8012538:	f7fd f914 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 801253c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012540:	4619      	mov	r1, r3
 8012542:	4620      	mov	r0, r4
 8012544:	f7fd fd66 	bl	8010014 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8012548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801254c:	4618      	mov	r0, r3
 801254e:	f7f9 fc2d 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012558:	22ff      	movs	r2, #255	; 0xff
 801255a:	21ff      	movs	r1, #255	; 0xff
 801255c:	20ff      	movs	r0, #255	; 0xff
 801255e:	f7fd f9c1 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012562:	4603      	mov	r3, r0
 8012564:	4619      	mov	r1, r3
 8012566:	4620      	mov	r0, r4
 8012568:	f7fd fd66 	bl	8010038 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012572:	22ff      	movs	r2, #255	; 0xff
 8012574:	21ff      	movs	r1, #255	; 0xff
 8012576:	20ff      	movs	r0, #255	; 0xff
 8012578:	f7fd f9b4 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801257c:	4603      	mov	r3, r0
 801257e:	4619      	mov	r1, r3
 8012580:	4620      	mov	r0, r4
 8012582:	f7fd fd67 	bl	8010054 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel3.setAction(buttonCallback);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8012592:	4619      	mov	r1, r3
 8012594:	4610      	mov	r0, r2
 8012596:	f7fd f81e 	bl	800f5d6 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(95, 20);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80125a0:	2214      	movs	r2, #20
 80125a2:	215f      	movs	r1, #95	; 0x5f
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fa f888 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 80125b0:	2200      	movs	r2, #0
 80125b2:	2100      	movs	r1, #0
 80125b4:	2000      	movs	r0, #0
 80125b6:	f7fd f995 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80125ba:	4603      	mov	r3, r0
 80125bc:	64fc      	str	r4, [r7, #76]	; 0x4c
 80125be:	60bb      	str	r3, [r7, #8]
        this->color = color;
 80125c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125c2:	68ba      	ldr	r2, [r7, #8]
 80125c4:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80125cc:	657b      	str	r3, [r7, #84]	; 0x54
 80125ce:	2300      	movs	r3, #0
 80125d0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        linespace = space;
 80125d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125d6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80125da:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 80125e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80125e6:	2117      	movs	r1, #23
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fd f8bb 	bl	800f764 <_ZN8touchgfx9TypedTextC1Et>
 80125ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80125f2:	4619      	mov	r1, r3
 80125f4:	4620      	mov	r0, r4
 80125f6:	f005 fc25 	bl	8017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80125fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80125fe:	4618      	mov	r0, r3
 8012600:	f7f9 fbd4 	bl	800bdac <_ZN8touchgfx9TypedTextD1Ev>

    add(box1);
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	3340      	adds	r3, #64	; 0x40
 801260a:	4619      	mov	r1, r3
 801260c:	4610      	mov	r0, r2
 801260e:	f7fc ffd3 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8012612:	687a      	ldr	r2, [r7, #4]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	3370      	adds	r3, #112	; 0x70
 8012618:	4619      	mov	r1, r3
 801261a:	4610      	mov	r0, r2
 801261c:	f7fc ffcc 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	33b8      	adds	r3, #184	; 0xb8
 8012626:	4619      	mov	r1, r3
 8012628:	4610      	mov	r0, r2
 801262a:	f7fc ffc5 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012636:	4619      	mov	r1, r3
 8012638:	4610      	mov	r0, r2
 801263a:	f7fc ffbd 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012646:	4619      	mov	r1, r3
 8012648:	4610      	mov	r0, r2
 801264a:	f7fc ffb5 	bl	800f5b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	4618      	mov	r0, r3
 8012652:	375c      	adds	r7, #92	; 0x5c
 8012654:	46bd      	mov	sp, r7
 8012656:	bd90      	pop	{r4, r7, pc}
 8012658:	08028638 	.word	0x08028638
 801265c:	08012675 	.word	0x08012675

08012660 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]

}
 8012668:	bf00      	nop
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr

08012674 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	3370      	adds	r3, #112	; 0x70
 8012682:	683a      	ldr	r2, [r7, #0]
 8012684:	429a      	cmp	r2, r3
 8012686:	d107      	bne.n	8012698 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with screen transition towards East
        application().gotoPongScreenCoverTransitionEast();
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7ff fe2c 	bl	80122e6 <_ZN14screenViewBase11applicationEv>
 801268e:	4603      	mov	r3, r0
 8012690:	4618      	mov	r0, r3
 8012692:	f7fa fc19 	bl	800cec8 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>
        //Interaction3
        //When buttonWithLabel3 clicked change screen to gallery
        //Go to gallery with screen transition towards East
        application().gotogalleryScreenCoverTransitionEast();
    }
}
 8012696:	e019      	b.n	80126cc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel2)
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	33b8      	adds	r3, #184	; 0xb8
 801269c:	683a      	ldr	r2, [r7, #0]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d107      	bne.n	80126b2 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoMusicScreenNoTransition();
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7ff fe1f 	bl	80122e6 <_ZN14screenViewBase11applicationEv>
 80126a8:	4603      	mov	r3, r0
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7fa fb80 	bl	800cdb0 <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>
}
 80126b0:	e00c      	b.n	80126cc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel3)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80126b8:	683a      	ldr	r2, [r7, #0]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d106      	bne.n	80126cc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotogalleryScreenCoverTransitionEast();
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f7ff fe11 	bl	80122e6 <_ZN14screenViewBase11applicationEv>
 80126c4:	4603      	mov	r3, r0
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fa fc8a 	bl	800cfe0 <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv>
}
 80126cc:	bf00      	nop
 80126ce:	3708      	adds	r7, #8
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}

080126d4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	4618      	mov	r0, r3
 80126e0:	f008 f804 	bl	801a6ec <_ZN8touchgfx6ScreenC1Ev>
 80126e4:	4a05      	ldr	r2, [pc, #20]	; (80126fc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	601a      	str	r2, [r3, #0]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2200      	movs	r2, #0
 80126ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	4618      	mov	r0, r3
 80126f4:	3708      	adds	r7, #8
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	08028684 	.word	0x08028684

08012700 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	4639      	mov	r1, r7
 801270c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	4618      	mov	r0, r3
 8012714:	f7fd fa8a 	bl	800fc2c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8012718:	4a08      	ldr	r2, [pc, #32]	; (801273c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	68ba      	ldr	r2, [r7, #8]
 8012722:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	3308      	adds	r3, #8
 8012728:	463a      	mov	r2, r7
 801272a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801272e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	4618      	mov	r0, r3
 8012736:	3710      	adds	r7, #16
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	0802866c 	.word	0x0802866c

08012740 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012740:	b580      	push	{r7, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	4a05      	ldr	r2, [pc, #20]	; (8012760 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	601a      	str	r2, [r3, #0]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	4618      	mov	r0, r3
 8012752:	f7fd fa9b 	bl	800fc8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	4618      	mov	r0, r3
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	0802866c 	.word	0x0802866c

08012764 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7ff ffe7 	bl	8012740 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012772:	2110      	movs	r1, #16
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f013 f957 	bl	8025a28 <_ZdlPvj>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4618      	mov	r0, r3
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	68d2      	ldr	r2, [r2, #12]
 8012796:	1052      	asrs	r2, r2, #1
 8012798:	1898      	adds	r0, r3, r2
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	68db      	ldr	r3, [r3, #12]
 801279e:	f003 0301 	and.w	r3, r3, #1
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d102      	bne.n	80127ac <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	689b      	ldr	r3, [r3, #8]
 80127aa:	e00a      	b.n	80127c2 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	687a      	ldr	r2, [r7, #4]
 80127b2:	68d2      	ldr	r2, [r2, #12]
 80127b4:	1052      	asrs	r2, r2, #1
 80127b6:	4413      	add	r3, r2
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	6892      	ldr	r2, [r2, #8]
 80127be:	4413      	add	r3, r2
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	6839      	ldr	r1, [r7, #0]
 80127c4:	4798      	blx	r3
    }
 80127c6:	bf00      	nop
 80127c8:	3708      	adds	r7, #8
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80127ce:	b480      	push	{r7}
 80127d0:	b083      	sub	sp, #12
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d010      	beq.n	8012800 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d107      	bne.n	80127f6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	68db      	ldr	r3, [r3, #12]
 80127ea:	f003 0301 	and.w	r3, r3, #1
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d101      	bne.n	80127f6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80127f2:	2301      	movs	r3, #1
 80127f4:	e000      	b.n	80127f8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80127f6:	2300      	movs	r3, #0
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d001      	beq.n	8012800 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80127fc:	2301      	movs	r3, #1
 80127fe:	e000      	b.n	8012802 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012800:	2300      	movs	r3, #0
    }
 8012802:	4618      	mov	r0, r3
 8012804:	370c      	adds	r7, #12
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
	...

08012810 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012810:	b480      	push	{r7}
 8012812:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012814:	4b02      	ldr	r3, [pc, #8]	; (8012820 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012816:	4618      	mov	r0, r3
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr
 8012820:	080286b0 	.word	0x080286b0

08012824 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012824:	b480      	push	{r7}
 8012826:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012828:	230e      	movs	r3, #14
}
 801282a:	4618      	mov	r0, r3
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr

08012834 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8012834:	b480      	push	{r7}
 8012836:	b085      	sub	sp, #20
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	460b      	mov	r3, r1
 801283e:	607a      	str	r2, [r7, #4]
 8012840:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8012842:	2300      	movs	r3, #0
    }
 8012844:	4618      	mov	r0, r3
 8012846:	3714      	adds	r7, #20
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr

08012850 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012858:	2300      	movs	r3, #0
    }
 801285a:	4618      	mov	r0, r3
 801285c:	370c      	adds	r7, #12
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr
	...

08012868 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012868:	b480      	push	{r7}
 801286a:	b085      	sub	sp, #20
 801286c:	af00      	add	r7, sp, #0
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	4613      	mov	r3, r2
 8012874:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012876:	4a07      	ldr	r2, [pc, #28]	; (8012894 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801287c:	4a06      	ldr	r2, [pc, #24]	; (8012898 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012882:	4a06      	ldr	r2, [pc, #24]	; (801289c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012884:	88fb      	ldrh	r3, [r7, #6]
 8012886:	8013      	strh	r3, [r2, #0]
    }
 8012888:	bf00      	nop
 801288a:	3714      	adds	r7, #20
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr
 8012894:	2000b458 	.word	0x2000b458
 8012898:	2000b460 	.word	0x2000b460
 801289c:	2000b45c 	.word	0x2000b45c

080128a0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80128a0:	b40e      	push	{r1, r2, r3}
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b085      	sub	sp, #20
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80128aa:	f107 0320 	add.w	r3, r7, #32
 80128ae:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	69fa      	ldr	r2, [r7, #28]
 80128b4:	2100      	movs	r1, #0
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f007 fa7a 	bl	8019db0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80128bc:	4603      	mov	r3, r0
 80128be:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80128c0:	89fb      	ldrh	r3, [r7, #14]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3714      	adds	r7, #20
 80128c6:	46bd      	mov	sp, r7
 80128c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80128cc:	b003      	add	sp, #12
 80128ce:	4770      	bx	lr

080128d0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80128d0:	b40c      	push	{r2, r3}
 80128d2:	b580      	push	{r7, lr}
 80128d4:	b084      	sub	sp, #16
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]
 80128da:	460b      	mov	r3, r1
 80128dc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80128de:	f107 031c 	add.w	r3, r7, #28
 80128e2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80128e4:	78f9      	ldrb	r1, [r7, #3]
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	69ba      	ldr	r2, [r7, #24]
 80128ea:	6878      	ldr	r0, [r7, #4]
 80128ec:	f007 fa60 	bl	8019db0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80128f0:	4603      	mov	r3, r0
 80128f2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80128f4:	89fb      	ldrh	r3, [r7, #14]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012900:	b002      	add	sp, #8
 8012902:	4770      	bx	lr

08012904 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b08a      	sub	sp, #40	; 0x28
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	460b      	mov	r3, r1
 801290e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012914:	2b00      	cmp	r3, #0
 8012916:	d016      	beq.n	8012946 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	331a      	adds	r3, #26
 801291c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012920:	8adb      	ldrh	r3, [r3, #22]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d105      	bne.n	8012932 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8012926:	4b42      	ldr	r3, [pc, #264]	; (8012a30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8012928:	4a42      	ldr	r2, [pc, #264]	; (8012a34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801292a:	21c0      	movs	r1, #192	; 0xc0
 801292c:	4842      	ldr	r0, [pc, #264]	; (8012a38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801292e:	f013 f8a7 	bl	8025a80 <__assert_func>
            return buffer[pos];
 8012932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012934:	8a9b      	ldrh	r3, [r3, #20]
 8012936:	461a      	mov	r2, r3
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d001      	beq.n	8012946 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012942:	2301      	movs	r3, #1
 8012944:	e000      	b.n	8012948 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8012946:	2300      	movs	r3, #0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d068      	beq.n	8012a1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f008 fdd1 	bl	801b4f4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	331a      	adds	r3, #26
 8012956:	623b      	str	r3, [r7, #32]
 8012958:	2301      	movs	r3, #1
 801295a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 801295c:	6a3b      	ldr	r3, [r7, #32]
 801295e:	8adb      	ldrh	r3, [r3, #22]
 8012960:	8bfa      	ldrh	r2, [r7, #30]
 8012962:	429a      	cmp	r2, r3
 8012964:	d305      	bcc.n	8012972 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8012966:	4b35      	ldr	r3, [pc, #212]	; (8012a3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012968:	4a35      	ldr	r2, [pc, #212]	; (8012a40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801296a:	21c5      	movs	r1, #197	; 0xc5
 801296c:	4832      	ldr	r0, [pc, #200]	; (8012a38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801296e:	f013 f887 	bl	8025a80 <__assert_func>
            const uint16_t index = pos + offset;
 8012972:	6a3b      	ldr	r3, [r7, #32]
 8012974:	8a9a      	ldrh	r2, [r3, #20]
 8012976:	8bfb      	ldrh	r3, [r7, #30]
 8012978:	4413      	add	r3, r2
 801297a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 801297c:	8bbb      	ldrh	r3, [r7, #28]
 801297e:	2b09      	cmp	r3, #9
 8012980:	d801      	bhi.n	8012986 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8012982:	8bbb      	ldrh	r3, [r7, #28]
 8012984:	e001      	b.n	801298a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8012986:	8bbb      	ldrh	r3, [r7, #28]
 8012988:	3b0a      	subs	r3, #10
 801298a:	6a3a      	ldr	r2, [r7, #32]
 801298c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012990:	f640 123f 	movw	r2, #2367	; 0x93f
 8012994:	4293      	cmp	r3, r2
 8012996:	bf0c      	ite	eq
 8012998:	2301      	moveq	r3, #1
 801299a:	2300      	movne	r3, #0
 801299c:	b2db      	uxtb	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d03d      	beq.n	8012a1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	331a      	adds	r3, #26
 80129a6:	687a      	ldr	r2, [r7, #4]
 80129a8:	321a      	adds	r2, #26
 80129aa:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80129ac:	68ba      	ldr	r2, [r7, #8]
 80129ae:	8ad2      	ldrh	r2, [r2, #22]
 80129b0:	2a00      	cmp	r2, #0
 80129b2:	d105      	bne.n	80129c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80129b4:	4b1e      	ldr	r3, [pc, #120]	; (8012a30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 80129b6:	4a1f      	ldr	r2, [pc, #124]	; (8012a34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80129b8:	21c0      	movs	r1, #192	; 0xc0
 80129ba:	481f      	ldr	r0, [pc, #124]	; (8012a38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80129bc:	f013 f860 	bl	8025a80 <__assert_func>
            return buffer[pos];
 80129c0:	68ba      	ldr	r2, [r7, #8]
 80129c2:	8a92      	ldrh	r2, [r2, #20]
 80129c4:	4611      	mov	r1, r2
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80129cc:	613b      	str	r3, [r7, #16]
 80129ce:	4613      	mov	r3, r2
 80129d0:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	8adb      	ldrh	r3, [r3, #22]
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d806      	bhi.n	80129e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80129da:	4b1a      	ldr	r3, [pc, #104]	; (8012a44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80129dc:	4a1a      	ldr	r2, [pc, #104]	; (8012a48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80129de:	f240 110d 	movw	r1, #269	; 0x10d
 80129e2:	4815      	ldr	r0, [pc, #84]	; (8012a38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80129e4:	f013 f84c 	bl	8025a80 <__assert_func>
            const uint16_t index = pos + 1;
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	8a9b      	ldrh	r3, [r3, #20]
 80129ec:	3301      	adds	r3, #1
 80129ee:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80129f0:	89bb      	ldrh	r3, [r7, #12]
 80129f2:	2b09      	cmp	r3, #9
 80129f4:	d801      	bhi.n	80129fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80129f6:	89bb      	ldrh	r3, [r7, #12]
 80129f8:	e000      	b.n	80129fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80129fa:	2300      	movs	r3, #0
 80129fc:	693a      	ldr	r2, [r7, #16]
 80129fe:	89f9      	ldrh	r1, [r7, #14]
 8012a00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	331a      	adds	r3, #26
 8012a08:	61bb      	str	r3, [r7, #24]
 8012a0a:	f640 133f 	movw	r3, #2367	; 0x93f
 8012a0e:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	8a9b      	ldrh	r3, [r3, #20]
 8012a14:	4619      	mov	r1, r3
 8012a16:	69bb      	ldr	r3, [r7, #24]
 8012a18:	8afa      	ldrh	r2, [r7, #22]
 8012a1a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f008 fc4c 	bl	801b2bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012a24:	4603      	mov	r3, r0
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3728      	adds	r7, #40	; 0x28
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	08027338 	.word	0x08027338
 8012a34:	080288ec 	.word	0x080288ec
 8012a38:	08027344 	.word	0x08027344
 8012a3c:	0802738c 	.word	0x0802738c
 8012a40:	08028818 	.word	0x08028818
 8012a44:	0802739c 	.word	0x0802739c
 8012a48:	08028998 	.word	0x08028998

08012a4c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b082      	sub	sp, #8
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f008 fbeb 	bl	801b230 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8012a5a:	bf00      	nop
 8012a5c:	3708      	adds	r7, #8
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}

08012a62 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8012a62:	b580      	push	{r7, lr}
 8012a64:	b088      	sub	sp, #32
 8012a66:	af02      	add	r7, sp, #8
 8012a68:	60f8      	str	r0, [r7, #12]
 8012a6a:	1d38      	adds	r0, r7, #4
 8012a6c:	e880 0006 	stmia.w	r0, {r1, r2}
 8012a70:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8012a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012a76:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8012a78:	1d39      	adds	r1, r7, #4
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	9301      	str	r3, [sp, #4]
 8012a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a80:	9300      	str	r3, [sp, #0]
 8012a82:	6a3b      	ldr	r3, [r7, #32]
 8012a84:	683a      	ldr	r2, [r7, #0]
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f006 fa95 	bl	8018fb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8012a8c:	bf00      	nop
 8012a8e:	3718      	adds	r7, #24
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}

08012a94 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8012a94:	b590      	push	{r4, r7, lr}
 8012a96:	b085      	sub	sp, #20
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012aa2:	88fb      	ldrh	r3, [r7, #6]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d127      	bne.n	8012af8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012aa8:	88fb      	ldrh	r3, [r7, #6]
 8012aaa:	4a1e      	ldr	r2, [pc, #120]	; (8012b24 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d016      	beq.n	8012ae2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012ab4:	88fb      	ldrh	r3, [r7, #6]
 8012ab6:	4a1b      	ldr	r2, [pc, #108]	; (8012b24 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012abc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	68ba      	ldr	r2, [r7, #8]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	4a18      	ldr	r2, [pc, #96]	; (8012b28 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012ac8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	68ba      	ldr	r2, [r7, #8]
 8012ad0:	4413      	add	r3, r2
 8012ad2:	4a16      	ldr	r2, [pc, #88]	; (8012b2c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012ad4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	689b      	ldr	r3, [r3, #8]
 8012ada:	68ba      	ldr	r2, [r7, #8]
 8012adc:	4413      	add	r3, r2
 8012ade:	60fb      	str	r3, [r7, #12]
 8012ae0:	e00a      	b.n	8012af8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012ae2:	4b11      	ldr	r3, [pc, #68]	; (8012b28 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012ae4:	4a12      	ldr	r2, [pc, #72]	; (8012b30 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8012ae6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012ae8:	4a12      	ldr	r2, [pc, #72]	; (8012b34 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012aea:	4b10      	ldr	r3, [pc, #64]	; (8012b2c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012aec:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012aee:	88fb      	ldrh	r3, [r7, #6]
 8012af0:	4a11      	ldr	r2, [pc, #68]	; (8012b38 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012af6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00d      	beq.n	8012b1a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012afe:	4a0f      	ldr	r2, [pc, #60]	; (8012b3c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012b00:	88fb      	ldrh	r3, [r7, #6]
 8012b02:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012b04:	f000 f83e 	bl	8012b84 <_ZN17TypedTextDatabase8getFontsEv>
 8012b08:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012b0a:	f000 f833 	bl	8012b74 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	461a      	mov	r2, r3
 8012b12:	4621      	mov	r1, r4
 8012b14:	68f8      	ldr	r0, [r7, #12]
 8012b16:	f7ff fea7 	bl	8012868 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012b1a:	bf00      	nop
 8012b1c:	3714      	adds	r7, #20
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd90      	pop	{r4, r7, pc}
 8012b22:	bf00      	nop
 8012b24:	20008648 	.word	0x20008648
 8012b28:	20008650 	.word	0x20008650
 8012b2c:	20008654 	.word	0x20008654
 8012b30:	080e1544 	.word	0x080e1544
 8012b34:	080e14e0 	.word	0x080e14e0
 8012b38:	080e174c 	.word	0x080e174c
 8012b3c:	2000864c 	.word	0x2000864c

08012b40 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012b40:	b480      	push	{r7}
 8012b42:	b083      	sub	sp, #12
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	460b      	mov	r3, r1
 8012b4a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012b4c:	4b07      	ldr	r3, [pc, #28]	; (8012b6c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	4b07      	ldr	r3, [pc, #28]	; (8012b70 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012b52:	6819      	ldr	r1, [r3, #0]
 8012b54:	887b      	ldrh	r3, [r7, #2]
 8012b56:	009b      	lsls	r3, r3, #2
 8012b58:	440b      	add	r3, r1
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	4413      	add	r3, r2
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	370c      	adds	r7, #12
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr
 8012b6c:	20008650 	.word	0x20008650
 8012b70:	20008654 	.word	0x20008654

08012b74 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012b74:	b480      	push	{r7}
 8012b76:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012b78:	2319      	movs	r3, #25
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr

08012b84 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012b84:	b480      	push	{r7}
 8012b86:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8012b88:	4b02      	ldr	r3, [pc, #8]	; (8012b94 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b92:	4770      	bx	lr
 8012b94:	20008658 	.word	0x20008658

08012b98 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d127      	bne.n	8012bf8 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d122      	bne.n	8012bf8 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_verdana_20_4bpp()),
 8012bb2:	f7f9 fa49 	bl	800c048 <_Z23getFont_verdana_20_4bppv>
 8012bb6:	4602      	mov	r2, r0
};
 8012bb8:	4b11      	ldr	r3, [pc, #68]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012bba:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8012bbc:	f7f9 fb4c 	bl	800c258 <_Z23getFont_verdana_40_4bppv>
 8012bc0:	4602      	mov	r2, r0
};
 8012bc2:	4b0f      	ldr	r3, [pc, #60]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012bc4:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_19_4bpp()),
 8012bc6:	f7f9 f9fd 	bl	800bfc4 <_Z23getFont_verdana_19_4bppv>
 8012bca:	4602      	mov	r2, r0
};
 8012bcc:	4b0c      	ldr	r3, [pc, #48]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012bce:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_27_4bpp()),
 8012bd0:	f7f9 fabe 	bl	800c150 <_Z23getFont_verdana_27_4bppv>
 8012bd4:	4602      	mov	r2, r0
};
 8012bd6:	4b0a      	ldr	r3, [pc, #40]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012bd8:	60da      	str	r2, [r3, #12]
    &(getFont_verdana_24_4bpp()),
 8012bda:	f7f9 fa77 	bl	800c0cc <_Z23getFont_verdana_24_4bppv>
 8012bde:	4602      	mov	r2, r0
};
 8012be0:	4b07      	ldr	r3, [pc, #28]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012be2:	611a      	str	r2, [r3, #16]
    &(getFont_verdana_28_4bpp()),
 8012be4:	f7f9 faf6 	bl	800c1d4 <_Z23getFont_verdana_28_4bppv>
 8012be8:	4602      	mov	r2, r0
};
 8012bea:	4b05      	ldr	r3, [pc, #20]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012bec:	615a      	str	r2, [r3, #20]
    &(getFont_verdana_10_4bpp())
 8012bee:	f7f9 f9a7 	bl	800bf40 <_Z23getFont_verdana_10_4bppv>
 8012bf2:	4602      	mov	r2, r0
};
 8012bf4:	4b02      	ldr	r3, [pc, #8]	; (8012c00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012bf6:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8012bf8:	bf00      	nop
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	20008658 	.word	0x20008658

08012c04 <_GLOBAL__sub_I_touchgfx_fonts>:
 8012c04:	b580      	push	{r7, lr}
 8012c06:	af00      	add	r7, sp, #0
 8012c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012c0c:	2001      	movs	r0, #1
 8012c0e:	f7ff ffc3 	bl	8012b98 <_Z41__static_initialization_and_destruction_0ii>
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	4a05      	ldr	r2, [pc, #20]	; (8012c34 <_ZN19FrontendApplicationD1Ev+0x20>)
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	601a      	str	r2, [r3, #0]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7f9 fef9 	bl	800ca1c <_ZN23FrontendApplicationBaseD1Ev>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	08028a54 	.word	0x08028a54

08012c38 <_ZN19FrontendApplicationD0Ev>:
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f7ff ffe7 	bl	8012c14 <_ZN19FrontendApplicationD1Ev>
 8012c46:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f012 feec 	bl	8025a28 <_ZdlPvj>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012c5a:	b580      	push	{r7, lr}
 8012c5c:	b082      	sub	sp, #8
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f000 fa27 	bl	80130bc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	4618      	mov	r0, r3
 8012c72:	f006 fc67 	bl	8019544 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012c76:	bf00      	nop
 8012c78:	3708      	adds	r7, #8
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}
	...

08012c80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	60f8      	str	r0, [r7, #12]
 8012c88:	60b9      	str	r1, [r7, #8]
 8012c8a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	68b9      	ldr	r1, [r7, #8]
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7f9 ff5e 	bl	800cb54 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012c98:	4a03      	ldr	r2, [pc, #12]	; (8012ca8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	601a      	str	r2, [r3, #0]
{

}
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3710      	adds	r7, #16
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	08028a54 	.word	0x08028a54

08012cac <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
    {
    }
 8012cb4:	bf00      	nop
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr

08012cc0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012cc0:	b480      	push	{r7}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
    {
    }
 8012cc8:	bf00      	nop
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
    {
 8012cdc:	4a04      	ldr	r2, [pc, #16]	; (8012cf0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	601a      	str	r2, [r3, #0]
    }
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	370c      	adds	r7, #12
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr
 8012cf0:	08028ad0 	.word	0x08028ad0

08012cf4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
    }
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f7ff ffe9 	bl	8012cd4 <_ZN8touchgfx9PresenterD1Ev>
 8012d02:	2104      	movs	r1, #4
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f012 fe8f 	bl	8025a28 <_ZdlPvj>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3708      	adds	r7, #8
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8012d14:	b480      	push	{r7}
 8012d16:	b083      	sub	sp, #12
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
    {
 8012d1c:	4a04      	ldr	r2, [pc, #16]	; (8012d30 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	601a      	str	r2, [r3, #0]
    }
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	4618      	mov	r0, r3
 8012d26:	370c      	adds	r7, #12
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2e:	4770      	bx	lr
 8012d30:	08028ad0 	.word	0x08028ad0

08012d34 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012d34:	b480      	push	{r7}
 8012d36:	b083      	sub	sp, #12
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	4a06      	ldr	r2, [pc, #24]	; (8012d58 <_ZN13ModelListenerC1Ev+0x24>)
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	601a      	str	r2, [r3, #0]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2200      	movs	r2, #0
 8012d46:	605a      	str	r2, [r3, #4]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	370c      	adds	r7, #12
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop
 8012d58:	08028ac0 	.word	0x08028ac0

08012d5c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	4a04      	ldr	r2, [pc, #16]	; (8012d78 <_ZN13ModelListenerD1Ev+0x1c>)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	601a      	str	r2, [r3, #0]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	370c      	adds	r7, #12
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr
 8012d78:	08028ac0 	.word	0x08028ac0

08012d7c <_ZN13ModelListenerD0Ev>:
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7ff ffe9 	bl	8012d5c <_ZN13ModelListenerD1Ev>
 8012d8a:	2108      	movs	r1, #8
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f012 fe4b 	bl	8025a28 <_ZdlPvj>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4618      	mov	r0, r3
 8012d96:	3708      	adds	r7, #8
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <_ZN16galleryPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~galleryPresenter() {};
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	4a09      	ldr	r2, [pc, #36]	; (8012dcc <_ZN16galleryPresenterD1Ev+0x30>)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	601a      	str	r2, [r3, #0]
 8012daa:	4a09      	ldr	r2, [pc, #36]	; (8012dd0 <_ZN16galleryPresenterD1Ev+0x34>)
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	605a      	str	r2, [r3, #4]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	3304      	adds	r3, #4
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7ff ffd1 	bl	8012d5c <_ZN13ModelListenerD1Ev>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7ff ff89 	bl	8012cd4 <_ZN8touchgfx9PresenterD1Ev>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	08028a98 	.word	0x08028a98
 8012dd0:	08028ab0 	.word	0x08028ab0

08012dd4 <_ZThn4_N16galleryPresenterD1Ev>:
 8012dd4:	f1a0 0004 	sub.w	r0, r0, #4
 8012dd8:	e7e0      	b.n	8012d9c <_ZN16galleryPresenterD1Ev>
 8012dda:	bf00      	nop

08012ddc <_ZN16galleryPresenterD0Ev>:
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7ff ffd9 	bl	8012d9c <_ZN16galleryPresenterD1Ev>
 8012dea:	2110      	movs	r1, #16
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f012 fe1b 	bl	8025a28 <_ZdlPvj>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	4618      	mov	r0, r3
 8012df6:	3708      	adds	r7, #8
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <_ZThn4_N16galleryPresenterD0Ev>:
 8012dfc:	f1a0 0004 	sub.w	r0, r0, #4
 8012e00:	e7ec      	b.n	8012ddc <_ZN16galleryPresenterD0Ev>
	...

08012e04 <_ZN16galleryPresenterC1ER11galleryView>:
#include <gui/gallery_screen/galleryView.hpp>
#include <gui/gallery_screen/galleryPresenter.hpp>

galleryPresenter::galleryPresenter(galleryView& v)
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
    : view(v)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7ff ff7f 	bl	8012d14 <_ZN8touchgfx9PresenterC1Ev>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	3304      	adds	r3, #4
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff ff8a 	bl	8012d34 <_ZN13ModelListenerC1Ev>
 8012e20:	4a06      	ldr	r2, [pc, #24]	; (8012e3c <_ZN16galleryPresenterC1ER11galleryView+0x38>)
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	601a      	str	r2, [r3, #0]
 8012e26:	4a06      	ldr	r2, [pc, #24]	; (8012e40 <_ZN16galleryPresenterC1ER11galleryView+0x3c>)
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	605a      	str	r2, [r3, #4]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	683a      	ldr	r2, [r7, #0]
 8012e30:	60da      	str	r2, [r3, #12]
{

}
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	4618      	mov	r0, r3
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	08028a98 	.word	0x08028a98
 8012e40:	08028ab0 	.word	0x08028ab0

08012e44 <_ZN16galleryPresenter8activateEv>:

void galleryPresenter::activate()
{
 8012e44:	b480      	push	{r7}
 8012e46:	b083      	sub	sp, #12
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]

}
 8012e4c:	bf00      	nop
 8012e4e:	370c      	adds	r7, #12
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr

08012e58 <_ZN16galleryPresenter10deactivateEv>:

void galleryPresenter::deactivate()
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]

}
 8012e60:	bf00      	nop
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <_ZN11galleryViewD1Ev>:

class galleryView : public galleryViewBase
{
public:
    galleryView();
    virtual ~galleryView() {}
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	4a05      	ldr	r2, [pc, #20]	; (8012e8c <_ZN11galleryViewD1Ev+0x20>)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	601a      	str	r2, [r3, #0]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fc fce3 	bl	800f848 <_ZN15galleryViewBaseD1Ev>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	4618      	mov	r0, r3
 8012e86:	3708      	adds	r7, #8
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}
 8012e8c:	08028ae8 	.word	0x08028ae8

08012e90 <_ZN11galleryViewD0Ev>:
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f7ff ffe7 	bl	8012e6c <_ZN11galleryViewD1Ev>
 8012e9e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f012 fdc0 	bl	8025a28 <_ZdlPvj>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
	...

08012eb4 <_ZN11galleryViewC1Ev>:
#include <gui/gallery_screen/galleryView.hpp>

galleryView::galleryView()
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fc fd3a 	bl	800f938 <_ZN15galleryViewBaseC1Ev>
 8012ec4:	4a03      	ldr	r2, [pc, #12]	; (8012ed4 <_ZN11galleryViewC1Ev+0x20>)
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	601a      	str	r2, [r3, #0]
{

}
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	08028ae8 	.word	0x08028ae8

08012ed8 <_ZN11galleryView11setupScreenEv>:

void galleryView::setupScreen()
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
    galleryViewBase::setupScreen();
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fc fe6c 	bl	800fbc0 <_ZN15galleryViewBase11setupScreenEv>
}
 8012ee8:	bf00      	nop
 8012eea:	3708      	adds	r7, #8
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}

08012ef0 <_ZN11galleryView14tearDownScreenEv>:

void galleryView::tearDownScreen()
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
    galleryViewBase::tearDownScreen();
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7fc fb3c 	bl	800f578 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012f00:	bf00      	nop
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}

08012f08 <_ZN17gameoverPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~gameoverPresenter() {};
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	4a09      	ldr	r2, [pc, #36]	; (8012f38 <_ZN17gameoverPresenterD1Ev+0x30>)
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	601a      	str	r2, [r3, #0]
 8012f16:	4a09      	ldr	r2, [pc, #36]	; (8012f3c <_ZN17gameoverPresenterD1Ev+0x34>)
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	605a      	str	r2, [r3, #4]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	3304      	adds	r3, #4
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7ff ff1b 	bl	8012d5c <_ZN13ModelListenerD1Ev>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7ff fed3 	bl	8012cd4 <_ZN8touchgfx9PresenterD1Ev>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	4618      	mov	r0, r3
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	08028b1c 	.word	0x08028b1c
 8012f3c:	08028b34 	.word	0x08028b34

08012f40 <_ZThn4_N17gameoverPresenterD1Ev>:
 8012f40:	f1a0 0004 	sub.w	r0, r0, #4
 8012f44:	e7e0      	b.n	8012f08 <_ZN17gameoverPresenterD1Ev>
 8012f46:	bf00      	nop

08012f48 <_ZN17gameoverPresenterD0Ev>:
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f7ff ffd9 	bl	8012f08 <_ZN17gameoverPresenterD1Ev>
 8012f56:	2110      	movs	r1, #16
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f012 fd65 	bl	8025a28 <_ZdlPvj>
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	4618      	mov	r0, r3
 8012f62:	3708      	adds	r7, #8
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <_ZThn4_N17gameoverPresenterD0Ev>:
 8012f68:	f1a0 0004 	sub.w	r0, r0, #4
 8012f6c:	e7ec      	b.n	8012f48 <_ZN17gameoverPresenterD0Ev>
	...

08012f70 <_ZN17gameoverPresenterC1ER12gameoverView>:
#include <gui/gameover_screen/gameoverView.hpp>
#include <gui/gameover_screen/gameoverPresenter.hpp>

gameoverPresenter::gameoverPresenter(gameoverView& v)
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
    : view(v)
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7ff fec9 	bl	8012d14 <_ZN8touchgfx9PresenterC1Ev>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	3304      	adds	r3, #4
 8012f86:	4618      	mov	r0, r3
 8012f88:	f7ff fed4 	bl	8012d34 <_ZN13ModelListenerC1Ev>
 8012f8c:	4a06      	ldr	r2, [pc, #24]	; (8012fa8 <_ZN17gameoverPresenterC1ER12gameoverView+0x38>)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	601a      	str	r2, [r3, #0]
 8012f92:	4a06      	ldr	r2, [pc, #24]	; (8012fac <_ZN17gameoverPresenterC1ER12gameoverView+0x3c>)
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	605a      	str	r2, [r3, #4]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	683a      	ldr	r2, [r7, #0]
 8012f9c:	60da      	str	r2, [r3, #12]
{

}
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3708      	adds	r7, #8
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}
 8012fa8:	08028b1c 	.word	0x08028b1c
 8012fac:	08028b34 	.word	0x08028b34

08012fb0 <_ZN17gameoverPresenter8activateEv>:

void gameoverPresenter::activate()
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]

}
 8012fb8:	bf00      	nop
 8012fba:	370c      	adds	r7, #12
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc2:	4770      	bx	lr

08012fc4 <_ZN17gameoverPresenter10deactivateEv>:

void gameoverPresenter::deactivate()
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]

}
 8012fcc:	bf00      	nop
 8012fce:	370c      	adds	r7, #12
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr

08012fd8 <_ZN12gameoverViewD1Ev>:

class gameoverView : public gameoverViewBase
{
public:
    gameoverView();
    virtual ~gameoverView() {}
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	4a05      	ldr	r2, [pc, #20]	; (8012ff8 <_ZN12gameoverViewD1Ev+0x20>)
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	601a      	str	r2, [r3, #0]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7fd f921 	bl	8010230 <_ZN16gameoverViewBaseD1Ev>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3708      	adds	r7, #8
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	08028b44 	.word	0x08028b44

08012ffc <_ZN12gameoverViewD0Ev>:
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7ff ffe7 	bl	8012fd8 <_ZN12gameoverViewD1Ev>
 801300a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f012 fd0a 	bl	8025a28 <_ZdlPvj>
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	4618      	mov	r0, r3
 8013018:	3708      	adds	r7, #8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
	...

08013020 <_ZN12gameoverViewC1Ev>:
#include <gui/gameover_screen/gameoverView.hpp>

gameoverView::gameoverView()
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	4618      	mov	r0, r3
 801302c:	f7fd f94e 	bl	80102cc <_ZN16gameoverViewBaseC1Ev>
 8013030:	4a03      	ldr	r2, [pc, #12]	; (8013040 <_ZN12gameoverViewC1Ev+0x20>)
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	601a      	str	r2, [r3, #0]
{

}
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	4618      	mov	r0, r3
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	08028b44 	.word	0x08028b44

08013044 <_ZN12gameoverView11setupScreenEv>:

void gameoverView::setupScreen()
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
    gameoverViewBase::setupScreen();
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	4618      	mov	r0, r3
 8013050:	f7fd fae4 	bl	801061c <_ZN16gameoverViewBase11setupScreenEv>
	Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", 10*pong_score);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 801305a:	4b09      	ldr	r3, [pc, #36]	; (8013080 <_ZN12gameoverView11setupScreenEv+0x3c>)
 801305c:	681a      	ldr	r2, [r3, #0]
 801305e:	4613      	mov	r3, r2
 8013060:	009b      	lsls	r3, r3, #2
 8013062:	4413      	add	r3, r2
 8013064:	005b      	lsls	r3, r3, #1
 8013066:	4a07      	ldr	r2, [pc, #28]	; (8013084 <_ZN12gameoverView11setupScreenEv+0x40>)
 8013068:	2114      	movs	r1, #20
 801306a:	f008 fde3 	bl	801bc34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	score.invalidate();
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	33f4      	adds	r3, #244	; 0xf4
 8013072:	4618      	mov	r0, r3
 8013074:	f006 ffa6 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8013078:	bf00      	nop
 801307a:	3708      	adds	r7, #8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	2000ba1c 	.word	0x2000ba1c
 8013084:	080273a8 	.word	0x080273a8

08013088 <_ZN12gameoverView14tearDownScreenEv>:

void gameoverView::tearDownScreen()
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
    gameoverViewBase::tearDownScreen();
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	4618      	mov	r0, r3
 8013094:	f7fc fa70 	bl	800f578 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013098:	bf00      	nop
 801309a:	3708      	adds	r7, #8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}

080130a0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80130a0:	b480      	push	{r7}
 80130a2:	b083      	sub	sp, #12
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	601a      	str	r2, [r3, #0]
{

}
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	4618      	mov	r0, r3
 80130b2:	370c      	adds	r7, #12
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	4770      	bx	lr

080130bc <_ZN5Model4tickEv>:

void Model::tick()
{
 80130bc:	b480      	push	{r7}
 80130be:	b083      	sub	sp, #12
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]

}
 80130c4:	bf00      	nop
 80130c6:	370c      	adds	r7, #12
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr

080130d0 <_ZN14MusicPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MusicPresenter() {};
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b082      	sub	sp, #8
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	4a09      	ldr	r2, [pc, #36]	; (8013100 <_ZN14MusicPresenterD1Ev+0x30>)
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	601a      	str	r2, [r3, #0]
 80130de:	4a09      	ldr	r2, [pc, #36]	; (8013104 <_ZN14MusicPresenterD1Ev+0x34>)
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	605a      	str	r2, [r3, #4]
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	3304      	adds	r3, #4
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7ff fe37 	bl	8012d5c <_ZN13ModelListenerD1Ev>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7ff fdef 	bl	8012cd4 <_ZN8touchgfx9PresenterD1Ev>
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	4618      	mov	r0, r3
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	08028b78 	.word	0x08028b78
 8013104:	08028b90 	.word	0x08028b90

08013108 <_ZThn4_N14MusicPresenterD1Ev>:
 8013108:	f1a0 0004 	sub.w	r0, r0, #4
 801310c:	e7e0      	b.n	80130d0 <_ZN14MusicPresenterD1Ev>
 801310e:	bf00      	nop

08013110 <_ZN14MusicPresenterD0Ev>:
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f7ff ffd9 	bl	80130d0 <_ZN14MusicPresenterD1Ev>
 801311e:	2110      	movs	r1, #16
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f012 fc81 	bl	8025a28 <_ZdlPvj>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	4618      	mov	r0, r3
 801312a:	3708      	adds	r7, #8
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <_ZThn4_N14MusicPresenterD0Ev>:
 8013130:	f1a0 0004 	sub.w	r0, r0, #4
 8013134:	e7ec      	b.n	8013110 <_ZN14MusicPresenterD0Ev>
	...

08013138 <_ZN14MusicPresenterC1ER9MusicView>:
#include <gui/music_screen/MusicView.hpp>
#include <gui/music_screen/MusicPresenter.hpp>

MusicPresenter::MusicPresenter(MusicView& v)
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
 8013140:	6039      	str	r1, [r7, #0]
    : view(v)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	4618      	mov	r0, r3
 8013146:	f7ff fde5 	bl	8012d14 <_ZN8touchgfx9PresenterC1Ev>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	3304      	adds	r3, #4
 801314e:	4618      	mov	r0, r3
 8013150:	f7ff fdf0 	bl	8012d34 <_ZN13ModelListenerC1Ev>
 8013154:	4a06      	ldr	r2, [pc, #24]	; (8013170 <_ZN14MusicPresenterC1ER9MusicView+0x38>)
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	601a      	str	r2, [r3, #0]
 801315a:	4a06      	ldr	r2, [pc, #24]	; (8013174 <_ZN14MusicPresenterC1ER9MusicView+0x3c>)
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	605a      	str	r2, [r3, #4]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	683a      	ldr	r2, [r7, #0]
 8013164:	60da      	str	r2, [r3, #12]
{

}
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	4618      	mov	r0, r3
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}
 8013170:	08028b78 	.word	0x08028b78
 8013174:	08028b90 	.word	0x08028b90

08013178 <_ZN14MusicPresenter8activateEv>:

void MusicPresenter::activate()
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
	view.updateFileName();
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	68da      	ldr	r2, [r3, #12]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	3344      	adds	r3, #68	; 0x44
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4610      	mov	r0, r2
 8013190:	4798      	blx	r3
}
 8013192:	bf00      	nop
 8013194:	3708      	adds	r7, #8
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <_ZN14MusicPresenter10deactivateEv>:

void MusicPresenter::deactivate()
{
 801319a:	b480      	push	{r7}
 801319c:	b083      	sub	sp, #12
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]

}
 80131a2:	bf00      	nop
 80131a4:	370c      	adds	r7, #12
 80131a6:	46bd      	mov	sp, r7
 80131a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ac:	4770      	bx	lr
	...

080131b0 <_ZN9MusicViewD1Ev>:

class MusicView : public MusicViewBase
{
public:
    MusicView();
    virtual ~MusicView() {}
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	4a05      	ldr	r2, [pc, #20]	; (80131d0 <_ZN9MusicViewD1Ev+0x20>)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	601a      	str	r2, [r3, #0]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fd fb65 	bl	8010890 <_ZN13MusicViewBaseD1Ev>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	3708      	adds	r7, #8
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	08028ba0 	.word	0x08028ba0

080131d4 <_ZN9MusicViewD0Ev>:
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f7ff ffe7 	bl	80131b0 <_ZN9MusicViewD1Ev>
 80131e2:	f44f 7146 	mov.w	r1, #792	; 0x318
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f012 fc1e 	bl	8025a28 <_ZdlPvj>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	4618      	mov	r0, r3
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
	...

080131f8 <_ZN9MusicViewC1Ev>:
extern uint8_t isPlay;

//----------------------------------------------


MusicView::MusicView()
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	4618      	mov	r0, r3
 8013204:	f7fd fbf2 	bl	80109ec <_ZN13MusicViewBaseC1Ev>
 8013208:	4a03      	ldr	r2, [pc, #12]	; (8013218 <_ZN9MusicViewC1Ev+0x20>)
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	601a      	str	r2, [r3, #0]
{

}
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	4618      	mov	r0, r3
 8013212:	3708      	adds	r7, #8
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}
 8013218:	08028ba0 	.word	0x08028ba0

0801321c <_ZN9MusicView11setupScreenEv>:

void MusicView::setupScreen()
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
    MusicViewBase::setupScreen();
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	4618      	mov	r0, r3
 8013228:	f7fd ffb2 	bl	8011190 <_ZN13MusicViewBase11setupScreenEv>
}
 801322c:	bf00      	nop
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <_ZN9MusicView14tearDownScreenEv>:

void MusicView::tearDownScreen()
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
    MusicViewBase::tearDownScreen();
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	4618      	mov	r0, r3
 8013240:	f7fc f99a 	bl	800f578 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013244:	bf00      	nop
 8013246:	3708      	adds	r7, #8
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}

0801324c <_ZN9MusicView11controlPlayEv>:


//------------- Custom function ------------
void MusicView::controlPlay()
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
	sendControlQ(2);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	3348      	adds	r3, #72	; 0x48
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	2102      	movs	r1, #2
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	4798      	blx	r3
}
 8013262:	bf00      	nop
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}

0801326a <_ZN9MusicView11controlStopEv>:

void MusicView::controlStop()
{
 801326a:	b580      	push	{r7, lr}
 801326c:	b082      	sub	sp, #8
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
	sendControlQ(3);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	3348      	adds	r3, #72	; 0x48
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2103      	movs	r1, #3
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	4798      	blx	r3
}
 8013280:	bf00      	nop
 8013282:	3708      	adds	r7, #8
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <_ZN9MusicView11controlPrevEv>:
void MusicView::controlPrev()
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
	sendControlQ(4);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	3348      	adds	r3, #72	; 0x48
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2104      	movs	r1, #4
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	4798      	blx	r3
}
 801329e:	bf00      	nop
 80132a0:	3708      	adds	r7, #8
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}

080132a6 <_ZN9MusicView11controlNextEv>:
void MusicView::controlNext()
{
 80132a6:	b580      	push	{r7, lr}
 80132a8:	b082      	sub	sp, #8
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
	sendControlQ(5);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	3348      	adds	r3, #72	; 0x48
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2105      	movs	r1, #5
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	4798      	blx	r3
}
 80132bc:	bf00      	nop
 80132be:	3708      	adds	r7, #8
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <_ZN9MusicView17controlVolumeDownEv>:
void MusicView::controlVolumeDown()
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
	sendControlQ(6);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	3348      	adds	r3, #72	; 0x48
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	2106      	movs	r1, #6
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	4798      	blx	r3
}
 80132da:	bf00      	nop
 80132dc:	3708      	adds	r7, #8
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <_ZN9MusicView15controlVolumeUpEv>:
void MusicView::controlVolumeUp()
{
 80132e2:	b580      	push	{r7, lr}
 80132e4:	b082      	sub	sp, #8
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
	sendControlQ(7);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	3348      	adds	r3, #72	; 0x48
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2107      	movs	r1, #7
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	4798      	blx	r3
}
 80132f8:	bf00      	nop
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <_ZN9MusicView12sendControlQEh>:

void MusicView::sendControlQ(uint8_t signal){
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	460b      	mov	r3, r1
 801330a:	70fb      	strb	r3, [r7, #3]
	xQueueSend(music_msg_q, &signal, 0);
 801330c:	4b05      	ldr	r3, [pc, #20]	; (8013324 <_ZN9MusicView12sendControlQEh+0x24>)
 801330e:	6818      	ldr	r0, [r3, #0]
 8013310:	1cf9      	adds	r1, r7, #3
 8013312:	2300      	movs	r3, #0
 8013314:	2200      	movs	r2, #0
 8013316:	f7f6 f8b9 	bl	800948c <xQueueGenericSend>

}
 801331a:	bf00      	nop
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	2000b688 	.word	0x2000b688

08013328 <_ZN9MusicView14updateFileNameEv>:

void MusicView::updateFileName(){
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
	if (uartMsgBuffer[0] == 0)
 8013330:	4b10      	ldr	r3, [pc, #64]	; (8013374 <_ZN9MusicView14updateFileNameEv+0x4c>)
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d019      	beq.n	801336c <_ZN9MusicView14updateFileNameEv+0x44>
		return; // array empty so return

	memset(&MusicTextAreaBuffer, 0, MUSICTEXTAREA_SIZE);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 801333e:	2211      	movs	r2, #17
 8013340:	2100      	movs	r1, #0
 8013342:	4618      	mov	r0, r3
 8013344:	f012 fc25 	bl	8025b92 <memset>

	Unicode::strncpy(MusicTextAreaBuffer, (char *)uartMsgBuffer, MUSICTEXTAREA_SIZE - 1);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 801334e:	2210      	movs	r2, #16
 8013350:	4908      	ldr	r1, [pc, #32]	; (8013374 <_ZN9MusicView14updateFileNameEv+0x4c>)
 8013352:	4618      	mov	r0, r3
 8013354:	f008 f909 	bl	801b56a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	MusicTextAreaBuffer[16] = '\0'; // last index must be NULL
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2200      	movs	r2, #0
 801335c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	MusicTextArea.invalidate();
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	33e8      	adds	r3, #232	; 0xe8
 8013364:	4618      	mov	r0, r3
 8013366:	f006 fe2d 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801336a:	e000      	b.n	801336e <_ZN9MusicView14updateFileNameEv+0x46>
		return; // array empty so return
 801336c:	bf00      	nop
}
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	2000b690 	.word	0x2000b690

08013378 <_ZN9MusicView16updatePlayButtonEv>:

void MusicView::updatePlayButton(){
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
	if(isPlay==0){
 8013380:	4b1c      	ldr	r3, [pc, #112]	; (80133f4 <_ZN9MusicView16updatePlayButtonEv+0x7c>)
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d118      	bne.n	80133ba <_ZN9MusicView16updatePlayButtonEv+0x42>
		Pause_Button.setVisible(false);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 801338e:	2100      	movs	r1, #0
 8013390:	4618      	mov	r0, r3
 8013392:	f7fd fa4a 	bl	801082a <_ZN8touchgfx8Drawable10setVisibleEb>
		Pause_Button.invalidate();
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f503 7394 	add.w	r3, r3, #296	; 0x128
 801339c:	4618      	mov	r0, r3
 801339e:	f006 fe11 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>

		Play_Button.setVisible(true);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	33ac      	adds	r3, #172	; 0xac
 80133a6:	2101      	movs	r1, #1
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fd fa3e 	bl	801082a <_ZN8touchgfx8Drawable10setVisibleEb>
		Play_Button.invalidate();
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	33ac      	adds	r3, #172	; 0xac
 80133b2:	4618      	mov	r0, r3
 80133b4:	f006 fe06 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>
		Play_Button.invalidate();

		Pause_Button.setVisible(true);
		Pause_Button.invalidate();
	}
}
 80133b8:	e017      	b.n	80133ea <_ZN9MusicView16updatePlayButtonEv+0x72>
		Play_Button.setVisible(false);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	33ac      	adds	r3, #172	; 0xac
 80133be:	2100      	movs	r1, #0
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7fd fa32 	bl	801082a <_ZN8touchgfx8Drawable10setVisibleEb>
		Play_Button.invalidate();
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	33ac      	adds	r3, #172	; 0xac
 80133ca:	4618      	mov	r0, r3
 80133cc:	f006 fdfa 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>
		Pause_Button.setVisible(true);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80133d6:	2101      	movs	r1, #1
 80133d8:	4618      	mov	r0, r3
 80133da:	f7fd fa26 	bl	801082a <_ZN8touchgfx8Drawable10setVisibleEb>
		Pause_Button.invalidate();
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80133e4:	4618      	mov	r0, r3
 80133e6:	f006 fded 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80133ea:	bf00      	nop
 80133ec:	3708      	adds	r7, #8
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	2000011e 	.word	0x2000011e

080133f8 <_ZN9MusicView15handleTickEventEv>:

// ------------ Tick ---------------
void MusicView::handleTickEvent(){
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
	if (binarySemMsgUartHandle != NULL)
 8013400:	4b10      	ldr	r3, [pc, #64]	; (8013444 <_ZN9MusicView15handleTickEventEv+0x4c>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d013      	beq.n	8013430 <_ZN9MusicView15handleTickEventEv+0x38>
		{
			if (xSemaphoreTake(binarySemMsgUartHandle, (TickType_t)10) == pdTRUE)
 8013408:	4b0e      	ldr	r3, [pc, #56]	; (8013444 <_ZN9MusicView15handleTickEventEv+0x4c>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	210a      	movs	r1, #10
 801340e:	4618      	mov	r0, r3
 8013410:	f7f6 fab2 	bl	8009978 <xQueueSemaphoreTake>
 8013414:	4603      	mov	r3, r0
 8013416:	2b01      	cmp	r3, #1
 8013418:	bf0c      	ite	eq
 801341a:	2301      	moveq	r3, #1
 801341c:	2300      	movne	r3, #0
 801341e:	b2db      	uxtb	r3, r3
 8013420:	2b00      	cmp	r3, #0
 8013422:	d005      	beq.n	8013430 <_ZN9MusicView15handleTickEventEv+0x38>
			{
				updateFileName();
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	3344      	adds	r3, #68	; 0x44
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	4798      	blx	r3
			}
		}
	updatePlayButton();
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	334c      	adds	r3, #76	; 0x4c
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	4798      	blx	r3
}
 801343c:	bf00      	nop
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	2000b9f8 	.word	0x2000b9f8

08013448 <_ZN13PongPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~PongPresenter() {};
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	4a09      	ldr	r2, [pc, #36]	; (8013478 <_ZN13PongPresenterD1Ev+0x30>)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	601a      	str	r2, [r3, #0]
 8013456:	4a09      	ldr	r2, [pc, #36]	; (801347c <_ZN13PongPresenterD1Ev+0x34>)
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	605a      	str	r2, [r3, #4]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	3304      	adds	r3, #4
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff fc7b 	bl	8012d5c <_ZN13ModelListenerD1Ev>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	4618      	mov	r0, r3
 801346a:	f7ff fc33 	bl	8012cd4 <_ZN8touchgfx9PresenterD1Ev>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4618      	mov	r0, r3
 8013472:	3708      	adds	r7, #8
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	08028bf8 	.word	0x08028bf8
 801347c:	08028c10 	.word	0x08028c10

08013480 <_ZThn4_N13PongPresenterD1Ev>:
 8013480:	f1a0 0004 	sub.w	r0, r0, #4
 8013484:	e7e0      	b.n	8013448 <_ZN13PongPresenterD1Ev>
 8013486:	bf00      	nop

08013488 <_ZN13PongPresenterD0Ev>:
 8013488:	b580      	push	{r7, lr}
 801348a:	b082      	sub	sp, #8
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f7ff ffd9 	bl	8013448 <_ZN13PongPresenterD1Ev>
 8013496:	2110      	movs	r1, #16
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f012 fac5 	bl	8025a28 <_ZdlPvj>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4618      	mov	r0, r3
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}

080134a8 <_ZThn4_N13PongPresenterD0Ev>:
 80134a8:	f1a0 0004 	sub.w	r0, r0, #4
 80134ac:	e7ec      	b.n	8013488 <_ZN13PongPresenterD0Ev>
	...

080134b0 <_ZN13PongPresenterC1ER8PongView>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

PongPresenter::PongPresenter(PongView& v)
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	6039      	str	r1, [r7, #0]
    : view(v)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff fc29 	bl	8012d14 <_ZN8touchgfx9PresenterC1Ev>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	3304      	adds	r3, #4
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7ff fc34 	bl	8012d34 <_ZN13ModelListenerC1Ev>
 80134cc:	4a06      	ldr	r2, [pc, #24]	; (80134e8 <_ZN13PongPresenterC1ER8PongView+0x38>)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	601a      	str	r2, [r3, #0]
 80134d2:	4a06      	ldr	r2, [pc, #24]	; (80134ec <_ZN13PongPresenterC1ER8PongView+0x3c>)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	605a      	str	r2, [r3, #4]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	683a      	ldr	r2, [r7, #0]
 80134dc:	60da      	str	r2, [r3, #12]
{

}
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	4618      	mov	r0, r3
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	08028bf8 	.word	0x08028bf8
 80134ec:	08028c10 	.word	0x08028c10

080134f0 <_ZN13PongPresenter8activateEv>:

void PongPresenter::activate()
{
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]

}
 80134f8:	bf00      	nop
 80134fa:	370c      	adds	r7, #12
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr

08013504 <_ZN13PongPresenter10deactivateEv>:

void PongPresenter::deactivate()
{
 8013504:	b480      	push	{r7}
 8013506:	b083      	sub	sp, #12
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]

}
 801350c:	bf00      	nop
 801350e:	370c      	adds	r7, #12
 8013510:	46bd      	mov	sp, r7
 8013512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013516:	4770      	bx	lr

08013518 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8013518:	b480      	push	{r7}
 801351a:	b083      	sub	sp, #12
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
        return rect.width;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8013526:	4618      	mov	r0, r3
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr

08013532 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8013532:	b480      	push	{r7}
 8013534:	b083      	sub	sp, #12
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
        return rect.height;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8013540:	4618      	mov	r0, r3
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <_ZN8PongViewD1Ev>:

class PongView : public PongViewBase
{
public:
    PongView();
    virtual ~PongView() {}
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	4a05      	ldr	r2, [pc, #20]	; (801356c <_ZN8PongViewD1Ev+0x20>)
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	601a      	str	r2, [r3, #0]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	4618      	mov	r0, r3
 801355e:	f7fe f8e3 	bl	8011728 <_ZN12PongViewBaseD1Ev>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	4618      	mov	r0, r3
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}
 801356c:	08028c20 	.word	0x08028c20

08013570 <_ZN8PongViewD0Ev>:
 8013570:	b580      	push	{r7, lr}
 8013572:	b082      	sub	sp, #8
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7ff ffe7 	bl	801354c <_ZN8PongViewD1Ev>
 801357e:	f641 6150 	movw	r1, #7760	; 0x1e50
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f012 fa50 	bl	8025a28 <_ZdlPvj>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	4618      	mov	r0, r3
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
	...

08013594 <_ZN8PongViewC1Ev>:
#include <gui/pong_screen/PongView.hpp>

#include <touchgfx/lcd/LCD.hpp>

PongView::PongView()
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	4618      	mov	r0, r3
 80135a0:	f7fe f91c 	bl	80117dc <_ZN12PongViewBaseC1Ev>
 80135a4:	4a18      	ldr	r2, [pc, #96]	; (8013608 <_ZN8PongViewC1Ev+0x74>)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	601a      	str	r2, [r3, #0]
 80135aa:	687a      	ldr	r2, [r7, #4]
 80135ac:	f641 6324 	movw	r3, #7716	; 0x1e24
 80135b0:	4413      	add	r3, r2
 80135b2:	2201      	movs	r2, #1
 80135b4:	601a      	str	r2, [r3, #0]
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	f641 6328 	movw	r3, #7720	; 0x1e28
 80135bc:	4413      	add	r3, r2
 80135be:	2201      	movs	r2, #1
 80135c0:	601a      	str	r2, [r3, #0]
 80135c2:	687a      	ldr	r2, [r7, #4]
 80135c4:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80135c8:	4413      	add	r3, r2
 80135ca:	2204      	movs	r2, #4
 80135cc:	601a      	str	r2, [r3, #0]
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	f641 6330 	movw	r3, #7728	; 0x1e30
 80135d4:	4413      	add	r3, r2
 80135d6:	2228      	movs	r2, #40	; 0x28
 80135d8:	601a      	str	r2, [r3, #0]
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	f641 6334 	movw	r3, #7732	; 0x1e34
 80135e0:	4413      	add	r3, r2
 80135e2:	2200      	movs	r2, #0
 80135e4:	601a      	str	r2, [r3, #0]
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80135ec:	4413      	add	r3, r2
 80135ee:	2200      	movs	r2, #0
 80135f0:	601a      	str	r2, [r3, #0]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 80135f8:	2200      	movs	r2, #0
 80135fa:	601a      	str	r2, [r3, #0]
{

}
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	4618      	mov	r0, r3
 8013600:	3708      	adds	r7, #8
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	08028c20 	.word	0x08028c20

0801360c <_ZN8PongView11setupScreenEv>:

void PongView::setupScreen()
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
    PongViewBase::setupScreen();
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4618      	mov	r0, r3
 8013618:	f7fe fad0 	bl	8011bbc <_ZN12PongViewBase11setupScreenEv>
    color[0] = 6;
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	f641 6344 	movw	r3, #7748	; 0x1e44
 8013622:	4413      	add	r3, r2
 8013624:	2206      	movs	r2, #6
 8013626:	601a      	str	r2, [r3, #0]
    color[1] = 255;
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	f641 6348 	movw	r3, #7752	; 0x1e48
 801362e:	4413      	add	r3, r2
 8013630:	22ff      	movs	r2, #255	; 0xff
 8013632:	601a      	str	r2, [r3, #0]
    color[2] = 141;
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	f641 634c 	movw	r3, #7756	; 0x1e4c
 801363a:	4413      	add	r3, r2
 801363c:	228d      	movs	r2, #141	; 0x8d
 801363e:	601a      	str	r2, [r3, #0]
}
 8013640:	bf00      	nop
 8013642:	3708      	adds	r7, #8
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <_ZN8PongView14tearDownScreenEv>:

void PongView::tearDownScreen()
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
    PongViewBase::tearDownScreen();
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f7fb ff90 	bl	800f578 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013658:	bf00      	nop
 801365a:	3708      	adds	r7, #8
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <_ZN8PongView9move_leftEv>:

void PongView::move_left(){
 8013660:	b590      	push	{r4, r7, lr}
 8013662:	b083      	sub	sp, #12
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801366e:	22ff      	movs	r2, #255	; 0xff
 8013670:	21ff      	movs	r1, #255	; 0xff
 8013672:	20ff      	movs	r0, #255	; 0xff
 8013674:	f7fc f936 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013678:	4603      	mov	r3, r0
 801367a:	4619      	mov	r1, r3
 801367c:	4620      	mov	r0, r4
 801367e:	f7fc f803 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	33ec      	adds	r3, #236	; 0xec
 8013686:	4618      	mov	r0, r3
 8013688:	f006 fc9c 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()-20);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	33ec      	adds	r3, #236	; 0xec
 8013696:	4618      	mov	r0, r3
 8013698:	f7f8 ffd7 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 801369c:	4603      	mov	r3, r0
 801369e:	b29b      	uxth	r3, r3
 80136a0:	3b14      	subs	r3, #20
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	b21b      	sxth	r3, r3
 80136a6:	4619      	mov	r1, r3
 80136a8:	4620      	mov	r0, r4
 80136aa:	f7f8 ffe8 	bl	800c67e <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80136b4:	22ff      	movs	r2, #255	; 0xff
 80136b6:	2180      	movs	r1, #128	; 0x80
 80136b8:	2006      	movs	r0, #6
 80136ba:	f7fc f913 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80136be:	4603      	mov	r3, r0
 80136c0:	4619      	mov	r1, r3
 80136c2:	4620      	mov	r0, r4
 80136c4:	f7fb ffe0 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	33ec      	adds	r3, #236	; 0xec
 80136cc:	4618      	mov	r0, r3
 80136ce:	f006 fc79 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80136d2:	bf00      	nop
 80136d4:	370c      	adds	r7, #12
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd90      	pop	{r4, r7, pc}

080136da <_ZN8PongView10move_rightEv>:

void PongView::move_right(){
 80136da:	b590      	push	{r4, r7, lr}
 80136dc:	b083      	sub	sp, #12
 80136de:	af00      	add	r7, sp, #0
 80136e0:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80136e8:	22ff      	movs	r2, #255	; 0xff
 80136ea:	21ff      	movs	r1, #255	; 0xff
 80136ec:	20ff      	movs	r0, #255	; 0xff
 80136ee:	f7fc f8f9 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80136f2:	4603      	mov	r3, r0
 80136f4:	4619      	mov	r1, r3
 80136f6:	4620      	mov	r0, r4
 80136f8:	f7fb ffc6 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	33ec      	adds	r3, #236	; 0xec
 8013700:	4618      	mov	r0, r3
 8013702:	f006 fc5f 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()+20);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	33ec      	adds	r3, #236	; 0xec
 8013710:	4618      	mov	r0, r3
 8013712:	f7f8 ff9a 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 8013716:	4603      	mov	r3, r0
 8013718:	b29b      	uxth	r3, r3
 801371a:	3314      	adds	r3, #20
 801371c:	b29b      	uxth	r3, r3
 801371e:	b21b      	sxth	r3, r3
 8013720:	4619      	mov	r1, r3
 8013722:	4620      	mov	r0, r4
 8013724:	f7f8 ffab 	bl	800c67e <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801372e:	22ff      	movs	r2, #255	; 0xff
 8013730:	2180      	movs	r1, #128	; 0x80
 8013732:	2006      	movs	r0, #6
 8013734:	f7fc f8d6 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013738:	4603      	mov	r3, r0
 801373a:	4619      	mov	r1, r3
 801373c:	4620      	mov	r0, r4
 801373e:	f7fb ffa3 	bl	800f688 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	33ec      	adds	r3, #236	; 0xec
 8013746:	4618      	mov	r0, r3
 8013748:	f006 fc3c 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 801374c:	bf00      	nop
 801374e:	370c      	adds	r7, #12
 8013750:	46bd      	mov	sp, r7
 8013752:	bd90      	pop	{r4, r7, pc}

08013754 <_ZN8PongView15handleTickEventEv>:

void PongView::handleTickEvent(){
 8013754:	b580      	push	{r7, lr}
 8013756:	b082      	sub	sp, #8
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
	tick ++;
 801375c:	687a      	ldr	r2, [r7, #4]
 801375e:	f641 6334 	movw	r3, #7732	; 0x1e34
 8013762:	4413      	add	r3, r2
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	1c5a      	adds	r2, r3, #1
 8013768:	6879      	ldr	r1, [r7, #4]
 801376a:	f641 6334 	movw	r3, #7732	; 0x1e34
 801376e:	440b      	add	r3, r1
 8013770:	601a      	str	r2, [r3, #0]
	move_ball();
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f000 f804 	bl	8013780 <_ZN8PongView9move_ballEv>

}
 8013778:	bf00      	nop
 801377a:	3708      	adds	r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <_ZN8PongView9move_ballEv>:

void PongView::move_ball(){\
 8013780:	b590      	push	{r4, r7, lr}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]

	// move ball
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 801378e:	22ff      	movs	r2, #255	; 0xff
 8013790:	21ff      	movs	r1, #255	; 0xff
 8013792:	20ff      	movs	r0, #255	; 0xff
 8013794:	f7fc f8a6 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013798:	4603      	mov	r3, r0
 801379a:	4619      	mov	r1, r3
 801379c:	4620      	mov	r0, r4
 801379e:	f7fd ff6b 	bl	8011678 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	336c      	adds	r3, #108	; 0x6c
 80137a6:	4618      	mov	r0, r3
 80137a8:	f003 ffc6 	bl	8017738 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	ball.setY(ball.getY() +  ball_vertical_direction*ball_speed);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	336c      	adds	r3, #108	; 0x6c
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7f8 ff54 	bl	800c664 <_ZNK8touchgfx8Drawable4getYEv>
 80137bc:	4603      	mov	r3, r0
 80137be:	b29a      	uxth	r2, r3
 80137c0:	6879      	ldr	r1, [r7, #4]
 80137c2:	f641 6324 	movw	r3, #7716	; 0x1e24
 80137c6:	440b      	add	r3, r1
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	b299      	uxth	r1, r3
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80137d2:	4403      	add	r3, r0
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	fb11 f303 	smulbb	r3, r1, r3
 80137dc:	b29b      	uxth	r3, r3
 80137de:	4413      	add	r3, r2
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	b21b      	sxth	r3, r3
 80137e4:	4619      	mov	r1, r3
 80137e6:	4620      	mov	r0, r4
 80137e8:	f7f8 ff58 	bl	800c69c <_ZN8touchgfx8Drawable4setYEs>
	ball.setX(ball.getX() +  ball_horizontal_direction*ball_speed);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	336c      	adds	r3, #108	; 0x6c
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7f8 ff27 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 80137fc:	4603      	mov	r3, r0
 80137fe:	b29a      	uxth	r2, r3
 8013800:	6879      	ldr	r1, [r7, #4]
 8013802:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013806:	440b      	add	r3, r1
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	b299      	uxth	r1, r3
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8013812:	4403      	add	r3, r0
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	b29b      	uxth	r3, r3
 8013818:	fb11 f303 	smulbb	r3, r1, r3
 801381c:	b29b      	uxth	r3, r3
 801381e:	4413      	add	r3, r2
 8013820:	b29b      	uxth	r3, r3
 8013822:	b21b      	sxth	r3, r3
 8013824:	4619      	mov	r1, r3
 8013826:	4620      	mov	r0, r4
 8013828:	f7f8 ff29 	bl	800c67e <_ZN8touchgfx8Drawable4setXEs>
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(color[0], color[1], color[2]));
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	f641 6344 	movw	r3, #7748	; 0x1e44
 8013838:	4413      	add	r3, r2
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	b2d8      	uxtb	r0, r3
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	f641 6348 	movw	r3, #7752	; 0x1e48
 8013844:	4413      	add	r3, r2
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	b2d9      	uxtb	r1, r3
 801384a:	687a      	ldr	r2, [r7, #4]
 801384c:	f641 634c 	movw	r3, #7756	; 0x1e4c
 8013850:	4413      	add	r3, r2
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	b2db      	uxtb	r3, r3
 8013856:	461a      	mov	r2, r3
 8013858:	f7fc f844 	bl	800f8e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801385c:	4603      	mov	r3, r0
 801385e:	4619      	mov	r1, r3
 8013860:	4620      	mov	r0, r4
 8013862:	f7fd ff09 	bl	8011678 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	336c      	adds	r3, #108	; 0x6c
 801386a:	4618      	mov	r0, r3
 801386c:	f003 ff64 	bl	8017738 <_ZNK8touchgfx12CanvasWidget10invalidateEv>


	if(check_collision()==1){
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f000 f8f1 	bl	8013a58 <_ZN8PongView15check_collisionEv>
 8013876:	4603      	mov	r3, r0
 8013878:	2b01      	cmp	r3, #1
 801387a:	bf0c      	ite	eq
 801387c:	2301      	moveq	r3, #1
 801387e:	2300      	movne	r3, #0
 8013880:	b2db      	uxtb	r3, r3
 8013882:	2b00      	cmp	r3, #0
 8013884:	f000 808c 	beq.w	80139a0 <_ZN8PongView9move_ballEv+0x220>
		ball_vertical_direction = -1;
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	f641 6324 	movw	r3, #7716	; 0x1e24
 801388e:	4413      	add	r3, r2
 8013890:	f04f 32ff 	mov.w	r2, #4294967295
 8013894:	601a      	str	r2, [r3, #0]

		if(collide_count % 20 == 0){
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 801389c:	6819      	ldr	r1, [r3, #0]
 801389e:	4b6b      	ldr	r3, [pc, #428]	; (8013a4c <_ZN8PongView9move_ballEv+0x2cc>)
 80138a0:	fb83 2301 	smull	r2, r3, r3, r1
 80138a4:	10da      	asrs	r2, r3, #3
 80138a6:	17cb      	asrs	r3, r1, #31
 80138a8:	1ad2      	subs	r2, r2, r3
 80138aa:	4613      	mov	r3, r2
 80138ac:	009b      	lsls	r3, r3, #2
 80138ae:	4413      	add	r3, r2
 80138b0:	009b      	lsls	r3, r3, #2
 80138b2:	1aca      	subs	r2, r1, r3
 80138b4:	2a00      	cmp	r2, #0
 80138b6:	d14e      	bne.n	8013956 <_ZN8PongView9move_ballEv+0x1d6>
			ball_speed = ball_speed  + 1;
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80138be:	4413      	add	r3, r2
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	1c5a      	adds	r2, r3, #1
 80138c4:	6879      	ldr	r1, [r7, #4]
 80138c6:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80138ca:	440b      	add	r3, r1
 80138cc:	601a      	str	r2, [r3, #0]
			sc = sc+1;
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80138d4:	4413      	add	r3, r2
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	1c5a      	adds	r2, r3, #1
 80138da:	6879      	ldr	r1, [r7, #4]
 80138dc:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80138e0:	440b      	add	r3, r1
 80138e2:	601a      	str	r2, [r3, #0]
			Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", sc);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f503 70e6 	add.w	r0, r3, #460	; 0x1cc
 80138ea:	687a      	ldr	r2, [r7, #4]
 80138ec:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80138f0:	4413      	add	r3, r2
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4a56      	ldr	r2, [pc, #344]	; (8013a50 <_ZN8PongView9move_ballEv+0x2d0>)
 80138f6:	2114      	movs	r1, #20
 80138f8:	f008 f99c 	bl	801bc34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			score.invalidate();
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013902:	4618      	mov	r0, r3
 8013904:	f006 fb5e 	bl	8019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>

		    color[0] =  ( std::rand() % ( 255 + 1 ) );
 8013908:	f012 fcbc 	bl	8026284 <rand>
 801390c:	4603      	mov	r3, r0
 801390e:	425a      	negs	r2, r3
 8013910:	b2db      	uxtb	r3, r3
 8013912:	b2d2      	uxtb	r2, r2
 8013914:	bf58      	it	pl
 8013916:	4253      	negpl	r3, r2
 8013918:	6879      	ldr	r1, [r7, #4]
 801391a:	f641 6244 	movw	r2, #7748	; 0x1e44
 801391e:	440a      	add	r2, r1
 8013920:	6013      	str	r3, [r2, #0]
		    color[1] =  ( std::rand() % ( 255 + 1 ) );
 8013922:	f012 fcaf 	bl	8026284 <rand>
 8013926:	4603      	mov	r3, r0
 8013928:	425a      	negs	r2, r3
 801392a:	b2db      	uxtb	r3, r3
 801392c:	b2d2      	uxtb	r2, r2
 801392e:	bf58      	it	pl
 8013930:	4253      	negpl	r3, r2
 8013932:	6879      	ldr	r1, [r7, #4]
 8013934:	f641 6248 	movw	r2, #7752	; 0x1e48
 8013938:	440a      	add	r2, r1
 801393a:	6013      	str	r3, [r2, #0]
		    color[2] =  ( std::rand() % ( 255 + 1 ) );
 801393c:	f012 fca2 	bl	8026284 <rand>
 8013940:	4603      	mov	r3, r0
 8013942:	425a      	negs	r2, r3
 8013944:	b2db      	uxtb	r3, r3
 8013946:	b2d2      	uxtb	r2, r2
 8013948:	bf58      	it	pl
 801394a:	4253      	negpl	r3, r2
 801394c:	6879      	ldr	r1, [r7, #4]
 801394e:	f641 624c 	movw	r2, #7756	; 0x1e4c
 8013952:	440a      	add	r2, r1
 8013954:	6013      	str	r3, [r2, #0]
		}
		collide_count ++;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	1c5a      	adds	r2, r3, #1
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8013966:	601a      	str	r2, [r3, #0]

		if(ball_horizontal_direction==1){
 8013968:	687a      	ldr	r2, [r7, #4]
 801396a:	f641 6328 	movw	r3, #7720	; 0x1e28
 801396e:	4413      	add	r3, r2
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	2b01      	cmp	r3, #1
 8013974:	d106      	bne.n	8013984 <_ZN8PongView9move_ballEv+0x204>
			ball_horizontal_direction = 2;
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	f641 6328 	movw	r3, #7720	; 0x1e28
 801397c:	4413      	add	r3, r2
 801397e:	2202      	movs	r2, #2
 8013980:	601a      	str	r2, [r3, #0]
	else if(check_collision()==5){
		pong_score = sc;
		application().gotogameoverScreenNoTransition();
	}

}
 8013982:	e05e      	b.n	8013a42 <_ZN8PongView9move_ballEv+0x2c2>
		else if (ball_horizontal_direction==2){
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	f641 6328 	movw	r3, #7720	; 0x1e28
 801398a:	4413      	add	r3, r2
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2b02      	cmp	r3, #2
 8013990:	d157      	bne.n	8013a42 <_ZN8PongView9move_ballEv+0x2c2>
			ball_horizontal_direction = 1;
 8013992:	687a      	ldr	r2, [r7, #4]
 8013994:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013998:	4413      	add	r3, r2
 801399a:	2201      	movs	r2, #1
 801399c:	601a      	str	r2, [r3, #0]
}
 801399e:	e050      	b.n	8013a42 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==2){
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f000 f859 	bl	8013a58 <_ZN8PongView15check_collisionEv>
 80139a6:	4603      	mov	r3, r0
 80139a8:	2b02      	cmp	r3, #2
 80139aa:	bf0c      	ite	eq
 80139ac:	2301      	moveq	r3, #1
 80139ae:	2300      	movne	r3, #0
 80139b0:	b2db      	uxtb	r3, r3
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d006      	beq.n	80139c4 <_ZN8PongView9move_ballEv+0x244>
		ball_vertical_direction = 1;
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	f641 6324 	movw	r3, #7716	; 0x1e24
 80139bc:	4413      	add	r3, r2
 80139be:	2201      	movs	r2, #1
 80139c0:	601a      	str	r2, [r3, #0]
}
 80139c2:	e03e      	b.n	8013a42 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==3){
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 f847 	bl	8013a58 <_ZN8PongView15check_collisionEv>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b03      	cmp	r3, #3
 80139ce:	bf0c      	ite	eq
 80139d0:	2301      	moveq	r3, #1
 80139d2:	2300      	movne	r3, #0
 80139d4:	b2db      	uxtb	r3, r3
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d006      	beq.n	80139e8 <_ZN8PongView9move_ballEv+0x268>
		ball_horizontal_direction = 1;
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	f641 6328 	movw	r3, #7720	; 0x1e28
 80139e0:	4413      	add	r3, r2
 80139e2:	2201      	movs	r2, #1
 80139e4:	601a      	str	r2, [r3, #0]
}
 80139e6:	e02c      	b.n	8013a42 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==4){
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f000 f835 	bl	8013a58 <_ZN8PongView15check_collisionEv>
 80139ee:	4603      	mov	r3, r0
 80139f0:	2b04      	cmp	r3, #4
 80139f2:	bf0c      	ite	eq
 80139f4:	2301      	moveq	r3, #1
 80139f6:	2300      	movne	r3, #0
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d007      	beq.n	8013a0e <_ZN8PongView9move_ballEv+0x28e>
		ball_horizontal_direction = -1;
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013a04:	4413      	add	r3, r2
 8013a06:	f04f 32ff 	mov.w	r2, #4294967295
 8013a0a:	601a      	str	r2, [r3, #0]
}
 8013a0c:	e019      	b.n	8013a42 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==5){
 8013a0e:	6878      	ldr	r0, [r7, #4]
 8013a10:	f000 f822 	bl	8013a58 <_ZN8PongView15check_collisionEv>
 8013a14:	4603      	mov	r3, r0
 8013a16:	2b05      	cmp	r3, #5
 8013a18:	bf0c      	ite	eq
 8013a1a:	2301      	moveq	r3, #1
 8013a1c:	2300      	movne	r3, #0
 8013a1e:	b2db      	uxtb	r3, r3
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d00e      	beq.n	8013a42 <_ZN8PongView9move_ballEv+0x2c2>
		pong_score = sc;
 8013a24:	687a      	ldr	r2, [r7, #4]
 8013a26:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8013a2a:	4413      	add	r3, r2
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	4a09      	ldr	r2, [pc, #36]	; (8013a54 <_ZN8PongView9move_ballEv+0x2d4>)
 8013a30:	6013      	str	r3, [r2, #0]
		application().gotogameoverScreenNoTransition();
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7fd fec6 	bl	80117c6 <_ZN12PongViewBase11applicationEv>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7f9 f9fd 	bl	800ce3c <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>
}
 8013a42:	bf00      	nop
 8013a44:	370c      	adds	r7, #12
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd90      	pop	{r4, r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	66666667 	.word	0x66666667
 8013a50:	08027430 	.word	0x08027430
 8013a54:	2000ba1c 	.word	0x2000ba1c

08013a58 <_ZN8PongView15check_collisionEv>:

int PongView::check_collision(){
 8013a58:	b5b0      	push	{r4, r5, r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
	// collide with paddle
	if( ball.getY()+ball.getHeight()-margin<=paddle1.getY()+paddle1.getHeight() && ball.getY()+ball.getHeight()-margin>=paddle1.getY()-paddle1.getHeight() && ball.getX() + margin - 110 >= paddle1.getX() - paddle1.getWidth() && ball.getX() + margin <= paddle1.getX() + paddle1.getWidth()){
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	336c      	adds	r3, #108	; 0x6c
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7f8 fdfd 	bl	800c664 <_ZNK8touchgfx8Drawable4getYEv>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	461c      	mov	r4, r3
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	336c      	adds	r3, #108	; 0x6c
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7ff fd5d 	bl	8013532 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	18e2      	adds	r2, r4, r3
 8013a7c:	6879      	ldr	r1, [r7, #4]
 8013a7e:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013a82:	440b      	add	r3, r1
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	1ad4      	subs	r4, r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	33ec      	adds	r3, #236	; 0xec
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7f8 fde9 	bl	800c664 <_ZNK8touchgfx8Drawable4getYEv>
 8013a92:	4603      	mov	r3, r0
 8013a94:	461d      	mov	r5, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	33ec      	adds	r3, #236	; 0xec
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7ff fd49 	bl	8013532 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	442b      	add	r3, r5
 8013aa4:	429c      	cmp	r4, r3
 8013aa6:	dc61      	bgt.n	8013b6c <_ZN8PongView15check_collisionEv+0x114>
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	336c      	adds	r3, #108	; 0x6c
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7f8 fdd9 	bl	800c664 <_ZNK8touchgfx8Drawable4getYEv>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	461c      	mov	r4, r3
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	336c      	adds	r3, #108	; 0x6c
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7ff fd39 	bl	8013532 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	18e2      	adds	r2, r4, r3
 8013ac4:	6879      	ldr	r1, [r7, #4]
 8013ac6:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013aca:	440b      	add	r3, r1
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	1ad4      	subs	r4, r2, r3
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	33ec      	adds	r3, #236	; 0xec
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7f8 fdc5 	bl	800c664 <_ZNK8touchgfx8Drawable4getYEv>
 8013ada:	4603      	mov	r3, r0
 8013adc:	461d      	mov	r5, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	33ec      	adds	r3, #236	; 0xec
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7ff fd25 	bl	8013532 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	1aeb      	subs	r3, r5, r3
 8013aec:	429c      	cmp	r4, r3
 8013aee:	db3d      	blt.n	8013b6c <_ZN8PongView15check_collisionEv+0x114>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	336c      	adds	r3, #108	; 0x6c
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f8 fda8 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 8013afa:	4603      	mov	r3, r0
 8013afc:	4619      	mov	r1, r3
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013b04:	4413      	add	r3, r2
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	440b      	add	r3, r1
 8013b0a:	f1a3 046e 	sub.w	r4, r3, #110	; 0x6e
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	33ec      	adds	r3, #236	; 0xec
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7f8 fd99 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	461d      	mov	r5, r3
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	33ec      	adds	r3, #236	; 0xec
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7ff fcf9 	bl	8013518 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013b26:	4603      	mov	r3, r0
 8013b28:	1aeb      	subs	r3, r5, r3
 8013b2a:	429c      	cmp	r4, r3
 8013b2c:	db1e      	blt.n	8013b6c <_ZN8PongView15check_collisionEv+0x114>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	336c      	adds	r3, #108	; 0x6c
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7f8 fd89 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	687a      	ldr	r2, [r7, #4]
 8013b3e:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013b42:	4413      	add	r3, r2
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	18cc      	adds	r4, r1, r3
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	33ec      	adds	r3, #236	; 0xec
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7f8 fd7c 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 8013b52:	4603      	mov	r3, r0
 8013b54:	461d      	mov	r5, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	33ec      	adds	r3, #236	; 0xec
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7ff fcdc 	bl	8013518 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013b60:	4603      	mov	r3, r0
 8013b62:	442b      	add	r3, r5
 8013b64:	429c      	cmp	r4, r3
 8013b66:	dc01      	bgt.n	8013b6c <_ZN8PongView15check_collisionEv+0x114>
 8013b68:	2301      	movs	r3, #1
 8013b6a:	e000      	b.n	8013b6e <_ZN8PongView15check_collisionEv+0x116>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d001      	beq.n	8013b76 <_ZN8PongView15check_collisionEv+0x11e>
		return 1;
 8013b72:	2301      	movs	r3, #1
 8013b74:	e064      	b.n	8013c40 <_ZN8PongView15check_collisionEv+0x1e8>
	}

	// collide with wall
	if(ball.getY()+ball.getHeight()-margin-20<=0){
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	336c      	adds	r3, #108	; 0x6c
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7f8 fd72 	bl	800c664 <_ZNK8touchgfx8Drawable4getYEv>
 8013b80:	4603      	mov	r3, r0
 8013b82:	461c      	mov	r4, r3
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	336c      	adds	r3, #108	; 0x6c
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7ff fcd2 	bl	8013532 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	18e2      	adds	r2, r4, r3
 8013b92:	6879      	ldr	r1, [r7, #4]
 8013b94:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013b98:	440b      	add	r3, r1
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	1ad3      	subs	r3, r2, r3
 8013b9e:	3b14      	subs	r3, #20
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	bfd4      	ite	le
 8013ba4:	2301      	movle	r3, #1
 8013ba6:	2300      	movgt	r3, #0
 8013ba8:	b2db      	uxtb	r3, r3
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d001      	beq.n	8013bb2 <_ZN8PongView15check_collisionEv+0x15a>
		return 2;
 8013bae:	2302      	movs	r3, #2
 8013bb0:	e046      	b.n	8013c40 <_ZN8PongView15check_collisionEv+0x1e8>
	}

	// collide with left wall
	if(ball.getX()+ball.getWidth()-margin-20<=0){
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	336c      	adds	r3, #108	; 0x6c
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7f8 fd47 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	461c      	mov	r4, r3
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	336c      	adds	r3, #108	; 0x6c
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7ff fca7 	bl	8013518 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	18e2      	adds	r2, r4, r3
 8013bce:	6879      	ldr	r1, [r7, #4]
 8013bd0:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013bd4:	440b      	add	r3, r1
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	3b14      	subs	r3, #20
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	bfd4      	ite	le
 8013be0:	2301      	movle	r3, #1
 8013be2:	2300      	movgt	r3, #0
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d001      	beq.n	8013bee <_ZN8PongView15check_collisionEv+0x196>
		return 3;
 8013bea:	2303      	movs	r3, #3
 8013bec:	e028      	b.n	8013c40 <_ZN8PongView15check_collisionEv+0x1e8>
	}

	// collide with right wall
	if(ball.getX()+ball.getWidth() >= 480){
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	336c      	adds	r3, #108	; 0x6c
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7f8 fd29 	bl	800c64a <_ZNK8touchgfx8Drawable4getXEv>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	461c      	mov	r4, r3
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	336c      	adds	r3, #108	; 0x6c
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7ff fc89 	bl	8013518 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013c06:	4603      	mov	r3, r0
 8013c08:	4423      	add	r3, r4
 8013c0a:	f240 12df 	movw	r2, #479	; 0x1df
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	bfcc      	ite	gt
 8013c12:	2301      	movgt	r3, #1
 8013c14:	2300      	movle	r3, #0
 8013c16:	b2db      	uxtb	r3, r3
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d001      	beq.n	8013c20 <_ZN8PongView15check_collisionEv+0x1c8>
		return 4;
 8013c1c:	2304      	movs	r3, #4
 8013c1e:	e00f      	b.n	8013c40 <_ZN8PongView15check_collisionEv+0x1e8>
	}

	// collide with bottom
	if(ball.getY() >= 250){
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	336c      	adds	r3, #108	; 0x6c
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7f8 fd1d 	bl	800c664 <_ZNK8touchgfx8Drawable4getYEv>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	2bf9      	cmp	r3, #249	; 0xf9
 8013c2e:	bfcc      	ite	gt
 8013c30:	2301      	movgt	r3, #1
 8013c32:	2300      	movle	r3, #0
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d001      	beq.n	8013c3e <_ZN8PongView15check_collisionEv+0x1e6>
		return 5;
 8013c3a:	2305      	movs	r3, #5
 8013c3c:	e000      	b.n	8013c40 <_ZN8PongView15check_collisionEv+0x1e8>
	}

	return 0;
 8013c3e:	2300      	movs	r3, #0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3708      	adds	r7, #8
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bdb0      	pop	{r4, r5, r7, pc}

08013c48 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	4a09      	ldr	r2, [pc, #36]	; (8013c78 <_ZN15screenPresenterD1Ev+0x30>)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	601a      	str	r2, [r3, #0]
 8013c56:	4a09      	ldr	r2, [pc, #36]	; (8013c7c <_ZN15screenPresenterD1Ev+0x34>)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	605a      	str	r2, [r3, #4]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	3304      	adds	r3, #4
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7ff f87b 	bl	8012d5c <_ZN13ModelListenerD1Ev>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7ff f833 	bl	8012cd4 <_ZN8touchgfx9PresenterD1Ev>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	3708      	adds	r7, #8
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	08028c5c 	.word	0x08028c5c
 8013c7c:	08028c74 	.word	0x08028c74

08013c80 <_ZThn4_N15screenPresenterD1Ev>:
 8013c80:	f1a0 0004 	sub.w	r0, r0, #4
 8013c84:	e7e0      	b.n	8013c48 <_ZN15screenPresenterD1Ev>
 8013c86:	bf00      	nop

08013c88 <_ZN15screenPresenterD0Ev>:
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f7ff ffd9 	bl	8013c48 <_ZN15screenPresenterD1Ev>
 8013c96:	2110      	movs	r1, #16
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f011 fec5 	bl	8025a28 <_ZdlPvj>
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3708      	adds	r7, #8
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <_ZThn4_N15screenPresenterD0Ev>:
 8013ca8:	f1a0 0004 	sub.w	r0, r0, #4
 8013cac:	e7ec      	b.n	8013c88 <_ZN15screenPresenterD0Ev>
	...

08013cb0 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
    : view(v)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7ff f829 	bl	8012d14 <_ZN8touchgfx9PresenterC1Ev>
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	3304      	adds	r3, #4
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7ff f834 	bl	8012d34 <_ZN13ModelListenerC1Ev>
 8013ccc:	4a06      	ldr	r2, [pc, #24]	; (8013ce8 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	601a      	str	r2, [r3, #0]
 8013cd2:	4a06      	ldr	r2, [pc, #24]	; (8013cec <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	605a      	str	r2, [r3, #4]
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	683a      	ldr	r2, [r7, #0]
 8013cdc:	60da      	str	r2, [r3, #12]
{

}
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	08028c5c 	.word	0x08028c5c
 8013cec:	08028c74 	.word	0x08028c74

08013cf0 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b083      	sub	sp, #12
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]

}
 8013cf8:	bf00      	nop
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8013d04:	b480      	push	{r7}
 8013d06:	b083      	sub	sp, #12
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]

}
 8013d0c:	bf00      	nop
 8013d0e:	370c      	adds	r7, #12
 8013d10:	46bd      	mov	sp, r7
 8013d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d16:	4770      	bx	lr

08013d18 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	4a05      	ldr	r2, [pc, #20]	; (8013d38 <_ZN10screenViewD1Ev+0x20>)
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	601a      	str	r2, [r3, #0]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7fe fa97 	bl	801225c <_ZN14screenViewBaseD1Ev>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4618      	mov	r0, r3
 8013d32:	3708      	adds	r7, #8
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	08028c84 	.word	0x08028c84

08013d3c <_ZN10screenViewD0Ev>:
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7ff ffe7 	bl	8013d18 <_ZN10screenViewD1Ev>
 8013d4a:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f011 fe6a 	bl	8025a28 <_ZdlPvj>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	4618      	mov	r0, r3
 8013d58:	3708      	adds	r7, #8
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}
	...

08013d60 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7fe fac6 	bl	80122fc <_ZN14screenViewBaseC1Ev>
 8013d70:	4a03      	ldr	r2, [pc, #12]	; (8013d80 <_ZN10screenViewC1Ev+0x20>)
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	601a      	str	r2, [r3, #0]
{

}
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3708      	adds	r7, #8
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}
 8013d80:	08028c84 	.word	0x08028c84

08013d84 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fe fc66 	bl	8012660 <_ZN14screenViewBase11setupScreenEv>

}
 8013d94:	bf00      	nop
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fb fbe6 	bl	800f578 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013dac:	bf00      	nop
 8013dae:	3708      	adds	r7, #8
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013db4:	b480      	push	{r7}
 8013db6:	b083      	sub	sp, #12
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
    {
 8013dbc:	4a04      	ldr	r2, [pc, #16]	; (8013dd0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	601a      	str	r2, [r3, #0]
    }
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	370c      	adds	r7, #12
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr
 8013dd0:	08028cd0 	.word	0x08028cd0

08013dd4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b082      	sub	sp, #8
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
    }
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f7ff ffe9 	bl	8013db4 <_ZN8touchgfx15TouchControllerD1Ev>
 8013de2:	2104      	movs	r1, #4
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f011 fe1f 	bl	8025a28 <_ZdlPvj>
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4618      	mov	r0, r3
 8013dee:	3708      	adds	r7, #8
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	tsDriver = &ft5336_ts_drv;
 8013dfc:	4b05      	ldr	r3, [pc, #20]	; (8013e14 <_ZN20STM32TouchController4initEv+0x20>)
 8013dfe:	4a06      	ldr	r2, [pc, #24]	; (8013e18 <_ZN20STM32TouchController4initEv+0x24>)
 8013e00:	601a      	str	r2, [r3, #0]
	tsDriver->Start(TS_I2C_ADDRESS);
 8013e02:	4b04      	ldr	r3, [pc, #16]	; (8013e14 <_ZN20STM32TouchController4initEv+0x20>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	2070      	movs	r0, #112	; 0x70
 8013e0a:	4798      	blx	r3

}
 8013e0c:	bf00      	nop
 8013e0e:	3708      	adds	r7, #8
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}
 8013e14:	20008674 	.word	0x20008674
 8013e18:	20000004 	.word	0x20000004

08013e1c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 8013e28:	4b0f      	ldr	r3, [pc, #60]	; (8013e68 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d015      	beq.n	8013e5c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    {
	        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8013e30:	4b0d      	ldr	r3, [pc, #52]	; (8013e68 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	691b      	ldr	r3, [r3, #16]
 8013e36:	2070      	movs	r0, #112	; 0x70
 8013e38:	4798      	blx	r3
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	bf14      	ite	ne
 8013e40:	2301      	movne	r3, #1
 8013e42:	2300      	moveq	r3, #0
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d008      	beq.n	8013e5c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	        {
	            /* Get each touch coordinates */
	            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8013e4a:	4b07      	ldr	r3, [pc, #28]	; (8013e68 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	695b      	ldr	r3, [r3, #20]
 8013e50:	68ba      	ldr	r2, [r7, #8]
 8013e52:	6879      	ldr	r1, [r7, #4]
 8013e54:	2070      	movs	r0, #112	; 0x70
 8013e56:	4798      	blx	r3
	            return true;
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e000      	b.n	8013e5e <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	        }
	    }


    return false;
 8013e5c:	2300      	movs	r3, #0
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3710      	adds	r7, #16
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	20008674 	.word	0x20008674

08013e6c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	4a05      	ldr	r2, [pc, #20]	; (8013e8c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	601a      	str	r2, [r3, #0]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7ff ff99 	bl	8013db4 <_ZN8touchgfx15TouchControllerD1Ev>
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	4618      	mov	r0, r3
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	08028cb8 	.word	0x08028cb8

08013e90 <_ZN20STM32TouchControllerD0Ev>:
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f7ff ffe7 	bl	8013e6c <_ZN20STM32TouchControllerD1Ev>
 8013e9e:	2104      	movs	r1, #4
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f011 fdc1 	bl	8025a28 <_ZdlPvj>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3708      	adds	r7, #8
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}

08013eb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b083      	sub	sp, #12
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	71fb      	strb	r3, [r7, #7]

}
 8013eba:	bf00      	nop
 8013ebc:	370c      	adds	r7, #12
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec4:	4770      	bx	lr

08013ec6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013ec6:	b480      	push	{r7}
 8013ec8:	b083      	sub	sp, #12
 8013eca:	af00      	add	r7, sp, #0
 8013ecc:	4603      	mov	r3, r0
 8013ece:	71fb      	strb	r3, [r7, #7]

}
 8013ed0:	bf00      	nop
 8013ed2:	370c      	adds	r7, #12
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr

08013edc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013edc:	b480      	push	{r7}
 8013ede:	b083      	sub	sp, #12
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	71fb      	strb	r3, [r7, #7]

}
 8013ee6:	bf00      	nop
 8013ee8:	370c      	adds	r7, #12
 8013eea:	46bd      	mov	sp, r7
 8013eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef0:	4770      	bx	lr
	...

08013ef4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013ef4:	b480      	push	{r7}
 8013ef6:	b083      	sub	sp, #12
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
    {
 8013efc:	4a04      	ldr	r2, [pc, #16]	; (8013f10 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	601a      	str	r2, [r3, #0]
    }
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	4618      	mov	r0, r3
 8013f06:	370c      	adds	r7, #12
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr
 8013f10:	08029610 	.word	0x08029610

08013f14 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
    }
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f7ff ffe9 	bl	8013ef4 <_ZN8touchgfx3HALD1Ev>
 8013f22:	2178      	movs	r1, #120	; 0x78
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f011 fd7f 	bl	8025a28 <_ZdlPvj>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3708      	adds	r7, #8
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013f34:	b480      	push	{r7}
 8013f36:	b083      	sub	sp, #12
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	78fa      	ldrb	r2, [r7, #3]
 8013f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013f50:	bf00      	nop
 8013f52:	370c      	adds	r7, #12
 8013f54:	46bd      	mov	sp, r7
 8013f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5a:	4770      	bx	lr

08013f5c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	685a      	ldr	r2, [r3, #4]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4610      	mov	r0, r2
 8013f72:	4798      	blx	r3
 8013f74:	4603      	mov	r3, r0
    }
 8013f76:	4618      	mov	r0, r3
 8013f78:	3708      	adds	r7, #8
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}

08013f7e <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8013f7e:	b580      	push	{r7, lr}
 8013f80:	b082      	sub	sp, #8
 8013f82:	af00      	add	r7, sp, #0
 8013f84:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f002 fd9c 	bl	8016ac4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	3390      	adds	r3, #144	; 0x90
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	4798      	blx	r3
    }
 8013f98:	bf00      	nop
 8013f9a:	3708      	adds	r7, #8
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8013fa0:	b480      	push	{r7}
 8013fa2:	b083      	sub	sp, #12
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	6039      	str	r1, [r7, #0]
        return false;
 8013faa:	2300      	movs	r3, #0
    }
 8013fac:	4618      	mov	r0, r3
 8013fae:	370c      	adds	r7, #12
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr

08013fb8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    TOUCHGFX_DEPRECATED(
 8013fb8:	b590      	push	{r4, r7, lr}
 8013fba:	b08b      	sub	sp, #44	; 0x2c
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	4611      	mov	r1, r2
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	80fb      	strh	r3, [r7, #6]
 8013fca:	4613      	mov	r3, r2
 8013fcc:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 8013fce:	f7f8 fc59 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8013fd2:	4602      	mov	r2, r0
 8013fd4:	6813      	ldr	r3, [r2, #0]
 8013fd6:	3324      	adds	r3, #36	; 0x24
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	4610      	mov	r0, r2
 8013fdc:	4798      	blx	r3
 8013fde:	4603      	mov	r3, r0
 8013fe0:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8013fe2:	8b7b      	ldrh	r3, [r7, #26]
 8013fe4:	4a3d      	ldr	r2, [pc, #244]	; (80140dc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8013fe6:	8812      	ldrh	r2, [r2, #0]
 8013fe8:	fb02 f303 	mul.w	r3, r2, r3
 8013fec:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8013ffa:	797b      	ldrb	r3, [r7, #5]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d005      	beq.n	801400c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8014000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	4413      	add	r3, r2
 8014006:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8014008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400a:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 801400c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014010:	2b00      	cmp	r3, #0
 8014012:	d005      	beq.n	8014020 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8014014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	4413      	add	r3, r2
 801401a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 801401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401e:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8014020:	88fb      	ldrh	r3, [r7, #6]
 8014022:	3b01      	subs	r3, #1
 8014024:	2b1f      	cmp	r3, #31
 8014026:	d84d      	bhi.n	80140c4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8014028:	a201      	add	r2, pc, #4	; (adr r2, 8014030 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 801402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801402e:	bf00      	nop
 8014030:	080140b1 	.word	0x080140b1
 8014034:	080140b1 	.word	0x080140b1
 8014038:	080140c5 	.word	0x080140c5
 801403c:	080140b1 	.word	0x080140b1
 8014040:	080140c5 	.word	0x080140c5
 8014044:	080140c5 	.word	0x080140c5
 8014048:	080140c5 	.word	0x080140c5
 801404c:	080140b1 	.word	0x080140b1
 8014050:	080140c5 	.word	0x080140c5
 8014054:	080140c5 	.word	0x080140c5
 8014058:	080140c5 	.word	0x080140c5
 801405c:	080140c5 	.word	0x080140c5
 8014060:	080140c5 	.word	0x080140c5
 8014064:	080140c5 	.word	0x080140c5
 8014068:	080140c5 	.word	0x080140c5
 801406c:	080140b1 	.word	0x080140b1
 8014070:	080140c5 	.word	0x080140c5
 8014074:	080140c5 	.word	0x080140c5
 8014078:	080140c5 	.word	0x080140c5
 801407c:	080140c5 	.word	0x080140c5
 8014080:	080140c5 	.word	0x080140c5
 8014084:	080140c5 	.word	0x080140c5
 8014088:	080140c5 	.word	0x080140c5
 801408c:	080140b1 	.word	0x080140b1
 8014090:	080140c5 	.word	0x080140c5
 8014094:	080140c5 	.word	0x080140c5
 8014098:	080140c5 	.word	0x080140c5
 801409c:	080140c5 	.word	0x080140c5
 80140a0:	080140c5 	.word	0x080140c5
 80140a4:	080140c5 	.word	0x080140c5
 80140a8:	080140c5 	.word	0x080140c5
 80140ac:	080140b1 	.word	0x080140b1
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	3374      	adds	r3, #116	; 0x74
 80140b6:	681c      	ldr	r4, [r3, #0]
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	6a3a      	ldr	r2, [r7, #32]
 80140bc:	68b9      	ldr	r1, [r7, #8]
 80140be:	68f8      	ldr	r0, [r7, #12]
 80140c0:	47a0      	blx	r4
            break;
 80140c2:	e006      	b.n	80140d2 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 80140c4:	4b06      	ldr	r3, [pc, #24]	; (80140e0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80140c6:	4a07      	ldr	r2, [pc, #28]	; (80140e4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80140c8:	f240 216f 	movw	r1, #623	; 0x26f
 80140cc:	4806      	ldr	r0, [pc, #24]	; (80140e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80140ce:	f011 fcd7 	bl	8025a80 <__assert_func>
    }
 80140d2:	bf00      	nop
 80140d4:	372c      	adds	r7, #44	; 0x2c
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd90      	pop	{r4, r7, pc}
 80140da:	bf00      	nop
 80140dc:	2000b3c4 	.word	0x2000b3c4
 80140e0:	08027434 	.word	0x08027434
 80140e4:	08028de4 	.word	0x08028de4
 80140e8:	08027454 	.word	0x08027454

080140ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b084      	sub	sp, #16
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	607a      	str	r2, [r7, #4]
 80140f8:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d106      	bne.n	801410e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014100:	4b11      	ldr	r3, [pc, #68]	; (8014148 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8014102:	4a12      	ldr	r2, [pc, #72]	; (801414c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8014104:	f240 2182 	movw	r1, #642	; 0x282
 8014108:	4811      	ldr	r0, [pc, #68]	; (8014150 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801410a:	f011 fcb9 	bl	8025a80 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	68ba      	ldr	r2, [r7, #8]
 8014112:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	683a      	ldr	r2, [r7, #0]
 801411e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	bf14      	ite	ne
 8014126:	2301      	movne	r3, #1
 8014128:	2300      	moveq	r3, #0
 801412a:	b2da      	uxtb	r2, r3
 801412c:	4b09      	ldr	r3, [pc, #36]	; (8014154 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801412e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	2b00      	cmp	r3, #0
 8014134:	bf14      	ite	ne
 8014136:	2301      	movne	r3, #1
 8014138:	2300      	moveq	r3, #0
 801413a:	b2da      	uxtb	r2, r3
 801413c:	4b06      	ldr	r3, [pc, #24]	; (8014158 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801413e:	701a      	strb	r2, [r3, #0]
    }
 8014140:	bf00      	nop
 8014142:	3710      	adds	r7, #16
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}
 8014148:	08027498 	.word	0x08027498
 801414c:	08028d94 	.word	0x08028d94
 8014150:	08027454 	.word	0x08027454
 8014154:	2000b3c6 	.word	0x2000b3c6
 8014158:	2000b3c7 	.word	0x2000b3c7

0801415c <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 801415c:	b580      	push	{r7, lr}
 801415e:	b082      	sub	sp, #8
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	460b      	mov	r3, r1
 8014166:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801416c:	2b00      	cmp	r3, #0
 801416e:	d004      	beq.n	801417a <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014174:	887a      	ldrh	r2, [r7, #2]
 8014176:	4610      	mov	r0, r2
 8014178:	4798      	blx	r3
    }
 801417a:	bf00      	nop
 801417c:	3708      	adds	r7, #8
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8014182:	b580      	push	{r7, lr}
 8014184:	b082      	sub	sp, #8
 8014186:	af00      	add	r7, sp, #0
 8014188:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	685a      	ldr	r2, [r3, #4]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	3318      	adds	r3, #24
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	4610      	mov	r0, r2
 801419a:	4798      	blx	r3
 801419c:	4603      	mov	r3, r0
    }
 801419e:	4618      	mov	r0, r3
 80141a0:	3708      	adds	r7, #8
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
	...

080141a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80141bc:	429a      	cmp	r2, r3
 80141be:	d017      	beq.n	80141f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80141c0:	4b1a      	ldr	r3, [pc, #104]	; (801422c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d12a      	bne.n	801421e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80141c8:	4b19      	ldr	r3, [pc, #100]	; (8014230 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80141ca:	881a      	ldrh	r2, [r3, #0]
 80141cc:	4b19      	ldr	r3, [pc, #100]	; (8014234 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80141ce:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80141d0:	4b19      	ldr	r3, [pc, #100]	; (8014238 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80141d2:	881a      	ldrh	r2, [r3, #0]
 80141d4:	4b19      	ldr	r3, [pc, #100]	; (801423c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80141d6:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80141d8:	4b16      	ldr	r3, [pc, #88]	; (8014234 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80141da:	881a      	ldrh	r2, [r3, #0]
 80141dc:	4b16      	ldr	r3, [pc, #88]	; (8014238 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80141de:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80141e0:	4b16      	ldr	r3, [pc, #88]	; (801423c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80141e2:	881a      	ldrh	r2, [r3, #0]
 80141e4:	4b12      	ldr	r3, [pc, #72]	; (8014230 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80141e6:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80141e8:	4b10      	ldr	r3, [pc, #64]	; (801422c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80141ea:	2201      	movs	r2, #1
 80141ec:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80141ee:	e016      	b.n	801421e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80141f0:	4b0e      	ldr	r3, [pc, #56]	; (801422c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d012      	beq.n	801421e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80141f8:	4b0f      	ldr	r3, [pc, #60]	; (8014238 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80141fa:	881a      	ldrh	r2, [r3, #0]
 80141fc:	4b0d      	ldr	r3, [pc, #52]	; (8014234 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80141fe:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8014200:	4b0b      	ldr	r3, [pc, #44]	; (8014230 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014202:	881a      	ldrh	r2, [r3, #0]
 8014204:	4b0d      	ldr	r3, [pc, #52]	; (801423c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014206:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8014208:	4b0c      	ldr	r3, [pc, #48]	; (801423c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801420a:	881a      	ldrh	r2, [r3, #0]
 801420c:	4b0a      	ldr	r3, [pc, #40]	; (8014238 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801420e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8014210:	4b08      	ldr	r3, [pc, #32]	; (8014234 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014212:	881a      	ldrh	r2, [r3, #0]
 8014214:	4b06      	ldr	r3, [pc, #24]	; (8014230 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014216:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8014218:	4b04      	ldr	r3, [pc, #16]	; (801422c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801421a:	2200      	movs	r2, #0
 801421c:	701a      	strb	r2, [r3, #0]
    }
 801421e:	bf00      	nop
 8014220:	370c      	adds	r7, #12
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop
 801422c:	2000b3c0 	.word	0x2000b3c0
 8014230:	2000b3bc 	.word	0x2000b3bc
 8014234:	2000b3c2 	.word	0x2000b3c2
 8014238:	2000b3be 	.word	0x2000b3be
 801423c:	2000b3c4 	.word	0x2000b3c4

08014240 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	4618      	mov	r0, r3
 801424c:	f001 febd 	bl	8015fca <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8014250:	bf00      	nop
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	4a05      	ldr	r2, [pc, #20]	; (8014278 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	601a      	str	r2, [r3, #0]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	4618      	mov	r0, r3
 801426a:	f7ff fe43 	bl	8013ef4 <_ZN8touchgfx3HALD1Ev>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	4618      	mov	r0, r3
 8014272:	3708      	adds	r7, #8
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}
 8014278:	08028ffc 	.word	0x08028ffc

0801427c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f7ff ffe7 	bl	8014258 <_ZN20TouchGFXGeneratedHALD1Ev>
 801428a:	2178      	movs	r1, #120	; 0x78
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f011 fbcb 	bl	8025a28 <_ZdlPvj>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	4618      	mov	r0, r3
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7ff ffca 	bl	8014240 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80142ac:	bf00      	nop
 80142ae:	3708      	adds	r7, #8
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}

080142b4 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	4618      	mov	r0, r3
 80142c0:	f001 fafa 	bl	80158b8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80142c4:	bf00      	nop
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	4618      	mov	r0, r3
 80142d8:	f001 fb7a 	bl	80159d0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80142dc:	4603      	mov	r3, r0
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3708      	adds	r7, #8
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}

080142e6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80142e6:	b580      	push	{r7, lr}
 80142e8:	b082      	sub	sp, #8
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
 80142ee:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6839      	ldr	r1, [r7, #0]
 80142f4:	4618      	mov	r0, r3
 80142f6:	f001 fb79 	bl	80159ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80142fa:	bf00      	nop
 80142fc:	3708      	adds	r7, #8
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}

08014302 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014302:	b580      	push	{r7, lr}
 8014304:	b082      	sub	sp, #8
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
 801430a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6839      	ldr	r1, [r7, #0]
 8014310:	4618      	mov	r0, r3
 8014312:	f001 fb81 	bl	8015a18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8014316:	bf00      	nop
 8014318:	3708      	adds	r7, #8
 801431a:	46bd      	mov	sp, r7
 801431c:	bd80      	pop	{r7, pc}

0801431e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801431e:	b580      	push	{r7, lr}
 8014320:	b084      	sub	sp, #16
 8014322:	af00      	add	r7, sp, #0
 8014324:	60f8      	str	r0, [r7, #12]
 8014326:	60b9      	str	r1, [r7, #8]
 8014328:	607a      	str	r2, [r7, #4]
 801432a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 801432c:	68f8      	ldr	r0, [r7, #12]
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	687a      	ldr	r2, [r7, #4]
 8014332:	68b9      	ldr	r1, [r7, #8]
 8014334:	f001 ff83 	bl	801623e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8014338:	4603      	mov	r3, r0
}
 801433a:	4618      	mov	r0, r3
 801433c:	3710      	adds	r7, #16
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}

08014342 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8014342:	b580      	push	{r7, lr}
 8014344:	b082      	sub	sp, #8
 8014346:	af00      	add	r7, sp, #0
 8014348:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	4618      	mov	r0, r3
 801434e:	f001 fae5 	bl	801591c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8014352:	bf00      	nop
 8014354:	3708      	adds	r7, #8
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}

0801435a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801435a:	b580      	push	{r7, lr}
 801435c:	b082      	sub	sp, #8
 801435e:	af00      	add	r7, sp, #0
 8014360:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	4618      	mov	r0, r3
 8014366:	f001 fae9 	bl	801593c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801436a:	bf00      	nop
 801436c:	3708      	adds	r7, #8
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}

08014372 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b082      	sub	sp, #8
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	4618      	mov	r0, r3
 801437e:	f001 faeb 	bl	8015958 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8014382:	bf00      	nop
 8014384:	3708      	adds	r7, #8
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801438a:	b580      	push	{r7, lr}
 801438c:	b082      	sub	sp, #8
 801438e:	af00      	add	r7, sp, #0
 8014390:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	4618      	mov	r0, r3
 8014396:	f001 faed 	bl	8015974 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801439a:	bf00      	nop
 801439c:	3708      	adds	r7, #8
 801439e:	46bd      	mov	sp, r7
 80143a0:	bd80      	pop	{r7, pc}
	...

080143a4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	4a05      	ldr	r2, [pc, #20]	; (80143c4 <_ZN11TouchGFXHALD1Ev+0x20>)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	601a      	str	r2, [r3, #0]
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7ff ff4f 	bl	8014258 <_ZN20TouchGFXGeneratedHALD1Ev>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	4618      	mov	r0, r3
 80143be:	3708      	adds	r7, #8
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}
 80143c4:	08028ce8 	.word	0x08028ce8

080143c8 <_ZN11TouchGFXHALD0Ev>:
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f7ff ffe7 	bl	80143a4 <_ZN11TouchGFXHALD1Ev>
 80143d6:	2178      	movs	r1, #120	; 0x78
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f011 fb25 	bl	8025a28 <_ZdlPvj>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	4618      	mov	r0, r3
 80143e2:	3708      	adds	r7, #8
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 80143ec:	2101      	movs	r1, #1
 80143ee:	4811      	ldr	r0, [pc, #68]	; (8014434 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80143f0:	f7f4 fd1d 	bl	8008e2e <osSemaphoreCreate>
 80143f4:	4602      	mov	r2, r0
 80143f6:	4b10      	ldr	r3, [pc, #64]	; (8014438 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80143f8:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80143fa:	4b0f      	ldr	r3, [pc, #60]	; (8014438 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d105      	bne.n	801440e <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8014402:	4b0e      	ldr	r3, [pc, #56]	; (801443c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8014404:	4a0e      	ldr	r2, [pc, #56]	; (8014440 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014406:	2125      	movs	r1, #37	; 0x25
 8014408:	480e      	ldr	r0, [pc, #56]	; (8014444 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801440a:	f011 fb39 	bl	8025a80 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 801440e:	2101      	movs	r1, #1
 8014410:	480d      	ldr	r0, [pc, #52]	; (8014448 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014412:	f7f4 fd0c 	bl	8008e2e <osSemaphoreCreate>
 8014416:	4602      	mov	r2, r0
 8014418:	4b0c      	ldr	r3, [pc, #48]	; (801444c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801441a:	601a      	str	r2, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 801441c:	4b0b      	ldr	r3, [pc, #44]	; (801444c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d105      	bne.n	8014430 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 8014424:	4b0a      	ldr	r3, [pc, #40]	; (8014450 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 8014426:	4a06      	ldr	r2, [pc, #24]	; (8014440 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014428:	2128      	movs	r1, #40	; 0x28
 801442a:	4806      	ldr	r0, [pc, #24]	; (8014444 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801442c:	f011 fb28 	bl	8025a80 <__assert_func>
}
 8014430:	bf00      	nop
 8014432:	bd80      	pop	{r7, pc}
 8014434:	08028e38 	.word	0x08028e38
 8014438:	20008678 	.word	0x20008678
 801443c:	080274d0 	.word	0x080274d0
 8014440:	08028e48 	.word	0x08028e48
 8014444:	0802751c 	.word	0x0802751c
 8014448:	08028e40 	.word	0x08028e40
 801444c:	2000867c 	.word	0x2000867c
 8014450:	08027548 	.word	0x08027548

08014454 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8014454:	b580      	push	{r7, lr}
 8014456:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8014458:	4b04      	ldr	r3, [pc, #16]	; (801446c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	f04f 31ff 	mov.w	r1, #4294967295
 8014460:	4618      	mov	r0, r3
 8014462:	f7f4 fd25 	bl	8008eb0 <osSemaphoreWait>
}
 8014466:	bf00      	nop
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	20008678 	.word	0x20008678

08014470 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8014470:	b580      	push	{r7, lr}
 8014472:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8014474:	4b03      	ldr	r3, [pc, #12]	; (8014484 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	4618      	mov	r0, r3
 801447a:	f7f4 fd67 	bl	8008f4c <osSemaphoreRelease>
}
 801447e:	bf00      	nop
 8014480:	bd80      	pop	{r7, pc}
 8014482:	bf00      	nop
 8014484:	20008678 	.word	0x20008678

08014488 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8014488:	b580      	push	{r7, lr}
 801448a:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 801448c:	4b03      	ldr	r3, [pc, #12]	; (801449c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	2100      	movs	r1, #0
 8014492:	4618      	mov	r0, r3
 8014494:	f7f4 fd0c 	bl	8008eb0 <osSemaphoreWait>
}
 8014498:	bf00      	nop
 801449a:	bd80      	pop	{r7, pc}
 801449c:	20008678 	.word	0x20008678

080144a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 80144a4:	4b03      	ldr	r3, [pc, #12]	; (80144b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7f4 fd4f 	bl	8008f4c <osSemaphoreRelease>
}
 80144ae:	bf00      	nop
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	20008678 	.word	0x20008678

080144b8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 80144bc:	4b03      	ldr	r3, [pc, #12]	; (80144cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f4 fd43 	bl	8008f4c <osSemaphoreRelease>
}
 80144c6:	bf00      	nop
 80144c8:	bd80      	pop	{r7, pc}
 80144ca:	bf00      	nop
 80144cc:	2000867c 	.word	0x2000867c

080144d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 80144d4:	4b07      	ldr	r3, [pc, #28]	; (80144f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2100      	movs	r1, #0
 80144da:	4618      	mov	r0, r3
 80144dc:	f7f4 fce8 	bl	8008eb0 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 80144e0:	4b04      	ldr	r3, [pc, #16]	; (80144f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f04f 31ff 	mov.w	r1, #4294967295
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7f4 fce1 	bl	8008eb0 <osSemaphoreWait>
}
 80144ee:	bf00      	nop
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	2000867c 	.word	0x2000867c

080144f8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	4603      	mov	r3, r0
 8014500:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8014502:	88fb      	ldrh	r3, [r7, #6]
 8014504:	4618      	mov	r0, r3
 8014506:	f7f4 fc7e 	bl	8008e06 <osDelay>
}
 801450a:	bf00      	nop
 801450c:	3708      	adds	r7, #8
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
	...

08014514 <__NVIC_EnableIRQ>:
{
 8014514:	b480      	push	{r7}
 8014516:	b083      	sub	sp, #12
 8014518:	af00      	add	r7, sp, #0
 801451a:	4603      	mov	r3, r0
 801451c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014522:	2b00      	cmp	r3, #0
 8014524:	db0d      	blt.n	8014542 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801452a:	b2db      	uxtb	r3, r3
 801452c:	f003 021f 	and.w	r2, r3, #31
 8014530:	4907      	ldr	r1, [pc, #28]	; (8014550 <__NVIC_EnableIRQ+0x3c>)
 8014532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014536:	095b      	lsrs	r3, r3, #5
 8014538:	2001      	movs	r0, #1
 801453a:	fa00 f202 	lsl.w	r2, r0, r2
 801453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014542:	bf00      	nop
 8014544:	370c      	adds	r7, #12
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	e000e100 	.word	0xe000e100

08014554 <__NVIC_DisableIRQ>:
{
 8014554:	b480      	push	{r7}
 8014556:	b083      	sub	sp, #12
 8014558:	af00      	add	r7, sp, #0
 801455a:	4603      	mov	r3, r0
 801455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014562:	2b00      	cmp	r3, #0
 8014564:	db12      	blt.n	801458c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801456a:	b2db      	uxtb	r3, r3
 801456c:	f003 021f 	and.w	r2, r3, #31
 8014570:	4909      	ldr	r1, [pc, #36]	; (8014598 <__NVIC_DisableIRQ+0x44>)
 8014572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014576:	095b      	lsrs	r3, r3, #5
 8014578:	2001      	movs	r0, #1
 801457a:	fa00 f202 	lsl.w	r2, r0, r2
 801457e:	3320      	adds	r3, #32
 8014580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014588:	f3bf 8f6f 	isb	sy
}
 801458c:	bf00      	nop
 801458e:	370c      	adds	r7, #12
 8014590:	46bd      	mov	sp, r7
 8014592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014596:	4770      	bx	lr
 8014598:	e000e100 	.word	0xe000e100

0801459c <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 801459c:	b480      	push	{r7}
 801459e:	b083      	sub	sp, #12
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
        : color(0)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2200      	movs	r2, #0
 80145a8:	601a      	str	r2, [r3, #0]
    }
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	4618      	mov	r0, r3
 80145ae:	370c      	adds	r7, #12
 80145b0:	46bd      	mov	sp, r7
 80145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b6:	4770      	bx	lr

080145b8 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80145b8:	b480      	push	{r7}
 80145ba:	b083      	sub	sp, #12
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
        return color;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
    }
 80145c4:	4618      	mov	r0, r3
 80145c6:	370c      	adds	r7, #12
 80145c8:	46bd      	mov	sp, r7
 80145ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ce:	4770      	bx	lr

080145d0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80145d0:	b480      	push	{r7}
 80145d2:	b083      	sub	sp, #12
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
    {
 80145d8:	4a04      	ldr	r2, [pc, #16]	; (80145ec <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	601a      	str	r2, [r3, #0]
    }
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	4618      	mov	r0, r3
 80145e2:	370c      	adds	r7, #12
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr
 80145ec:	08028ed0 	.word	0x08028ed0

080145f0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
    }
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f7ff ffe9 	bl	80145d0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80145fe:	2104      	movs	r1, #4
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f011 fa11 	bl	8025a28 <_ZdlPvj>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	4618      	mov	r0, r3
 801460a:	3708      	adds	r7, #8
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}

08014610 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	3344      	adds	r3, #68	; 0x44
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	4798      	blx	r3
    }
 8014624:	bf00      	nop
 8014626:	3708      	adds	r7, #8
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}

0801462c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 801462c:	b480      	push	{r7}
 801462e:	b083      	sub	sp, #12
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8014634:	2300      	movs	r3, #0
    }
 8014636:	4618      	mov	r0, r3
 8014638:	370c      	adds	r7, #12
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr
	...

08014644 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
    {
 801464c:	4a04      	ldr	r2, [pc, #16]	; (8014660 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	601a      	str	r2, [r3, #0]
    }
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	4618      	mov	r0, r3
 8014656:	370c      	adds	r7, #12
 8014658:	46bd      	mov	sp, r7
 801465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465e:	4770      	bx	lr
 8014660:	08029a54 	.word	0x08029a54

08014664 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
    }
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7ff ffe9 	bl	8014644 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014672:	210c      	movs	r1, #12
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f011 f9d7 	bl	8025a28 <_ZdlPvj>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4618      	mov	r0, r3
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801468e:	4a09      	ldr	r2, [pc, #36]	; (80146b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	601a      	str	r2, [r3, #0]
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	683a      	ldr	r2, [r7, #0]
 8014698:	605a      	str	r2, [r3, #4]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2200      	movs	r2, #0
 801469e:	721a      	strb	r2, [r3, #8]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	725a      	strb	r2, [r3, #9]
    {
    }
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	370c      	adds	r7, #12
 80146ac:	46bd      	mov	sp, r7
 80146ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b2:	4770      	bx	lr
 80146b4:	08029a54 	.word	0x08029a54

080146b8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b082      	sub	sp, #8
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	685a      	ldr	r2, [r3, #4]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	3314      	adds	r3, #20
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	4610      	mov	r0, r2
 80146d0:	4798      	blx	r3
    }
 80146d2:	bf00      	nop
 80146d4:	3708      	adds	r7, #8
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}

080146da <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80146da:	b580      	push	{r7, lr}
 80146dc:	b082      	sub	sp, #8
 80146de:	af00      	add	r7, sp, #0
 80146e0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	3328      	adds	r3, #40	; 0x28
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4610      	mov	r0, r2
 80146ee:	4798      	blx	r3
    }
 80146f0:	bf00      	nop
 80146f2:	3708      	adds	r7, #8
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b085      	sub	sp, #20
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	60f8      	str	r0, [r7, #12]
 8014700:	60b9      	str	r1, [r7, #8]
 8014702:	607a      	str	r2, [r7, #4]
 8014704:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8014710:	68ba      	ldr	r2, [r7, #8]
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	430a      	orrs	r2, r1
 8014718:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014720:	f023 0107 	bic.w	r1, r3, #7
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	430a      	orrs	r2, r1
 801472c:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014734:	4b06      	ldr	r3, [pc, #24]	; (8014750 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8014736:	4013      	ands	r3, r2
 8014738:	6839      	ldr	r1, [r7, #0]
 801473a:	68fa      	ldr	r2, [r7, #12]
 801473c:	6812      	ldr	r2, [r2, #0]
 801473e:	430b      	orrs	r3, r1
 8014740:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8014742:	2300      	movs	r3, #0
}
 8014744:	4618      	mov	r0, r3
 8014746:	3714      	adds	r7, #20
 8014748:	46bd      	mov	sp, r7
 801474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474e:	4770      	bx	lr
 8014750:	ffffc000 	.word	0xffffc000

08014754 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801475c:	f7f8 f886 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 8014760:	4603      	mov	r3, r0
 8014762:	4618      	mov	r0, r3
 8014764:	f7ff ffa8 	bl	80146b8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8014768:	bf00      	nop
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}

08014770 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
    assert(0);
 8014778:	4b02      	ldr	r3, [pc, #8]	; (8014784 <DMA2D_XferErrorCallback+0x14>)
 801477a:	4a03      	ldr	r2, [pc, #12]	; (8014788 <DMA2D_XferErrorCallback+0x18>)
 801477c:	213e      	movs	r1, #62	; 0x3e
 801477e:	4803      	ldr	r0, [pc, #12]	; (801478c <DMA2D_XferErrorCallback+0x1c>)
 8014780:	f011 f97e 	bl	8025a80 <__assert_func>
 8014784:	08027584 	.word	0x08027584
 8014788:	08028eec 	.word	0x08028eec
 801478c:	08027588 	.word	0x08027588

08014790 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	3318      	adds	r3, #24
 801479c:	4618      	mov	r0, r3
 801479e:	f7ff fefd 	bl	801459c <_ZN8touchgfx9colortypeC1Ev>
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	4618      	mov	r0, r3
 80147a6:	3708      	adds	r7, #8
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80147ac:	b5b0      	push	{r4, r5, r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80147b4:	687a      	ldr	r2, [r7, #4]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	330c      	adds	r3, #12
 80147ba:	4619      	mov	r1, r3
 80147bc:	4610      	mov	r0, r2
 80147be:	f7ff ff61 	bl	8014684 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80147c2:	4a0e      	ldr	r2, [pc, #56]	; (80147fc <_ZN10STM32F7DMAC1Ev+0x50>)
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	601a      	str	r2, [r3, #0]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f103 000c 	add.w	r0, r3, #12
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	3320      	adds	r3, #32
 80147d2:	2260      	movs	r2, #96	; 0x60
 80147d4:	4619      	mov	r1, r3
 80147d6:	f002 fa9b 	bl	8016d10 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	3320      	adds	r3, #32
 80147de:	245f      	movs	r4, #95	; 0x5f
 80147e0:	461d      	mov	r5, r3
 80147e2:	2c00      	cmp	r4, #0
 80147e4:	db05      	blt.n	80147f2 <_ZN10STM32F7DMAC1Ev+0x46>
 80147e6:	4628      	mov	r0, r5
 80147e8:	f7ff ffd2 	bl	8014790 <_ZN8touchgfx6BlitOpC1Ev>
 80147ec:	3520      	adds	r5, #32
 80147ee:	3c01      	subs	r4, #1
 80147f0:	e7f7      	b.n	80147e2 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4618      	mov	r0, r3
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bdb0      	pop	{r4, r5, r7, pc}
 80147fc:	08028e80 	.word	0x08028e80

08014800 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	4a0b      	ldr	r2, [pc, #44]	; (8014838 <_ZN10STM32F7DMAD1Ev+0x38>)
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801480e:	480b      	ldr	r0, [pc, #44]	; (801483c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8014810:	f7ee fed8 	bl	80035c4 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014814:	205a      	movs	r0, #90	; 0x5a
 8014816:	f7ff fe9d 	bl	8014554 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	330c      	adds	r3, #12
 801481e:	4618      	mov	r0, r3
 8014820:	f000 faa4 	bl	8014d6c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	4618      	mov	r0, r3
 8014828:	f7ff ff0c 	bl	8014644 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	4618      	mov	r0, r3
 8014830:	3708      	adds	r7, #8
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	08028e80 	.word	0x08028e80
 801483c:	2000baa0 	.word	0x2000baa0

08014840 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
}
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f7ff ffd9 	bl	8014800 <_ZN10STM32F7DMAD1Ev>
 801484e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f011 f8e8 	bl	8025a28 <_ZdlPvj>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4618      	mov	r0, r3
 801485c:	3708      	adds	r7, #8
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
	...

08014864 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b082      	sub	sp, #8
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 801486c:	4b09      	ldr	r3, [pc, #36]	; (8014894 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801486e:	4a0a      	ldr	r2, [pc, #40]	; (8014898 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8014870:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8014872:	4808      	ldr	r0, [pc, #32]	; (8014894 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014874:	f7ee fe5c 	bl	8003530 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8014878:	4b06      	ldr	r3, [pc, #24]	; (8014894 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801487a:	4a08      	ldr	r2, [pc, #32]	; (801489c <_ZN10STM32F7DMA10initializeEv+0x38>)
 801487c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801487e:	4b05      	ldr	r3, [pc, #20]	; (8014894 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014880:	4a07      	ldr	r2, [pc, #28]	; (80148a0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8014882:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8014884:	205a      	movs	r0, #90	; 0x5a
 8014886:	f7ff fe45 	bl	8014514 <__NVIC_EnableIRQ>
}
 801488a:	bf00      	nop
 801488c:	3708      	adds	r7, #8
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
 8014892:	bf00      	nop
 8014894:	2000baa0 	.word	0x2000baa0
 8014898:	4002b000 	.word	0x4002b000
 801489c:	08014755 	.word	0x08014755
 80148a0:	08014771 	.word	0x08014771

080148a4 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80148a4:	b480      	push	{r7}
 80148a6:	b083      	sub	sp, #12
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 80148ac:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	370c      	adds	r7, #12
 80148b4:	46bd      	mov	sp, r7
 80148b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ba:	4770      	bx	lr

080148bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80148bc:	b590      	push	{r4, r7, lr}
 80148be:	b08d      	sub	sp, #52	; 0x34
 80148c0:	af02      	add	r7, sp, #8
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80148c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80148ca:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80148cc:	2300      	movs	r3, #0
 80148ce:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80148d4:	2b20      	cmp	r3, #32
 80148d6:	d007      	beq.n	80148e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2b40      	cmp	r3, #64	; 0x40
 80148de:	d003      	beq.n	80148e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b04      	cmp	r3, #4
 80148e6:	d101      	bne.n	80148ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80148e8:	2301      	movs	r3, #1
 80148ea:	e000      	b.n	80148ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80148ec:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80148ee:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80148f4:	2b80      	cmp	r3, #128	; 0x80
 80148f6:	d004      	beq.n	8014902 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014900:	d101      	bne.n	8014906 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8014902:	2301      	movs	r3, #1
 8014904:	e000      	b.n	8014908 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8014906:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014908:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801490a:	f7f7 ffbb 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 801490e:	4602      	mov	r2, r0
 8014910:	6813      	ldr	r3, [r2, #0]
 8014912:	331c      	adds	r3, #28
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	4610      	mov	r0, r2
 8014918:	4798      	blx	r3
 801491a:	4603      	mov	r3, r0
 801491c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	2b40      	cmp	r3, #64	; 0x40
 8014924:	d01d      	beq.n	8014962 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8014926:	2b40      	cmp	r3, #64	; 0x40
 8014928:	d804      	bhi.n	8014934 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801492a:	2b04      	cmp	r3, #4
 801492c:	d00e      	beq.n	801494c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801492e:	2b20      	cmp	r3, #32
 8014930:	d017      	beq.n	8014962 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8014932:	e019      	b.n	8014968 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8014934:	2b80      	cmp	r3, #128	; 0x80
 8014936:	d003      	beq.n	8014940 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8014938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801493c:	d003      	beq.n	8014946 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801493e:	e013      	b.n	8014968 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8014940:	230a      	movs	r3, #10
 8014942:	623b      	str	r3, [r7, #32]
        break;
 8014944:	e01a      	b.n	801497c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8014946:	2309      	movs	r3, #9
 8014948:	623b      	str	r3, [r7, #32]
        break;
 801494a:	e017      	b.n	801497c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801494c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014950:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014952:	7f7b      	ldrb	r3, [r7, #29]
 8014954:	2b10      	cmp	r3, #16
 8014956:	d101      	bne.n	801495c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8014958:	2302      	movs	r3, #2
 801495a:	e000      	b.n	801495e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 801495c:	2301      	movs	r3, #1
 801495e:	623b      	str	r3, [r7, #32]
        break;
 8014960:	e00c      	b.n	801497c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8014962:	2300      	movs	r3, #0
 8014964:	623b      	str	r3, [r7, #32]
        break;
 8014966:	e009      	b.n	801497c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8014968:	2300      	movs	r3, #0
 801496a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801496c:	7f7b      	ldrb	r3, [r7, #29]
 801496e:	2b10      	cmp	r3, #16
 8014970:	d101      	bne.n	8014976 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8014972:	2302      	movs	r3, #2
 8014974:	e000      	b.n	8014978 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8014976:	2301      	movs	r3, #1
 8014978:	623b      	str	r3, [r7, #32]
        break;
 801497a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801497c:	4a75      	ldr	r2, [pc, #468]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014980:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014982:	7f7b      	ldrb	r3, [r7, #29]
 8014984:	2b10      	cmp	r3, #16
 8014986:	d101      	bne.n	801498c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8014988:	2302      	movs	r3, #2
 801498a:	e000      	b.n	801498e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 801498c:	2301      	movs	r3, #1
 801498e:	4a71      	ldr	r2, [pc, #452]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014990:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	8adb      	ldrh	r3, [r3, #22]
 8014996:	461a      	mov	r2, r3
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	8a1b      	ldrh	r3, [r3, #16]
 801499c:	1ad3      	subs	r3, r2, r3
 801499e:	461a      	mov	r2, r3
 80149a0:	4b6c      	ldr	r3, [pc, #432]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80149a2:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80149a4:	7f7b      	ldrb	r3, [r7, #29]
 80149a6:	2b10      	cmp	r3, #16
 80149a8:	d101      	bne.n	80149ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80149aa:	2202      	movs	r2, #2
 80149ac:	e000      	b.n	80149b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80149ae:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	8adb      	ldrh	r3, [r3, #22]
 80149b4:	4619      	mov	r1, r3
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	8a1b      	ldrh	r3, [r3, #16]
 80149ba:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80149bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149be:	4865      	ldr	r0, [pc, #404]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80149c0:	f7ff fe9a 	bl	80146f8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80149c4:	4a63      	ldr	r2, [pc, #396]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80149c6:	6a3b      	ldr	r3, [r7, #32]
 80149c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	8a9b      	ldrh	r3, [r3, #20]
 80149ce:	461a      	mov	r2, r3
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	8a1b      	ldrh	r3, [r3, #16]
 80149d4:	1ad3      	subs	r3, r2, r3
 80149d6:	461a      	mov	r2, r3
 80149d8:	4b5e      	ldr	r3, [pc, #376]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80149da:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80149dc:	7ffb      	ldrb	r3, [r7, #31]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d103      	bne.n	80149ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80149e2:	7fbb      	ldrb	r3, [r7, #30]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	f000 8081 	beq.w	8014aec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	7f1b      	ldrb	r3, [r3, #28]
 80149ee:	2bff      	cmp	r3, #255	; 0xff
 80149f0:	d008      	beq.n	8014a04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80149f2:	4b58      	ldr	r3, [pc, #352]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80149f4:	2202      	movs	r2, #2
 80149f6:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80149f8:	683b      	ldr	r3, [r7, #0]
 80149fa:	7f1b      	ldrb	r3, [r3, #28]
 80149fc:	461a      	mov	r2, r3
 80149fe:	4b55      	ldr	r3, [pc, #340]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014a00:	635a      	str	r2, [r3, #52]	; 0x34
 8014a02:	e002      	b.n	8014a0a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8014a04:	4b53      	ldr	r3, [pc, #332]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014a06:	2200      	movs	r2, #0
 8014a08:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8014a0a:	7fbb      	ldrb	r3, [r7, #30]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d058      	beq.n	8014ac2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8014a10:	7f7b      	ldrb	r3, [r7, #29]
 8014a12:	2b10      	cmp	r3, #16
 8014a14:	d14a      	bne.n	8014aac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	3318      	adds	r3, #24
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f7ff fdcc 	bl	80145b8 <_ZNK8touchgfx9colortypecvmEv>
 8014a20:	4603      	mov	r3, r0
 8014a22:	0adb      	lsrs	r3, r3, #11
 8014a24:	f003 021f 	and.w	r2, r3, #31
 8014a28:	4613      	mov	r3, r2
 8014a2a:	021b      	lsls	r3, r3, #8
 8014a2c:	1a9a      	subs	r2, r3, r2
 8014a2e:	4b4a      	ldr	r3, [pc, #296]	; (8014b58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a30:	fba3 1302 	umull	r1, r3, r3, r2
 8014a34:	1ad2      	subs	r2, r2, r3
 8014a36:	0852      	lsrs	r2, r2, #1
 8014a38:	4413      	add	r3, r2
 8014a3a:	091b      	lsrs	r3, r3, #4
 8014a3c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	3318      	adds	r3, #24
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7ff fdb8 	bl	80145b8 <_ZNK8touchgfx9colortypecvmEv>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	095b      	lsrs	r3, r3, #5
 8014a4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014a50:	4613      	mov	r3, r2
 8014a52:	021b      	lsls	r3, r3, #8
 8014a54:	1a9a      	subs	r2, r3, r2
 8014a56:	4b41      	ldr	r3, [pc, #260]	; (8014b5c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014a58:	fba3 1302 	umull	r1, r3, r3, r2
 8014a5c:	1ad2      	subs	r2, r2, r3
 8014a5e:	0852      	lsrs	r2, r2, #1
 8014a60:	4413      	add	r3, r2
 8014a62:	095b      	lsrs	r3, r3, #5
 8014a64:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	3318      	adds	r3, #24
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7ff fda4 	bl	80145b8 <_ZNK8touchgfx9colortypecvmEv>
 8014a70:	4603      	mov	r3, r0
 8014a72:	f003 021f 	and.w	r2, r3, #31
 8014a76:	4613      	mov	r3, r2
 8014a78:	021b      	lsls	r3, r3, #8
 8014a7a:	1a9a      	subs	r2, r3, r2
 8014a7c:	4b36      	ldr	r3, [pc, #216]	; (8014b58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8014a82:	1ad2      	subs	r2, r2, r3
 8014a84:	0852      	lsrs	r2, r2, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	091b      	lsrs	r3, r3, #4
 8014a8a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	7f1b      	ldrb	r3, [r3, #28]
 8014a90:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	061a      	lsls	r2, r3, #24
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	041b      	lsls	r3, r3, #16
 8014a9a:	431a      	orrs	r2, r3
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	021b      	lsls	r3, r3, #8
 8014aa0:	431a      	orrs	r2, r3
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	4313      	orrs	r3, r2
 8014aa6:	4a2b      	ldr	r2, [pc, #172]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014aa8:	6353      	str	r3, [r2, #52]	; 0x34
 8014aaa:	e00a      	b.n	8014ac2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	3318      	adds	r3, #24
 8014ab0:	60bb      	str	r3, [r7, #8]
        return color;
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	7f12      	ldrb	r2, [r2, #28]
 8014aba:	0612      	lsls	r2, r2, #24
 8014abc:	4313      	orrs	r3, r2
 8014abe:	4a25      	ldr	r2, [pc, #148]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014ac0:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	8adb      	ldrh	r3, [r3, #22]
 8014ac6:	461a      	mov	r2, r3
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	8a1b      	ldrh	r3, [r3, #16]
 8014acc:	1ad3      	subs	r3, r2, r3
 8014ace:	461a      	mov	r2, r3
 8014ad0:	4b20      	ldr	r3, [pc, #128]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014ad2:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014ad4:	7f7b      	ldrb	r3, [r7, #29]
 8014ad6:	2b10      	cmp	r3, #16
 8014ad8:	d101      	bne.n	8014ade <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 8014ada:	2302      	movs	r3, #2
 8014adc:	e000      	b.n	8014ae0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8014ade:	2301      	movs	r3, #1
 8014ae0:	4a1c      	ldr	r2, [pc, #112]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014ae2:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014ae4:	2100      	movs	r1, #0
 8014ae6:	481b      	ldr	r0, [pc, #108]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014ae8:	f7ee ffec 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014aec:	2101      	movs	r1, #1
 8014aee:	4819      	ldr	r0, [pc, #100]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014af0:	f7ee ffe8 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8014af4:	7ffb      	ldrb	r3, [r7, #31]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d102      	bne.n	8014b00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8014afa:	7fbb      	ldrb	r3, [r7, #30]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d015      	beq.n	8014b2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b04:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b0a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b10:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b16:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b1c:	9301      	str	r3, [sp, #4]
 8014b1e:	9200      	str	r2, [sp, #0]
 8014b20:	4623      	mov	r3, r4
 8014b22:	4602      	mov	r2, r0
 8014b24:	480b      	ldr	r0, [pc, #44]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014b26:	f7ee fdf0 	bl	800370a <HAL_DMA2D_BlendingStart_IT>
 8014b2a:	e00f      	b.n	8014b4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014b30:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014b36:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014b3c:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014b42:	9300      	str	r3, [sp, #0]
 8014b44:	4603      	mov	r3, r0
 8014b46:	4803      	ldr	r0, [pc, #12]	; (8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014b48:	f7ee fdac 	bl	80036a4 <HAL_DMA2D_Start_IT>
    }
}
 8014b4c:	bf00      	nop
 8014b4e:	372c      	adds	r7, #44	; 0x2c
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd90      	pop	{r4, r7, pc}
 8014b54:	2000baa0 	.word	0x2000baa0
 8014b58:	08421085 	.word	0x08421085
 8014b5c:	04104105 	.word	0x04104105

08014b60 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8014b60:	b590      	push	{r4, r7, lr}
 8014b62:	b08f      	sub	sp, #60	; 0x3c
 8014b64:	af02      	add	r7, sp, #8
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014b6a:	f7f7 fe8b 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8014b6e:	4602      	mov	r2, r0
 8014b70:	6813      	ldr	r3, [r2, #0]
 8014b72:	331c      	adds	r3, #28
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	4610      	mov	r0, r2
 8014b78:	4798      	blx	r3
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b84:	2b10      	cmp	r3, #16
 8014b86:	d101      	bne.n	8014b8c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8014b88:	2302      	movs	r3, #2
 8014b8a:	e000      	b.n	8014b8e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 8014b90:	2300      	movs	r3, #0
 8014b92:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8014b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b98:	2b10      	cmp	r3, #16
 8014b9a:	d149      	bne.n	8014c30 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	3318      	adds	r3, #24
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7ff fd09 	bl	80145b8 <_ZNK8touchgfx9colortypecvmEv>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	0adb      	lsrs	r3, r3, #11
 8014baa:	f003 021f 	and.w	r2, r3, #31
 8014bae:	4613      	mov	r3, r2
 8014bb0:	021b      	lsls	r3, r3, #8
 8014bb2:	1a9a      	subs	r2, r3, r2
 8014bb4:	4b6a      	ldr	r3, [pc, #424]	; (8014d60 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8014bba:	1ad2      	subs	r2, r2, r3
 8014bbc:	0852      	lsrs	r2, r2, #1
 8014bbe:	4413      	add	r3, r2
 8014bc0:	091b      	lsrs	r3, r3, #4
 8014bc2:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	3318      	adds	r3, #24
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7ff fcf5 	bl	80145b8 <_ZNK8touchgfx9colortypecvmEv>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	095b      	lsrs	r3, r3, #5
 8014bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014bd6:	4613      	mov	r3, r2
 8014bd8:	021b      	lsls	r3, r3, #8
 8014bda:	1a9a      	subs	r2, r3, r2
 8014bdc:	4b61      	ldr	r3, [pc, #388]	; (8014d64 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 8014bde:	fba3 1302 	umull	r1, r3, r3, r2
 8014be2:	1ad2      	subs	r2, r2, r3
 8014be4:	0852      	lsrs	r2, r2, #1
 8014be6:	4413      	add	r3, r2
 8014be8:	095b      	lsrs	r3, r3, #5
 8014bea:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	3318      	adds	r3, #24
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7ff fce1 	bl	80145b8 <_ZNK8touchgfx9colortypecvmEv>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	f003 021f 	and.w	r2, r3, #31
 8014bfc:	4613      	mov	r3, r2
 8014bfe:	021b      	lsls	r3, r3, #8
 8014c00:	1a9a      	subs	r2, r3, r2
 8014c02:	4b57      	ldr	r3, [pc, #348]	; (8014d60 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014c04:	fba3 1302 	umull	r1, r3, r3, r2
 8014c08:	1ad2      	subs	r2, r2, r3
 8014c0a:	0852      	lsrs	r2, r2, #1
 8014c0c:	4413      	add	r3, r2
 8014c0e:	091b      	lsrs	r3, r3, #4
 8014c10:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	7f1b      	ldrb	r3, [r3, #28]
 8014c16:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	061a      	lsls	r2, r3, #24
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	041b      	lsls	r3, r3, #16
 8014c20:	431a      	orrs	r2, r3
 8014c22:	69bb      	ldr	r3, [r7, #24]
 8014c24:	021b      	lsls	r3, r3, #8
 8014c26:	4313      	orrs	r3, r2
 8014c28:	697a      	ldr	r2, [r7, #20]
 8014c2a:	4313      	orrs	r3, r2
 8014c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c2e:	e00a      	b.n	8014c46 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	7f1b      	ldrb	r3, [r3, #28]
 8014c34:	061b      	lsls	r3, r3, #24
 8014c36:	461a      	mov	r2, r3
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	3318      	adds	r3, #24
 8014c3c:	60fb      	str	r3, [r7, #12]
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	4313      	orrs	r3, r2
 8014c44:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	2b08      	cmp	r3, #8
 8014c4c:	d103      	bne.n	8014c56 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8014c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014c54:	e003      	b.n	8014c5e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8014c56:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8014c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014c5c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014c5e:	4a42      	ldr	r2, [pc, #264]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c62:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c68:	2b10      	cmp	r3, #16
 8014c6a:	d101      	bne.n	8014c70 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8014c6c:	2302      	movs	r3, #2
 8014c6e:	e000      	b.n	8014c72 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8014c70:	2301      	movs	r3, #1
 8014c72:	4a3d      	ldr	r2, [pc, #244]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014c74:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	8adb      	ldrh	r3, [r3, #22]
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	8a1b      	ldrh	r3, [r3, #16]
 8014c80:	1ad3      	subs	r3, r2, r3
 8014c82:	461a      	mov	r2, r3
 8014c84:	4b38      	ldr	r3, [pc, #224]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014c86:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c8c:	2b10      	cmp	r3, #16
 8014c8e:	d101      	bne.n	8014c94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8014c90:	2202      	movs	r2, #2
 8014c92:	e000      	b.n	8014c96 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8014c94:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	8adb      	ldrh	r3, [r3, #22]
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	8a1b      	ldrh	r3, [r3, #16]
 8014ca0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ca4:	4830      	ldr	r0, [pc, #192]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014ca6:	f7ff fd27 	bl	80146f8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8014caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014cb0:	d11f      	bne.n	8014cf2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014cb2:	4b2d      	ldr	r3, [pc, #180]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014cb4:	2201      	movs	r2, #1
 8014cb6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014cb8:	4a2b      	ldr	r2, [pc, #172]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cbc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8014cbe:	4b2a      	ldr	r3, [pc, #168]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014cc0:	2209      	movs	r2, #9
 8014cc2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	8adb      	ldrh	r3, [r3, #22]
 8014cc8:	461a      	mov	r2, r3
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	8a1b      	ldrh	r3, [r3, #16]
 8014cce:	1ad3      	subs	r3, r2, r3
 8014cd0:	461a      	mov	r2, r3
 8014cd2:	4b25      	ldr	r3, [pc, #148]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014cd4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cda:	2b10      	cmp	r3, #16
 8014cdc:	d101      	bne.n	8014ce2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 8014cde:	2302      	movs	r3, #2
 8014ce0:	e000      	b.n	8014ce4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	4a20      	ldr	r2, [pc, #128]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014ce6:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014ce8:	2100      	movs	r1, #0
 8014cea:	481f      	ldr	r0, [pc, #124]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014cec:	f7ee feea 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
 8014cf0:	e005      	b.n	8014cfe <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014cf2:	4a1d      	ldr	r2, [pc, #116]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014cf4:	6a3b      	ldr	r3, [r7, #32]
 8014cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8014cf8:	4b1b      	ldr	r3, [pc, #108]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014cfe:	2101      	movs	r1, #1
 8014d00:	4819      	ldr	r0, [pc, #100]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014d02:	f7ee fedf 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8014d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014d0c:	d115      	bne.n	8014d3a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d12:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d18:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014d1a:	683b      	ldr	r3, [r7, #0]
 8014d1c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d1e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d24:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d2a:	9301      	str	r3, [sp, #4]
 8014d2c:	9200      	str	r2, [sp, #0]
 8014d2e:	4623      	mov	r3, r4
 8014d30:	4602      	mov	r2, r0
 8014d32:	480d      	ldr	r0, [pc, #52]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014d34:	f7ee fce9 	bl	800370a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8014d38:	e00d      	b.n	8014d56 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014d3a:	683b      	ldr	r3, [r7, #0]
 8014d3c:	68db      	ldr	r3, [r3, #12]
 8014d3e:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014d44:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014d4a:	9300      	str	r3, [sp, #0]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014d50:	4805      	ldr	r0, [pc, #20]	; (8014d68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014d52:	f7ee fca7 	bl	80036a4 <HAL_DMA2D_Start_IT>
}
 8014d56:	bf00      	nop
 8014d58:	3734      	adds	r7, #52	; 0x34
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd90      	pop	{r4, r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	08421085 	.word	0x08421085
 8014d64:	04104105 	.word	0x04104105
 8014d68:	2000baa0 	.word	0x2000baa0

08014d6c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	4a05      	ldr	r2, [pc, #20]	; (8014d8c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	601a      	str	r2, [r3, #0]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7ff fc27 	bl	80145d0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	4618      	mov	r0, r3
 8014d86:	3708      	adds	r7, #8
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}
 8014d8c:	08029aa4 	.word	0x08029aa4

08014d90 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f7ff ffe7 	bl	8014d6c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014d9e:	2114      	movs	r1, #20
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f010 fe41 	bl	8025a28 <_ZdlPvj>
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	4618      	mov	r0, r3
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
        texts = t;
 8014db8:	4a04      	ldr	r2, [pc, #16]	; (8014dcc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6013      	str	r3, [r2, #0]
    }
 8014dbe:	bf00      	nop
 8014dc0:	370c      	adds	r7, #12
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	2000b464 	.word	0x2000b464

08014dd0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014dd0:	b480      	push	{r7}
 8014dd2:	b085      	sub	sp, #20
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	60f8      	str	r0, [r7, #12]
 8014dd8:	60b9      	str	r1, [r7, #8]
 8014dda:	607a      	str	r2, [r7, #4]
 8014ddc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014dde:	4a0b      	ldr	r2, [pc, #44]	; (8014e0c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	601a      	str	r2, [r3, #0]
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	68ba      	ldr	r2, [r7, #8]
 8014de8:	605a      	str	r2, [r3, #4]
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	609a      	str	r2, [r3, #8]
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	683a      	ldr	r2, [r7, #0]
 8014df4:	60da      	str	r2, [r3, #12]
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	69ba      	ldr	r2, [r7, #24]
 8014dfa:	611a      	str	r2, [r3, #16]
    {
    }
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3714      	adds	r7, #20
 8014e02:	46bd      	mov	sp, r7
 8014e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop
 8014e0c:	08028fec 	.word	0x08028fec

08014e10 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014e10:	b480      	push	{r7}
 8014e12:	b083      	sub	sp, #12
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
    {
 8014e18:	4a04      	ldr	r2, [pc, #16]	; (8014e2c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	601a      	str	r2, [r3, #0]
    }
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	4618      	mov	r0, r3
 8014e22:	370c      	adds	r7, #12
 8014e24:	46bd      	mov	sp, r7
 8014e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2a:	4770      	bx	lr
 8014e2c:	08028fec 	.word	0x08028fec

08014e30 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
    }
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7ff ffe9 	bl	8014e10 <_ZN8touchgfx7MVPHeapD1Ev>
 8014e3e:	2114      	movs	r1, #20
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f010 fdf1 	bl	8025a28 <_ZdlPvj>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014e50:	b480      	push	{r7}
 8014e52:	b083      	sub	sp, #12
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
    {
 8014e58:	4a04      	ldr	r2, [pc, #16]	; (8014e6c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	601a      	str	r2, [r3, #0]
    }
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	4618      	mov	r0, r3
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr
 8014e6c:	0802a560 	.word	0x0802a560

08014e70 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b082      	sub	sp, #8
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
    }
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f7ff ffe9 	bl	8014e50 <_ZN8touchgfx3LCDD1Ev>
 8014e7e:	2108      	movs	r1, #8
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f010 fdd1 	bl	8025a28 <_ZdlPvj>
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3708      	adds	r7, #8
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014e90:	b480      	push	{r7}
 8014e92:	b083      	sub	sp, #12
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	801a      	strh	r2, [r3, #0]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	805a      	strh	r2, [r3, #2]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	809a      	strh	r2, [r3, #4]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2200      	movs	r2, #0
 8014eae:	80da      	strh	r2, [r3, #6]
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	811a      	strh	r2, [r3, #8]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2200      	movs	r2, #0
 8014eba:	815a      	strh	r2, [r3, #10]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	819a      	strh	r2, [r3, #12]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	739a      	strb	r2, [r3, #14]
        {
        }
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	4618      	mov	r0, r3
 8014ecc:	370c      	adds	r7, #12
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr

08014ed6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8014ed6:	b580      	push	{r7, lr}
 8014ed8:	b082      	sub	sp, #8
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7ff ffd5 	bl	8014e90 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	611a      	str	r2, [r3, #16]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	829a      	strh	r2, [r3, #20]
    {
    }
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	3708      	adds	r7, #8
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}

08014efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	607a      	str	r2, [r7, #4]
 8014f08:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 8014f0a:	4a44      	ldr	r2, [pc, #272]	; (801501c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	601a      	str	r2, [r3, #0]
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	68ba      	ldr	r2, [r7, #8]
 8014f14:	605a      	str	r2, [r3, #4]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	687a      	ldr	r2, [r7, #4]
 8014f1a:	609a      	str	r2, [r3, #8]
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	683a      	ldr	r2, [r7, #0]
 8014f20:	60da      	str	r2, [r3, #12]
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2200      	movs	r2, #0
 8014f26:	611a      	str	r2, [r3, #16]
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	615a      	str	r2, [r3, #20]
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	2200      	movs	r2, #0
 8014f32:	619a      	str	r2, [r3, #24]
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	331c      	adds	r3, #28
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f7ff ffcc 	bl	8014ed6 <_ZN8touchgfx8GesturesC1Ev>
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2200      	movs	r2, #0
 8014f42:	639a      	str	r2, [r3, #56]	; 0x38
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2200      	movs	r2, #0
 8014f48:	63da      	str	r2, [r3, #60]	; 0x3c
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	641a      	str	r2, [r3, #64]	; 0x40
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2200      	movs	r2, #0
 8014f54:	645a      	str	r2, [r3, #68]	; 0x44
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2201      	movs	r2, #1
 8014f62:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	2200      	movs	r2, #0
 8014f72:	64da      	str	r2, [r3, #76]	; 0x4c
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	3350      	adds	r3, #80	; 0x50
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f7f7 f9b3 	bl	800c2e4 <_ZN8touchgfx4RectC1Ev>
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	2201      	movs	r2, #1
 8014f82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	2200      	movs	r2, #0
 8014f92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2201      	movs	r2, #1
 8014f9a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	671a      	str	r2, [r3, #112]	; 0x70
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	2200      	movs	r2, #0
 8014fd0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014fd4:	4a12      	ldr	r2, [pc, #72]	; (8015020 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014fda:	4a12      	ldr	r2, [pc, #72]	; (8015024 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014fdc:	8b3b      	ldrh	r3, [r7, #24]
 8014fde:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014fe0:	4a11      	ldr	r2, [pc, #68]	; (8015028 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014fe2:	8bbb      	ldrh	r3, [r7, #28]
 8014fe4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014fe6:	4b11      	ldr	r3, [pc, #68]	; (801502c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8014fe8:	2200      	movs	r2, #0
 8014fea:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014fec:	4b0d      	ldr	r3, [pc, #52]	; (8015024 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014fee:	881a      	ldrh	r2, [r3, #0]
 8014ff0:	4b0f      	ldr	r3, [pc, #60]	; (8015030 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014ff2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014ff4:	4b0c      	ldr	r3, [pc, #48]	; (8015028 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014ff6:	881a      	ldrh	r2, [r3, #0]
 8014ff8:	4b0e      	ldr	r3, [pc, #56]	; (8015034 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8014ffa:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014ffc:	8b3a      	ldrh	r2, [r7, #24]
 8014ffe:	8bbb      	ldrh	r3, [r7, #28]
 8015000:	429a      	cmp	r2, r3
 8015002:	d301      	bcc.n	8015008 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8015004:	2200      	movs	r2, #0
 8015006:	e000      	b.n	801500a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8015008:	2201      	movs	r2, #1
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	4618      	mov	r0, r3
 8015014:	3710      	adds	r7, #16
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}
 801501a:	bf00      	nop
 801501c:	08029610 	.word	0x08029610
 8015020:	2000b3c8 	.word	0x2000b3c8
 8015024:	2000b3bc 	.word	0x2000b3bc
 8015028:	2000b3be 	.word	0x2000b3be
 801502c:	2000b3c0 	.word	0x2000b3c0
 8015030:	2000b3c2 	.word	0x2000b3c2
 8015034:	2000b3c4 	.word	0x2000b3c4

08015038 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8015038:	b580      	push	{r7, lr}
 801503a:	b082      	sub	sp, #8
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	4618      	mov	r0, r3
 8015046:	f7f7 fde1 	bl	800cc0c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 801504a:	bf00      	nop
 801504c:	3708      	adds	r7, #8
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
	...

08015054 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015054:	b580      	push	{r7, lr}
 8015056:	b086      	sub	sp, #24
 8015058:	af02      	add	r7, sp, #8
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	607a      	str	r2, [r7, #4]
 8015060:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015062:	68f8      	ldr	r0, [r7, #12]
 8015064:	69bb      	ldr	r3, [r7, #24]
 8015066:	9300      	str	r3, [sp, #0]
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	687a      	ldr	r2, [r7, #4]
 801506c:	68b9      	ldr	r1, [r7, #8]
 801506e:	f7ff feaf 	bl	8014dd0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015072:	4a04      	ldr	r2, [pc, #16]	; (8015084 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	601a      	str	r2, [r3, #0]
    {

    }
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	4618      	mov	r0, r3
 801507c:	3710      	adds	r7, #16
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}
 8015082:	bf00      	nop
 8015084:	08028fd8 	.word	0x08028fd8

08015088 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8015088:	b580      	push	{r7, lr}
 801508a:	af00      	add	r7, sp, #0
 801508c:	4801      	ldr	r0, [pc, #4]	; (8015094 <__tcf_0+0xc>)
 801508e:	f000 f951 	bl	8015334 <_ZN12FrontendHeapD1Ev>
 8015092:	bd80      	pop	{r7, pc}
 8015094:	20008680 	.word	0x20008680

08015098 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8015098:	b580      	push	{r7, lr}
 801509a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801509c:	4b08      	ldr	r3, [pc, #32]	; (80150c0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	f003 0301 	and.w	r3, r3, #1
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d108      	bne.n	80150ba <_ZN12FrontendHeap11getInstanceEv+0x22>
 80150a8:	4806      	ldr	r0, [pc, #24]	; (80150c4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80150aa:	f000 f867 	bl	801517c <_ZN12FrontendHeapC1Ev>
 80150ae:	4b04      	ldr	r3, [pc, #16]	; (80150c0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80150b0:	2201      	movs	r2, #1
 80150b2:	601a      	str	r2, [r3, #0]
 80150b4:	4804      	ldr	r0, [pc, #16]	; (80150c8 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80150b6:	f010 fd01 	bl	8025abc <atexit>
        return instance;
 80150ba:	4b02      	ldr	r3, [pc, #8]	; (80150c4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80150bc:	4618      	mov	r0, r3
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	2000a6bc 	.word	0x2000a6bc
 80150c4:	20008680 	.word	0x20008680
 80150c8:	08015089 	.word	0x08015089

080150cc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	4a05      	ldr	r2, [pc, #20]	; (80150ec <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	601a      	str	r2, [r3, #0]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4618      	mov	r0, r3
 80150de:	f7ff fe97 	bl	8014e10 <_ZN8touchgfx7MVPHeapD1Ev>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	4618      	mov	r0, r3
 80150e6:	3708      	adds	r7, #8
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	08028fd8 	.word	0x08028fd8

080150f0 <_ZN16FrontendHeapBaseD0Ev>:
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f7ff ffe7 	bl	80150cc <_ZN16FrontendHeapBaseD1Ev>
 80150fe:	2114      	movs	r1, #20
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f010 fc91 	bl	8025a28 <_ZdlPvj>
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	4618      	mov	r0, r3
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	4618      	mov	r0, r3
 801511c:	f000 fd72 	bl	8015c04 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015120:	4a03      	ldr	r2, [pc, #12]	; (8015130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	601a      	str	r2, [r3, #0]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	4618      	mov	r0, r3
 801512a:	3708      	adds	r7, #8
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}
 8015130:	08028fa4 	.word	0x08028fa4

08015134 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	4618      	mov	r0, r3
 8015140:	f000 fd60 	bl	8015c04 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015144:	4a03      	ldr	r2, [pc, #12]	; (8015154 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	601a      	str	r2, [r3, #0]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	4618      	mov	r0, r3
 801514e:	3708      	adds	r7, #8
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	08028f70 	.word	0x08028f70

08015158 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8015158:	b580      	push	{r7, lr}
 801515a:	b082      	sub	sp, #8
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	4618      	mov	r0, r3
 8015164:	f000 fd4e 	bl	8015c04 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015168:	4a03      	ldr	r2, [pc, #12]	; (8015178 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	601a      	str	r2, [r3, #0]
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	4618      	mov	r0, r3
 8015172:	3708      	adds	r7, #8
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	08028f3c 	.word	0x08028f3c

0801517c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801517c:	b5b0      	push	{r4, r5, r7, lr}
 801517e:	b084      	sub	sp, #16
 8015180:	af02      	add	r7, sp, #8
 8015182:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f103 0414 	add.w	r4, r3, #20
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f641 6284 	movw	r2, #7812	; 0x1e84
 8015198:	441a      	add	r2, r3
 801519a:	6879      	ldr	r1, [r7, #4]
 801519c:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 80151a0:	440b      	add	r3, r1
 80151a2:	9300      	str	r3, [sp, #0]
 80151a4:	4613      	mov	r3, r2
 80151a6:	462a      	mov	r2, r5
 80151a8:	4621      	mov	r1, r4
 80151aa:	f7ff ff53 	bl	8015054 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80151ae:	4a19      	ldr	r2, [pc, #100]	; (8015214 <_ZN12FrontendHeapC1Ev+0x98>)
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	601a      	str	r2, [r3, #0]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	3314      	adds	r3, #20
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7ff ffa9 	bl	8015110 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	332c      	adds	r3, #44	; 0x2c
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7ff ffb6 	bl	8015134 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	f641 6384 	movw	r3, #7812	; 0x1e84
 80151ce:	4413      	add	r3, r2
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7ff ffc1 	bl	8015158 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 80151dc:	4618      	mov	r0, r3
 80151de:	f7fd ff5f 	bl	80130a0 <_ZN5ModelC1Ev>
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 80151e8:	4413      	add	r3, r2
 80151ea:	687a      	ldr	r2, [r7, #4]
 80151ec:	f502 51f7 	add.w	r1, r2, #7904	; 0x1ee0
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7fd fd44 	bl	8012c80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	687a      	ldr	r2, [r7, #4]
 80151fc:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8015200:	4413      	add	r3, r2
 8015202:	4619      	mov	r1, r3
 8015204:	f7ff ff18 	bl	8015038 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	4618      	mov	r0, r3
 801520c:	3708      	adds	r7, #8
 801520e:	46bd      	mov	sp, r7
 8015210:	bdb0      	pop	{r4, r5, r7, pc}
 8015212:	bf00      	nop
 8015214:	08028f28 	.word	0x08028f28

08015218 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8015218:	b580      	push	{r7, lr}
 801521a:	b086      	sub	sp, #24
 801521c:	af02      	add	r7, sp, #8
 801521e:	60f8      	str	r0, [r7, #12]
 8015220:	60b9      	str	r1, [r7, #8]
 8015222:	607a      	str	r2, [r7, #4]
 8015224:	603b      	str	r3, [r7, #0]
 8015226:	68f8      	ldr	r0, [r7, #12]
 8015228:	8bbb      	ldrh	r3, [r7, #28]
 801522a:	9301      	str	r3, [sp, #4]
 801522c:	8b3b      	ldrh	r3, [r7, #24]
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	687a      	ldr	r2, [r7, #4]
 8015234:	68b9      	ldr	r1, [r7, #8]
 8015236:	f7ff fe61 	bl	8014efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801523a:	4a04      	ldr	r2, [pc, #16]	; (801524c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	601a      	str	r2, [r3, #0]
    }
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	4618      	mov	r0, r3
 8015244:	3710      	adds	r7, #16
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	08028ffc 	.word	0x08028ffc

08015250 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015250:	b580      	push	{r7, lr}
 8015252:	b086      	sub	sp, #24
 8015254:	af02      	add	r7, sp, #8
 8015256:	60f8      	str	r0, [r7, #12]
 8015258:	60b9      	str	r1, [r7, #8]
 801525a:	607a      	str	r2, [r7, #4]
 801525c:	603b      	str	r3, [r7, #0]
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	8bbb      	ldrh	r3, [r7, #28]
 8015262:	9301      	str	r3, [sp, #4]
 8015264:	8b3b      	ldrh	r3, [r7, #24]
 8015266:	9300      	str	r3, [sp, #0]
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	687a      	ldr	r2, [r7, #4]
 801526c:	68b9      	ldr	r1, [r7, #8]
 801526e:	f7ff ffd3 	bl	8015218 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015272:	4a04      	ldr	r2, [pc, #16]	; (8015284 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	601a      	str	r2, [r3, #0]
    }
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	4618      	mov	r0, r3
 801527c:	3710      	adds	r7, #16
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	08028ce8 	.word	0x08028ce8

08015288 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015288:	b480      	push	{r7}
 801528a:	b083      	sub	sp, #12
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	4a04      	ldr	r2, [pc, #16]	; (80152a4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	601a      	str	r2, [r3, #0]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	4618      	mov	r0, r3
 801529a:	370c      	adds	r7, #12
 801529c:	46bd      	mov	sp, r7
 801529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a2:	4770      	bx	lr
 80152a4:	08028cd0 	.word	0x08028cd0

080152a8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7ff ffe8 	bl	8015288 <_ZN8touchgfx15TouchControllerC1Ev>
 80152b8:	4a03      	ldr	r2, [pc, #12]	; (80152c8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	601a      	str	r2, [r3, #0]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	4618      	mov	r0, r3
 80152c2:	3708      	adds	r7, #8
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	08028cb8 	.word	0x08028cb8

080152cc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80152cc:	b590      	push	{r4, r7, lr}
 80152ce:	b085      	sub	sp, #20
 80152d0:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80152d2:	f7fd fa9d 	bl	8012810 <_ZN14BitmapDatabase11getInstanceEv>
 80152d6:	4604      	mov	r4, r0
 80152d8:	f7fd faa4 	bl	8012824 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80152dc:	4603      	mov	r3, r0
 80152de:	4619      	mov	r1, r3
 80152e0:	2300      	movs	r3, #0
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	2300      	movs	r3, #0
 80152e6:	2200      	movs	r2, #0
 80152e8:	4620      	mov	r0, r4
 80152ea:	f006 fd67 	bl	801bdbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80152ee:	4809      	ldr	r0, [pc, #36]	; (8015314 <touchgfx_init+0x48>)
 80152f0:	f7ff fd5e 	bl	8014db0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80152f4:	2000      	movs	r0, #0
 80152f6:	f7fd fbcd 	bl	8012a94 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80152fa:	4807      	ldr	r0, [pc, #28]	; (8015318 <touchgfx_init+0x4c>)
 80152fc:	f006 fca8 	bl	801bc50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8015300:	f7ff feca 	bl	8015098 <_ZN12FrontendHeap11getInstanceEv>
 8015304:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8015306:	4805      	ldr	r0, [pc, #20]	; (801531c <touchgfx_init+0x50>)
 8015308:	f7fe ffd4 	bl	80142b4 <_ZN11TouchGFXHAL10initializeEv>
}
 801530c:	bf00      	nop
 801530e:	370c      	adds	r7, #12
 8015310:	46bd      	mov	sp, r7
 8015312:	bd90      	pop	{r4, r7, pc}
 8015314:	2000b33c 	.word	0x2000b33c
 8015318:	2000003c 	.word	0x2000003c
 801531c:	2000b340 	.word	0x2000b340

08015320 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8015320:	b580      	push	{r7, lr}
 8015322:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8015324:	4802      	ldr	r0, [pc, #8]	; (8015330 <touchgfx_taskEntry+0x10>)
 8015326:	f000 fe80 	bl	801602a <_ZN8touchgfx3HAL9taskEntryEv>
}
 801532a:	bf00      	nop
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	2000b340 	.word	0x2000b340

08015334 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015334:	b580      	push	{r7, lr}
 8015336:	b082      	sub	sp, #8
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	4a11      	ldr	r2, [pc, #68]	; (8015384 <_ZN12FrontendHeapD1Ev+0x50>)
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	601a      	str	r2, [r3, #0]
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8015348:	4413      	add	r3, r2
 801534a:	4618      	mov	r0, r3
 801534c:	f7fd fc62 	bl	8012c14 <_ZN19FrontendApplicationD1Ev>
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	f641 6384 	movw	r3, #7812	; 0x1e84
 8015356:	4413      	add	r3, r2
 8015358:	4618      	mov	r0, r3
 801535a:	f000 f827 	bl	80153ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	332c      	adds	r3, #44	; 0x2c
 8015362:	4618      	mov	r0, r3
 8015364:	f000 f844 	bl	80153f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	3314      	adds	r3, #20
 801536c:	4618      	mov	r0, r3
 801536e:	f000 f863 	bl	8015438 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	4618      	mov	r0, r3
 8015376:	f7ff fea9 	bl	80150cc <_ZN16FrontendHeapBaseD1Ev>
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	4618      	mov	r0, r3
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	08028f28 	.word	0x08028f28

08015388 <_ZN12FrontendHeapD0Ev>:
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6878      	ldr	r0, [r7, #4]
 8015392:	f7ff ffcf 	bl	8015334 <_ZN12FrontendHeapD1Ev>
 8015396:	f242 013c 	movw	r1, #8252	; 0x203c
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f010 fb44 	bl	8025a28 <_ZdlPvj>
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	4618      	mov	r0, r3
 80153a4:	3708      	adds	r7, #8
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
	...

080153ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b082      	sub	sp, #8
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	4a05      	ldr	r2, [pc, #20]	; (80153cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	601a      	str	r2, [r3, #0]
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	4618      	mov	r0, r3
 80153be:	f000 fc1f 	bl	8015c00 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	4618      	mov	r0, r3
 80153c6:	3708      	adds	r7, #8
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}
 80153cc:	08028f3c 	.word	0x08028f3c

080153d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b082      	sub	sp, #8
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f7ff ffe7 	bl	80153ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80153de:	215c      	movs	r1, #92	; 0x5c
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f010 fb21 	bl	8025a28 <_ZdlPvj>
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	4618      	mov	r0, r3
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	4a05      	ldr	r2, [pc, #20]	; (8015410 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	601a      	str	r2, [r3, #0]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	4618      	mov	r0, r3
 8015402:	f000 fbfd 	bl	8015c00 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	4618      	mov	r0, r3
 801540a:	3708      	adds	r7, #8
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}
 8015410:	08028f70 	.word	0x08028f70

08015414 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f7ff ffe7 	bl	80153f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015422:	f641 6158 	movw	r1, #7768	; 0x1e58
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f010 fafe 	bl	8025a28 <_ZdlPvj>
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	4618      	mov	r0, r3
 8015430:	3708      	adds	r7, #8
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}
	...

08015438 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	4a05      	ldr	r2, [pc, #20]	; (8015458 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	601a      	str	r2, [r3, #0]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	4618      	mov	r0, r3
 801544a:	f000 fbd9 	bl	8015c00 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	4618      	mov	r0, r3
 8015452:	3708      	adds	r7, #8
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	08028fa4 	.word	0x08028fa4

0801545c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7ff ffe7 	bl	8015438 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801546a:	2118      	movs	r1, #24
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f010 fadb 	bl	8025a28 <_ZdlPvj>
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	4618      	mov	r0, r3
 8015476:	3708      	adds	r7, #8
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	4a05      	ldr	r2, [pc, #20]	; (801549c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	601a      	str	r2, [r3, #0]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	4618      	mov	r0, r3
 801548e:	f7ff fcdf 	bl	8014e50 <_ZN8touchgfx3LCDD1Ev>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	4618      	mov	r0, r3
 8015496:	3708      	adds	r7, #8
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}
 801549c:	0802b634 	.word	0x0802b634

080154a0 <_ZN8touchgfx8LCD24bppD0Ev>:
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b082      	sub	sp, #8
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f7ff ffe7 	bl	801547c <_ZN8touchgfx8LCD24bppD1Ev>
 80154ae:	2158      	movs	r1, #88	; 0x58
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f010 fab9 	bl	8025a28 <_ZdlPvj>
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	4618      	mov	r0, r3
 80154ba:	3708      	adds	r7, #8
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}

080154c0 <_Z41__static_initialization_and_destruction_0ii>:
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af02      	add	r7, sp, #8
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2b01      	cmp	r3, #1
 80154ce:	d119      	bne.n	8015504 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154d6:	4293      	cmp	r3, r2
 80154d8:	d114      	bne.n	8015504 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80154da:	4818      	ldr	r0, [pc, #96]	; (801553c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80154dc:	f7ff fee4 	bl	80152a8 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80154e0:	4817      	ldr	r0, [pc, #92]	; (8015540 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80154e2:	f7ff f963 	bl	80147ac <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80154e6:	4817      	ldr	r0, [pc, #92]	; (8015544 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80154e8:	f008 fe56 	bl	801e198 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80154ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80154f0:	9301      	str	r3, [sp, #4]
 80154f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	4b10      	ldr	r3, [pc, #64]	; (801553c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80154fa:	4a12      	ldr	r2, [pc, #72]	; (8015544 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80154fc:	4910      	ldr	r1, [pc, #64]	; (8015540 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80154fe:	4812      	ldr	r0, [pc, #72]	; (8015548 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015500:	f7ff fea6 	bl	8015250 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d113      	bne.n	8015532 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015510:	4293      	cmp	r3, r2
 8015512:	d10e      	bne.n	8015532 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015514:	480c      	ldr	r0, [pc, #48]	; (8015548 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015516:	f7fe ff45 	bl	80143a4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801551a:	480c      	ldr	r0, [pc, #48]	; (801554c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801551c:	f7f6 fb4c 	bl	800bbb8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8015520:	4808      	ldr	r0, [pc, #32]	; (8015544 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015522:	f7ff ffab 	bl	801547c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8015526:	4806      	ldr	r0, [pc, #24]	; (8015540 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015528:	f7ff f96a 	bl	8014800 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801552c:	4803      	ldr	r0, [pc, #12]	; (801553c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801552e:	f7fe fc9d 	bl	8013e6c <_ZN20STM32TouchControllerD1Ev>
}
 8015532:	bf00      	nop
 8015534:	3708      	adds	r7, #8
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop
 801553c:	2000a6c0 	.word	0x2000a6c0
 8015540:	2000a6c4 	.word	0x2000a6c4
 8015544:	2000b2e4 	.word	0x2000b2e4
 8015548:	2000b340 	.word	0x2000b340
 801554c:	2000003c 	.word	0x2000003c

08015550 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 8015550:	b480      	push	{r7}
 8015552:	b083      	sub	sp, #12
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015558:	2301      	movs	r3, #1
    }
 801555a:	4618      	mov	r0, r3
 801555c:	370c      	adds	r7, #12
 801555e:	46bd      	mov	sp, r7
 8015560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015564:	4770      	bx	lr

08015566 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 8015566:	b480      	push	{r7}
 8015568:	b083      	sub	sp, #12
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801556e:	2354      	movs	r3, #84	; 0x54
    }
 8015570:	4618      	mov	r0, r3
 8015572:	370c      	adds	r7, #12
 8015574:	46bd      	mov	sp, r7
 8015576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557a:	4770      	bx	lr

0801557c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 801557c:	b480      	push	{r7}
 801557e:	b083      	sub	sp, #12
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	460b      	mov	r3, r1
 8015586:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015588:	887b      	ldrh	r3, [r7, #2]
 801558a:	2254      	movs	r2, #84	; 0x54
 801558c:	fb02 f303 	mul.w	r3, r2, r3
 8015590:	3308      	adds	r3, #8
 8015592:	687a      	ldr	r2, [r7, #4]
 8015594:	4413      	add	r3, r2
    }
 8015596:	4618      	mov	r0, r3
 8015598:	370c      	adds	r7, #12
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr

080155a2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 80155a2:	b480      	push	{r7}
 80155a4:	b083      	sub	sp, #12
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
 80155aa:	460b      	mov	r3, r1
 80155ac:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80155ae:	887b      	ldrh	r3, [r7, #2]
 80155b0:	2254      	movs	r2, #84	; 0x54
 80155b2:	fb02 f303 	mul.w	r3, r2, r3
 80155b6:	3308      	adds	r3, #8
 80155b8:	687a      	ldr	r2, [r7, #4]
 80155ba:	4413      	add	r3, r2
    }
 80155bc:	4618      	mov	r0, r3
 80155be:	370c      	adds	r7, #12
 80155c0:	46bd      	mov	sp, r7
 80155c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c6:	4770      	bx	lr

080155c8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80155c8:	b480      	push	{r7}
 80155ca:	b083      	sub	sp, #12
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80155d0:	2301      	movs	r3, #1
    }
 80155d2:	4618      	mov	r0, r3
 80155d4:	370c      	adds	r7, #12
 80155d6:	46bd      	mov	sp, r7
 80155d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155dc:	4770      	bx	lr

080155de <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80155de:	b480      	push	{r7}
 80155e0:	b083      	sub	sp, #12
 80155e2:	af00      	add	r7, sp, #0
 80155e4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80155e6:	f641 6350 	movw	r3, #7760	; 0x1e50
    }
 80155ea:	4618      	mov	r0, r3
 80155ec:	370c      	adds	r7, #12
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr

080155f6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80155f6:	b480      	push	{r7}
 80155f8:	b083      	sub	sp, #12
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
 80155fe:	460b      	mov	r3, r1
 8015600:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015602:	887b      	ldrh	r3, [r7, #2]
 8015604:	f641 6250 	movw	r2, #7760	; 0x1e50
 8015608:	fb02 f303 	mul.w	r3, r2, r3
 801560c:	3308      	adds	r3, #8
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	4413      	add	r3, r2
    }
 8015612:	4618      	mov	r0, r3
 8015614:	370c      	adds	r7, #12
 8015616:	46bd      	mov	sp, r7
 8015618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561c:	4770      	bx	lr

0801561e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801561e:	b480      	push	{r7}
 8015620:	b083      	sub	sp, #12
 8015622:	af00      	add	r7, sp, #0
 8015624:	6078      	str	r0, [r7, #4]
 8015626:	460b      	mov	r3, r1
 8015628:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801562a:	887b      	ldrh	r3, [r7, #2]
 801562c:	f641 6250 	movw	r2, #7760	; 0x1e50
 8015630:	fb02 f303 	mul.w	r3, r2, r3
 8015634:	3308      	adds	r3, #8
 8015636:	687a      	ldr	r2, [r7, #4]
 8015638:	4413      	add	r3, r2
    }
 801563a:	4618      	mov	r0, r3
 801563c:	370c      	adds	r7, #12
 801563e:	46bd      	mov	sp, r7
 8015640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015644:	4770      	bx	lr

08015646 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015646:	b480      	push	{r7}
 8015648:	b083      	sub	sp, #12
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801564e:	2301      	movs	r3, #1
    }
 8015650:	4618      	mov	r0, r3
 8015652:	370c      	adds	r7, #12
 8015654:	46bd      	mov	sp, r7
 8015656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565a:	4770      	bx	lr

0801565c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801565c:	b480      	push	{r7}
 801565e:	b083      	sub	sp, #12
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015664:	2310      	movs	r3, #16
    }
 8015666:	4618      	mov	r0, r3
 8015668:	370c      	adds	r7, #12
 801566a:	46bd      	mov	sp, r7
 801566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015670:	4770      	bx	lr

08015672 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015672:	b480      	push	{r7}
 8015674:	b083      	sub	sp, #12
 8015676:	af00      	add	r7, sp, #0
 8015678:	6078      	str	r0, [r7, #4]
 801567a:	460b      	mov	r3, r1
 801567c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801567e:	887b      	ldrh	r3, [r7, #2]
 8015680:	011b      	lsls	r3, r3, #4
 8015682:	3308      	adds	r3, #8
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	4413      	add	r3, r2
    }
 8015688:	4618      	mov	r0, r3
 801568a:	370c      	adds	r7, #12
 801568c:	46bd      	mov	sp, r7
 801568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015692:	4770      	bx	lr

08015694 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015694:	b480      	push	{r7}
 8015696:	b083      	sub	sp, #12
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	460b      	mov	r3, r1
 801569e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80156a0:	887b      	ldrh	r3, [r7, #2]
 80156a2:	011b      	lsls	r3, r3, #4
 80156a4:	3308      	adds	r3, #8
 80156a6:	687a      	ldr	r2, [r7, #4]
 80156a8:	4413      	add	r3, r2
    }
 80156aa:	4618      	mov	r0, r3
 80156ac:	370c      	adds	r7, #12
 80156ae:	46bd      	mov	sp, r7
 80156b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b4:	4770      	bx	lr

080156b6 <_GLOBAL__sub_I_touchgfx_init>:
 80156b6:	b580      	push	{r7, lr}
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80156be:	2001      	movs	r0, #1
 80156c0:	f7ff fefe 	bl	80154c0 <_Z41__static_initialization_and_destruction_0ii>
 80156c4:	bd80      	pop	{r7, pc}

080156c6 <_GLOBAL__sub_D_touchgfx_init>:
 80156c6:	b580      	push	{r7, lr}
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80156ce:	2000      	movs	r0, #0
 80156d0:	f7ff fef6 	bl	80154c0 <_Z41__static_initialization_and_destruction_0ii>
 80156d4:	bd80      	pop	{r7, pc}

080156d6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80156d6:	b580      	push	{r7, lr}
 80156d8:	b082      	sub	sp, #8
 80156da:	af00      	add	r7, sp, #0
 80156dc:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	3318      	adds	r3, #24
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	4798      	blx	r3
    }
 80156ea:	bf00      	nop
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80156f2:	b480      	push	{r7}
 80156f4:	b083      	sub	sp, #12
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
 80156fa:	460b      	mov	r3, r1
 80156fc:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	78fa      	ldrb	r2, [r7, #3]
 8015702:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8015706:	bf00      	nop
 8015708:	370c      	adds	r7, #12
 801570a:	46bd      	mov	sp, r7
 801570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015710:	4770      	bx	lr

08015712 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015712:	b480      	push	{r7}
 8015714:	b083      	sub	sp, #12
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8015720:	3301      	adds	r3, #1
 8015722:	b2da      	uxtb	r2, r3
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801572a:	bf00      	nop
 801572c:	370c      	adds	r7, #12
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr
	...

08015738 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
 8015740:	460b      	mov	r3, r1
 8015742:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8015744:	78fb      	ldrb	r3, [r7, #3]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d002      	beq.n	8015750 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801574a:	78fb      	ldrb	r3, [r7, #3]
 801574c:	2b02      	cmp	r3, #2
 801574e:	d105      	bne.n	801575c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	78fa      	ldrb	r2, [r7, #3]
 8015754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8015758:	2301      	movs	r3, #1
 801575a:	e027      	b.n	80157ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 801575c:	78fb      	ldrb	r3, [r7, #3]
 801575e:	2b01      	cmp	r3, #1
 8015760:	d123      	bne.n	80157aa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015766:	2b00      	cmp	r3, #0
 8015768:	d014      	beq.n	8015794 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	3380      	adds	r3, #128	; 0x80
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	4798      	blx	r3
 8015776:	4603      	mov	r3, r0
 8015778:	461a      	mov	r2, r3
 801577a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801577e:	429a      	cmp	r2, r3
 8015780:	d008      	beq.n	8015794 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015782:	4b0c      	ldr	r3, [pc, #48]	; (80157b4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	f083 0301 	eor.w	r3, r3, #1
 801578a:	b2db      	uxtb	r3, r3
 801578c:	2b00      	cmp	r3, #0
 801578e:	d001      	beq.n	8015794 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015790:	2301      	movs	r3, #1
 8015792:	e000      	b.n	8015796 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8015794:	2300      	movs	r3, #0
 8015796:	2b00      	cmp	r3, #0
 8015798:	d005      	beq.n	80157a6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	78fa      	ldrb	r2, [r7, #3]
 801579e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80157a2:	2301      	movs	r3, #1
 80157a4:	e002      	b.n	80157ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80157a6:	2300      	movs	r3, #0
 80157a8:	e000      	b.n	80157ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80157aa:	2300      	movs	r3, #0
    }
 80157ac:	4618      	mov	r0, r3
 80157ae:	3708      	adds	r7, #8
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	2000b3c6 	.word	0x2000b3c6

080157b8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80157b8:	b480      	push	{r7}
 80157ba:	b083      	sub	sp, #12
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	683a      	ldr	r2, [r7, #0]
 80157c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80157c8:	bf00      	nop
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <__NVIC_EnableIRQ>:
{
 80157d4:	b480      	push	{r7}
 80157d6:	b083      	sub	sp, #12
 80157d8:	af00      	add	r7, sp, #0
 80157da:	4603      	mov	r3, r0
 80157dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80157de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	db0d      	blt.n	8015802 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80157e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157ea:	b2db      	uxtb	r3, r3
 80157ec:	f003 021f 	and.w	r2, r3, #31
 80157f0:	4907      	ldr	r1, [pc, #28]	; (8015810 <__NVIC_EnableIRQ+0x3c>)
 80157f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157f6:	095b      	lsrs	r3, r3, #5
 80157f8:	2001      	movs	r0, #1
 80157fa:	fa00 f202 	lsl.w	r2, r0, r2
 80157fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015802:	bf00      	nop
 8015804:	370c      	adds	r7, #12
 8015806:	46bd      	mov	sp, r7
 8015808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580c:	4770      	bx	lr
 801580e:	bf00      	nop
 8015810:	e000e100 	.word	0xe000e100

08015814 <__NVIC_DisableIRQ>:
{
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	4603      	mov	r3, r0
 801581c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801581e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015822:	2b00      	cmp	r3, #0
 8015824:	db12      	blt.n	801584c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801582a:	b2db      	uxtb	r3, r3
 801582c:	f003 021f 	and.w	r2, r3, #31
 8015830:	4909      	ldr	r1, [pc, #36]	; (8015858 <__NVIC_DisableIRQ+0x44>)
 8015832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015836:	095b      	lsrs	r3, r3, #5
 8015838:	2001      	movs	r0, #1
 801583a:	fa00 f202 	lsl.w	r2, r0, r2
 801583e:	3320      	adds	r3, #32
 8015840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015848:	f3bf 8f6f 	isb	sy
}
 801584c:	bf00      	nop
 801584e:	370c      	adds	r7, #12
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr
 8015858:	e000e100 	.word	0xe000e100

0801585c <__NVIC_SetPriority>:
{
 801585c:	b480      	push	{r7}
 801585e:	b083      	sub	sp, #12
 8015860:	af00      	add	r7, sp, #0
 8015862:	4603      	mov	r3, r0
 8015864:	6039      	str	r1, [r7, #0]
 8015866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801586c:	2b00      	cmp	r3, #0
 801586e:	db0c      	blt.n	801588a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	b2db      	uxtb	r3, r3
 8015874:	4a0e      	ldr	r2, [pc, #56]	; (80158b0 <__NVIC_SetPriority+0x54>)
 8015876:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801587a:	4608      	mov	r0, r1
 801587c:	011b      	lsls	r3, r3, #4
 801587e:	b2d9      	uxtb	r1, r3
 8015880:	1813      	adds	r3, r2, r0
 8015882:	460a      	mov	r2, r1
 8015884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015888:	e00c      	b.n	80158a4 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	b2da      	uxtb	r2, r3
 801588e:	4909      	ldr	r1, [pc, #36]	; (80158b4 <__NVIC_SetPriority+0x58>)
 8015890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015894:	b2db      	uxtb	r3, r3
 8015896:	f003 030f 	and.w	r3, r3, #15
 801589a:	3b04      	subs	r3, #4
 801589c:	0112      	lsls	r2, r2, #4
 801589e:	b2d2      	uxtb	r2, r2
 80158a0:	440b      	add	r3, r1
 80158a2:	761a      	strb	r2, [r3, #24]
}
 80158a4:	bf00      	nop
 80158a6:	370c      	adds	r7, #12
 80158a8:	46bd      	mov	sp, r7
 80158aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ae:	4770      	bx	lr
 80158b0:	e000e100 	.word	0xe000e100
 80158b4:	e000ed00 	.word	0xe000ed00

080158b8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80158b8:	b5b0      	push	{r4, r5, r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	4618      	mov	r0, r3
 80158c4:	f000 fe76 	bl	80165b4 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 80158c8:	687d      	ldr	r5, [r7, #4]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	334c      	adds	r3, #76	; 0x4c
 80158d0:	681c      	ldr	r4, [r3, #0]
 80158d2:	f003 ff55 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 80158d6:	4603      	mov	r3, r0
 80158d8:	4619      	mov	r1, r3
 80158da:	4628      	mov	r0, r5
 80158dc:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	490d      	ldr	r1, [pc, #52]	; (8015918 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7ff ff68 	bl	80157b8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2101      	movs	r1, #1
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7ff ff23 	bl	8015738 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	3374      	adds	r3, #116	; 0x74
 80158fa:	681c      	ldr	r4, [r3, #0]
 80158fc:	2300      	movs	r3, #0
 80158fe:	2200      	movs	r2, #0
 8015900:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8015904:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	2101      	movs	r1, #1
 801590a:	4618      	mov	r0, r3
 801590c:	f7ff fef1 	bl	80156f2 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8015910:	bf00      	nop
 8015912:	3708      	adds	r7, #8
 8015914:	46bd      	mov	sp, r7
 8015916:	bdb0      	pop	{r4, r5, r7, pc}
 8015918:	080144f9 	.word	0x080144f9

0801591c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8015924:	2109      	movs	r1, #9
 8015926:	205a      	movs	r0, #90	; 0x5a
 8015928:	f7ff ff98 	bl	801585c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801592c:	2109      	movs	r1, #9
 801592e:	2058      	movs	r0, #88	; 0x58
 8015930:	f7ff ff94 	bl	801585c <__NVIC_SetPriority>
}
 8015934:	bf00      	nop
 8015936:	3708      	adds	r7, #8
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}

0801593c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015944:	205a      	movs	r0, #90	; 0x5a
 8015946:	f7ff ff45 	bl	80157d4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801594a:	2058      	movs	r0, #88	; 0x58
 801594c:	f7ff ff42 	bl	80157d4 <__NVIC_EnableIRQ>
}
 8015950:	bf00      	nop
 8015952:	3708      	adds	r7, #8
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}

08015958 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b082      	sub	sp, #8
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8015960:	205a      	movs	r0, #90	; 0x5a
 8015962:	f7ff ff57 	bl	8015814 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8015966:	2058      	movs	r0, #88	; 0x58
 8015968:	f7ff ff54 	bl	8015814 <__NVIC_DisableIRQ>
}
 801596c:	bf00      	nop
 801596e:	3708      	adds	r7, #8
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015974:	b480      	push	{r7}
 8015976:	b083      	sub	sp, #12
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801597c:	4b11      	ldr	r3, [pc, #68]	; (80159c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801597e:	68db      	ldr	r3, [r3, #12]
 8015980:	b29b      	uxth	r3, r3
 8015982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015986:	b29b      	uxth	r3, r3
 8015988:	3b01      	subs	r3, #1
 801598a:	b29a      	uxth	r2, r3
 801598c:	4b0e      	ldr	r3, [pc, #56]	; (80159c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801598e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015990:	4b0c      	ldr	r3, [pc, #48]	; (80159c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015992:	691b      	ldr	r3, [r3, #16]
 8015994:	b29b      	uxth	r3, r3
 8015996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801599a:	b29b      	uxth	r3, r3
 801599c:	3b01      	subs	r3, #1
 801599e:	b29a      	uxth	r2, r3
 80159a0:	4b0a      	ldr	r3, [pc, #40]	; (80159cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80159a2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80159a4:	4b08      	ldr	r3, [pc, #32]	; (80159c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80159a6:	881a      	ldrh	r2, [r3, #0]
 80159a8:	4b06      	ldr	r3, [pc, #24]	; (80159c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80159aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80159ac:	4b05      	ldr	r3, [pc, #20]	; (80159c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80159ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159b0:	4a04      	ldr	r2, [pc, #16]	; (80159c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80159b2:	f043 0301 	orr.w	r3, r3, #1
 80159b6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80159b8:	bf00      	nop
 80159ba:	370c      	adds	r7, #12
 80159bc:	46bd      	mov	sp, r7
 80159be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c2:	4770      	bx	lr
 80159c4:	40016800 	.word	0x40016800
 80159c8:	2000b3b8 	.word	0x2000b3b8
 80159cc:	2000b3ba 	.word	0x2000b3ba

080159d0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80159d0:	b480      	push	{r7}
 80159d2:	b083      	sub	sp, #12
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80159d8:	4b03      	ldr	r3, [pc, #12]	; (80159e8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80159da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80159dc:	4618      	mov	r0, r3
 80159de:	370c      	adds	r7, #12
 80159e0:	46bd      	mov	sp, r7
 80159e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e6:	4770      	bx	lr
 80159e8:	40016884 	.word	0x40016884

080159ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b083      	sub	sp, #12
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80159f6:	4a06      	ldr	r2, [pc, #24]	; (8015a10 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80159fc:	4b05      	ldr	r3, [pc, #20]	; (8015a14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80159fe:	2201      	movs	r2, #1
 8015a00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015a02:	bf00      	nop
 8015a04:	370c      	adds	r7, #12
 8015a06:	46bd      	mov	sp, r7
 8015a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0c:	4770      	bx	lr
 8015a0e:	bf00      	nop
 8015a10:	40016884 	.word	0x40016884
 8015a14:	40016800 	.word	0x40016800

08015a18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6839      	ldr	r1, [r7, #0]
 8015a26:	4618      	mov	r0, r3
 8015a28:	f000 fad5 	bl	8015fd6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8015a2c:	bf00      	nop
 8015a2e:	3708      	adds	r7, #8
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}

08015a34 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015a34:	b480      	push	{r7}
 8015a36:	b085      	sub	sp, #20
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015a3c:	4b0d      	ldr	r3, [pc, #52]	; (8015a74 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a40:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015a42:	4b0c      	ldr	r3, [pc, #48]	; (8015a74 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015a44:	68db      	ldr	r3, [r3, #12]
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	3301      	adds	r3, #1
 8015a50:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8015a52:	89fa      	ldrh	r2, [r7, #14]
 8015a54:	89bb      	ldrh	r3, [r7, #12]
 8015a56:	429a      	cmp	r2, r3
 8015a58:	d201      	bcs.n	8015a5e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	e003      	b.n	8015a66 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8015a5e:	89fa      	ldrh	r2, [r7, #14]
 8015a60:	89bb      	ldrh	r3, [r7, #12]
 8015a62:	1ad3      	subs	r3, r2, r3
 8015a64:	b29b      	uxth	r3, r3
    }
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3714      	adds	r7, #20
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a70:	4770      	bx	lr
 8015a72:	bf00      	nop
 8015a74:	40016800 	.word	0x40016800

08015a78 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8015a80:	4b1a      	ldr	r3, [pc, #104]	; (8015aec <HAL_LTDC_LineEventCallback+0x74>)
 8015a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a84:	4a1a      	ldr	r2, [pc, #104]	; (8015af0 <HAL_LTDC_LineEventCallback+0x78>)
 8015a86:	8812      	ldrh	r2, [r2, #0]
 8015a88:	4293      	cmp	r3, r2
 8015a8a:	bf0c      	ite	eq
 8015a8c:	2301      	moveq	r3, #1
 8015a8e:	2300      	movne	r3, #0
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d017      	beq.n	8015ac6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015a96:	4b17      	ldr	r3, [pc, #92]	; (8015af4 <HAL_LTDC_LineEventCallback+0x7c>)
 8015a98:	881b      	ldrh	r3, [r3, #0]
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f7ef fb83 	bl	80051a8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015aa2:	f7f6 fee3 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7ff fe32 	bl	8015712 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015aae:	f7fe fd03 	bl	80144b8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015ab2:	f7f6 fedb 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f001 f803 	bl	8016ac4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015abe:	2000      	movs	r0, #0
 8015ac0:	f7fe f9f6 	bl	8013eb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015ac4:	e00e      	b.n	8015ae4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015ac6:	4b0a      	ldr	r3, [pc, #40]	; (8015af0 <HAL_LTDC_LineEventCallback+0x78>)
 8015ac8:	881b      	ldrh	r3, [r3, #0]
 8015aca:	4619      	mov	r1, r3
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f7ef fb6b 	bl	80051a8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015ad2:	2000      	movs	r0, #0
 8015ad4:	f7fe f9f7 	bl	8013ec6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015ad8:	f7f6 fec8 	bl	800c86c <_ZN8touchgfx3HAL11getInstanceEv>
 8015adc:	4603      	mov	r3, r0
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7ff fdf9 	bl	80156d6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015ae4:	bf00      	nop
 8015ae6:	3708      	adds	r7, #8
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}
 8015aec:	40016800 	.word	0x40016800
 8015af0:	2000b3b8 	.word	0x2000b3b8
 8015af4:	2000b3ba 	.word	0x2000b3ba

08015af8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015af8:	8880      	ldrh	r0, [r0, #4]
 8015afa:	4770      	bx	lr

08015afc <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015afc:	2300      	movs	r3, #0
 8015afe:	8083      	strh	r3, [r0, #4]
 8015b00:	4770      	bx	lr
	...

08015b04 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b06:	6803      	ldr	r3, [r0, #0]
 8015b08:	460e      	mov	r6, r1
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	4605      	mov	r5, r0
 8015b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b10:	4798      	blx	r3
 8015b12:	4604      	mov	r4, r0
 8015b14:	682b      	ldr	r3, [r5, #0]
 8015b16:	4628      	mov	r0, r5
 8015b18:	1b34      	subs	r4, r6, r4
 8015b1a:	6a1b      	ldr	r3, [r3, #32]
 8015b1c:	b2a4      	uxth	r4, r4
 8015b1e:	4798      	blx	r3
 8015b20:	88ab      	ldrh	r3, [r5, #4]
 8015b22:	fbb4 f4f0 	udiv	r4, r4, r0
 8015b26:	42a3      	cmp	r3, r4
 8015b28:	d805      	bhi.n	8015b36 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8015b2a:	4b0e      	ldr	r3, [pc, #56]	; (8015b64 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015b2c:	2120      	movs	r1, #32
 8015b2e:	4a0e      	ldr	r2, [pc, #56]	; (8015b68 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015b30:	480e      	ldr	r0, [pc, #56]	; (8015b6c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8015b32:	f00f ffa5 	bl	8025a80 <__assert_func>
 8015b36:	682b      	ldr	r3, [r5, #0]
 8015b38:	2100      	movs	r1, #0
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b3e:	4798      	blx	r3
 8015b40:	682b      	ldr	r3, [r5, #0]
 8015b42:	4607      	mov	r7, r0
 8015b44:	4628      	mov	r0, r5
 8015b46:	6a1b      	ldr	r3, [r3, #32]
 8015b48:	4798      	blx	r3
 8015b4a:	1bf3      	subs	r3, r6, r7
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	fbb3 f2f0 	udiv	r2, r3, r0
 8015b52:	fb02 3010 	mls	r0, r2, r0, r3
 8015b56:	b118      	cbz	r0, 8015b60 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015b58:	4b05      	ldr	r3, [pc, #20]	; (8015b70 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8015b5a:	2121      	movs	r1, #33	; 0x21
 8015b5c:	4a02      	ldr	r2, [pc, #8]	; (8015b68 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015b5e:	e7e7      	b.n	8015b30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8015b60:	4620      	mov	r0, r4
 8015b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b64:	080290a8 	.word	0x080290a8
 8015b68:	08029216 	.word	0x08029216
 8015b6c:	080290bd 	.word	0x080290bd
 8015b70:	080290eb 	.word	0x080290eb

08015b74 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015b74:	b538      	push	{r3, r4, r5, lr}
 8015b76:	6803      	ldr	r3, [r0, #0]
 8015b78:	460d      	mov	r5, r1
 8015b7a:	4604      	mov	r4, r0
 8015b7c:	6a1b      	ldr	r3, [r3, #32]
 8015b7e:	4798      	blx	r3
 8015b80:	4285      	cmp	r5, r0
 8015b82:	d905      	bls.n	8015b90 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015b84:	4b0c      	ldr	r3, [pc, #48]	; (8015bb8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015b86:	2132      	movs	r1, #50	; 0x32
 8015b88:	4a0c      	ldr	r2, [pc, #48]	; (8015bbc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015b8a:	480d      	ldr	r0, [pc, #52]	; (8015bc0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015b8c:	f00f ff78 	bl	8025a80 <__assert_func>
 8015b90:	6823      	ldr	r3, [r4, #0]
 8015b92:	4620      	mov	r0, r4
 8015b94:	88a5      	ldrh	r5, [r4, #4]
 8015b96:	69db      	ldr	r3, [r3, #28]
 8015b98:	4798      	blx	r3
 8015b9a:	4285      	cmp	r5, r0
 8015b9c:	d303      	bcc.n	8015ba6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015b9e:	4b09      	ldr	r3, [pc, #36]	; (8015bc4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015ba0:	2133      	movs	r1, #51	; 0x33
 8015ba2:	4a06      	ldr	r2, [pc, #24]	; (8015bbc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015ba4:	e7f1      	b.n	8015b8a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015ba6:	6823      	ldr	r3, [r4, #0]
 8015ba8:	4620      	mov	r0, r4
 8015baa:	88a1      	ldrh	r1, [r4, #4]
 8015bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bae:	4798      	blx	r3
 8015bb0:	88a3      	ldrh	r3, [r4, #4]
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	80a3      	strh	r3, [r4, #4]
 8015bb6:	bd38      	pop	{r3, r4, r5, pc}
 8015bb8:	08029165 	.word	0x08029165
 8015bbc:	08029259 	.word	0x08029259
 8015bc0:	080290bd 	.word	0x080290bd
 8015bc4:	0802917c 	.word	0x0802917c

08015bc8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015bc8:	b570      	push	{r4, r5, r6, lr}
 8015bca:	6803      	ldr	r3, [r0, #0]
 8015bcc:	4616      	mov	r6, r2
 8015bce:	4604      	mov	r4, r0
 8015bd0:	460d      	mov	r5, r1
 8015bd2:	6a1b      	ldr	r3, [r3, #32]
 8015bd4:	4798      	blx	r3
 8015bd6:	4286      	cmp	r6, r0
 8015bd8:	d905      	bls.n	8015be6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015bda:	4b06      	ldr	r3, [pc, #24]	; (8015bf4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015bdc:	213c      	movs	r1, #60	; 0x3c
 8015bde:	4a06      	ldr	r2, [pc, #24]	; (8015bf8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015be0:	4806      	ldr	r0, [pc, #24]	; (8015bfc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8015be2:	f00f ff4d 	bl	8025a80 <__assert_func>
 8015be6:	6823      	ldr	r3, [r4, #0]
 8015be8:	4629      	mov	r1, r5
 8015bea:	4620      	mov	r0, r4
 8015bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bf2:	4718      	bx	r3
 8015bf4:	08029165 	.word	0x08029165
 8015bf8:	080291cc 	.word	0x080291cc
 8015bfc:	080290bd 	.word	0x080290bd

08015c00 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015c00:	4770      	bx	lr
	...

08015c04 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015c04:	4a02      	ldr	r2, [pc, #8]	; (8015c10 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015c06:	6002      	str	r2, [r0, #0]
 8015c08:	2200      	movs	r2, #0
 8015c0a:	8082      	strh	r2, [r0, #4]
 8015c0c:	4770      	bx	lr
 8015c0e:	bf00      	nop
 8015c10:	080291a0 	.word	0x080291a0

08015c14 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015c14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015c16:	2000      	movs	r0, #0
 8015c18:	b12b      	cbz	r3, 8015c26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015c1a:	b920      	cbnz	r0, 8015c26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015c1c:	1a5a      	subs	r2, r3, r1
 8015c1e:	699b      	ldr	r3, [r3, #24]
 8015c20:	4250      	negs	r0, r2
 8015c22:	4150      	adcs	r0, r2
 8015c24:	e7f8      	b.n	8015c18 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015c26:	4770      	bx	lr

08015c28 <_ZN8touchgfx9Container9removeAllEv>:
 8015c28:	2200      	movs	r2, #0
 8015c2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015c2c:	b123      	cbz	r3, 8015c38 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015c2e:	6999      	ldr	r1, [r3, #24]
 8015c30:	6281      	str	r1, [r0, #40]	; 0x28
 8015c32:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015c36:	e7f8      	b.n	8015c2a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015c38:	4770      	bx	lr

08015c3a <_ZN8touchgfx9Container6unlinkEv>:
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	6283      	str	r3, [r0, #40]	; 0x28
 8015c3e:	4770      	bx	lr

08015c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c44:	461f      	mov	r7, r3
 8015c46:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015c4a:	460d      	mov	r5, r1
 8015c4c:	4616      	mov	r6, r2
 8015c4e:	b103      	cbz	r3, 8015c52 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015c50:	6038      	str	r0, [r7, #0]
 8015c52:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c54:	b314      	cbz	r4, 8015c9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015c56:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015c5a:	b1eb      	cbz	r3, 8015c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015c5c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015c60:	428d      	cmp	r5, r1
 8015c62:	db19      	blt.n	8015c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015c64:	b289      	uxth	r1, r1
 8015c66:	8923      	ldrh	r3, [r4, #8]
 8015c68:	440b      	add	r3, r1
 8015c6a:	b21b      	sxth	r3, r3
 8015c6c:	429d      	cmp	r5, r3
 8015c6e:	da13      	bge.n	8015c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015c70:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015c74:	4296      	cmp	r6, r2
 8015c76:	db0f      	blt.n	8015c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015c78:	b292      	uxth	r2, r2
 8015c7a:	8963      	ldrh	r3, [r4, #10]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	b21b      	sxth	r3, r3
 8015c80:	429e      	cmp	r6, r3
 8015c82:	da09      	bge.n	8015c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	1ab2      	subs	r2, r6, r2
 8015c88:	1a69      	subs	r1, r5, r1
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8015c90:	b212      	sxth	r2, r2
 8015c92:	463b      	mov	r3, r7
 8015c94:	b209      	sxth	r1, r1
 8015c96:	47c0      	blx	r8
 8015c98:	69a4      	ldr	r4, [r4, #24]
 8015c9a:	e7db      	b.n	8015c54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ca0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	8002      	strh	r2, [r0, #0]
 8015ca4:	8042      	strh	r2, [r0, #2]
 8015ca6:	8082      	strh	r2, [r0, #4]
 8015ca8:	80c2      	strh	r2, [r0, #6]
 8015caa:	4770      	bx	lr

08015cac <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015cac:	b570      	push	{r4, r5, r6, lr}
 8015cae:	460d      	mov	r5, r1
 8015cb0:	4616      	mov	r6, r2
 8015cb2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cb4:	b13c      	cbz	r4, 8015cc6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015cb6:	6823      	ldr	r3, [r4, #0]
 8015cb8:	4620      	mov	r0, r4
 8015cba:	4632      	mov	r2, r6
 8015cbc:	4629      	mov	r1, r5
 8015cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015cc0:	4798      	blx	r3
 8015cc2:	69a4      	ldr	r4, [r4, #24]
 8015cc4:	e7f6      	b.n	8015cb4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015cc6:	bd70      	pop	{r4, r5, r6, pc}

08015cc8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015cc8:	b538      	push	{r3, r4, r5, lr}
 8015cca:	460d      	mov	r5, r1
 8015ccc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cce:	b134      	cbz	r4, 8015cde <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015cd0:	682b      	ldr	r3, [r5, #0]
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	4628      	mov	r0, r5
 8015cd6:	689b      	ldr	r3, [r3, #8]
 8015cd8:	4798      	blx	r3
 8015cda:	69a4      	ldr	r4, [r4, #24]
 8015cdc:	e7f7      	b.n	8015cce <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015cde:	bd38      	pop	{r3, r4, r5, pc}

08015ce0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015ce0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015ce2:	b19b      	cbz	r3, 8015d0c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015ce4:	428b      	cmp	r3, r1
 8015ce6:	d109      	bne.n	8015cfc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015ce8:	699a      	ldr	r2, [r3, #24]
 8015cea:	2100      	movs	r1, #0
 8015cec:	6159      	str	r1, [r3, #20]
 8015cee:	6282      	str	r2, [r0, #40]	; 0x28
 8015cf0:	b902      	cbnz	r2, 8015cf4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015cf2:	4770      	bx	lr
 8015cf4:	6199      	str	r1, [r3, #24]
 8015cf6:	4770      	bx	lr
 8015cf8:	4613      	mov	r3, r2
 8015cfa:	b13a      	cbz	r2, 8015d0c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015cfc:	699a      	ldr	r2, [r3, #24]
 8015cfe:	428a      	cmp	r2, r1
 8015d00:	d1fa      	bne.n	8015cf8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015d02:	698a      	ldr	r2, [r1, #24]
 8015d04:	619a      	str	r2, [r3, #24]
 8015d06:	2300      	movs	r3, #0
 8015d08:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015d0c:	4770      	bx	lr

08015d0e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015d0e:	b410      	push	{r4}
 8015d10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015d12:	4604      	mov	r4, r0
 8015d14:	b92b      	cbnz	r3, 8015d22 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015d16:	6803      	ldr	r3, [r0, #0]
 8015d18:	4611      	mov	r1, r2
 8015d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d20:	4718      	bx	r3
 8015d22:	b941      	cbnz	r1, 8015d36 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015d24:	6193      	str	r3, [r2, #24]
 8015d26:	6282      	str	r2, [r0, #40]	; 0x28
 8015d28:	6154      	str	r4, [r2, #20]
 8015d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d2e:	4770      	bx	lr
 8015d30:	4603      	mov	r3, r0
 8015d32:	2800      	cmp	r0, #0
 8015d34:	d0f9      	beq.n	8015d2a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015d36:	4299      	cmp	r1, r3
 8015d38:	6998      	ldr	r0, [r3, #24]
 8015d3a:	d1f9      	bne.n	8015d30 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015d3c:	6190      	str	r0, [r2, #24]
 8015d3e:	618a      	str	r2, [r1, #24]
 8015d40:	e7f2      	b.n	8015d28 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015d44 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015d44:	4288      	cmp	r0, r1
 8015d46:	b508      	push	{r3, lr}
 8015d48:	d105      	bne.n	8015d56 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015d4a:	4b11      	ldr	r3, [pc, #68]	; (8015d90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015d4c:	2123      	movs	r1, #35	; 0x23
 8015d4e:	4a11      	ldr	r2, [pc, #68]	; (8015d94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015d50:	4811      	ldr	r0, [pc, #68]	; (8015d98 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015d52:	f00f fe95 	bl	8025a80 <__assert_func>
 8015d56:	694b      	ldr	r3, [r1, #20]
 8015d58:	b11b      	cbz	r3, 8015d62 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015d5a:	4b10      	ldr	r3, [pc, #64]	; (8015d9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015d5c:	2124      	movs	r1, #36	; 0x24
 8015d5e:	4a0d      	ldr	r2, [pc, #52]	; (8015d94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015d60:	e7f6      	b.n	8015d50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015d62:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015d66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015d68:	b913      	cbnz	r3, 8015d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015d6a:	6281      	str	r1, [r0, #40]	; 0x28
 8015d6c:	bd08      	pop	{r3, pc}
 8015d6e:	4613      	mov	r3, r2
 8015d70:	699a      	ldr	r2, [r3, #24]
 8015d72:	b12a      	cbz	r2, 8015d80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015d74:	428b      	cmp	r3, r1
 8015d76:	d1fa      	bne.n	8015d6e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015d78:	4b09      	ldr	r3, [pc, #36]	; (8015da0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015d7a:	2135      	movs	r1, #53	; 0x35
 8015d7c:	4a05      	ldr	r2, [pc, #20]	; (8015d94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015d7e:	e7e7      	b.n	8015d50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015d80:	428b      	cmp	r3, r1
 8015d82:	d103      	bne.n	8015d8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015d84:	4b06      	ldr	r3, [pc, #24]	; (8015da0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015d86:	2138      	movs	r1, #56	; 0x38
 8015d88:	4a02      	ldr	r2, [pc, #8]	; (8015d94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015d8a:	e7e1      	b.n	8015d50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015d8c:	6199      	str	r1, [r3, #24]
 8015d8e:	e7ed      	b.n	8015d6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015d90:	08029297 	.word	0x08029297
 8015d94:	080293ec 	.word	0x080293ec
 8015d98:	080292c3 	.word	0x080292c3
 8015d9c:	080292f6 	.word	0x080292f6
 8015da0:	0802932c 	.word	0x0802932c

08015da4 <_ZN8touchgfx4RectaNERKS0_>:
 8015da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015da8:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015dac:	888c      	ldrh	r4, [r1, #4]
 8015dae:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015db2:	443c      	add	r4, r7
 8015db4:	b2a4      	uxth	r4, r4
 8015db6:	fa0f f884 	sxth.w	r8, r4
 8015dba:	45c1      	cmp	r9, r8
 8015dbc:	da2f      	bge.n	8015e1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015dbe:	8882      	ldrh	r2, [r0, #4]
 8015dc0:	444a      	add	r2, r9
 8015dc2:	b292      	uxth	r2, r2
 8015dc4:	fa0f fe82 	sxth.w	lr, r2
 8015dc8:	4577      	cmp	r7, lr
 8015dca:	da28      	bge.n	8015e1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015dcc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015dd0:	88cb      	ldrh	r3, [r1, #6]
 8015dd2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015dd6:	442b      	add	r3, r5
 8015dd8:	b21b      	sxth	r3, r3
 8015dda:	429e      	cmp	r6, r3
 8015ddc:	da1f      	bge.n	8015e1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015dde:	88c3      	ldrh	r3, [r0, #6]
 8015de0:	4433      	add	r3, r6
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	fa0f fc83 	sxth.w	ip, r3
 8015de8:	4565      	cmp	r5, ip
 8015dea:	da18      	bge.n	8015e1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015dec:	454f      	cmp	r7, r9
 8015dee:	bfb8      	it	lt
 8015df0:	464f      	movlt	r7, r9
 8015df2:	42b5      	cmp	r5, r6
 8015df4:	bfb8      	it	lt
 8015df6:	4635      	movlt	r5, r6
 8015df8:	45f0      	cmp	r8, lr
 8015dfa:	bfd8      	it	le
 8015dfc:	4622      	movle	r2, r4
 8015dfe:	1bd2      	subs	r2, r2, r7
 8015e00:	8082      	strh	r2, [r0, #4]
 8015e02:	884a      	ldrh	r2, [r1, #2]
 8015e04:	88c9      	ldrh	r1, [r1, #6]
 8015e06:	8007      	strh	r7, [r0, #0]
 8015e08:	440a      	add	r2, r1
 8015e0a:	8045      	strh	r5, [r0, #2]
 8015e0c:	b292      	uxth	r2, r2
 8015e0e:	b211      	sxth	r1, r2
 8015e10:	458c      	cmp	ip, r1
 8015e12:	bfa8      	it	ge
 8015e14:	4613      	movge	r3, r2
 8015e16:	1b5b      	subs	r3, r3, r5
 8015e18:	80c3      	strh	r3, [r0, #6]
 8015e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e1e:	2300      	movs	r3, #0
 8015e20:	8003      	strh	r3, [r0, #0]
 8015e22:	8043      	strh	r3, [r0, #2]
 8015e24:	8083      	strh	r3, [r0, #4]
 8015e26:	80c3      	strh	r3, [r0, #6]
 8015e28:	e7f7      	b.n	8015e1a <_ZN8touchgfx4RectaNERKS0_+0x76>

08015e2a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015e2a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	dd06      	ble.n	8015e40 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015e32:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015e36:	2800      	cmp	r0, #0
 8015e38:	bfcc      	ite	gt
 8015e3a:	2000      	movgt	r0, #0
 8015e3c:	2001      	movle	r0, #1
 8015e3e:	4770      	bx	lr
 8015e40:	2001      	movs	r0, #1
 8015e42:	4770      	bx	lr

08015e44 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e48:	2300      	movs	r3, #0
 8015e4a:	4604      	mov	r4, r0
 8015e4c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015e4e:	8003      	strh	r3, [r0, #0]
 8015e50:	8043      	strh	r3, [r0, #2]
 8015e52:	8083      	strh	r3, [r0, #4]
 8015e54:	80c3      	strh	r3, [r0, #6]
 8015e56:	2d00      	cmp	r5, #0
 8015e58:	d040      	beq.n	8015edc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015e5a:	1d28      	adds	r0, r5, #4
 8015e5c:	f7ff ffe5 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015e60:	b988      	cbnz	r0, 8015e86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015e62:	4620      	mov	r0, r4
 8015e64:	f7ff ffe1 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015e68:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015e6c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015e70:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015e74:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015e78:	b138      	cbz	r0, 8015e8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015e7a:	8022      	strh	r2, [r4, #0]
 8015e7c:	8063      	strh	r3, [r4, #2]
 8015e7e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015e82:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015e86:	69ad      	ldr	r5, [r5, #24]
 8015e88:	e7e5      	b.n	8015e56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015e8a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015e8e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015e92:	4290      	cmp	r0, r2
 8015e94:	4607      	mov	r7, r0
 8015e96:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015e9a:	460e      	mov	r6, r1
 8015e9c:	bfa8      	it	ge
 8015e9e:	4617      	movge	r7, r2
 8015ea0:	4299      	cmp	r1, r3
 8015ea2:	4472      	add	r2, lr
 8015ea4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015ea8:	bfa8      	it	ge
 8015eaa:	461e      	movge	r6, r3
 8015eac:	4440      	add	r0, r8
 8015eae:	4471      	add	r1, lr
 8015eb0:	4463      	add	r3, ip
 8015eb2:	b200      	sxth	r0, r0
 8015eb4:	8027      	strh	r7, [r4, #0]
 8015eb6:	b212      	sxth	r2, r2
 8015eb8:	8066      	strh	r6, [r4, #2]
 8015eba:	b209      	sxth	r1, r1
 8015ebc:	b21b      	sxth	r3, r3
 8015ebe:	4290      	cmp	r0, r2
 8015ec0:	bfac      	ite	ge
 8015ec2:	ebc7 0200 	rsbge	r2, r7, r0
 8015ec6:	ebc7 0202 	rsblt	r2, r7, r2
 8015eca:	4299      	cmp	r1, r3
 8015ecc:	bfac      	ite	ge
 8015ece:	ebc6 0301 	rsbge	r3, r6, r1
 8015ed2:	ebc6 0303 	rsblt	r3, r6, r3
 8015ed6:	80a2      	strh	r2, [r4, #4]
 8015ed8:	80e3      	strh	r3, [r4, #6]
 8015eda:	e7d4      	b.n	8015e86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015edc:	4620      	mov	r0, r4
 8015ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ee2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015ee2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015ee6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015eea:	b383      	cbz	r3, 8015f4e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015eec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015eee:	b374      	cbz	r4, 8015f4e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015ef0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015ef4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015ef8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015efc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015f00:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015f04:	b303      	cbz	r3, 8015f48 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015f06:	4668      	mov	r0, sp
 8015f08:	1d21      	adds	r1, r4, #4
 8015f0a:	f8ad 5000 	strh.w	r5, [sp]
 8015f0e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015f12:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015f16:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015f1a:	f7ff ff43 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 8015f1e:	4668      	mov	r0, sp
 8015f20:	f7ff ff83 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015f24:	b980      	cbnz	r0, 8015f48 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015f26:	f8bd 3000 	ldrh.w	r3, [sp]
 8015f2a:	4669      	mov	r1, sp
 8015f2c:	88a2      	ldrh	r2, [r4, #4]
 8015f2e:	4620      	mov	r0, r4
 8015f30:	1a9b      	subs	r3, r3, r2
 8015f32:	88e2      	ldrh	r2, [r4, #6]
 8015f34:	f8ad 3000 	strh.w	r3, [sp]
 8015f38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015f3c:	1a9b      	subs	r3, r3, r2
 8015f3e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015f42:	6823      	ldr	r3, [r4, #0]
 8015f44:	689b      	ldr	r3, [r3, #8]
 8015f46:	4798      	blx	r3
 8015f48:	69a4      	ldr	r4, [r4, #24]
 8015f4a:	2c00      	cmp	r4, #0
 8015f4c:	d1d8      	bne.n	8015f00 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015f4e:	b002      	add	sp, #8
 8015f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f54 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f56:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015f5a:	460d      	mov	r5, r1
 8015f5c:	4616      	mov	r6, r2
 8015f5e:	b323      	cbz	r3, 8015faa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015f60:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015f62:	b314      	cbz	r4, 8015faa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015f64:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015f68:	b1eb      	cbz	r3, 8015fa6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015f6a:	6828      	ldr	r0, [r5, #0]
 8015f6c:	466b      	mov	r3, sp
 8015f6e:	6869      	ldr	r1, [r5, #4]
 8015f70:	c303      	stmia	r3!, {r0, r1}
 8015f72:	4668      	mov	r0, sp
 8015f74:	1d21      	adds	r1, r4, #4
 8015f76:	f7ff ff15 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 8015f7a:	4668      	mov	r0, sp
 8015f7c:	f7ff ff55 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015f80:	b988      	cbnz	r0, 8015fa6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015f82:	f8bd 3000 	ldrh.w	r3, [sp]
 8015f86:	4669      	mov	r1, sp
 8015f88:	88a2      	ldrh	r2, [r4, #4]
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	1a9b      	subs	r3, r3, r2
 8015f8e:	88e2      	ldrh	r2, [r4, #6]
 8015f90:	f8ad 3000 	strh.w	r3, [sp]
 8015f94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015f98:	1a9b      	subs	r3, r3, r2
 8015f9a:	4632      	mov	r2, r6
 8015f9c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015fa0:	6823      	ldr	r3, [r4, #0]
 8015fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fa4:	4798      	blx	r3
 8015fa6:	69a4      	ldr	r4, [r4, #24]
 8015fa8:	e7db      	b.n	8015f62 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015faa:	b002      	add	sp, #8
 8015fac:	bd70      	pop	{r4, r5, r6, pc}

08015fae <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015fae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015fb2:	4770      	bx	lr

08015fb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015fb4:	6803      	ldr	r3, [r0, #0]
 8015fb6:	b513      	push	{r0, r1, r4, lr}
 8015fb8:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	e9cd 3300 	strd	r3, r3, [sp]
 8015fc2:	466b      	mov	r3, sp
 8015fc4:	47a0      	blx	r4
 8015fc6:	b002      	add	sp, #8
 8015fc8:	bd10      	pop	{r4, pc}

08015fca <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015fca:	2301      	movs	r3, #1
 8015fcc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015fd0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015fd4:	4770      	bx	lr

08015fd6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015fd6:	2301      	movs	r3, #1
 8015fd8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015fdc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015fe0:	4770      	bx	lr

08015fe2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015fe2:	6843      	ldr	r3, [r0, #4]
 8015fe4:	2201      	movs	r2, #1
 8015fe6:	725a      	strb	r2, [r3, #9]
 8015fe8:	6840      	ldr	r0, [r0, #4]
 8015fea:	6803      	ldr	r3, [r0, #0]
 8015fec:	691b      	ldr	r3, [r3, #16]
 8015fee:	4718      	bx	r3

08015ff0 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015ff0:	6840      	ldr	r0, [r0, #4]
 8015ff2:	6803      	ldr	r3, [r0, #0]
 8015ff4:	689b      	ldr	r3, [r3, #8]
 8015ff6:	4718      	bx	r3

08015ff8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015ff8:	4b04      	ldr	r3, [pc, #16]	; (801600c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015ffa:	781b      	ldrb	r3, [r3, #0]
 8015ffc:	b123      	cbz	r3, 8016008 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015ffe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016002:	f080 0001 	eor.w	r0, r0, #1
 8016006:	4770      	bx	lr
 8016008:	2001      	movs	r0, #1
 801600a:	4770      	bx	lr
 801600c:	2000b3c6 	.word	0x2000b3c6

08016010 <_ZN8touchgfx3HAL8endFrameEv>:
 8016010:	b510      	push	{r4, lr}
 8016012:	4604      	mov	r4, r0
 8016014:	6840      	ldr	r0, [r0, #4]
 8016016:	6803      	ldr	r3, [r0, #0]
 8016018:	689b      	ldr	r3, [r3, #8]
 801601a:	4798      	blx	r3
 801601c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016020:	b113      	cbz	r3, 8016028 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016022:	2301      	movs	r3, #1
 8016024:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016028:	bd10      	pop	{r4, pc}

0801602a <_ZN8touchgfx3HAL9taskEntryEv>:
 801602a:	b508      	push	{r3, lr}
 801602c:	6803      	ldr	r3, [r0, #0]
 801602e:	4604      	mov	r4, r0
 8016030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016032:	4798      	blx	r3
 8016034:	6823      	ldr	r3, [r4, #0]
 8016036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016038:	4620      	mov	r0, r4
 801603a:	4798      	blx	r3
 801603c:	f7fe fa48 	bl	80144d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016040:	6823      	ldr	r3, [r4, #0]
 8016042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016044:	e7f8      	b.n	8016038 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08016048 <_ZN8touchgfx3HAL4tickEv>:
 8016048:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801604a:	6803      	ldr	r3, [r0, #0]
 801604c:	4604      	mov	r4, r0
 801604e:	4d5c      	ldr	r5, [pc, #368]	; (80161c0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016054:	4798      	blx	r3
 8016056:	2800      	cmp	r0, #0
 8016058:	f000 8097 	beq.w	801618a <_ZN8touchgfx3HAL4tickEv+0x142>
 801605c:	2001      	movs	r0, #1
 801605e:	2600      	movs	r6, #0
 8016060:	f7fd ff26 	bl	8013eb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016064:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016068:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801606c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016070:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016074:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016078:	b133      	cbz	r3, 8016088 <_ZN8touchgfx3HAL4tickEv+0x40>
 801607a:	6823      	ldr	r3, [r4, #0]
 801607c:	4620      	mov	r0, r4
 801607e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016082:	4798      	blx	r3
 8016084:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016088:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801608c:	2601      	movs	r6, #1
 801608e:	6862      	ldr	r2, [r4, #4]
 8016090:	f083 0301 	eor.w	r3, r3, #1
 8016094:	702e      	strb	r6, [r5, #0]
 8016096:	7253      	strb	r3, [r2, #9]
 8016098:	f003 fb72 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 801609c:	6803      	ldr	r3, [r0, #0]
 801609e:	4631      	mov	r1, r6
 80160a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160a2:	4798      	blx	r3
 80160a4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80160a8:	b90b      	cbnz	r3, 80160ae <_ZN8touchgfx3HAL4tickEv+0x66>
 80160aa:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80160ae:	f003 fb67 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 80160b2:	6803      	ldr	r3, [r0, #0]
 80160b4:	695b      	ldr	r3, [r3, #20]
 80160b6:	4798      	blx	r3
 80160b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80160ba:	6803      	ldr	r3, [r0, #0]
 80160bc:	691b      	ldr	r3, [r3, #16]
 80160be:	4798      	blx	r3
 80160c0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80160c4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80160c8:	3b01      	subs	r3, #1
 80160ca:	b2db      	uxtb	r3, r3
 80160cc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80160d0:	b10a      	cbz	r2, 80160d6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d1eb      	bne.n	80160ae <_ZN8touchgfx3HAL4tickEv+0x66>
 80160d6:	4a3b      	ldr	r2, [pc, #236]	; (80161c4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80160d8:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80160dc:	7813      	ldrb	r3, [r2, #0]
 80160de:	3301      	adds	r3, #1
 80160e0:	b25b      	sxtb	r3, r3
 80160e2:	4299      	cmp	r1, r3
 80160e4:	7013      	strb	r3, [r2, #0]
 80160e6:	dc10      	bgt.n	801610a <_ZN8touchgfx3HAL4tickEv+0xc2>
 80160e8:	2300      	movs	r3, #0
 80160ea:	68e0      	ldr	r0, [r4, #12]
 80160ec:	a902      	add	r1, sp, #8
 80160ee:	7013      	strb	r3, [r2, #0]
 80160f0:	aa03      	add	r2, sp, #12
 80160f2:	6803      	ldr	r3, [r0, #0]
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	4798      	blx	r3
 80160f8:	6823      	ldr	r3, [r4, #0]
 80160fa:	2800      	cmp	r0, #0
 80160fc:	d051      	beq.n	80161a2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80160fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016102:	4620      	mov	r0, r4
 8016104:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016108:	4798      	blx	r3
 801610a:	2300      	movs	r3, #0
 801610c:	6960      	ldr	r0, [r4, #20]
 801610e:	f88d 3007 	strb.w	r3, [sp, #7]
 8016112:	b158      	cbz	r0, 801612c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016114:	6803      	ldr	r3, [r0, #0]
 8016116:	f10d 0107 	add.w	r1, sp, #7
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	4798      	blx	r3
 801611e:	b128      	cbz	r0, 801612c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016122:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016126:	6803      	ldr	r3, [r0, #0]
 8016128:	68db      	ldr	r3, [r3, #12]
 801612a:	4798      	blx	r3
 801612c:	f104 001c 	add.w	r0, r4, #28
 8016130:	f00d ffd0 	bl	80240d4 <_ZN8touchgfx8Gestures4tickEv>
 8016134:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8016138:	b30b      	cbz	r3, 801617e <_ZN8touchgfx3HAL4tickEv+0x136>
 801613a:	6920      	ldr	r0, [r4, #16]
 801613c:	6803      	ldr	r3, [r0, #0]
 801613e:	691b      	ldr	r3, [r3, #16]
 8016140:	4798      	blx	r3
 8016142:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016144:	4606      	mov	r6, r0
 8016146:	b903      	cbnz	r3, 801614a <_ZN8touchgfx3HAL4tickEv+0x102>
 8016148:	6720      	str	r0, [r4, #112]	; 0x70
 801614a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801614c:	4a1e      	ldr	r2, [pc, #120]	; (80161c8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801614e:	1af3      	subs	r3, r6, r3
 8016150:	4293      	cmp	r3, r2
 8016152:	d914      	bls.n	801617e <_ZN8touchgfx3HAL4tickEv+0x136>
 8016154:	6920      	ldr	r0, [r4, #16]
 8016156:	6803      	ldr	r3, [r0, #0]
 8016158:	699b      	ldr	r3, [r3, #24]
 801615a:	4798      	blx	r3
 801615c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801615e:	2264      	movs	r2, #100	; 0x64
 8016160:	1af3      	subs	r3, r6, r3
 8016162:	fbb3 f3f2 	udiv	r3, r3, r2
 8016166:	fbb0 f0f3 	udiv	r0, r0, r3
 801616a:	2800      	cmp	r0, #0
 801616c:	dc1e      	bgt.n	80161ac <_ZN8touchgfx3HAL4tickEv+0x164>
 801616e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016172:	6920      	ldr	r0, [r4, #16]
 8016174:	2100      	movs	r1, #0
 8016176:	6803      	ldr	r3, [r0, #0]
 8016178:	69db      	ldr	r3, [r3, #28]
 801617a:	4798      	blx	r3
 801617c:	6726      	str	r6, [r4, #112]	; 0x70
 801617e:	f003 faff 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	2100      	movs	r1, #0
 8016186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016188:	4798      	blx	r3
 801618a:	6823      	ldr	r3, [r4, #0]
 801618c:	4620      	mov	r0, r4
 801618e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016192:	4798      	blx	r3
 8016194:	2001      	movs	r0, #1
 8016196:	f7fd fe96 	bl	8013ec6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801619a:	2300      	movs	r3, #0
 801619c:	702b      	strb	r3, [r5, #0]
 801619e:	b004      	add	sp, #16
 80161a0:	bd70      	pop	{r4, r5, r6, pc}
 80161a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80161a6:	4620      	mov	r0, r4
 80161a8:	4798      	blx	r3
 80161aa:	e7ae      	b.n	801610a <_ZN8touchgfx3HAL4tickEv+0xc2>
 80161ac:	2863      	cmp	r0, #99	; 0x63
 80161ae:	bfcb      	itete	gt
 80161b0:	2300      	movgt	r3, #0
 80161b2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80161b6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80161ba:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80161be:	e7d8      	b.n	8016172 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80161c0:	2000b3cc 	.word	0x2000b3cc
 80161c4:	2000b3cd 	.word	0x2000b3cd
 80161c8:	05f5e100 	.word	0x05f5e100

080161cc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80161cc:	f7fe b950 	b.w	8014470 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080161d0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80161d0:	6581      	str	r1, [r0, #88]	; 0x58
 80161d2:	301c      	adds	r0, #28
 80161d4:	f00d bf7c 	b.w	80240d0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080161d8 <_ZN8touchgfx3HAL5touchEll>:
 80161d8:	b530      	push	{r4, r5, lr}
 80161da:	b087      	sub	sp, #28
 80161dc:	4604      	mov	r4, r0
 80161de:	a804      	add	r0, sp, #16
 80161e0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80161e4:	f003 f886 	bl	80192f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80161e8:	9b04      	ldr	r3, [sp, #16]
 80161ea:	a906      	add	r1, sp, #24
 80161ec:	a803      	add	r0, sp, #12
 80161ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80161f2:	9b05      	ldr	r3, [sp, #20]
 80161f4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80161f8:	f003 f8ca 	bl	8019390 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80161fc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016200:	f104 001c 	add.w	r0, r4, #28
 8016204:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016208:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801620c:	b189      	cbz	r1, 8016232 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801620e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016212:	9300      	str	r3, [sp, #0]
 8016214:	4613      	mov	r3, r2
 8016216:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801621a:	462a      	mov	r2, r5
 801621c:	f00d ff68 	bl	80240f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016220:	b128      	cbz	r0, 801622e <_ZN8touchgfx3HAL5touchEll+0x56>
 8016222:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016226:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016228:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801622c:	6623      	str	r3, [r4, #96]	; 0x60
 801622e:	b007      	add	sp, #28
 8016230:	bd30      	pop	{r4, r5, pc}
 8016232:	f00d ffa1 	bl	8024178 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016236:	2301      	movs	r3, #1
 8016238:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801623c:	e7f1      	b.n	8016222 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801623e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801623e:	b570      	push	{r4, r5, r6, lr}
 8016240:	2b00      	cmp	r3, #0
 8016242:	d050      	beq.n	80162e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016244:	ea81 0002 	eor.w	r0, r1, r2
 8016248:	07c6      	lsls	r6, r0, #31
 801624a:	d508      	bpl.n	801625e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801624c:	3a01      	subs	r2, #1
 801624e:	18cc      	adds	r4, r1, r3
 8016250:	42a1      	cmp	r1, r4
 8016252:	d048      	beq.n	80162e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016254:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016258:	f801 0b01 	strb.w	r0, [r1], #1
 801625c:	e7f8      	b.n	8016250 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801625e:	07d5      	lsls	r5, r2, #31
 8016260:	bf42      	ittt	mi
 8016262:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016266:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801626a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801626e:	2b01      	cmp	r3, #1
 8016270:	d915      	bls.n	801629e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016272:	ea82 0001 	eor.w	r0, r2, r1
 8016276:	0784      	lsls	r4, r0, #30
 8016278:	d02d      	beq.n	80162d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801627a:	1e94      	subs	r4, r2, #2
 801627c:	4608      	mov	r0, r1
 801627e:	18ce      	adds	r6, r1, r3
 8016280:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8016284:	f820 5b02 	strh.w	r5, [r0], #2
 8016288:	1a35      	subs	r5, r6, r0
 801628a:	2d01      	cmp	r5, #1
 801628c:	d8f8      	bhi.n	8016280 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801628e:	1e98      	subs	r0, r3, #2
 8016290:	f003 0301 	and.w	r3, r3, #1
 8016294:	f020 0001 	bic.w	r0, r0, #1
 8016298:	3002      	adds	r0, #2
 801629a:	4401      	add	r1, r0
 801629c:	4402      	add	r2, r0
 801629e:	1f14      	subs	r4, r2, #4
 80162a0:	4608      	mov	r0, r1
 80162a2:	18ce      	adds	r6, r1, r3
 80162a4:	1a35      	subs	r5, r6, r0
 80162a6:	2d03      	cmp	r5, #3
 80162a8:	d810      	bhi.n	80162cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80162aa:	089c      	lsrs	r4, r3, #2
 80162ac:	00a0      	lsls	r0, r4, #2
 80162ae:	4401      	add	r1, r0
 80162b0:	3801      	subs	r0, #1
 80162b2:	4402      	add	r2, r0
 80162b4:	f06f 0003 	mvn.w	r0, #3
 80162b8:	fb00 3404 	mla	r4, r0, r4, r3
 80162bc:	440c      	add	r4, r1
 80162be:	42a1      	cmp	r1, r4
 80162c0:	d011      	beq.n	80162e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80162c2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80162c6:	f801 3b01 	strb.w	r3, [r1], #1
 80162ca:	e7f8      	b.n	80162be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80162cc:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80162d0:	f840 5b04 	str.w	r5, [r0], #4
 80162d4:	e7e6      	b.n	80162a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80162d6:	0790      	lsls	r0, r2, #30
 80162d8:	d0e1      	beq.n	801629e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80162da:	f832 0b02 	ldrh.w	r0, [r2], #2
 80162de:	3b02      	subs	r3, #2
 80162e0:	f821 0b02 	strh.w	r0, [r1], #2
 80162e4:	e7db      	b.n	801629e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80162e6:	2001      	movs	r0, #1
 80162e8:	bd70      	pop	{r4, r5, r6, pc}

080162ea <_ZN8touchgfx3HAL7noTouchEv>:
 80162ea:	b510      	push	{r4, lr}
 80162ec:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80162f0:	4604      	mov	r4, r0
 80162f2:	b153      	cbz	r3, 801630a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80162f4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80162f8:	2101      	movs	r1, #1
 80162fa:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80162fe:	301c      	adds	r0, #28
 8016300:	f00d ff3a 	bl	8024178 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016304:	2300      	movs	r3, #0
 8016306:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801630a:	bd10      	pop	{r4, pc}

0801630c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801630c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016310:	4605      	mov	r5, r0
 8016312:	6980      	ldr	r0, [r0, #24]
 8016314:	b085      	sub	sp, #20
 8016316:	460f      	mov	r7, r1
 8016318:	4690      	mov	r8, r2
 801631a:	4699      	mov	r9, r3
 801631c:	b930      	cbnz	r0, 801632c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801631e:	4b1f      	ldr	r3, [pc, #124]	; (801639c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016320:	f44f 7198 	mov.w	r1, #304	; 0x130
 8016324:	4a1e      	ldr	r2, [pc, #120]	; (80163a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016326:	481f      	ldr	r0, [pc, #124]	; (80163a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8016328:	f00f fbaa 	bl	8025a80 <__assert_func>
 801632c:	ac04      	add	r4, sp, #16
 801632e:	2600      	movs	r6, #0
 8016330:	f844 6d04 	str.w	r6, [r4, #-4]!
 8016334:	6806      	ldr	r6, [r0, #0]
 8016336:	9401      	str	r4, [sp, #4]
 8016338:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801633c:	9400      	str	r4, [sp, #0]
 801633e:	6834      	ldr	r4, [r6, #0]
 8016340:	47a0      	blx	r4
 8016342:	4c19      	ldr	r4, [pc, #100]	; (80163a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8016344:	4606      	mov	r6, r0
 8016346:	f8a4 9000 	strh.w	r9, [r4]
 801634a:	f7f6 fa9b 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 801634e:	6803      	ldr	r3, [r0, #0]
 8016350:	6a1b      	ldr	r3, [r3, #32]
 8016352:	4798      	blx	r3
 8016354:	280c      	cmp	r0, #12
 8016356:	d80f      	bhi.n	8016378 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8016358:	e8df f000 	tbb	[pc, r0]
 801635c:	1b1b1207 	.word	0x1b1b1207
 8016360:	1b1b1b1b 	.word	0x1b1b1b1b
 8016364:	1b1b1b1b 	.word	0x1b1b1b1b
 8016368:	1b          	.byte	0x1b
 8016369:	00          	.byte	0x00
 801636a:	8823      	ldrh	r3, [r4, #0]
 801636c:	fb08 7203 	mla	r2, r8, r3, r7
 8016370:	9b03      	ldr	r3, [sp, #12]
 8016372:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016376:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016378:	4630      	mov	r0, r6
 801637a:	b005      	add	sp, #20
 801637c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016380:	8822      	ldrh	r2, [r4, #0]
 8016382:	9b03      	ldr	r3, [sp, #12]
 8016384:	fb08 7202 	mla	r2, r8, r2, r7
 8016388:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801638c:	1a9a      	subs	r2, r3, r2
 801638e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8016390:	e7f2      	b.n	8016378 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8016392:	4b06      	ldr	r3, [pc, #24]	; (80163ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8016394:	f240 114d 	movw	r1, #333	; 0x14d
 8016398:	4a01      	ldr	r2, [pc, #4]	; (80163a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801639a:	e7c4      	b.n	8016326 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801639c:	08029495 	.word	0x08029495
 80163a0:	080297a6 	.word	0x080297a6
 80163a4:	080294da 	.word	0x080294da
 80163a8:	2000b3c2 	.word	0x2000b3c2
 80163ac:	08029500 	.word	0x08029500

080163b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80163b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163b4:	4698      	mov	r8, r3
 80163b6:	6803      	ldr	r3, [r0, #0]
 80163b8:	b087      	sub	sp, #28
 80163ba:	460e      	mov	r6, r1
 80163bc:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80163be:	4617      	mov	r7, r2
 80163c0:	4b0d      	ldr	r3, [pc, #52]	; (80163f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80163c2:	4604      	mov	r4, r0
 80163c4:	f8b3 9000 	ldrh.w	r9, [r3]
 80163c8:	f7f6 fa5c 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 80163cc:	6803      	ldr	r3, [r0, #0]
 80163ce:	6a1b      	ldr	r3, [r3, #32]
 80163d0:	4798      	blx	r3
 80163d2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80163d6:	463a      	mov	r2, r7
 80163d8:	4631      	mov	r1, r6
 80163da:	9302      	str	r3, [sp, #8]
 80163dc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80163e0:	9301      	str	r3, [sp, #4]
 80163e2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80163e6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80163ea:	9300      	str	r3, [sp, #0]
 80163ec:	4620      	mov	r0, r4
 80163ee:	4643      	mov	r3, r8
 80163f0:	47a8      	blx	r5
 80163f2:	b007      	add	sp, #28
 80163f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163f8:	2000b3c2 	.word	0x2000b3c2

080163fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80163fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016400:	4606      	mov	r6, r0
 8016402:	b089      	sub	sp, #36	; 0x24
 8016404:	4610      	mov	r0, r2
 8016406:	460c      	mov	r4, r1
 8016408:	4691      	mov	r9, r2
 801640a:	4698      	mov	r8, r3
 801640c:	f005 fc26 	bl	801bc5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016410:	2800      	cmp	r0, #0
 8016412:	f000 8093 	beq.w	801653c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 8016416:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8016554 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801641a:	ad08      	add	r5, sp, #32
 801641c:	f8df b138 	ldr.w	fp, [pc, #312]	; 8016558 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8016420:	f8da 0000 	ldr.w	r0, [sl]
 8016424:	4f4a      	ldr	r7, [pc, #296]	; (8016550 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8016426:	6802      	ldr	r2, [r0, #0]
 8016428:	6a12      	ldr	r2, [r2, #32]
 801642a:	4790      	blx	r2
 801642c:	f8da 0000 	ldr.w	r0, [sl]
 8016430:	6802      	ldr	r2, [r0, #0]
 8016432:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016434:	4790      	blx	r2
 8016436:	f8bb 3000 	ldrh.w	r3, [fp]
 801643a:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801643e:	4628      	mov	r0, r5
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	883b      	ldrh	r3, [r7, #0]
 8016444:	9301      	str	r3, [sp, #4]
 8016446:	f005 fccd 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801644a:	f8ab 0000 	strh.w	r0, [fp]
 801644e:	4628      	mov	r0, r5
 8016450:	f005 fd02 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016454:	f8da b000 	ldr.w	fp, [sl]
 8016458:	8038      	strh	r0, [r7, #0]
 801645a:	4648      	mov	r0, r9
 801645c:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8016460:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8016464:	9302      	str	r3, [sp, #8]
 8016466:	f005 fbf9 	bl	801bc5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801646a:	f8da 2000 	ldr.w	r2, [sl]
 801646e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8016472:	63d0      	str	r0, [r2, #60]	; 0x3c
 8016474:	4620      	mov	r0, r4
 8016476:	6822      	ldr	r2, [r4, #0]
 8016478:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801647c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801647e:	2200      	movs	r2, #0
 8016480:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8016484:	4611      	mov	r1, r2
 8016486:	4798      	blx	r3
 8016488:	2201      	movs	r2, #1
 801648a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801648e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8016492:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016496:	2a00      	cmp	r2, #0
 8016498:	f104 0204 	add.w	r2, r4, #4
 801649c:	dd51      	ble.n	8016542 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801649e:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 80164a2:	2900      	cmp	r1, #0
 80164a4:	dd4d      	ble.n	8016542 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 80164a6:	6810      	ldr	r0, [r2, #0]
 80164a8:	f10d 0c18 	add.w	ip, sp, #24
 80164ac:	6851      	ldr	r1, [r2, #4]
 80164ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80164b2:	4641      	mov	r1, r8
 80164b4:	a806      	add	r0, sp, #24
 80164b6:	f7ff fc75 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 80164ba:	4628      	mov	r0, r5
 80164bc:	f005 fde4 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80164c0:	4680      	mov	r8, r0
 80164c2:	f7f6 f9df 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 80164c6:	6802      	ldr	r2, [r0, #0]
 80164c8:	6a12      	ldr	r2, [r2, #32]
 80164ca:	4790      	blx	r2
 80164cc:	4580      	cmp	r8, r0
 80164ce:	d03d      	beq.n	801654c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 80164d0:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80164d2:	b150      	cbz	r0, 80164ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 80164d4:	4628      	mov	r0, r5
 80164d6:	f005 fdd7 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80164da:	4605      	mov	r5, r0
 80164dc:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80164de:	6803      	ldr	r3, [r0, #0]
 80164e0:	6a1b      	ldr	r3, [r3, #32]
 80164e2:	4798      	blx	r3
 80164e4:	1a2b      	subs	r3, r5, r0
 80164e6:	4258      	negs	r0, r3
 80164e8:	4158      	adcs	r0, r3
 80164ea:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80164ee:	2500      	movs	r5, #0
 80164f0:	6963      	ldr	r3, [r4, #20]
 80164f2:	4620      	mov	r0, r4
 80164f4:	6822      	ldr	r2, [r4, #0]
 80164f6:	a906      	add	r1, sp, #24
 80164f8:	6165      	str	r5, [r4, #20]
 80164fa:	9303      	str	r3, [sp, #12]
 80164fc:	6892      	ldr	r2, [r2, #8]
 80164fe:	4790      	blx	r2
 8016500:	9b03      	ldr	r3, [sp, #12]
 8016502:	4620      	mov	r0, r4
 8016504:	4652      	mov	r2, sl
 8016506:	6163      	str	r3, [r4, #20]
 8016508:	4649      	mov	r1, r9
 801650a:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801650e:	6823      	ldr	r3, [r4, #0]
 8016510:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8016514:	4c0f      	ldr	r4, [pc, #60]	; (8016554 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8016516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016518:	4798      	blx	r3
 801651a:	6820      	ldr	r0, [r4, #0]
 801651c:	9b02      	ldr	r3, [sp, #8]
 801651e:	9a00      	ldr	r2, [sp, #0]
 8016520:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8016524:	4b0c      	ldr	r3, [pc, #48]	; (8016558 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8016526:	801a      	strh	r2, [r3, #0]
 8016528:	4b09      	ldr	r3, [pc, #36]	; (8016550 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801652a:	9a01      	ldr	r2, [sp, #4]
 801652c:	801a      	strh	r2, [r3, #0]
 801652e:	6803      	ldr	r3, [r0, #0]
 8016530:	6a1b      	ldr	r3, [r3, #32]
 8016532:	4798      	blx	r3
 8016534:	6820      	ldr	r0, [r4, #0]
 8016536:	6803      	ldr	r3, [r0, #0]
 8016538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801653a:	4798      	blx	r3
 801653c:	b009      	add	sp, #36	; 0x24
 801653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016542:	ab06      	add	r3, sp, #24
 8016544:	6810      	ldr	r0, [r2, #0]
 8016546:	6851      	ldr	r1, [r2, #4]
 8016548:	c303      	stmia	r3!, {r0, r1}
 801654a:	e7b6      	b.n	80164ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 801654c:	2000      	movs	r0, #0
 801654e:	e7cc      	b.n	80164ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8016550:	2000b3c4 	.word	0x2000b3c4
 8016554:	2000b3c8 	.word	0x2000b3c8
 8016558:	2000b3c2 	.word	0x2000b3c2

0801655c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801655c:	4b07      	ldr	r3, [pc, #28]	; (801657c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801655e:	b510      	push	{r4, lr}
 8016560:	781b      	ldrb	r3, [r3, #0]
 8016562:	4604      	mov	r4, r0
 8016564:	b13b      	cbz	r3, 8016576 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016566:	6803      	ldr	r3, [r0, #0]
 8016568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801656a:	4798      	blx	r3
 801656c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801656e:	4283      	cmp	r3, r0
 8016570:	d101      	bne.n	8016576 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016572:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016574:	bd10      	pop	{r4, pc}
 8016576:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016578:	e7fc      	b.n	8016574 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801657a:	bf00      	nop
 801657c:	2000b3c6 	.word	0x2000b3c6

08016580 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016580:	4b0b      	ldr	r3, [pc, #44]	; (80165b0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8016582:	b510      	push	{r4, lr}
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	4604      	mov	r4, r0
 8016588:	b95b      	cbnz	r3, 80165a2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801658a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801658e:	2b02      	cmp	r3, #2
 8016590:	d007      	beq.n	80165a2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016592:	6840      	ldr	r0, [r0, #4]
 8016594:	f000 fbc8 	bl	8016d28 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016598:	b118      	cbz	r0, 80165a2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801659a:	6862      	ldr	r2, [r4, #4]
 801659c:	7a53      	ldrb	r3, [r2, #9]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d0fc      	beq.n	801659c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80165a2:	f7fd ff57 	bl	8014454 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80165a6:	4620      	mov	r0, r4
 80165a8:	f7ff ffd8 	bl	801655c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80165ac:	bd10      	pop	{r4, pc}
 80165ae:	bf00      	nop
 80165b0:	2000b3c6 	.word	0x2000b3c6

080165b4 <_ZN8touchgfx3HAL10initializeEv>:
 80165b4:	b510      	push	{r4, lr}
 80165b6:	4604      	mov	r4, r0
 80165b8:	f7fd ff16 	bl	80143e8 <_ZN8touchgfx10OSWrappers10initializeEv>
 80165bc:	6860      	ldr	r0, [r4, #4]
 80165be:	6803      	ldr	r3, [r0, #0]
 80165c0:	68db      	ldr	r3, [r3, #12]
 80165c2:	4798      	blx	r3
 80165c4:	68e0      	ldr	r0, [r4, #12]
 80165c6:	6803      	ldr	r3, [r0, #0]
 80165c8:	689b      	ldr	r3, [r3, #8]
 80165ca:	4798      	blx	r3
 80165cc:	6823      	ldr	r3, [r4, #0]
 80165ce:	4620      	mov	r0, r4
 80165d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80165d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165d6:	4718      	bx	r3

080165d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80165d8:	b508      	push	{r3, lr}
 80165da:	290c      	cmp	r1, #12
 80165dc:	d817      	bhi.n	801660e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80165de:	e8df f001 	tbb	[pc, r1]
 80165e2:	090b      	.short	0x090b
 80165e4:	0d0d0d07 	.word	0x0d0d0d07
 80165e8:	1414140d 	.word	0x1414140d
 80165ec:	1414      	.short	0x1414
 80165ee:	0d          	.byte	0x0d
 80165ef:	00          	.byte	0x00
 80165f0:	2020      	movs	r0, #32
 80165f2:	bd08      	pop	{r3, pc}
 80165f4:	2018      	movs	r0, #24
 80165f6:	e7fc      	b.n	80165f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165f8:	2010      	movs	r0, #16
 80165fa:	e7fa      	b.n	80165f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165fc:	4b05      	ldr	r3, [pc, #20]	; (8016614 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80165fe:	f44f 710c 	mov.w	r1, #560	; 0x230
 8016602:	4a05      	ldr	r2, [pc, #20]	; (8016618 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016604:	4805      	ldr	r0, [pc, #20]	; (801661c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016606:	f00f fa3b 	bl	8025a80 <__assert_func>
 801660a:	2008      	movs	r0, #8
 801660c:	e7f1      	b.n	80165f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801660e:	2000      	movs	r0, #0
 8016610:	e7ef      	b.n	80165f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016612:	bf00      	nop
 8016614:	080295d3 	.word	0x080295d3
 8016618:	08029968 	.word	0x08029968
 801661c:	080294da 	.word	0x080294da

08016620 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016620:	b570      	push	{r4, r5, r6, lr}
 8016622:	460d      	mov	r5, r1
 8016624:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016628:	4616      	mov	r6, r2
 801662a:	461c      	mov	r4, r3
 801662c:	f7ff ffd4 	bl	80165d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8016630:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016634:	10c0      	asrs	r0, r0, #3
 8016636:	fb06 5101 	mla	r1, r6, r1, r5
 801663a:	fb00 4001 	mla	r0, r0, r1, r4
 801663e:	bd70      	pop	{r4, r5, r6, pc}

08016640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8016640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016644:	b08a      	sub	sp, #40	; 0x28
 8016646:	f04f 0c00 	mov.w	ip, #0
 801664a:	4604      	mov	r4, r0
 801664c:	469a      	mov	sl, r3
 801664e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8016652:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8016656:	f1b8 0f02 	cmp.w	r8, #2
 801665a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801665e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016662:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016666:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801666a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801666e:	f8cd c020 	str.w	ip, [sp, #32]
 8016672:	d030      	beq.n	80166d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8016674:	2bff      	cmp	r3, #255	; 0xff
 8016676:	d12c      	bne.n	80166d2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8016678:	4560      	cmp	r0, ip
 801667a:	bf14      	ite	ne
 801667c:	2004      	movne	r0, #4
 801667e:	2001      	moveq	r0, #1
 8016680:	9204      	str	r2, [sp, #16]
 8016682:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016686:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801668a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801668e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016692:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801669a:	4620      	mov	r0, r4
 801669c:	f7ff ff5e 	bl	801655c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80166a0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80166a4:	4603      	mov	r3, r0
 80166a6:	4651      	mov	r1, sl
 80166a8:	4620      	mov	r0, r4
 80166aa:	e9cd 9700 	strd	r9, r7, [sp]
 80166ae:	f7ff ffb7 	bl	8016620 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80166b2:	f8ad 901e 	strh.w	r9, [sp, #30]
 80166b6:	9005      	str	r0, [sp, #20]
 80166b8:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80166bc:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80166c0:	b106      	cbz	r6, 80166c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 80166c2:	b98d      	cbnz	r5, 80166e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 80166c4:	4b12      	ldr	r3, [pc, #72]	; (8016710 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 80166c6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80166ca:	4a12      	ldr	r2, [pc, #72]	; (8016714 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80166cc:	4812      	ldr	r0, [pc, #72]	; (8016718 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80166ce:	f00f f9d7 	bl	8025a80 <__assert_func>
 80166d2:	2004      	movs	r0, #4
 80166d4:	e7d4      	b.n	8016680 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80166d6:	2bff      	cmp	r3, #255	; 0xff
 80166d8:	d104      	bne.n	80166e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80166da:	2800      	cmp	r0, #0
 80166dc:	bf14      	ite	ne
 80166de:	2040      	movne	r0, #64	; 0x40
 80166e0:	2020      	moveq	r0, #32
 80166e2:	e7cd      	b.n	8016680 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80166e4:	2040      	movs	r0, #64	; 0x40
 80166e6:	e7cb      	b.n	8016680 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80166e8:	6823      	ldr	r3, [r4, #0]
 80166ea:	4620      	mov	r0, r4
 80166ec:	9d02      	ldr	r5, [sp, #8]
 80166ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166f0:	4798      	blx	r3
 80166f2:	4228      	tst	r0, r5
 80166f4:	d104      	bne.n	8016700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80166f6:	4b09      	ldr	r3, [pc, #36]	; (801671c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80166f8:	f240 11b1 	movw	r1, #433	; 0x1b1
 80166fc:	4a05      	ldr	r2, [pc, #20]	; (8016714 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80166fe:	e7e5      	b.n	80166cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8016700:	6860      	ldr	r0, [r4, #4]
 8016702:	a902      	add	r1, sp, #8
 8016704:	6803      	ldr	r3, [r0, #0]
 8016706:	685b      	ldr	r3, [r3, #4]
 8016708:	4798      	blx	r3
 801670a:	b00a      	add	sp, #40	; 0x28
 801670c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016710:	08029556 	.word	0x08029556
 8016714:	0802980a 	.word	0x0802980a
 8016718:	080294da 	.word	0x080294da
 801671c:	0802958e 	.word	0x0802958e

08016720 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8016720:	b510      	push	{r4, lr}
 8016722:	b08a      	sub	sp, #40	; 0x28
 8016724:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016728:	9408      	str	r4, [sp, #32]
 801672a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801672e:	9407      	str	r4, [sp, #28]
 8016730:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8016734:	9406      	str	r4, [sp, #24]
 8016736:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801673a:	9405      	str	r4, [sp, #20]
 801673c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8016740:	9404      	str	r4, [sp, #16]
 8016742:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8016746:	9403      	str	r4, [sp, #12]
 8016748:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801674c:	9402      	str	r4, [sp, #8]
 801674e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8016752:	e9cd 3400 	strd	r3, r4, [sp]
 8016756:	4613      	mov	r3, r2
 8016758:	2200      	movs	r2, #0
 801675a:	f7ff ff71 	bl	8016640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801675e:	b00a      	add	sp, #40	; 0x28
 8016760:	bd10      	pop	{r4, pc}
	...

08016764 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016766:	b08b      	sub	sp, #44	; 0x2c
 8016768:	4616      	mov	r6, r2
 801676a:	460d      	mov	r5, r1
 801676c:	461f      	mov	r7, r3
 801676e:	4604      	mov	r4, r0
 8016770:	f7f6 f888 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8016774:	6803      	ldr	r3, [r0, #0]
 8016776:	6a1b      	ldr	r3, [r3, #32]
 8016778:	4798      	blx	r3
 801677a:	4b0e      	ldr	r3, [pc, #56]	; (80167b4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801677c:	2200      	movs	r2, #0
 801677e:	4629      	mov	r1, r5
 8016780:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016784:	881b      	ldrh	r3, [r3, #0]
 8016786:	4620      	mov	r0, r4
 8016788:	9306      	str	r3, [sp, #24]
 801678a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801678e:	9305      	str	r3, [sp, #20]
 8016790:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016794:	9304      	str	r3, [sp, #16]
 8016796:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801679a:	9303      	str	r3, [sp, #12]
 801679c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80167a0:	9302      	str	r3, [sp, #8]
 80167a2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80167a6:	e9cd 7300 	strd	r7, r3, [sp]
 80167aa:	4633      	mov	r3, r6
 80167ac:	f7ff ff48 	bl	8016640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80167b0:	b00b      	add	sp, #44	; 0x2c
 80167b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167b4:	2000b3c2 	.word	0x2000b3c2

080167b8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80167b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167bc:	461f      	mov	r7, r3
 80167be:	4b14      	ldr	r3, [pc, #80]	; (8016810 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80167c0:	b08a      	sub	sp, #40	; 0x28
 80167c2:	4616      	mov	r6, r2
 80167c4:	f8b3 8000 	ldrh.w	r8, [r3]
 80167c8:	460d      	mov	r5, r1
 80167ca:	4604      	mov	r4, r0
 80167cc:	f7f6 f85a 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 80167d0:	6803      	ldr	r3, [r0, #0]
 80167d2:	6a1b      	ldr	r3, [r3, #32]
 80167d4:	4798      	blx	r3
 80167d6:	2302      	movs	r3, #2
 80167d8:	9008      	str	r0, [sp, #32]
 80167da:	2200      	movs	r2, #0
 80167dc:	4629      	mov	r1, r5
 80167de:	4620      	mov	r0, r4
 80167e0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80167e4:	2301      	movs	r3, #1
 80167e6:	9305      	str	r3, [sp, #20]
 80167e8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80167ec:	9304      	str	r3, [sp, #16]
 80167ee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80167f2:	9303      	str	r3, [sp, #12]
 80167f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80167f8:	9302      	str	r3, [sp, #8]
 80167fa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80167fe:	e9cd 7300 	strd	r7, r3, [sp]
 8016802:	4633      	mov	r3, r6
 8016804:	f7ff ff1c 	bl	8016640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016808:	b00a      	add	sp, #40	; 0x28
 801680a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801680e:	bf00      	nop
 8016810:	2000b3c2 	.word	0x2000b3c2

08016814 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016818:	b08b      	sub	sp, #44	; 0x2c
 801681a:	469b      	mov	fp, r3
 801681c:	4604      	mov	r4, r0
 801681e:	4692      	mov	sl, r2
 8016820:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016824:	2600      	movs	r6, #0
 8016826:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801682a:	4689      	mov	r9, r1
 801682c:	2fff      	cmp	r7, #255	; 0xff
 801682e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8016832:	9608      	str	r6, [sp, #32]
 8016834:	bf14      	ite	ne
 8016836:	2308      	movne	r3, #8
 8016838:	2302      	moveq	r3, #2
 801683a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801683e:	f7ff fe8d 	bl	801655c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016842:	465a      	mov	r2, fp
 8016844:	4603      	mov	r3, r0
 8016846:	4651      	mov	r1, sl
 8016848:	4620      	mov	r0, r4
 801684a:	e9cd 8500 	strd	r8, r5, [sp]
 801684e:	f7ff fee7 	bl	8016620 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016852:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016856:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801685a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801685e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016862:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016866:	f8ad 301a 	strh.w	r3, [sp, #26]
 801686a:	6823      	ldr	r3, [r4, #0]
 801686c:	9d02      	ldr	r5, [sp, #8]
 801686e:	9005      	str	r0, [sp, #20]
 8016870:	4620      	mov	r0, r4
 8016872:	f8ad 601c 	strh.w	r6, [sp, #28]
 8016876:	f8ad 801e 	strh.w	r8, [sp, #30]
 801687a:	f8cd 9020 	str.w	r9, [sp, #32]
 801687e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016884:	4798      	blx	r3
 8016886:	4228      	tst	r0, r5
 8016888:	d106      	bne.n	8016898 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801688a:	4b07      	ldr	r3, [pc, #28]	; (80168a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801688c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8016890:	4a06      	ldr	r2, [pc, #24]	; (80168ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016892:	4807      	ldr	r0, [pc, #28]	; (80168b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016894:	f00f f8f4 	bl	8025a80 <__assert_func>
 8016898:	6860      	ldr	r0, [r4, #4]
 801689a:	a902      	add	r1, sp, #8
 801689c:	6803      	ldr	r3, [r0, #0]
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	4798      	blx	r3
 80168a2:	b00b      	add	sp, #44	; 0x2c
 80168a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168a8:	0802958e 	.word	0x0802958e
 80168ac:	080298d3 	.word	0x080298d3
 80168b0:	080294da 	.word	0x080294da

080168b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80168b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80168b8:	461f      	mov	r7, r3
 80168ba:	4b0b      	ldr	r3, [pc, #44]	; (80168e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80168bc:	460d      	mov	r5, r1
 80168be:	4616      	mov	r6, r2
 80168c0:	f8b3 8000 	ldrh.w	r8, [r3]
 80168c4:	4604      	mov	r4, r0
 80168c6:	f7f5 ffdd 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 80168ca:	6803      	ldr	r3, [r0, #0]
 80168cc:	6a1b      	ldr	r3, [r3, #32]
 80168ce:	4798      	blx	r3
 80168d0:	463b      	mov	r3, r7
 80168d2:	4632      	mov	r2, r6
 80168d4:	4629      	mov	r1, r5
 80168d6:	e9cd 8000 	strd	r8, r0, [sp]
 80168da:	4620      	mov	r0, r4
 80168dc:	f7ff fea0 	bl	8016620 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80168e0:	b002      	add	sp, #8
 80168e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168e6:	bf00      	nop
 80168e8:	2000b3c2 	.word	0x2000b3c2

080168ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80168ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f0:	4698      	mov	r8, r3
 80168f2:	b088      	sub	sp, #32
 80168f4:	2300      	movs	r3, #0
 80168f6:	4617      	mov	r7, r2
 80168f8:	4604      	mov	r4, r0
 80168fa:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80168fe:	9306      	str	r3, [sp, #24]
 8016900:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016904:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016908:	f8ad 6010 	strh.w	r6, [sp, #16]
 801690c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8016910:	e9cd 3100 	strd	r3, r1, [sp]
 8016914:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016918:	f8ad 3014 	strh.w	r3, [sp, #20]
 801691c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016920:	f88d 301c 	strb.w	r3, [sp, #28]
 8016924:	f7ff fe1a 	bl	801655c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016928:	4642      	mov	r2, r8
 801692a:	4603      	mov	r3, r0
 801692c:	4639      	mov	r1, r7
 801692e:	4620      	mov	r0, r4
 8016930:	f7ff ffc0 	bl	80168b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016934:	4b16      	ldr	r3, [pc, #88]	; (8016990 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8016936:	9003      	str	r0, [sp, #12]
 8016938:	881b      	ldrh	r3, [r3, #0]
 801693a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801693e:	f7f5 ffa1 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8016942:	6803      	ldr	r3, [r0, #0]
 8016944:	6a1b      	ldr	r3, [r3, #32]
 8016946:	4798      	blx	r3
 8016948:	f88d 001e 	strb.w	r0, [sp, #30]
 801694c:	f88d 001d 	strb.w	r0, [sp, #29]
 8016950:	b106      	cbz	r6, 8016954 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016952:	b935      	cbnz	r5, 8016962 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016954:	4b0f      	ldr	r3, [pc, #60]	; (8016994 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016956:	f240 11cd 	movw	r1, #461	; 0x1cd
 801695a:	4a0f      	ldr	r2, [pc, #60]	; (8016998 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801695c:	480f      	ldr	r0, [pc, #60]	; (801699c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801695e:	f00f f88f 	bl	8025a80 <__assert_func>
 8016962:	6823      	ldr	r3, [r4, #0]
 8016964:	4620      	mov	r0, r4
 8016966:	9d00      	ldr	r5, [sp, #0]
 8016968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801696a:	4798      	blx	r3
 801696c:	4228      	tst	r0, r5
 801696e:	d104      	bne.n	801697a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016970:	4b0b      	ldr	r3, [pc, #44]	; (80169a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016972:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8016976:	4a08      	ldr	r2, [pc, #32]	; (8016998 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016978:	e7f0      	b.n	801695c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801697a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801697c:	4669      	mov	r1, sp
 801697e:	6860      	ldr	r0, [r4, #4]
 8016980:	9306      	str	r3, [sp, #24]
 8016982:	6803      	ldr	r3, [r0, #0]
 8016984:	685b      	ldr	r3, [r3, #4]
 8016986:	4798      	blx	r3
 8016988:	b008      	add	sp, #32
 801698a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801698e:	bf00      	nop
 8016990:	2000b3c2 	.word	0x2000b3c2
 8016994:	08029556 	.word	0x08029556
 8016998:	080296bc 	.word	0x080296bc
 801699c:	080294da 	.word	0x080294da
 80169a0:	0802958e 	.word	0x0802958e

080169a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80169a4:	b570      	push	{r4, r5, r6, lr}
 80169a6:	b08a      	sub	sp, #40	; 0x28
 80169a8:	4604      	mov	r4, r0
 80169aa:	466b      	mov	r3, sp
 80169ac:	e883 0006 	stmia.w	r3, {r1, r2}
 80169b0:	4b1f      	ldr	r3, [pc, #124]	; (8016a30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80169b2:	781b      	ldrb	r3, [r3, #0]
 80169b4:	b933      	cbnz	r3, 80169c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80169b6:	4b1f      	ldr	r3, [pc, #124]	; (8016a34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80169b8:	f240 11f9 	movw	r1, #505	; 0x1f9
 80169bc:	4a1e      	ldr	r2, [pc, #120]	; (8016a38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80169be:	481f      	ldr	r0, [pc, #124]	; (8016a3c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80169c0:	f00f f85e 	bl	8025a80 <__assert_func>
 80169c4:	2300      	movs	r3, #0
 80169c6:	f8bd 5000 	ldrh.w	r5, [sp]
 80169ca:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80169ce:	9308      	str	r3, [sp, #32]
 80169d0:	2301      	movs	r3, #1
 80169d2:	9302      	str	r3, [sp, #8]
 80169d4:	6803      	ldr	r3, [r0, #0]
 80169d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169d8:	4798      	blx	r3
 80169da:	4632      	mov	r2, r6
 80169dc:	4629      	mov	r1, r5
 80169de:	4603      	mov	r3, r0
 80169e0:	4620      	mov	r0, r4
 80169e2:	f7ff ff67 	bl	80168b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80169e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80169e8:	9003      	str	r0, [sp, #12]
 80169ea:	9305      	str	r3, [sp, #20]
 80169ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80169f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80169f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80169f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80169fc:	4b10      	ldr	r3, [pc, #64]	; (8016a40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80169fe:	881b      	ldrh	r3, [r3, #0]
 8016a00:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016a04:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016a08:	f7f5 ff3c 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8016a0c:	6803      	ldr	r3, [r0, #0]
 8016a0e:	6a1b      	ldr	r3, [r3, #32]
 8016a10:	4798      	blx	r3
 8016a12:	23ff      	movs	r3, #255	; 0xff
 8016a14:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016a18:	a902      	add	r1, sp, #8
 8016a1a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016a1e:	6860      	ldr	r0, [r4, #4]
 8016a20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016a24:	6803      	ldr	r3, [r0, #0]
 8016a26:	685b      	ldr	r3, [r3, #4]
 8016a28:	4798      	blx	r3
 8016a2a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016a2c:	b00a      	add	sp, #40	; 0x28
 8016a2e:	bd70      	pop	{r4, r5, r6, pc}
 8016a30:	2000b3c7 	.word	0x2000b3c7
 8016a34:	08029427 	.word	0x08029427
 8016a38:	08029760 	.word	0x08029760
 8016a3c:	080294da 	.word	0x080294da
 8016a40:	2000b3c2 	.word	0x2000b3c2

08016a44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a46:	b08b      	sub	sp, #44	; 0x2c
 8016a48:	4604      	mov	r4, r0
 8016a4a:	466d      	mov	r5, sp
 8016a4c:	e885 0006 	stmia.w	r5, {r1, r2}
 8016a50:	461d      	mov	r5, r3
 8016a52:	2300      	movs	r3, #0
 8016a54:	f8bd 6000 	ldrh.w	r6, [sp]
 8016a58:	9308      	str	r3, [sp, #32]
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016a60:	9302      	str	r3, [sp, #8]
 8016a62:	6803      	ldr	r3, [r0, #0]
 8016a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a66:	4798      	blx	r3
 8016a68:	463a      	mov	r2, r7
 8016a6a:	4631      	mov	r1, r6
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	4620      	mov	r0, r4
 8016a70:	f7ff ff20 	bl	80168b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016a74:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016a78:	9003      	str	r0, [sp, #12]
 8016a7a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016a7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016a82:	9505      	str	r5, [sp, #20]
 8016a84:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016a88:	4b0d      	ldr	r3, [pc, #52]	; (8016ac0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016a8a:	881b      	ldrh	r3, [r3, #0]
 8016a8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a92:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016a96:	f7f5 fef5 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8016a9a:	6803      	ldr	r3, [r0, #0]
 8016a9c:	6a1b      	ldr	r3, [r3, #32]
 8016a9e:	4798      	blx	r3
 8016aa0:	23ff      	movs	r3, #255	; 0xff
 8016aa2:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016aa6:	a902      	add	r1, sp, #8
 8016aa8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016aac:	6860      	ldr	r0, [r4, #4]
 8016aae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016ab2:	6803      	ldr	r3, [r0, #0]
 8016ab4:	685b      	ldr	r3, [r3, #4]
 8016ab6:	4798      	blx	r3
 8016ab8:	4628      	mov	r0, r5
 8016aba:	b00b      	add	sp, #44	; 0x2c
 8016abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016abe:	bf00      	nop
 8016ac0:	2000b3c2 	.word	0x2000b3c2

08016ac4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016ac4:	b570      	push	{r4, r5, r6, lr}
 8016ac6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016aca:	4604      	mov	r4, r0
 8016acc:	b19b      	cbz	r3, 8016af6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016ace:	2002      	movs	r0, #2
 8016ad0:	f7fd fa04 	bl	8013edc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016adc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016ae0:	6823      	ldr	r3, [r4, #0]
 8016ae2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016ae6:	f7ff fd39 	bl	801655c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016aea:	4601      	mov	r1, r0
 8016aec:	4620      	mov	r0, r4
 8016aee:	462b      	mov	r3, r5
 8016af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016af4:	4718      	bx	r3
 8016af6:	bd70      	pop	{r4, r5, r6, pc}

08016af8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016af8:	4770      	bx	lr

08016afa <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016afa:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016afe:	1a13      	subs	r3, r2, r0
 8016b00:	4258      	negs	r0, r3
 8016b02:	4158      	adcs	r0, r3
 8016b04:	4770      	bx	lr

08016b06 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016b06:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016b0a:	1a9b      	subs	r3, r3, r2
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	bfdc      	itt	le
 8016b10:	6882      	ldrle	r2, [r0, #8]
 8016b12:	189b      	addle	r3, r3, r2
 8016b14:	2b01      	cmp	r3, #1
 8016b16:	bfcc      	ite	gt
 8016b18:	2000      	movgt	r0, #0
 8016b1a:	2001      	movle	r0, #1
 8016b1c:	4770      	bx	lr

08016b1e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016b1e:	6902      	ldr	r2, [r0, #16]
 8016b20:	6840      	ldr	r0, [r0, #4]
 8016b22:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016b26:	4770      	bx	lr

08016b28 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016b28:	6803      	ldr	r3, [r0, #0]
 8016b2a:	691b      	ldr	r3, [r3, #16]
 8016b2c:	4718      	bx	r3

08016b2e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016b2e:	4770      	bx	lr

08016b30 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016b30:	4770      	bx	lr
	...

08016b34 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016b34:	2301      	movs	r3, #1
 8016b36:	b570      	push	{r4, r5, r6, lr}
 8016b38:	7203      	strb	r3, [r0, #8]
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	6840      	ldr	r0, [r0, #4]
 8016b3e:	6803      	ldr	r3, [r0, #0]
 8016b40:	699b      	ldr	r3, [r3, #24]
 8016b42:	4798      	blx	r3
 8016b44:	6803      	ldr	r3, [r0, #0]
 8016b46:	4605      	mov	r5, r0
 8016b48:	2b08      	cmp	r3, #8
 8016b4a:	d01e      	beq.n	8016b8a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8016b4c:	d80b      	bhi.n	8016b66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016b4e:	2b02      	cmp	r3, #2
 8016b50:	d027      	beq.n	8016ba2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016b52:	2b04      	cmp	r3, #4
 8016b54:	d011      	beq.n	8016b7a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	d028      	beq.n	8016bac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016b5a:	4b17      	ldr	r3, [pc, #92]	; (8016bb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8016b5c:	218b      	movs	r1, #139	; 0x8b
 8016b5e:	4a17      	ldr	r2, [pc, #92]	; (8016bbc <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8016b60:	4817      	ldr	r0, [pc, #92]	; (8016bc0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8016b62:	f00e ff8d 	bl	8025a80 <__assert_func>
 8016b66:	2b40      	cmp	r3, #64	; 0x40
 8016b68:	d020      	beq.n	8016bac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016b6a:	d801      	bhi.n	8016b70 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016b6c:	2b20      	cmp	r3, #32
 8016b6e:	e7f3      	b.n	8016b58 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016b70:	2b80      	cmp	r3, #128	; 0x80
 8016b72:	d01b      	beq.n	8016bac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b78:	e7ee      	b.n	8016b58 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	7f01      	ldrb	r1, [r0, #28]
 8016b7e:	4620      	mov	r0, r4
 8016b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b82:	4798      	blx	r3
 8016b84:	6823      	ldr	r3, [r4, #0]
 8016b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b88:	e006      	b.n	8016b98 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016b8a:	6823      	ldr	r3, [r4, #0]
 8016b8c:	7f01      	ldrb	r1, [r0, #28]
 8016b8e:	4620      	mov	r0, r4
 8016b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b92:	4798      	blx	r3
 8016b94:	6823      	ldr	r3, [r4, #0]
 8016b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b98:	4629      	mov	r1, r5
 8016b9a:	4620      	mov	r0, r4
 8016b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ba0:	4718      	bx	r3
 8016ba2:	6823      	ldr	r3, [r4, #0]
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ba8:	4798      	blx	r3
 8016baa:	e7f3      	b.n	8016b94 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016bac:	6823      	ldr	r3, [r4, #0]
 8016bae:	4620      	mov	r0, r4
 8016bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bb2:	4798      	blx	r3
 8016bb4:	e7e6      	b.n	8016b84 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016bb6:	bf00      	nop
 8016bb8:	080299b1 	.word	0x080299b1
 8016bbc:	08029ac0 	.word	0x08029ac0
 8016bc0:	080299d6 	.word	0x080299d6

08016bc4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016bc4:	b570      	push	{r4, r5, r6, lr}
 8016bc6:	4604      	mov	r4, r0
 8016bc8:	460e      	mov	r6, r1
 8016bca:	6860      	ldr	r0, [r4, #4]
 8016bcc:	6803      	ldr	r3, [r0, #0]
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	4798      	blx	r3
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	d1f9      	bne.n	8016bca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016bd6:	4d0b      	ldr	r5, [pc, #44]	; (8016c04 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016bd8:	6828      	ldr	r0, [r5, #0]
 8016bda:	6803      	ldr	r3, [r0, #0]
 8016bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bde:	4798      	blx	r3
 8016be0:	f7fd fc52 	bl	8014488 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016be4:	6860      	ldr	r0, [r4, #4]
 8016be6:	4631      	mov	r1, r6
 8016be8:	6803      	ldr	r3, [r0, #0]
 8016bea:	689b      	ldr	r3, [r3, #8]
 8016bec:	4798      	blx	r3
 8016bee:	6823      	ldr	r3, [r4, #0]
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bf4:	4798      	blx	r3
 8016bf6:	6828      	ldr	r0, [r5, #0]
 8016bf8:	6803      	ldr	r3, [r0, #0]
 8016bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c00:	4718      	bx	r3
 8016c02:	bf00      	nop
 8016c04:	2000b3c8 	.word	0x2000b3c8

08016c08 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016c08:	b508      	push	{r3, lr}
 8016c0a:	f7fd fc23 	bl	8014454 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016c12:	f7fd bc2d 	b.w	8014470 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016c16 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016c16:	b510      	push	{r4, lr}
 8016c18:	4604      	mov	r4, r0
 8016c1a:	6840      	ldr	r0, [r0, #4]
 8016c1c:	6803      	ldr	r3, [r0, #0]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	4798      	blx	r3
 8016c22:	b948      	cbnz	r0, 8016c38 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016c24:	7a63      	ldrb	r3, [r4, #9]
 8016c26:	b13b      	cbz	r3, 8016c38 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016c28:	7a23      	ldrb	r3, [r4, #8]
 8016c2a:	b92b      	cbnz	r3, 8016c38 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016c2c:	6823      	ldr	r3, [r4, #0]
 8016c2e:	4620      	mov	r0, r4
 8016c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c36:	4718      	bx	r3
 8016c38:	bd10      	pop	{r4, pc}
	...

08016c3c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016c3c:	b510      	push	{r4, lr}
 8016c3e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016c42:	1b12      	subs	r2, r2, r4
 8016c44:	2a00      	cmp	r2, #0
 8016c46:	bfdc      	itt	le
 8016c48:	6883      	ldrle	r3, [r0, #8]
 8016c4a:	18d2      	addle	r2, r2, r3
 8016c4c:	2a01      	cmp	r2, #1
 8016c4e:	dd18      	ble.n	8016c82 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016c50:	6843      	ldr	r3, [r0, #4]
 8016c52:	f101 021c 	add.w	r2, r1, #28
 8016c56:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016c5a:	f851 4b04 	ldr.w	r4, [r1], #4
 8016c5e:	4291      	cmp	r1, r2
 8016c60:	f843 4b04 	str.w	r4, [r3], #4
 8016c64:	d1f9      	bne.n	8016c5a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016c66:	880a      	ldrh	r2, [r1, #0]
 8016c68:	801a      	strh	r2, [r3, #0]
 8016c6a:	788a      	ldrb	r2, [r1, #2]
 8016c6c:	709a      	strb	r2, [r3, #2]
 8016c6e:	68c3      	ldr	r3, [r0, #12]
 8016c70:	6882      	ldr	r2, [r0, #8]
 8016c72:	f3bf 8f5b 	dmb	ish
 8016c76:	3301      	adds	r3, #1
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	bfd8      	it	le
 8016c7c:	1a9b      	suble	r3, r3, r2
 8016c7e:	60c3      	str	r3, [r0, #12]
 8016c80:	bd10      	pop	{r4, pc}
 8016c82:	4b03      	ldr	r3, [pc, #12]	; (8016c90 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016c84:	2139      	movs	r1, #57	; 0x39
 8016c86:	4a03      	ldr	r2, [pc, #12]	; (8016c94 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016c88:	4803      	ldr	r0, [pc, #12]	; (8016c98 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016c8a:	f00e fef9 	bl	8025a80 <__assert_func>
 8016c8e:	bf00      	nop
 8016c90:	080299fc 	.word	0x080299fc
 8016c94:	08029af0 	.word	0x08029af0
 8016c98:	080299d6 	.word	0x080299d6

08016c9c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016c9c:	b510      	push	{r4, lr}
 8016c9e:	6803      	ldr	r3, [r0, #0]
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	4798      	blx	r3
 8016ca6:	b128      	cbz	r0, 8016cb4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016ca8:	4b07      	ldr	r3, [pc, #28]	; (8016cc8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016caa:	213f      	movs	r1, #63	; 0x3f
 8016cac:	4a07      	ldr	r2, [pc, #28]	; (8016ccc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016cae:	4808      	ldr	r0, [pc, #32]	; (8016cd0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016cb0:	f00e fee6 	bl	8025a80 <__assert_func>
 8016cb4:	6923      	ldr	r3, [r4, #16]
 8016cb6:	68a2      	ldr	r2, [r4, #8]
 8016cb8:	f3bf 8f5b 	dmb	ish
 8016cbc:	3301      	adds	r3, #1
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	bfd8      	it	le
 8016cc2:	1a9b      	suble	r3, r3, r2
 8016cc4:	6123      	str	r3, [r4, #16]
 8016cc6:	bd10      	pop	{r4, pc}
 8016cc8:	08029a1f 	.word	0x08029a1f
 8016ccc:	08029b3e 	.word	0x08029b3e
 8016cd0:	080299d6 	.word	0x080299d6

08016cd4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016cd4:	b570      	push	{r4, r5, r6, lr}
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	6840      	ldr	r0, [r0, #4]
 8016cda:	6803      	ldr	r3, [r0, #0]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	4798      	blx	r3
 8016ce0:	4605      	mov	r5, r0
 8016ce2:	b930      	cbnz	r0, 8016cf2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016ce4:	7a23      	ldrb	r3, [r4, #8]
 8016ce6:	b123      	cbz	r3, 8016cf2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016ce8:	6860      	ldr	r0, [r4, #4]
 8016cea:	6803      	ldr	r3, [r0, #0]
 8016cec:	695b      	ldr	r3, [r3, #20]
 8016cee:	4798      	blx	r3
 8016cf0:	7225      	strb	r5, [r4, #8]
 8016cf2:	6860      	ldr	r0, [r4, #4]
 8016cf4:	6803      	ldr	r3, [r0, #0]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	4798      	blx	r3
 8016cfa:	b928      	cbnz	r0, 8016d08 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016cfc:	6823      	ldr	r3, [r4, #0]
 8016cfe:	4620      	mov	r0, r4
 8016d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d06:	4718      	bx	r3
 8016d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d0c:	f7fd bbc8 	b.w	80144a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016d10 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016d10:	b510      	push	{r4, lr}
 8016d12:	6082      	str	r2, [r0, #8]
 8016d14:	2200      	movs	r2, #0
 8016d16:	4c03      	ldr	r4, [pc, #12]	; (8016d24 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016d18:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016d1c:	e9c0 4100 	strd	r4, r1, [r0]
 8016d20:	bd10      	pop	{r4, pc}
 8016d22:	bf00      	nop
 8016d24:	08029aa4 	.word	0x08029aa4

08016d28 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016d28:	6840      	ldr	r0, [r0, #4]
 8016d2a:	6803      	ldr	r3, [r0, #0]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	4718      	bx	r3

08016d30 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016d30:	2001      	movs	r0, #1
 8016d32:	4770      	bx	lr

08016d34 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d38:	460d      	mov	r5, r1
 8016d3a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016d3e:	b085      	sub	sp, #20
 8016d40:	4690      	mov	r8, r2
 8016d42:	4411      	add	r1, r2
 8016d44:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016d48:	4699      	mov	r9, r3
 8016d4a:	6803      	ldr	r3, [r0, #0]
 8016d4c:	60c1      	str	r1, [r0, #12]
 8016d4e:	4604      	mov	r4, r0
 8016d50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d52:	440a      	add	r2, r1
 8016d54:	6102      	str	r2, [r0, #16]
 8016d56:	695b      	ldr	r3, [r3, #20]
 8016d58:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016d5c:	4798      	blx	r3
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	d039      	beq.n	8016dd6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8016d62:	44c8      	add	r8, r9
 8016d64:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016d68:	4445      	add	r5, r8
 8016d6a:	6823      	ldr	r3, [r4, #0]
 8016d6c:	f10d 020f 	add.w	r2, sp, #15
 8016d70:	a903      	add	r1, sp, #12
 8016d72:	4620      	mov	r0, r4
 8016d74:	9200      	str	r2, [sp, #0]
 8016d76:	f10d 020d 	add.w	r2, sp, #13
 8016d7a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8016d7e:	f10d 030e 	add.w	r3, sp, #14
 8016d82:	47c0      	blx	r8
 8016d84:	b1f8      	cbz	r0, 8016dc6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016d86:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016d8a:	7a20      	ldrb	r0, [r4, #8]
 8016d8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016d90:	4358      	muls	r0, r3
 8016d92:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016d96:	1c43      	adds	r3, r0, #1
 8016d98:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016d9c:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016da0:	121b      	asrs	r3, r3, #8
 8016da2:	fb10 f003 	smulbb	r0, r0, r3
 8016da6:	b283      	uxth	r3, r0
 8016da8:	1c58      	adds	r0, r3, #1
 8016daa:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016dae:	6823      	ldr	r3, [r4, #0]
 8016db0:	1200      	asrs	r0, r0, #8
 8016db2:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8016db6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016dba:	28ff      	cmp	r0, #255	; 0xff
 8016dbc:	d10e      	bne.n	8016ddc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016dbe:	9100      	str	r1, [sp, #0]
 8016dc0:	4629      	mov	r1, r5
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	47c0      	blx	r8
 8016dc6:	68e3      	ldr	r3, [r4, #12]
 8016dc8:	3e01      	subs	r6, #1
 8016dca:	f105 0503 	add.w	r5, r5, #3
 8016dce:	f103 0301 	add.w	r3, r3, #1
 8016dd2:	60e3      	str	r3, [r4, #12]
 8016dd4:	d1c9      	bne.n	8016d6a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016dd6:	b005      	add	sp, #20
 8016dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ddc:	fa1f fc80 	uxth.w	ip, r0
 8016de0:	43c0      	mvns	r0, r0
 8016de2:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016de6:	fb12 f20c 	smulbb	r2, r2, ip
 8016dea:	b2c0      	uxtb	r0, r0
 8016dec:	fb13 f30c 	smulbb	r3, r3, ip
 8016df0:	fb0e 2200 	mla	r2, lr, r0, r2
 8016df4:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016df8:	fb11 f10c 	smulbb	r1, r1, ip
 8016dfc:	fb0e 3300 	mla	r3, lr, r0, r3
 8016e00:	f895 e000 	ldrb.w	lr, [r5]
 8016e04:	b292      	uxth	r2, r2
 8016e06:	b29b      	uxth	r3, r3
 8016e08:	fb0e 1000 	mla	r0, lr, r0, r1
 8016e0c:	1c59      	adds	r1, r3, #1
 8016e0e:	b280      	uxth	r0, r0
 8016e10:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016e14:	1c51      	adds	r1, r2, #1
 8016e16:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016e1a:	1c41      	adds	r1, r0, #1
 8016e1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016e20:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016e24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016e28:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016e2c:	9000      	str	r0, [sp, #0]
 8016e2e:	e7c7      	b.n	8016dc0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016e30 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016e30:	f89d 0000 	ldrb.w	r0, [sp]
 8016e34:	704b      	strb	r3, [r1, #1]
 8016e36:	7008      	strb	r0, [r1, #0]
 8016e38:	708a      	strb	r2, [r1, #2]
 8016e3a:	4770      	bx	lr

08016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016e3c:	b507      	push	{r0, r1, r2, lr}
 8016e3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016e42:	ab01      	add	r3, sp, #4
 8016e44:	6809      	ldr	r1, [r1, #0]
 8016e46:	6800      	ldr	r0, [r0, #0]
 8016e48:	f003 fa2a 	bl	801a2a0 <_ZN8touchgfx6muldivElllRl>
 8016e4c:	b003      	add	sp, #12
 8016e4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016e54 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016e54:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016e58:	fb90 f3f2 	sdiv	r3, r0, r2
 8016e5c:	fb03 0312 	mls	r3, r3, r2, r0
 8016e60:	4413      	add	r3, r2
 8016e62:	fb93 f0f2 	sdiv	r0, r3, r2
 8016e66:	fb02 3010 	mls	r0, r2, r0, r3
 8016e6a:	4b0a      	ldr	r3, [pc, #40]	; (8016e94 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016e6c:	285a      	cmp	r0, #90	; 0x5a
 8016e6e:	dc02      	bgt.n	8016e76 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016e70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016e74:	4770      	bx	lr
 8016e76:	28b4      	cmp	r0, #180	; 0xb4
 8016e78:	dc02      	bgt.n	8016e80 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016e7a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016e7e:	e7f7      	b.n	8016e70 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016e80:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016e84:	bfd4      	ite	le
 8016e86:	38b4      	suble	r0, #180	; 0xb4
 8016e88:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016e8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016e90:	4240      	negs	r0, r0
 8016e92:	4770      	bx	lr
 8016e94:	08029b98 	.word	0x08029b98

08016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8016e98:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016e9c:	fb90 f3f2 	sdiv	r3, r0, r2
 8016ea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ea2:	fb03 0012 	mls	r0, r3, r2, r0
 8016ea6:	4410      	add	r0, r2
 8016ea8:	fb90 f4f2 	sdiv	r4, r0, r2
 8016eac:	fb02 0414 	mls	r4, r2, r4, r0
 8016eb0:	f004 061f 	and.w	r6, r4, #31
 8016eb4:	1164      	asrs	r4, r4, #5
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	f7ff ffcc 	bl	8016e54 <_ZN8touchgfx7CWRUtil4sineEi>
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	b90e      	cbnz	r6, 8016ec4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8016ec0:	b002      	add	sp, #8
 8016ec2:	bd70      	pop	{r4, r5, r6, pc}
 8016ec4:	1c60      	adds	r0, r4, #1
 8016ec6:	f7ff ffc5 	bl	8016e54 <_ZN8touchgfx7CWRUtil4sineEi>
 8016eca:	ab01      	add	r3, sp, #4
 8016ecc:	2220      	movs	r2, #32
 8016ece:	4631      	mov	r1, r6
 8016ed0:	1b40      	subs	r0, r0, r5
 8016ed2:	f003 f9e5 	bl	801a2a0 <_ZN8touchgfx6muldivElllRl>
 8016ed6:	4428      	add	r0, r5
 8016ed8:	e7f2      	b.n	8016ec0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08016eda <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8016eda:	b508      	push	{r3, lr}
 8016edc:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8016ee0:	f7ff ffda 	bl	8016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016ee4:	bd08      	pop	{r3, pc}
	...

08016ee8 <_ZN8touchgfx6CircleC1Ev>:
 8016ee8:	b510      	push	{r4, lr}
 8016eea:	4604      	mov	r4, r0
 8016eec:	f000 fce2 	bl	80178b4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016ef0:	4b08      	ldr	r3, [pc, #32]	; (8016f14 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8016ef2:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	6023      	str	r3, [r4, #0]
 8016efa:	2300      	movs	r3, #0
 8016efc:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8016f00:	f24b 4205 	movw	r2, #46085	; 0xb405
 8016f04:	60a3      	str	r3, [r4, #8]
 8016f06:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016f0a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016f0e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8016f12:	bd10      	pop	{r4, pc}
 8016f14:	08029c58 	.word	0x08029c58

08016f18 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016f1c:	4606      	mov	r6, r0
 8016f1e:	6810      	ldr	r0, [r2, #0]
 8016f20:	4698      	mov	r8, r3
 8016f22:	4691      	mov	r9, r2
 8016f24:	460f      	mov	r7, r1
 8016f26:	f7ff ffb7 	bl	8016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016f2a:	a902      	add	r1, sp, #8
 8016f2c:	2402      	movs	r4, #2
 8016f2e:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016f32:	4640      	mov	r0, r8
 8016f34:	f7ff ff82 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016f38:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8016f3a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016f3e:	4405      	add	r5, r0
 8016f40:	f8d9 0000 	ldr.w	r0, [r9]
 8016f44:	f7ff ffc9 	bl	8016eda <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016f48:	a902      	add	r1, sp, #8
 8016f4a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016f4e:	4640      	mov	r0, r8
 8016f50:	f7ff ff74 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016f54:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8016f56:	4629      	mov	r1, r5
 8016f58:	fb90 f0f4 	sdiv	r0, r0, r4
 8016f5c:	1a12      	subs	r2, r2, r0
 8016f5e:	4638      	mov	r0, r7
 8016f60:	f00d fb81 	bl	8024666 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016f64:	b003      	add	sp, #12
 8016f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016f6a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8016f6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016f6e:	9e08      	ldr	r6, [sp, #32]
 8016f70:	4698      	mov	r8, r3
 8016f72:	4615      	mov	r5, r2
 8016f74:	460f      	mov	r7, r1
 8016f76:	6830      	ldr	r0, [r6, #0]
 8016f78:	2402      	movs	r4, #2
 8016f7a:	f7ff ff8d 	bl	8016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016f7e:	a902      	add	r1, sp, #8
 8016f80:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f86:	f7ff ff59 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016f8a:	682d      	ldr	r5, [r5, #0]
 8016f8c:	fb90 f0f4 	sdiv	r0, r0, r4
 8016f90:	4405      	add	r5, r0
 8016f92:	6830      	ldr	r0, [r6, #0]
 8016f94:	f7ff ffa1 	bl	8016eda <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016f98:	a902      	add	r1, sp, #8
 8016f9a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016fa0:	f7ff ff4c 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016fa4:	f8d8 2000 	ldr.w	r2, [r8]
 8016fa8:	4629      	mov	r1, r5
 8016faa:	fb90 f0f4 	sdiv	r0, r0, r4
 8016fae:	1a12      	subs	r2, r2, r0
 8016fb0:	4638      	mov	r0, r7
 8016fb2:	f00d fae7 	bl	8024584 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016fb6:	b002      	add	sp, #8
 8016fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016fbc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016fbc:	b513      	push	{r0, r1, r4, lr}
 8016fbe:	e9cd 2300 	strd	r2, r3, [sp]
 8016fc2:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8016fc6:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8016fca:	f7ff ffce 	bl	8016f6a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016fce:	b002      	add	sp, #8
 8016fd0:	bd10      	pop	{r4, pc}

08016fd2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd4:	680e      	ldr	r6, [r1, #0]
 8016fd6:	681f      	ldr	r7, [r3, #0]
 8016fd8:	9807      	ldr	r0, [sp, #28]
 8016fda:	42be      	cmp	r6, r7
 8016fdc:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8016fe0:	bfb8      	it	lt
 8016fe2:	601e      	strlt	r6, [r3, #0]
 8016fe4:	680b      	ldr	r3, [r1, #0]
 8016fe6:	6829      	ldr	r1, [r5, #0]
 8016fe8:	428b      	cmp	r3, r1
 8016fea:	bfc8      	it	gt
 8016fec:	602b      	strgt	r3, [r5, #0]
 8016fee:	6813      	ldr	r3, [r2, #0]
 8016ff0:	6821      	ldr	r1, [r4, #0]
 8016ff2:	428b      	cmp	r3, r1
 8016ff4:	bfb8      	it	lt
 8016ff6:	6023      	strlt	r3, [r4, #0]
 8016ff8:	6813      	ldr	r3, [r2, #0]
 8016ffa:	6802      	ldr	r2, [r0, #0]
 8016ffc:	4293      	cmp	r3, r2
 8016ffe:	bfc8      	it	gt
 8017000:	6003      	strgt	r3, [r0, #0]
 8017002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017004 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8017004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017008:	b089      	sub	sp, #36	; 0x24
 801700a:	4690      	mov	r8, r2
 801700c:	4606      	mov	r6, r0
 801700e:	2402      	movs	r4, #2
 8017010:	ad08      	add	r5, sp, #32
 8017012:	6808      	ldr	r0, [r1, #0]
 8017014:	461f      	mov	r7, r3
 8017016:	4689      	mov	r9, r1
 8017018:	f7ff ff3e 	bl	8016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801701c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017020:	4640      	mov	r0, r8
 8017022:	4629      	mov	r1, r5
 8017024:	f7ff ff0a 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017028:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801702a:	fb90 f0f4 	sdiv	r0, r0, r4
 801702e:	4418      	add	r0, r3
 8017030:	9005      	str	r0, [sp, #20]
 8017032:	f8d9 0000 	ldr.w	r0, [r9]
 8017036:	f7ff ff50 	bl	8016eda <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801703a:	4629      	mov	r1, r5
 801703c:	9007      	str	r0, [sp, #28]
 801703e:	4640      	mov	r0, r8
 8017040:	f7ff fefc 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017046:	aa08      	add	r2, sp, #32
 8017048:	a905      	add	r1, sp, #20
 801704a:	fb90 f0f4 	sdiv	r0, r0, r4
 801704e:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8017050:	1a24      	subs	r4, r4, r0
 8017052:	4630      	mov	r0, r6
 8017054:	f842 4d08 	str.w	r4, [r2, #-8]!
 8017058:	9302      	str	r3, [sp, #8]
 801705a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801705c:	9301      	str	r3, [sp, #4]
 801705e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017060:	9300      	str	r3, [sp, #0]
 8017062:	463b      	mov	r3, r7
 8017064:	f7ff ffb5 	bl	8016fd2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017068:	b009      	add	sp, #36	; 0x24
 801706a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801706e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 801706e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017072:	4291      	cmp	r1, r2
 8017074:	b08d      	sub	sp, #52	; 0x34
 8017076:	461e      	mov	r6, r3
 8017078:	4604      	mov	r4, r0
 801707a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801707e:	ad0c      	add	r5, sp, #48	; 0x30
 8017080:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8017084:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8017088:	bfc8      	it	gt
 801708a:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 801708e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017092:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8017096:	1a9b      	subs	r3, r3, r2
 8017098:	a907      	add	r1, sp, #28
 801709a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801709e:	bfa2      	ittt	ge
 80170a0:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80170a4:	2200      	movge	r2, #0
 80170a6:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 80170aa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80170ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80170ae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80170b2:	f845 3d04 	str.w	r3, [r5, #-4]!
 80170b6:	4633      	mov	r3, r6
 80170b8:	462a      	mov	r2, r5
 80170ba:	9700      	str	r7, [sp, #0]
 80170bc:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80170c0:	f7ff ffa0 	bl	8017004 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80170c4:	9b07      	ldr	r3, [sp, #28]
 80170c6:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 80170ca:	f103 0120 	add.w	r1, r3, #32
 80170ce:	fb91 f3f0 	sdiv	r3, r1, r0
 80170d2:	fb00 1313 	mls	r3, r0, r3, r1
 80170d6:	1ac3      	subs	r3, r0, r3
 80170d8:	fb93 f2f0 	sdiv	r2, r3, r0
 80170dc:	fb00 3312 	mls	r3, r0, r2, r3
 80170e0:	440b      	add	r3, r1
 80170e2:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 80170e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170e8:	9906      	ldr	r1, [sp, #24]
 80170ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80170ec:	4291      	cmp	r1, r2
 80170ee:	db11      	blt.n	8017114 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 80170f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80170f2:	4651      	mov	r1, sl
 80170f4:	9700      	str	r7, [sp, #0]
 80170f6:	4620      	mov	r0, r4
 80170f8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80170fc:	462a      	mov	r2, r5
 80170fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017100:	4633      	mov	r3, r6
 8017102:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017106:	f7ff ff7d 	bl	8017004 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801710a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801710c:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8017110:	9309      	str	r3, [sp, #36]	; 0x24
 8017112:	e7e8      	b.n	80170e6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8017114:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8017118:	4291      	cmp	r1, r2
 801711a:	dd0c      	ble.n	8017136 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 801711c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801711e:	a906      	add	r1, sp, #24
 8017120:	9700      	str	r7, [sp, #0]
 8017122:	4620      	mov	r0, r4
 8017124:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017128:	462a      	mov	r2, r5
 801712a:	930b      	str	r3, [sp, #44]	; 0x2c
 801712c:	4633      	mov	r3, r6
 801712e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017132:	f7ff ff67 	bl	8017004 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017136:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017138:	2b00      	cmp	r3, #0
 801713a:	f040 8097 	bne.w	801726c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 801713e:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8017142:	1a52      	subs	r2, r2, r1
 8017144:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8017148:	da0a      	bge.n	8017160 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 801714a:	462a      	mov	r2, r5
 801714c:	a90a      	add	r1, sp, #40	; 0x28
 801714e:	9700      	str	r7, [sp, #0]
 8017150:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017154:	4633      	mov	r3, r6
 8017156:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801715a:	4620      	mov	r0, r4
 801715c:	f7ff ff52 	bl	8017004 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017160:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8017164:	2bb3      	cmp	r3, #179	; 0xb3
 8017166:	d87e      	bhi.n	8017266 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8017168:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 801716c:	1a1b      	subs	r3, r3, r0
 801716e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017172:	da78      	bge.n	8017266 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8017174:	ad0c      	add	r5, sp, #48	; 0x30
 8017176:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 801717a:	f7ff fe8d 	bl	8016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801717e:	f04f 0a02 	mov.w	sl, #2
 8017182:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017186:	4658      	mov	r0, fp
 8017188:	4629      	mov	r1, r5
 801718a:	f7ff fe57 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801718e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017190:	18c3      	adds	r3, r0, r3
 8017192:	9807      	ldr	r0, [sp, #28]
 8017194:	9305      	str	r3, [sp, #20]
 8017196:	f7ff fea0 	bl	8016eda <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801719a:	4629      	mov	r1, r5
 801719c:	900b      	str	r0, [sp, #44]	; 0x2c
 801719e:	4658      	mov	r0, fp
 80171a0:	f7ff fe4c 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80171a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80171a6:	9a05      	ldr	r2, [sp, #20]
 80171a8:	a90a      	add	r1, sp, #40	; 0x28
 80171aa:	1a1b      	subs	r3, r3, r0
 80171ac:	9700      	str	r7, [sp, #0]
 80171ae:	4620      	mov	r0, r4
 80171b0:	9304      	str	r3, [sp, #16]
 80171b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80171b4:	fb93 f3fa 	sdiv	r3, r3, sl
 80171b8:	1ad2      	subs	r2, r2, r3
 80171ba:	920a      	str	r2, [sp, #40]	; 0x28
 80171bc:	9a04      	ldr	r2, [sp, #16]
 80171be:	1ad3      	subs	r3, r2, r3
 80171c0:	462a      	mov	r2, r5
 80171c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80171c4:	4633      	mov	r3, r6
 80171c6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80171ca:	f7ff ff02 	bl	8016fd2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80171ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80171d0:	9a05      	ldr	r2, [sp, #20]
 80171d2:	a90a      	add	r1, sp, #40	; 0x28
 80171d4:	4620      	mov	r0, r4
 80171d6:	9700      	str	r7, [sp, #0]
 80171d8:	fb93 f3fa 	sdiv	r3, r3, sl
 80171dc:	189a      	adds	r2, r3, r2
 80171de:	920a      	str	r2, [sp, #40]	; 0x28
 80171e0:	9a04      	ldr	r2, [sp, #16]
 80171e2:	4413      	add	r3, r2
 80171e4:	462a      	mov	r2, r5
 80171e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80171e8:	4633      	mov	r3, r6
 80171ea:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80171ee:	f7ff fef0 	bl	8016fd2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80171f2:	9806      	ldr	r0, [sp, #24]
 80171f4:	f7ff fe50 	bl	8016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80171f8:	4629      	mov	r1, r5
 80171fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80171fc:	4658      	mov	r0, fp
 80171fe:	f7ff fe1d 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017202:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017204:	18c3      	adds	r3, r0, r3
 8017206:	9806      	ldr	r0, [sp, #24]
 8017208:	9304      	str	r3, [sp, #16]
 801720a:	f7ff fe66 	bl	8016eda <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801720e:	4629      	mov	r1, r5
 8017210:	900b      	str	r0, [sp, #44]	; 0x2c
 8017212:	4658      	mov	r0, fp
 8017214:	f7ff fe12 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801721a:	9a04      	ldr	r2, [sp, #16]
 801721c:	a90a      	add	r1, sp, #40	; 0x28
 801721e:	eba3 0b00 	sub.w	fp, r3, r0
 8017222:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017224:	4620      	mov	r0, r4
 8017226:	9700      	str	r7, [sp, #0]
 8017228:	fb93 f3fa 	sdiv	r3, r3, sl
 801722c:	1ad2      	subs	r2, r2, r3
 801722e:	ebab 0303 	sub.w	r3, fp, r3
 8017232:	920a      	str	r2, [sp, #40]	; 0x28
 8017234:	462a      	mov	r2, r5
 8017236:	930b      	str	r3, [sp, #44]	; 0x2c
 8017238:	4633      	mov	r3, r6
 801723a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801723e:	f7ff fec8 	bl	8016fd2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017242:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017244:	9700      	str	r7, [sp, #0]
 8017246:	462a      	mov	r2, r5
 8017248:	a90a      	add	r1, sp, #40	; 0x28
 801724a:	4620      	mov	r0, r4
 801724c:	fb93 fafa 	sdiv	sl, r3, sl
 8017250:	9b04      	ldr	r3, [sp, #16]
 8017252:	4453      	add	r3, sl
 8017254:	930a      	str	r3, [sp, #40]	; 0x28
 8017256:	eb0a 030b 	add.w	r3, sl, fp
 801725a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801725e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017260:	4633      	mov	r3, r6
 8017262:	f7ff feb6 	bl	8016fd2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017266:	b00d      	add	sp, #52	; 0x34
 8017268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801726c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801726e:	a907      	add	r1, sp, #28
 8017270:	9700      	str	r7, [sp, #0]
 8017272:	4620      	mov	r0, r4
 8017274:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017278:	462a      	mov	r2, r5
 801727a:	930b      	str	r3, [sp, #44]	; 0x2c
 801727c:	4633      	mov	r3, r6
 801727e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017282:	f7ff febf 	bl	8017004 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017286:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017288:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801728a:	a906      	add	r1, sp, #24
 801728c:	9700      	str	r7, [sp, #0]
 801728e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017292:	462a      	mov	r2, r5
 8017294:	930b      	str	r3, [sp, #44]	; 0x2c
 8017296:	4633      	mov	r3, r6
 8017298:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801729c:	e75d      	b.n	801715a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0801729e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801729e:	b530      	push	{r4, r5, lr}
 80172a0:	4604      	mov	r4, r0
 80172a2:	4608      	mov	r0, r1
 80172a4:	4611      	mov	r1, r2
 80172a6:	461a      	mov	r2, r3
 80172a8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80172ac:	b089      	sub	sp, #36	; 0x24
 80172ae:	2500      	movs	r5, #0
 80172b0:	015b      	lsls	r3, r3, #5
 80172b2:	9505      	str	r5, [sp, #20]
 80172b4:	9304      	str	r3, [sp, #16]
 80172b6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80172ba:	015b      	lsls	r3, r3, #5
 80172bc:	e9cd 3506 	strd	r3, r5, [sp, #24]
 80172c0:	ab07      	add	r3, sp, #28
 80172c2:	2520      	movs	r5, #32
 80172c4:	9302      	str	r3, [sp, #8]
 80172c6:	ab06      	add	r3, sp, #24
 80172c8:	9301      	str	r3, [sp, #4]
 80172ca:	ab05      	add	r3, sp, #20
 80172cc:	9300      	str	r3, [sp, #0]
 80172ce:	ab04      	add	r3, sp, #16
 80172d0:	f7ff fecd 	bl	801706e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80172d4:	9a04      	ldr	r2, [sp, #16]
 80172d6:	9805      	ldr	r0, [sp, #20]
 80172d8:	9b06      	ldr	r3, [sp, #24]
 80172da:	9907      	ldr	r1, [sp, #28]
 80172dc:	fb92 f2f5 	sdiv	r2, r2, r5
 80172e0:	fb90 f0f5 	sdiv	r0, r0, r5
 80172e4:	fb93 f3f5 	sdiv	r3, r3, r5
 80172e8:	fb91 f1f5 	sdiv	r1, r1, r5
 80172ec:	b292      	uxth	r2, r2
 80172ee:	3002      	adds	r0, #2
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	3102      	adds	r1, #2
 80172f4:	1a80      	subs	r0, r0, r2
 80172f6:	3a01      	subs	r2, #1
 80172f8:	1ac9      	subs	r1, r1, r3
 80172fa:	3b01      	subs	r3, #1
 80172fc:	80a0      	strh	r0, [r4, #4]
 80172fe:	4620      	mov	r0, r4
 8017300:	8022      	strh	r2, [r4, #0]
 8017302:	8063      	strh	r3, [r4, #2]
 8017304:	80e1      	strh	r1, [r4, #6]
 8017306:	b009      	add	sp, #36	; 0x24
 8017308:	bd30      	pop	{r4, r5, pc}

0801730a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801730a:	b510      	push	{r4, lr}
 801730c:	4604      	mov	r4, r0
 801730e:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8017312:	f7ff ffc4 	bl	801729e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8017316:	4620      	mov	r0, r4
 8017318:	bd10      	pop	{r4, pc}

0801731a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 801731a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801731e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017320:	b0ba      	sub	sp, #232	; 0xe8
 8017322:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8017324:	4604      	mov	r4, r0
 8017326:	9303      	str	r3, [sp, #12]
 8017328:	460f      	mov	r7, r1
 801732a:	429a      	cmp	r2, r3
 801732c:	9204      	str	r2, [sp, #16]
 801732e:	ae0a      	add	r6, sp, #40	; 0x28
 8017330:	bfb8      	it	lt
 8017332:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8017336:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801733a:	1a9b      	subs	r3, r3, r2
 801733c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017340:	bfa2      	ittt	ge
 8017342:	2200      	movge	r2, #0
 8017344:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8017348:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 801734c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801734e:	2a00      	cmp	r2, #0
 8017350:	d131      	bne.n	80173b6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8017352:	463a      	mov	r2, r7
 8017354:	4621      	mov	r1, r4
 8017356:	a80b      	add	r0, sp, #44	; 0x2c
 8017358:	f00c ffbc 	bl	80242d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801735c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801735e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017360:	9205      	str	r2, [sp, #20]
 8017362:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8017366:	9306      	str	r3, [sp, #24]
 8017368:	dc6f      	bgt.n	801744a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 801736a:	9b03      	ldr	r3, [sp, #12]
 801736c:	a90b      	add	r1, sp, #44	; 0x2c
 801736e:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8017372:	4620      	mov	r0, r4
 8017374:	9307      	str	r3, [sp, #28]
 8017376:	016d      	lsls	r5, r5, #5
 8017378:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801737c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017380:	aa07      	add	r2, sp, #28
 8017382:	930a      	str	r3, [sp, #40]	; 0x28
 8017384:	4633      	mov	r3, r6
 8017386:	f7ff fdc7 	bl	8016f18 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801738a:	9f07      	ldr	r7, [sp, #28]
 801738c:	2d00      	cmp	r5, #0
 801738e:	d165      	bne.n	801745c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8017390:	3720      	adds	r7, #32
 8017392:	4639      	mov	r1, r7
 8017394:	9a04      	ldr	r2, [sp, #16]
 8017396:	9b06      	ldr	r3, [sp, #24]
 8017398:	442f      	add	r7, r5
 801739a:	4291      	cmp	r1, r2
 801739c:	dc6b      	bgt.n	8017476 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 801739e:	9a05      	ldr	r2, [sp, #20]
 80173a0:	4620      	mov	r0, r4
 80173a2:	9107      	str	r1, [sp, #28]
 80173a4:	a90b      	add	r1, sp, #44	; 0x2c
 80173a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80173aa:	aa07      	add	r2, sp, #28
 80173ac:	930a      	str	r3, [sp, #40]	; 0x28
 80173ae:	4633      	mov	r3, r6
 80173b0:	f7ff fe04 	bl	8016fbc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80173b4:	e7ed      	b.n	8017392 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80173b6:	f9b1 c000 	ldrsh.w	ip, [r1]
 80173ba:	88bd      	ldrh	r5, [r7, #4]
 80173bc:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 80173c0:	4465      	add	r5, ip
 80173c2:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 80173c6:	b22d      	sxth	r5, r5
 80173c8:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 80173cc:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 80173d0:	2d00      	cmp	r5, #0
 80173d2:	bfb8      	it	lt
 80173d4:	426d      	neglt	r5, r5
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	bfb8      	it	lt
 80173da:	425b      	neglt	r3, r3
 80173dc:	429d      	cmp	r5, r3
 80173de:	bfb8      	it	lt
 80173e0:	461d      	movlt	r5, r3
 80173e2:	88fb      	ldrh	r3, [r7, #6]
 80173e4:	4403      	add	r3, r0
 80173e6:	116d      	asrs	r5, r5, #5
 80173e8:	b21b      	sxth	r3, r3
 80173ea:	3501      	adds	r5, #1
 80173ec:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 80173f0:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 80173f4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	f100 0001 	add.w	r0, r0, #1
 80173fe:	bfb8      	it	lt
 8017400:	425b      	neglt	r3, r3
 8017402:	2900      	cmp	r1, #0
 8017404:	ea4f 0060 	mov.w	r0, r0, asr #1
 8017408:	bfb8      	it	lt
 801740a:	4249      	neglt	r1, r1
 801740c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017410:	428b      	cmp	r3, r1
 8017412:	bfb8      	it	lt
 8017414:	460b      	movlt	r3, r1
 8017416:	115b      	asrs	r3, r3, #5
 8017418:	3301      	adds	r3, #1
 801741a:	435b      	muls	r3, r3
 801741c:	fb05 3505 	mla	r5, r5, r5, r3
 8017420:	2302      	movs	r3, #2
 8017422:	fb92 f2f3 	sdiv	r2, r2, r3
 8017426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017428:	1a9a      	subs	r2, r3, r2
 801742a:	920a      	str	r2, [sp, #40]	; 0x28
 801742c:	f7ff fd12 	bl	8016e54 <_ZN8touchgfx7CWRUtil4sineEi>
 8017430:	a90b      	add	r1, sp, #44	; 0x2c
 8017432:	900b      	str	r0, [sp, #44]	; 0x2c
 8017434:	4630      	mov	r0, r6
 8017436:	f7ff fd01 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801743a:	2320      	movs	r3, #32
 801743c:	fb90 f0f3 	sdiv	r0, r0, r3
 8017440:	4340      	muls	r0, r0
 8017442:	42a8      	cmp	r0, r5
 8017444:	dd85      	ble.n	8017352 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8017446:	2401      	movs	r4, #1
 8017448:	e036      	b.n	80174b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 801744a:	2102      	movs	r1, #2
 801744c:	fb93 f3f1 	sdiv	r3, r3, r1
 8017450:	4413      	add	r3, r2
 8017452:	9306      	str	r3, [sp, #24]
 8017454:	fb93 f3f1 	sdiv	r3, r3, r1
 8017458:	9305      	str	r3, [sp, #20]
 801745a:	e786      	b.n	801736a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 801745c:	f107 0320 	add.w	r3, r7, #32
 8017460:	fb93 f7f5 	sdiv	r7, r3, r5
 8017464:	fb05 3717 	mls	r7, r5, r7, r3
 8017468:	1bea      	subs	r2, r5, r7
 801746a:	fb92 f7f5 	sdiv	r7, r2, r5
 801746e:	fb05 2717 	mls	r7, r5, r7, r2
 8017472:	441f      	add	r7, r3
 8017474:	e78d      	b.n	8017392 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8017476:	9907      	ldr	r1, [sp, #28]
 8017478:	428a      	cmp	r2, r1
 801747a:	dd09      	ble.n	8017490 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 801747c:	9a05      	ldr	r2, [sp, #20]
 801747e:	a90b      	add	r1, sp, #44	; 0x2c
 8017480:	4620      	mov	r0, r4
 8017482:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017486:	aa04      	add	r2, sp, #16
 8017488:	930a      	str	r3, [sp, #40]	; 0x28
 801748a:	4633      	mov	r3, r6
 801748c:	f7ff fd96 	bl	8016fbc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017490:	9a06      	ldr	r2, [sp, #24]
 8017492:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8017496:	1ac3      	subs	r3, r0, r3
 8017498:	b992      	cbnz	r2, 80174c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 801749a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801749e:	da04      	bge.n	80174aa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 80174a0:	a80b      	add	r0, sp, #44	; 0x2c
 80174a2:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80174a6:	f00d f86d 	bl	8024584 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80174aa:	a80b      	add	r0, sp, #44	; 0x2c
 80174ac:	f00d f9df 	bl	802486e <_ZN8touchgfx6Canvas6renderEv>
 80174b0:	4604      	mov	r4, r0
 80174b2:	a80b      	add	r0, sp, #44	; 0x2c
 80174b4:	f00d fa18 	bl	80248e8 <_ZN8touchgfx6CanvasD1Ev>
 80174b8:	4620      	mov	r0, r4
 80174ba:	b03a      	add	sp, #232	; 0xe8
 80174bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174c0:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 80174c4:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80174c8:	ea4f 1747 	mov.w	r7, r7, lsl #5
 80174cc:	da2b      	bge.n	8017526 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 80174ce:	f7ff fce3 	bl	8016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80174d2:	4631      	mov	r1, r6
 80174d4:	900a      	str	r0, [sp, #40]	; 0x28
 80174d6:	a805      	add	r0, sp, #20
 80174d8:	f7ff fcb0 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80174dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80174de:	f10d 0818 	add.w	r8, sp, #24
 80174e2:	4418      	add	r0, r3
 80174e4:	9008      	str	r0, [sp, #32]
 80174e6:	9804      	ldr	r0, [sp, #16]
 80174e8:	f7ff fcf7 	bl	8016eda <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80174ec:	4631      	mov	r1, r6
 80174ee:	900a      	str	r0, [sp, #40]	; 0x28
 80174f0:	a805      	add	r0, sp, #20
 80174f2:	f7ff fca3 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80174f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174f8:	1a18      	subs	r0, r3, r0
 80174fa:	9b04      	ldr	r3, [sp, #16]
 80174fc:	443b      	add	r3, r7
 80174fe:	9009      	str	r0, [sp, #36]	; 0x24
 8017500:	930a      	str	r3, [sp, #40]	; 0x28
 8017502:	9b04      	ldr	r3, [sp, #16]
 8017504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017506:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 801750a:	4293      	cmp	r3, r2
 801750c:	dd0b      	ble.n	8017526 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 801750e:	ab09      	add	r3, sp, #36	; 0x24
 8017510:	aa08      	add	r2, sp, #32
 8017512:	a90b      	add	r1, sp, #44	; 0x2c
 8017514:	4620      	mov	r0, r4
 8017516:	e9cd 6800 	strd	r6, r8, [sp]
 801751a:	f7ff fd26 	bl	8016f6a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801751e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017520:	443b      	add	r3, r7
 8017522:	930a      	str	r3, [sp, #40]	; 0x28
 8017524:	e7ed      	b.n	8017502 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8017526:	9a04      	ldr	r2, [sp, #16]
 8017528:	9b07      	ldr	r3, [sp, #28]
 801752a:	429a      	cmp	r2, r3
 801752c:	dd0a      	ble.n	8017544 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 801752e:	a90b      	add	r1, sp, #44	; 0x2c
 8017530:	4620      	mov	r0, r4
 8017532:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017536:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801753a:	aa04      	add	r2, sp, #16
 801753c:	930a      	str	r3, [sp, #40]	; 0x28
 801753e:	4633      	mov	r3, r6
 8017540:	f7ff fd3c 	bl	8016fbc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017544:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017548:	4642      	mov	r2, r8
 801754a:	9b03      	ldr	r3, [sp, #12]
 801754c:	eba8 0805 	sub.w	r8, r8, r5
 8017550:	429a      	cmp	r2, r3
 8017552:	db0c      	blt.n	801756e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 8017554:	9207      	str	r2, [sp, #28]
 8017556:	a90b      	add	r1, sp, #44	; 0x2c
 8017558:	4620      	mov	r0, r4
 801755a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801755e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017562:	aa07      	add	r2, sp, #28
 8017564:	930a      	str	r3, [sp, #40]	; 0x28
 8017566:	4633      	mov	r3, r6
 8017568:	f7ff fd28 	bl	8016fbc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801756c:	e7ec      	b.n	8017548 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 801756e:	9a07      	ldr	r2, [sp, #28]
 8017570:	4293      	cmp	r3, r2
 8017572:	da0a      	bge.n	801758a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 8017574:	a90b      	add	r1, sp, #44	; 0x2c
 8017576:	4620      	mov	r0, r4
 8017578:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801757c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017580:	aa03      	add	r2, sp, #12
 8017582:	930a      	str	r3, [sp, #40]	; 0x28
 8017584:	4633      	mov	r3, r6
 8017586:	f7ff fd19 	bl	8016fbc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801758a:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 801758e:	1a1b      	subs	r3, r3, r0
 8017590:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017594:	da89      	bge.n	80174aa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017596:	f7ff fc7f 	bl	8016e98 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801759a:	4631      	mov	r1, r6
 801759c:	900a      	str	r0, [sp, #40]	; 0x28
 801759e:	a805      	add	r0, sp, #20
 80175a0:	f7ff fc4c 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80175a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80175a6:	ad06      	add	r5, sp, #24
 80175a8:	4418      	add	r0, r3
 80175aa:	9008      	str	r0, [sp, #32]
 80175ac:	9803      	ldr	r0, [sp, #12]
 80175ae:	f7ff fc94 	bl	8016eda <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80175b2:	4631      	mov	r1, r6
 80175b4:	900a      	str	r0, [sp, #40]	; 0x28
 80175b6:	a805      	add	r0, sp, #20
 80175b8:	f7ff fc40 	bl	8016e3c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80175bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175be:	1a18      	subs	r0, r3, r0
 80175c0:	9b03      	ldr	r3, [sp, #12]
 80175c2:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 80175c6:	9009      	str	r0, [sp, #36]	; 0x24
 80175c8:	443b      	add	r3, r7
 80175ca:	930a      	str	r3, [sp, #40]	; 0x28
 80175cc:	9a03      	ldr	r2, [sp, #12]
 80175ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175d0:	429a      	cmp	r2, r3
 80175d2:	f77f af6a 	ble.w	80174aa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 80175d6:	ab09      	add	r3, sp, #36	; 0x24
 80175d8:	aa08      	add	r2, sp, #32
 80175da:	a90b      	add	r1, sp, #44	; 0x2c
 80175dc:	4620      	mov	r0, r4
 80175de:	e9cd 6500 	strd	r6, r5, [sp]
 80175e2:	f7ff fcc2 	bl	8016f6a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80175e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175e8:	443b      	add	r3, r7
 80175ea:	930a      	str	r3, [sp, #40]	; 0x28
 80175ec:	e7ee      	b.n	80175cc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

080175ee <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80175ee:	4413      	add	r3, r2
 80175f0:	7a42      	ldrb	r2, [r0, #9]
 80175f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175f6:	4419      	add	r1, r3
 80175f8:	7a03      	ldrb	r3, [r0, #8]
 80175fa:	435a      	muls	r2, r3
 80175fc:	1c53      	adds	r3, r2, #1
 80175fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017602:	121b      	asrs	r3, r3, #8
 8017604:	2bff      	cmp	r3, #255	; 0xff
 8017606:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017608:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801760c:	d13e      	bne.n	801768c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801760e:	4427      	add	r7, r4
 8017610:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017614:	3103      	adds	r1, #3
 8017616:	7d86      	ldrb	r6, [r0, #22]
 8017618:	2bff      	cmp	r3, #255	; 0xff
 801761a:	d10a      	bne.n	8017632 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801761c:	f801 6c03 	strb.w	r6, [r1, #-3]
 8017620:	7d43      	ldrb	r3, [r0, #21]
 8017622:	f801 3c02 	strb.w	r3, [r1, #-2]
 8017626:	7d03      	ldrb	r3, [r0, #20]
 8017628:	f801 3c01 	strb.w	r3, [r1, #-1]
 801762c:	42a7      	cmp	r7, r4
 801762e:	d1ef      	bne.n	8017610 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8017630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017632:	b29a      	uxth	r2, r3
 8017634:	43db      	mvns	r3, r3
 8017636:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801763a:	fb16 f602 	smulbb	r6, r6, r2
 801763e:	b2db      	uxtb	r3, r3
 8017640:	fb05 6503 	mla	r5, r5, r3, r6
 8017644:	b2ad      	uxth	r5, r5
 8017646:	1c6e      	adds	r6, r5, #1
 8017648:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801764c:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8017650:	fb16 f603 	smulbb	r6, r6, r3
 8017654:	122d      	asrs	r5, r5, #8
 8017656:	f801 5c03 	strb.w	r5, [r1, #-3]
 801765a:	7d45      	ldrb	r5, [r0, #21]
 801765c:	fb05 6502 	mla	r5, r5, r2, r6
 8017660:	b2ad      	uxth	r5, r5
 8017662:	1c6e      	adds	r6, r5, #1
 8017664:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8017668:	122d      	asrs	r5, r5, #8
 801766a:	f801 5c02 	strb.w	r5, [r1, #-2]
 801766e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017672:	7d06      	ldrb	r6, [r0, #20]
 8017674:	fb15 f303 	smulbb	r3, r5, r3
 8017678:	fb06 3202 	mla	r2, r6, r2, r3
 801767c:	b292      	uxth	r2, r2
 801767e:	1c53      	adds	r3, r2, #1
 8017680:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017684:	1212      	asrs	r2, r2, #8
 8017686:	f801 2c01 	strb.w	r2, [r1, #-1]
 801768a:	e7cf      	b.n	801762c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801768c:	b2de      	uxtb	r6, r3
 801768e:	2b00      	cmp	r3, #0
 8017690:	d0ce      	beq.n	8017630 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8017692:	3103      	adds	r1, #3
 8017694:	4427      	add	r7, r4
 8017696:	f814 2b01 	ldrb.w	r2, [r4], #1
 801769a:	3103      	adds	r1, #3
 801769c:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 80176a0:	fb02 f306 	mul.w	r3, r2, r6
 80176a4:	42bc      	cmp	r4, r7
 80176a6:	f103 0201 	add.w	r2, r3, #1
 80176aa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80176ae:	ea4f 2222 	mov.w	r2, r2, asr #8
 80176b2:	b295      	uxth	r5, r2
 80176b4:	ea6f 0202 	mvn.w	r2, r2
 80176b8:	b2d3      	uxtb	r3, r2
 80176ba:	7d82      	ldrb	r2, [r0, #22]
 80176bc:	fb1c fc03 	smulbb	ip, ip, r3
 80176c0:	fb02 c205 	mla	r2, r2, r5, ip
 80176c4:	b292      	uxth	r2, r2
 80176c6:	f102 0c01 	add.w	ip, r2, #1
 80176ca:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80176ce:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80176d2:	fb1c fc03 	smulbb	ip, ip, r3
 80176d6:	ea4f 2222 	mov.w	r2, r2, asr #8
 80176da:	f801 2c06 	strb.w	r2, [r1, #-6]
 80176de:	7d42      	ldrb	r2, [r0, #21]
 80176e0:	fb02 c205 	mla	r2, r2, r5, ip
 80176e4:	b292      	uxth	r2, r2
 80176e6:	f102 0c01 	add.w	ip, r2, #1
 80176ea:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80176ee:	ea4f 2222 	mov.w	r2, r2, asr #8
 80176f2:	f801 2c05 	strb.w	r2, [r1, #-5]
 80176f6:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80176fa:	f890 c014 	ldrb.w	ip, [r0, #20]
 80176fe:	fb12 f303 	smulbb	r3, r2, r3
 8017702:	fb0c 3305 	mla	r3, ip, r5, r3
 8017706:	b29b      	uxth	r3, r3
 8017708:	f103 0201 	add.w	r2, r3, #1
 801770c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017710:	ea4f 2323 	mov.w	r3, r3, asr #8
 8017714:	f801 3c04 	strb.w	r3, [r1, #-4]
 8017718:	d1bd      	bne.n	8017696 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801771a:	e789      	b.n	8017630 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801771c <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801771c:	b510      	push	{r4, lr}
 801771e:	7d04      	ldrb	r4, [r0, #20]
 8017720:	700c      	strb	r4, [r1, #0]
 8017722:	7d41      	ldrb	r1, [r0, #21]
 8017724:	7011      	strb	r1, [r2, #0]
 8017726:	7d82      	ldrb	r2, [r0, #22]
 8017728:	701a      	strb	r2, [r3, #0]
 801772a:	9b02      	ldr	r3, [sp, #8]
 801772c:	7a42      	ldrb	r2, [r0, #9]
 801772e:	2001      	movs	r0, #1
 8017730:	701a      	strb	r2, [r3, #0]
 8017732:	bd10      	pop	{r4, pc}

08017734 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8017734:	6281      	str	r1, [r0, #40]	; 0x28
 8017736:	4770      	bx	lr

08017738 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8017738:	b513      	push	{r0, r1, r4, lr}
 801773a:	6803      	ldr	r3, [r0, #0]
 801773c:	4604      	mov	r4, r0
 801773e:	4601      	mov	r1, r0
 8017740:	4668      	mov	r0, sp
 8017742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017744:	4798      	blx	r3
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	4669      	mov	r1, sp
 801774a:	4620      	mov	r0, r4
 801774c:	691b      	ldr	r3, [r3, #16]
 801774e:	4798      	blx	r3
 8017750:	b002      	add	sp, #8
 8017752:	bd10      	pop	{r4, pc}

08017754 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8017754:	b510      	push	{r4, lr}
 8017756:	2200      	movs	r2, #0
 8017758:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801775c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8017760:	8002      	strh	r2, [r0, #0]
 8017762:	8042      	strh	r2, [r0, #2]
 8017764:	8084      	strh	r4, [r0, #4]
 8017766:	80c1      	strh	r1, [r0, #6]
 8017768:	bd10      	pop	{r4, pc}

0801776a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801776a:	2200      	movs	r2, #0
 801776c:	8002      	strh	r2, [r0, #0]
 801776e:	8042      	strh	r2, [r0, #2]
 8017770:	8082      	strh	r2, [r0, #4]
 8017772:	80c2      	strh	r2, [r0, #6]
 8017774:	4770      	bx	lr
	...

08017778 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8017778:	b508      	push	{r3, lr}
 801777a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801777c:	b928      	cbnz	r0, 801778a <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801777e:	4b03      	ldr	r3, [pc, #12]	; (801778c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8017780:	2123      	movs	r1, #35	; 0x23
 8017782:	4a03      	ldr	r2, [pc, #12]	; (8017790 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8017784:	4803      	ldr	r0, [pc, #12]	; (8017794 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8017786:	f00e f97b 	bl	8025a80 <__assert_func>
 801778a:	bd08      	pop	{r3, pc}
 801778c:	08029cf8 	.word	0x08029cf8
 8017790:	08029ddc 	.word	0x08029ddc
 8017794:	08029d1f 	.word	0x08029d1f

08017798 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8017798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801779c:	b089      	sub	sp, #36	; 0x24
 801779e:	4604      	mov	r4, r0
 80177a0:	6808      	ldr	r0, [r1, #0]
 80177a2:	f04f 0a00 	mov.w	sl, #0
 80177a6:	6849      	ldr	r1, [r1, #4]
 80177a8:	ab02      	add	r3, sp, #8
 80177aa:	f04f 0b01 	mov.w	fp, #1
 80177ae:	c303      	stmia	r3!, {r0, r1}
 80177b0:	4b3f      	ldr	r3, [pc, #252]	; (80178b0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80177b2:	4621      	mov	r1, r4
 80177b4:	a804      	add	r0, sp, #16
 80177b6:	781b      	ldrb	r3, [r3, #0]
 80177b8:	2b01      	cmp	r3, #1
 80177ba:	6823      	ldr	r3, [r4, #0]
 80177bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177be:	bf1f      	itttt	ne
 80177c0:	f10d 0906 	addne.w	r9, sp, #6
 80177c4:	ae03      	addne	r6, sp, #12
 80177c6:	f10d 050e 	addne.w	r5, sp, #14
 80177ca:	f10d 080a 	addne.w	r8, sp, #10
 80177ce:	bf01      	itttt	eq
 80177d0:	f10d 090e 	addeq.w	r9, sp, #14
 80177d4:	f10d 0606 	addeq.w	r6, sp, #6
 80177d8:	ad03      	addeq	r5, sp, #12
 80177da:	f10d 0808 	addeq.w	r8, sp, #8
 80177de:	4798      	blx	r3
 80177e0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80177e4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d056      	beq.n	801789a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80177ec:	4293      	cmp	r3, r2
 80177ee:	bfa8      	it	ge
 80177f0:	4613      	movge	r3, r2
 80177f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80177f6:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80177fa:	2f00      	cmp	r7, #0
 80177fc:	dd34      	ble.n	8017868 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80177fe:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8017802:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8017806:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801780a:	4484      	add	ip, r0
 801780c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017810:	f9b6 e000 	ldrsh.w	lr, [r6]
 8017814:	fa0f fc8c 	sxth.w	ip, ip
 8017818:	f9b9 1000 	ldrsh.w	r1, [r9]
 801781c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017820:	4562      	cmp	r2, ip
 8017822:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017826:	f8ad e01c 	strh.w	lr, [sp, #28]
 801782a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801782e:	da29      	bge.n	8017884 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017830:	4472      	add	r2, lr
 8017832:	b212      	sxth	r2, r2
 8017834:	4290      	cmp	r0, r2
 8017836:	da25      	bge.n	8017884 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017838:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801783c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017840:	4402      	add	r2, r0
 8017842:	b212      	sxth	r2, r2
 8017844:	4293      	cmp	r3, r2
 8017846:	da1d      	bge.n	8017884 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017848:	440b      	add	r3, r1
 801784a:	b21b      	sxth	r3, r3
 801784c:	4298      	cmp	r0, r3
 801784e:	da19      	bge.n	8017884 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017850:	6823      	ldr	r3, [r4, #0]
 8017852:	a906      	add	r1, sp, #24
 8017854:	4620      	mov	r0, r4
 8017856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017858:	4798      	blx	r3
 801785a:	b998      	cbnz	r0, 8017884 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801785c:	107f      	asrs	r7, r7, #1
 801785e:	f04f 0a01 	mov.w	sl, #1
 8017862:	f8ad 7006 	strh.w	r7, [sp, #6]
 8017866:	e7c6      	b.n	80177f6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017868:	d10c      	bne.n	8017884 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801786a:	f8ad b006 	strh.w	fp, [sp, #6]
 801786e:	f8b8 2000 	ldrh.w	r2, [r8]
 8017872:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8017876:	440a      	add	r2, r1
 8017878:	f8a8 2000 	strh.w	r2, [r8]
 801787c:	882b      	ldrh	r3, [r5, #0]
 801787e:	1a5b      	subs	r3, r3, r1
 8017880:	802b      	strh	r3, [r5, #0]
 8017882:	e7ad      	b.n	80177e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017884:	f1ba 0f00 	cmp.w	sl, #0
 8017888:	d0f1      	beq.n	801786e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801788a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801788e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017892:	429a      	cmp	r2, r3
 8017894:	bf08      	it	eq
 8017896:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8017898:	e7e9      	b.n	801786e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801789a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801789e:	429a      	cmp	r2, r3
 80178a0:	bf04      	itt	eq
 80178a2:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80178a6:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80178a8:	b009      	add	sp, #36	; 0x24
 80178aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ae:	bf00      	nop
 80178b0:	2000b3c0 	.word	0x2000b3c0

080178b4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80178b4:	2200      	movs	r2, #0
 80178b6:	2101      	movs	r1, #1
 80178b8:	8082      	strh	r2, [r0, #4]
 80178ba:	80c2      	strh	r2, [r0, #6]
 80178bc:	8102      	strh	r2, [r0, #8]
 80178be:	8142      	strh	r2, [r0, #10]
 80178c0:	8182      	strh	r2, [r0, #12]
 80178c2:	81c2      	strh	r2, [r0, #14]
 80178c4:	8202      	strh	r2, [r0, #16]
 80178c6:	8242      	strh	r2, [r0, #18]
 80178c8:	61c2      	str	r2, [r0, #28]
 80178ca:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80178ce:	6282      	str	r2, [r0, #40]	; 0x28
 80178d0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80178d4:	4905      	ldr	r1, [pc, #20]	; (80178ec <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 80178d6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80178da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80178de:	6001      	str	r1, [r0, #0]
 80178e0:	8582      	strh	r2, [r0, #44]	; 0x2c
 80178e2:	22ff      	movs	r2, #255	; 0xff
 80178e4:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80178e8:	4770      	bx	lr
 80178ea:	bf00      	nop
 80178ec:	08029d64 	.word	0x08029d64

080178f0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80178f0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80178f4:	4770      	bx	lr

080178f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80178f6:	b570      	push	{r4, r5, r6, lr}
 80178f8:	790b      	ldrb	r3, [r1, #4]
 80178fa:	4604      	mov	r4, r0
 80178fc:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8017900:	460e      	mov	r6, r1
 8017902:	2b00      	cmp	r3, #0
 8017904:	bf0c      	ite	eq
 8017906:	2301      	moveq	r3, #1
 8017908:	2300      	movne	r3, #0
 801790a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801790e:	d110      	bne.n	8017932 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017910:	b185      	cbz	r5, 8017934 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8017912:	7933      	ldrb	r3, [r6, #4]
 8017914:	2b01      	cmp	r3, #1
 8017916:	d113      	bne.n	8017940 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8017918:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801791a:	b188      	cbz	r0, 8017940 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801791c:	6803      	ldr	r3, [r0, #0]
 801791e:	68db      	ldr	r3, [r3, #12]
 8017920:	4798      	blx	r3
 8017922:	b168      	cbz	r0, 8017940 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8017924:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017926:	4621      	mov	r1, r4
 8017928:	6803      	ldr	r3, [r0, #0]
 801792a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801792e:	689b      	ldr	r3, [r3, #8]
 8017930:	4718      	bx	r3
 8017932:	b12d      	cbz	r5, 8017940 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8017934:	6823      	ldr	r3, [r4, #0]
 8017936:	4620      	mov	r0, r4
 8017938:	695b      	ldr	r3, [r3, #20]
 801793a:	4798      	blx	r3
 801793c:	2d00      	cmp	r5, #0
 801793e:	d1e8      	bne.n	8017912 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8017940:	bd70      	pop	{r4, r5, r6, pc}

08017942 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8017942:	6803      	ldr	r3, [r0, #0]
 8017944:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8017948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801794a:	4718      	bx	r3

0801794c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801794c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017950:	2bff      	cmp	r3, #255	; 0xff
 8017952:	b510      	push	{r4, lr}
 8017954:	d104      	bne.n	8017960 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8017956:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8017958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801795c:	429a      	cmp	r2, r3
 801795e:	d105      	bne.n	801796c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8017960:	2300      	movs	r3, #0
 8017962:	8003      	strh	r3, [r0, #0]
 8017964:	8043      	strh	r3, [r0, #2]
 8017966:	8083      	strh	r3, [r0, #4]
 8017968:	80c3      	strh	r3, [r0, #6]
 801796a:	bd10      	pop	{r4, pc}
 801796c:	2300      	movs	r3, #0
 801796e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8017972:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8017976:	8003      	strh	r3, [r0, #0]
 8017978:	8043      	strh	r3, [r0, #2]
 801797a:	8084      	strh	r4, [r0, #4]
 801797c:	80c2      	strh	r2, [r0, #6]
 801797e:	e7f4      	b.n	801796a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08017980 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8017980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017984:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8017988:	b087      	sub	sp, #28
 801798a:	4604      	mov	r4, r0
 801798c:	4689      	mov	r9, r1
 801798e:	b363      	cbz	r3, 80179ea <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017990:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017996:	429a      	cmp	r2, r3
 8017998:	d027      	beq.n	80179ea <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801799a:	ad06      	add	r5, sp, #24
 801799c:	2700      	movs	r7, #0
 801799e:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 80179a2:	4628      	mov	r0, r5
 80179a4:	f004 fa1e 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80179a8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80179ac:	a904      	add	r1, sp, #16
 80179ae:	f8ad 0014 	strh.w	r0, [sp, #20]
 80179b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80179b6:	4620      	mov	r0, r4
 80179b8:	6823      	ldr	r3, [r4, #0]
 80179ba:	9704      	str	r7, [sp, #16]
 80179bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179be:	4798      	blx	r3
 80179c0:	f7f4 ff60 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 80179c4:	6803      	ldr	r3, [r0, #0]
 80179c6:	4606      	mov	r6, r0
 80179c8:	4628      	mov	r0, r5
 80179ca:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80179ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80179d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80179d4:	f004 fad4 	bl	801bf80 <_ZNK8touchgfx6Bitmap7getDataEv>
 80179d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80179dc:	4601      	mov	r1, r0
 80179de:	9701      	str	r7, [sp, #4]
 80179e0:	aa04      	add	r2, sp, #16
 80179e2:	9300      	str	r3, [sp, #0]
 80179e4:	4630      	mov	r0, r6
 80179e6:	464b      	mov	r3, r9
 80179e8:	47c0      	blx	r8
 80179ea:	b007      	add	sp, #28
 80179ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080179f0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 80179f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80179f2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80179f6:	460d      	mov	r5, r1
 80179f8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80179fc:	2100      	movs	r1, #0
 80179fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a02:	4604      	mov	r4, r0
 8017a04:	6803      	ldr	r3, [r0, #0]
 8017a06:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017a0a:	6a1b      	ldr	r3, [r3, #32]
 8017a0c:	9100      	str	r1, [sp, #0]
 8017a0e:	4669      	mov	r1, sp
 8017a10:	4798      	blx	r3
 8017a12:	4621      	mov	r1, r4
 8017a14:	a802      	add	r0, sp, #8
 8017a16:	f002 fb7e 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017a1a:	f7f4 ff33 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8017a1e:	6803      	ldr	r3, [r0, #0]
 8017a20:	aa02      	add	r2, sp, #8
 8017a22:	4669      	mov	r1, sp
 8017a24:	695e      	ldr	r6, [r3, #20]
 8017a26:	462b      	mov	r3, r5
 8017a28:	47b0      	blx	r6
 8017a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a2e:	2800      	cmp	r0, #0
 8017a30:	bf08      	it	eq
 8017a32:	461d      	moveq	r5, r3
 8017a34:	84e5      	strh	r5, [r4, #38]	; 0x26
 8017a36:	b004      	add	sp, #16
 8017a38:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a3c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	8082      	strh	r2, [r0, #4]
 8017a40:	80c2      	strh	r2, [r0, #6]
 8017a42:	8102      	strh	r2, [r0, #8]
 8017a44:	8142      	strh	r2, [r0, #10]
 8017a46:	8182      	strh	r2, [r0, #12]
 8017a48:	81c2      	strh	r2, [r0, #14]
 8017a4a:	8202      	strh	r2, [r0, #16]
 8017a4c:	8242      	strh	r2, [r0, #18]
 8017a4e:	61c2      	str	r2, [r0, #28]
 8017a50:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017a54:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017a58:	2201      	movs	r2, #1
 8017a5a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8017a5e:	4a04      	ldr	r2, [pc, #16]	; (8017a70 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 8017a60:	6002      	str	r2, [r0, #0]
 8017a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a66:	84c2      	strh	r2, [r0, #38]	; 0x26
 8017a68:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8017a6c:	4770      	bx	lr
 8017a6e:	bf00      	nop
 8017a70:	08029ea0 	.word	0x08029ea0

08017a74 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017a74:	2200      	movs	r2, #0
 8017a76:	8002      	strh	r2, [r0, #0]
 8017a78:	8042      	strh	r2, [r0, #2]
 8017a7a:	8082      	strh	r2, [r0, #4]
 8017a7c:	80c2      	strh	r2, [r0, #6]
 8017a7e:	4770      	bx	lr

08017a80 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017a80:	b570      	push	{r4, r5, r6, lr}
 8017a82:	6803      	ldr	r3, [r0, #0]
 8017a84:	4604      	mov	r4, r0
 8017a86:	4615      	mov	r5, r2
 8017a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a8a:	4798      	blx	r3
 8017a8c:	6823      	ldr	r3, [r4, #0]
 8017a8e:	4629      	mov	r1, r5
 8017a90:	4620      	mov	r0, r4
 8017a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a98:	4718      	bx	r3
	...

08017a9c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017aa2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017aa4:	4299      	cmp	r1, r3
 8017aa6:	d029      	beq.n	8017afc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8017aa8:	4b15      	ldr	r3, [pc, #84]	; (8017b00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	b92b      	cbnz	r3, 8017aba <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8017aae:	4b15      	ldr	r3, [pc, #84]	; (8017b04 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017ab0:	21b1      	movs	r1, #177	; 0xb1
 8017ab2:	4a15      	ldr	r2, [pc, #84]	; (8017b08 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017ab4:	4815      	ldr	r0, [pc, #84]	; (8017b0c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017ab6:	f00d ffe3 	bl	8025a80 <__assert_func>
 8017aba:	4a15      	ldr	r2, [pc, #84]	; (8017b10 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8017abc:	8812      	ldrh	r2, [r2, #0]
 8017abe:	428a      	cmp	r2, r1
 8017ac0:	d803      	bhi.n	8017aca <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8017ac2:	4b14      	ldr	r3, [pc, #80]	; (8017b14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8017ac4:	21b2      	movs	r1, #178	; 0xb2
 8017ac6:	4a10      	ldr	r2, [pc, #64]	; (8017b08 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017ac8:	e7f4      	b.n	8017ab4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8017aca:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017ace:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017ad2:	4b11      	ldr	r3, [pc, #68]	; (8017b18 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8017ad4:	7854      	ldrb	r4, [r2, #1]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017adc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017ae0:	682b      	ldr	r3, [r5, #0]
 8017ae2:	69de      	ldr	r6, [r3, #28]
 8017ae4:	4b0d      	ldr	r3, [pc, #52]	; (8017b1c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8017ae6:	6818      	ldr	r0, [r3, #0]
 8017ae8:	f7fb f82a 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 8017aec:	2300      	movs	r3, #0
 8017aee:	4602      	mov	r2, r0
 8017af0:	4621      	mov	r1, r4
 8017af2:	9300      	str	r3, [sp, #0]
 8017af4:	4628      	mov	r0, r5
 8017af6:	47b0      	blx	r6
 8017af8:	b002      	add	sp, #8
 8017afa:	bd70      	pop	{r4, r5, r6, pc}
 8017afc:	2000      	movs	r0, #0
 8017afe:	e7fb      	b.n	8017af8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8017b00:	2000b458 	.word	0x2000b458
 8017b04:	08029f08 	.word	0x08029f08
 8017b08:	0802a044 	.word	0x0802a044
 8017b0c:	08029f4a 	.word	0x08029f4a
 8017b10:	2000b45c 	.word	0x2000b45c
 8017b14:	08029f73 	.word	0x08029f73
 8017b18:	2000b460 	.word	0x2000b460
 8017b1c:	2000b464 	.word	0x2000b464

08017b20 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8017b20:	b570      	push	{r4, r5, r6, lr}
 8017b22:	6803      	ldr	r3, [r0, #0]
 8017b24:	4604      	mov	r4, r0
 8017b26:	b28d      	uxth	r5, r1
 8017b28:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017b2a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8017b2c:	4b10      	ldr	r3, [pc, #64]	; (8017b70 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	b92b      	cbnz	r3, 8017b3e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8017b32:	4b10      	ldr	r3, [pc, #64]	; (8017b74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8017b34:	21b1      	movs	r1, #177	; 0xb1
 8017b36:	4a10      	ldr	r2, [pc, #64]	; (8017b78 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017b38:	4810      	ldr	r0, [pc, #64]	; (8017b7c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8017b3a:	f00d ffa1 	bl	8025a80 <__assert_func>
 8017b3e:	4910      	ldr	r1, [pc, #64]	; (8017b80 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8017b40:	8809      	ldrh	r1, [r1, #0]
 8017b42:	4291      	cmp	r1, r2
 8017b44:	d803      	bhi.n	8017b4e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8017b46:	4b0f      	ldr	r3, [pc, #60]	; (8017b84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8017b48:	21b2      	movs	r1, #178	; 0xb2
 8017b4a:	4a0b      	ldr	r2, [pc, #44]	; (8017b78 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017b4c:	e7f4      	b.n	8017b38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8017b4e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017b52:	4b0d      	ldr	r3, [pc, #52]	; (8017b88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017b5a:	6803      	ldr	r3, [r0, #0]
 8017b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b5e:	4798      	blx	r3
 8017b60:	1a29      	subs	r1, r5, r0
 8017b62:	4633      	mov	r3, r6
 8017b64:	4620      	mov	r0, r4
 8017b66:	b209      	sxth	r1, r1
 8017b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b6c:	4718      	bx	r3
 8017b6e:	bf00      	nop
 8017b70:	2000b458 	.word	0x2000b458
 8017b74:	08029f08 	.word	0x08029f08
 8017b78:	0802a044 	.word	0x0802a044
 8017b7c:	08029f4a 	.word	0x08029f4a
 8017b80:	2000b45c 	.word	0x2000b45c
 8017b84:	08029f73 	.word	0x08029f73
 8017b88:	2000b460 	.word	0x2000b460

08017b8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b94:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017b96:	b08c      	sub	sp, #48	; 0x30
 8017b98:	4604      	mov	r4, r0
 8017b9a:	4293      	cmp	r3, r2
 8017b9c:	4688      	mov	r8, r1
 8017b9e:	d05f      	beq.n	8017c60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017ba0:	4e31      	ldr	r6, [pc, #196]	; (8017c68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8017ba2:	6832      	ldr	r2, [r6, #0]
 8017ba4:	b92a      	cbnz	r2, 8017bb2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8017ba6:	4b31      	ldr	r3, [pc, #196]	; (8017c6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8017ba8:	21b1      	movs	r1, #177	; 0xb1
 8017baa:	4a31      	ldr	r2, [pc, #196]	; (8017c70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017bac:	4831      	ldr	r0, [pc, #196]	; (8017c74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8017bae:	f00d ff67 	bl	8025a80 <__assert_func>
 8017bb2:	4d31      	ldr	r5, [pc, #196]	; (8017c78 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8017bb4:	8829      	ldrh	r1, [r5, #0]
 8017bb6:	4299      	cmp	r1, r3
 8017bb8:	d803      	bhi.n	8017bc2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8017bba:	4b30      	ldr	r3, [pc, #192]	; (8017c7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8017bbc:	21b2      	movs	r1, #178	; 0xb2
 8017bbe:	4a2c      	ldr	r2, [pc, #176]	; (8017c70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017bc0:	e7f4      	b.n	8017bac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8017bc2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017bc6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017bca:	4b2d      	ldr	r3, [pc, #180]	; (8017c80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017bd2:	2a00      	cmp	r2, #0
 8017bd4:	d044      	beq.n	8017c60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017bd6:	784b      	ldrb	r3, [r1, #1]
 8017bd8:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8017bdc:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8017be0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017be4:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017be8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017bec:	4b25      	ldr	r3, [pc, #148]	; (8017c84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8017bee:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8017bf8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017bfc:	9207      	str	r2, [sp, #28]
 8017bfe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017c00:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017c04:	9009      	str	r0, [sp, #36]	; 0x24
 8017c06:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8017c0a:	f88d 9020 	strb.w	r9, [sp, #32]
 8017c0e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017c12:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017c16:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8017c1a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017c1e:	b10a      	cbz	r2, 8017c24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8017c20:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8017c22:	b907      	cbnz	r7, 8017c26 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8017c24:	689f      	ldr	r7, [r3, #8]
 8017c26:	f10d 0914 	add.w	r9, sp, #20
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	4648      	mov	r0, r9
 8017c2e:	f002 fa72 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c32:	6833      	ldr	r3, [r6, #0]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d0b6      	beq.n	8017ba6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8017c38:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017c3a:	882b      	ldrh	r3, [r5, #0]
 8017c3c:	428b      	cmp	r3, r1
 8017c3e:	d9bc      	bls.n	8017bba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8017c40:	4b11      	ldr	r3, [pc, #68]	; (8017c88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8017c42:	6818      	ldr	r0, [r3, #0]
 8017c44:	f7fa ff7c 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 8017c48:	2300      	movs	r3, #0
 8017c4a:	9001      	str	r0, [sp, #4]
 8017c4c:	4638      	mov	r0, r7
 8017c4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017c52:	ab07      	add	r3, sp, #28
 8017c54:	9300      	str	r3, [sp, #0]
 8017c56:	4643      	mov	r3, r8
 8017c58:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017c5c:	f7fa ff01 	bl	8012a62 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017c60:	b00c      	add	sp, #48	; 0x30
 8017c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c66:	bf00      	nop
 8017c68:	2000b458 	.word	0x2000b458
 8017c6c:	08029f08 	.word	0x08029f08
 8017c70:	0802a044 	.word	0x0802a044
 8017c74:	08029f4a 	.word	0x08029f4a
 8017c78:	2000b45c 	.word	0x2000b45c
 8017c7c:	08029f73 	.word	0x08029f73
 8017c80:	2000b460 	.word	0x2000b460
 8017c84:	2000b3c8 	.word	0x2000b3c8
 8017c88:	2000b464 	.word	0x2000b464

08017c8c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017c8c:	b40e      	push	{r1, r2, r3}
 8017c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c96:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017c98:	b09b      	sub	sp, #108	; 0x6c
 8017c9a:	4604      	mov	r4, r0
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d061      	beq.n	8017d64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8017ca0:	aa24      	add	r2, sp, #144	; 0x90
 8017ca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017d78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8017ca6:	9203      	str	r2, [sp, #12]
 8017ca8:	f8da 2000 	ldr.w	r2, [sl]
 8017cac:	b92a      	cbnz	r2, 8017cba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8017cae:	4b2e      	ldr	r3, [pc, #184]	; (8017d68 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8017cb0:	21b1      	movs	r1, #177	; 0xb1
 8017cb2:	4a2e      	ldr	r2, [pc, #184]	; (8017d6c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017cb4:	482e      	ldr	r0, [pc, #184]	; (8017d70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8017cb6:	f00d fee3 	bl	8025a80 <__assert_func>
 8017cba:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8017d7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8017cbe:	f8b8 1000 	ldrh.w	r1, [r8]
 8017cc2:	4299      	cmp	r1, r3
 8017cc4:	d803      	bhi.n	8017cce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8017cc6:	4b2b      	ldr	r3, [pc, #172]	; (8017d74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8017cc8:	21b2      	movs	r1, #178	; 0xb2
 8017cca:	4a28      	ldr	r2, [pc, #160]	; (8017d6c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017ccc:	e7f2      	b.n	8017cb4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8017cce:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8017d80 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8017cd2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017cd6:	f8d9 3000 	ldr.w	r3, [r9]
 8017cda:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8017cde:	683b      	ldr	r3, [r7, #0]
 8017ce0:	4638      	mov	r0, r7
 8017ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ce4:	4798      	blx	r3
 8017ce6:	4606      	mov	r6, r0
 8017ce8:	b205      	sxth	r5, r0
 8017cea:	a804      	add	r0, sp, #16
 8017cec:	f002 feb5 	bl	801aa5a <_ZN8touchgfx12TextProviderC1Ev>
 8017cf0:	683b      	ldr	r3, [r7, #0]
 8017cf2:	4638      	mov	r0, r7
 8017cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cf6:	4798      	blx	r3
 8017cf8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	9a03      	ldr	r2, [sp, #12]
 8017cfe:	a804      	add	r0, sp, #16
 8017d00:	f002 fef0 	bl	801aae4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017d04:	f8da 3000 	ldr.w	r3, [sl]
 8017d08:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d0ce      	beq.n	8017cae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8017d10:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017d12:	f8b8 0000 	ldrh.w	r0, [r8]
 8017d16:	4290      	cmp	r0, r2
 8017d18:	d9d5      	bls.n	8017cc6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8017d1a:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8017d1e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017d22:	f8d9 3000 	ldr.w	r3, [r9]
 8017d26:	787a      	ldrb	r2, [r7, #1]
 8017d28:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8017d2c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017d30:	9700      	str	r7, [sp, #0]
 8017d32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017d36:	a804      	add	r0, sp, #16
 8017d38:	f001 f918 	bl	8018f6c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017d3c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8017d40:	b203      	sxth	r3, r0
 8017d42:	18a9      	adds	r1, r5, r2
 8017d44:	2900      	cmp	r1, #0
 8017d46:	dd0b      	ble.n	8017d60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017d48:	3b01      	subs	r3, #1
 8017d4a:	fb13 f302 	smulbb	r3, r3, r2
 8017d4e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017d52:	b21d      	sxth	r5, r3
 8017d54:	4628      	mov	r0, r5
 8017d56:	b01b      	add	sp, #108	; 0x6c
 8017d58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d5c:	b003      	add	sp, #12
 8017d5e:	4770      	bx	lr
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	dcf7      	bgt.n	8017d54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017d64:	2500      	movs	r5, #0
 8017d66:	e7f5      	b.n	8017d54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017d68:	08029f08 	.word	0x08029f08
 8017d6c:	0802a044 	.word	0x0802a044
 8017d70:	08029f4a 	.word	0x08029f4a
 8017d74:	08029f73 	.word	0x08029f73
 8017d78:	2000b458 	.word	0x2000b458
 8017d7c:	2000b45c 	.word	0x2000b45c
 8017d80:	2000b460 	.word	0x2000b460

08017d84 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017d84:	b570      	push	{r4, r5, r6, lr}
 8017d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d8a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017d8c:	4604      	mov	r4, r0
 8017d8e:	4299      	cmp	r1, r3
 8017d90:	d01e      	beq.n	8017dd0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8017d92:	6803      	ldr	r3, [r0, #0]
 8017d94:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017d96:	4b0f      	ldr	r3, [pc, #60]	; (8017dd4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	b92b      	cbnz	r3, 8017da8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8017d9c:	4b0e      	ldr	r3, [pc, #56]	; (8017dd8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8017d9e:	21b1      	movs	r1, #177	; 0xb1
 8017da0:	4a0e      	ldr	r2, [pc, #56]	; (8017ddc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017da2:	480f      	ldr	r0, [pc, #60]	; (8017de0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017da4:	f00d fe6c 	bl	8025a80 <__assert_func>
 8017da8:	4b0e      	ldr	r3, [pc, #56]	; (8017de4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8017daa:	881b      	ldrh	r3, [r3, #0]
 8017dac:	428b      	cmp	r3, r1
 8017dae:	d803      	bhi.n	8017db8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8017db0:	4b0d      	ldr	r3, [pc, #52]	; (8017de8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8017db2:	21b2      	movs	r1, #178	; 0xb2
 8017db4:	4a09      	ldr	r2, [pc, #36]	; (8017ddc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017db6:	e7f4      	b.n	8017da2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8017db8:	4b0c      	ldr	r3, [pc, #48]	; (8017dec <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8017dba:	6818      	ldr	r0, [r3, #0]
 8017dbc:	f7fa fec0 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	4601      	mov	r1, r0
 8017dc4:	46ac      	mov	ip, r5
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	461a      	mov	r2, r3
 8017dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dce:	4760      	bx	ip
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	bd70      	pop	{r4, r5, r6, pc}
 8017dd4:	2000b458 	.word	0x2000b458
 8017dd8:	08029f08 	.word	0x08029f08
 8017ddc:	0802a044 	.word	0x0802a044
 8017de0:	08029f4a 	.word	0x08029f4a
 8017de4:	2000b45c 	.word	0x2000b45c
 8017de8:	08029f73 	.word	0x08029f73
 8017dec:	2000b464 	.word	0x2000b464

08017df0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017df0:	b570      	push	{r4, r5, r6, lr}
 8017df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017df6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017df8:	4604      	mov	r4, r0
 8017dfa:	429a      	cmp	r2, r3
 8017dfc:	d021      	beq.n	8017e42 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8017dfe:	6803      	ldr	r3, [r0, #0]
 8017e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e02:	4798      	blx	r3
 8017e04:	6823      	ldr	r3, [r4, #0]
 8017e06:	4605      	mov	r5, r0
 8017e08:	4620      	mov	r0, r4
 8017e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017e0c:	4798      	blx	r3
 8017e0e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017e12:	4606      	mov	r6, r0
 8017e14:	b22d      	sxth	r5, r5
 8017e16:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017e1a:	6823      	ldr	r3, [r4, #0]
 8017e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e1e:	d109      	bne.n	8017e34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017e20:	4629      	mov	r1, r5
 8017e22:	4620      	mov	r0, r4
 8017e24:	4798      	blx	r3
 8017e26:	6823      	ldr	r3, [r4, #0]
 8017e28:	4631      	mov	r1, r6
 8017e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e32:	4718      	bx	r3
 8017e34:	4601      	mov	r1, r0
 8017e36:	4620      	mov	r0, r4
 8017e38:	4798      	blx	r3
 8017e3a:	6823      	ldr	r3, [r4, #0]
 8017e3c:	4629      	mov	r1, r5
 8017e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e40:	e7f4      	b.n	8017e2c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8017e42:	bd70      	pop	{r4, r5, r6, pc}

08017e44 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017e44:	888a      	ldrh	r2, [r1, #4]
 8017e46:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017e48:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017e4c:	b922      	cbnz	r2, 8017e58 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017e4e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017e52:	b90b      	cbnz	r3, 8017e58 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017e54:	f7ff bfcc 	b.w	8017df0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017e58:	4770      	bx	lr

08017e5a <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	8003      	strh	r3, [r0, #0]
 8017e5e:	8043      	strh	r3, [r0, #2]
 8017e60:	8083      	strh	r3, [r0, #4]
 8017e62:	80c3      	strh	r3, [r0, #6]
 8017e64:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017e68:	b91b      	cbnz	r3, 8017e72 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8017e6a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017e6e:	2bff      	cmp	r3, #255	; 0xff
 8017e70:	d103      	bne.n	8017e7a <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017e72:	890b      	ldrh	r3, [r1, #8]
 8017e74:	8083      	strh	r3, [r0, #4]
 8017e76:	894b      	ldrh	r3, [r1, #10]
 8017e78:	80c3      	strh	r3, [r0, #6]
 8017e7a:	4770      	bx	lr

08017e7c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e7e:	4604      	mov	r4, r0
 8017e80:	466b      	mov	r3, sp
 8017e82:	6808      	ldr	r0, [r1, #0]
 8017e84:	6849      	ldr	r1, [r1, #4]
 8017e86:	c303      	stmia	r3!, {r0, r1}
 8017e88:	6823      	ldr	r3, [r4, #0]
 8017e8a:	4669      	mov	r1, sp
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e90:	4798      	blx	r3
 8017e92:	4b08      	ldr	r3, [pc, #32]	; (8017eb4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017e9a:	b10a      	cbz	r2, 8017ea0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017e9c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017e9e:	b900      	cbnz	r0, 8017ea2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017ea0:	6898      	ldr	r0, [r3, #8]
 8017ea2:	6803      	ldr	r3, [r0, #0]
 8017ea4:	4669      	mov	r1, sp
 8017ea6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017ea8:	699d      	ldr	r5, [r3, #24]
 8017eaa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017eae:	47a8      	blx	r5
 8017eb0:	b003      	add	sp, #12
 8017eb2:	bd30      	pop	{r4, r5, pc}
 8017eb4:	2000b3c8 	.word	0x2000b3c8

08017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017eb8:	b538      	push	{r3, r4, r5, lr}
 8017eba:	880b      	ldrh	r3, [r1, #0]
 8017ebc:	4605      	mov	r5, r0
 8017ebe:	4604      	mov	r4, r0
 8017ec0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017ec2:	8813      	ldrh	r3, [r2, #0]
 8017ec4:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017ec8:	4628      	mov	r0, r5
 8017eca:	f003 ff8b 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017ece:	8120      	strh	r0, [r4, #8]
 8017ed0:	4628      	mov	r0, r5
 8017ed2:	f003 ffc1 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017ed6:	8160      	strh	r0, [r4, #10]
 8017ed8:	bd38      	pop	{r3, r4, r5, pc}

08017eda <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017eda:	b510      	push	{r4, lr}
 8017edc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8017ee0:	4604      	mov	r4, r0
 8017ee2:	2bff      	cmp	r3, #255	; 0xff
 8017ee4:	d006      	beq.n	8017ef4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	8003      	strh	r3, [r0, #0]
 8017eea:	8043      	strh	r3, [r0, #2]
 8017eec:	8083      	strh	r3, [r0, #4]
 8017eee:	80c3      	strh	r3, [r0, #6]
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	bd10      	pop	{r4, pc}
 8017ef4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017ef8:	b11b      	cbz	r3, 8017f02 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017efa:	3130      	adds	r1, #48	; 0x30
 8017efc:	f003 ffe6 	bl	801becc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017f00:	e7f6      	b.n	8017ef0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8017f02:	312e      	adds	r1, #46	; 0x2e
 8017f04:	e7fa      	b.n	8017efc <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08017f08 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8017f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f0c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017f10:	b08a      	sub	sp, #40	; 0x28
 8017f12:	4604      	mov	r4, r0
 8017f14:	4688      	mov	r8, r1
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d044      	beq.n	8017fa4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8017f1a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017f1c:	a805      	add	r0, sp, #20
 8017f1e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017f22:	f003 ff5f 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017f26:	4605      	mov	r5, r0
 8017f28:	b206      	sxth	r6, r0
 8017f2a:	a805      	add	r0, sp, #20
 8017f2c:	f003 ff94 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017f30:	f9b8 2000 	ldrsh.w	r2, [r8]
 8017f34:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8017f38:	2300      	movs	r3, #0
 8017f3a:	fa0f fc80 	sxth.w	ip, r0
 8017f3e:	4417      	add	r7, r2
 8017f40:	9306      	str	r3, [sp, #24]
 8017f42:	b2bf      	uxth	r7, r7
 8017f44:	fa0f fe87 	sxth.w	lr, r7
 8017f48:	459e      	cmp	lr, r3
 8017f4a:	dd2d      	ble.n	8017fa8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017f4c:	4296      	cmp	r6, r2
 8017f4e:	dd2b      	ble.n	8017fa8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017f50:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8017f54:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8017f58:	4419      	add	r1, r3
 8017f5a:	b289      	uxth	r1, r1
 8017f5c:	fa0f f881 	sxth.w	r8, r1
 8017f60:	f1b8 0f00 	cmp.w	r8, #0
 8017f64:	dd20      	ble.n	8017fa8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017f66:	459c      	cmp	ip, r3
 8017f68:	dd1e      	ble.n	8017fa8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017f6a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8017f6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f72:	4576      	cmp	r6, lr
 8017f74:	bfa8      	it	ge
 8017f76:	463d      	movge	r5, r7
 8017f78:	45c4      	cmp	ip, r8
 8017f7a:	bfa8      	it	ge
 8017f7c:	4608      	movge	r0, r1
 8017f7e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017f82:	1aad      	subs	r5, r5, r2
 8017f84:	1ac0      	subs	r0, r0, r3
 8017f86:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017f8a:	f8ad 501c 	strh.w	r5, [sp, #28]
 8017f8e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017f92:	4b1f      	ldr	r3, [pc, #124]	; (8018010 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	b953      	cbnz	r3, 8017fae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8017f98:	4b1e      	ldr	r3, [pc, #120]	; (8018014 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8017f9a:	2189      	movs	r1, #137	; 0x89
 8017f9c:	4a1e      	ldr	r2, [pc, #120]	; (8018018 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8017f9e:	481f      	ldr	r0, [pc, #124]	; (801801c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8017fa0:	f00d fd6e 	bl	8025a80 <__assert_func>
 8017fa4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8017fa6:	e7b9      	b.n	8017f1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8017fa8:	2300      	movs	r3, #0
 8017faa:	9307      	str	r3, [sp, #28]
 8017fac:	e7f1      	b.n	8017f92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8017fae:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d026      	beq.n	8018008 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017fba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	dd22      	ble.n	8018008 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017fc2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	dd1e      	ble.n	8018008 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017fca:	2300      	movs	r3, #0
 8017fcc:	a908      	add	r1, sp, #32
 8017fce:	4620      	mov	r0, r4
 8017fd0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017fd4:	6823      	ldr	r3, [r4, #0]
 8017fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fd8:	4798      	blx	r3
 8017fda:	4b11      	ldr	r3, [pc, #68]	; (8018020 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017fe2:	b10a      	cbz	r2, 8017fe8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8017fe4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017fe6:	b900      	cbnz	r0, 8017fea <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8017fe8:	6898      	ldr	r0, [r3, #8]
 8017fea:	2501      	movs	r5, #1
 8017fec:	6801      	ldr	r1, [r0, #0]
 8017fee:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017ff2:	9502      	str	r5, [sp, #8]
 8017ff4:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8017ff8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017ffc:	9401      	str	r4, [sp, #4]
 8017ffe:	ac06      	add	r4, sp, #24
 8018000:	9400      	str	r4, [sp, #0]
 8018002:	688c      	ldr	r4, [r1, #8]
 8018004:	a905      	add	r1, sp, #20
 8018006:	47a0      	blx	r4
 8018008:	b00a      	add	sp, #40	; 0x28
 801800a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801800e:	bf00      	nop
 8018010:	2000b490 	.word	0x2000b490
 8018014:	0802a0dc 	.word	0x0802a0dc
 8018018:	0802a1b0 	.word	0x0802a1b0
 801801c:	0802a118 	.word	0x0802a118
 8018020:	2000b3c8 	.word	0x2000b3c8

08018024 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801802a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801802c:	4606      	mov	r6, r0
 801802e:	4299      	cmp	r1, r3
 8018030:	d02a      	beq.n	8018088 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8018032:	4b16      	ldr	r3, [pc, #88]	; (801808c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	b92b      	cbnz	r3, 8018044 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8018038:	4b15      	ldr	r3, [pc, #84]	; (8018090 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801803a:	21b1      	movs	r1, #177	; 0xb1
 801803c:	4a15      	ldr	r2, [pc, #84]	; (8018094 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801803e:	4816      	ldr	r0, [pc, #88]	; (8018098 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8018040:	f00d fd1e 	bl	8025a80 <__assert_func>
 8018044:	4a15      	ldr	r2, [pc, #84]	; (801809c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8018046:	8812      	ldrh	r2, [r2, #0]
 8018048:	428a      	cmp	r2, r1
 801804a:	d803      	bhi.n	8018054 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801804c:	4b14      	ldr	r3, [pc, #80]	; (80180a0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801804e:	21b2      	movs	r1, #178	; 0xb2
 8018050:	4a10      	ldr	r2, [pc, #64]	; (8018094 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018052:	e7f4      	b.n	801803e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8018054:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018058:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801805c:	4b11      	ldr	r3, [pc, #68]	; (80180a4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801805e:	7854      	ldrb	r4, [r2, #1]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018066:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801806a:	682b      	ldr	r3, [r5, #0]
 801806c:	69df      	ldr	r7, [r3, #28]
 801806e:	4b0e      	ldr	r3, [pc, #56]	; (80180a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8018070:	6818      	ldr	r0, [r3, #0]
 8018072:	f7fa fd65 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 8018076:	2300      	movs	r3, #0
 8018078:	4602      	mov	r2, r0
 801807a:	4621      	mov	r1, r4
 801807c:	9300      	str	r3, [sp, #0]
 801807e:	4628      	mov	r0, r5
 8018080:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8018082:	47b8      	blx	r7
 8018084:	b003      	add	sp, #12
 8018086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018088:	2000      	movs	r0, #0
 801808a:	e7fb      	b.n	8018084 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801808c:	2000b458 	.word	0x2000b458
 8018090:	08029f08 	.word	0x08029f08
 8018094:	0802a260 	.word	0x0802a260
 8018098:	08029f4a 	.word	0x08029f4a
 801809c:	2000b45c 	.word	0x2000b45c
 80180a0:	08029f73 	.word	0x08029f73
 80180a4:	2000b460 	.word	0x2000b460
 80180a8:	2000b464 	.word	0x2000b464

080180ac <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80180ac:	b570      	push	{r4, r5, r6, lr}
 80180ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180b2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80180b4:	4604      	mov	r4, r0
 80180b6:	4299      	cmp	r1, r3
 80180b8:	d01e      	beq.n	80180f8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 80180ba:	6803      	ldr	r3, [r0, #0]
 80180bc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80180be:	4b0f      	ldr	r3, [pc, #60]	; (80180fc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	b92b      	cbnz	r3, 80180d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 80180c4:	4b0e      	ldr	r3, [pc, #56]	; (8018100 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 80180c6:	21b1      	movs	r1, #177	; 0xb1
 80180c8:	4a0e      	ldr	r2, [pc, #56]	; (8018104 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80180ca:	480f      	ldr	r0, [pc, #60]	; (8018108 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 80180cc:	f00d fcd8 	bl	8025a80 <__assert_func>
 80180d0:	4b0e      	ldr	r3, [pc, #56]	; (801810c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 80180d2:	881b      	ldrh	r3, [r3, #0]
 80180d4:	428b      	cmp	r3, r1
 80180d6:	d803      	bhi.n	80180e0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 80180d8:	4b0d      	ldr	r3, [pc, #52]	; (8018110 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 80180da:	21b2      	movs	r1, #178	; 0xb2
 80180dc:	4a09      	ldr	r2, [pc, #36]	; (8018104 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80180de:	e7f4      	b.n	80180ca <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 80180e0:	4b0c      	ldr	r3, [pc, #48]	; (8018114 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 80180e2:	6818      	ldr	r0, [r3, #0]
 80180e4:	f7fa fd2c 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 80180e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80180ea:	4601      	mov	r1, r0
 80180ec:	46ac      	mov	ip, r5
 80180ee:	4620      	mov	r0, r4
 80180f0:	2300      	movs	r3, #0
 80180f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180f6:	4760      	bx	ip
 80180f8:	2000      	movs	r0, #0
 80180fa:	bd70      	pop	{r4, r5, r6, pc}
 80180fc:	2000b458 	.word	0x2000b458
 8018100:	08029f08 	.word	0x08029f08
 8018104:	0802a260 	.word	0x0802a260
 8018108:	08029f4a 	.word	0x08029f4a
 801810c:	2000b45c 	.word	0x2000b45c
 8018110:	08029f73 	.word	0x08029f73
 8018114:	2000b464 	.word	0x2000b464

08018118 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801811c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018120:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018122:	b08c      	sub	sp, #48	; 0x30
 8018124:	4604      	mov	r4, r0
 8018126:	4293      	cmp	r3, r2
 8018128:	460e      	mov	r6, r1
 801812a:	d05d      	beq.n	80181e8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801812c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801820c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8018130:	f8d8 2000 	ldr.w	r2, [r8]
 8018134:	b92a      	cbnz	r2, 8018142 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8018136:	4b2e      	ldr	r3, [pc, #184]	; (80181f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8018138:	21b1      	movs	r1, #177	; 0xb1
 801813a:	4a2e      	ldr	r2, [pc, #184]	; (80181f4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801813c:	482e      	ldr	r0, [pc, #184]	; (80181f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801813e:	f00d fc9f 	bl	8025a80 <__assert_func>
 8018142:	4f2e      	ldr	r7, [pc, #184]	; (80181fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8018144:	8839      	ldrh	r1, [r7, #0]
 8018146:	4299      	cmp	r1, r3
 8018148:	d803      	bhi.n	8018152 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801814a:	4b2d      	ldr	r3, [pc, #180]	; (8018200 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801814c:	21b2      	movs	r1, #178	; 0xb2
 801814e:	4a29      	ldr	r2, [pc, #164]	; (80181f4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018150:	e7f4      	b.n	801813c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8018152:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018156:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801815a:	4b2a      	ldr	r3, [pc, #168]	; (8018204 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018162:	2a00      	cmp	r2, #0
 8018164:	d040      	beq.n	80181e8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018166:	784b      	ldrb	r3, [r1, #1]
 8018168:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801816c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018170:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8018174:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8018178:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801817c:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018180:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018184:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018188:	ad05      	add	r5, sp, #20
 801818a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801818c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018190:	9207      	str	r2, [sp, #28]
 8018192:	f88d 9020 	strb.w	r9, [sp, #32]
 8018196:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801819a:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801819e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80181a2:	9009      	str	r0, [sp, #36]	; 0x24
 80181a4:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80181a8:	f7f4 fb6c 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 80181ac:	4621      	mov	r1, r4
 80181ae:	4681      	mov	r9, r0
 80181b0:	4628      	mov	r0, r5
 80181b2:	f001 ffb0 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181b6:	f8d8 3000 	ldr.w	r3, [r8]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d0bb      	beq.n	8018136 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 80181be:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80181c0:	883b      	ldrh	r3, [r7, #0]
 80181c2:	428b      	cmp	r3, r1
 80181c4:	d9c1      	bls.n	801814a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 80181c6:	4b10      	ldr	r3, [pc, #64]	; (8018208 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 80181c8:	6818      	ldr	r0, [r3, #0]
 80181ca:	f7fa fcb9 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 80181ce:	2300      	movs	r3, #0
 80181d0:	9303      	str	r3, [sp, #12]
 80181d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80181d4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80181d8:	ab07      	add	r3, sp, #28
 80181da:	4648      	mov	r0, r9
 80181dc:	9300      	str	r3, [sp, #0]
 80181de:	4633      	mov	r3, r6
 80181e0:	e895 0006 	ldmia.w	r5, {r1, r2}
 80181e4:	f7fa fc3d 	bl	8012a62 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80181e8:	b00c      	add	sp, #48	; 0x30
 80181ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ee:	bf00      	nop
 80181f0:	08029f08 	.word	0x08029f08
 80181f4:	0802a260 	.word	0x0802a260
 80181f8:	08029f4a 	.word	0x08029f4a
 80181fc:	2000b45c 	.word	0x2000b45c
 8018200:	08029f73 	.word	0x08029f73
 8018204:	2000b460 	.word	0x2000b460
 8018208:	2000b464 	.word	0x2000b464
 801820c:	2000b458 	.word	0x2000b458

08018210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8018210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018214:	461c      	mov	r4, r3
 8018216:	4606      	mov	r6, r0
 8018218:	9f06      	ldr	r7, [sp, #24]
 801821a:	f7ff fe4d 	bl	8017eb8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 801821e:	8823      	ldrh	r3, [r4, #0]
 8018220:	f04f 0802 	mov.w	r8, #2
 8018224:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8018228:	4638      	mov	r0, r7
 801822a:	86b3      	strh	r3, [r6, #52]	; 0x34
 801822c:	883b      	ldrh	r3, [r7, #0]
 801822e:	fb95 f5f8 	sdiv	r5, r5, r8
 8018232:	86f3      	strh	r3, [r6, #54]	; 0x36
 8018234:	b2ad      	uxth	r5, r5
 8018236:	f003 fdd5 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801823a:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 801823e:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8018242:	fb94 f4f8 	sdiv	r4, r4, r8
 8018246:	b2a4      	uxth	r4, r4
 8018248:	8730      	strh	r0, [r6, #56]	; 0x38
 801824a:	4638      	mov	r0, r7
 801824c:	f003 fe04 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018250:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8018254:	8770      	strh	r0, [r6, #58]	; 0x3a
 8018256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801825c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 801825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018260:	4604      	mov	r4, r0
 8018262:	b08c      	sub	sp, #48	; 0x30
 8018264:	460d      	mov	r5, r1
 8018266:	f7ff fe4f 	bl	8017f08 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801826a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801826e:	b33b      	cbz	r3, 80182c0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 8018270:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018272:	a805      	add	r0, sp, #20
 8018274:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018278:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 801827c:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8018280:	f003 fdb0 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018284:	4606      	mov	r6, r0
 8018286:	a805      	add	r0, sp, #20
 8018288:	f003 fde6 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801828c:	6869      	ldr	r1, [r5, #4]
 801828e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018292:	ab08      	add	r3, sp, #32
 8018294:	6828      	ldr	r0, [r5, #0]
 8018296:	ad08      	add	r5, sp, #32
 8018298:	f8ad 8018 	strh.w	r8, [sp, #24]
 801829c:	f8ad 701a 	strh.w	r7, [sp, #26]
 80182a0:	f8ad 601c 	strh.w	r6, [sp, #28]
 80182a4:	c303      	stmia	r3!, {r0, r1}
 80182a6:	a906      	add	r1, sp, #24
 80182a8:	4628      	mov	r0, r5
 80182aa:	f7fd fd7b 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 80182ae:	4b25      	ldr	r3, [pc, #148]	; (8018344 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	b93b      	cbnz	r3, 80182c4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 80182b4:	4b24      	ldr	r3, [pc, #144]	; (8018348 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 80182b6:	2189      	movs	r1, #137	; 0x89
 80182b8:	4a24      	ldr	r2, [pc, #144]	; (801834c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 80182ba:	4825      	ldr	r0, [pc, #148]	; (8018350 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 80182bc:	f00d fbe0 	bl	8025a80 <__assert_func>
 80182c0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80182c2:	e7d6      	b.n	8018272 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 80182c4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80182c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d035      	beq.n	801833c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 80182d0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	dd31      	ble.n	801833c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 80182d8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80182dc:	2b00      	cmp	r3, #0
 80182de:	dd2d      	ble.n	801833c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 80182e0:	2300      	movs	r3, #0
 80182e2:	a90a      	add	r1, sp, #40	; 0x28
 80182e4:	4620      	mov	r0, r4
 80182e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80182ea:	6823      	ldr	r3, [r4, #0]
 80182ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ee:	4798      	blx	r3
 80182f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80182f4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80182f6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80182fa:	1a9b      	subs	r3, r3, r2
 80182fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018300:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8018302:	1ac9      	subs	r1, r1, r3
 8018304:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8018308:	4912      	ldr	r1, [pc, #72]	; (8018354 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 801830a:	6809      	ldr	r1, [r1, #0]
 801830c:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 8018310:	b108      	cbz	r0, 8018316 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 8018312:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8018314:	b900      	cbnz	r0, 8018318 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 8018316:	6888      	ldr	r0, [r1, #8]
 8018318:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 801831c:	2601      	movs	r6, #1
 801831e:	440b      	add	r3, r1
 8018320:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8018324:	440a      	add	r2, r1
 8018326:	6801      	ldr	r1, [r0, #0]
 8018328:	9602      	str	r6, [sp, #8]
 801832a:	b21b      	sxth	r3, r3
 801832c:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8018330:	b212      	sxth	r2, r2
 8018332:	e9cd 5400 	strd	r5, r4, [sp]
 8018336:	688c      	ldr	r4, [r1, #8]
 8018338:	a905      	add	r1, sp, #20
 801833a:	47a0      	blx	r4
 801833c:	b00c      	add	sp, #48	; 0x30
 801833e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018342:	bf00      	nop
 8018344:	2000b490 	.word	0x2000b490
 8018348:	0802a0dc 	.word	0x0802a0dc
 801834c:	0802a304 	.word	0x0802a304
 8018350:	0802a118 	.word	0x0802a118
 8018354:	2000b3c8 	.word	0x2000b3c8

08018358 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8018358:	2101      	movs	r1, #1
 801835a:	2200      	movs	r2, #0
 801835c:	b510      	push	{r4, lr}
 801835e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8018362:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8018366:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801836a:	4c0c      	ldr	r4, [pc, #48]	; (801839c <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 801836c:	8082      	strh	r2, [r0, #4]
 801836e:	80c2      	strh	r2, [r0, #6]
 8018370:	8102      	strh	r2, [r0, #8]
 8018372:	8142      	strh	r2, [r0, #10]
 8018374:	8182      	strh	r2, [r0, #12]
 8018376:	81c2      	strh	r2, [r0, #14]
 8018378:	8202      	strh	r2, [r0, #16]
 801837a:	8242      	strh	r2, [r0, #18]
 801837c:	61c2      	str	r2, [r0, #28]
 801837e:	6282      	str	r2, [r0, #40]	; 0x28
 8018380:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8018384:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8018386:	8601      	strh	r1, [r0, #48]	; 0x30
 8018388:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801838c:	6004      	str	r4, [r0, #0]
 801838e:	8681      	strh	r1, [r0, #52]	; 0x34
 8018390:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018392:	8702      	strh	r2, [r0, #56]	; 0x38
 8018394:	8742      	strh	r2, [r0, #58]	; 0x3a
 8018396:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801839a:	bd10      	pop	{r4, pc}
 801839c:	0802a298 	.word	0x0802a298

080183a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80183a0:	b570      	push	{r4, r5, r6, lr}
 80183a2:	4605      	mov	r5, r0
 80183a4:	880b      	ldrh	r3, [r1, #0]
 80183a6:	4604      	mov	r4, r0
 80183a8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80183aa:	f855 3b26 	ldr.w	r3, [r5], #38
 80183ae:	4628      	mov	r0, r5
 80183b0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80183b2:	f003 fd17 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80183b6:	b201      	sxth	r1, r0
 80183b8:	4620      	mov	r0, r4
 80183ba:	47b0      	blx	r6
 80183bc:	6823      	ldr	r3, [r4, #0]
 80183be:	4628      	mov	r0, r5
 80183c0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80183c2:	f003 fd49 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80183c6:	b201      	sxth	r1, r0
 80183c8:	4620      	mov	r0, r4
 80183ca:	4633      	mov	r3, r6
 80183cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183d0:	4718      	bx	r3

080183d2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80183d2:	b510      	push	{r4, lr}
 80183d4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80183d8:	4604      	mov	r4, r0
 80183da:	2bff      	cmp	r3, #255	; 0xff
 80183dc:	d006      	beq.n	80183ec <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80183de:	2300      	movs	r3, #0
 80183e0:	8003      	strh	r3, [r0, #0]
 80183e2:	8043      	strh	r3, [r0, #2]
 80183e4:	8083      	strh	r3, [r0, #4]
 80183e6:	80c3      	strh	r3, [r0, #6]
 80183e8:	4620      	mov	r0, r4
 80183ea:	bd10      	pop	{r4, pc}
 80183ec:	3126      	adds	r1, #38	; 0x26
 80183ee:	f003 fd6d 	bl	801becc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80183f2:	e7f9      	b.n	80183e8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080183f4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80183f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f8:	4604      	mov	r4, r0
 80183fa:	b088      	sub	sp, #32
 80183fc:	2500      	movs	r5, #0
 80183fe:	460f      	mov	r7, r1
 8018400:	f854 3b26 	ldr.w	r3, [r4], #38
 8018404:	a904      	add	r1, sp, #16
 8018406:	4606      	mov	r6, r0
 8018408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801840a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801840e:	4798      	blx	r3
 8018410:	4620      	mov	r0, r4
 8018412:	f003 fce7 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018416:	4680      	mov	r8, r0
 8018418:	4620      	mov	r0, r4
 801841a:	f003 fd1d 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801841e:	9506      	str	r5, [sp, #24]
 8018420:	ad06      	add	r5, sp, #24
 8018422:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018426:	4639      	mov	r1, r7
 8018428:	f8ad 801c 	strh.w	r8, [sp, #28]
 801842c:	4628      	mov	r0, r5
 801842e:	f7fd fcb9 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 8018432:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018436:	2b00      	cmp	r3, #0
 8018438:	dd19      	ble.n	801846e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801843a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801843e:	2b00      	cmp	r3, #0
 8018440:	dd15      	ble.n	801846e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018442:	4b0c      	ldr	r3, [pc, #48]	; (8018474 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801844a:	b10a      	cbz	r2, 8018450 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801844c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801844e:	b900      	cbnz	r0, 8018452 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8018450:	6898      	ldr	r0, [r3, #8]
 8018452:	2701      	movs	r7, #1
 8018454:	6801      	ldr	r1, [r0, #0]
 8018456:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801845a:	9702      	str	r7, [sp, #8]
 801845c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8018460:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018464:	e9cd 5600 	strd	r5, r6, [sp]
 8018468:	688d      	ldr	r5, [r1, #8]
 801846a:	4621      	mov	r1, r4
 801846c:	47a8      	blx	r5
 801846e:	b008      	add	sp, #32
 8018470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018474:	2000b3c8 	.word	0x2000b3c8

08018478 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 8018478:	b510      	push	{r4, lr}
 801847a:	4604      	mov	r4, r0
 801847c:	f7ff fd2d 	bl	8017eda <_ZNK8touchgfx6Button12getSolidRectEv>
 8018480:	4620      	mov	r0, r4
 8018482:	bd10      	pop	{r4, pc}

08018484 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8018484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018488:	4604      	mov	r4, r0
 801848a:	b08c      	sub	sp, #48	; 0x30
 801848c:	4688      	mov	r8, r1
 801848e:	f7ff fd3b 	bl	8017f08 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8018492:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018498:	4293      	cmp	r3, r2
 801849a:	f000 809a 	beq.w	80185d2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801849e:	4e55      	ldr	r6, [pc, #340]	; (80185f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80184a0:	6832      	ldr	r2, [r6, #0]
 80184a2:	b92a      	cbnz	r2, 80184b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 80184a4:	4b54      	ldr	r3, [pc, #336]	; (80185f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 80184a6:	21b1      	movs	r1, #177	; 0xb1
 80184a8:	4a54      	ldr	r2, [pc, #336]	; (80185fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 80184aa:	4855      	ldr	r0, [pc, #340]	; (8018600 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 80184ac:	f00d fae8 	bl	8025a80 <__assert_func>
 80184b0:	4d54      	ldr	r5, [pc, #336]	; (8018604 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 80184b2:	8829      	ldrh	r1, [r5, #0]
 80184b4:	4299      	cmp	r1, r3
 80184b6:	d803      	bhi.n	80184c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 80184b8:	4b53      	ldr	r3, [pc, #332]	; (8018608 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 80184ba:	21b2      	movs	r1, #178	; 0xb2
 80184bc:	4a4f      	ldr	r2, [pc, #316]	; (80185fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 80184be:	e7f4      	b.n	80184aa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 80184c0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80184c4:	f04f 0c02 	mov.w	ip, #2
 80184c8:	4b50      	ldr	r3, [pc, #320]	; (801860c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 80184ca:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80184d4:	f1be 0f01 	cmp.w	lr, #1
 80184d8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80184dc:	f04f 0300 	mov.w	r3, #0
 80184e0:	b208      	sxth	r0, r1
 80184e2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80184e6:	9303      	str	r3, [sp, #12]
 80184e8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80184ec:	d074      	beq.n	80185d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 80184ee:	f1be 0f03 	cmp.w	lr, #3
 80184f2:	d071      	beq.n	80185d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 80184f4:	1a52      	subs	r2, r2, r1
 80184f6:	f8ad 3010 	strh.w	r3, [sp, #16]
 80184fa:	f8ad 0012 	strh.w	r0, [sp, #18]
 80184fe:	fb92 f2fc 	sdiv	r2, r2, ip
 8018502:	f8ad 200e 	strh.w	r2, [sp, #14]
 8018506:	f10d 090c 	add.w	r9, sp, #12
 801850a:	f10d 0a14 	add.w	sl, sp, #20
 801850e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018512:	e88a 0003 	stmia.w	sl, {r0, r1}
 8018516:	4641      	mov	r1, r8
 8018518:	4650      	mov	r0, sl
 801851a:	f7fd fc43 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 801851e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018522:	2b00      	cmp	r3, #0
 8018524:	dd55      	ble.n	80185d2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8018526:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801852a:	2b00      	cmp	r3, #0
 801852c:	dd51      	ble.n	80185d2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801852e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018532:	4649      	mov	r1, r9
 8018534:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018538:	4620      	mov	r0, r4
 801853a:	1a9b      	subs	r3, r3, r2
 801853c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018540:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018544:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018548:	1a9b      	subs	r3, r3, r2
 801854a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801854e:	6823      	ldr	r3, [r4, #0]
 8018550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018552:	4798      	blx	r3
 8018554:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018558:	2b00      	cmp	r3, #0
 801855a:	d047      	beq.n	80185ec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 801855c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8018560:	6833      	ldr	r3, [r6, #0]
 8018562:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 8018566:	2b00      	cmp	r3, #0
 8018568:	d09c      	beq.n	80184a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801856a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801856c:	8828      	ldrh	r0, [r5, #0]
 801856e:	4288      	cmp	r0, r1
 8018570:	d9a2      	bls.n	80184b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 8018572:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018576:	6812      	ldr	r2, [r2, #0]
 8018578:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801857c:	785b      	ldrb	r3, [r3, #1]
 801857e:	9209      	str	r2, [sp, #36]	; 0x24
 8018580:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8018584:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018588:	9707      	str	r7, [sp, #28]
 801858a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801858e:	2300      	movs	r3, #0
 8018590:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8018594:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8018598:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801859c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80185a0:	4b1b      	ldr	r3, [pc, #108]	; (8018610 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 80185a2:	f88d 5020 	strb.w	r5, [sp, #32]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80185ac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80185b0:	b10a      	cbz	r2, 80185b6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 80185b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80185b4:	b904      	cbnz	r4, 80185b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 80185b6:	689c      	ldr	r4, [r3, #8]
 80185b8:	4b16      	ldr	r3, [pc, #88]	; (8018614 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 80185ba:	6818      	ldr	r0, [r3, #0]
 80185bc:	f7fa fac0 	bl	8012b40 <_ZNK8touchgfx5Texts7getTextEt>
 80185c0:	ab07      	add	r3, sp, #28
 80185c2:	9001      	str	r0, [sp, #4]
 80185c4:	4620      	mov	r0, r4
 80185c6:	9300      	str	r3, [sp, #0]
 80185c8:	4653      	mov	r3, sl
 80185ca:	e899 0006 	ldmia.w	r9, {r1, r2}
 80185ce:	f7fa fa48 	bl	8012a62 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80185d2:	b00c      	add	sp, #48	; 0x30
 80185d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185d8:	1a5b      	subs	r3, r3, r1
 80185da:	f8ad 0010 	strh.w	r0, [sp, #16]
 80185de:	f8ad 2012 	strh.w	r2, [sp, #18]
 80185e2:	fb93 f3fc 	sdiv	r3, r3, ip
 80185e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80185ea:	e78c      	b.n	8018506 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 80185ec:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80185f0:	e7b6      	b.n	8018560 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 80185f2:	bf00      	nop
 80185f4:	2000b458 	.word	0x2000b458
 80185f8:	08029f08 	.word	0x08029f08
 80185fc:	0802a414 	.word	0x0802a414
 8018600:	08029f4a 	.word	0x08029f4a
 8018604:	2000b45c 	.word	0x2000b45c
 8018608:	08029f73 	.word	0x08029f73
 801860c:	2000b460 	.word	0x2000b460
 8018610:	2000b3c8 	.word	0x2000b3c8
 8018614:	2000b464 	.word	0x2000b464

08018618 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8018618:	2101      	movs	r1, #1
 801861a:	2200      	movs	r2, #0
 801861c:	b510      	push	{r4, lr}
 801861e:	4c12      	ldr	r4, [pc, #72]	; (8018668 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 8018620:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8018624:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8018628:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801862c:	6004      	str	r4, [r0, #0]
 801862e:	4c0f      	ldr	r4, [pc, #60]	; (801866c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8018630:	8082      	strh	r2, [r0, #4]
 8018632:	80c2      	strh	r2, [r0, #6]
 8018634:	8102      	strh	r2, [r0, #8]
 8018636:	8142      	strh	r2, [r0, #10]
 8018638:	8182      	strh	r2, [r0, #12]
 801863a:	81c2      	strh	r2, [r0, #14]
 801863c:	8202      	strh	r2, [r0, #16]
 801863e:	8242      	strh	r2, [r0, #18]
 8018640:	61c2      	str	r2, [r0, #28]
 8018642:	6282      	str	r2, [r0, #40]	; 0x28
 8018644:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8018648:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801864a:	8601      	strh	r1, [r0, #48]	; 0x30
 801864c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8018650:	6344      	str	r4, [r0, #52]	; 0x34
 8018652:	8701      	strh	r1, [r0, #56]	; 0x38
 8018654:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8018658:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801865c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018660:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8018664:	bd10      	pop	{r4, pc}
 8018666:	bf00      	nop
 8018668:	0802a3ac 	.word	0x0802a3ac
 801866c:	08027644 	.word	0x08027644

08018670 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8018670:	4b02      	ldr	r3, [pc, #8]	; (801867c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8018672:	6018      	str	r0, [r3, #0]
 8018674:	4b02      	ldr	r3, [pc, #8]	; (8018680 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8018676:	6019      	str	r1, [r3, #0]
 8018678:	4770      	bx	lr
 801867a:	bf00      	nop
 801867c:	2000b3d0 	.word	0x2000b3d0
 8018680:	2000b3e4 	.word	0x2000b3e4

08018684 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8018684:	b538      	push	{r3, r4, r5, lr}
 8018686:	4c2b      	ldr	r4, [pc, #172]	; (8018734 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8018688:	4b2b      	ldr	r3, [pc, #172]	; (8018738 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801868a:	6821      	ldr	r1, [r4, #0]
 801868c:	681a      	ldr	r2, [r3, #0]
 801868e:	4281      	cmp	r1, r0
 8018690:	4d2a      	ldr	r5, [pc, #168]	; (801873c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8018692:	492b      	ldr	r1, [pc, #172]	; (8018740 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8018694:	d108      	bne.n	80186a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8018696:	682b      	ldr	r3, [r5, #0]
 8018698:	4293      	cmp	r3, r2
 801869a:	d105      	bne.n	80186a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801869c:	6808      	ldr	r0, [r1, #0]
 801869e:	280f      	cmp	r0, #15
 80186a0:	bf94      	ite	ls
 80186a2:	2000      	movls	r0, #0
 80186a4:	2001      	movhi	r0, #1
 80186a6:	bd38      	pop	{r3, r4, r5, pc}
 80186a8:	4b26      	ldr	r3, [pc, #152]	; (8018744 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80186aa:	6020      	str	r0, [r4, #0]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	602a      	str	r2, [r5, #0]
 80186b0:	4298      	cmp	r0, r3
 80186b2:	d905      	bls.n	80186c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80186b4:	4b24      	ldr	r3, [pc, #144]	; (8018748 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80186b6:	2137      	movs	r1, #55	; 0x37
 80186b8:	4a24      	ldr	r2, [pc, #144]	; (801874c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80186ba:	4825      	ldr	r0, [pc, #148]	; (8018750 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80186bc:	f00d f9e0 	bl	8025a80 <__assert_func>
 80186c0:	f010 0403 	ands.w	r4, r0, #3
 80186c4:	bf1f      	itttt	ne
 80186c6:	f1c4 0504 	rsbne	r5, r4, #4
 80186ca:	3b04      	subne	r3, #4
 80186cc:	1952      	addne	r2, r2, r5
 80186ce:	191b      	addne	r3, r3, r4
 80186d0:	4d20      	ldr	r5, [pc, #128]	; (8018754 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80186d2:	4402      	add	r2, r0
 80186d4:	1a1b      	subs	r3, r3, r0
 80186d6:	3001      	adds	r0, #1
 80186d8:	602a      	str	r2, [r5, #0]
 80186da:	f020 0401 	bic.w	r4, r0, #1
 80186de:	42a3      	cmp	r3, r4
 80186e0:	d203      	bcs.n	80186ea <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 80186e2:	4b19      	ldr	r3, [pc, #100]	; (8018748 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80186e4:	214a      	movs	r1, #74	; 0x4a
 80186e6:	4a19      	ldr	r2, [pc, #100]	; (801874c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80186e8:	e7e7      	b.n	80186ba <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80186ea:	f010 0002 	ands.w	r0, r0, #2
 80186ee:	bf1f      	itttt	ne
 80186f0:	f1c0 0504 	rsbne	r5, r0, #4
 80186f4:	1952      	addne	r2, r2, r5
 80186f6:	1f05      	subne	r5, r0, #4
 80186f8:	195b      	addne	r3, r3, r5
 80186fa:	4422      	add	r2, r4
 80186fc:	4d16      	ldr	r5, [pc, #88]	; (8018758 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 80186fe:	1b1b      	subs	r3, r3, r4
 8018700:	602a      	str	r2, [r5, #0]
 8018702:	429c      	cmp	r4, r3
 8018704:	d903      	bls.n	801870e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8018706:	4b10      	ldr	r3, [pc, #64]	; (8018748 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018708:	215d      	movs	r1, #93	; 0x5d
 801870a:	4a10      	ldr	r2, [pc, #64]	; (801874c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801870c:	e7d5      	b.n	80186ba <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801870e:	b120      	cbz	r0, 801871a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8018710:	f1c0 0504 	rsb	r5, r0, #4
 8018714:	3804      	subs	r0, #4
 8018716:	442a      	add	r2, r5
 8018718:	4403      	add	r3, r0
 801871a:	1b1b      	subs	r3, r3, r4
 801871c:	4422      	add	r2, r4
 801871e:	480f      	ldr	r0, [pc, #60]	; (801875c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8018720:	2b0f      	cmp	r3, #15
 8018722:	600b      	str	r3, [r1, #0]
 8018724:	6002      	str	r2, [r0, #0]
 8018726:	d803      	bhi.n	8018730 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8018728:	4b0d      	ldr	r3, [pc, #52]	; (8018760 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801872a:	2170      	movs	r1, #112	; 0x70
 801872c:	4a07      	ldr	r2, [pc, #28]	; (801874c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801872e:	e7c4      	b.n	80186ba <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8018730:	2001      	movs	r0, #1
 8018732:	e7b8      	b.n	80186a6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8018734:	2000b3d8 	.word	0x2000b3d8
 8018738:	2000b3d0 	.word	0x2000b3d0
 801873c:	2000b3e0 	.word	0x2000b3e0
 8018740:	2000b3e8 	.word	0x2000b3e8
 8018744:	2000b3e4 	.word	0x2000b3e4
 8018748:	0802a442 	.word	0x0802a442
 801874c:	0802a50a 	.word	0x0802a50a
 8018750:	0802a47b 	.word	0x0802a47b
 8018754:	2000b3ec 	.word	0x2000b3ec
 8018758:	2000b3dc 	.word	0x2000b3dc
 801875c:	2000b3d4 	.word	0x2000b3d4
 8018760:	0802a4c5 	.word	0x0802a4c5

08018764 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8018764:	4b04      	ldr	r3, [pc, #16]	; (8018778 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8018766:	6818      	ldr	r0, [r3, #0]
 8018768:	b120      	cbz	r0, 8018774 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801876a:	4b04      	ldr	r3, [pc, #16]	; (801877c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801876c:	6818      	ldr	r0, [r3, #0]
 801876e:	3000      	adds	r0, #0
 8018770:	bf18      	it	ne
 8018772:	2001      	movne	r0, #1
 8018774:	4770      	bx	lr
 8018776:	bf00      	nop
 8018778:	2000b3d0 	.word	0x2000b3d0
 801877c:	2000b3e4 	.word	0x2000b3e4

08018780 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8018780:	4b01      	ldr	r3, [pc, #4]	; (8018788 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8018782:	6818      	ldr	r0, [r3, #0]
 8018784:	4770      	bx	lr
 8018786:	bf00      	nop
 8018788:	2000b3d8 	.word	0x2000b3d8

0801878c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801878c:	4b01      	ldr	r3, [pc, #4]	; (8018794 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801878e:	6818      	ldr	r0, [r3, #0]
 8018790:	4770      	bx	lr
 8018792:	bf00      	nop
 8018794:	2000b3e0 	.word	0x2000b3e0

08018798 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8018798:	4b01      	ldr	r3, [pc, #4]	; (80187a0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801879a:	6818      	ldr	r0, [r3, #0]
 801879c:	4770      	bx	lr
 801879e:	bf00      	nop
 80187a0:	2000b3ec 	.word	0x2000b3ec

080187a4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80187a4:	4b01      	ldr	r3, [pc, #4]	; (80187ac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80187a6:	6818      	ldr	r0, [r3, #0]
 80187a8:	4770      	bx	lr
 80187aa:	bf00      	nop
 80187ac:	2000b3dc 	.word	0x2000b3dc

080187b0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80187b0:	4b01      	ldr	r3, [pc, #4]	; (80187b8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80187b2:	6818      	ldr	r0, [r3, #0]
 80187b4:	4770      	bx	lr
 80187b6:	bf00      	nop
 80187b8:	2000b3d4 	.word	0x2000b3d4

080187bc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80187bc:	4b01      	ldr	r3, [pc, #4]	; (80187c4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80187be:	6818      	ldr	r0, [r3, #0]
 80187c0:	4770      	bx	lr
 80187c2:	bf00      	nop
 80187c4:	2000b3e8 	.word	0x2000b3e8

080187c8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80187c8:	2000      	movs	r0, #0
 80187ca:	4770      	bx	lr

080187cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80187cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187d0:	b091      	sub	sp, #68	; 0x44
 80187d2:	4699      	mov	r9, r3
 80187d4:	4617      	mov	r7, r2
 80187d6:	2500      	movs	r5, #0
 80187d8:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 80187dc:	4680      	mov	r8, r0
 80187de:	a80e      	add	r0, sp, #56	; 0x38
 80187e0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80187e2:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 80187e6:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 80187ea:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80187ee:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80187f2:	910d      	str	r1, [sp, #52]	; 0x34
 80187f4:	950e      	str	r5, [sp, #56]	; 0x38
 80187f6:	f000 fe39 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80187fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80187fc:	f8d9 6000 	ldr.w	r6, [r9]
 8018800:	6818      	ldr	r0, [r3, #0]
 8018802:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018804:	f9b4 b000 	ldrsh.w	fp, [r4]
 8018808:	1b80      	subs	r0, r0, r6
 801880a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801880e:	eb02 0c06 	add.w	ip, r2, r6
 8018812:	ebab 0e0c 	sub.w	lr, fp, ip
 8018816:	4570      	cmp	r0, lr
 8018818:	f340 80bc 	ble.w	8018994 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801881c:	88a1      	ldrh	r1, [r4, #4]
 801881e:	4459      	add	r1, fp
 8018820:	b209      	sxth	r1, r1
 8018822:	458c      	cmp	ip, r1
 8018824:	f300 80b6 	bgt.w	8018994 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8018828:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801882c:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8018830:	4283      	cmp	r3, r0
 8018832:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8018836:	edd9 6a07 	vldr	s13, [r9, #28]
 801883a:	bfa8      	it	ge
 801883c:	4603      	movge	r3, r0
 801883e:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8018842:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8018846:	45e3      	cmp	fp, ip
 8018848:	ee07 3a90 	vmov	s15, r3
 801884c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018850:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8018854:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018858:	ee65 4a24 	vmul.f32	s9, s10, s9
 801885c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018860:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018864:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018868:	ee32 1a05 	vadd.f32	s2, s4, s10
 801886c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018870:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018874:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018878:	ee22 2a07 	vmul.f32	s4, s4, s14
 801887c:	f340 808d 	ble.w	801899a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8018880:	fb9e f5f3 	sdiv	r5, lr, r3
 8018884:	ee07 5a10 	vmov	s14, r5
 8018888:	2d00      	cmp	r5, #0
 801888a:	fb03 e415 	mls	r4, r3, r5, lr
 801888e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018892:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018896:	eee7 0a24 	vfma.f32	s1, s14, s9
 801889a:	eea7 1a05 	vfma.f32	s2, s14, s10
 801889e:	dd12      	ble.n	80188c6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80188a0:	ee70 6a44 	vsub.f32	s13, s0, s8
 80188a4:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80188a8:	ee31 2a45 	vsub.f32	s4, s2, s10
 80188ac:	eef5 6a40 	vcmp.f32	s13, #0.0
 80188b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b4:	bf14      	ite	ne
 80188b6:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80188ba:	eeb0 7a67 	vmoveq.f32	s14, s15
 80188be:	ee61 1a87 	vmul.f32	s3, s3, s14
 80188c2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80188c6:	fb05 f703 	mul.w	r7, r5, r3
 80188ca:	1bc0      	subs	r0, r0, r7
 80188cc:	443e      	add	r6, r7
 80188ce:	1997      	adds	r7, r2, r6
 80188d0:	4407      	add	r7, r0
 80188d2:	42b9      	cmp	r1, r7
 80188d4:	bfbc      	itt	lt
 80188d6:	1a88      	sublt	r0, r1, r2
 80188d8:	1b80      	sublt	r0, r0, r6
 80188da:	2800      	cmp	r0, #0
 80188dc:	dd5a      	ble.n	8018994 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80188de:	fb90 f1f3 	sdiv	r1, r0, r3
 80188e2:	fb03 0211 	mls	r2, r3, r1, r0
 80188e6:	b90a      	cbnz	r2, 80188ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 80188e8:	3901      	subs	r1, #1
 80188ea:	461a      	mov	r2, r3
 80188ec:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80188f0:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 80188f4:	44a4      	add	ip, r4
 80188f6:	2900      	cmp	r1, #0
 80188f8:	bfcc      	ite	gt
 80188fa:	469e      	movgt	lr, r3
 80188fc:	4696      	movle	lr, r2
 80188fe:	fb03 c505 	mla	r5, r3, r5, ip
 8018902:	eef0 6a42 	vmov.f32	s13, s4
 8018906:	eeb0 7a61 	vmov.f32	s14, s3
 801890a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801890e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018912:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018916:	ee21 3a23 	vmul.f32	s6, s2, s7
 801891a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801891e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018922:	ee17 0a90 	vmov	r0, s15
 8018926:	ee73 7a42 	vsub.f32	s15, s6, s4
 801892a:	fb90 f6f3 	sdiv	r6, r0, r3
 801892e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018932:	ee17 0a90 	vmov	r0, s15
 8018936:	fb90 f7f3 	sdiv	r7, r0, r3
 801893a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801893e:	f8d0 8000 	ldr.w	r8, [r0]
 8018942:	900c      	str	r0, [sp, #48]	; 0x30
 8018944:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018946:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801894a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801894e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018952:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8018956:	f8cd a020 	str.w	sl, [sp, #32]
 801895a:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801895e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018960:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8018964:	9603      	str	r6, [sp, #12]
 8018966:	44ca      	add	sl, r9
 8018968:	9506      	str	r5, [sp, #24]
 801896a:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801896e:	ee16 0a90 	vmov	r0, s13
 8018972:	f8cd a01c 	str.w	sl, [sp, #28]
 8018976:	fb07 0704 	mla	r7, r7, r4, r0
 801897a:	ee17 0a10 	vmov	r0, s14
 801897e:	fb06 0604 	mla	r6, r6, r4, r0
 8018982:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018984:	9702      	str	r7, [sp, #8]
 8018986:	e9cd 3600 	strd	r3, r6, [sp]
 801898a:	ebae 0304 	sub.w	r3, lr, r4
 801898e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018992:	47a8      	blx	r5
 8018994:	b011      	add	sp, #68	; 0x44
 8018996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801899a:	462c      	mov	r4, r5
 801899c:	e797      	b.n	80188ce <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801899e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801899e:	b570      	push	{r4, r5, r6, lr}
 80189a0:	4604      	mov	r4, r0
 80189a2:	2500      	movs	r5, #0
 80189a4:	9804      	ldr	r0, [sp, #16]
 80189a6:	7223      	strb	r3, [r4, #8]
 80189a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80189ac:	8025      	strh	r5, [r4, #0]
 80189ae:	6061      	str	r1, [r4, #4]
 80189b0:	7263      	strb	r3, [r4, #9]
 80189b2:	60e0      	str	r0, [r4, #12]
 80189b4:	8222      	strh	r2, [r4, #16]
 80189b6:	8265      	strh	r5, [r4, #18]
 80189b8:	82a5      	strh	r5, [r4, #20]
 80189ba:	82e5      	strh	r5, [r4, #22]
 80189bc:	8325      	strh	r5, [r4, #24]
 80189be:	8365      	strh	r5, [r4, #26]
 80189c0:	83a5      	strh	r5, [r4, #28]
 80189c2:	77a5      	strb	r5, [r4, #30]
 80189c4:	6803      	ldr	r3, [r0, #0]
 80189c6:	695b      	ldr	r3, [r3, #20]
 80189c8:	4798      	blx	r3
 80189ca:	4606      	mov	r6, r0
 80189cc:	b1f8      	cbz	r0, 8018a0e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80189ce:	68e0      	ldr	r0, [r4, #12]
 80189d0:	4631      	mov	r1, r6
 80189d2:	6803      	ldr	r3, [r0, #0]
 80189d4:	68db      	ldr	r3, [r3, #12]
 80189d6:	4798      	blx	r3
 80189d8:	7b43      	ldrb	r3, [r0, #13]
 80189da:	7a82      	ldrb	r2, [r0, #10]
 80189dc:	4605      	mov	r5, r0
 80189de:	005b      	lsls	r3, r3, #1
 80189e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80189e4:	4313      	orrs	r3, r2
 80189e6:	83a3      	strh	r3, [r4, #28]
 80189e8:	7a63      	ldrb	r3, [r4, #9]
 80189ea:	2b04      	cmp	r3, #4
 80189ec:	d10f      	bne.n	8018a0e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80189ee:	68e0      	ldr	r0, [r4, #12]
 80189f0:	462a      	mov	r2, r5
 80189f2:	4631      	mov	r1, r6
 80189f4:	6803      	ldr	r3, [r0, #0]
 80189f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189f8:	4798      	blx	r3
 80189fa:	7b6b      	ldrb	r3, [r5, #13]
 80189fc:	005b      	lsls	r3, r3, #1
 80189fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018a02:	7aab      	ldrb	r3, [r5, #10]
 8018a04:	4313      	orrs	r3, r2
 8018a06:	4418      	add	r0, r3
 8018a08:	8ba3      	ldrh	r3, [r4, #28]
 8018a0a:	4418      	add	r0, r3
 8018a0c:	83a0      	strh	r0, [r4, #28]
 8018a0e:	4620      	mov	r0, r4
 8018a10:	bd70      	pop	{r4, r5, r6, pc}

08018a12 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018a12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a16:	2400      	movs	r4, #0
 8018a18:	b085      	sub	sp, #20
 8018a1a:	4681      	mov	r9, r0
 8018a1c:	4688      	mov	r8, r1
 8018a1e:	4692      	mov	sl, r2
 8018a20:	469b      	mov	fp, r3
 8018a22:	4627      	mov	r7, r4
 8018a24:	4625      	mov	r5, r4
 8018a26:	4626      	mov	r6, r4
 8018a28:	4554      	cmp	r4, sl
 8018a2a:	da2a      	bge.n	8018a82 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	9303      	str	r3, [sp, #12]
 8018a30:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018a34:	429d      	cmp	r5, r3
 8018a36:	d004      	beq.n	8018a42 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8018a38:	f242 030b 	movw	r3, #8203	; 0x200b
 8018a3c:	429d      	cmp	r5, r3
 8018a3e:	bf18      	it	ne
 8018a40:	462f      	movne	r7, r5
 8018a42:	ab03      	add	r3, sp, #12
 8018a44:	4642      	mov	r2, r8
 8018a46:	4659      	mov	r1, fp
 8018a48:	4648      	mov	r0, r9
 8018a4a:	f002 fb45 	bl	801b0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a4e:	4605      	mov	r5, r0
 8018a50:	b1b8      	cbz	r0, 8018a82 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018a52:	280a      	cmp	r0, #10
 8018a54:	d015      	beq.n	8018a82 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018a56:	9a03      	ldr	r2, [sp, #12]
 8018a58:	b18a      	cbz	r2, 8018a7e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8018a5a:	7b50      	ldrb	r0, [r2, #13]
 8018a5c:	4639      	mov	r1, r7
 8018a5e:	7a93      	ldrb	r3, [r2, #10]
 8018a60:	0040      	lsls	r0, r0, #1
 8018a62:	8895      	ldrh	r5, [r2, #4]
 8018a64:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018a68:	4303      	orrs	r3, r0
 8018a6a:	4640      	mov	r0, r8
 8018a6c:	9301      	str	r3, [sp, #4]
 8018a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8018a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a74:	4798      	blx	r3
 8018a76:	9b01      	ldr	r3, [sp, #4]
 8018a78:	4418      	add	r0, r3
 8018a7a:	4406      	add	r6, r0
 8018a7c:	b2b6      	uxth	r6, r6
 8018a7e:	3401      	adds	r4, #1
 8018a80:	e7d2      	b.n	8018a28 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8018a82:	4630      	mov	r0, r6
 8018a84:	b005      	add	sp, #20
 8018a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018a8a:	2a02      	cmp	r2, #2
 8018a8c:	b530      	push	{r4, r5, lr}
 8018a8e:	d011      	beq.n	8018ab4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018a90:	2a03      	cmp	r2, #3
 8018a92:	d01c      	beq.n	8018ace <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018a94:	2a01      	cmp	r2, #1
 8018a96:	d10c      	bne.n	8018ab2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018a98:	888b      	ldrh	r3, [r1, #4]
 8018a9a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018a9e:	8801      	ldrh	r1, [r0, #0]
 8018aa0:	1a9b      	subs	r3, r3, r2
 8018aa2:	8844      	ldrh	r4, [r0, #2]
 8018aa4:	1a5b      	subs	r3, r3, r1
 8018aa6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018aaa:	8004      	strh	r4, [r0, #0]
 8018aac:	8043      	strh	r3, [r0, #2]
 8018aae:	8081      	strh	r1, [r0, #4]
 8018ab0:	80c2      	strh	r2, [r0, #6]
 8018ab2:	bd30      	pop	{r4, r5, pc}
 8018ab4:	88cb      	ldrh	r3, [r1, #6]
 8018ab6:	88c2      	ldrh	r2, [r0, #6]
 8018ab8:	1a9b      	subs	r3, r3, r2
 8018aba:	8842      	ldrh	r2, [r0, #2]
 8018abc:	1a9b      	subs	r3, r3, r2
 8018abe:	888a      	ldrh	r2, [r1, #4]
 8018ac0:	8881      	ldrh	r1, [r0, #4]
 8018ac2:	8043      	strh	r3, [r0, #2]
 8018ac4:	1a52      	subs	r2, r2, r1
 8018ac6:	8801      	ldrh	r1, [r0, #0]
 8018ac8:	1a52      	subs	r2, r2, r1
 8018aca:	8002      	strh	r2, [r0, #0]
 8018acc:	e7f1      	b.n	8018ab2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018ace:	88cb      	ldrh	r3, [r1, #6]
 8018ad0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018ad4:	8841      	ldrh	r1, [r0, #2]
 8018ad6:	1a9b      	subs	r3, r3, r2
 8018ad8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018adc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018ae0:	1a5b      	subs	r3, r3, r1
 8018ae2:	8045      	strh	r5, [r0, #2]
 8018ae4:	8082      	strh	r2, [r0, #4]
 8018ae6:	8003      	strh	r3, [r0, #0]
 8018ae8:	80c4      	strh	r4, [r0, #6]
 8018aea:	e7e2      	b.n	8018ab2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af0:	b09f      	sub	sp, #124	; 0x7c
 8018af2:	9116      	str	r1, [sp, #88]	; 0x58
 8018af4:	9317      	str	r3, [sp, #92]	; 0x5c
 8018af6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018af8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018afa:	8809      	ldrh	r1, [r1, #0]
 8018afc:	889b      	ldrh	r3, [r3, #4]
 8018afe:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8018b02:	440b      	add	r3, r1
 8018b04:	9212      	str	r2, [sp, #72]	; 0x48
 8018b06:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8018b0a:	b21b      	sxth	r3, r3
 8018b0c:	9011      	str	r0, [sp, #68]	; 0x44
 8018b0e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018b12:	9310      	str	r3, [sp, #64]	; 0x40
 8018b14:	f8d8 3000 	ldr.w	r3, [r8]
 8018b18:	7a59      	ldrb	r1, [r3, #9]
 8018b1a:	7a1b      	ldrb	r3, [r3, #8]
 8018b1c:	9114      	str	r1, [sp, #80]	; 0x50
 8018b1e:	9315      	str	r3, [sp, #84]	; 0x54
 8018b20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018b22:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018b26:	2a00      	cmp	r2, #0
 8018b28:	d067      	beq.n	8018bfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8018b2a:	f898 3010 	ldrb.w	r3, [r8, #16]
 8018b2e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018b30:	2b04      	cmp	r3, #4
 8018b32:	bf14      	ite	ne
 8018b34:	2301      	movne	r3, #1
 8018b36:	2302      	moveq	r3, #2
 8018b38:	4413      	add	r3, r2
 8018b3a:	f04f 0900 	mov.w	r9, #0
 8018b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b40:	464c      	mov	r4, r9
 8018b42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018b46:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8018b4a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8018b4e:	4293      	cmp	r3, r2
 8018b50:	f280 808c 	bge.w	8018c6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018b54:	2300      	movs	r3, #0
 8018b56:	931c      	str	r3, [sp, #112]	; 0x70
 8018b58:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018b5c:	429c      	cmp	r4, r3
 8018b5e:	d006      	beq.n	8018b6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8018b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b62:	f242 020b 	movw	r2, #8203	; 0x200b
 8018b66:	4294      	cmp	r4, r2
 8018b68:	bf18      	it	ne
 8018b6a:	4623      	movne	r3, r4
 8018b6c:	930d      	str	r3, [sp, #52]	; 0x34
 8018b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b70:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8018b72:	f8d8 2000 	ldr.w	r2, [r8]
 8018b76:	428b      	cmp	r3, r1
 8018b78:	db41      	blt.n	8018bfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8018b7a:	6813      	ldr	r3, [r2, #0]
 8018b7c:	4610      	mov	r0, r2
 8018b7e:	695b      	ldr	r3, [r3, #20]
 8018b80:	4798      	blx	r3
 8018b82:	4604      	mov	r4, r0
 8018b84:	f8d8 0000 	ldr.w	r0, [r8]
 8018b88:	aa1d      	add	r2, sp, #116	; 0x74
 8018b8a:	4621      	mov	r1, r4
 8018b8c:	6803      	ldr	r3, [r0, #0]
 8018b8e:	689e      	ldr	r6, [r3, #8]
 8018b90:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018b94:	47b0      	blx	r6
 8018b96:	901c      	str	r0, [sp, #112]	; 0x70
 8018b98:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018b9c:	429c      	cmp	r4, r3
 8018b9e:	f000 80ea 	beq.w	8018d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018ba2:	f242 030b 	movw	r3, #8203	; 0x200b
 8018ba6:	429c      	cmp	r4, r3
 8018ba8:	f000 80e5 	beq.w	8018d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018bac:	2c00      	cmp	r4, #0
 8018bae:	f000 80f7 	beq.w	8018da0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018bb2:	2c0a      	cmp	r4, #10
 8018bb4:	d060      	beq.n	8018c78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018bb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018bb8:	b36a      	cbz	r2, 8018c16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8018bba:	8894      	ldrh	r4, [r2, #4]
 8018bbc:	f1bb 0f00 	cmp.w	fp, #0
 8018bc0:	d03b      	beq.n	8018c3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018bc2:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018bc6:	f1bb 0f01 	cmp.w	fp, #1
 8018bca:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018bce:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018bd2:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018bd6:	ea49 0903 	orr.w	r9, r9, r3
 8018bda:	d134      	bne.n	8018c46 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8018bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bde:	eba5 0509 	sub.w	r5, r5, r9
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d14f      	bne.n	8018c86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018be6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018be8:	eb09 0305 	add.w	r3, r9, r5
 8018bec:	4413      	add	r3, r2
 8018bee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018bf0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018bf4:	4293      	cmp	r3, r2
 8018bf6:	da51      	bge.n	8018c9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018bf8:	e038      	b.n	8018c6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018bfa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018bfc:	e79d      	b.n	8018b3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8018bfe:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018c02:	4659      	mov	r1, fp
 8018c04:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018c06:	9301      	str	r3, [sp, #4]
 8018c08:	ab1d      	add	r3, sp, #116	; 0x74
 8018c0a:	9300      	str	r3, [sp, #0]
 8018c0c:	ab1c      	add	r3, sp, #112	; 0x70
 8018c0e:	f002 fab7 	bl	801b180 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018c12:	4604      	mov	r4, r0
 8018c14:	e7c0      	b.n	8018b98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018c16:	f8d8 0000 	ldr.w	r0, [r8]
 8018c1a:	6803      	ldr	r3, [r0, #0]
 8018c1c:	691b      	ldr	r3, [r3, #16]
 8018c1e:	4798      	blx	r3
 8018c20:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018c24:	4298      	cmp	r0, r3
 8018c26:	f000 80a6 	beq.w	8018d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018c2a:	f242 030b 	movw	r3, #8203	; 0x200b
 8018c2e:	4298      	cmp	r0, r3
 8018c30:	f000 80a1 	beq.w	8018d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018c34:	f1bb 0f00 	cmp.w	fp, #0
 8018c38:	d100      	bne.n	8018c3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018c3a:	444d      	add	r5, r9
 8018c3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018c3e:	2a00      	cmp	r2, #0
 8018c40:	d1bf      	bne.n	8018bc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8018c42:	4691      	mov	r9, r2
 8018c44:	e097      	b.n	8018d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	f000 80ab 	beq.w	8018da4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8018c4e:	f1bb 0f00 	cmp.w	fp, #0
 8018c52:	d118      	bne.n	8018c86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018c54:	f8d8 0000 	ldr.w	r0, [r8]
 8018c58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018c5a:	6803      	ldr	r3, [r0, #0]
 8018c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c5e:	4798      	blx	r3
 8018c60:	4405      	add	r5, r0
 8018c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018c66:	1aeb      	subs	r3, r5, r3
 8018c68:	4293      	cmp	r3, r2
 8018c6a:	dd17      	ble.n	8018c9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018c6c:	2c00      	cmp	r4, #0
 8018c6e:	f000 8097 	beq.w	8018da0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018c72:	2c0a      	cmp	r4, #10
 8018c74:	f040 8085 	bne.w	8018d82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8018c78:	240a      	movs	r4, #10
 8018c7a:	fab4 f084 	clz	r0, r4
 8018c7e:	0940      	lsrs	r0, r0, #5
 8018c80:	b01f      	add	sp, #124	; 0x7c
 8018c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c86:	f8d8 0000 	ldr.w	r0, [r8]
 8018c8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018c8c:	6803      	ldr	r3, [r0, #0]
 8018c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c90:	4798      	blx	r3
 8018c92:	f1bb 0f01 	cmp.w	fp, #1
 8018c96:	eba5 0500 	sub.w	r5, r5, r0
 8018c9a:	d0a4      	beq.n	8018be6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018c9c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018c9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018ca0:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018ca4:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018ca8:	7b43      	ldrb	r3, [r0, #13]
 8018caa:	4429      	add	r1, r5
 8018cac:	015b      	lsls	r3, r3, #5
 8018cae:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018cb2:	7983      	ldrb	r3, [r0, #6]
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	440b      	add	r3, r1
 8018cb8:	42b3      	cmp	r3, r6
 8018cba:	db5c      	blt.n	8018d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018cbe:	4299      	cmp	r1, r3
 8018cc0:	da59      	bge.n	8018d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018cc2:	f8d8 0000 	ldr.w	r0, [r8]
 8018cc6:	42ae      	cmp	r6, r5
 8018cc8:	6803      	ldr	r3, [r0, #0]
 8018cca:	bfcc      	ite	gt
 8018ccc:	1b76      	subgt	r6, r6, r5
 8018cce:	2600      	movle	r6, #0
 8018cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cd2:	bfc8      	it	gt
 8018cd4:	b2b6      	uxthgt	r6, r6
 8018cd6:	4798      	blx	r3
 8018cd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018cda:	7b5a      	ldrb	r2, [r3, #13]
 8018cdc:	00d1      	lsls	r1, r2, #3
 8018cde:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018ce2:	7a19      	ldrb	r1, [r3, #8]
 8018ce4:	4339      	orrs	r1, r7
 8018ce6:	0657      	lsls	r7, r2, #25
 8018ce8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8018cea:	bf48      	it	mi
 8018cec:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018cf0:	4407      	add	r7, r0
 8018cf2:	bf48      	it	mi
 8018cf4:	b209      	sxthmi	r1, r1
 8018cf6:	1a7f      	subs	r7, r7, r1
 8018cf8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018cfa:	b2bf      	uxth	r7, r7
 8018cfc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018d00:	fa0f fa87 	sxth.w	sl, r7
 8018d04:	4551      	cmp	r1, sl
 8018d06:	dd3a      	ble.n	8018d7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018d08:	0112      	lsls	r2, r2, #4
 8018d0a:	79d8      	ldrb	r0, [r3, #7]
 8018d0c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018d10:	4302      	orrs	r2, r0
 8018d12:	4492      	add	sl, r2
 8018d14:	4551      	cmp	r1, sl
 8018d16:	dc2e      	bgt.n	8018d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018d18:	1bcf      	subs	r7, r1, r7
 8018d1a:	468a      	mov	sl, r1
 8018d1c:	b2bf      	uxth	r7, r7
 8018d1e:	9319      	str	r3, [sp, #100]	; 0x64
 8018d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018d22:	f8d8 0000 	ldr.w	r0, [r8]
 8018d26:	681a      	ldr	r2, [r3, #0]
 8018d28:	6801      	ldr	r1, [r0, #0]
 8018d2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8018d2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018d2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d30:	9218      	str	r2, [sp, #96]	; 0x60
 8018d32:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018d34:	4788      	blx	r1
 8018d36:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018d3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018d3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8018d3e:	f898 100e 	ldrb.w	r1, [r8, #14]
 8018d42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018d44:	910a      	str	r1, [sp, #40]	; 0x28
 8018d46:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8018d4a:	9109      	str	r1, [sp, #36]	; 0x24
 8018d4c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8018d50:	9305      	str	r3, [sp, #20]
 8018d52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018d54:	9206      	str	r2, [sp, #24]
 8018d56:	e9cd a601 	strd	sl, r6, [sp, #4]
 8018d5a:	442e      	add	r6, r5
 8018d5c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018d60:	b236      	sxth	r6, r6
 8018d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018d64:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018d68:	9600      	str	r6, [sp, #0]
 8018d6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018d6c:	681a      	ldr	r2, [r3, #0]
 8018d6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018d70:	685b      	ldr	r3, [r3, #4]
 8018d72:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018d74:	47b0      	blx	r6
 8018d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d78:	3301      	adds	r3, #1
 8018d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8018d7c:	e6e5      	b.n	8018b4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8018d7e:	2700      	movs	r7, #0
 8018d80:	e7cd      	b.n	8018d1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8018d82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018d84:	3501      	adds	r5, #1
 8018d86:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018d88:	429d      	cmp	r5, r3
 8018d8a:	f6bf af76 	bge.w	8018c7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018d8e:	4659      	mov	r1, fp
 8018d90:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018d92:	f7f9 fdb7 	bl	8012904 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d96:	4604      	mov	r4, r0
 8018d98:	b110      	cbz	r0, 8018da0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018d9a:	280a      	cmp	r0, #10
 8018d9c:	d1f2      	bne.n	8018d84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018d9e:	e76b      	b.n	8018c78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018da0:	2400      	movs	r4, #0
 8018da2:	e76a      	b.n	8018c7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018da4:	f1bb 0f00 	cmp.w	fp, #0
 8018da8:	f43f af5b 	beq.w	8018c62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018dac:	e776      	b.n	8018c9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018dae <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018dae:	b530      	push	{r4, r5, lr}
 8018db0:	8a44      	ldrh	r4, [r0, #18]
 8018db2:	8ac5      	ldrh	r5, [r0, #22]
 8018db4:	82c3      	strh	r3, [r0, #22]
 8018db6:	442c      	add	r4, r5
 8018db8:	1ae4      	subs	r4, r4, r3
 8018dba:	8b03      	ldrh	r3, [r0, #24]
 8018dbc:	8244      	strh	r4, [r0, #18]
 8018dbe:	8a84      	ldrh	r4, [r0, #20]
 8018dc0:	4422      	add	r2, r4
 8018dc2:	440c      	add	r4, r1
 8018dc4:	1a59      	subs	r1, r3, r1
 8018dc6:	8342      	strh	r2, [r0, #26]
 8018dc8:	8284      	strh	r4, [r0, #20]
 8018dca:	8301      	strh	r1, [r0, #24]
 8018dcc:	bd30      	pop	{r4, r5, pc}

08018dce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018dce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd2:	7a43      	ldrb	r3, [r0, #9]
 8018dd4:	b087      	sub	sp, #28
 8018dd6:	4604      	mov	r4, r0
 8018dd8:	460f      	mov	r7, r1
 8018dda:	1eda      	subs	r2, r3, #3
 8018ddc:	b2d2      	uxtb	r2, r2
 8018dde:	2900      	cmp	r1, #0
 8018de0:	d036      	beq.n	8018e50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018de2:	2a01      	cmp	r2, #1
 8018de4:	d932      	bls.n	8018e4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018de6:	1e58      	subs	r0, r3, #1
 8018de8:	f1d0 0b00 	rsbs	fp, r0, #0
 8018dec:	eb4b 0b00 	adc.w	fp, fp, r0
 8018df0:	1e99      	subs	r1, r3, #2
 8018df2:	424b      	negs	r3, r1
 8018df4:	414b      	adcs	r3, r1
 8018df6:	9303      	str	r3, [sp, #12]
 8018df8:	2300      	movs	r3, #0
 8018dfa:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018dfe:	2500      	movs	r5, #0
 8018e00:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018e04:	46a9      	mov	r9, r5
 8018e06:	8265      	strh	r5, [r4, #18]
 8018e08:	82a5      	strh	r5, [r4, #20]
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	9305      	str	r3, [sp, #20]
 8018e0e:	8823      	ldrh	r3, [r4, #0]
 8018e10:	2b20      	cmp	r3, #32
 8018e12:	d02b      	beq.n	8018e6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018e14:	eba3 020a 	sub.w	r2, r3, sl
 8018e18:	4256      	negs	r6, r2
 8018e1a:	4156      	adcs	r6, r2
 8018e1c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018e20:	4293      	cmp	r3, r2
 8018e22:	d004      	beq.n	8018e2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018e24:	4553      	cmp	r3, sl
 8018e26:	bf16      	itet	ne
 8018e28:	4699      	movne	r9, r3
 8018e2a:	2601      	moveq	r6, #1
 8018e2c:	2600      	movne	r6, #0
 8018e2e:	ab05      	add	r3, sp, #20
 8018e30:	68e2      	ldr	r2, [r4, #12]
 8018e32:	7a21      	ldrb	r1, [r4, #8]
 8018e34:	6860      	ldr	r0, [r4, #4]
 8018e36:	f002 f94f 	bl	801b0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e3a:	8020      	strh	r0, [r4, #0]
 8018e3c:	b9c8      	cbnz	r0, 8018e72 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018e3e:	8b22      	ldrh	r2, [r4, #24]
 8018e40:	2300      	movs	r3, #0
 8018e42:	4611      	mov	r1, r2
 8018e44:	4620      	mov	r0, r4
 8018e46:	f7ff ffb2 	bl	8018dae <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018e4a:	e066      	b.n	8018f1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018e4c:	468b      	mov	fp, r1
 8018e4e:	e7cf      	b.n	8018df0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8018e50:	3b01      	subs	r3, #1
 8018e52:	2a01      	cmp	r2, #1
 8018e54:	9103      	str	r1, [sp, #12]
 8018e56:	468b      	mov	fp, r1
 8018e58:	bf8c      	ite	hi
 8018e5a:	2200      	movhi	r2, #0
 8018e5c:	2201      	movls	r2, #1
 8018e5e:	2b01      	cmp	r3, #1
 8018e60:	9202      	str	r2, [sp, #8]
 8018e62:	bf8c      	ite	hi
 8018e64:	2300      	movhi	r3, #0
 8018e66:	2301      	movls	r3, #1
 8018e68:	9301      	str	r3, [sp, #4]
 8018e6a:	e7c8      	b.n	8018dfe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8018e6c:	4699      	mov	r9, r3
 8018e6e:	2601      	movs	r6, #1
 8018e70:	e7dd      	b.n	8018e2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018e72:	8ae3      	ldrh	r3, [r4, #22]
 8018e74:	280a      	cmp	r0, #10
 8018e76:	f103 0301 	add.w	r3, r3, #1
 8018e7a:	82e3      	strh	r3, [r4, #22]
 8018e7c:	d0df      	beq.n	8018e3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8018e7e:	9a05      	ldr	r2, [sp, #20]
 8018e80:	bb42      	cbnz	r2, 8018ed4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8018e82:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018e86:	4298      	cmp	r0, r3
 8018e88:	d001      	beq.n	8018e8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018e8a:	4550      	cmp	r0, sl
 8018e8c:	d1bd      	bne.n	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018e8e:	8823      	ldrh	r3, [r4, #0]
 8018e90:	8b21      	ldrh	r1, [r4, #24]
 8018e92:	2b20      	cmp	r3, #32
 8018e94:	d001      	beq.n	8018e9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018e96:	4553      	cmp	r3, sl
 8018e98:	d131      	bne.n	8018efe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018e9a:	2e00      	cmp	r6, #0
 8018e9c:	bf0a      	itet	eq
 8018e9e:	460d      	moveq	r5, r1
 8018ea0:	4630      	movne	r0, r6
 8018ea2:	2001      	moveq	r0, #1
 8018ea4:	440a      	add	r2, r1
 8018ea6:	8aa3      	ldrh	r3, [r4, #20]
 8018ea8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018eac:	b292      	uxth	r2, r2
 8018eae:	8322      	strh	r2, [r4, #24]
 8018eb0:	4413      	add	r3, r2
 8018eb2:	2f00      	cmp	r7, #0
 8018eb4:	d03a      	beq.n	8018f2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018eb6:	f1bb 0f00 	cmp.w	fp, #0
 8018eba:	d102      	bne.n	8018ec2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8018ebc:	9903      	ldr	r1, [sp, #12]
 8018ebe:	b301      	cbz	r1, 8018f02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018ec0:	b1f8      	cbz	r0, 8018f02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018ec2:	8ba1      	ldrh	r1, [r4, #28]
 8018ec4:	4419      	add	r1, r3
 8018ec6:	458c      	cmp	ip, r1
 8018ec8:	da2a      	bge.n	8018f20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018eca:	8a61      	ldrh	r1, [r4, #18]
 8018ecc:	b341      	cbz	r1, 8018f20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018ece:	4563      	cmp	r3, ip
 8018ed0:	dd9b      	ble.n	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ed2:	e01c      	b.n	8018f0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018ed4:	8893      	ldrh	r3, [r2, #4]
 8018ed6:	4649      	mov	r1, r9
 8018ed8:	8023      	strh	r3, [r4, #0]
 8018eda:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018ede:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018ee2:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018ee6:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018eea:	ea48 0800 	orr.w	r8, r8, r0
 8018eee:	68e0      	ldr	r0, [r4, #12]
 8018ef0:	6803      	ldr	r3, [r0, #0]
 8018ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ef4:	4798      	blx	r3
 8018ef6:	eb08 0200 	add.w	r2, r8, r0
 8018efa:	b292      	uxth	r2, r2
 8018efc:	e7c7      	b.n	8018e8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018efe:	2000      	movs	r0, #0
 8018f00:	e7d0      	b.n	8018ea4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018f02:	4563      	cmp	r3, ip
 8018f04:	dd81      	ble.n	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018f06:	8a63      	ldrh	r3, [r4, #18]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	f43f af7e 	beq.w	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018f0e:	2301      	movs	r3, #1
 8018f10:	8ba2      	ldrh	r2, [r4, #28]
 8018f12:	77a3      	strb	r3, [r4, #30]
 8018f14:	8b63      	ldrh	r3, [r4, #26]
 8018f16:	4413      	add	r3, r2
 8018f18:	8363      	strh	r3, [r4, #26]
 8018f1a:	b007      	add	sp, #28
 8018f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f20:	2300      	movs	r3, #0
 8018f22:	4611      	mov	r1, r2
 8018f24:	4620      	mov	r0, r4
 8018f26:	f7ff ff42 	bl	8018dae <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018f2a:	e76e      	b.n	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018f2c:	4563      	cmp	r3, ip
 8018f2e:	dd14      	ble.n	8018f5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8018f30:	9b02      	ldr	r3, [sp, #8]
 8018f32:	b113      	cbz	r3, 8018f3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018f34:	2301      	movs	r3, #1
 8018f36:	460a      	mov	r2, r1
 8018f38:	e783      	b.n	8018e42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8018f3a:	9b01      	ldr	r3, [sp, #4]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	f43f af64 	beq.w	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018f42:	2800      	cmp	r0, #0
 8018f44:	f47f af61 	bne.w	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018f48:	b116      	cbz	r6, 8018f50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8018f4a:	2301      	movs	r3, #1
 8018f4c:	462a      	mov	r2, r5
 8018f4e:	e779      	b.n	8018e44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8018f50:	8a63      	ldrh	r3, [r4, #18]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	f43f af59 	beq.w	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018f58:	e7df      	b.n	8018f1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	f47f af55 	bne.w	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018f60:	2e00      	cmp	r6, #0
 8018f62:	f43f af52 	beq.w	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018f66:	2301      	movs	r3, #1
 8018f68:	462a      	mov	r2, r5
 8018f6a:	e7db      	b.n	8018f24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08018f6c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018f6c:	b530      	push	{r4, r5, lr}
 8018f6e:	4605      	mov	r5, r0
 8018f70:	b08b      	sub	sp, #44	; 0x2c
 8018f72:	b191      	cbz	r1, 8018f9a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8018f74:	2401      	movs	r4, #1
 8018f76:	e9cd 3100 	strd	r3, r1, [sp]
 8018f7a:	4613      	mov	r3, r2
 8018f7c:	4601      	mov	r1, r0
 8018f7e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018f82:	a802      	add	r0, sp, #8
 8018f84:	f7ff fd0b 	bl	801899e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018f88:	2100      	movs	r1, #0
 8018f8a:	a802      	add	r0, sp, #8
 8018f8c:	f7ff ff1f 	bl	8018dce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018f90:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018f94:	b163      	cbz	r3, 8018fb0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018f96:	3401      	adds	r4, #1
 8018f98:	e7f6      	b.n	8018f88 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018f9a:	2401      	movs	r4, #1
 8018f9c:	f002 f98e 	bl	801b2bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018fa0:	280a      	cmp	r0, #10
 8018fa2:	4628      	mov	r0, r5
 8018fa4:	bf08      	it	eq
 8018fa6:	3401      	addeq	r4, #1
 8018fa8:	f002 f988 	bl	801b2bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018fac:	2800      	cmp	r0, #0
 8018fae:	d1f7      	bne.n	8018fa0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018fb0:	b2a0      	uxth	r0, r4
 8018fb2:	b00b      	add	sp, #44	; 0x2c
 8018fb4:	bd30      	pop	{r4, r5, pc}

08018fb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018fb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fba:	b0db      	sub	sp, #364	; 0x16c
 8018fbc:	4689      	mov	r9, r1
 8018fbe:	461c      	mov	r4, r3
 8018fc0:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8018fc4:	900a      	str	r0, [sp, #40]	; 0x28
 8018fc6:	f1ba 0f00 	cmp.w	sl, #0
 8018fca:	f000 80a5 	beq.w	8019118 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	f000 80a1 	beq.w	8019118 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018fd6:	7ba3      	ldrb	r3, [r4, #14]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	f000 809d 	beq.w	8019118 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018fde:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8018fe2:	6810      	ldr	r0, [r2, #0]
 8018fe4:	6851      	ldr	r1, [r2, #4]
 8018fe6:	2500      	movs	r5, #0
 8018fe8:	4643      	mov	r3, r8
 8018fea:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018fee:	950e      	str	r5, [sp, #56]	; 0x38
 8018ff0:	af18      	add	r7, sp, #96	; 0x60
 8018ff2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8018ff6:	79a2      	ldrb	r2, [r4, #6]
 8018ff8:	c303      	stmia	r3!, {r0, r1}
 8018ffa:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018ffe:	a90e      	add	r1, sp, #56	; 0x38
 8019000:	4640      	mov	r0, r8
 8019002:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019006:	f7ff fd40 	bl	8018a8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801900a:	a90e      	add	r1, sp, #56	; 0x38
 801900c:	79a2      	ldrb	r2, [r4, #6]
 801900e:	4608      	mov	r0, r1
 8019010:	f7ff fd3b 	bl	8018a8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019014:	4638      	mov	r0, r7
 8019016:	f001 fd20 	bl	801aa5a <_ZN8touchgfx12TextProviderC1Ev>
 801901a:	6820      	ldr	r0, [r4, #0]
 801901c:	6803      	ldr	r3, [r0, #0]
 801901e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019020:	4798      	blx	r3
 8019022:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019024:	4603      	mov	r3, r0
 8019026:	4651      	mov	r1, sl
 8019028:	4638      	mov	r0, r7
 801902a:	f001 fd5b 	bl	801aae4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801902e:	7923      	ldrb	r3, [r4, #4]
 8019030:	6820      	ldr	r0, [r4, #0]
 8019032:	9308      	str	r3, [sp, #32]
 8019034:	6803      	ldr	r3, [r0, #0]
 8019036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019038:	4798      	blx	r3
 801903a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801903e:	181e      	adds	r6, r3, r0
 8019040:	42ae      	cmp	r6, r5
 8019042:	dd06      	ble.n	8019052 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019044:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8019048:	4282      	cmp	r2, r0
 801904a:	bfa4      	itt	ge
 801904c:	189d      	addge	r5, r3, r2
 801904e:	fb95 f5f6 	sdivge	r5, r5, r6
 8019052:	a82e      	add	r0, sp, #184	; 0xb8
 8019054:	f001 fd01 	bl	801aa5a <_ZN8touchgfx12TextProviderC1Ev>
 8019058:	7c23      	ldrb	r3, [r4, #16]
 801905a:	b14b      	cbz	r3, 8019070 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801905c:	6820      	ldr	r0, [r4, #0]
 801905e:	6803      	ldr	r3, [r0, #0]
 8019060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019062:	4798      	blx	r3
 8019064:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019066:	4603      	mov	r3, r0
 8019068:	4651      	mov	r1, sl
 801906a:	a82e      	add	r0, sp, #184	; 0xb8
 801906c:	f001 fd3a 	bl	801aae4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019070:	7c21      	ldrb	r1, [r4, #16]
 8019072:	a810      	add	r0, sp, #64	; 0x40
 8019074:	7963      	ldrb	r3, [r4, #5]
 8019076:	9101      	str	r1, [sp, #4]
 8019078:	6821      	ldr	r1, [r4, #0]
 801907a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801907e:	9100      	str	r1, [sp, #0]
 8019080:	a92e      	add	r1, sp, #184	; 0xb8
 8019082:	f7ff fc8c 	bl	801899e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019086:	7c23      	ldrb	r3, [r4, #16]
 8019088:	b9bb      	cbnz	r3, 80190ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 801908a:	fa1f fa86 	uxth.w	sl, r6
 801908e:	2d00      	cmp	r5, #0
 8019090:	dd45      	ble.n	801911e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8019092:	4638      	mov	r0, r7
 8019094:	f002 f912 	bl	801b2bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019098:	2800      	cmp	r0, #0
 801909a:	d03d      	beq.n	8019118 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801909c:	280a      	cmp	r0, #10
 801909e:	d1f6      	bne.n	801908e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 80190a0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80190a4:	3d01      	subs	r5, #1
 80190a6:	4453      	add	r3, sl
 80190a8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80190ac:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80190b0:	eba3 030a 	sub.w	r3, r3, sl
 80190b4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80190b8:	e7e9      	b.n	801908e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 80190ba:	0073      	lsls	r3, r6, #1
 80190bc:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80190c0:	fa1f fa86 	uxth.w	sl, r6
 80190c4:	9309      	str	r3, [sp, #36]	; 0x24
 80190c6:	2d00      	cmp	r5, #0
 80190c8:	dd29      	ble.n	801911e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 80190ca:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80190ce:	a810      	add	r0, sp, #64	; 0x40
 80190d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190d2:	428b      	cmp	r3, r1
 80190d4:	bfd4      	ite	le
 80190d6:	2100      	movle	r1, #0
 80190d8:	2101      	movgt	r1, #1
 80190da:	f7ff fe78 	bl	8018dce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80190de:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 80190e2:	3b01      	subs	r3, #1
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	455b      	cmp	r3, fp
 80190e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80190ea:	d005      	beq.n	80190f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 80190ec:	7961      	ldrb	r1, [r4, #5]
 80190ee:	4638      	mov	r0, r7
 80190f0:	f7f9 fc08 	bl	8012904 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80190f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80190f6:	e7f4      	b.n	80190e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 80190f8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80190fc:	3d01      	subs	r5, #1
 80190fe:	4453      	add	r3, sl
 8019100:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019104:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019108:	eba3 030a 	sub.w	r3, r3, sl
 801910c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019110:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019114:	2b00      	cmp	r3, #0
 8019116:	d1d6      	bne.n	80190c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8019118:	b05b      	add	sp, #364	; 0x16c
 801911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801911e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8019122:	ad44      	add	r5, sp, #272	; 0x110
 8019124:	f04f 0b00 	mov.w	fp, #0
 8019128:	7c23      	ldrb	r3, [r4, #16]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d067      	beq.n	80191fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801912e:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019132:	a810      	add	r0, sp, #64	; 0x40
 8019134:	458a      	cmp	sl, r1
 8019136:	bfd4      	ite	le
 8019138:	2100      	movle	r1, #0
 801913a:	2101      	movgt	r1, #1
 801913c:	f7ff fe47 	bl	8018dce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019140:	9b08      	ldr	r3, [sp, #32]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d056      	beq.n	80191f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019146:	7c23      	ldrb	r3, [r4, #16]
 8019148:	2258      	movs	r2, #88	; 0x58
 801914a:	4639      	mov	r1, r7
 801914c:	4628      	mov	r0, r5
 801914e:	9309      	str	r3, [sp, #36]	; 0x24
 8019150:	f00c fd14 	bl	8025b7c <memcpy>
 8019154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019156:	2b00      	cmp	r3, #0
 8019158:	d059      	beq.n	801920e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801915a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801915e:	7922      	ldrb	r2, [r4, #4]
 8019160:	2a01      	cmp	r2, #1
 8019162:	d13d      	bne.n	80191e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8019164:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8019168:	1ac0      	subs	r0, r0, r3
 801916a:	2302      	movs	r3, #2
 801916c:	fb90 f0f3 	sdiv	r0, r0, r3
 8019170:	b200      	sxth	r0, r0
 8019172:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019176:	4418      	add	r0, r3
 8019178:	7c23      	ldrb	r3, [r4, #16]
 801917a:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801917e:	2b00      	cmp	r3, #0
 8019180:	d03a      	beq.n	80191f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8019182:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8019186:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801918a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801918e:	9500      	str	r5, [sp, #0]
 8019190:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019192:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019196:	e9cd b703 	strd	fp, r7, [sp, #12]
 801919a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801919e:	464a      	mov	r2, r9
 80191a0:	2100      	movs	r1, #0
 80191a2:	f7ff fca3 	bl	8018aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80191a6:	2800      	cmp	r0, #0
 80191a8:	d1b6      	bne.n	8019118 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80191aa:	b2b2      	uxth	r2, r6
 80191ac:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80191b0:	4611      	mov	r1, r2
 80191b2:	4413      	add	r3, r2
 80191b4:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80191b8:	b21b      	sxth	r3, r3
 80191ba:	1a52      	subs	r2, r2, r1
 80191bc:	7c21      	ldrb	r1, [r4, #16]
 80191be:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80191c2:	b212      	sxth	r2, r2
 80191c4:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80191c8:	b109      	cbz	r1, 80191ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 80191ca:	42b2      	cmp	r2, r6
 80191cc:	dba4      	blt.n	8019118 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80191ce:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80191d2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80191d6:	440a      	add	r2, r1
 80191d8:	b212      	sxth	r2, r2
 80191da:	4293      	cmp	r3, r2
 80191dc:	dda4      	ble.n	8019128 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 80191de:	e79b      	b.n	8019118 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80191e0:	2a02      	cmp	r2, #2
 80191e2:	d105      	bne.n	80191f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 80191e4:	7be2      	ldrb	r2, [r4, #15]
 80191e6:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80191ea:	1a80      	subs	r0, r0, r2
 80191ec:	1ac0      	subs	r0, r0, r3
 80191ee:	e7bf      	b.n	8019170 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 80191f0:	2000      	movs	r0, #0
 80191f2:	e7be      	b.n	8019172 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 80191f4:	7be0      	ldrb	r0, [r4, #15]
 80191f6:	e7bc      	b.n	8019172 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 80191f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80191fc:	e7c3      	b.n	8019186 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 80191fe:	9b08      	ldr	r3, [sp, #32]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d0f7      	beq.n	80191f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019204:	2258      	movs	r2, #88	; 0x58
 8019206:	4639      	mov	r1, r7
 8019208:	4628      	mov	r0, r5
 801920a:	f00c fcb7 	bl	8025b7c <memcpy>
 801920e:	2300      	movs	r3, #0
 8019210:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019214:	6821      	ldr	r1, [r4, #0]
 8019216:	4628      	mov	r0, r5
 8019218:	f7ff fbfb 	bl	8018a12 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801921c:	b203      	sxth	r3, r0
 801921e:	e79e      	b.n	801915e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08019220 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019220:	2b02      	cmp	r3, #2
 8019222:	b510      	push	{r4, lr}
 8019224:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019228:	d00b      	beq.n	8019242 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801922a:	2b03      	cmp	r3, #3
 801922c:	d00e      	beq.n	801924c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801922e:	2b01      	cmp	r3, #1
 8019230:	d001      	beq.n	8019236 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8019232:	1860      	adds	r0, r4, r1
 8019234:	bd10      	pop	{r4, pc}
 8019236:	8880      	ldrh	r0, [r0, #4]
 8019238:	4420      	add	r0, r4
 801923a:	b200      	sxth	r0, r0
 801923c:	1a80      	subs	r0, r0, r2
 801923e:	3801      	subs	r0, #1
 8019240:	e7f8      	b.n	8019234 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019242:	8880      	ldrh	r0, [r0, #4]
 8019244:	4420      	add	r0, r4
 8019246:	b200      	sxth	r0, r0
 8019248:	1a40      	subs	r0, r0, r1
 801924a:	e7f8      	b.n	801923e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801924c:	18a0      	adds	r0, r4, r2
 801924e:	e7f1      	b.n	8019234 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08019250 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019250:	2b02      	cmp	r3, #2
 8019252:	b510      	push	{r4, lr}
 8019254:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8019258:	d006      	beq.n	8019268 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801925a:	2b03      	cmp	r3, #3
 801925c:	d00a      	beq.n	8019274 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801925e:	2b01      	cmp	r3, #1
 8019260:	bf14      	ite	ne
 8019262:	18a0      	addne	r0, r4, r2
 8019264:	1860      	addeq	r0, r4, r1
 8019266:	bd10      	pop	{r4, pc}
 8019268:	88c0      	ldrh	r0, [r0, #6]
 801926a:	4420      	add	r0, r4
 801926c:	b200      	sxth	r0, r0
 801926e:	1a80      	subs	r0, r0, r2
 8019270:	3801      	subs	r0, #1
 8019272:	e7f8      	b.n	8019266 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8019274:	88c0      	ldrh	r0, [r0, #6]
 8019276:	4420      	add	r0, r4
 8019278:	b200      	sxth	r0, r0
 801927a:	1a40      	subs	r0, r0, r1
 801927c:	e7f8      	b.n	8019270 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08019280 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019280:	4b01      	ldr	r3, [pc, #4]	; (8019288 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019282:	2200      	movs	r2, #0
 8019284:	601a      	str	r2, [r3, #0]
 8019286:	4770      	bx	lr
 8019288:	2000b3f0 	.word	0x2000b3f0

0801928c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801928c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801928e:	1e05      	subs	r5, r0, #0
 8019290:	f04f 0601 	mov.w	r6, #1
 8019294:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019298:	bfba      	itte	lt
 801929a:	f04f 37ff 	movlt.w	r7, #4294967295
 801929e:	426d      	neglt	r5, r5
 80192a0:	2701      	movge	r7, #1
 80192a2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80192a6:	f1be 0f00 	cmp.w	lr, #0
 80192aa:	bfbc      	itt	lt
 80192ac:	f1ce 0e00 	rsblt	lr, lr, #0
 80192b0:	427f      	neglt	r7, r7
 80192b2:	2c00      	cmp	r4, #0
 80192b4:	fa4e f001 	asr.w	r0, lr, r1
 80192b8:	fa06 f101 	lsl.w	r1, r6, r1
 80192bc:	bfbc      	itt	lt
 80192be:	4264      	neglt	r4, r4
 80192c0:	427f      	neglt	r7, r7
 80192c2:	3901      	subs	r1, #1
 80192c4:	ea01 010e 	and.w	r1, r1, lr
 80192c8:	434d      	muls	r5, r1
 80192ca:	f8dc 1000 	ldr.w	r1, [ip]
 80192ce:	fb03 1300 	mla	r3, r3, r0, r1
 80192d2:	fb95 f1f4 	sdiv	r1, r5, r4
 80192d6:	fb04 5511 	mls	r5, r4, r1, r5
 80192da:	441d      	add	r5, r3
 80192dc:	fb95 f3f4 	sdiv	r3, r5, r4
 80192e0:	4419      	add	r1, r3
 80192e2:	fb04 5413 	mls	r4, r4, r3, r5
 80192e6:	fb02 1000 	mla	r0, r2, r0, r1
 80192ea:	f8cc 4000 	str.w	r4, [ip]
 80192ee:	4378      	muls	r0, r7
 80192f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080192f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80192f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192f8:	4c24      	ldr	r4, [pc, #144]	; (801938c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 80192fa:	b086      	sub	sp, #24
 80192fc:	4605      	mov	r5, r0
 80192fe:	6807      	ldr	r7, [r0, #0]
 8019300:	69a3      	ldr	r3, [r4, #24]
 8019302:	b92b      	cbnz	r3, 8019310 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8019304:	6840      	ldr	r0, [r0, #4]
 8019306:	e9c5 7000 	strd	r7, r0, [r5]
 801930a:	b006      	add	sp, #24
 801930c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019310:	f04f 0802 	mov.w	r8, #2
 8019314:	68a2      	ldr	r2, [r4, #8]
 8019316:	ae06      	add	r6, sp, #24
 8019318:	6820      	ldr	r0, [r4, #0]
 801931a:	fb93 f1f8 	sdiv	r1, r3, r8
 801931e:	440a      	add	r2, r1
 8019320:	69e1      	ldr	r1, [r4, #28]
 8019322:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019326:	9700      	str	r7, [sp, #0]
 8019328:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801932a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801932e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019330:	f7ff ffac 	bl	801928c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019334:	69a3      	ldr	r3, [r4, #24]
 8019336:	4607      	mov	r7, r0
 8019338:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801933a:	9301      	str	r3, [sp, #4]
 801933c:	686b      	ldr	r3, [r5, #4]
 801933e:	6a21      	ldr	r1, [r4, #32]
 8019340:	9300      	str	r3, [sp, #0]
 8019342:	9602      	str	r6, [sp, #8]
 8019344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019346:	6860      	ldr	r0, [r4, #4]
 8019348:	f7ff ffa0 	bl	801928c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801934c:	69a2      	ldr	r2, [r4, #24]
 801934e:	6963      	ldr	r3, [r4, #20]
 8019350:	4407      	add	r7, r0
 8019352:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019354:	68e0      	ldr	r0, [r4, #12]
 8019356:	fb92 f8f8 	sdiv	r8, r2, r8
 801935a:	4443      	add	r3, r8
 801935c:	9305      	str	r3, [sp, #20]
 801935e:	682b      	ldr	r3, [r5, #0]
 8019360:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8019364:	9300      	str	r3, [sp, #0]
 8019366:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019368:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801936a:	f7ff ff8f 	bl	801928c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801936e:	69a3      	ldr	r3, [r4, #24]
 8019370:	4680      	mov	r8, r0
 8019372:	9602      	str	r6, [sp, #8]
 8019374:	9301      	str	r3, [sp, #4]
 8019376:	686b      	ldr	r3, [r5, #4]
 8019378:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801937a:	9300      	str	r3, [sp, #0]
 801937c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801937e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8019380:	6920      	ldr	r0, [r4, #16]
 8019382:	f7ff ff83 	bl	801928c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019386:	4440      	add	r0, r8
 8019388:	e7bd      	b.n	8019306 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801938a:	bf00      	nop
 801938c:	2000b3f4 	.word	0x2000b3f4

08019390 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019390:	4b07      	ldr	r3, [pc, #28]	; (80193b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019392:	b510      	push	{r4, lr}
 8019394:	781b      	ldrb	r3, [r3, #0]
 8019396:	2b01      	cmp	r3, #1
 8019398:	d108      	bne.n	80193ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801939a:	4b06      	ldr	r3, [pc, #24]	; (80193b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801939c:	880c      	ldrh	r4, [r1, #0]
 801939e:	881b      	ldrh	r3, [r3, #0]
 80193a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80193a4:	3b01      	subs	r3, #1
 80193a6:	1b1b      	subs	r3, r3, r4
 80193a8:	8003      	strh	r3, [r0, #0]
 80193aa:	800a      	strh	r2, [r1, #0]
 80193ac:	bd10      	pop	{r4, pc}
 80193ae:	bf00      	nop
 80193b0:	2000b3c0 	.word	0x2000b3c0
 80193b4:	2000b3c4 	.word	0x2000b3c4

080193b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80193b8:	4b0a      	ldr	r3, [pc, #40]	; (80193e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80193ba:	b510      	push	{r4, lr}
 80193bc:	781b      	ldrb	r3, [r3, #0]
 80193be:	2b01      	cmp	r3, #1
 80193c0:	d10e      	bne.n	80193e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80193c2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80193c6:	8843      	ldrh	r3, [r0, #2]
 80193c8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80193cc:	18ca      	adds	r2, r1, r3
 80193ce:	4b06      	ldr	r3, [pc, #24]	; (80193e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80193d0:	8044      	strh	r4, [r0, #2]
 80193d2:	881b      	ldrh	r3, [r3, #0]
 80193d4:	1a9b      	subs	r3, r3, r2
 80193d6:	8003      	strh	r3, [r0, #0]
 80193d8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80193dc:	8081      	strh	r1, [r0, #4]
 80193de:	80c3      	strh	r3, [r0, #6]
 80193e0:	bd10      	pop	{r4, pc}
 80193e2:	bf00      	nop
 80193e4:	2000b3c0 	.word	0x2000b3c0
 80193e8:	2000b3bc 	.word	0x2000b3bc

080193ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80193ec:	4b07      	ldr	r3, [pc, #28]	; (801940c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80193ee:	b510      	push	{r4, lr}
 80193f0:	781b      	ldrb	r3, [r3, #0]
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d108      	bne.n	8019408 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80193f6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80193fa:	f9b0 4000 	ldrsh.w	r4, [r0]
 80193fe:	8003      	strh	r3, [r0, #0]
 8019400:	8893      	ldrh	r3, [r2, #4]
 8019402:	3b01      	subs	r3, #1
 8019404:	1b1b      	subs	r3, r3, r4
 8019406:	800b      	strh	r3, [r1, #0]
 8019408:	bd10      	pop	{r4, pc}
 801940a:	bf00      	nop
 801940c:	2000b3c0 	.word	0x2000b3c0

08019410 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019410:	4b08      	ldr	r3, [pc, #32]	; (8019434 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019412:	b513      	push	{r0, r1, r4, lr}
 8019414:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019418:	2400      	movs	r4, #0
 801941a:	4b07      	ldr	r3, [pc, #28]	; (8019438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801941c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019420:	466a      	mov	r2, sp
 8019422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019426:	9400      	str	r4, [sp, #0]
 8019428:	f8ad 3006 	strh.w	r3, [sp, #6]
 801942c:	f7ff ffde 	bl	80193ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019430:	b002      	add	sp, #8
 8019432:	bd10      	pop	{r4, pc}
 8019434:	2000b3bc 	.word	0x2000b3bc
 8019438:	2000b3be 	.word	0x2000b3be

0801943c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801943c:	4b0a      	ldr	r3, [pc, #40]	; (8019468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801943e:	460a      	mov	r2, r1
 8019440:	b510      	push	{r4, lr}
 8019442:	781b      	ldrb	r3, [r3, #0]
 8019444:	2b01      	cmp	r3, #1
 8019446:	d10d      	bne.n	8019464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019448:	8881      	ldrh	r1, [r0, #4]
 801944a:	8803      	ldrh	r3, [r0, #0]
 801944c:	440b      	add	r3, r1
 801944e:	4601      	mov	r1, r0
 8019450:	3b01      	subs	r3, #1
 8019452:	f821 3b02 	strh.w	r3, [r1], #2
 8019456:	f7ff ffc9 	bl	80193ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801945a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801945e:	88c2      	ldrh	r2, [r0, #6]
 8019460:	80c3      	strh	r3, [r0, #6]
 8019462:	8082      	strh	r2, [r0, #4]
 8019464:	bd10      	pop	{r4, pc}
 8019466:	bf00      	nop
 8019468:	2000b3c0 	.word	0x2000b3c0

0801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801946c:	4b09      	ldr	r3, [pc, #36]	; (8019494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801946e:	b507      	push	{r0, r1, r2, lr}
 8019470:	2100      	movs	r1, #0
 8019472:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019476:	4b08      	ldr	r3, [pc, #32]	; (8019498 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019478:	9100      	str	r1, [sp, #0]
 801947a:	4669      	mov	r1, sp
 801947c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019480:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019484:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019488:	f7ff ffd8 	bl	801943c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801948c:	b003      	add	sp, #12
 801948e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019492:	bf00      	nop
 8019494:	2000b3bc 	.word	0x2000b3bc
 8019498:	2000b3be 	.word	0x2000b3be

0801949c <_ZN8touchgfx11Application13requestRedrawEv>:
 801949c:	4b06      	ldr	r3, [pc, #24]	; (80194b8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801949e:	2100      	movs	r1, #0
 80194a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80194a4:	4b05      	ldr	r3, [pc, #20]	; (80194bc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80194a6:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80194aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194ae:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80194b2:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80194b6:	4770      	bx	lr
 80194b8:	2000b3bc 	.word	0x2000b3bc
 80194bc:	2000b3be 	.word	0x2000b3be

080194c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80194c0:	4b03      	ldr	r3, [pc, #12]	; (80194d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80194c2:	6818      	ldr	r0, [r3, #0]
 80194c4:	b110      	cbz	r0, 80194cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80194c6:	6803      	ldr	r3, [r0, #0]
 80194c8:	699b      	ldr	r3, [r3, #24]
 80194ca:	4718      	bx	r3
 80194cc:	4770      	bx	lr
 80194ce:	bf00      	nop
 80194d0:	2000b444 	.word	0x2000b444

080194d4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80194d4:	4770      	bx	lr
	...

080194d8 <_ZN8touchgfx11Application4drawEv>:
 80194d8:	4b09      	ldr	r3, [pc, #36]	; (8019500 <_ZN8touchgfx11Application4drawEv+0x28>)
 80194da:	b507      	push	{r0, r1, r2, lr}
 80194dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80194e0:	2100      	movs	r1, #0
 80194e2:	4b08      	ldr	r3, [pc, #32]	; (8019504 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80194e4:	9100      	str	r1, [sp, #0]
 80194e6:	4669      	mov	r1, sp
 80194e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194ec:	f8ad 2004 	strh.w	r2, [sp, #4]
 80194f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80194f4:	6803      	ldr	r3, [r0, #0]
 80194f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80194f8:	4798      	blx	r3
 80194fa:	b003      	add	sp, #12
 80194fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019500:	2000b3bc 	.word	0x2000b3bc
 8019504:	2000b3be 	.word	0x2000b3be

08019508 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019508:	4b03      	ldr	r3, [pc, #12]	; (8019518 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801950a:	6818      	ldr	r0, [r3, #0]
 801950c:	b110      	cbz	r0, 8019514 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801950e:	6803      	ldr	r3, [r0, #0]
 8019510:	69db      	ldr	r3, [r3, #28]
 8019512:	4718      	bx	r3
 8019514:	4770      	bx	lr
 8019516:	bf00      	nop
 8019518:	2000b444 	.word	0x2000b444

0801951c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801951c:	4b03      	ldr	r3, [pc, #12]	; (801952c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801951e:	6818      	ldr	r0, [r3, #0]
 8019520:	b110      	cbz	r0, 8019528 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019522:	6803      	ldr	r3, [r0, #0]
 8019524:	6a1b      	ldr	r3, [r3, #32]
 8019526:	4718      	bx	r3
 8019528:	4770      	bx	lr
 801952a:	bf00      	nop
 801952c:	2000b444 	.word	0x2000b444

08019530 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019530:	4b03      	ldr	r3, [pc, #12]	; (8019540 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019532:	6818      	ldr	r0, [r3, #0]
 8019534:	b110      	cbz	r0, 801953c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019536:	6803      	ldr	r3, [r0, #0]
 8019538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801953a:	4718      	bx	r3
 801953c:	4770      	bx	lr
 801953e:	bf00      	nop
 8019540:	2000b444 	.word	0x2000b444

08019544 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019544:	b570      	push	{r4, r5, r6, lr}
 8019546:	4d34      	ldr	r5, [pc, #208]	; (8019618 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8019548:	4604      	mov	r4, r0
 801954a:	6828      	ldr	r0, [r5, #0]
 801954c:	b140      	cbz	r0, 8019560 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801954e:	7a03      	ldrb	r3, [r0, #8]
 8019550:	b933      	cbnz	r3, 8019560 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019552:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019556:	6803      	ldr	r3, [r0, #0]
 8019558:	689b      	ldr	r3, [r3, #8]
 801955a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801955e:	4718      	bx	r3
 8019560:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8019564:	b97b      	cbnz	r3, 8019586 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019566:	b170      	cbz	r0, 8019586 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019568:	7a03      	ldrb	r3, [r0, #8]
 801956a:	b163      	cbz	r3, 8019586 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801956c:	4b2b      	ldr	r3, [pc, #172]	; (801961c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801956e:	6818      	ldr	r0, [r3, #0]
 8019570:	b110      	cbz	r0, 8019578 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019572:	6803      	ldr	r3, [r0, #0]
 8019574:	691b      	ldr	r3, [r3, #16]
 8019576:	4798      	blx	r3
 8019578:	6828      	ldr	r0, [r5, #0]
 801957a:	6803      	ldr	r3, [r0, #0]
 801957c:	68db      	ldr	r3, [r3, #12]
 801957e:	4798      	blx	r3
 8019580:	2301      	movs	r3, #1
 8019582:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019586:	2500      	movs	r5, #0
 8019588:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801958c:	42a8      	cmp	r0, r5
 801958e:	dd0c      	ble.n	80195aa <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8019590:	1963      	adds	r3, r4, r5
 8019592:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019596:	b132      	cbz	r2, 80195a6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019598:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801959c:	4413      	add	r3, r2
 801959e:	6858      	ldr	r0, [r3, #4]
 80195a0:	6803      	ldr	r3, [r0, #0]
 80195a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195a4:	4798      	blx	r3
 80195a6:	3501      	adds	r5, #1
 80195a8:	e7ee      	b.n	8019588 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80195aa:	2300      	movs	r3, #0
 80195ac:	461a      	mov	r2, r3
 80195ae:	4298      	cmp	r0, r3
 80195b0:	d114      	bne.n	80195dc <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 80195b2:	1d25      	adds	r5, r4, #4
 80195b4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80195b8:	1e48      	subs	r0, r1, #1
 80195ba:	b280      	uxth	r0, r0
 80195bc:	4291      	cmp	r1, r2
 80195be:	dd24      	ble.n	801960a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 80195c0:	4288      	cmp	r0, r1
 80195c2:	d2fb      	bcs.n	80195bc <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 80195c4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80195c8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80195cc:	3304      	adds	r3, #4
 80195ce:	428b      	cmp	r3, r1
 80195d0:	d018      	beq.n	8019604 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 80195d2:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80195d6:	f843 6c04 	str.w	r6, [r3, #-4]
 80195da:	e7f8      	b.n	80195ce <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 80195dc:	18e1      	adds	r1, r4, r3
 80195de:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80195e2:	b16d      	cbz	r5, 8019600 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 80195e4:	429a      	cmp	r2, r3
 80195e6:	d00a      	beq.n	80195fe <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 80195e8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80195ec:	4431      	add	r1, r6
 80195ee:	684e      	ldr	r6, [r1, #4]
 80195f0:	b291      	uxth	r1, r2
 80195f2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80195f6:	604e      	str	r6, [r1, #4]
 80195f8:	18a1      	adds	r1, r4, r2
 80195fa:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80195fe:	3201      	adds	r2, #1
 8019600:	3301      	adds	r3, #1
 8019602:	e7d4      	b.n	80195ae <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019604:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8019608:	e7d4      	b.n	80195b4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801960a:	4b04      	ldr	r3, [pc, #16]	; (801961c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801960c:	6818      	ldr	r0, [r3, #0]
 801960e:	b110      	cbz	r0, 8019616 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8019610:	6803      	ldr	r3, [r0, #0]
 8019612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019614:	e7a1      	b.n	801955a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019616:	bd70      	pop	{r4, r5, r6, pc}
 8019618:	2000b448 	.word	0x2000b448
 801961c:	2000b444 	.word	0x2000b444

08019620 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019620:	b570      	push	{r4, r5, r6, lr}
 8019622:	4606      	mov	r6, r0
 8019624:	460c      	mov	r4, r1
 8019626:	b929      	cbnz	r1, 8019634 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019628:	4b0c      	ldr	r3, [pc, #48]	; (801965c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801962a:	2165      	movs	r1, #101	; 0x65
 801962c:	4a0c      	ldr	r2, [pc, #48]	; (8019660 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801962e:	480d      	ldr	r0, [pc, #52]	; (8019664 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8019630:	f00c fa26 	bl	8025a80 <__assert_func>
 8019634:	2300      	movs	r3, #0
 8019636:	4d0c      	ldr	r5, [pc, #48]	; (8019668 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8019638:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801963c:	6828      	ldr	r0, [r5, #0]
 801963e:	b110      	cbz	r0, 8019646 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8019640:	6803      	ldr	r3, [r0, #0]
 8019642:	695b      	ldr	r3, [r3, #20]
 8019644:	4798      	blx	r3
 8019646:	602c      	str	r4, [r5, #0]
 8019648:	4620      	mov	r0, r4
 801964a:	6823      	ldr	r3, [r4, #0]
 801964c:	68db      	ldr	r3, [r3, #12]
 801964e:	4798      	blx	r3
 8019650:	6833      	ldr	r3, [r6, #0]
 8019652:	4630      	mov	r0, r6
 8019654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801965a:	4718      	bx	r3
 801965c:	0802a5a4 	.word	0x0802a5a4
 8019660:	0802a674 	.word	0x0802a674
 8019664:	0802a5ae 	.word	0x0802a5ae
 8019668:	2000b444 	.word	0x2000b444

0801966c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801966c:	b510      	push	{r4, lr}
 801966e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019672:	888a      	ldrh	r2, [r1, #4]
 8019674:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019678:	4422      	add	r2, r4
 801967a:	b212      	sxth	r2, r2
 801967c:	4293      	cmp	r3, r2
 801967e:	da15      	bge.n	80196ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019680:	8882      	ldrh	r2, [r0, #4]
 8019682:	4413      	add	r3, r2
 8019684:	b21b      	sxth	r3, r3
 8019686:	429c      	cmp	r4, r3
 8019688:	da10      	bge.n	80196ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801968a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801968e:	88c9      	ldrh	r1, [r1, #6]
 8019690:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019694:	4419      	add	r1, r3
 8019696:	b209      	sxth	r1, r1
 8019698:	428a      	cmp	r2, r1
 801969a:	da07      	bge.n	80196ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801969c:	88c0      	ldrh	r0, [r0, #6]
 801969e:	4410      	add	r0, r2
 80196a0:	b200      	sxth	r0, r0
 80196a2:	4283      	cmp	r3, r0
 80196a4:	bfac      	ite	ge
 80196a6:	2000      	movge	r0, #0
 80196a8:	2001      	movlt	r0, #1
 80196aa:	bd10      	pop	{r4, pc}
 80196ac:	2000      	movs	r0, #0
 80196ae:	e7fc      	b.n	80196aa <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080196b0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80196b0:	b570      	push	{r4, r5, r6, lr}
 80196b2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80196b6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80196ba:	42ac      	cmp	r4, r5
 80196bc:	db18      	blt.n	80196f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80196be:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80196c2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80196c6:	429a      	cmp	r2, r3
 80196c8:	db12      	blt.n	80196f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80196ca:	8886      	ldrh	r6, [r0, #4]
 80196cc:	4435      	add	r5, r6
 80196ce:	888e      	ldrh	r6, [r1, #4]
 80196d0:	4434      	add	r4, r6
 80196d2:	b22d      	sxth	r5, r5
 80196d4:	b224      	sxth	r4, r4
 80196d6:	42a5      	cmp	r5, r4
 80196d8:	db0a      	blt.n	80196f0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80196da:	88c0      	ldrh	r0, [r0, #6]
 80196dc:	4418      	add	r0, r3
 80196de:	88cb      	ldrh	r3, [r1, #6]
 80196e0:	441a      	add	r2, r3
 80196e2:	b200      	sxth	r0, r0
 80196e4:	b212      	sxth	r2, r2
 80196e6:	4290      	cmp	r0, r2
 80196e8:	bfb4      	ite	lt
 80196ea:	2000      	movlt	r0, #0
 80196ec:	2001      	movge	r0, #1
 80196ee:	bd70      	pop	{r4, r5, r6, pc}
 80196f0:	2000      	movs	r0, #0
 80196f2:	e7fc      	b.n	80196ee <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

080196f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80196f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196f6:	4604      	mov	r4, r0
 80196f8:	4608      	mov	r0, r1
 80196fa:	460d      	mov	r5, r1
 80196fc:	f7fc fb95 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019700:	b978      	cbnz	r0, 8019722 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019702:	4620      	mov	r0, r4
 8019704:	f7fc fb91 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019708:	f9b5 6000 	ldrsh.w	r6, [r5]
 801970c:	b150      	cbz	r0, 8019724 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801970e:	8026      	strh	r6, [r4, #0]
 8019710:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019714:	8063      	strh	r3, [r4, #2]
 8019716:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801971a:	80a3      	strh	r3, [r4, #4]
 801971c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019720:	80e3      	strh	r3, [r4, #6]
 8019722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019724:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019728:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801972c:	42b1      	cmp	r1, r6
 801972e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019732:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019736:	460f      	mov	r7, r1
 8019738:	88ed      	ldrh	r5, [r5, #6]
 801973a:	bfa8      	it	ge
 801973c:	4637      	movge	r7, r6
 801973e:	4293      	cmp	r3, r2
 8019740:	4618      	mov	r0, r3
 8019742:	4466      	add	r6, ip
 8019744:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019748:	bfa8      	it	ge
 801974a:	4610      	movge	r0, r2
 801974c:	442a      	add	r2, r5
 801974e:	88e5      	ldrh	r5, [r4, #6]
 8019750:	4461      	add	r1, ip
 8019752:	b236      	sxth	r6, r6
 8019754:	8027      	strh	r7, [r4, #0]
 8019756:	442b      	add	r3, r5
 8019758:	b209      	sxth	r1, r1
 801975a:	b212      	sxth	r2, r2
 801975c:	8060      	strh	r0, [r4, #2]
 801975e:	b21b      	sxth	r3, r3
 8019760:	428e      	cmp	r6, r1
 8019762:	bfac      	ite	ge
 8019764:	ebc7 0106 	rsbge	r1, r7, r6
 8019768:	ebc7 0101 	rsblt	r1, r7, r1
 801976c:	429a      	cmp	r2, r3
 801976e:	bfac      	ite	ge
 8019770:	ebc0 0202 	rsbge	r2, r0, r2
 8019774:	ebc0 0203 	rsblt	r2, r0, r3
 8019778:	80a1      	strh	r1, [r4, #4]
 801977a:	80e2      	strh	r2, [r4, #6]
 801977c:	e7d1      	b.n	8019722 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019780 <_ZN8touchgfx11Application11getInstanceEv>:
 8019780:	4b01      	ldr	r3, [pc, #4]	; (8019788 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019782:	6818      	ldr	r0, [r3, #0]
 8019784:	4770      	bx	lr
 8019786:	bf00      	nop
 8019788:	2000b454 	.word	0x2000b454

0801978c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801978c:	b570      	push	{r4, r5, r6, lr}
 801978e:	2300      	movs	r3, #0
 8019790:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8019794:	1d04      	adds	r4, r0, #4
 8019796:	b29a      	uxth	r2, r3
 8019798:	4296      	cmp	r6, r2
 801979a:	d90a      	bls.n	80197b2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801979c:	f854 2b04 	ldr.w	r2, [r4], #4
 80197a0:	428a      	cmp	r2, r1
 80197a2:	d107      	bne.n	80197b4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80197a4:	18c5      	adds	r5, r0, r3
 80197a6:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 80197aa:	b11a      	cbz	r2, 80197b4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80197ac:	3a01      	subs	r2, #1
 80197ae:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 80197b2:	bd70      	pop	{r4, r5, r6, pc}
 80197b4:	3301      	adds	r3, #1
 80197b6:	e7ee      	b.n	8019796 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

080197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80197b8:	2300      	movs	r3, #0
 80197ba:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80197be:	30a8      	adds	r0, #168	; 0xa8
 80197c0:	f820 3c24 	strh.w	r3, [r0, #-36]
 80197c4:	f802 3b01 	strb.w	r3, [r2], #1
 80197c8:	4282      	cmp	r2, r0
 80197ca:	d1fb      	bne.n	80197c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80197cc:	4770      	bx	lr

080197ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80197ce:	4603      	mov	r3, r0
 80197d0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80197d4:	2200      	movs	r2, #0
 80197d6:	801a      	strh	r2, [r3, #0]
 80197d8:	3308      	adds	r3, #8
 80197da:	f823 2c06 	strh.w	r2, [r3, #-6]
 80197de:	f823 2c04 	strh.w	r2, [r3, #-4]
 80197e2:	f823 2c02 	strh.w	r2, [r3, #-2]
 80197e6:	428b      	cmp	r3, r1
 80197e8:	d1f5      	bne.n	80197d6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80197ea:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80197ee:	4770      	bx	lr

080197f0 <_ZN8touchgfx11ApplicationC1Ev>:
 80197f0:	b570      	push	{r4, r5, r6, lr}
 80197f2:	4b1a      	ldr	r3, [pc, #104]	; (801985c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80197f4:	2500      	movs	r5, #0
 80197f6:	4604      	mov	r4, r0
 80197f8:	30a8      	adds	r0, #168	; 0xa8
 80197fa:	f840 3ca8 	str.w	r3, [r0, #-168]
 80197fe:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019802:	f7ff ffe4 	bl	80197ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019806:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801980a:	f7ff ffe0 	bl	80197ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801980e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8019812:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019816:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801981a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801981e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8019822:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8019826:	490e      	ldr	r1, [pc, #56]	; (8019860 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019828:	480e      	ldr	r0, [pc, #56]	; (8019864 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801982a:	f00a fc05 	bl	8024038 <CRC_Lock>
 801982e:	4e0e      	ldr	r6, [pc, #56]	; (8019868 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019830:	4b0e      	ldr	r3, [pc, #56]	; (801986c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019832:	b158      	cbz	r0, 801984c <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8019834:	801d      	strh	r5, [r3, #0]
 8019836:	2300      	movs	r3, #0
 8019838:	4a0d      	ldr	r2, [pc, #52]	; (8019870 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801983a:	4620      	mov	r0, r4
 801983c:	6013      	str	r3, [r2, #0]
 801983e:	4a0d      	ldr	r2, [pc, #52]	; (8019874 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8019840:	6033      	str	r3, [r6, #0]
 8019842:	6013      	str	r3, [r2, #0]
 8019844:	f7ff ffb8 	bl	80197b8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019848:	4620      	mov	r0, r4
 801984a:	bd70      	pop	{r4, r5, r6, pc}
 801984c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019850:	2002      	movs	r0, #2
 8019852:	801a      	strh	r2, [r3, #0]
 8019854:	6030      	str	r0, [r6, #0]
 8019856:	f000 ff83 	bl	801a760 <_ZN8touchgfx6Screen4drawEv>
 801985a:	e7ec      	b.n	8019836 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801985c:	0802a638 	.word	0x0802a638
 8019860:	b5e8b5cd 	.word	0xb5e8b5cd
 8019864:	f407a5c2 	.word	0xf407a5c2
 8019868:	2000b444 	.word	0x2000b444
 801986c:	20000040 	.word	0x20000040
 8019870:	2000b454 	.word	0x2000b454
 8019874:	2000b448 	.word	0x2000b448

08019878 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019878:	2300      	movs	r3, #0
 801987a:	8003      	strh	r3, [r0, #0]
 801987c:	8043      	strh	r3, [r0, #2]
 801987e:	8083      	strh	r3, [r0, #4]
 8019880:	80c3      	strh	r3, [r0, #6]
 8019882:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8019886:	4293      	cmp	r3, r2
 8019888:	b530      	push	{r4, r5, lr}
 801988a:	d912      	bls.n	80198b2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801988c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8019890:	3b01      	subs	r3, #1
 8019892:	6825      	ldr	r5, [r4, #0]
 8019894:	b29b      	uxth	r3, r3
 8019896:	6005      	str	r5, [r0, #0]
 8019898:	4293      	cmp	r3, r2
 801989a:	6865      	ldr	r5, [r4, #4]
 801989c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 80198a0:	6045      	str	r5, [r0, #4]
 80198a2:	d906      	bls.n	80198b2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80198a4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80198a8:	681d      	ldr	r5, [r3, #0]
 80198aa:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 80198ae:	685d      	ldr	r5, [r3, #4]
 80198b0:	6065      	str	r5, [r4, #4]
 80198b2:	bd30      	pop	{r4, r5, pc}

080198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80198b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198b6:	466b      	mov	r3, sp
 80198b8:	4604      	mov	r4, r0
 80198ba:	e883 0006 	stmia.w	r3, {r1, r2}
 80198be:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80198c2:	2a07      	cmp	r2, #7
 80198c4:	d906      	bls.n	80198d4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80198c6:	4b09      	ldr	r3, [pc, #36]	; (80198ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80198c8:	f240 118f 	movw	r1, #399	; 0x18f
 80198cc:	4a08      	ldr	r2, [pc, #32]	; (80198f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80198ce:	4809      	ldr	r0, [pc, #36]	; (80198f4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80198d0:	f00c f8d6 	bl	8025a80 <__assert_func>
 80198d4:	1c51      	adds	r1, r2, #1
 80198d6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80198da:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80198de:	cb03      	ldmia	r3!, {r0, r1}
 80198e0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80198e4:	6069      	str	r1, [r5, #4]
 80198e6:	b003      	add	sp, #12
 80198e8:	bd30      	pop	{r4, r5, pc}
 80198ea:	bf00      	nop
 80198ec:	0802a5d8 	.word	0x0802a5d8
 80198f0:	0802a6b8 	.word	0x0802a6b8
 80198f4:	0802a607 	.word	0x0802a607

080198f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80198f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198fc:	b089      	sub	sp, #36	; 0x24
 80198fe:	4606      	mov	r6, r0
 8019900:	466c      	mov	r4, sp
 8019902:	4620      	mov	r0, r4
 8019904:	e884 0006 	stmia.w	r4, {r1, r2}
 8019908:	f7fc fa8f 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801990c:	bbb0      	cbnz	r0, 801997c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801990e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8019912:	b1fd      	cbz	r5, 8019954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8019914:	3d01      	subs	r5, #1
 8019916:	af04      	add	r7, sp, #16
 8019918:	f04f 090a 	mov.w	r9, #10
 801991c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8019920:	ab02      	add	r3, sp, #8
 8019922:	fa1f f885 	uxth.w	r8, r5
 8019926:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801992a:	6851      	ldr	r1, [r2, #4]
 801992c:	c303      	stmia	r3!, {r0, r1}
 801992e:	4621      	mov	r1, r4
 8019930:	a802      	add	r0, sp, #8
 8019932:	f7ff febd 	bl	80196b0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019936:	bb08      	cbnz	r0, 801997c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019938:	a902      	add	r1, sp, #8
 801993a:	4620      	mov	r0, r4
 801993c:	f7ff feb8 	bl	80196b0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019940:	b1f8      	cbz	r0, 8019982 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8019942:	4642      	mov	r2, r8
 8019944:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019948:	a806      	add	r0, sp, #24
 801994a:	f7ff ff95 	bl	8019878 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801994e:	f115 35ff 	adds.w	r5, r5, #4294967295
 8019952:	d2e3      	bcs.n	801991c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8019954:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8019958:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801995c:	2b08      	cmp	r3, #8
 801995e:	d108      	bne.n	8019972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019960:	4629      	mov	r1, r5
 8019962:	a806      	add	r0, sp, #24
 8019964:	2207      	movs	r2, #7
 8019966:	f7ff ff87 	bl	8019878 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801996a:	a906      	add	r1, sp, #24
 801996c:	4620      	mov	r0, r4
 801996e:	f7ff fec1 	bl	80196f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019972:	4628      	mov	r0, r5
 8019974:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019978:	f7ff ff9c 	bl	80198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801997c:	b009      	add	sp, #36	; 0x24
 801997e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019982:	4621      	mov	r1, r4
 8019984:	a802      	add	r0, sp, #8
 8019986:	f7ff fe71 	bl	801966c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801998a:	b150      	cbz	r0, 80199a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801998c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019990:	a806      	add	r0, sp, #24
 8019992:	4642      	mov	r2, r8
 8019994:	f7ff ff70 	bl	8019878 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019998:	a902      	add	r1, sp, #8
 801999a:	4620      	mov	r0, r4
 801999c:	f7ff feaa 	bl	80196f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80199a0:	e7d5      	b.n	801994e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80199a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80199a6:	e887 0003 	stmia.w	r7, {r0, r1}
 80199aa:	a902      	add	r1, sp, #8
 80199ac:	4638      	mov	r0, r7
 80199ae:	f7ff fea1 	bl	80196f4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80199b2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80199b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80199ba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80199be:	fb13 f302 	smulbb	r3, r3, r2
 80199c2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80199c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80199ca:	fb11 f102 	smulbb	r1, r1, r2
 80199ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80199d2:	fb09 f303 	mul.w	r3, r9, r3
 80199d6:	fb12 1100 	smlabb	r1, r2, r0, r1
 80199da:	220b      	movs	r2, #11
 80199dc:	434a      	muls	r2, r1
 80199de:	4293      	cmp	r3, r2
 80199e0:	dab5      	bge.n	801994e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80199e2:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80199e6:	a806      	add	r0, sp, #24
 80199e8:	4642      	mov	r2, r8
 80199ea:	f7ff ff45 	bl	8019878 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80199ee:	e897 0003 	ldmia.w	r7, {r0, r1}
 80199f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80199f6:	e7aa      	b.n	801994e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

080199f8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80199f8:	4b1d      	ldr	r3, [pc, #116]	; (8019a70 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80199fa:	b530      	push	{r4, r5, lr}
 80199fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a00:	b085      	sub	sp, #20
 8019a02:	4b1c      	ldr	r3, [pc, #112]	; (8019a74 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019a04:	460c      	mov	r4, r1
 8019a06:	2100      	movs	r1, #0
 8019a08:	4605      	mov	r5, r0
 8019a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a0e:	6820      	ldr	r0, [r4, #0]
 8019a10:	9100      	str	r1, [sp, #0]
 8019a12:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019a16:	ab02      	add	r3, sp, #8
 8019a18:	6861      	ldr	r1, [r4, #4]
 8019a1a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019a1e:	c303      	stmia	r3!, {r0, r1}
 8019a20:	4669      	mov	r1, sp
 8019a22:	a802      	add	r0, sp, #8
 8019a24:	f7fc f9be 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 8019a28:	ab02      	add	r3, sp, #8
 8019a2a:	cb03      	ldmia	r3!, {r0, r1}
 8019a2c:	4b12      	ldr	r3, [pc, #72]	; (8019a78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019a2e:	6020      	str	r0, [r4, #0]
 8019a30:	6818      	ldr	r0, [r3, #0]
 8019a32:	6061      	str	r1, [r4, #4]
 8019a34:	b138      	cbz	r0, 8019a46 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019a36:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8019a3a:	b133      	cbz	r3, 8019a4a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019a3c:	6821      	ldr	r1, [r4, #0]
 8019a3e:	4628      	mov	r0, r5
 8019a40:	6862      	ldr	r2, [r4, #4]
 8019a42:	f7ff ff59 	bl	80198f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019a46:	b005      	add	sp, #20
 8019a48:	bd30      	pop	{r4, r5, pc}
 8019a4a:	6803      	ldr	r3, [r0, #0]
 8019a4c:	4621      	mov	r1, r4
 8019a4e:	689b      	ldr	r3, [r3, #8]
 8019a50:	4798      	blx	r3
 8019a52:	4b0a      	ldr	r3, [pc, #40]	; (8019a7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019a54:	6818      	ldr	r0, [r3, #0]
 8019a56:	b118      	cbz	r0, 8019a60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019a58:	6803      	ldr	r3, [r0, #0]
 8019a5a:	4621      	mov	r1, r4
 8019a5c:	689b      	ldr	r3, [r3, #8]
 8019a5e:	4798      	blx	r3
 8019a60:	4b07      	ldr	r3, [pc, #28]	; (8019a80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019a62:	4621      	mov	r1, r4
 8019a64:	6818      	ldr	r0, [r3, #0]
 8019a66:	6803      	ldr	r3, [r0, #0]
 8019a68:	695b      	ldr	r3, [r3, #20]
 8019a6a:	4798      	blx	r3
 8019a6c:	e7eb      	b.n	8019a46 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019a6e:	bf00      	nop
 8019a70:	2000b3bc 	.word	0x2000b3bc
 8019a74:	2000b3be 	.word	0x2000b3be
 8019a78:	2000b444 	.word	0x2000b444
 8019a7c:	2000b440 	.word	0x2000b440
 8019a80:	2000b3c8 	.word	0x2000b3c8

08019a84 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a88:	4604      	mov	r4, r0
 8019a8a:	b09b      	sub	sp, #108	; 0x6c
 8019a8c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8019a90:	b129      	cbz	r1, 8019a9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019a92:	2300      	movs	r3, #0
 8019a94:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019a98:	b01b      	add	sp, #108	; 0x6c
 8019a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a9e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8019aa2:	4630      	mov	r0, r6
 8019aa4:	f7fc f9c1 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019aa8:	4605      	mov	r5, r0
 8019aaa:	b940      	cbnz	r0, 8019abe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8019aac:	4620      	mov	r0, r4
 8019aae:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019ab2:	f7ff ff21 	bl	80198f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019ab6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8019aba:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8019abe:	4baf      	ldr	r3, [pc, #700]	; (8019d7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	b33b      	cbz	r3, 8019b14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019ac4:	4dae      	ldr	r5, [pc, #696]	; (8019d80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 8019ac6:	4628      	mov	r0, r5
 8019ac8:	f7fc f9af 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019acc:	4606      	mov	r6, r0
 8019ace:	bb08      	cbnz	r0, 8019b14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019ad0:	4628      	mov	r0, r5
 8019ad2:	f7ff fc71 	bl	80193b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019ad6:	6829      	ldr	r1, [r5, #0]
 8019ad8:	686a      	ldr	r2, [r5, #4]
 8019ada:	4620      	mov	r0, r4
 8019adc:	f7ff ff0c 	bl	80198f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019ae0:	802e      	strh	r6, [r5, #0]
 8019ae2:	806e      	strh	r6, [r5, #2]
 8019ae4:	80ae      	strh	r6, [r5, #4]
 8019ae6:	80ee      	strh	r6, [r5, #6]
 8019ae8:	4fa6      	ldr	r7, [pc, #664]	; (8019d84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 8019aea:	a809      	add	r0, sp, #36	; 0x24
 8019aec:	f7ff fe6f 	bl	80197ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019af0:	883d      	ldrh	r5, [r7, #0]
 8019af2:	462e      	mov	r6, r5
 8019af4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019af8:	42b3      	cmp	r3, r6
 8019afa:	d910      	bls.n	8019b1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8019afc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019b00:	3601      	adds	r6, #1
 8019b02:	a809      	add	r0, sp, #36	; 0x24
 8019b04:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019b08:	b2b6      	uxth	r6, r6
 8019b0a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019b0e:	f7ff fed1 	bl	80198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019b12:	e7ef      	b.n	8019af4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019b14:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d1e5      	bne.n	8019ae8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8019b1c:	e7bc      	b.n	8019a98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019b1e:	462e      	mov	r6, r5
 8019b20:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019b24:	42b3      	cmp	r3, r6
 8019b26:	d90b      	bls.n	8019b40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8019b28:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019b2c:	3601      	adds	r6, #1
 8019b2e:	4620      	mov	r0, r4
 8019b30:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019b34:	b2b6      	uxth	r6, r6
 8019b36:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019b3a:	f7ff fedd 	bl	80198f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019b3e:	e7ef      	b.n	8019b20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019b40:	4e91      	ldr	r6, [pc, #580]	; (8019d88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 8019b42:	6833      	ldr	r3, [r6, #0]
 8019b44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019b48:	2b01      	cmp	r3, #1
 8019b4a:	f040 8092 	bne.w	8019c72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 8019b4e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019b52:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8019b56:	f04f 0900 	mov.w	r9, #0
 8019b5a:	33aa      	adds	r3, #170	; 0xaa
 8019b5c:	42a8      	cmp	r0, r5
 8019b5e:	f103 0308 	add.w	r3, r3, #8
 8019b62:	dd0a      	ble.n	8019b7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 8019b64:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019b68:	3501      	adds	r5, #1
 8019b6a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019b6e:	440a      	add	r2, r1
 8019b70:	b212      	sxth	r2, r2
 8019b72:	4591      	cmp	r9, r2
 8019b74:	bfb8      	it	lt
 8019b76:	4691      	movlt	r9, r2
 8019b78:	e7f0      	b.n	8019b5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 8019b7a:	4b84      	ldr	r3, [pc, #528]	; (8019d8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 8019b7c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8019d94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 8019b80:	881d      	ldrh	r5, [r3, #0]
 8019b82:	2300      	movs	r3, #0
 8019b84:	2d0f      	cmp	r5, #15
 8019b86:	bf8c      	ite	hi
 8019b88:	08ed      	lsrhi	r5, r5, #3
 8019b8a:	2501      	movls	r5, #1
 8019b8c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019b90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019b94:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8019b98:	6830      	ldr	r0, [r6, #0]
 8019b9a:	440b      	add	r3, r1
 8019b9c:	6802      	ldr	r2, [r0, #0]
 8019b9e:	b21b      	sxth	r3, r3
 8019ba0:	4599      	cmp	r9, r3
 8019ba2:	dd49      	ble.n	8019c38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 8019ba4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8019ba8:	4798      	blx	r3
 8019baa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019bae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019bb2:	4413      	add	r3, r2
 8019bb4:	b21b      	sxth	r3, r3
 8019bb6:	195a      	adds	r2, r3, r5
 8019bb8:	4290      	cmp	r0, r2
 8019bba:	da07      	bge.n	8019bcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 8019bbc:	4581      	cmp	r9, r0
 8019bbe:	dd05      	ble.n	8019bcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 8019bc0:	4298      	cmp	r0, r3
 8019bc2:	da33      	bge.n	8019c2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	dd31      	ble.n	8019c2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8019bc8:	4648      	mov	r0, r9
 8019bca:	e004      	b.n	8019bd6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 8019bcc:	4298      	cmp	r0, r3
 8019bce:	dbfb      	blt.n	8019bc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 8019bd0:	4548      	cmp	r0, r9
 8019bd2:	bfa8      	it	ge
 8019bd4:	4648      	movge	r0, r9
 8019bd6:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019bda:	2100      	movs	r1, #0
 8019bdc:	1ac0      	subs	r0, r0, r3
 8019bde:	f8b7 a000 	ldrh.w	sl, [r7]
 8019be2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019be6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019bea:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019bee:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019bf2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019bf6:	4553      	cmp	r3, sl
 8019bf8:	d9ca      	bls.n	8019b90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019bfa:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019bfe:	ab07      	add	r3, sp, #28
 8019c00:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019c04:	6851      	ldr	r1, [r2, #4]
 8019c06:	c303      	stmia	r3!, {r0, r1}
 8019c08:	a807      	add	r0, sp, #28
 8019c0a:	a905      	add	r1, sp, #20
 8019c0c:	f7fc f8ca 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 8019c10:	a807      	add	r0, sp, #28
 8019c12:	f7fc f90a 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019c16:	b920      	cbnz	r0, 8019c22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 8019c18:	6823      	ldr	r3, [r4, #0]
 8019c1a:	a907      	add	r1, sp, #28
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c20:	4798      	blx	r3
 8019c22:	f10a 0a01 	add.w	sl, sl, #1
 8019c26:	fa1f fa8a 	uxth.w	sl, sl
 8019c2a:	e7e2      	b.n	8019bf2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 8019c2c:	6830      	ldr	r0, [r6, #0]
 8019c2e:	2101      	movs	r1, #1
 8019c30:	6803      	ldr	r3, [r0, #0]
 8019c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019c34:	4798      	blx	r3
 8019c36:	e7ab      	b.n	8019b90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019c38:	69d3      	ldr	r3, [r2, #28]
 8019c3a:	4798      	blx	r3
 8019c3c:	4b54      	ldr	r3, [pc, #336]	; (8019d90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 8019c3e:	781b      	ldrb	r3, [r3, #0]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	f43f af29 	beq.w	8019a98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019c46:	2300      	movs	r3, #0
 8019c48:	883d      	ldrh	r5, [r7, #0]
 8019c4a:	34ea      	adds	r4, #234	; 0xea
 8019c4c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019c50:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8019c54:	42ab      	cmp	r3, r5
 8019c56:	f67f af1f 	bls.w	8019a98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019c5a:	ab1a      	add	r3, sp, #104	; 0x68
 8019c5c:	4620      	mov	r0, r4
 8019c5e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019c62:	3501      	adds	r5, #1
 8019c64:	3b44      	subs	r3, #68	; 0x44
 8019c66:	b2ad      	uxth	r5, r5
 8019c68:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019c6c:	f7ff fe22 	bl	80198b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019c70:	e7ee      	b.n	8019c50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 8019c72:	2b02      	cmp	r3, #2
 8019c74:	d16a      	bne.n	8019d4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8019c76:	f8df a120 	ldr.w	sl, [pc, #288]	; 8019d98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 8019c7a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019c7e:	42ab      	cmp	r3, r5
 8019c80:	d9dc      	bls.n	8019c3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8019c82:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019c86:	ab03      	add	r3, sp, #12
 8019c88:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019c8c:	6851      	ldr	r1, [r2, #4]
 8019c8e:	c303      	stmia	r3!, {r0, r1}
 8019c90:	f89a 3000 	ldrb.w	r3, [sl]
 8019c94:	2b01      	cmp	r3, #1
 8019c96:	d102      	bne.n	8019c9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 8019c98:	a803      	add	r0, sp, #12
 8019c9a:	f7ff fbe7 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c9e:	a803      	add	r0, sp, #12
 8019ca0:	f7fc f8c3 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ca4:	2800      	cmp	r0, #0
 8019ca6:	d14a      	bne.n	8019d3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 8019ca8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019cac:	f10d 0914 	add.w	r9, sp, #20
 8019cb0:	f10d 081c 	add.w	r8, sp, #28
 8019cb4:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019cbc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019cc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019cc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019cc8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019ccc:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019cd0:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8019cd4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019cd8:	44dc      	add	ip, fp
 8019cda:	6830      	ldr	r0, [r6, #0]
 8019cdc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019ce0:	ebac 0c02 	sub.w	ip, ip, r2
 8019ce4:	f8d0 e000 	ldr.w	lr, [r0]
 8019ce8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019cec:	fa1f fc8c 	uxth.w	ip, ip
 8019cf0:	f8cd c000 	str.w	ip, [sp]
 8019cf4:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019cf8:	47d8      	blx	fp
 8019cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8019cfe:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019d02:	2b01      	cmp	r3, #1
 8019d04:	d11e      	bne.n	8019d44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 8019d06:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019d0a:	e888 0003 	stmia.w	r8, {r0, r1}
 8019d0e:	4640      	mov	r0, r8
 8019d10:	f7ff fb52 	bl	80193b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019d14:	6823      	ldr	r3, [r4, #0]
 8019d16:	4641      	mov	r1, r8
 8019d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d1a:	4620      	mov	r0, r4
 8019d1c:	4798      	blx	r3
 8019d1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019d22:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019d26:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8019d2a:	4413      	add	r3, r2
 8019d2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019d30:	440a      	add	r2, r1
 8019d32:	b21b      	sxth	r3, r3
 8019d34:	b212      	sxth	r2, r2
 8019d36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d3a:	4293      	cmp	r3, r2
 8019d3c:	dbc6      	blt.n	8019ccc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 8019d3e:	3501      	adds	r5, #1
 8019d40:	b2ad      	uxth	r5, r5
 8019d42:	e79a      	b.n	8019c7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 8019d44:	6823      	ldr	r3, [r4, #0]
 8019d46:	4649      	mov	r1, r9
 8019d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d4a:	e7e6      	b.n	8019d1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 8019d4c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019d50:	42ab      	cmp	r3, r5
 8019d52:	f67f af73 	bls.w	8019c3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8019d56:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019d5a:	ab07      	add	r3, sp, #28
 8019d5c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019d60:	6851      	ldr	r1, [r2, #4]
 8019d62:	c303      	stmia	r3!, {r0, r1}
 8019d64:	a807      	add	r0, sp, #28
 8019d66:	f7fc f860 	bl	8015e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019d6a:	b920      	cbnz	r0, 8019d76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 8019d6c:	6823      	ldr	r3, [r4, #0]
 8019d6e:	a907      	add	r1, sp, #28
 8019d70:	4620      	mov	r0, r4
 8019d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d74:	4798      	blx	r3
 8019d76:	3501      	adds	r5, #1
 8019d78:	b2ad      	uxth	r5, r5
 8019d7a:	e7e7      	b.n	8019d4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8019d7c:	2000b440 	.word	0x2000b440
 8019d80:	2000b44c 	.word	0x2000b44c
 8019d84:	20000040 	.word	0x20000040
 8019d88:	2000b3c8 	.word	0x2000b3c8
 8019d8c:	2000b3be 	.word	0x2000b3be
 8019d90:	2000b3c6 	.word	0x2000b3c6
 8019d94:	2000b3bc 	.word	0x2000b3bc
 8019d98:	2000b3c0 	.word	0x2000b3c0

08019d9c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019d9c:	4b03      	ldr	r3, [pc, #12]	; (8019dac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019d9e:	2200      	movs	r2, #0
 8019da0:	801a      	strh	r2, [r3, #0]
 8019da2:	805a      	strh	r2, [r3, #2]
 8019da4:	809a      	strh	r2, [r3, #4]
 8019da6:	80da      	strh	r2, [r3, #6]
 8019da8:	4770      	bx	lr
 8019daa:	bf00      	nop
 8019dac:	2000b44c 	.word	0x2000b44c

08019db0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019db4:	b099      	sub	sp, #100	; 0x64
 8019db6:	4607      	mov	r7, r0
 8019db8:	4614      	mov	r4, r2
 8019dba:	461d      	mov	r5, r3
 8019dbc:	a802      	add	r0, sp, #8
 8019dbe:	468a      	mov	sl, r1
 8019dc0:	f000 fe4b 	bl	801aa5a <_ZN8touchgfx12TextProviderC1Ev>
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	4638      	mov	r0, r7
 8019dc8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019dce:	4798      	blx	r3
 8019dd0:	462a      	mov	r2, r5
 8019dd2:	2500      	movs	r5, #0
 8019dd4:	4621      	mov	r1, r4
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	a802      	add	r0, sp, #8
 8019dda:	462c      	mov	r4, r5
 8019ddc:	46a9      	mov	r9, r5
 8019dde:	46a8      	mov	r8, r5
 8019de0:	f000 fe80 	bl	801aae4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019de4:	2300      	movs	r3, #0
 8019de6:	9301      	str	r3, [sp, #4]
 8019de8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019dec:	429c      	cmp	r4, r3
 8019dee:	d002      	beq.n	8019df6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8019df0:	455c      	cmp	r4, fp
 8019df2:	bf18      	it	ne
 8019df4:	4625      	movne	r5, r4
 8019df6:	ab01      	add	r3, sp, #4
 8019df8:	463a      	mov	r2, r7
 8019dfa:	4651      	mov	r1, sl
 8019dfc:	a802      	add	r0, sp, #8
 8019dfe:	f001 f96b 	bl	801b0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019e02:	4604      	mov	r4, r0
 8019e04:	b108      	cbz	r0, 8019e0a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8019e06:	280a      	cmp	r0, #10
 8019e08:	d10a      	bne.n	8019e20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8019e0a:	45c1      	cmp	r9, r8
 8019e0c:	bf38      	it	cc
 8019e0e:	46c1      	movcc	r9, r8
 8019e10:	f04f 0800 	mov.w	r8, #0
 8019e14:	2c00      	cmp	r4, #0
 8019e16:	d1e5      	bne.n	8019de4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019e18:	4648      	mov	r0, r9
 8019e1a:	b019      	add	sp, #100	; 0x64
 8019e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e20:	9a01      	ldr	r2, [sp, #4]
 8019e22:	2a00      	cmp	r2, #0
 8019e24:	d0de      	beq.n	8019de4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019e26:	7b56      	ldrb	r6, [r2, #13]
 8019e28:	4629      	mov	r1, r5
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	0076      	lsls	r6, r6, #1
 8019e2e:	8894      	ldrh	r4, [r2, #4]
 8019e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e32:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8019e36:	7a96      	ldrb	r6, [r2, #10]
 8019e38:	4306      	orrs	r6, r0
 8019e3a:	4638      	mov	r0, r7
 8019e3c:	4798      	blx	r3
 8019e3e:	4430      	add	r0, r6
 8019e40:	4480      	add	r8, r0
 8019e42:	fa1f f888 	uxth.w	r8, r8
 8019e46:	e7e5      	b.n	8019e14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08019e48 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019e48:	b508      	push	{r3, lr}
 8019e4a:	6803      	ldr	r3, [r0, #0]
 8019e4c:	68db      	ldr	r3, [r3, #12]
 8019e4e:	4798      	blx	r3
 8019e50:	b128      	cbz	r0, 8019e5e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019e52:	7b43      	ldrb	r3, [r0, #13]
 8019e54:	7a80      	ldrb	r0, [r0, #10]
 8019e56:	005b      	lsls	r3, r3, #1
 8019e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e5c:	4318      	orrs	r0, r3
 8019e5e:	bd08      	pop	{r3, pc}

08019e60 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019e60:	b40e      	push	{r1, r2, r3}
 8019e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e64:	b098      	sub	sp, #96	; 0x60
 8019e66:	4605      	mov	r5, r0
 8019e68:	ab1d      	add	r3, sp, #116	; 0x74
 8019e6a:	a802      	add	r0, sp, #8
 8019e6c:	ae18      	add	r6, sp, #96	; 0x60
 8019e6e:	f853 4b04 	ldr.w	r4, [r3], #4
 8019e72:	9300      	str	r3, [sp, #0]
 8019e74:	f000 fdf1 	bl	801aa5a <_ZN8touchgfx12TextProviderC1Ev>
 8019e78:	682b      	ldr	r3, [r5, #0]
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e7e:	4798      	blx	r3
 8019e80:	4621      	mov	r1, r4
 8019e82:	2400      	movs	r4, #0
 8019e84:	4603      	mov	r3, r0
 8019e86:	9a00      	ldr	r2, [sp, #0]
 8019e88:	a802      	add	r0, sp, #8
 8019e8a:	f000 fe2b 	bl	801aae4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019e8e:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8019e92:	462a      	mov	r2, r5
 8019e94:	4633      	mov	r3, r6
 8019e96:	4621      	mov	r1, r4
 8019e98:	a802      	add	r0, sp, #8
 8019e9a:	f001 f91d 	bl	801b0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019e9e:	b300      	cbz	r0, 8019ee2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019ea0:	280a      	cmp	r0, #10
 8019ea2:	d01a      	beq.n	8019eda <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019ea4:	9f01      	ldr	r7, [sp, #4]
 8019ea6:	b1c7      	cbz	r7, 8019eda <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019ea8:	7b78      	ldrb	r0, [r7, #13]
 8019eaa:	7a3b      	ldrb	r3, [r7, #8]
 8019eac:	00c1      	lsls	r1, r0, #3
 8019eae:	88aa      	ldrh	r2, [r5, #4]
 8019eb0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019eb4:	4319      	orrs	r1, r3
 8019eb6:	0643      	lsls	r3, r0, #25
 8019eb8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019ebc:	bf48      	it	mi
 8019ebe:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019ec2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019ec6:	bf48      	it	mi
 8019ec8:	b219      	sxthmi	r1, r3
 8019eca:	79fb      	ldrb	r3, [r7, #7]
 8019ecc:	4303      	orrs	r3, r0
 8019ece:	4413      	add	r3, r2
 8019ed0:	1a5b      	subs	r3, r3, r1
 8019ed2:	b29b      	uxth	r3, r3
 8019ed4:	42a3      	cmp	r3, r4
 8019ed6:	bfc8      	it	gt
 8019ed8:	b21c      	sxthgt	r4, r3
 8019eda:	4633      	mov	r3, r6
 8019edc:	462a      	mov	r2, r5
 8019ede:	2100      	movs	r1, #0
 8019ee0:	e7da      	b.n	8019e98 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8019ee2:	b2a0      	uxth	r0, r4
 8019ee4:	b018      	add	sp, #96	; 0x60
 8019ee6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019eea:	b003      	add	sp, #12
 8019eec:	4770      	bx	lr

08019eee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019eee:	b40e      	push	{r1, r2, r3}
 8019ef0:	b530      	push	{r4, r5, lr}
 8019ef2:	b098      	sub	sp, #96	; 0x60
 8019ef4:	4604      	mov	r4, r0
 8019ef6:	ab1b      	add	r3, sp, #108	; 0x6c
 8019ef8:	a802      	add	r0, sp, #8
 8019efa:	f853 5b04 	ldr.w	r5, [r3], #4
 8019efe:	9301      	str	r3, [sp, #4]
 8019f00:	f000 fdab 	bl	801aa5a <_ZN8touchgfx12TextProviderC1Ev>
 8019f04:	6823      	ldr	r3, [r4, #0]
 8019f06:	4620      	mov	r0, r4
 8019f08:	2401      	movs	r4, #1
 8019f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f0c:	4798      	blx	r3
 8019f0e:	9a01      	ldr	r2, [sp, #4]
 8019f10:	4603      	mov	r3, r0
 8019f12:	4629      	mov	r1, r5
 8019f14:	a802      	add	r0, sp, #8
 8019f16:	f000 fde5 	bl	801aae4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019f1a:	a802      	add	r0, sp, #8
 8019f1c:	f001 f9ce 	bl	801b2bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f20:	b2a3      	uxth	r3, r4
 8019f22:	b138      	cbz	r0, 8019f34 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8019f24:	280a      	cmp	r0, #10
 8019f26:	a802      	add	r0, sp, #8
 8019f28:	bf04      	itt	eq
 8019f2a:	3301      	addeq	r3, #1
 8019f2c:	b21c      	sxtheq	r4, r3
 8019f2e:	f001 f9c5 	bl	801b2bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f32:	e7f5      	b.n	8019f20 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8019f34:	4618      	mov	r0, r3
 8019f36:	b018      	add	sp, #96	; 0x60
 8019f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f3c:	b003      	add	sp, #12
 8019f3e:	4770      	bx	lr

08019f40 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019f40:	b40e      	push	{r1, r2, r3}
 8019f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f44:	b098      	sub	sp, #96	; 0x60
 8019f46:	4604      	mov	r4, r0
 8019f48:	26ff      	movs	r6, #255	; 0xff
 8019f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8019f4c:	a802      	add	r0, sp, #8
 8019f4e:	f853 5b04 	ldr.w	r5, [r3], #4
 8019f52:	9300      	str	r3, [sp, #0]
 8019f54:	f000 fd81 	bl	801aa5a <_ZN8touchgfx12TextProviderC1Ev>
 8019f58:	6823      	ldr	r3, [r4, #0]
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f5e:	4798      	blx	r3
 8019f60:	4629      	mov	r1, r5
 8019f62:	4603      	mov	r3, r0
 8019f64:	9a00      	ldr	r2, [sp, #0]
 8019f66:	a802      	add	r0, sp, #8
 8019f68:	ad18      	add	r5, sp, #96	; 0x60
 8019f6a:	f000 fdbb 	bl	801aae4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019f6e:	2100      	movs	r1, #0
 8019f70:	4622      	mov	r2, r4
 8019f72:	a802      	add	r0, sp, #8
 8019f74:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8019f78:	462b      	mov	r3, r5
 8019f7a:	f001 f8ad 	bl	801b0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019f7e:	b1d8      	cbz	r0, 8019fb8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019f80:	280a      	cmp	r0, #10
 8019f82:	d012      	beq.n	8019faa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8019f84:	9801      	ldr	r0, [sp, #4]
 8019f86:	b180      	cbz	r0, 8019faa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8019f88:	7b47      	ldrb	r7, [r0, #13]
 8019f8a:	7922      	ldrb	r2, [r4, #4]
 8019f8c:	00fb      	lsls	r3, r7, #3
 8019f8e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019f92:	7a03      	ldrb	r3, [r0, #8]
 8019f94:	430b      	orrs	r3, r1
 8019f96:	0679      	lsls	r1, r7, #25
 8019f98:	bf44      	itt	mi
 8019f9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019f9e:	b21b      	sxthmi	r3, r3
 8019fa0:	1ad3      	subs	r3, r2, r3
 8019fa2:	b2db      	uxtb	r3, r3
 8019fa4:	429e      	cmp	r6, r3
 8019fa6:	bf28      	it	cs
 8019fa8:	461e      	movcs	r6, r3
 8019faa:	462b      	mov	r3, r5
 8019fac:	4622      	mov	r2, r4
 8019fae:	2100      	movs	r1, #0
 8019fb0:	a802      	add	r0, sp, #8
 8019fb2:	f001 f891 	bl	801b0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019fb6:	e7e2      	b.n	8019f7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019fb8:	4630      	mov	r0, r6
 8019fba:	b018      	add	sp, #96	; 0x60
 8019fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019fc0:	b003      	add	sp, #12
 8019fc2:	4770      	bx	lr

08019fc4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019fc4:	b513      	push	{r0, r1, r4, lr}
 8019fc6:	1d01      	adds	r1, r0, #4
 8019fc8:	4603      	mov	r3, r0
 8019fca:	466a      	mov	r2, sp
 8019fcc:	c903      	ldmia	r1, {r0, r1}
 8019fce:	e882 0003 	stmia.w	r2, {r0, r1}
 8019fd2:	2100      	movs	r1, #0
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	9100      	str	r1, [sp, #0]
 8019fd8:	6819      	ldr	r1, [r3, #0]
 8019fda:	690c      	ldr	r4, [r1, #16]
 8019fdc:	4611      	mov	r1, r2
 8019fde:	47a0      	blx	r4
 8019fe0:	b002      	add	sp, #8
 8019fe2:	bd10      	pop	{r4, pc}

08019fe4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019fe4:	b538      	push	{r3, r4, r5, lr}
 8019fe6:	680b      	ldr	r3, [r1, #0]
 8019fe8:	460c      	mov	r4, r1
 8019fea:	4605      	mov	r5, r0
 8019fec:	68db      	ldr	r3, [r3, #12]
 8019fee:	4798      	blx	r3
 8019ff0:	6823      	ldr	r3, [r4, #0]
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	4629      	mov	r1, r5
 8019ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff8:	4798      	blx	r3
 8019ffa:	4628      	mov	r0, r5
 8019ffc:	bd38      	pop	{r3, r4, r5, pc}

08019ffe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019ffe:	b410      	push	{r4}
 801a000:	880a      	ldrh	r2, [r1, #0]
 801a002:	8884      	ldrh	r4, [r0, #4]
 801a004:	4422      	add	r2, r4
 801a006:	800a      	strh	r2, [r1, #0]
 801a008:	884a      	ldrh	r2, [r1, #2]
 801a00a:	88c4      	ldrh	r4, [r0, #6]
 801a00c:	4422      	add	r2, r4
 801a00e:	804a      	strh	r2, [r1, #2]
 801a010:	6940      	ldr	r0, [r0, #20]
 801a012:	b120      	cbz	r0, 801a01e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a014:	6803      	ldr	r3, [r0, #0]
 801a016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a01c:	4718      	bx	r3
 801a01e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a022:	4770      	bx	lr

0801a024 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a024:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a026:	460b      	mov	r3, r1
 801a028:	b085      	sub	sp, #20
 801a02a:	4604      	mov	r4, r0
 801a02c:	b901      	cbnz	r1, 801a030 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a02e:	b1fa      	cbz	r2, 801a070 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801a030:	1d27      	adds	r7, r4, #4
 801a032:	466e      	mov	r6, sp
 801a034:	ad02      	add	r5, sp, #8
 801a036:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a03a:	e886 0003 	stmia.w	r6, {r0, r1}
 801a03e:	88e1      	ldrh	r1, [r4, #6]
 801a040:	4620      	mov	r0, r4
 801a042:	440a      	add	r2, r1
 801a044:	88a1      	ldrh	r1, [r4, #4]
 801a046:	4419      	add	r1, r3
 801a048:	6823      	ldr	r3, [r4, #0]
 801a04a:	b212      	sxth	r2, r2
 801a04c:	b209      	sxth	r1, r1
 801a04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a050:	4798      	blx	r3
 801a052:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a056:	e885 0003 	stmia.w	r5, {r0, r1}
 801a05a:	6960      	ldr	r0, [r4, #20]
 801a05c:	b150      	cbz	r0, 801a074 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801a05e:	6803      	ldr	r3, [r0, #0]
 801a060:	4631      	mov	r1, r6
 801a062:	691b      	ldr	r3, [r3, #16]
 801a064:	4798      	blx	r3
 801a066:	6960      	ldr	r0, [r4, #20]
 801a068:	6803      	ldr	r3, [r0, #0]
 801a06a:	691b      	ldr	r3, [r3, #16]
 801a06c:	4629      	mov	r1, r5
 801a06e:	4798      	blx	r3
 801a070:	b005      	add	sp, #20
 801a072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a074:	f7ff fb84 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 801a078:	6803      	ldr	r3, [r0, #0]
 801a07a:	4631      	mov	r1, r6
 801a07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a07e:	4798      	blx	r3
 801a080:	f7ff fb7e 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 801a084:	6803      	ldr	r3, [r0, #0]
 801a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a088:	e7f0      	b.n	801a06c <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801a08a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a08a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a08c:	8882      	ldrh	r2, [r0, #4]
 801a08e:	4605      	mov	r5, r0
 801a090:	880b      	ldrh	r3, [r1, #0]
 801a092:	460c      	mov	r4, r1
 801a094:	4413      	add	r3, r2
 801a096:	800b      	strh	r3, [r1, #0]
 801a098:	884b      	ldrh	r3, [r1, #2]
 801a09a:	88c2      	ldrh	r2, [r0, #6]
 801a09c:	4413      	add	r3, r2
 801a09e:	4602      	mov	r2, r0
 801a0a0:	804b      	strh	r3, [r1, #2]
 801a0a2:	466b      	mov	r3, sp
 801a0a4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a0a8:	6851      	ldr	r1, [r2, #4]
 801a0aa:	c303      	stmia	r3!, {r0, r1}
 801a0ac:	4621      	mov	r1, r4
 801a0ae:	4668      	mov	r0, sp
 801a0b0:	f7fb fe78 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 801a0b4:	466b      	mov	r3, sp
 801a0b6:	cb03      	ldmia	r3!, {r0, r1}
 801a0b8:	6020      	str	r0, [r4, #0]
 801a0ba:	6061      	str	r1, [r4, #4]
 801a0bc:	6968      	ldr	r0, [r5, #20]
 801a0be:	b128      	cbz	r0, 801a0cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801a0c0:	6803      	ldr	r3, [r0, #0]
 801a0c2:	691b      	ldr	r3, [r3, #16]
 801a0c4:	4621      	mov	r1, r4
 801a0c6:	4798      	blx	r3
 801a0c8:	b003      	add	sp, #12
 801a0ca:	bd30      	pop	{r4, r5, pc}
 801a0cc:	f7ff fb58 	bl	8019780 <_ZN8touchgfx11Application11getInstanceEv>
 801a0d0:	6803      	ldr	r3, [r0, #0]
 801a0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a0d4:	e7f6      	b.n	801a0c4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801a0d6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a0d6:	b570      	push	{r4, r5, r6, lr}
 801a0d8:	8882      	ldrh	r2, [r0, #4]
 801a0da:	460c      	mov	r4, r1
 801a0dc:	880b      	ldrh	r3, [r1, #0]
 801a0de:	4605      	mov	r5, r0
 801a0e0:	4413      	add	r3, r2
 801a0e2:	800b      	strh	r3, [r1, #0]
 801a0e4:	884b      	ldrh	r3, [r1, #2]
 801a0e6:	88c2      	ldrh	r2, [r0, #6]
 801a0e8:	4413      	add	r3, r2
 801a0ea:	804b      	strh	r3, [r1, #2]
 801a0ec:	1d01      	adds	r1, r0, #4
 801a0ee:	4620      	mov	r0, r4
 801a0f0:	f7fb fe58 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 801a0f4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	dd0b      	ble.n	801a114 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a0fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a100:	2b00      	cmp	r3, #0
 801a102:	dd07      	ble.n	801a114 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a104:	6968      	ldr	r0, [r5, #20]
 801a106:	b128      	cbz	r0, 801a114 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a108:	6803      	ldr	r3, [r0, #0]
 801a10a:	4621      	mov	r1, r4
 801a10c:	6a1b      	ldr	r3, [r3, #32]
 801a10e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a112:	4718      	bx	r3
 801a114:	bd70      	pop	{r4, r5, r6, pc}

0801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a116:	b510      	push	{r4, lr}
 801a118:	2300      	movs	r3, #0
 801a11a:	4604      	mov	r4, r0
 801a11c:	4608      	mov	r0, r1
 801a11e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a122:	8023      	strh	r3, [r4, #0]
 801a124:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a128:	8063      	strh	r3, [r4, #2]
 801a12a:	6803      	ldr	r3, [r0, #0]
 801a12c:	80a1      	strh	r1, [r4, #4]
 801a12e:	4621      	mov	r1, r4
 801a130:	80e2      	strh	r2, [r4, #6]
 801a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a134:	4798      	blx	r3
 801a136:	4620      	mov	r0, r4
 801a138:	bd10      	pop	{r4, pc}
	...

0801a13c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801a13c:	b530      	push	{r4, r5, lr}
 801a13e:	8083      	strh	r3, [r0, #4]
 801a140:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801a144:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801a148:	7183      	strb	r3, [r0, #6]
 801a14a:	79c3      	ldrb	r3, [r0, #7]
 801a14c:	6101      	str	r1, [r0, #16]
 801a14e:	f365 0306 	bfi	r3, r5, #0, #7
 801a152:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a156:	8282      	strh	r2, [r0, #20]
 801a158:	f365 13c7 	bfi	r3, r5, #7, #1
 801a15c:	71c3      	strb	r3, [r0, #7]
 801a15e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801a162:	7203      	strb	r3, [r0, #8]
 801a164:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801a168:	7243      	strb	r3, [r0, #9]
 801a16a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a16e:	8143      	strh	r3, [r0, #10]
 801a170:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a174:	8183      	strh	r3, [r0, #12]
 801a176:	4b01      	ldr	r3, [pc, #4]	; (801a17c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801a178:	6003      	str	r3, [r0, #0]
 801a17a:	bd30      	pop	{r4, r5, pc}
 801a17c:	0802a790 	.word	0x0802a790

0801a180 <_ZNK8touchgfx9ConstFont4findEt>:
 801a180:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a182:	6904      	ldr	r4, [r0, #16]
 801a184:	8a82      	ldrh	r2, [r0, #20]
 801a186:	88a3      	ldrh	r3, [r4, #4]
 801a188:	3a01      	subs	r2, #1
 801a18a:	1acb      	subs	r3, r1, r3
 801a18c:	d431      	bmi.n	801a1f2 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801a18e:	4293      	cmp	r3, r2
 801a190:	dd0c      	ble.n	801a1ac <_ZNK8touchgfx9ConstFont4findEt+0x2c>
 801a192:	230e      	movs	r3, #14
 801a194:	fb03 4302 	mla	r3, r3, r2, r4
 801a198:	889b      	ldrh	r3, [r3, #4]
 801a19a:	1a5b      	subs	r3, r3, r1
 801a19c:	1ad3      	subs	r3, r2, r3
 801a19e:	429a      	cmp	r2, r3
 801a1a0:	db27      	blt.n	801a1f2 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	bfbc      	itt	lt
 801a1a6:	2302      	movlt	r3, #2
 801a1a8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a1ac:	2500      	movs	r5, #0
 801a1ae:	260e      	movs	r6, #14
 801a1b0:	4295      	cmp	r5, r2
 801a1b2:	dc1e      	bgt.n	801a1f2 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801a1b4:	fb06 4003 	mla	r0, r6, r3, r4
 801a1b8:	8887      	ldrh	r7, [r0, #4]
 801a1ba:	428f      	cmp	r7, r1
 801a1bc:	d01a      	beq.n	801a1f4 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801a1be:	d90d      	bls.n	801a1dc <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 801a1c0:	1e5a      	subs	r2, r3, #1
 801a1c2:	4295      	cmp	r5, r2
 801a1c4:	dc15      	bgt.n	801a1f2 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801a1c6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a1ca:	1a5b      	subs	r3, r3, r1
 801a1cc:	1ad3      	subs	r3, r2, r3
 801a1ce:	429a      	cmp	r2, r3
 801a1d0:	db0f      	blt.n	801a1f2 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801a1d2:	429d      	cmp	r5, r3
 801a1d4:	ddec      	ble.n	801a1b0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a1d6:	1953      	adds	r3, r2, r5
 801a1d8:	105b      	asrs	r3, r3, #1
 801a1da:	e7e9      	b.n	801a1b0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a1dc:	1c5d      	adds	r5, r3, #1
 801a1de:	42aa      	cmp	r2, r5
 801a1e0:	db07      	blt.n	801a1f2 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801a1e2:	8a43      	ldrh	r3, [r0, #18]
 801a1e4:	1acb      	subs	r3, r1, r3
 801a1e6:	442b      	add	r3, r5
 801a1e8:	429d      	cmp	r5, r3
 801a1ea:	dc02      	bgt.n	801a1f2 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801a1ec:	429a      	cmp	r2, r3
 801a1ee:	dadf      	bge.n	801a1b0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a1f0:	e7f1      	b.n	801a1d6 <_ZNK8touchgfx9ConstFont4findEt+0x56>
 801a1f2:	2000      	movs	r0, #0
 801a1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a1f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1f8:	4604      	mov	r4, r0
 801a1fa:	4617      	mov	r7, r2
 801a1fc:	461e      	mov	r6, r3
 801a1fe:	b911      	cbnz	r1, 801a206 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a200:	2500      	movs	r5, #0
 801a202:	4628      	mov	r0, r5
 801a204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a206:	290a      	cmp	r1, #10
 801a208:	d0fa      	beq.n	801a200 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a20a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a20e:	4291      	cmp	r1, r2
 801a210:	d0f6      	beq.n	801a200 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a212:	f242 020b 	movw	r2, #8203	; 0x200b
 801a216:	4291      	cmp	r1, r2
 801a218:	d0f2      	beq.n	801a200 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a21a:	f7ff ffb1 	bl	801a180 <_ZNK8touchgfx9ConstFont4findEt>
 801a21e:	4605      	mov	r5, r0
 801a220:	b950      	cbnz	r0, 801a238 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a222:	6823      	ldr	r3, [r4, #0]
 801a224:	4620      	mov	r0, r4
 801a226:	691b      	ldr	r3, [r3, #16]
 801a228:	4798      	blx	r3
 801a22a:	4601      	mov	r1, r0
 801a22c:	4620      	mov	r0, r4
 801a22e:	f7ff ffa7 	bl	801a180 <_ZNK8touchgfx9ConstFont4findEt>
 801a232:	4605      	mov	r5, r0
 801a234:	2800      	cmp	r0, #0
 801a236:	d0e3      	beq.n	801a200 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a238:	6823      	ldr	r3, [r4, #0]
 801a23a:	4629      	mov	r1, r5
 801a23c:	4620      	mov	r0, r4
 801a23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a240:	4798      	blx	r3
 801a242:	6038      	str	r0, [r7, #0]
 801a244:	6823      	ldr	r3, [r4, #0]
 801a246:	4620      	mov	r0, r4
 801a248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a24a:	4798      	blx	r3
 801a24c:	7030      	strb	r0, [r6, #0]
 801a24e:	e7d8      	b.n	801a202 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a250 <_ZN8touchgfx6memsetEPvhm>:
 801a250:	4402      	add	r2, r0
 801a252:	4290      	cmp	r0, r2
 801a254:	d002      	beq.n	801a25c <_ZN8touchgfx6memsetEPvhm+0xc>
 801a256:	f800 1b01 	strb.w	r1, [r0], #1
 801a25a:	e7fa      	b.n	801a252 <_ZN8touchgfx6memsetEPvhm+0x2>
 801a25c:	4770      	bx	lr

0801a25e <_ZN8touchgfx3clzEl>:
 801a25e:	b1e8      	cbz	r0, 801a29c <_ZN8touchgfx3clzEl+0x3e>
 801a260:	2800      	cmp	r0, #0
 801a262:	bfb8      	it	lt
 801a264:	4240      	neglt	r0, r0
 801a266:	0c03      	lsrs	r3, r0, #16
 801a268:	041b      	lsls	r3, r3, #16
 801a26a:	b9ab      	cbnz	r3, 801a298 <_ZN8touchgfx3clzEl+0x3a>
 801a26c:	0400      	lsls	r0, r0, #16
 801a26e:	2310      	movs	r3, #16
 801a270:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a274:	bf04      	itt	eq
 801a276:	0200      	lsleq	r0, r0, #8
 801a278:	3308      	addeq	r3, #8
 801a27a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a27e:	bf04      	itt	eq
 801a280:	0100      	lsleq	r0, r0, #4
 801a282:	3304      	addeq	r3, #4
 801a284:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a288:	bf04      	itt	eq
 801a28a:	0080      	lsleq	r0, r0, #2
 801a28c:	3302      	addeq	r3, #2
 801a28e:	2800      	cmp	r0, #0
 801a290:	bfa8      	it	ge
 801a292:	3301      	addge	r3, #1
 801a294:	1e58      	subs	r0, r3, #1
 801a296:	4770      	bx	lr
 801a298:	2300      	movs	r3, #0
 801a29a:	e7e9      	b.n	801a270 <_ZN8touchgfx3clzEl+0x12>
 801a29c:	201f      	movs	r0, #31
 801a29e:	4770      	bx	lr

0801a2a0 <_ZN8touchgfx6muldivElllRl>:
 801a2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	4698      	mov	r8, r3
 801a2a8:	2601      	movs	r6, #1
 801a2aa:	f7ff ffd8 	bl	801a25e <_ZN8touchgfx3clzEl>
 801a2ae:	2c00      	cmp	r4, #0
 801a2b0:	fa04 f500 	lsl.w	r5, r4, r0
 801a2b4:	fa06 f600 	lsl.w	r6, r6, r0
 801a2b8:	bfba      	itte	lt
 801a2ba:	f04f 37ff 	movlt.w	r7, #4294967295
 801a2be:	4264      	neglt	r4, r4
 801a2c0:	2701      	movge	r7, #1
 801a2c2:	2900      	cmp	r1, #0
 801a2c4:	f106 36ff 	add.w	r6, r6, #4294967295
 801a2c8:	bfbc      	itt	lt
 801a2ca:	4249      	neglt	r1, r1
 801a2cc:	427f      	neglt	r7, r7
 801a2ce:	2a00      	cmp	r2, #0
 801a2d0:	fa41 fc00 	asr.w	ip, r1, r0
 801a2d4:	ea01 0106 	and.w	r1, r1, r6
 801a2d8:	bfb8      	it	lt
 801a2da:	427f      	neglt	r7, r7
 801a2dc:	fb04 f401 	mul.w	r4, r4, r1
 801a2e0:	fb95 f3f2 	sdiv	r3, r5, r2
 801a2e4:	fb02 5513 	mls	r5, r2, r3, r5
 801a2e8:	bfb8      	it	lt
 801a2ea:	4252      	neglt	r2, r2
 801a2ec:	fb94 f0f2 	sdiv	r0, r4, r2
 801a2f0:	fb02 4410 	mls	r4, r2, r0, r4
 801a2f4:	fb0c 4405 	mla	r4, ip, r5, r4
 801a2f8:	fb94 f1f2 	sdiv	r1, r4, r2
 801a2fc:	4408      	add	r0, r1
 801a2fe:	fb02 4211 	mls	r2, r2, r1, r4
 801a302:	fb0c 0003 	mla	r0, ip, r3, r0
 801a306:	f8c8 2000 	str.w	r2, [r8]
 801a30a:	4378      	muls	r0, r7
 801a30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a310 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801a310:	2000      	movs	r0, #0
 801a312:	4770      	bx	lr

0801a314 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801a314:	2001      	movs	r0, #1
 801a316:	4770      	bx	lr

0801a318 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801a318:	2002      	movs	r0, #2
 801a31a:	4770      	bx	lr

0801a31c <_ZN8touchgfx12GestureEventD1Ev>:
 801a31c:	4770      	bx	lr

0801a31e <_ZN8touchgfx9DragEventD1Ev>:
 801a31e:	4770      	bx	lr

0801a320 <_ZN8touchgfx10ClickEventD1Ev>:
 801a320:	4770      	bx	lr

0801a322 <_ZN8touchgfx10ClickEventD0Ev>:
 801a322:	b510      	push	{r4, lr}
 801a324:	4604      	mov	r4, r0
 801a326:	210c      	movs	r1, #12
 801a328:	f00b fb7e 	bl	8025a28 <_ZdlPvj>
 801a32c:	4620      	mov	r0, r4
 801a32e:	bd10      	pop	{r4, pc}

0801a330 <_ZN8touchgfx9DragEventD0Ev>:
 801a330:	b510      	push	{r4, lr}
 801a332:	4604      	mov	r4, r0
 801a334:	2110      	movs	r1, #16
 801a336:	f00b fb77 	bl	8025a28 <_ZdlPvj>
 801a33a:	4620      	mov	r0, r4
 801a33c:	bd10      	pop	{r4, pc}

0801a33e <_ZN8touchgfx12GestureEventD0Ev>:
 801a33e:	b510      	push	{r4, lr}
 801a340:	4604      	mov	r4, r0
 801a342:	210c      	movs	r1, #12
 801a344:	f00b fb70 	bl	8025a28 <_ZdlPvj>
 801a348:	4620      	mov	r0, r4
 801a34a:	bd10      	pop	{r4, pc}

0801a34c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a34c:	b530      	push	{r4, r5, lr}
 801a34e:	460d      	mov	r5, r1
 801a350:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a352:	b087      	sub	sp, #28
 801a354:	4604      	mov	r4, r0
 801a356:	b301      	cbz	r1, 801a39a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a358:	a801      	add	r0, sp, #4
 801a35a:	f7ff fedc 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a35e:	892a      	ldrh	r2, [r5, #8]
 801a360:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a364:	7928      	ldrb	r0, [r5, #4]
 801a366:	1ad2      	subs	r2, r2, r3
 801a368:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a36a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a36e:	441a      	add	r2, r3
 801a370:	896b      	ldrh	r3, [r5, #10]
 801a372:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a376:	f88d 0010 	strb.w	r0, [sp, #16]
 801a37a:	1b5b      	subs	r3, r3, r5
 801a37c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a37e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a380:	442b      	add	r3, r5
 801a382:	4d07      	ldr	r5, [pc, #28]	; (801a3a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a384:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a388:	a903      	add	r1, sp, #12
 801a38a:	9503      	str	r5, [sp, #12]
 801a38c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a390:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a394:	6803      	ldr	r3, [r0, #0]
 801a396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a398:	4798      	blx	r3
 801a39a:	b007      	add	sp, #28
 801a39c:	bd30      	pop	{r4, r5, pc}
 801a39e:	bf00      	nop
 801a3a0:	0802a80c 	.word	0x0802a80c

0801a3a4 <_ZNK8touchgfx4Rect9intersectEss>:
 801a3a4:	b510      	push	{r4, lr}
 801a3a6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a3aa:	428b      	cmp	r3, r1
 801a3ac:	dc10      	bgt.n	801a3d0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a3ae:	8884      	ldrh	r4, [r0, #4]
 801a3b0:	4423      	add	r3, r4
 801a3b2:	b21b      	sxth	r3, r3
 801a3b4:	4299      	cmp	r1, r3
 801a3b6:	da0b      	bge.n	801a3d0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a3b8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a3bc:	4293      	cmp	r3, r2
 801a3be:	dc07      	bgt.n	801a3d0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a3c0:	88c0      	ldrh	r0, [r0, #6]
 801a3c2:	4418      	add	r0, r3
 801a3c4:	b200      	sxth	r0, r0
 801a3c6:	4282      	cmp	r2, r0
 801a3c8:	bfac      	ite	ge
 801a3ca:	2000      	movge	r0, #0
 801a3cc:	2001      	movlt	r0, #1
 801a3ce:	bd10      	pop	{r4, pc}
 801a3d0:	2000      	movs	r0, #0
 801a3d2:	e7fc      	b.n	801a3ce <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801a3d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3d6:	460c      	mov	r4, r1
 801a3d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a3da:	b089      	sub	sp, #36	; 0x24
 801a3dc:	4605      	mov	r5, r0
 801a3de:	2900      	cmp	r1, #0
 801a3e0:	d054      	beq.n	801a48c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801a3e2:	4668      	mov	r0, sp
 801a3e4:	f7ff fe97 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a3e8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a3ea:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a3ec:	4668      	mov	r0, sp
 801a3ee:	8922      	ldrh	r2, [r4, #8]
 801a3f0:	88e1      	ldrh	r1, [r4, #6]
 801a3f2:	443a      	add	r2, r7
 801a3f4:	4431      	add	r1, r6
 801a3f6:	b212      	sxth	r2, r2
 801a3f8:	b209      	sxth	r1, r1
 801a3fa:	f7ff ffd3 	bl	801a3a4 <_ZNK8touchgfx4Rect9intersectEss>
 801a3fe:	b1d0      	cbz	r0, 801a436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a400:	89a2      	ldrh	r2, [r4, #12]
 801a402:	4668      	mov	r0, sp
 801a404:	8961      	ldrh	r1, [r4, #10]
 801a406:	443a      	add	r2, r7
 801a408:	4431      	add	r1, r6
 801a40a:	b212      	sxth	r2, r2
 801a40c:	b209      	sxth	r1, r1
 801a40e:	f7ff ffc9 	bl	801a3a4 <_ZNK8touchgfx4Rect9intersectEss>
 801a412:	4603      	mov	r3, r0
 801a414:	b978      	cbnz	r0, 801a436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a416:	4a1e      	ldr	r2, [pc, #120]	; (801a490 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a418:	a904      	add	r1, sp, #16
 801a41a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a41c:	9204      	str	r2, [sp, #16]
 801a41e:	2202      	movs	r2, #2
 801a420:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a424:	f88d 2014 	strb.w	r2, [sp, #20]
 801a428:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a42c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a430:	6803      	ldr	r3, [r0, #0]
 801a432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a434:	4798      	blx	r3
 801a436:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a438:	a802      	add	r0, sp, #8
 801a43a:	f7ff fe6c 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a43e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a442:	88e0      	ldrh	r0, [r4, #6]
 801a444:	8961      	ldrh	r1, [r4, #10]
 801a446:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a44a:	1a80      	subs	r0, r0, r2
 801a44c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801a450:	1a89      	subs	r1, r1, r2
 801a452:	8923      	ldrh	r3, [r4, #8]
 801a454:	4460      	add	r0, ip
 801a456:	89a2      	ldrh	r2, [r4, #12]
 801a458:	4461      	add	r1, ip
 801a45a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a45c:	eba3 030e 	sub.w	r3, r3, lr
 801a460:	eba2 020e 	sub.w	r2, r2, lr
 801a464:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a468:	7927      	ldrb	r7, [r4, #4]
 801a46a:	4433      	add	r3, r6
 801a46c:	4432      	add	r2, r6
 801a46e:	4c09      	ldr	r4, [pc, #36]	; (801a494 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a470:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a472:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a476:	a904      	add	r1, sp, #16
 801a478:	9404      	str	r4, [sp, #16]
 801a47a:	f88d 7014 	strb.w	r7, [sp, #20]
 801a47e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a482:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a486:	6803      	ldr	r3, [r0, #0]
 801a488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a48a:	4798      	blx	r3
 801a48c:	b009      	add	sp, #36	; 0x24
 801a48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a490:	0802a7e4 	.word	0x0802a7e4
 801a494:	0802a7f8 	.word	0x0802a7f8

0801a498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a49c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801a4a0:	b0a1      	sub	sp, #132	; 0x84
 801a4a2:	4604      	mov	r4, r0
 801a4a4:	460d      	mov	r5, r1
 801a4a6:	790b      	ldrb	r3, [r1, #4]
 801a4a8:	f1b9 0f00 	cmp.w	r9, #0
 801a4ac:	d00f      	beq.n	801a4ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	f040 80a2 	bne.w	801a5f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a4b4:	b021      	add	sp, #132	; 0x84
 801a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ba:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a4be:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a4c2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a4c6:	1d20      	adds	r0, r4, #4
 801a4c8:	f7fb fbba 	bl	8015c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a4cc:	e094      	b.n	801a5f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d1f0      	bne.n	801a4b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a4d2:	4b5f      	ldr	r3, [pc, #380]	; (801a650 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801a4da:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801a4de:	f1ba 0f03 	cmp.w	sl, #3
 801a4e2:	ddea      	ble.n	801a4ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801a4e4:	f1ba 0f0c 	cmp.w	sl, #12
 801a4e8:	f04f 0303 	mov.w	r3, #3
 801a4ec:	f04f 0600 	mov.w	r6, #0
 801a4f0:	4958      	ldr	r1, [pc, #352]	; (801a654 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801a4f2:	bfd8      	it	le
 801a4f4:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801a4f8:	960a      	str	r6, [sp, #40]	; 0x28
 801a4fa:	bfd8      	it	le
 801a4fc:	fb92 f3f3 	sdivle	r3, r2, r3
 801a500:	9301      	str	r3, [sp, #4]
 801a502:	4b55      	ldr	r3, [pc, #340]	; (801a658 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a504:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a508:	4b54      	ldr	r3, [pc, #336]	; (801a65c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a50a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a50e:	2248      	movs	r2, #72	; 0x48
 801a510:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a514:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a518:	ab0e      	add	r3, sp, #56	; 0x38
 801a51a:	4618      	mov	r0, r3
 801a51c:	f00b fb2e 	bl	8025b7c <memcpy>
 801a520:	f04f 32ff 	mov.w	r2, #4294967295
 801a524:	f8cd a008 	str.w	sl, [sp, #8]
 801a528:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a52c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a530:	46b3      	mov	fp, r6
 801a532:	fb93 f3f2 	sdiv	r3, r3, r2
 801a536:	b29b      	uxth	r3, r3
 801a538:	9303      	str	r3, [sp, #12]
 801a53a:	2300      	movs	r3, #0
 801a53c:	9a03      	ldr	r2, [sp, #12]
 801a53e:	88ef      	ldrh	r7, [r5, #6]
 801a540:	a80a      	add	r0, sp, #40	; 0x28
 801a542:	9309      	str	r3, [sp, #36]	; 0x24
 801a544:	9b07      	ldr	r3, [sp, #28]
 801a546:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a54a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a54e:	fb13 f302 	smulbb	r3, r3, r2
 801a552:	b29b      	uxth	r3, r3
 801a554:	9304      	str	r3, [sp, #16]
 801a556:	9b07      	ldr	r3, [sp, #28]
 801a558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a55c:	685b      	ldr	r3, [r3, #4]
 801a55e:	fb13 f302 	smulbb	r3, r3, r2
 801a562:	b29b      	uxth	r3, r3
 801a564:	9305      	str	r3, [sp, #20]
 801a566:	9b04      	ldr	r3, [sp, #16]
 801a568:	441f      	add	r7, r3
 801a56a:	9b05      	ldr	r3, [sp, #20]
 801a56c:	4498      	add	r8, r3
 801a56e:	b23f      	sxth	r7, r7
 801a570:	fa0f f888 	sxth.w	r8, r8
 801a574:	4639      	mov	r1, r7
 801a576:	4642      	mov	r2, r8
 801a578:	f7ff ff14 	bl	801a3a4 <_ZNK8touchgfx4Rect9intersectEss>
 801a57c:	b380      	cbz	r0, 801a5e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a57e:	4639      	mov	r1, r7
 801a580:	ab09      	add	r3, sp, #36	; 0x24
 801a582:	4642      	mov	r2, r8
 801a584:	1d20      	adds	r0, r4, #4
 801a586:	f7fb fb5b 	bl	8015c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a58a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a58c:	b341      	cbz	r1, 801a5e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a58e:	4549      	cmp	r1, r9
 801a590:	d026      	beq.n	801a5e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a592:	a80c      	add	r0, sp, #48	; 0x30
 801a594:	f7ff fdbf 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a598:	2002      	movs	r0, #2
 801a59a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a59e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a5a2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a5a6:	fb92 f2f0 	sdiv	r2, r2, r0
 801a5aa:	440a      	add	r2, r1
 801a5ac:	1a99      	subs	r1, r3, r2
 801a5ae:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a5b2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a5b6:	fb93 f3f0 	sdiv	r3, r3, r0
 801a5ba:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a5be:	4403      	add	r3, r0
 801a5c0:	1ad3      	subs	r3, r2, r3
 801a5c2:	9a06      	ldr	r2, [sp, #24]
 801a5c4:	435b      	muls	r3, r3
 801a5c6:	fb01 3301 	mla	r3, r1, r1, r3
 801a5ca:	4293      	cmp	r3, r2
 801a5cc:	d208      	bcs.n	801a5e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a5ce:	9a04      	ldr	r2, [sp, #16]
 801a5d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a5d4:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a5d6:	9a05      	ldr	r2, [sp, #20]
 801a5d8:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a5dc:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a5de:	9306      	str	r3, [sp, #24]
 801a5e0:	f10b 0b02 	add.w	fp, fp, #2
 801a5e4:	f1bb 0f08 	cmp.w	fp, #8
 801a5e8:	dda7      	ble.n	801a53a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a5ea:	9b02      	ldr	r3, [sp, #8]
 801a5ec:	3601      	adds	r6, #1
 801a5ee:	4453      	add	r3, sl
 801a5f0:	9302      	str	r3, [sp, #8]
 801a5f2:	9b01      	ldr	r3, [sp, #4]
 801a5f4:	42b3      	cmp	r3, r6
 801a5f6:	d199      	bne.n	801a52c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a5f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a5fa:	2900      	cmp	r1, #0
 801a5fc:	f43f af5a 	beq.w	801a4b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a600:	a80c      	add	r0, sp, #48	; 0x30
 801a602:	2600      	movs	r6, #0
 801a604:	f7ff fd87 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a608:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a60c:	88ea      	ldrh	r2, [r5, #6]
 801a60e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a612:	1ad2      	subs	r2, r2, r3
 801a614:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a616:	7929      	ldrb	r1, [r5, #4]
 801a618:	441a      	add	r2, r3
 801a61a:	892b      	ldrh	r3, [r5, #8]
 801a61c:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a620:	a90e      	add	r1, sp, #56	; 0x38
 801a622:	1a1b      	subs	r3, r3, r0
 801a624:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a626:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a62a:	4403      	add	r3, r0
 801a62c:	480c      	ldr	r0, [pc, #48]	; (801a660 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a62e:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a632:	900e      	str	r0, [sp, #56]	; 0x38
 801a634:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a636:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a63a:	6803      	ldr	r3, [r0, #0]
 801a63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a63e:	4798      	blx	r3
 801a640:	792b      	ldrb	r3, [r5, #4]
 801a642:	2b00      	cmp	r3, #0
 801a644:	f43f af36 	beq.w	801a4b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a648:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a64c:	e732      	b.n	801a4b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a64e:	bf00      	nop
 801a650:	2000b3c8 	.word	0x2000b3c8
 801a654:	080275b4 	.word	0x080275b4
 801a658:	2000b3bc 	.word	0x2000b3bc
 801a65c:	2000b3be 	.word	0x2000b3be
 801a660:	0802a7e4 	.word	0x0802a7e4

0801a664 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a666:	4604      	mov	r4, r0
 801a668:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a66c:	3201      	adds	r2, #1
 801a66e:	d112      	bne.n	801a696 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a670:	2500      	movs	r5, #0
 801a672:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a676:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a67a:	6803      	ldr	r3, [r0, #0]
 801a67c:	9500      	str	r5, [sp, #0]
 801a67e:	466d      	mov	r5, sp
 801a680:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a684:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a688:	4629      	mov	r1, r5
 801a68a:	6a1b      	ldr	r3, [r3, #32]
 801a68c:	4798      	blx	r3
 801a68e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a692:	e884 0003 	stmia.w	r4, {r0, r1}
 801a696:	4620      	mov	r0, r4
 801a698:	b003      	add	sp, #12
 801a69a:	bd30      	pop	{r4, r5, pc}

0801a69c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a69c:	b513      	push	{r0, r1, r4, lr}
 801a69e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	3301      	adds	r3, #1
 801a6a6:	d109      	bne.n	801a6bc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a6a8:	4601      	mov	r1, r0
 801a6aa:	4668      	mov	r0, sp
 801a6ac:	f7ff fd33 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a6b0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a6b4:	8423      	strh	r3, [r4, #32]
 801a6b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a6ba:	8463      	strh	r3, [r4, #34]	; 0x22
 801a6bc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a6c0:	b002      	add	sp, #8
 801a6c2:	bd10      	pop	{r4, pc}

0801a6c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a6c4:	b513      	push	{r0, r1, r4, lr}
 801a6c6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	3301      	adds	r3, #1
 801a6ce:	d109      	bne.n	801a6e4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a6d0:	4601      	mov	r1, r0
 801a6d2:	4668      	mov	r0, sp
 801a6d4:	f7ff fd1f 	bl	801a116 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a6d8:	f8bd 3000 	ldrh.w	r3, [sp]
 801a6dc:	8423      	strh	r3, [r4, #32]
 801a6de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a6e2:	8463      	strh	r3, [r4, #34]	; 0x22
 801a6e4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a6e8:	b002      	add	sp, #8
 801a6ea:	bd10      	pop	{r4, pc}

0801a6ec <_ZN8touchgfx6ScreenC1Ev>:
 801a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ee:	4605      	mov	r5, r0
 801a6f0:	4b17      	ldr	r3, [pc, #92]	; (801a750 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	4917      	ldr	r1, [pc, #92]	; (801a754 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a6f6:	f845 3b04 	str.w	r3, [r5], #4
 801a6fa:	2301      	movs	r3, #1
 801a6fc:	8102      	strh	r2, [r0, #8]
 801a6fe:	4604      	mov	r4, r0
 801a700:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801a704:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a708:	4b13      	ldr	r3, [pc, #76]	; (801a758 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a70a:	8142      	strh	r2, [r0, #10]
 801a70c:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a710:	4b12      	ldr	r3, [pc, #72]	; (801a75c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801a712:	8182      	strh	r2, [r0, #12]
 801a714:	81c2      	strh	r2, [r0, #14]
 801a716:	8202      	strh	r2, [r0, #16]
 801a718:	8242      	strh	r2, [r0, #18]
 801a71a:	8282      	strh	r2, [r0, #20]
 801a71c:	82c2      	strh	r2, [r0, #22]
 801a71e:	6202      	str	r2, [r0, #32]
 801a720:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a724:	6342      	str	r2, [r0, #52]	; 0x34
 801a726:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a72a:	6041      	str	r1, [r0, #4]
 801a72c:	4611      	mov	r1, r2
 801a72e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a732:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801a736:	4628      	mov	r0, r5
 801a738:	f7f1 ffbf 	bl	800c6ba <_ZN8touchgfx8Drawable5setXYEss>
 801a73c:	4639      	mov	r1, r7
 801a73e:	4628      	mov	r0, r5
 801a740:	f7f1 ffd9 	bl	800c6f6 <_ZN8touchgfx8Drawable8setWidthEs>
 801a744:	4628      	mov	r0, r5
 801a746:	4631      	mov	r1, r6
 801a748:	f7f1 ffe4 	bl	800c714 <_ZN8touchgfx8Drawable9setHeightEs>
 801a74c:	4620      	mov	r0, r4
 801a74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a750:	0802a820 	.word	0x0802a820
 801a754:	08029368 	.word	0x08029368
 801a758:	2000b3bc 	.word	0x2000b3bc
 801a75c:	2000b3be 	.word	0x2000b3be

0801a760 <_ZN8touchgfx6Screen4drawEv>:
 801a760:	4b09      	ldr	r3, [pc, #36]	; (801a788 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a762:	b507      	push	{r0, r1, r2, lr}
 801a764:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a768:	2100      	movs	r1, #0
 801a76a:	4b08      	ldr	r3, [pc, #32]	; (801a78c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a76c:	9100      	str	r1, [sp, #0]
 801a76e:	4669      	mov	r1, sp
 801a770:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a774:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a778:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a77c:	6803      	ldr	r3, [r0, #0]
 801a77e:	689b      	ldr	r3, [r3, #8]
 801a780:	4798      	blx	r3
 801a782:	b003      	add	sp, #12
 801a784:	f85d fb04 	ldr.w	pc, [sp], #4
 801a788:	2000b3bc 	.word	0x2000b3bc
 801a78c:	2000b3be 	.word	0x2000b3be

0801a790 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a794:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a798:	b089      	sub	sp, #36	; 0x24
 801a79a:	4680      	mov	r8, r0
 801a79c:	460c      	mov	r4, r1
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	4615      	mov	r5, r2
 801a7a2:	dd0e      	ble.n	801a7c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a7a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	dd0a      	ble.n	801a7c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a7ac:	4628      	mov	r0, r5
 801a7ae:	f7ff ff59 	bl	801a664 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a7b2:	4621      	mov	r1, r4
 801a7b4:	f7fe ff5a 	bl	801966c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a7b8:	69eb      	ldr	r3, [r5, #28]
 801a7ba:	b928      	cbnz	r0, 801a7c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a7bc:	461d      	mov	r5, r3
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d1f4      	bne.n	801a7ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a7c2:	b009      	add	sp, #36	; 0x24
 801a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c8:	ae04      	add	r6, sp, #16
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d051      	beq.n	801a872 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a7ce:	682b      	ldr	r3, [r5, #0]
 801a7d0:	4629      	mov	r1, r5
 801a7d2:	a802      	add	r0, sp, #8
 801a7d4:	68db      	ldr	r3, [r3, #12]
 801a7d6:	4798      	blx	r3
 801a7d8:	4628      	mov	r0, r5
 801a7da:	f7ff ff5f 	bl	801a69c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a7de:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a7e2:	4407      	add	r7, r0
 801a7e4:	4628      	mov	r0, r5
 801a7e6:	f7ff ff6d 	bl	801a6c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a7ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a7ee:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a7f2:	b23f      	sxth	r7, r7
 801a7f4:	4418      	add	r0, r3
 801a7f6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a7fa:	4621      	mov	r1, r4
 801a7fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a800:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a804:	4630      	mov	r0, r6
 801a806:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a80a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a80e:	f7fb fac9 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 801a812:	4628      	mov	r0, r5
 801a814:	f7ff ff26 	bl	801a664 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a818:	ab06      	add	r3, sp, #24
 801a81a:	4602      	mov	r2, r0
 801a81c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a820:	e883 0003 	stmia.w	r3, {r0, r1}
 801a824:	4611      	mov	r1, r2
 801a826:	4618      	mov	r0, r3
 801a828:	f7fb fabc 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 801a82c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a830:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a834:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a838:	4299      	cmp	r1, r3
 801a83a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a83e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a842:	d10b      	bne.n	801a85c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a844:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a848:	4552      	cmp	r2, sl
 801a84a:	d107      	bne.n	801a85c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a84c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a850:	455a      	cmp	r2, fp
 801a852:	d103      	bne.n	801a85c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a854:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a858:	454a      	cmp	r2, r9
 801a85a:	d00a      	beq.n	801a872 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a85c:	f1bb 0f00 	cmp.w	fp, #0
 801a860:	d002      	beq.n	801a868 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801a862:	f1b9 0f00 	cmp.w	r9, #0
 801a866:	d12e      	bne.n	801a8c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 801a868:	69ea      	ldr	r2, [r5, #28]
 801a86a:	4621      	mov	r1, r4
 801a86c:	4640      	mov	r0, r8
 801a86e:	f7ff ff8f 	bl	801a790 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a872:	4628      	mov	r0, r5
 801a874:	f7ff fef6 	bl	801a664 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a878:	6861      	ldr	r1, [r4, #4]
 801a87a:	4602      	mov	r2, r0
 801a87c:	4633      	mov	r3, r6
 801a87e:	6820      	ldr	r0, [r4, #0]
 801a880:	c303      	stmia	r3!, {r0, r1}
 801a882:	4611      	mov	r1, r2
 801a884:	4630      	mov	r0, r6
 801a886:	f7fb fa8d 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 801a88a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	dd97      	ble.n	801a7c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a892:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a896:	2b00      	cmp	r3, #0
 801a898:	dd93      	ble.n	801a7c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a89a:	4628      	mov	r0, r5
 801a89c:	f7ff fefe 	bl	801a69c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a8a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a8a4:	1a18      	subs	r0, r3, r0
 801a8a6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a8aa:	4628      	mov	r0, r5
 801a8ac:	f7ff ff0a 	bl	801a6c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a8b0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a8b4:	4631      	mov	r1, r6
 801a8b6:	1a18      	subs	r0, r3, r0
 801a8b8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a8bc:	4628      	mov	r0, r5
 801a8be:	682b      	ldr	r3, [r5, #0]
 801a8c0:	689b      	ldr	r3, [r3, #8]
 801a8c2:	4798      	blx	r3
 801a8c4:	e77d      	b.n	801a7c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a8c6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a8ca:	fa1f f08a 	uxth.w	r0, sl
 801a8ce:	4552      	cmp	r2, sl
 801a8d0:	9000      	str	r0, [sp, #0]
 801a8d2:	da12      	bge.n	801a8fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801a8d4:	9301      	str	r3, [sp, #4]
 801a8d6:	9b00      	ldr	r3, [sp, #0]
 801a8d8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a8dc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a8e0:	1a9a      	subs	r2, r3, r2
 801a8e2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a8e6:	4631      	mov	r1, r6
 801a8e8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a8ec:	4640      	mov	r0, r8
 801a8ee:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a8f2:	69ea      	ldr	r2, [r5, #28]
 801a8f4:	f7ff ff4c 	bl	801a790 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a8f8:	9b01      	ldr	r3, [sp, #4]
 801a8fa:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a8fe:	b29f      	uxth	r7, r3
 801a900:	429a      	cmp	r2, r3
 801a902:	da0d      	bge.n	801a920 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801a904:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a908:	1aba      	subs	r2, r7, r2
 801a90a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a90e:	4631      	mov	r1, r6
 801a910:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a914:	4640      	mov	r0, r8
 801a916:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a91a:	69ea      	ldr	r2, [r5, #28]
 801a91c:	f7ff ff38 	bl	801a790 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a920:	8822      	ldrh	r2, [r4, #0]
 801a922:	445f      	add	r7, fp
 801a924:	88a3      	ldrh	r3, [r4, #4]
 801a926:	b2bf      	uxth	r7, r7
 801a928:	4413      	add	r3, r2
 801a92a:	b23a      	sxth	r2, r7
 801a92c:	b29b      	uxth	r3, r3
 801a92e:	b219      	sxth	r1, r3
 801a930:	4291      	cmp	r1, r2
 801a932:	dd0d      	ble.n	801a950 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801a934:	1bdb      	subs	r3, r3, r7
 801a936:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a93a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a93e:	4631      	mov	r1, r6
 801a940:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a944:	4640      	mov	r0, r8
 801a946:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a94a:	69ea      	ldr	r2, [r5, #28]
 801a94c:	f7ff ff20 	bl	801a790 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a950:	88e2      	ldrh	r2, [r4, #6]
 801a952:	8863      	ldrh	r3, [r4, #2]
 801a954:	4413      	add	r3, r2
 801a956:	9a00      	ldr	r2, [sp, #0]
 801a958:	444a      	add	r2, r9
 801a95a:	b29b      	uxth	r3, r3
 801a95c:	fa1f f982 	uxth.w	r9, r2
 801a960:	b219      	sxth	r1, r3
 801a962:	fa0f f289 	sxth.w	r2, r9
 801a966:	428a      	cmp	r2, r1
 801a968:	da83      	bge.n	801a872 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a96a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a96e:	eba3 0309 	sub.w	r3, r3, r9
 801a972:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a976:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a97a:	4631      	mov	r1, r6
 801a97c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a980:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a984:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a988:	69ea      	ldr	r2, [r5, #28]
 801a98a:	e76f      	b.n	801a86c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801a98c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a98e:	2300      	movs	r3, #0
 801a990:	aa02      	add	r2, sp, #8
 801a992:	4604      	mov	r4, r0
 801a994:	3004      	adds	r0, #4
 801a996:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a99a:	460d      	mov	r5, r1
 801a99c:	f7fb fada 	bl	8015f54 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a9a0:	9a01      	ldr	r2, [sp, #4]
 801a9a2:	b11a      	cbz	r2, 801a9ac <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a9a4:	4629      	mov	r1, r5
 801a9a6:	4620      	mov	r0, r4
 801a9a8:	f7ff fef2 	bl	801a790 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a9ac:	b003      	add	sp, #12
 801a9ae:	bd30      	pop	{r4, r5, pc}

0801a9b0 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a9b2:	4602      	mov	r2, r0
 801a9b4:	4604      	mov	r4, r0
 801a9b6:	460d      	mov	r5, r1
 801a9b8:	466b      	mov	r3, sp
 801a9ba:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a9be:	6851      	ldr	r1, [r2, #4]
 801a9c0:	c303      	stmia	r3!, {r0, r1}
 801a9c2:	4629      	mov	r1, r5
 801a9c4:	4668      	mov	r0, sp
 801a9c6:	f7fb f9ed 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 801a9ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a9ce:	4669      	mov	r1, sp
 801a9d0:	b123      	cbz	r3, 801a9dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a9d2:	4620      	mov	r0, r4
 801a9d4:	f7ff ffda 	bl	801a98c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a9d8:	b003      	add	sp, #12
 801a9da:	bd30      	pop	{r4, r5, pc}
 801a9dc:	1d20      	adds	r0, r4, #4
 801a9de:	f7fb fa80 	bl	8015ee2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a9e2:	e7f9      	b.n	801a9d8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a9e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a9e4:	460b      	mov	r3, r1
 801a9e6:	680a      	ldr	r2, [r1, #0]
 801a9e8:	1d01      	adds	r1, r0, #4
 801a9ea:	6952      	ldr	r2, [r2, #20]
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	4710      	bx	r2

0801a9f0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a9f0:	b510      	push	{r4, lr}
 801a9f2:	4298      	cmp	r0, r3
 801a9f4:	eb01 0402 	add.w	r4, r1, r2
 801a9f8:	b224      	sxth	r4, r4
 801a9fa:	d22c      	bcs.n	801aa56 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a9fc:	b35b      	cbz	r3, 801aa56 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a9fe:	ee07 0a90 	vmov	s15, r0
 801aa02:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801aa06:	ee07 3a90 	vmov	s15, r3
 801aa0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801aa0e:	ee07 2a90 	vmov	s15, r2
 801aa12:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801aa16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aa1a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801aa1e:	ee07 1a90 	vmov	s15, r1
 801aa22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa26:	ee37 7a66 	vsub.f32	s14, s14, s13
 801aa2a:	ee67 5a07 	vmul.f32	s11, s14, s14
 801aa2e:	eee5 6a87 	vfma.f32	s13, s11, s14
 801aa32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801aa36:	eee6 7a26 	vfma.f32	s15, s12, s13
 801aa3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801aa3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa42:	bfcc      	ite	gt
 801aa44:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801aa48:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801aa4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa50:	ee17 3a90 	vmov	r3, s15
 801aa54:	b21c      	sxth	r4, r3
 801aa56:	4620      	mov	r0, r4
 801aa58:	bd10      	pop	{r4, pc}

0801aa5a <_ZN8touchgfx12TextProviderC1Ev>:
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	2201      	movs	r2, #1
 801aa5e:	b510      	push	{r4, lr}
 801aa60:	4604      	mov	r4, r0
 801aa62:	60c3      	str	r3, [r0, #12]
 801aa64:	7403      	strb	r3, [r0, #16]
 801aa66:	82c3      	strh	r3, [r0, #22]
 801aa68:	8303      	strh	r3, [r0, #24]
 801aa6a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801aa6c:	8603      	strh	r3, [r0, #48]	; 0x30
 801aa6e:	86c3      	strh	r3, [r0, #54]	; 0x36
 801aa70:	8703      	strh	r3, [r0, #56]	; 0x38
 801aa72:	63c3      	str	r3, [r0, #60]	; 0x3c
 801aa74:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801aa78:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801aa7c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801aa80:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801aa84:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801aa88:	e9c0 3300 	strd	r3, r3, [r0]
 801aa8c:	f7f7 ffde 	bl	8012a4c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801aa90:	4620      	mov	r0, r4
 801aa92:	bd10      	pop	{r4, pc}

0801aa94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801aa94:	b530      	push	{r4, r5, lr}
 801aa96:	2500      	movs	r5, #0
 801aa98:	2401      	movs	r4, #1
 801aa9a:	6843      	ldr	r3, [r0, #4]
 801aa9c:	b913      	cbnz	r3, 801aaa4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801aa9e:	6803      	ldr	r3, [r0, #0]
 801aaa0:	b1f3      	cbz	r3, 801aae0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801aaa2:	6043      	str	r3, [r0, #4]
 801aaa4:	7c03      	ldrb	r3, [r0, #16]
 801aaa6:	b143      	cbz	r3, 801aaba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801aaa8:	68c3      	ldr	r3, [r0, #12]
 801aaaa:	b12b      	cbz	r3, 801aab8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801aaac:	881a      	ldrh	r2, [r3, #0]
 801aaae:	b11a      	cbz	r2, 801aab8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801aab0:	1c9a      	adds	r2, r3, #2
 801aab2:	60c2      	str	r2, [r0, #12]
 801aab4:	8818      	ldrh	r0, [r3, #0]
 801aab6:	bd30      	pop	{r4, r5, pc}
 801aab8:	7405      	strb	r5, [r0, #16]
 801aaba:	6843      	ldr	r3, [r0, #4]
 801aabc:	8819      	ldrh	r1, [r3, #0]
 801aabe:	b179      	cbz	r1, 801aae0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801aac0:	1c9a      	adds	r2, r3, #2
 801aac2:	2902      	cmp	r1, #2
 801aac4:	6042      	str	r2, [r0, #4]
 801aac6:	d1f5      	bne.n	801aab4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801aac8:	6883      	ldr	r3, [r0, #8]
 801aaca:	1d1a      	adds	r2, r3, #4
 801aacc:	6082      	str	r2, [r0, #8]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	60c3      	str	r3, [r0, #12]
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d0e1      	beq.n	801aa9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801aad6:	881b      	ldrh	r3, [r3, #0]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d0de      	beq.n	801aa9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801aadc:	7404      	strb	r4, [r0, #16]
 801aade:	e7dc      	b.n	801aa9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801aae0:	2000      	movs	r0, #0
 801aae2:	e7e8      	b.n	801aab6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801aae4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801aae4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801aae6:	2300      	movs	r3, #0
 801aae8:	6082      	str	r2, [r0, #8]
 801aaea:	6001      	str	r1, [r0, #0]
 801aaec:	6043      	str	r3, [r0, #4]
 801aaee:	60c3      	str	r3, [r0, #12]
 801aaf0:	7403      	strb	r3, [r0, #16]
 801aaf2:	8603      	strh	r3, [r0, #48]	; 0x30
 801aaf4:	8303      	strh	r3, [r0, #24]
 801aaf6:	8703      	strh	r3, [r0, #56]	; 0x38
 801aaf8:	b410      	push	{r4}
 801aafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aafe:	f7f7 bfa5 	b.w	8012a4c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ab02 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ab02:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab04:	4605      	mov	r5, r0
 801ab06:	4608      	mov	r0, r1
 801ab08:	b1f1      	cbz	r1, 801ab48 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ab0a:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801ab0e:	460b      	mov	r3, r1
 801ab10:	f101 0708 	add.w	r7, r1, #8
 801ab14:	4622      	mov	r2, r4
 801ab16:	6818      	ldr	r0, [r3, #0]
 801ab18:	3308      	adds	r3, #8
 801ab1a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ab1e:	4626      	mov	r6, r4
 801ab20:	42bb      	cmp	r3, r7
 801ab22:	c603      	stmia	r6!, {r0, r1}
 801ab24:	4634      	mov	r4, r6
 801ab26:	d1f6      	bne.n	801ab16 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ab28:	6818      	ldr	r0, [r3, #0]
 801ab2a:	6030      	str	r0, [r6, #0]
 801ab2c:	4610      	mov	r0, r2
 801ab2e:	889b      	ldrh	r3, [r3, #4]
 801ab30:	80b3      	strh	r3, [r6, #4]
 801ab32:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801ab36:	015b      	lsls	r3, r3, #5
 801ab38:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ab3c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801ab40:	430b      	orrs	r3, r1
 801ab42:	425b      	negs	r3, r3
 801ab44:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801ab48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ab4a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ab4a:	b538      	push	{r3, r4, r5, lr}
 801ab4c:	460c      	mov	r4, r1
 801ab4e:	6811      	ldr	r1, [r2, #0]
 801ab50:	4610      	mov	r0, r2
 801ab52:	68cd      	ldr	r5, [r1, #12]
 801ab54:	4619      	mov	r1, r3
 801ab56:	47a8      	blx	r5
 801ab58:	2800      	cmp	r0, #0
 801ab5a:	bf08      	it	eq
 801ab5c:	4620      	moveq	r0, r4
 801ab5e:	bd38      	pop	{r3, r4, r5, pc}

0801ab60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab62:	4604      	mov	r4, r0
 801ab64:	4615      	mov	r5, r2
 801ab66:	4608      	mov	r0, r1
 801ab68:	b93a      	cbnz	r2, 801ab7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ab6a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801ab6e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801ab72:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801ab76:	4628      	mov	r0, r5
 801ab78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab7a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ab7e:	8893      	ldrh	r3, [r2, #4]
 801ab80:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ab84:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ab88:	79ee      	ldrb	r6, [r5, #7]
 801ab8a:	4316      	orrs	r6, r2
 801ab8c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801ab90:	189a      	adds	r2, r3, r2
 801ab92:	b2b7      	uxth	r7, r6
 801ab94:	b291      	uxth	r1, r2
 801ab96:	291d      	cmp	r1, #29
 801ab98:	f200 8084 	bhi.w	801aca4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801ab9c:	2201      	movs	r2, #1
 801ab9e:	10f6      	asrs	r6, r6, #3
 801aba0:	408a      	lsls	r2, r1
 801aba2:	4978      	ldr	r1, [pc, #480]	; (801ad84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801aba4:	420a      	tst	r2, r1
 801aba6:	d12e      	bne.n	801ac06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801aba8:	f412 7f60 	tst.w	r2, #896	; 0x380
 801abac:	d07a      	beq.n	801aca4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801abae:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801abb2:	462b      	mov	r3, r5
 801abb4:	f105 0e08 	add.w	lr, r5, #8
 801abb8:	4615      	mov	r5, r2
 801abba:	6818      	ldr	r0, [r3, #0]
 801abbc:	3308      	adds	r3, #8
 801abbe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801abc2:	4694      	mov	ip, r2
 801abc4:	4573      	cmp	r3, lr
 801abc6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801abca:	4662      	mov	r2, ip
 801abcc:	d1f5      	bne.n	801abba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801abce:	6818      	ldr	r0, [r3, #0]
 801abd0:	f8cc 0000 	str.w	r0, [ip]
 801abd4:	889b      	ldrh	r3, [r3, #4]
 801abd6:	f8ac 3004 	strh.w	r3, [ip, #4]
 801abda:	b2b3      	uxth	r3, r6
 801abdc:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801abe0:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801abe4:	1aca      	subs	r2, r1, r3
 801abe6:	1bcf      	subs	r7, r1, r7
 801abe8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801abec:	b292      	uxth	r2, r2
 801abee:	1afb      	subs	r3, r7, r3
 801abf0:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801abf4:	10d2      	asrs	r2, r2, #3
 801abf6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801abfa:	4302      	orrs	r2, r0
 801abfc:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801ac00:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801ac04:	e7b7      	b.n	801ab76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ac06:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ac08:	b92b      	cbnz	r3, 801ac16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801ac0a:	4b5f      	ldr	r3, [pc, #380]	; (801ad88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801ac0c:	21c0      	movs	r1, #192	; 0xc0
 801ac0e:	4a5f      	ldr	r2, [pc, #380]	; (801ad8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801ac10:	485f      	ldr	r0, [pc, #380]	; (801ad90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801ac12:	f00a ff35 	bl	8025a80 <__assert_func>
 801ac16:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801ac18:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ac1c:	8b59      	ldrh	r1, [r3, #26]
 801ac1e:	f640 6333 	movw	r3, #3635	; 0xe33
 801ac22:	4299      	cmp	r1, r3
 801ac24:	d110      	bne.n	801ac48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801ac26:	6803      	ldr	r3, [r0, #0]
 801ac28:	68db      	ldr	r3, [r3, #12]
 801ac2a:	4798      	blx	r3
 801ac2c:	7b41      	ldrb	r1, [r0, #13]
 801ac2e:	00cb      	lsls	r3, r1, #3
 801ac30:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ac34:	7a03      	ldrb	r3, [r0, #8]
 801ac36:	0648      	lsls	r0, r1, #25
 801ac38:	ea43 0302 	orr.w	r3, r3, r2
 801ac3c:	bf44      	itt	mi
 801ac3e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac42:	b21b      	sxthmi	r3, r3
 801ac44:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ac48:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801ac4c:	462a      	mov	r2, r5
 801ac4e:	f105 0c08 	add.w	ip, r5, #8
 801ac52:	443b      	add	r3, r7
 801ac54:	4433      	add	r3, r6
 801ac56:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801ac5a:	b29b      	uxth	r3, r3
 801ac5c:	4635      	mov	r5, r6
 801ac5e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ac62:	6810      	ldr	r0, [r2, #0]
 801ac64:	3208      	adds	r2, #8
 801ac66:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801ac6a:	4637      	mov	r7, r6
 801ac6c:	4562      	cmp	r2, ip
 801ac6e:	c703      	stmia	r7!, {r0, r1}
 801ac70:	463e      	mov	r6, r7
 801ac72:	d1f6      	bne.n	801ac62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801ac74:	6810      	ldr	r0, [r2, #0]
 801ac76:	6038      	str	r0, [r7, #0]
 801ac78:	8892      	ldrh	r2, [r2, #4]
 801ac7a:	80ba      	strh	r2, [r7, #4]
 801ac7c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801ac80:	10db      	asrs	r3, r3, #3
 801ac82:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801ac86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ac8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ac8e:	4313      	orrs	r3, r2
 801ac90:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801ac94:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801ac98:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801ac9c:	1a9b      	subs	r3, r3, r2
 801ac9e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801aca2:	e768      	b.n	801ab76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801aca4:	f023 0204 	bic.w	r2, r3, #4
 801aca8:	f640 611b 	movw	r1, #3611	; 0xe1b
 801acac:	428a      	cmp	r2, r1
 801acae:	d003      	beq.n	801acb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801acb0:	f640 621d 	movw	r2, #3613	; 0xe1d
 801acb4:	4293      	cmp	r3, r2
 801acb6:	d120      	bne.n	801acfa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801acb8:	3b01      	subs	r3, #1
 801acba:	4602      	mov	r2, r0
 801acbc:	4629      	mov	r1, r5
 801acbe:	4620      	mov	r0, r4
 801acc0:	b29b      	uxth	r3, r3
 801acc2:	f7ff ff42 	bl	801ab4a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801acc6:	7b41      	ldrb	r1, [r0, #13]
 801acc8:	00cb      	lsls	r3, r1, #3
 801acca:	0649      	lsls	r1, r1, #25
 801accc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801acd0:	7a03      	ldrb	r3, [r0, #8]
 801acd2:	ea43 0302 	orr.w	r3, r3, r2
 801acd6:	bf44      	itt	mi
 801acd8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801acdc:	b21b      	sxthmi	r3, r3
 801acde:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ace2:	7b6b      	ldrb	r3, [r5, #13]
 801ace4:	7aaa      	ldrb	r2, [r5, #10]
 801ace6:	005b      	lsls	r3, r3, #1
 801ace8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801acec:	4313      	orrs	r3, r2
 801acee:	115a      	asrs	r2, r3, #5
 801acf0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801acf4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801acf8:	e035      	b.n	801ad66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801acfa:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801acfe:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801ad02:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801ad06:	7a2a      	ldrb	r2, [r5, #8]
 801ad08:	ea42 0201 	orr.w	r2, r2, r1
 801ad0c:	f640 6109 	movw	r1, #3593	; 0xe09
 801ad10:	bf1c      	itt	ne
 801ad12:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801ad16:	b212      	sxthne	r2, r2
 801ad18:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801ad1c:	f023 0210 	bic.w	r2, r3, #16
 801ad20:	428a      	cmp	r2, r1
 801ad22:	d003      	beq.n	801ad2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801ad24:	f640 6213 	movw	r2, #3603	; 0xe13
 801ad28:	4293      	cmp	r3, r2
 801ad2a:	d129      	bne.n	801ad80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801ad2c:	7b6e      	ldrb	r6, [r5, #13]
 801ad2e:	4629      	mov	r1, r5
 801ad30:	0076      	lsls	r6, r6, #1
 801ad32:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ad36:	7aae      	ldrb	r6, [r5, #10]
 801ad38:	4316      	orrs	r6, r2
 801ad3a:	f640 6213 	movw	r2, #3603	; 0xe13
 801ad3e:	4293      	cmp	r3, r2
 801ad40:	4602      	mov	r2, r0
 801ad42:	4620      	mov	r0, r4
 801ad44:	bf16      	itet	ne
 801ad46:	f103 33ff 	addne.w	r3, r3, #4294967295
 801ad4a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801ad4e:	b29b      	uxthne	r3, r3
 801ad50:	f7ff fefb 	bl	801ab4a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ad54:	7b43      	ldrb	r3, [r0, #13]
 801ad56:	7a82      	ldrb	r2, [r0, #10]
 801ad58:	005b      	lsls	r3, r3, #1
 801ad5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ad5e:	4313      	orrs	r3, r2
 801ad60:	1af6      	subs	r6, r6, r3
 801ad62:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801ad66:	7b69      	ldrb	r1, [r5, #13]
 801ad68:	00cb      	lsls	r3, r1, #3
 801ad6a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ad6e:	7a2b      	ldrb	r3, [r5, #8]
 801ad70:	4313      	orrs	r3, r2
 801ad72:	064a      	lsls	r2, r1, #25
 801ad74:	bf44      	itt	mi
 801ad76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ad7a:	b21b      	sxthmi	r3, r3
 801ad7c:	1bdb      	subs	r3, r3, r7
 801ad7e:	e73f      	b.n	801ac00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801ad80:	2300      	movs	r3, #0
 801ad82:	e7b7      	b.n	801acf4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801ad84:	3fc00079 	.word	0x3fc00079
 801ad88:	0802a84c 	.word	0x0802a84c
 801ad8c:	0802aabe 	.word	0x0802aabe
 801ad90:	0802a855 	.word	0x0802a855

0801ad94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ad94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad98:	4604      	mov	r4, r0
 801ad9a:	b942      	cbnz	r2, 801adae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ad9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ada0:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801ada4:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801ada8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801adac:	e046      	b.n	801ae3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801adae:	7b51      	ldrb	r1, [r2, #13]
 801adb0:	8893      	ldrh	r3, [r2, #4]
 801adb2:	010f      	lsls	r7, r1, #4
 801adb4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801adb8:	79d7      	ldrb	r7, [r2, #7]
 801adba:	4307      	orrs	r7, r0
 801adbc:	2f04      	cmp	r7, #4
 801adbe:	b2bd      	uxth	r5, r7
 801adc0:	bfcc      	ite	gt
 801adc2:	08bf      	lsrgt	r7, r7, #2
 801adc4:	2701      	movle	r7, #1
 801adc6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801adca:	f200 80ab 	bhi.w	801af24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801adce:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801add2:	4283      	cmp	r3, r0
 801add4:	d216      	bcs.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801add6:	f240 605b 	movw	r0, #1627	; 0x65b
 801adda:	4283      	cmp	r3, r0
 801addc:	d859      	bhi.n	801ae92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801adde:	f240 6057 	movw	r0, #1623	; 0x657
 801ade2:	4283      	cmp	r3, r0
 801ade4:	d20e      	bcs.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ade6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801adea:	d24a      	bcs.n	801ae82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801adec:	f240 604e 	movw	r0, #1614	; 0x64e
 801adf0:	4283      	cmp	r3, r0
 801adf2:	d207      	bcs.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801adf4:	f240 601a 	movw	r0, #1562	; 0x61a
 801adf8:	4283      	cmp	r3, r0
 801adfa:	d02a      	beq.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801adfc:	d821      	bhi.n	801ae42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801adfe:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ae02:	d35b      	bcc.n	801aebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ae04:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801ae08:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ae0c:	f040 80d0 	bne.w	801afb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801ae10:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801ae14:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ae18:	f040 80ca 	bne.w	801afb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801ae1c:	00cb      	lsls	r3, r1, #3
 801ae1e:	0649      	lsls	r1, r1, #25
 801ae20:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ae24:	7a13      	ldrb	r3, [r2, #8]
 801ae26:	ea43 0300 	orr.w	r3, r3, r0
 801ae2a:	bf44      	itt	mi
 801ae2c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ae30:	b21b      	sxthmi	r3, r3
 801ae32:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ae36:	1b5d      	subs	r5, r3, r5
 801ae38:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801ae3c:	4610      	mov	r0, r2
 801ae3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae42:	f240 604b 	movw	r0, #1611	; 0x64b
 801ae46:	4283      	cmp	r3, r0
 801ae48:	d338      	bcc.n	801aebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ae4a:	f240 604c 	movw	r0, #1612	; 0x64c
 801ae4e:	4283      	cmp	r3, r0
 801ae50:	d9d8      	bls.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ae52:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801ae56:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801ae5a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ae5e:	f040 80f2 	bne.w	801b046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801ae62:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ae66:	f040 80ee 	bne.w	801b046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801ae6a:	00cb      	lsls	r3, r1, #3
 801ae6c:	064e      	lsls	r6, r1, #25
 801ae6e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ae72:	7a13      	ldrb	r3, [r2, #8]
 801ae74:	ea43 0300 	orr.w	r3, r3, r0
 801ae78:	bf44      	itt	mi
 801ae7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ae7e:	b21b      	sxthmi	r3, r3
 801ae80:	e7d9      	b.n	801ae36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801ae82:	f240 6054 	movw	r0, #1620	; 0x654
 801ae86:	4283      	cmp	r3, r0
 801ae88:	d8e3      	bhi.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ae8a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ae8e:	d9e0      	bls.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ae90:	e7b8      	b.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ae92:	f240 6074 	movw	r0, #1652	; 0x674
 801ae96:	4283      	cmp	r3, r0
 801ae98:	d0b4      	beq.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ae9a:	d82d      	bhi.n	801aef8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801ae9c:	f240 605e 	movw	r0, #1630	; 0x65e
 801aea0:	4283      	cmp	r3, r0
 801aea2:	d804      	bhi.n	801aeae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801aea4:	f240 605d 	movw	r0, #1629	; 0x65d
 801aea8:	4283      	cmp	r3, r0
 801aeaa:	d3d2      	bcc.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aeac:	e7aa      	b.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aeae:	f240 605f 	movw	r0, #1631	; 0x65f
 801aeb2:	4283      	cmp	r3, r0
 801aeb4:	d0cd      	beq.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aeb6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801aeba:	d0a3      	beq.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aebc:	00cb      	lsls	r3, r1, #3
 801aebe:	0649      	lsls	r1, r1, #25
 801aec0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aec4:	7a13      	ldrb	r3, [r2, #8]
 801aec6:	ea43 0300 	orr.w	r3, r3, r0
 801aeca:	bf44      	itt	mi
 801aecc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aed0:	b21b      	sxthmi	r3, r3
 801aed2:	1b5d      	subs	r5, r3, r5
 801aed4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801aed8:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801aedc:	7b53      	ldrb	r3, [r2, #13]
 801aede:	015b      	lsls	r3, r3, #5
 801aee0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801aee4:	7993      	ldrb	r3, [r2, #6]
 801aee6:	430b      	orrs	r3, r1
 801aee8:	2105      	movs	r1, #5
 801aeea:	005b      	lsls	r3, r3, #1
 801aeec:	fb93 f3f1 	sdiv	r3, r3, r1
 801aef0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801aef4:	440b      	add	r3, r1
 801aef6:	e757      	b.n	801ada8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801aef8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801aefc:	4283      	cmp	r3, r0
 801aefe:	d809      	bhi.n	801af14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801af00:	f240 60df 	movw	r0, #1759	; 0x6df
 801af04:	4283      	cmp	r3, r0
 801af06:	f4bf af7d 	bcs.w	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801af0a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801af0e:	2b05      	cmp	r3, #5
 801af10:	d8d4      	bhi.n	801aebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801af12:	e777      	b.n	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801af14:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801af18:	4283      	cmp	r3, r0
 801af1a:	d09a      	beq.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801af1c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801af20:	4283      	cmp	r3, r0
 801af22:	e7ca      	b.n	801aeba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801af24:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801af28:	d22b      	bcs.n	801af82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801af2a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801af2e:	4283      	cmp	r3, r0
 801af30:	d28f      	bcs.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801af32:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801af36:	4283      	cmp	r3, r0
 801af38:	d816      	bhi.n	801af68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801af3a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801af3e:	4283      	cmp	r3, r0
 801af40:	f4bf af60 	bcs.w	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801af44:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801af48:	4283      	cmp	r3, r0
 801af4a:	d80a      	bhi.n	801af62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801af4c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801af50:	4283      	cmp	r3, r0
 801af52:	f4bf af57 	bcs.w	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801af56:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801af5a:	4283      	cmp	r3, r0
 801af5c:	f43f af79 	beq.w	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801af60:	e7ac      	b.n	801aebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801af62:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801af66:	e7f8      	b.n	801af5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801af68:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801af6c:	4283      	cmp	r3, r0
 801af6e:	d802      	bhi.n	801af76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801af70:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801af74:	e798      	b.n	801aea8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801af76:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801af7a:	4283      	cmp	r3, r0
 801af7c:	f47f af42 	bne.w	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801af80:	e767      	b.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801af82:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801af86:	4283      	cmp	r3, r0
 801af88:	f43f af63 	beq.w	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801af8c:	d802      	bhi.n	801af94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801af8e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801af92:	e7f2      	b.n	801af7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801af94:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801af98:	4283      	cmp	r3, r0
 801af9a:	d805      	bhi.n	801afa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801af9c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801afa0:	4283      	cmp	r3, r0
 801afa2:	f4ff af2f 	bcc.w	801ae04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801afa6:	e754      	b.n	801ae52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801afa8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801afac:	4283      	cmp	r3, r0
 801afae:	e7af      	b.n	801af10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801afb0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801afb4:	4617      	mov	r7, r2
 801afb6:	f102 0808 	add.w	r8, r2, #8
 801afba:	4666      	mov	r6, ip
 801afbc:	6838      	ldr	r0, [r7, #0]
 801afbe:	3708      	adds	r7, #8
 801afc0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801afc4:	46e6      	mov	lr, ip
 801afc6:	4547      	cmp	r7, r8
 801afc8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801afcc:	46f4      	mov	ip, lr
 801afce:	d1f5      	bne.n	801afbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801afd0:	6838      	ldr	r0, [r7, #0]
 801afd2:	f8ce 0000 	str.w	r0, [lr]
 801afd6:	88b9      	ldrh	r1, [r7, #4]
 801afd8:	f8ae 1004 	strh.w	r1, [lr, #4]
 801afdc:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801afe0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801afe4:	d009      	beq.n	801affa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801afe6:	7b51      	ldrb	r1, [r2, #13]
 801afe8:	7992      	ldrb	r2, [r2, #6]
 801afea:	0149      	lsls	r1, r1, #5
 801afec:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801aff0:	4311      	orrs	r1, r2
 801aff2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801aff6:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801affa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801affe:	d00d      	beq.n	801b01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801b000:	442b      	add	r3, r5
 801b002:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801b006:	b29b      	uxth	r3, r3
 801b008:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b00c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801b010:	10db      	asrs	r3, r3, #3
 801b012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b016:	4313      	orrs	r3, r2
 801b018:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801b01c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801b020:	00cb      	lsls	r3, r1, #3
 801b022:	064f      	lsls	r7, r1, #25
 801b024:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b028:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801b02c:	ea43 0302 	orr.w	r3, r3, r2
 801b030:	bf44      	itt	mi
 801b032:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b036:	b21b      	sxthmi	r3, r3
 801b038:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801b03c:	1b5d      	subs	r5, r3, r5
 801b03e:	4632      	mov	r2, r6
 801b040:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801b044:	e6fa      	b.n	801ae3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801b046:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801b04a:	4694      	mov	ip, r2
 801b04c:	f102 0908 	add.w	r9, r2, #8
 801b050:	4676      	mov	r6, lr
 801b052:	f8dc 0000 	ldr.w	r0, [ip]
 801b056:	f10c 0c08 	add.w	ip, ip, #8
 801b05a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801b05e:	46f0      	mov	r8, lr
 801b060:	45cc      	cmp	ip, r9
 801b062:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b066:	46c6      	mov	lr, r8
 801b068:	d1f3      	bne.n	801b052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801b06a:	f8dc 0000 	ldr.w	r0, [ip]
 801b06e:	f8c8 0000 	str.w	r0, [r8]
 801b072:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801b076:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b07a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801b07e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b082:	d009      	beq.n	801b098 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801b084:	7b51      	ldrb	r1, [r2, #13]
 801b086:	7992      	ldrb	r2, [r2, #6]
 801b088:	0149      	lsls	r1, r1, #5
 801b08a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b08e:	4311      	orrs	r1, r2
 801b090:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b094:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801b098:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b09c:	d00d      	beq.n	801b0ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801b09e:	1bdb      	subs	r3, r3, r7
 801b0a0:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801b0a4:	b29b      	uxth	r3, r3
 801b0a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b0aa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801b0ae:	10db      	asrs	r3, r3, #3
 801b0b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b0b4:	4313      	orrs	r3, r2
 801b0b6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801b0ba:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801b0be:	00cb      	lsls	r3, r1, #3
 801b0c0:	0648      	lsls	r0, r1, #25
 801b0c2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b0c6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801b0ca:	ea43 0302 	orr.w	r3, r3, r2
 801b0ce:	bf44      	itt	mi
 801b0d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b0d4:	b21b      	sxthmi	r3, r3
 801b0d6:	e7b1      	b.n	801b03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801b0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0dc:	461d      	mov	r5, r3
 801b0de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	4617      	mov	r7, r2
 801b0e4:	b92b      	cbnz	r3, 801b0f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801b0e6:	4b23      	ldr	r3, [pc, #140]	; (801b174 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 801b0e8:	21c0      	movs	r1, #192	; 0xc0
 801b0ea:	4a23      	ldr	r2, [pc, #140]	; (801b178 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 801b0ec:	4823      	ldr	r0, [pc, #140]	; (801b17c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801b0ee:	f00a fcc7 	bl	8025a80 <__assert_func>
 801b0f2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b0f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b0f8:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b0fc:	f7f7 fc02 	bl	8012904 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b100:	683b      	ldr	r3, [r7, #0]
 801b102:	4601      	mov	r1, r0
 801b104:	4606      	mov	r6, r0
 801b106:	4638      	mov	r0, r7
 801b108:	68db      	ldr	r3, [r3, #12]
 801b10a:	4798      	blx	r3
 801b10c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b110:	4602      	mov	r2, r0
 801b112:	6028      	str	r0, [r5, #0]
 801b114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b118:	d215      	bcs.n	801b146 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801b11a:	4643      	mov	r3, r8
 801b11c:	4639      	mov	r1, r7
 801b11e:	4620      	mov	r0, r4
 801b120:	f7ff fe38 	bl	801ad94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b124:	6028      	str	r0, [r5, #0]
 801b126:	682b      	ldr	r3, [r5, #0]
 801b128:	b143      	cbz	r3, 801b13c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801b12a:	7b5a      	ldrb	r2, [r3, #13]
 801b12c:	7a9b      	ldrb	r3, [r3, #10]
 801b12e:	0052      	lsls	r2, r2, #1
 801b130:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b134:	4313      	orrs	r3, r2
 801b136:	bf0c      	ite	eq
 801b138:	2301      	moveq	r3, #1
 801b13a:	2300      	movne	r3, #0
 801b13c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801b140:	4630      	mov	r0, r6
 801b142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b146:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801b14a:	b29b      	uxth	r3, r3
 801b14c:	2b7f      	cmp	r3, #127	; 0x7f
 801b14e:	d804      	bhi.n	801b15a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801b150:	4639      	mov	r1, r7
 801b152:	4620      	mov	r0, r4
 801b154:	f7ff fd04 	bl	801ab60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b158:	e7e4      	b.n	801b124 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801b15a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d0e1      	beq.n	801b126 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801b162:	f640 1302 	movw	r3, #2306	; 0x902
 801b166:	429e      	cmp	r6, r3
 801b168:	d1dd      	bne.n	801b126 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801b16a:	4601      	mov	r1, r0
 801b16c:	4620      	mov	r0, r4
 801b16e:	f7ff fcc8 	bl	801ab02 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b172:	e7d7      	b.n	801b124 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801b174:	0802a84c 	.word	0x0802a84c
 801b178:	0802aabe 	.word	0x0802aabe
 801b17c:	0802a855 	.word	0x0802a855

0801b180 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b184:	461d      	mov	r5, r3
 801b186:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b188:	4604      	mov	r4, r0
 801b18a:	4617      	mov	r7, r2
 801b18c:	b92b      	cbnz	r3, 801b19a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801b18e:	4b25      	ldr	r3, [pc, #148]	; (801b224 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 801b190:	21c0      	movs	r1, #192	; 0xc0
 801b192:	4a25      	ldr	r2, [pc, #148]	; (801b228 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801b194:	4825      	ldr	r0, [pc, #148]	; (801b22c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801b196:	f00a fc73 	bl	8025a80 <__assert_func>
 801b19a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b19c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b1a0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b1a4:	f7f7 fbae 	bl	8012904 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b1a8:	683b      	ldr	r3, [r7, #0]
 801b1aa:	4601      	mov	r1, r0
 801b1ac:	4606      	mov	r6, r0
 801b1ae:	4638      	mov	r0, r7
 801b1b0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801b1b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b1b8:	47c8      	blx	r9
 801b1ba:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b1be:	4602      	mov	r2, r0
 801b1c0:	6028      	str	r0, [r5, #0]
 801b1c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b1c6:	d215      	bcs.n	801b1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801b1c8:	4643      	mov	r3, r8
 801b1ca:	4639      	mov	r1, r7
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	f7ff fde1 	bl	801ad94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b1d2:	6028      	str	r0, [r5, #0]
 801b1d4:	682b      	ldr	r3, [r5, #0]
 801b1d6:	b143      	cbz	r3, 801b1ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801b1d8:	7b5a      	ldrb	r2, [r3, #13]
 801b1da:	7a9b      	ldrb	r3, [r3, #10]
 801b1dc:	0052      	lsls	r2, r2, #1
 801b1de:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b1e2:	4313      	orrs	r3, r2
 801b1e4:	bf0c      	ite	eq
 801b1e6:	2301      	moveq	r3, #1
 801b1e8:	2300      	movne	r3, #0
 801b1ea:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801b1ee:	4630      	mov	r0, r6
 801b1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1f4:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801b1f8:	b29b      	uxth	r3, r3
 801b1fa:	2b7f      	cmp	r3, #127	; 0x7f
 801b1fc:	d804      	bhi.n	801b208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801b1fe:	4639      	mov	r1, r7
 801b200:	4620      	mov	r0, r4
 801b202:	f7ff fcad 	bl	801ab60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b206:	e7e4      	b.n	801b1d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801b208:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d0e1      	beq.n	801b1d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801b210:	f640 1302 	movw	r3, #2306	; 0x902
 801b214:	429e      	cmp	r6, r3
 801b216:	d1dd      	bne.n	801b1d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801b218:	4601      	mov	r1, r0
 801b21a:	4620      	mov	r0, r4
 801b21c:	f7ff fc71 	bl	801ab02 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b220:	e7d7      	b.n	801b1d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801b222:	bf00      	nop
 801b224:	0802a84c 	.word	0x0802a84c
 801b228:	0802aabe 	.word	0x0802aabe
 801b22c:	0802a855 	.word	0x0802a855

0801b230 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b230:	b510      	push	{r4, lr}
 801b232:	4604      	mov	r4, r0
 801b234:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801b236:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b238:	b9d9      	cbnz	r1, 801b272 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801b23a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b23c:	2b0a      	cmp	r3, #10
 801b23e:	d036      	beq.n	801b2ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b240:	4620      	mov	r0, r4
 801b242:	f7ff fc27 	bl	801aa94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b246:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b248:	2b09      	cmp	r3, #9
 801b24a:	d906      	bls.n	801b25a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801b24c:	4b18      	ldr	r3, [pc, #96]	; (801b2b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801b24e:	f44f 7182 	mov.w	r1, #260	; 0x104
 801b252:	4a18      	ldr	r2, [pc, #96]	; (801b2b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801b254:	4818      	ldr	r0, [pc, #96]	; (801b2b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801b256:	f00a fc13 	bl	8025a80 <__assert_func>
 801b25a:	1c5a      	adds	r2, r3, #1
 801b25c:	8622      	strh	r2, [r4, #48]	; 0x30
 801b25e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b260:	4413      	add	r3, r2
 801b262:	b29b      	uxth	r3, r3
 801b264:	2b09      	cmp	r3, #9
 801b266:	bf88      	it	hi
 801b268:	3b0a      	subhi	r3, #10
 801b26a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b26e:	8358      	strh	r0, [r3, #26]
 801b270:	e7e3      	b.n	801b23a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801b272:	2b0a      	cmp	r3, #10
 801b274:	d01b      	beq.n	801b2ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b276:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b278:	3901      	subs	r1, #1
 801b27a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b27e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801b280:	8721      	strh	r1, [r4, #56]	; 0x38
 801b282:	1c51      	adds	r1, r2, #1
 801b284:	b289      	uxth	r1, r1
 801b286:	2901      	cmp	r1, #1
 801b288:	bf8a      	itet	hi
 801b28a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b28e:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801b290:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801b292:	2b09      	cmp	r3, #9
 801b294:	d8da      	bhi.n	801b24c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801b296:	1c5a      	adds	r2, r3, #1
 801b298:	8622      	strh	r2, [r4, #48]	; 0x30
 801b29a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b29c:	4413      	add	r3, r2
 801b29e:	b29b      	uxth	r3, r3
 801b2a0:	2b09      	cmp	r3, #9
 801b2a2:	bf88      	it	hi
 801b2a4:	3b0a      	subhi	r3, #10
 801b2a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b2aa:	8358      	strh	r0, [r3, #26]
 801b2ac:	e7c2      	b.n	801b234 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b2ae:	bd10      	pop	{r4, pc}
 801b2b0:	0802a881 	.word	0x0802a881
 801b2b4:	0802ac14 	.word	0x0802ac14
 801b2b8:	0802a855 	.word	0x0802a855

0801b2bc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b2bc:	b538      	push	{r3, r4, r5, lr}
 801b2be:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801b2c0:	4604      	mov	r4, r0
 801b2c2:	b92a      	cbnz	r2, 801b2d0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801b2c4:	4b13      	ldr	r3, [pc, #76]	; (801b314 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801b2c6:	21d5      	movs	r1, #213	; 0xd5
 801b2c8:	4a13      	ldr	r2, [pc, #76]	; (801b318 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801b2ca:	4814      	ldr	r0, [pc, #80]	; (801b31c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801b2cc:	f00a fbd8 	bl	8025a80 <__assert_func>
 801b2d0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b2d2:	3a01      	subs	r2, #1
 801b2d4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801b2d8:	8b4d      	ldrh	r5, [r1, #26]
 801b2da:	8602      	strh	r2, [r0, #48]	; 0x30
 801b2dc:	1c5a      	adds	r2, r3, #1
 801b2de:	b292      	uxth	r2, r2
 801b2e0:	2a09      	cmp	r2, #9
 801b2e2:	bf8a      	itet	hi
 801b2e4:	3b09      	subhi	r3, #9
 801b2e6:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801b2e8:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801b2ea:	f7ff ffa1 	bl	801b230 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b2ee:	8b23      	ldrh	r3, [r4, #24]
 801b2f0:	2b01      	cmp	r3, #1
 801b2f2:	bf9c      	itt	ls
 801b2f4:	3301      	addls	r3, #1
 801b2f6:	8323      	strhls	r3, [r4, #24]
 801b2f8:	8ae3      	ldrh	r3, [r4, #22]
 801b2fa:	b90b      	cbnz	r3, 801b300 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801b2fc:	2302      	movs	r3, #2
 801b2fe:	82e3      	strh	r3, [r4, #22]
 801b300:	8ae3      	ldrh	r3, [r4, #22]
 801b302:	4628      	mov	r0, r5
 801b304:	3b01      	subs	r3, #1
 801b306:	b29b      	uxth	r3, r3
 801b308:	82e3      	strh	r3, [r4, #22]
 801b30a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b30e:	8265      	strh	r5, [r4, #18]
 801b310:	bd38      	pop	{r3, r4, r5, pc}
 801b312:	bf00      	nop
 801b314:	0802a84c 	.word	0x0802a84c
 801b318:	0802ab69 	.word	0x0802ab69
 801b31c:	0802a855 	.word	0x0802a855

0801b320 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b320:	428a      	cmp	r2, r1
 801b322:	b538      	push	{r3, r4, r5, lr}
 801b324:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801b326:	d90c      	bls.n	801b342 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801b328:	b92c      	cbnz	r4, 801b336 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801b32a:	4b1c      	ldr	r3, [pc, #112]	; (801b39c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801b32c:	21e1      	movs	r1, #225	; 0xe1
 801b32e:	4a1c      	ldr	r2, [pc, #112]	; (801b3a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801b330:	481c      	ldr	r0, [pc, #112]	; (801b3a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801b332:	f00a fba5 	bl	8025a80 <__assert_func>
 801b336:	3c01      	subs	r4, #1
 801b338:	4b1b      	ldr	r3, [pc, #108]	; (801b3a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801b33a:	4a1c      	ldr	r2, [pc, #112]	; (801b3ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801b33c:	21c5      	movs	r1, #197	; 0xc5
 801b33e:	8604      	strh	r4, [r0, #48]	; 0x30
 801b340:	e7f6      	b.n	801b330 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b342:	428c      	cmp	r4, r1
 801b344:	d203      	bcs.n	801b34e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801b346:	4b1a      	ldr	r3, [pc, #104]	; (801b3b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801b348:	21cb      	movs	r1, #203	; 0xcb
 801b34a:	4a1a      	ldr	r2, [pc, #104]	; (801b3b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801b34c:	e7f0      	b.n	801b330 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b34e:	1a64      	subs	r4, r4, r1
 801b350:	250a      	movs	r5, #10
 801b352:	8604      	strh	r4, [r0, #48]	; 0x30
 801b354:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801b356:	4421      	add	r1, r4
 801b358:	b289      	uxth	r1, r1
 801b35a:	2909      	cmp	r1, #9
 801b35c:	bf88      	it	hi
 801b35e:	390a      	subhi	r1, #10
 801b360:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b362:	b1ba      	cbz	r2, 801b394 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801b364:	3a01      	subs	r2, #1
 801b366:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801b368:	b292      	uxth	r2, r2
 801b36a:	2909      	cmp	r1, #9
 801b36c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b370:	d903      	bls.n	801b37a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801b372:	4b11      	ldr	r3, [pc, #68]	; (801b3b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801b374:	21e6      	movs	r1, #230	; 0xe6
 801b376:	4a11      	ldr	r2, [pc, #68]	; (801b3bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801b378:	e7da      	b.n	801b330 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b37a:	3101      	adds	r1, #1
 801b37c:	8601      	strh	r1, [r0, #48]	; 0x30
 801b37e:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b380:	b901      	cbnz	r1, 801b384 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801b382:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b384:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b386:	3901      	subs	r1, #1
 801b388:	b289      	uxth	r1, r1
 801b38a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b38c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b390:	834c      	strh	r4, [r1, #26]
 801b392:	e7e6      	b.n	801b362 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801b394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b398:	f7ff bf4a 	b.w	801b230 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b39c:	0802a84c 	.word	0x0802a84c
 801b3a0:	0802a942 	.word	0x0802a942
 801b3a4:	0802a855 	.word	0x0802a855
 801b3a8:	0802a88d 	.word	0x0802a88d
 801b3ac:	0802a9ec 	.word	0x0802a9ec
 801b3b0:	0802a89b 	.word	0x0802a89b
 801b3b4:	0802acc3 	.word	0x0802acc3
 801b3b8:	0802a8a7 	.word	0x0802a8a7
 801b3bc:	0802a8ba 	.word	0x0802a8ba

0801b3c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b3c0:	3a01      	subs	r2, #1
 801b3c2:	b570      	push	{r4, r5, r6, lr}
 801b3c4:	b292      	uxth	r2, r2
 801b3c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b3ca:	42b2      	cmp	r2, r6
 801b3cc:	d019      	beq.n	801b402 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b3ce:	8b04      	ldrh	r4, [r0, #24]
 801b3d0:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b3d4:	4294      	cmp	r4, r2
 801b3d6:	d805      	bhi.n	801b3e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801b3d8:	4b19      	ldr	r3, [pc, #100]	; (801b440 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b3da:	4a1a      	ldr	r2, [pc, #104]	; (801b444 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801b3dc:	21c5      	movs	r1, #197	; 0xc5
 801b3de:	481a      	ldr	r0, [pc, #104]	; (801b448 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801b3e0:	f00a fb4e 	bl	8025a80 <__assert_func>
 801b3e4:	8ac4      	ldrh	r4, [r0, #22]
 801b3e6:	4414      	add	r4, r2
 801b3e8:	3a01      	subs	r2, #1
 801b3ea:	b2a4      	uxth	r4, r4
 801b3ec:	b292      	uxth	r2, r2
 801b3ee:	2c01      	cmp	r4, #1
 801b3f0:	bf88      	it	hi
 801b3f2:	3c02      	subhi	r4, #2
 801b3f4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b3f8:	8a64      	ldrh	r4, [r4, #18]
 801b3fa:	42ac      	cmp	r4, r5
 801b3fc:	d0e5      	beq.n	801b3ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801b3fe:	2000      	movs	r0, #0
 801b400:	bd70      	pop	{r4, r5, r6, pc}
 801b402:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b406:	2400      	movs	r4, #0
 801b408:	4413      	add	r3, r2
 801b40a:	b2a2      	uxth	r2, r4
 801b40c:	429a      	cmp	r2, r3
 801b40e:	da14      	bge.n	801b43a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801b410:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801b412:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b416:	4296      	cmp	r6, r2
 801b418:	d802      	bhi.n	801b420 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801b41a:	4b09      	ldr	r3, [pc, #36]	; (801b440 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b41c:	4a0b      	ldr	r2, [pc, #44]	; (801b44c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801b41e:	e7dd      	b.n	801b3dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801b420:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801b422:	3401      	adds	r4, #1
 801b424:	4432      	add	r2, r6
 801b426:	b292      	uxth	r2, r2
 801b428:	2a09      	cmp	r2, #9
 801b42a:	bf88      	it	hi
 801b42c:	3a0a      	subhi	r2, #10
 801b42e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b432:	8b52      	ldrh	r2, [r2, #26]
 801b434:	42aa      	cmp	r2, r5
 801b436:	d0e8      	beq.n	801b40a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801b438:	e7e1      	b.n	801b3fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b43a:	2001      	movs	r0, #1
 801b43c:	e7e0      	b.n	801b400 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b43e:	bf00      	nop
 801b440:	0802a88d 	.word	0x0802a88d
 801b444:	0802ad47 	.word	0x0802ad47
 801b448:	0802a855 	.word	0x0802a855
 801b44c:	0802a9ec 	.word	0x0802a9ec

0801b450 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b454:	4605      	mov	r5, r0
 801b456:	4616      	mov	r6, r2
 801b458:	1c8c      	adds	r4, r1, #2
 801b45a:	8809      	ldrh	r1, [r1, #0]
 801b45c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b460:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b464:	42b3      	cmp	r3, r6
 801b466:	d124      	bne.n	801b4b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b468:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b46c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b470:	f001 070f 	and.w	r7, r1, #15
 801b474:	4652      	mov	r2, sl
 801b476:	f8cd 8000 	str.w	r8, [sp]
 801b47a:	464b      	mov	r3, r9
 801b47c:	4621      	mov	r1, r4
 801b47e:	4628      	mov	r0, r5
 801b480:	f7ff ff9e 	bl	801b3c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b484:	4683      	mov	fp, r0
 801b486:	b168      	cbz	r0, 801b4a4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b488:	eb0a 0109 	add.w	r1, sl, r9
 801b48c:	463a      	mov	r2, r7
 801b48e:	4628      	mov	r0, r5
 801b490:	4441      	add	r1, r8
 801b492:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b496:	4649      	mov	r1, r9
 801b498:	f7ff ff42 	bl	801b320 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b49c:	4658      	mov	r0, fp
 801b49e:	b003      	add	sp, #12
 801b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4a4:	eb07 010a 	add.w	r1, r7, sl
 801b4a8:	4449      	add	r1, r9
 801b4aa:	4441      	add	r1, r8
 801b4ac:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b4b0:	e7d2      	b.n	801b458 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b4b2:	f04f 0b00 	mov.w	fp, #0
 801b4b6:	e7f1      	b.n	801b49c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b4b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b4b8:	b570      	push	{r4, r5, r6, lr}
 801b4ba:	8810      	ldrh	r0, [r2, #0]
 801b4bc:	4298      	cmp	r0, r3
 801b4be:	d817      	bhi.n	801b4f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b4c0:	1e48      	subs	r0, r1, #1
 801b4c2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b4c6:	4298      	cmp	r0, r3
 801b4c8:	d312      	bcc.n	801b4f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b4ca:	2400      	movs	r4, #0
 801b4cc:	428c      	cmp	r4, r1
 801b4ce:	d20f      	bcs.n	801b4f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b4d0:	1860      	adds	r0, r4, r1
 801b4d2:	1040      	asrs	r0, r0, #1
 801b4d4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b4d8:	0085      	lsls	r5, r0, #2
 801b4da:	42b3      	cmp	r3, r6
 801b4dc:	d902      	bls.n	801b4e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b4de:	3001      	adds	r0, #1
 801b4e0:	b284      	uxth	r4, r0
 801b4e2:	e7f3      	b.n	801b4cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b4e4:	d201      	bcs.n	801b4ea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b4e6:	b281      	uxth	r1, r0
 801b4e8:	e7f0      	b.n	801b4cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b4ea:	442a      	add	r2, r5
 801b4ec:	8850      	ldrh	r0, [r2, #2]
 801b4ee:	bd70      	pop	{r4, r5, r6, pc}
 801b4f0:	2000      	movs	r0, #0
 801b4f2:	e7fc      	b.n	801b4ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b4f4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4f8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b4fa:	4604      	mov	r4, r0
 801b4fc:	260b      	movs	r6, #11
 801b4fe:	886f      	ldrh	r7, [r5, #2]
 801b500:	087f      	lsrs	r7, r7, #1
 801b502:	3e01      	subs	r6, #1
 801b504:	d01b      	beq.n	801b53e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b506:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b508:	b92b      	cbnz	r3, 801b516 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b50a:	4b0e      	ldr	r3, [pc, #56]	; (801b544 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b50c:	21c0      	movs	r1, #192	; 0xc0
 801b50e:	4a0e      	ldr	r2, [pc, #56]	; (801b548 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b510:	480e      	ldr	r0, [pc, #56]	; (801b54c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b512:	f00a fab5 	bl	8025a80 <__assert_func>
 801b516:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b518:	462a      	mov	r2, r5
 801b51a:	4639      	mov	r1, r7
 801b51c:	4620      	mov	r0, r4
 801b51e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b522:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b526:	4643      	mov	r3, r8
 801b528:	f7ff ffc6 	bl	801b4b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b52c:	b138      	cbz	r0, 801b53e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b52e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b532:	4642      	mov	r2, r8
 801b534:	4620      	mov	r0, r4
 801b536:	f7ff ff8b 	bl	801b450 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b53a:	2800      	cmp	r0, #0
 801b53c:	d1e1      	bne.n	801b502 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b542:	bf00      	nop
 801b544:	0802a84c 	.word	0x0802a84c
 801b548:	0802aabe 	.word	0x0802aabe
 801b54c:	0802a855 	.word	0x0802a855

0801b550 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b550:	4602      	mov	r2, r0
 801b552:	b148      	cbz	r0, 801b568 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b554:	2300      	movs	r3, #0
 801b556:	b298      	uxth	r0, r3
 801b558:	3301      	adds	r3, #1
 801b55a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b55e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b562:	2900      	cmp	r1, #0
 801b564:	d1f7      	bne.n	801b556 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b566:	4770      	bx	lr
 801b568:	4770      	bx	lr

0801b56a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b56a:	b530      	push	{r4, r5, lr}
 801b56c:	4604      	mov	r4, r0
 801b56e:	b159      	cbz	r1, 801b588 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b570:	b148      	cbz	r0, 801b586 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b572:	2300      	movs	r3, #0
 801b574:	b298      	uxth	r0, r3
 801b576:	4282      	cmp	r2, r0
 801b578:	d905      	bls.n	801b586 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b57a:	5ccd      	ldrb	r5, [r1, r3]
 801b57c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b580:	3301      	adds	r3, #1
 801b582:	2d00      	cmp	r5, #0
 801b584:	d1f6      	bne.n	801b574 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b586:	bd30      	pop	{r4, r5, pc}
 801b588:	4608      	mov	r0, r1
 801b58a:	e7fc      	b.n	801b586 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b58c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801b58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b58e:	468c      	mov	ip, r1
 801b590:	b08b      	sub	sp, #44	; 0x2c
 801b592:	2100      	movs	r1, #0
 801b594:	ae01      	add	r6, sp, #4
 801b596:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b59a:	211f      	movs	r1, #31
 801b59c:	fbb0 f7f3 	udiv	r7, r0, r3
 801b5a0:	fb03 0517 	mls	r5, r3, r7, r0
 801b5a4:	4638      	mov	r0, r7
 801b5a6:	b2ec      	uxtb	r4, r5
 801b5a8:	2d09      	cmp	r5, #9
 801b5aa:	bfd4      	ite	le
 801b5ac:	3430      	addle	r4, #48	; 0x30
 801b5ae:	3457      	addgt	r4, #87	; 0x57
 801b5b0:	b2e4      	uxtb	r4, r4
 801b5b2:	558c      	strb	r4, [r1, r6]
 801b5b4:	1e4c      	subs	r4, r1, #1
 801b5b6:	b92f      	cbnz	r7, 801b5c4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801b5b8:	4431      	add	r1, r6
 801b5ba:	4660      	mov	r0, ip
 801b5bc:	f7ff ffd5 	bl	801b56a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b5c0:	b00b      	add	sp, #44	; 0x2c
 801b5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5c4:	4621      	mov	r1, r4
 801b5c6:	e7e9      	b.n	801b59c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801b5c8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5ca:	4607      	mov	r7, r0
 801b5cc:	b08b      	sub	sp, #44	; 0x2c
 801b5ce:	4608      	mov	r0, r1
 801b5d0:	b341      	cbz	r1, 801b624 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b5d2:	1e99      	subs	r1, r3, #2
 801b5d4:	290e      	cmp	r1, #14
 801b5d6:	d825      	bhi.n	801b624 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b5d8:	2100      	movs	r1, #0
 801b5da:	463c      	mov	r4, r7
 801b5dc:	261f      	movs	r6, #31
 801b5de:	f10d 0c04 	add.w	ip, sp, #4
 801b5e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b5e6:	1e71      	subs	r1, r6, #1
 801b5e8:	fb94 fef3 	sdiv	lr, r4, r3
 801b5ec:	fb03 441e 	mls	r4, r3, lr, r4
 801b5f0:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b5f4:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b5f8:	b2ec      	uxtb	r4, r5
 801b5fa:	2d09      	cmp	r5, #9
 801b5fc:	bfd4      	ite	le
 801b5fe:	3430      	addle	r4, #48	; 0x30
 801b600:	3457      	addgt	r4, #87	; 0x57
 801b602:	b2e4      	uxtb	r4, r4
 801b604:	f80c 4006 	strb.w	r4, [ip, r6]
 801b608:	4674      	mov	r4, lr
 801b60a:	b96c      	cbnz	r4, 801b628 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b60c:	2f00      	cmp	r7, #0
 801b60e:	da05      	bge.n	801b61c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b610:	ab0a      	add	r3, sp, #40	; 0x28
 801b612:	4419      	add	r1, r3
 801b614:	232d      	movs	r3, #45	; 0x2d
 801b616:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b61a:	1eb1      	subs	r1, r6, #2
 801b61c:	3101      	adds	r1, #1
 801b61e:	4461      	add	r1, ip
 801b620:	f7ff ffa3 	bl	801b56a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b624:	b00b      	add	sp, #44	; 0x2c
 801b626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b628:	460e      	mov	r6, r1
 801b62a:	e7dc      	b.n	801b5e6 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b62c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b630:	b085      	sub	sp, #20
 801b632:	4691      	mov	r9, r2
 801b634:	6802      	ldr	r2, [r0, #0]
 801b636:	4688      	mov	r8, r1
 801b638:	461c      	mov	r4, r3
 801b63a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b63e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b642:	4683      	mov	fp, r0
 801b644:	4610      	mov	r0, r2
 801b646:	9103      	str	r1, [sp, #12]
 801b648:	9302      	str	r3, [sp, #8]
 801b64a:	9201      	str	r2, [sp, #4]
 801b64c:	f7ff ff80 	bl	801b550 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b650:	f1b8 0f00 	cmp.w	r8, #0
 801b654:	bf0c      	ite	eq
 801b656:	4684      	moveq	ip, r0
 801b658:	f100 0c01 	addne.w	ip, r0, #1
 801b65c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801b660:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b664:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b666:	fa1f fc8c 	uxth.w	ip, ip
 801b66a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b66c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801b670:	9903      	ldr	r1, [sp, #12]
 801b672:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b676:	d041      	beq.n	801b6fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b678:	d834      	bhi.n	801b6e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b67a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801b67e:	d059      	beq.n	801b734 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b680:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801b684:	d03a      	beq.n	801b6fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b686:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801b68a:	d034      	beq.n	801b6f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b68c:	2400      	movs	r4, #0
 801b68e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b692:	3a01      	subs	r2, #1
 801b694:	b169      	cbz	r1, 801b6b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b696:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b698:	458c      	cmp	ip, r1
 801b69a:	da09      	bge.n	801b6b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b69c:	eba1 010c 	sub.w	r1, r1, ip
 801b6a0:	b289      	uxth	r1, r1
 801b6a2:	b933      	cbnz	r3, 801b6b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b6a4:	2e00      	cmp	r6, #0
 801b6a6:	d051      	beq.n	801b74c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b6a8:	2800      	cmp	r0, #0
 801b6aa:	d04f      	beq.n	801b74c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b6ac:	440c      	add	r4, r1
 801b6ae:	b2a4      	uxth	r4, r4
 801b6b0:	2100      	movs	r1, #0
 801b6b2:	682b      	ldr	r3, [r5, #0]
 801b6b4:	4293      	cmp	r3, r2
 801b6b6:	da07      	bge.n	801b6c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b6b8:	f1b8 0f00 	cmp.w	r8, #0
 801b6bc:	d004      	beq.n	801b6c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b6be:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b6c2:	682b      	ldr	r3, [r5, #0]
 801b6c4:	3301      	adds	r3, #1
 801b6c6:	602b      	str	r3, [r5, #0]
 801b6c8:	2730      	movs	r7, #48	; 0x30
 801b6ca:	2c00      	cmp	r4, #0
 801b6cc:	d04e      	beq.n	801b76c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b6ce:	682e      	ldr	r6, [r5, #0]
 801b6d0:	3c01      	subs	r4, #1
 801b6d2:	42b2      	cmp	r2, r6
 801b6d4:	b2a4      	uxth	r4, r4
 801b6d6:	dd49      	ble.n	801b76c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b6d8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b6dc:	682b      	ldr	r3, [r5, #0]
 801b6de:	3301      	adds	r3, #1
 801b6e0:	602b      	str	r3, [r5, #0]
 801b6e2:	e7f2      	b.n	801b6ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b6e4:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801b6e8:	d01d      	beq.n	801b726 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b6ea:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801b6ee:	d002      	beq.n	801b6f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b6f0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801b6f4:	e7c9      	b.n	801b68a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b6f6:	4684      	mov	ip, r0
 801b6f8:	f04f 0800 	mov.w	r8, #0
 801b6fc:	2c00      	cmp	r4, #0
 801b6fe:	d0c6      	beq.n	801b68e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b700:	b947      	cbnz	r7, 801b714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b702:	2801      	cmp	r0, #1
 801b704:	d106      	bne.n	801b714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b706:	8814      	ldrh	r4, [r2, #0]
 801b708:	2c30      	cmp	r4, #48	; 0x30
 801b70a:	bf02      	ittt	eq
 801b70c:	3202      	addeq	r2, #2
 801b70e:	4638      	moveq	r0, r7
 801b710:	f8cb 2000 	streq.w	r2, [fp]
 801b714:	45bc      	cmp	ip, r7
 801b716:	da14      	bge.n	801b742 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b718:	b2bf      	uxth	r7, r7
 801b71a:	eba7 040c 	sub.w	r4, r7, ip
 801b71e:	46bc      	mov	ip, r7
 801b720:	b2a4      	uxth	r4, r4
 801b722:	2600      	movs	r6, #0
 801b724:	e7b3      	b.n	801b68e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b726:	4684      	mov	ip, r0
 801b728:	b16c      	cbz	r4, 801b746 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b72a:	42b8      	cmp	r0, r7
 801b72c:	dd00      	ble.n	801b730 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b72e:	b2b8      	uxth	r0, r7
 801b730:	2400      	movs	r4, #0
 801b732:	e003      	b.n	801b73c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b734:	f04f 0c01 	mov.w	ip, #1
 801b738:	2400      	movs	r4, #0
 801b73a:	4660      	mov	r0, ip
 801b73c:	4626      	mov	r6, r4
 801b73e:	46a0      	mov	r8, r4
 801b740:	e7a5      	b.n	801b68e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b742:	2400      	movs	r4, #0
 801b744:	e7ed      	b.n	801b722 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b746:	4626      	mov	r6, r4
 801b748:	46a0      	mov	r8, r4
 801b74a:	e7a0      	b.n	801b68e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b74c:	2900      	cmp	r1, #0
 801b74e:	d0b0      	beq.n	801b6b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b750:	2720      	movs	r7, #32
 801b752:	682e      	ldr	r6, [r5, #0]
 801b754:	2900      	cmp	r1, #0
 801b756:	d0ac      	beq.n	801b6b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b758:	3901      	subs	r1, #1
 801b75a:	4296      	cmp	r6, r2
 801b75c:	b289      	uxth	r1, r1
 801b75e:	daa7      	bge.n	801b6b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b760:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b764:	682b      	ldr	r3, [r5, #0]
 801b766:	3301      	adds	r3, #1
 801b768:	602b      	str	r3, [r5, #0]
 801b76a:	e7f2      	b.n	801b752 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b76c:	b188      	cbz	r0, 801b792 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b76e:	682b      	ldr	r3, [r5, #0]
 801b770:	3801      	subs	r0, #1
 801b772:	429a      	cmp	r2, r3
 801b774:	b280      	uxth	r0, r0
 801b776:	dd0c      	ble.n	801b792 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b778:	f8db 3000 	ldr.w	r3, [fp]
 801b77c:	1c9c      	adds	r4, r3, #2
 801b77e:	f8cb 4000 	str.w	r4, [fp]
 801b782:	881c      	ldrh	r4, [r3, #0]
 801b784:	682b      	ldr	r3, [r5, #0]
 801b786:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b78a:	682b      	ldr	r3, [r5, #0]
 801b78c:	3301      	adds	r3, #1
 801b78e:	602b      	str	r3, [r5, #0]
 801b790:	e7ec      	b.n	801b76c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b792:	2620      	movs	r6, #32
 801b794:	b151      	cbz	r1, 801b7ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b796:	6828      	ldr	r0, [r5, #0]
 801b798:	3901      	subs	r1, #1
 801b79a:	4282      	cmp	r2, r0
 801b79c:	b289      	uxth	r1, r1
 801b79e:	dd05      	ble.n	801b7ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b7a0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b7a4:	682b      	ldr	r3, [r5, #0]
 801b7a6:	3301      	adds	r3, #1
 801b7a8:	602b      	str	r3, [r5, #0]
 801b7aa:	e7f3      	b.n	801b794 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b7ac:	b005      	add	sp, #20
 801b7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b7b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b7b6:	2400      	movs	r4, #0
 801b7b8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b7bc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801b7c0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801b7c4:	8014      	strh	r4, [r2, #0]
 801b7c6:	701c      	strb	r4, [r3, #0]
 801b7c8:	f888 4000 	strb.w	r4, [r8]
 801b7cc:	f88c 4000 	strb.w	r4, [ip]
 801b7d0:	f88e 4000 	strb.w	r4, [lr]
 801b7d4:	703c      	strb	r4, [r7, #0]
 801b7d6:	6804      	ldr	r4, [r0, #0]
 801b7d8:	b1a4      	cbz	r4, 801b804 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b7da:	8824      	ldrh	r4, [r4, #0]
 801b7dc:	f04f 0901 	mov.w	r9, #1
 801b7e0:	b314      	cbz	r4, 801b828 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b7e2:	2c2b      	cmp	r4, #43	; 0x2b
 801b7e4:	d001      	beq.n	801b7ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b7e6:	2c20      	cmp	r4, #32
 801b7e8:	d110      	bne.n	801b80c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b7ea:	8014      	strh	r4, [r2, #0]
 801b7ec:	6804      	ldr	r4, [r0, #0]
 801b7ee:	b10c      	cbz	r4, 801b7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b7f0:	3402      	adds	r4, #2
 801b7f2:	6004      	str	r4, [r0, #0]
 801b7f4:	680c      	ldr	r4, [r1, #0]
 801b7f6:	b10c      	cbz	r4, 801b7fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b7f8:	3401      	adds	r4, #1
 801b7fa:	600c      	str	r4, [r1, #0]
 801b7fc:	6804      	ldr	r4, [r0, #0]
 801b7fe:	b17c      	cbz	r4, 801b820 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b800:	8824      	ldrh	r4, [r4, #0]
 801b802:	e7ed      	b.n	801b7e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b804:	680c      	ldr	r4, [r1, #0]
 801b806:	b17c      	cbz	r4, 801b828 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b808:	7824      	ldrb	r4, [r4, #0]
 801b80a:	e7e7      	b.n	801b7dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b80c:	2c2d      	cmp	r4, #45	; 0x2d
 801b80e:	d102      	bne.n	801b816 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b810:	f883 9000 	strb.w	r9, [r3]
 801b814:	e7ea      	b.n	801b7ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b816:	2c23      	cmp	r4, #35	; 0x23
 801b818:	d107      	bne.n	801b82a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b81a:	f888 9000 	strb.w	r9, [r8]
 801b81e:	e7e5      	b.n	801b7ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b820:	680c      	ldr	r4, [r1, #0]
 801b822:	b10c      	cbz	r4, 801b828 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b824:	7824      	ldrb	r4, [r4, #0]
 801b826:	e7db      	b.n	801b7e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b828:	2400      	movs	r4, #0
 801b82a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b82e:	2b09      	cmp	r3, #9
 801b830:	d901      	bls.n	801b836 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b832:	2c2a      	cmp	r4, #42	; 0x2a
 801b834:	d122      	bne.n	801b87c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b836:	2301      	movs	r3, #1
 801b838:	2c30      	cmp	r4, #48	; 0x30
 801b83a:	f88e 3000 	strb.w	r3, [lr]
 801b83e:	d10d      	bne.n	801b85c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b840:	f88c 3000 	strb.w	r3, [ip]
 801b844:	6803      	ldr	r3, [r0, #0]
 801b846:	b10b      	cbz	r3, 801b84c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b848:	3302      	adds	r3, #2
 801b84a:	6003      	str	r3, [r0, #0]
 801b84c:	680b      	ldr	r3, [r1, #0]
 801b84e:	b10b      	cbz	r3, 801b854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b850:	3301      	adds	r3, #1
 801b852:	600b      	str	r3, [r1, #0]
 801b854:	6803      	ldr	r3, [r0, #0]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d02f      	beq.n	801b8ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b85a:	881c      	ldrh	r4, [r3, #0]
 801b85c:	2c2a      	cmp	r4, #42	; 0x2a
 801b85e:	d135      	bne.n	801b8cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b860:	f04f 33ff 	mov.w	r3, #4294967295
 801b864:	6033      	str	r3, [r6, #0]
 801b866:	6803      	ldr	r3, [r0, #0]
 801b868:	b10b      	cbz	r3, 801b86e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b86a:	3302      	adds	r3, #2
 801b86c:	6003      	str	r3, [r0, #0]
 801b86e:	680b      	ldr	r3, [r1, #0]
 801b870:	b10b      	cbz	r3, 801b876 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b872:	3301      	adds	r3, #1
 801b874:	600b      	str	r3, [r1, #0]
 801b876:	6803      	ldr	r3, [r0, #0]
 801b878:	b31b      	cbz	r3, 801b8c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b87a:	881c      	ldrh	r4, [r3, #0]
 801b87c:	2c2e      	cmp	r4, #46	; 0x2e
 801b87e:	d11a      	bne.n	801b8b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b880:	2301      	movs	r3, #1
 801b882:	703b      	strb	r3, [r7, #0]
 801b884:	6803      	ldr	r3, [r0, #0]
 801b886:	b10b      	cbz	r3, 801b88c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b888:	3302      	adds	r3, #2
 801b88a:	6003      	str	r3, [r0, #0]
 801b88c:	680b      	ldr	r3, [r1, #0]
 801b88e:	b10b      	cbz	r3, 801b894 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b890:	3301      	adds	r3, #1
 801b892:	600b      	str	r3, [r1, #0]
 801b894:	6803      	ldr	r3, [r0, #0]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d036      	beq.n	801b908 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b89a:	881b      	ldrh	r3, [r3, #0]
 801b89c:	2b2a      	cmp	r3, #42	; 0x2a
 801b89e:	d137      	bne.n	801b910 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b8a0:	f04f 33ff 	mov.w	r3, #4294967295
 801b8a4:	602b      	str	r3, [r5, #0]
 801b8a6:	6803      	ldr	r3, [r0, #0]
 801b8a8:	b10b      	cbz	r3, 801b8ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b8aa:	3302      	adds	r3, #2
 801b8ac:	6003      	str	r3, [r0, #0]
 801b8ae:	680b      	ldr	r3, [r1, #0]
 801b8b0:	b10b      	cbz	r3, 801b8b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b8b2:	3301      	adds	r3, #1
 801b8b4:	600b      	str	r3, [r1, #0]
 801b8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8ba:	680c      	ldr	r4, [r1, #0]
 801b8bc:	b134      	cbz	r4, 801b8cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b8be:	7824      	ldrb	r4, [r4, #0]
 801b8c0:	e7cc      	b.n	801b85c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b8c2:	680b      	ldr	r3, [r1, #0]
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d0f6      	beq.n	801b8b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b8c8:	781c      	ldrb	r4, [r3, #0]
 801b8ca:	e7d7      	b.n	801b87c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	220a      	movs	r2, #10
 801b8d0:	6033      	str	r3, [r6, #0]
 801b8d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b8d6:	fa1f f38c 	uxth.w	r3, ip
 801b8da:	2b09      	cmp	r3, #9
 801b8dc:	d8ce      	bhi.n	801b87c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b8de:	6833      	ldr	r3, [r6, #0]
 801b8e0:	fb02 c303 	mla	r3, r2, r3, ip
 801b8e4:	6033      	str	r3, [r6, #0]
 801b8e6:	6803      	ldr	r3, [r0, #0]
 801b8e8:	b10b      	cbz	r3, 801b8ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b8ea:	3302      	adds	r3, #2
 801b8ec:	6003      	str	r3, [r0, #0]
 801b8ee:	680b      	ldr	r3, [r1, #0]
 801b8f0:	b10b      	cbz	r3, 801b8f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b8f2:	3301      	adds	r3, #1
 801b8f4:	600b      	str	r3, [r1, #0]
 801b8f6:	6803      	ldr	r3, [r0, #0]
 801b8f8:	b10b      	cbz	r3, 801b8fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b8fa:	881c      	ldrh	r4, [r3, #0]
 801b8fc:	e7e9      	b.n	801b8d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b8fe:	680c      	ldr	r4, [r1, #0]
 801b900:	2c00      	cmp	r4, #0
 801b902:	d0e6      	beq.n	801b8d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b904:	7824      	ldrb	r4, [r4, #0]
 801b906:	e7e4      	b.n	801b8d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b908:	680b      	ldr	r3, [r1, #0]
 801b90a:	b10b      	cbz	r3, 801b910 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b90c:	781b      	ldrb	r3, [r3, #0]
 801b90e:	e7c5      	b.n	801b89c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b910:	2200      	movs	r2, #0
 801b912:	240a      	movs	r4, #10
 801b914:	602a      	str	r2, [r5, #0]
 801b916:	3b30      	subs	r3, #48	; 0x30
 801b918:	682a      	ldr	r2, [r5, #0]
 801b91a:	b29e      	uxth	r6, r3
 801b91c:	2e09      	cmp	r6, #9
 801b91e:	d813      	bhi.n	801b948 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b920:	fb04 3302 	mla	r3, r4, r2, r3
 801b924:	602b      	str	r3, [r5, #0]
 801b926:	6803      	ldr	r3, [r0, #0]
 801b928:	b10b      	cbz	r3, 801b92e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b92a:	3302      	adds	r3, #2
 801b92c:	6003      	str	r3, [r0, #0]
 801b92e:	680b      	ldr	r3, [r1, #0]
 801b930:	b10b      	cbz	r3, 801b936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b932:	3301      	adds	r3, #1
 801b934:	600b      	str	r3, [r1, #0]
 801b936:	6803      	ldr	r3, [r0, #0]
 801b938:	b10b      	cbz	r3, 801b93e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b93a:	881b      	ldrh	r3, [r3, #0]
 801b93c:	e7eb      	b.n	801b916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b93e:	680b      	ldr	r3, [r1, #0]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d0e8      	beq.n	801b916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b944:	781b      	ldrb	r3, [r3, #0]
 801b946:	e7e6      	b.n	801b916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b948:	2a06      	cmp	r2, #6
 801b94a:	bfa8      	it	ge
 801b94c:	2206      	movge	r2, #6
 801b94e:	602a      	str	r2, [r5, #0]
 801b950:	e7b1      	b.n	801b8b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b956:	b0a3      	sub	sp, #140	; 0x8c
 801b958:	2600      	movs	r6, #0
 801b95a:	4607      	mov	r7, r0
 801b95c:	4688      	mov	r8, r1
 801b95e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801b962:	4631      	mov	r1, r6
 801b964:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b966:	4648      	mov	r0, r9
 801b968:	960d      	str	r6, [sp, #52]	; 0x34
 801b96a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b96e:	2242      	movs	r2, #66	; 0x42
 801b970:	f7fe fc6e 	bl	801a250 <_ZN8touchgfx6memsetEPvhm>
 801b974:	b15f      	cbz	r7, 801b98e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b976:	f108 3aff 	add.w	sl, r8, #4294967295
 801b97a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b97c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b97e:	b152      	cbz	r2, 801b996 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b980:	8812      	ldrh	r2, [r2, #0]
 801b982:	b10a      	cbz	r2, 801b988 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b984:	459a      	cmp	sl, r3
 801b986:	dc2e      	bgt.n	801b9e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b988:	2200      	movs	r2, #0
 801b98a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b98e:	4638      	mov	r0, r7
 801b990:	b023      	add	sp, #140	; 0x8c
 801b992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b996:	9a08      	ldr	r2, [sp, #32]
 801b998:	2a00      	cmp	r2, #0
 801b99a:	d0f5      	beq.n	801b988 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b99c:	7812      	ldrb	r2, [r2, #0]
 801b99e:	e7f0      	b.n	801b982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b9a0:	2d00      	cmp	r5, #0
 801b9a2:	d0ea      	beq.n	801b97a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b9a4:	782a      	ldrb	r2, [r5, #0]
 801b9a6:	b142      	cbz	r2, 801b9ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b9a8:	2a25      	cmp	r2, #37	; 0x25
 801b9aa:	d001      	beq.n	801b9b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b9ac:	459a      	cmp	sl, r3
 801b9ae:	dc08      	bgt.n	801b9c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b9b0:	f1bb 0f00 	cmp.w	fp, #0
 801b9b4:	d121      	bne.n	801b9fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b9b6:	2d00      	cmp	r5, #0
 801b9b8:	d0df      	beq.n	801b97a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b9ba:	782a      	ldrb	r2, [r5, #0]
 801b9bc:	f04f 0b00 	mov.w	fp, #0
 801b9c0:	e01d      	b.n	801b9fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b9c2:	f1bb 0f00 	cmp.w	fp, #0
 801b9c6:	d077      	beq.n	801bab8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b9c8:	f8bb 2000 	ldrh.w	r2, [fp]
 801b9cc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b9d0:	f1bb 0f00 	cmp.w	fp, #0
 801b9d4:	d002      	beq.n	801b9dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b9d6:	f10b 0202 	add.w	r2, fp, #2
 801b9da:	9209      	str	r2, [sp, #36]	; 0x24
 801b9dc:	b10d      	cbz	r5, 801b9e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b9de:	3501      	adds	r5, #1
 801b9e0:	9508      	str	r5, [sp, #32]
 801b9e2:	3301      	adds	r3, #1
 801b9e4:	930d      	str	r3, [sp, #52]	; 0x34
 801b9e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9e8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b9ec:	f1bb 0f00 	cmp.w	fp, #0
 801b9f0:	d0d6      	beq.n	801b9a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b9f2:	f8bb 2000 	ldrh.w	r2, [fp]
 801b9f6:	2a00      	cmp	r2, #0
 801b9f8:	d1d6      	bne.n	801b9a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b9fa:	f8bb 2000 	ldrh.w	r2, [fp]
 801b9fe:	2a00      	cmp	r2, #0
 801ba00:	d0bb      	beq.n	801b97a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ba02:	459a      	cmp	sl, r3
 801ba04:	ddb9      	ble.n	801b97a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ba06:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801ba0a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801ba0e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801ba12:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801ba16:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801ba1a:	960e      	str	r6, [sp, #56]	; 0x38
 801ba1c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801ba20:	960f      	str	r6, [sp, #60]	; 0x3c
 801ba22:	f1bb 0f00 	cmp.w	fp, #0
 801ba26:	d002      	beq.n	801ba2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ba28:	f10b 0302 	add.w	r3, fp, #2
 801ba2c:	9309      	str	r3, [sp, #36]	; 0x24
 801ba2e:	b10d      	cbz	r5, 801ba34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ba30:	1c6b      	adds	r3, r5, #1
 801ba32:	9308      	str	r3, [sp, #32]
 801ba34:	ab0f      	add	r3, sp, #60	; 0x3c
 801ba36:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801ba3a:	a908      	add	r1, sp, #32
 801ba3c:	a809      	add	r0, sp, #36	; 0x24
 801ba3e:	9305      	str	r3, [sp, #20]
 801ba40:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ba44:	9304      	str	r3, [sp, #16]
 801ba46:	ab0e      	add	r3, sp, #56	; 0x38
 801ba48:	9303      	str	r3, [sp, #12]
 801ba4a:	ab0c      	add	r3, sp, #48	; 0x30
 801ba4c:	9302      	str	r3, [sp, #8]
 801ba4e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ba52:	9301      	str	r3, [sp, #4]
 801ba54:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ba58:	9300      	str	r3, [sp, #0]
 801ba5a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801ba5e:	f7ff fea8 	bl	801b7b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801ba62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	bfbf      	itttt	lt
 801ba68:	6823      	ldrlt	r3, [r4, #0]
 801ba6a:	3404      	addlt	r4, #4
 801ba6c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ba70:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ba72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	bfbe      	ittt	lt
 801ba78:	6823      	ldrlt	r3, [r4, #0]
 801ba7a:	3404      	addlt	r4, #4
 801ba7c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ba80:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ba84:	bfb8      	it	lt
 801ba86:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ba88:	b1d9      	cbz	r1, 801bac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801ba8a:	880b      	ldrh	r3, [r1, #0]
 801ba8c:	2b69      	cmp	r3, #105	; 0x69
 801ba8e:	d01f      	beq.n	801bad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ba90:	d82f      	bhi.n	801baf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801ba92:	2b58      	cmp	r3, #88	; 0x58
 801ba94:	d01c      	beq.n	801bad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ba96:	d818      	bhi.n	801baca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801ba98:	2b25      	cmp	r3, #37	; 0x25
 801ba9a:	d034      	beq.n	801bb06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801ba9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba9e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801baa2:	f1bb 0f00 	cmp.w	fp, #0
 801baa6:	f000 80b7 	beq.w	801bc18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801baaa:	f8bb 5000 	ldrh.w	r5, [fp]
 801baae:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801bab2:	3301      	adds	r3, #1
 801bab4:	930d      	str	r3, [sp, #52]	; 0x34
 801bab6:	e029      	b.n	801bb0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801bab8:	b10d      	cbz	r5, 801babe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801baba:	782a      	ldrb	r2, [r5, #0]
 801babc:	e786      	b.n	801b9cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801babe:	462a      	mov	r2, r5
 801bac0:	e784      	b.n	801b9cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801bac2:	2a00      	cmp	r2, #0
 801bac4:	d0ea      	beq.n	801ba9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bac6:	7813      	ldrb	r3, [r2, #0]
 801bac8:	e7e0      	b.n	801ba8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801baca:	3b63      	subs	r3, #99	; 0x63
 801bacc:	2b01      	cmp	r3, #1
 801bace:	d8e5      	bhi.n	801ba9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bad0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801bad4:	b329      	cbz	r1, 801bb22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801bad6:	880b      	ldrh	r3, [r1, #0]
 801bad8:	2b69      	cmp	r3, #105	; 0x69
 801bada:	d063      	beq.n	801bba4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801badc:	d825      	bhi.n	801bb2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801bade:	2b63      	cmp	r3, #99	; 0x63
 801bae0:	d038      	beq.n	801bb54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801bae2:	2b64      	cmp	r3, #100	; 0x64
 801bae4:	d05e      	beq.n	801bba4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801bae6:	2b58      	cmp	r3, #88	; 0x58
 801bae8:	d07a      	beq.n	801bbe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801baea:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801baee:	4625      	mov	r5, r4
 801baf0:	e036      	b.n	801bb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801baf2:	2b73      	cmp	r3, #115	; 0x73
 801baf4:	d0ec      	beq.n	801bad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801baf6:	d802      	bhi.n	801bafe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801baf8:	2b6f      	cmp	r3, #111	; 0x6f
 801bafa:	d1cf      	bne.n	801ba9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bafc:	e7e8      	b.n	801bad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bafe:	2b75      	cmp	r3, #117	; 0x75
 801bb00:	d0e6      	beq.n	801bad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bb02:	2b78      	cmp	r3, #120	; 0x78
 801bb04:	e7f9      	b.n	801bafa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801bb06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb08:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801bb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb0e:	b10b      	cbz	r3, 801bb14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801bb10:	3302      	adds	r3, #2
 801bb12:	9309      	str	r3, [sp, #36]	; 0x24
 801bb14:	9b08      	ldr	r3, [sp, #32]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	f43f af2f 	beq.w	801b97a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bb1c:	3301      	adds	r3, #1
 801bb1e:	9308      	str	r3, [sp, #32]
 801bb20:	e72b      	b.n	801b97a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bb22:	2a00      	cmp	r2, #0
 801bb24:	d0e1      	beq.n	801baea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bb26:	7813      	ldrb	r3, [r2, #0]
 801bb28:	e7d6      	b.n	801bad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801bb2a:	2b73      	cmp	r3, #115	; 0x73
 801bb2c:	d036      	beq.n	801bb9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801bb2e:	d807      	bhi.n	801bb40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801bb30:	2b6f      	cmp	r3, #111	; 0x6f
 801bb32:	d1da      	bne.n	801baea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bb34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb36:	1d25      	adds	r5, r4, #4
 801bb38:	2308      	movs	r3, #8
 801bb3a:	eba8 0202 	sub.w	r2, r8, r2
 801bb3e:	e049      	b.n	801bbd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bb40:	2b75      	cmp	r3, #117	; 0x75
 801bb42:	d042      	beq.n	801bbca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801bb44:	2b78      	cmp	r3, #120	; 0x78
 801bb46:	d1d0      	bne.n	801baea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bb48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb4a:	1d25      	adds	r5, r4, #4
 801bb4c:	2310      	movs	r3, #16
 801bb4e:	eba8 0202 	sub.w	r2, r8, r2
 801bb52:	e03f      	b.n	801bbd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bb54:	7823      	ldrb	r3, [r4, #0]
 801bb56:	1d25      	adds	r5, r4, #4
 801bb58:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801bb5c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801bb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb62:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d051      	beq.n	801bc0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801bb6a:	881a      	ldrh	r2, [r3, #0]
 801bb6c:	a80d      	add	r0, sp, #52	; 0x34
 801bb6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801bb72:	462c      	mov	r4, r5
 801bb74:	9005      	str	r0, [sp, #20]
 801bb76:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801bb7a:	9004      	str	r0, [sp, #16]
 801bb7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bb7e:	9003      	str	r0, [sp, #12]
 801bb80:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801bb84:	9002      	str	r0, [sp, #8]
 801bb86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bb88:	9001      	str	r0, [sp, #4]
 801bb8a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801bb8e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801bb92:	9000      	str	r0, [sp, #0]
 801bb94:	a810      	add	r0, sp, #64	; 0x40
 801bb96:	f7ff fd49 	bl	801b62c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801bb9a:	e7b7      	b.n	801bb0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801bb9c:	1d25      	adds	r5, r4, #4
 801bb9e:	6823      	ldr	r3, [r4, #0]
 801bba0:	9310      	str	r3, [sp, #64]	; 0x40
 801bba2:	e7dd      	b.n	801bb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bba4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bba6:	230a      	movs	r3, #10
 801bba8:	4649      	mov	r1, r9
 801bbaa:	6820      	ldr	r0, [r4, #0]
 801bbac:	eba8 0202 	sub.w	r2, r8, r2
 801bbb0:	1d25      	adds	r5, r4, #4
 801bbb2:	b292      	uxth	r2, r2
 801bbb4:	f7ff fd08 	bl	801b5c8 <_ZN8touchgfx7Unicode4itoaElPtti>
 801bbb8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bbbc:	2b2d      	cmp	r3, #45	; 0x2d
 801bbbe:	d1cf      	bne.n	801bb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bbc0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801bbc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbc6:	3302      	adds	r3, #2
 801bbc8:	e7ea      	b.n	801bba0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801bbca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bbcc:	1d25      	adds	r5, r4, #4
 801bbce:	230a      	movs	r3, #10
 801bbd0:	eba8 0202 	sub.w	r2, r8, r2
 801bbd4:	b292      	uxth	r2, r2
 801bbd6:	4649      	mov	r1, r9
 801bbd8:	6820      	ldr	r0, [r4, #0]
 801bbda:	f7ff fcd7 	bl	801b58c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bbde:	e7bf      	b.n	801bb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bbe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bbe2:	2310      	movs	r3, #16
 801bbe4:	4649      	mov	r1, r9
 801bbe6:	6820      	ldr	r0, [r4, #0]
 801bbe8:	eba8 0202 	sub.w	r2, r8, r2
 801bbec:	1d25      	adds	r5, r4, #4
 801bbee:	b292      	uxth	r2, r2
 801bbf0:	f7ff fccc 	bl	801b58c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bbf4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801bbf8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d0af      	beq.n	801bb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bc00:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801bc04:	2919      	cmp	r1, #25
 801bc06:	d8f7      	bhi.n	801bbf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bc08:	3b20      	subs	r3, #32
 801bc0a:	8013      	strh	r3, [r2, #0]
 801bc0c:	e7f4      	b.n	801bbf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bc0e:	9a08      	ldr	r2, [sp, #32]
 801bc10:	2a00      	cmp	r2, #0
 801bc12:	d0ab      	beq.n	801bb6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bc14:	7812      	ldrb	r2, [r2, #0]
 801bc16:	e7a9      	b.n	801bb6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bc18:	2d00      	cmp	r5, #0
 801bc1a:	f43f af48 	beq.w	801baae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801bc1e:	782d      	ldrb	r5, [r5, #0]
 801bc20:	e745      	b.n	801baae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801bc22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801bc22:	b507      	push	{r0, r1, r2, lr}
 801bc24:	9300      	str	r3, [sp, #0]
 801bc26:	4613      	mov	r3, r2
 801bc28:	2200      	movs	r2, #0
 801bc2a:	f7ff fe92 	bl	801b952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801bc2e:	b003      	add	sp, #12
 801bc30:	f85d fb04 	ldr.w	pc, [sp], #4

0801bc34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801bc34:	b40c      	push	{r2, r3}
 801bc36:	b507      	push	{r0, r1, r2, lr}
 801bc38:	ab04      	add	r3, sp, #16
 801bc3a:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc3e:	9301      	str	r3, [sp, #4]
 801bc40:	f7ff ffef 	bl	801bc22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801bc44:	b003      	add	sp, #12
 801bc46:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc4a:	b002      	add	sp, #8
 801bc4c:	4770      	bx	lr
	...

0801bc50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bc50:	4b01      	ldr	r3, [pc, #4]	; (801bc58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bc52:	6018      	str	r0, [r3, #0]
 801bc54:	4770      	bx	lr
 801bc56:	bf00      	nop
 801bc58:	2000b468 	.word	0x2000b468

0801bc5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bc5c:	4b07      	ldr	r3, [pc, #28]	; (801bc7c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801bc5e:	881a      	ldrh	r2, [r3, #0]
 801bc60:	4282      	cmp	r2, r0
 801bc62:	d809      	bhi.n	801bc78 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bc64:	4b06      	ldr	r3, [pc, #24]	; (801bc80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801bc66:	881b      	ldrh	r3, [r3, #0]
 801bc68:	4413      	add	r3, r2
 801bc6a:	4298      	cmp	r0, r3
 801bc6c:	da04      	bge.n	801bc78 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bc6e:	4b05      	ldr	r3, [pc, #20]	; (801bc84 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801bc76:	4770      	bx	lr
 801bc78:	2000      	movs	r0, #0
 801bc7a:	4770      	bx	lr
 801bc7c:	2000b488 	.word	0x2000b488
 801bc80:	2000b48c 	.word	0x2000b48c
 801bc84:	2000b46c 	.word	0x2000b46c

0801bc88 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc8c:	4d28      	ldr	r5, [pc, #160]	; (801bd30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bc8e:	682b      	ldr	r3, [r5, #0]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d04a      	beq.n	801bd2a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801bc94:	4a27      	ldr	r2, [pc, #156]	; (801bd34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bc96:	4e28      	ldr	r6, [pc, #160]	; (801bd38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bc98:	8810      	ldrh	r0, [r2, #0]
 801bc9a:	f8b6 8000 	ldrh.w	r8, [r6]
 801bc9e:	4c27      	ldr	r4, [pc, #156]	; (801bd3c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bca0:	4440      	add	r0, r8
 801bca2:	4f27      	ldr	r7, [pc, #156]	; (801bd40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bca4:	1c41      	adds	r1, r0, #1
 801bca6:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801bcaa:	f021 0101 	bic.w	r1, r1, #1
 801bcae:	eb03 020e 	add.w	r2, r3, lr
 801bcb2:	0409      	lsls	r1, r1, #16
 801bcb4:	6022      	str	r2, [r4, #0]
 801bcb6:	0c09      	lsrs	r1, r1, #16
 801bcb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801bcbc:	eb0e 010c 	add.w	r1, lr, ip
 801bcc0:	185a      	adds	r2, r3, r1
 801bcc2:	603a      	str	r2, [r7, #0]
 801bcc4:	220e      	movs	r2, #14
 801bcc6:	fb02 f208 	mul.w	r2, r2, r8
 801bcca:	3203      	adds	r2, #3
 801bccc:	f022 0203 	bic.w	r2, r2, #3
 801bcd0:	4411      	add	r1, r2
 801bcd2:	440b      	add	r3, r1
 801bcd4:	491b      	ldr	r1, [pc, #108]	; (801bd44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801bcd6:	600b      	str	r3, [r1, #0]
 801bcd8:	2300      	movs	r3, #0
 801bcda:	491b      	ldr	r1, [pc, #108]	; (801bd48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801bcdc:	800b      	strh	r3, [r1, #0]
 801bcde:	491b      	ldr	r1, [pc, #108]	; (801bd4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801bce0:	6809      	ldr	r1, [r1, #0]
 801bce2:	eba1 010e 	sub.w	r1, r1, lr
 801bce6:	eba1 010c 	sub.w	r1, r1, ip
 801bcea:	469c      	mov	ip, r3
 801bcec:	1a8a      	subs	r2, r1, r2
 801bcee:	4918      	ldr	r1, [pc, #96]	; (801bd50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801bcf0:	600a      	str	r2, [r1, #0]
 801bcf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bcf6:	4a17      	ldr	r2, [pc, #92]	; (801bd54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801bcf8:	8013      	strh	r3, [r2, #0]
 801bcfa:	4283      	cmp	r3, r0
 801bcfc:	d10d      	bne.n	801bd1a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801bcfe:	8835      	ldrh	r5, [r6, #0]
 801bd00:	2300      	movs	r3, #0
 801bd02:	6838      	ldr	r0, [r7, #0]
 801bd04:	240e      	movs	r4, #14
 801bd06:	429d      	cmp	r5, r3
 801bd08:	d90f      	bls.n	801bd2a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801bd0a:	fb04 0203 	mla	r2, r4, r3, r0
 801bd0e:	3301      	adds	r3, #1
 801bd10:	7b11      	ldrb	r1, [r2, #12]
 801bd12:	f36f 1145 	bfc	r1, #5, #1
 801bd16:	7311      	strb	r1, [r2, #12]
 801bd18:	e7f5      	b.n	801bd06 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801bd1a:	682a      	ldr	r2, [r5, #0]
 801bd1c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bd20:	6822      	ldr	r2, [r4, #0]
 801bd22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801bd26:	3301      	adds	r3, #1
 801bd28:	e7e7      	b.n	801bcfa <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801bd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd2e:	bf00      	nop
 801bd30:	2000b46c 	.word	0x2000b46c
 801bd34:	2000b488 	.word	0x2000b488
 801bd38:	2000b48c 	.word	0x2000b48c
 801bd3c:	2000b480 	.word	0x2000b480
 801bd40:	2000b470 	.word	0x2000b470
 801bd44:	2000b478 	.word	0x2000b478
 801bd48:	2000b48a 	.word	0x2000b48a
 801bd4c:	2000b474 	.word	0x2000b474
 801bd50:	2000b484 	.word	0x2000b484
 801bd54:	2000b47c 	.word	0x2000b47c

0801bd58 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bd58:	4b10      	ldr	r3, [pc, #64]	; (801bd9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801bd5a:	b510      	push	{r4, lr}
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	b9db      	cbnz	r3, 801bd98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bd60:	b1d1      	cbz	r1, 801bd98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bd62:	4b0f      	ldr	r3, [pc, #60]	; (801bda0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bd64:	240e      	movs	r4, #14
 801bd66:	801a      	strh	r2, [r3, #0]
 801bd68:	b292      	uxth	r2, r2
 801bd6a:	4b0e      	ldr	r3, [pc, #56]	; (801bda4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bd6c:	881b      	ldrh	r3, [r3, #0]
 801bd6e:	4413      	add	r3, r2
 801bd70:	4362      	muls	r2, r4
 801bd72:	2406      	movs	r4, #6
 801bd74:	fb04 2203 	mla	r2, r4, r3, r2
 801bd78:	428a      	cmp	r2, r1
 801bd7a:	d305      	bcc.n	801bd88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801bd7c:	4b0a      	ldr	r3, [pc, #40]	; (801bda8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801bd7e:	2137      	movs	r1, #55	; 0x37
 801bd80:	4a0a      	ldr	r2, [pc, #40]	; (801bdac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801bd82:	480b      	ldr	r0, [pc, #44]	; (801bdb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801bd84:	f009 fe7c 	bl	8025a80 <__assert_func>
 801bd88:	4b0a      	ldr	r3, [pc, #40]	; (801bdb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801bd8a:	6019      	str	r1, [r3, #0]
 801bd8c:	4b0a      	ldr	r3, [pc, #40]	; (801bdb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801bd8e:	6018      	str	r0, [r3, #0]
 801bd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd94:	f7ff bf78 	b.w	801bc88 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bd98:	bd10      	pop	{r4, pc}
 801bd9a:	bf00      	nop
 801bd9c:	2000b478 	.word	0x2000b478
 801bda0:	2000b48c 	.word	0x2000b48c
 801bda4:	2000b488 	.word	0x2000b488
 801bda8:	0802ae75 	.word	0x0802ae75
 801bdac:	0802aece 	.word	0x0802aece
 801bdb0:	0802ae50 	.word	0x0802ae50
 801bdb4:	2000b474 	.word	0x2000b474
 801bdb8:	2000b46c 	.word	0x2000b46c

0801bdbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bdbc:	b470      	push	{r4, r5, r6}
 801bdbe:	4c07      	ldr	r4, [pc, #28]	; (801bddc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bdc0:	4605      	mov	r5, r0
 801bdc2:	4610      	mov	r0, r2
 801bdc4:	9a03      	ldr	r2, [sp, #12]
 801bdc6:	6826      	ldr	r6, [r4, #0]
 801bdc8:	b936      	cbnz	r6, 801bdd8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bdca:	6025      	str	r5, [r4, #0]
 801bdcc:	4c04      	ldr	r4, [pc, #16]	; (801bde0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bdce:	8021      	strh	r1, [r4, #0]
 801bdd0:	4619      	mov	r1, r3
 801bdd2:	bc70      	pop	{r4, r5, r6}
 801bdd4:	f7ff bfc0 	b.w	801bd58 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bdd8:	bc70      	pop	{r4, r5, r6}
 801bdda:	4770      	bx	lr
 801bddc:	2000b490 	.word	0x2000b490
 801bde0:	2000b488 	.word	0x2000b488

0801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bde4:	b508      	push	{r3, lr}
 801bde6:	4b14      	ldr	r3, [pc, #80]	; (801be38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bde8:	6819      	ldr	r1, [r3, #0]
 801bdea:	b931      	cbnz	r1, 801bdfa <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bdec:	4b13      	ldr	r3, [pc, #76]	; (801be3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bdee:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801bdf2:	4a13      	ldr	r2, [pc, #76]	; (801be40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bdf4:	4813      	ldr	r0, [pc, #76]	; (801be44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bdf6:	f009 fe43 	bl	8025a80 <__assert_func>
 801bdfa:	4a13      	ldr	r2, [pc, #76]	; (801be48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bdfc:	8803      	ldrh	r3, [r0, #0]
 801bdfe:	8812      	ldrh	r2, [r2, #0]
 801be00:	4293      	cmp	r3, r2
 801be02:	d204      	bcs.n	801be0e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801be04:	2214      	movs	r2, #20
 801be06:	fb02 1303 	mla	r3, r2, r3, r1
 801be0a:	8918      	ldrh	r0, [r3, #8]
 801be0c:	bd08      	pop	{r3, pc}
 801be0e:	490f      	ldr	r1, [pc, #60]	; (801be4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801be10:	8809      	ldrh	r1, [r1, #0]
 801be12:	4411      	add	r1, r2
 801be14:	428b      	cmp	r3, r1
 801be16:	da06      	bge.n	801be26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801be18:	1a9b      	subs	r3, r3, r2
 801be1a:	4a0d      	ldr	r2, [pc, #52]	; (801be50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801be1c:	210e      	movs	r1, #14
 801be1e:	6812      	ldr	r2, [r2, #0]
 801be20:	fb01 2303 	mla	r3, r1, r3, r2
 801be24:	e7f1      	b.n	801be0a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801be26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be2a:	4293      	cmp	r3, r2
 801be2c:	bf0a      	itet	eq
 801be2e:	4b09      	ldreq	r3, [pc, #36]	; (801be54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801be30:	2000      	movne	r0, #0
 801be32:	8818      	ldrheq	r0, [r3, #0]
 801be34:	e7ea      	b.n	801be0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801be36:	bf00      	nop
 801be38:	2000b490 	.word	0x2000b490
 801be3c:	0802a0dc 	.word	0x0802a0dc
 801be40:	0802af7b 	.word	0x0802af7b
 801be44:	0802ae50 	.word	0x0802ae50
 801be48:	2000b488 	.word	0x2000b488
 801be4c:	2000b48c 	.word	0x2000b48c
 801be50:	2000b470 	.word	0x2000b470
 801be54:	2000b3bc 	.word	0x2000b3bc

0801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801be58:	b508      	push	{r3, lr}
 801be5a:	4b14      	ldr	r3, [pc, #80]	; (801beac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801be5c:	6819      	ldr	r1, [r3, #0]
 801be5e:	b931      	cbnz	r1, 801be6e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801be60:	4b13      	ldr	r3, [pc, #76]	; (801beb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801be62:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801be66:	4a13      	ldr	r2, [pc, #76]	; (801beb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801be68:	4813      	ldr	r0, [pc, #76]	; (801beb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801be6a:	f009 fe09 	bl	8025a80 <__assert_func>
 801be6e:	4a13      	ldr	r2, [pc, #76]	; (801bebc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801be70:	8803      	ldrh	r3, [r0, #0]
 801be72:	8812      	ldrh	r2, [r2, #0]
 801be74:	4293      	cmp	r3, r2
 801be76:	d204      	bcs.n	801be82 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801be78:	2214      	movs	r2, #20
 801be7a:	fb02 1303 	mla	r3, r2, r3, r1
 801be7e:	8958      	ldrh	r0, [r3, #10]
 801be80:	bd08      	pop	{r3, pc}
 801be82:	490f      	ldr	r1, [pc, #60]	; (801bec0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801be84:	8809      	ldrh	r1, [r1, #0]
 801be86:	4411      	add	r1, r2
 801be88:	428b      	cmp	r3, r1
 801be8a:	da06      	bge.n	801be9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801be8c:	1a9b      	subs	r3, r3, r2
 801be8e:	4a0d      	ldr	r2, [pc, #52]	; (801bec4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801be90:	210e      	movs	r1, #14
 801be92:	6812      	ldr	r2, [r2, #0]
 801be94:	fb01 2303 	mla	r3, r1, r3, r2
 801be98:	e7f1      	b.n	801be7e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801be9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be9e:	4293      	cmp	r3, r2
 801bea0:	bf0a      	itet	eq
 801bea2:	4b09      	ldreq	r3, [pc, #36]	; (801bec8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bea4:	2000      	movne	r0, #0
 801bea6:	8818      	ldrheq	r0, [r3, #0]
 801bea8:	e7ea      	b.n	801be80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801beaa:	bf00      	nop
 801beac:	2000b490 	.word	0x2000b490
 801beb0:	0802a0dc 	.word	0x0802a0dc
 801beb4:	0802afa7 	.word	0x0802afa7
 801beb8:	0802ae50 	.word	0x0802ae50
 801bebc:	2000b488 	.word	0x2000b488
 801bec0:	2000b48c 	.word	0x2000b48c
 801bec4:	2000b470 	.word	0x2000b470
 801bec8:	2000b3be 	.word	0x2000b3be

0801becc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801becc:	4b23      	ldr	r3, [pc, #140]	; (801bf5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bece:	b510      	push	{r4, lr}
 801bed0:	681c      	ldr	r4, [r3, #0]
 801bed2:	b934      	cbnz	r4, 801bee2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801bed4:	4b22      	ldr	r3, [pc, #136]	; (801bf60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bed6:	f44f 7148 	mov.w	r1, #800	; 0x320
 801beda:	4a22      	ldr	r2, [pc, #136]	; (801bf64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bedc:	4822      	ldr	r0, [pc, #136]	; (801bf68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bede:	f009 fdcf 	bl	8025a80 <__assert_func>
 801bee2:	4a22      	ldr	r2, [pc, #136]	; (801bf6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bee4:	880b      	ldrh	r3, [r1, #0]
 801bee6:	8812      	ldrh	r2, [r2, #0]
 801bee8:	4293      	cmp	r3, r2
 801beea:	d211      	bcs.n	801bf10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801beec:	2214      	movs	r2, #20
 801beee:	fb02 4303 	mla	r3, r2, r3, r4
 801bef2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bef6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801befa:	8a1a      	ldrh	r2, [r3, #16]
 801befc:	8a5b      	ldrh	r3, [r3, #18]
 801befe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bf02:	8004      	strh	r4, [r0, #0]
 801bf04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf08:	8041      	strh	r1, [r0, #2]
 801bf0a:	8082      	strh	r2, [r0, #4]
 801bf0c:	80c3      	strh	r3, [r0, #6]
 801bf0e:	e00e      	b.n	801bf2e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bf10:	4917      	ldr	r1, [pc, #92]	; (801bf70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801bf12:	8809      	ldrh	r1, [r1, #0]
 801bf14:	4411      	add	r1, r2
 801bf16:	428b      	cmp	r3, r1
 801bf18:	da0a      	bge.n	801bf30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801bf1a:	1a9b      	subs	r3, r3, r2
 801bf1c:	4a15      	ldr	r2, [pc, #84]	; (801bf74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801bf1e:	210e      	movs	r1, #14
 801bf20:	6812      	ldr	r2, [r2, #0]
 801bf22:	fb01 2303 	mla	r3, r1, r3, r2
 801bf26:	681a      	ldr	r2, [r3, #0]
 801bf28:	6002      	str	r2, [r0, #0]
 801bf2a:	685a      	ldr	r2, [r3, #4]
 801bf2c:	6042      	str	r2, [r0, #4]
 801bf2e:	bd10      	pop	{r4, pc}
 801bf30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf34:	4293      	cmp	r3, r2
 801bf36:	d10b      	bne.n	801bf50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801bf38:	4b0f      	ldr	r3, [pc, #60]	; (801bf78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801bf3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bf3e:	4b0f      	ldr	r3, [pc, #60]	; (801bf7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801bf40:	8081      	strh	r1, [r0, #4]
 801bf42:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf46:	2300      	movs	r3, #0
 801bf48:	80c2      	strh	r2, [r0, #6]
 801bf4a:	8003      	strh	r3, [r0, #0]
 801bf4c:	8043      	strh	r3, [r0, #2]
 801bf4e:	e7ee      	b.n	801bf2e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bf50:	2300      	movs	r3, #0
 801bf52:	8003      	strh	r3, [r0, #0]
 801bf54:	8043      	strh	r3, [r0, #2]
 801bf56:	8083      	strh	r3, [r0, #4]
 801bf58:	e7d8      	b.n	801bf0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801bf5a:	bf00      	nop
 801bf5c:	2000b490 	.word	0x2000b490
 801bf60:	0802a0dc 	.word	0x0802a0dc
 801bf64:	0802af14 	.word	0x0802af14
 801bf68:	0802ae50 	.word	0x0802ae50
 801bf6c:	2000b488 	.word	0x2000b488
 801bf70:	2000b48c 	.word	0x2000b48c
 801bf74:	2000b470 	.word	0x2000b470
 801bf78:	2000b3bc 	.word	0x2000b3bc
 801bf7c:	2000b3be 	.word	0x2000b3be

0801bf80 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bf80:	b508      	push	{r3, lr}
 801bf82:	4b12      	ldr	r3, [pc, #72]	; (801bfcc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bf84:	6819      	ldr	r1, [r3, #0]
 801bf86:	b931      	cbnz	r1, 801bf96 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bf88:	4b11      	ldr	r3, [pc, #68]	; (801bfd0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bf8a:	f44f 7151 	mov.w	r1, #836	; 0x344
 801bf8e:	4a11      	ldr	r2, [pc, #68]	; (801bfd4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bf90:	4811      	ldr	r0, [pc, #68]	; (801bfd8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bf92:	f009 fd75 	bl	8025a80 <__assert_func>
 801bf96:	8803      	ldrh	r3, [r0, #0]
 801bf98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf9c:	4293      	cmp	r3, r2
 801bf9e:	d012      	beq.n	801bfc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bfa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	d103      	bne.n	801bfb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bfa8:	4b0c      	ldr	r3, [pc, #48]	; (801bfdc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bfae:	bd08      	pop	{r3, pc}
 801bfb0:	4a0b      	ldr	r2, [pc, #44]	; (801bfe0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bfb2:	6812      	ldr	r2, [r2, #0]
 801bfb4:	b11a      	cbz	r2, 801bfbe <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bfb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bfba:	2800      	cmp	r0, #0
 801bfbc:	d1f7      	bne.n	801bfae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bfbe:	2214      	movs	r2, #20
 801bfc0:	4353      	muls	r3, r2
 801bfc2:	58c8      	ldr	r0, [r1, r3]
 801bfc4:	e7f3      	b.n	801bfae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bfc6:	2000      	movs	r0, #0
 801bfc8:	e7f1      	b.n	801bfae <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bfca:	bf00      	nop
 801bfcc:	2000b490 	.word	0x2000b490
 801bfd0:	0802a0dc 	.word	0x0802a0dc
 801bfd4:	0802af4a 	.word	0x0802af4a
 801bfd8:	0802ae50 	.word	0x0802ae50
 801bfdc:	2000b3c8 	.word	0x2000b3c8
 801bfe0:	2000b46c 	.word	0x2000b46c

0801bfe4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bfe4:	8802      	ldrh	r2, [r0, #0]
 801bfe6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bfea:	429a      	cmp	r2, r3
 801bfec:	d840      	bhi.n	801c070 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bfee:	4b21      	ldr	r3, [pc, #132]	; (801c074 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bff0:	881b      	ldrh	r3, [r3, #0]
 801bff2:	429a      	cmp	r2, r3
 801bff4:	d220      	bcs.n	801c038 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bff6:	4b20      	ldr	r3, [pc, #128]	; (801c078 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bff8:	6819      	ldr	r1, [r3, #0]
 801bffa:	2314      	movs	r3, #20
 801bffc:	fb03 1302 	mla	r3, r3, r2, r1
 801c000:	6858      	ldr	r0, [r3, #4]
 801c002:	2800      	cmp	r0, #0
 801c004:	d035      	beq.n	801c072 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c006:	491d      	ldr	r1, [pc, #116]	; (801c07c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801c008:	6809      	ldr	r1, [r1, #0]
 801c00a:	2900      	cmp	r1, #0
 801c00c:	d031      	beq.n	801c072 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c00e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c012:	b371      	cbz	r1, 801c072 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c014:	895a      	ldrh	r2, [r3, #10]
 801c016:	8918      	ldrh	r0, [r3, #8]
 801c018:	4350      	muls	r0, r2
 801c01a:	7c5a      	ldrb	r2, [r3, #17]
 801c01c:	7cdb      	ldrb	r3, [r3, #19]
 801c01e:	0952      	lsrs	r2, r2, #5
 801c020:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801c024:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c028:	2b0b      	cmp	r3, #11
 801c02a:	bf18      	it	ne
 801c02c:	0040      	lslne	r0, r0, #1
 801c02e:	3003      	adds	r0, #3
 801c030:	f020 0003 	bic.w	r0, r0, #3
 801c034:	4408      	add	r0, r1
 801c036:	4770      	bx	lr
 801c038:	4911      	ldr	r1, [pc, #68]	; (801c080 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c03a:	8809      	ldrh	r1, [r1, #0]
 801c03c:	4419      	add	r1, r3
 801c03e:	428a      	cmp	r2, r1
 801c040:	da16      	bge.n	801c070 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801c042:	4910      	ldr	r1, [pc, #64]	; (801c084 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801c044:	1ad3      	subs	r3, r2, r3
 801c046:	200e      	movs	r0, #14
 801c048:	6809      	ldr	r1, [r1, #0]
 801c04a:	fb00 1303 	mla	r3, r0, r3, r1
 801c04e:	7b19      	ldrb	r1, [r3, #12]
 801c050:	f001 011f 	and.w	r1, r1, #31
 801c054:	290b      	cmp	r1, #11
 801c056:	d10b      	bne.n	801c070 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801c058:	8919      	ldrh	r1, [r3, #8]
 801c05a:	8958      	ldrh	r0, [r3, #10]
 801c05c:	4b07      	ldr	r3, [pc, #28]	; (801c07c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801c05e:	4348      	muls	r0, r1
 801c060:	6819      	ldr	r1, [r3, #0]
 801c062:	3003      	adds	r0, #3
 801c064:	f020 0303 	bic.w	r3, r0, #3
 801c068:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c06c:	4418      	add	r0, r3
 801c06e:	4770      	bx	lr
 801c070:	2000      	movs	r0, #0
 801c072:	4770      	bx	lr
 801c074:	2000b488 	.word	0x2000b488
 801c078:	2000b490 	.word	0x2000b490
 801c07c:	2000b46c 	.word	0x2000b46c
 801c080:	2000b48c 	.word	0x2000b48c
 801c084:	2000b470 	.word	0x2000b470

0801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c088:	4b19      	ldr	r3, [pc, #100]	; (801c0f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c08a:	6819      	ldr	r1, [r3, #0]
 801c08c:	8803      	ldrh	r3, [r0, #0]
 801c08e:	b1e9      	cbz	r1, 801c0cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c090:	4a18      	ldr	r2, [pc, #96]	; (801c0f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c092:	8812      	ldrh	r2, [r2, #0]
 801c094:	429a      	cmp	r2, r3
 801c096:	d90a      	bls.n	801c0ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c098:	2214      	movs	r2, #20
 801c09a:	fb02 1303 	mla	r3, r2, r3, r1
 801c09e:	7c58      	ldrb	r0, [r3, #17]
 801c0a0:	0942      	lsrs	r2, r0, #5
 801c0a2:	7cd8      	ldrb	r0, [r3, #19]
 801c0a4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c0a8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c0ac:	4770      	bx	lr
 801c0ae:	4912      	ldr	r1, [pc, #72]	; (801c0f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801c0b0:	8809      	ldrh	r1, [r1, #0]
 801c0b2:	4411      	add	r1, r2
 801c0b4:	428b      	cmp	r3, r1
 801c0b6:	da09      	bge.n	801c0cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c0b8:	1a9b      	subs	r3, r3, r2
 801c0ba:	4a10      	ldr	r2, [pc, #64]	; (801c0fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801c0bc:	210e      	movs	r1, #14
 801c0be:	6812      	ldr	r2, [r2, #0]
 801c0c0:	fb01 2303 	mla	r3, r1, r3, r2
 801c0c4:	7b18      	ldrb	r0, [r3, #12]
 801c0c6:	f000 001f 	and.w	r0, r0, #31
 801c0ca:	4770      	bx	lr
 801c0cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c0d0:	4293      	cmp	r3, r2
 801c0d2:	d10a      	bne.n	801c0ea <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801c0d4:	4b0a      	ldr	r3, [pc, #40]	; (801c100 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c0dc:	b10a      	cbz	r2, 801c0e2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c0de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c0e0:	b900      	cbnz	r0, 801c0e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c0e2:	6898      	ldr	r0, [r3, #8]
 801c0e4:	6803      	ldr	r3, [r0, #0]
 801c0e6:	6a1b      	ldr	r3, [r3, #32]
 801c0e8:	4718      	bx	r3
 801c0ea:	2000      	movs	r0, #0
 801c0ec:	4770      	bx	lr
 801c0ee:	bf00      	nop
 801c0f0:	2000b490 	.word	0x2000b490
 801c0f4:	2000b488 	.word	0x2000b488
 801c0f8:	2000b48c 	.word	0x2000b48c
 801c0fc:	2000b470 	.word	0x2000b470
 801c100:	2000b3c8 	.word	0x2000b3c8

0801c104 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c104:	2018      	movs	r0, #24
 801c106:	4770      	bx	lr

0801c108 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c108:	2001      	movs	r0, #1
 801c10a:	4770      	bx	lr

0801c10c <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801c10c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c110:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801c114:	4770      	bx	lr

0801c116 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801c116:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801c11a:	4770      	bx	lr

0801c11c <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801c11c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801c120:	4770      	bx	lr

0801c122 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801c122:	b2c8      	uxtb	r0, r1
 801c124:	4770      	bx	lr

0801c126 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c12a:	b085      	sub	sp, #20
 801c12c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801c12e:	9203      	str	r2, [sp, #12]
 801c130:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c134:	6878      	ldr	r0, [r7, #4]
 801c136:	9201      	str	r2, [sp, #4]
 801c138:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801c13a:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801c13e:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801c142:	fa1f fc84 	uxth.w	ip, r4
 801c146:	43e4      	mvns	r4, r4
 801c148:	9100      	str	r1, [sp, #0]
 801c14a:	b2e4      	uxtb	r4, r4
 801c14c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c150:	fb00 2505 	mla	r5, r0, r5, r2
 801c154:	683a      	ldr	r2, [r7, #0]
 801c156:	6877      	ldr	r7, [r6, #4]
 801c158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c15c:	3704      	adds	r7, #4
 801c15e:	4415      	add	r5, r2
 801c160:	6832      	ldr	r2, [r6, #0]
 801c162:	9202      	str	r2, [sp, #8]
 801c164:	9a00      	ldr	r2, [sp, #0]
 801c166:	2a00      	cmp	r2, #0
 801c168:	dc03      	bgt.n	801c172 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c16a:	9a03      	ldr	r2, [sp, #12]
 801c16c:	2a00      	cmp	r2, #0
 801c16e:	f340 8116 	ble.w	801c39e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c174:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c178:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c17a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c17e:	2b00      	cmp	r3, #0
 801c180:	dd0f      	ble.n	801c1a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c182:	1406      	asrs	r6, r0, #16
 801c184:	d406      	bmi.n	801c194 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c186:	4546      	cmp	r6, r8
 801c188:	da04      	bge.n	801c194 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c18a:	1416      	asrs	r6, r2, #16
 801c18c:	d402      	bmi.n	801c194 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c18e:	9901      	ldr	r1, [sp, #4]
 801c190:	428e      	cmp	r6, r1
 801c192:	db07      	blt.n	801c1a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c194:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c196:	3b01      	subs	r3, #1
 801c198:	3503      	adds	r5, #3
 801c19a:	4408      	add	r0, r1
 801c19c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c19e:	440a      	add	r2, r1
 801c1a0:	e7ed      	b.n	801c17e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801c1a2:	d011      	beq.n	801c1c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801c1a4:	1e5e      	subs	r6, r3, #1
 801c1a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c1a8:	fb01 0e06 	mla	lr, r1, r6, r0
 801c1ac:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c1b0:	d548      	bpl.n	801c244 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801c1b2:	4699      	mov	r9, r3
 801c1b4:	462e      	mov	r6, r5
 801c1b6:	f1b9 0f00 	cmp.w	r9, #0
 801c1ba:	f300 809e 	bgt.w	801c2fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801c1be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1c6:	441d      	add	r5, r3
 801c1c8:	9b00      	ldr	r3, [sp, #0]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	f340 80e7 	ble.w	801c39e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c1d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c1d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1de:	eef0 6a62 	vmov.f32	s13, s5
 801c1e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c1e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1ee:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c1f2:	eef0 6a43 	vmov.f32	s13, s6
 801c1f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1fa:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c1fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c202:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c206:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c20a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c20e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c212:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c216:	ee12 2a90 	vmov	r2, s5
 801c21a:	eef0 2a47 	vmov.f32	s5, s14
 801c21e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c222:	ee13 2a10 	vmov	r2, s6
 801c226:	9311      	str	r3, [sp, #68]	; 0x44
 801c228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c22a:	eeb0 3a67 	vmov.f32	s6, s15
 801c22e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c232:	9312      	str	r3, [sp, #72]	; 0x48
 801c234:	9b00      	ldr	r3, [sp, #0]
 801c236:	9a03      	ldr	r2, [sp, #12]
 801c238:	3b01      	subs	r3, #1
 801c23a:	9300      	str	r3, [sp, #0]
 801c23c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c23e:	bf08      	it	eq
 801c240:	4613      	moveq	r3, r2
 801c242:	e78f      	b.n	801c164 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801c244:	45c6      	cmp	lr, r8
 801c246:	dab4      	bge.n	801c1b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c248:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c24a:	fb01 2606 	mla	r6, r1, r6, r2
 801c24e:	1436      	asrs	r6, r6, #16
 801c250:	d4af      	bmi.n	801c1b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c252:	9901      	ldr	r1, [sp, #4]
 801c254:	428e      	cmp	r6, r1
 801c256:	daac      	bge.n	801c1b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801c258:	1cee      	adds	r6, r5, #3
 801c25a:	4699      	mov	r9, r3
 801c25c:	f1b9 0f00 	cmp.w	r9, #0
 801c260:	f106 0603 	add.w	r6, r6, #3
 801c264:	ddab      	ble.n	801c1be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c266:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c26a:	9902      	ldr	r1, [sp, #8]
 801c26c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c270:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c274:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c278:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c27a:	fb1b fb04 	smulbb	fp, fp, r4
 801c27e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c282:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c286:	4408      	add	r0, r1
 801c288:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c28a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c28e:	440a      	add	r2, r1
 801c290:	eb07 0a0e 	add.w	sl, r7, lr
 801c294:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c298:	fb0e be0c 	mla	lr, lr, ip, fp
 801c29c:	fa1f fe8e 	uxth.w	lr, lr
 801c2a0:	f10e 0b01 	add.w	fp, lr, #1
 801c2a4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c2a8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c2ac:	fb1b fb04 	smulbb	fp, fp, r4
 801c2b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c2b4:	f806 ec06 	strb.w	lr, [r6, #-6]
 801c2b8:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c2bc:	fb0e be0c 	mla	lr, lr, ip, fp
 801c2c0:	fa1f fe8e 	uxth.w	lr, lr
 801c2c4:	f10e 0b01 	add.w	fp, lr, #1
 801c2c8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c2cc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c2d0:	f806 ec05 	strb.w	lr, [r6, #-5]
 801c2d4:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c2d8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c2dc:	fb1a fa04 	smulbb	sl, sl, r4
 801c2e0:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c2e4:	fa1f fe8e 	uxth.w	lr, lr
 801c2e8:	f10e 0a01 	add.w	sl, lr, #1
 801c2ec:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c2f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c2f4:	f806 ec04 	strb.w	lr, [r6, #-4]
 801c2f8:	e7b0      	b.n	801c25c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c2fa:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c2fe:	d446      	bmi.n	801c38e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c300:	45c2      	cmp	sl, r8
 801c302:	da44      	bge.n	801c38e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c304:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801c308:	d441      	bmi.n	801c38e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c30a:	9901      	ldr	r1, [sp, #4]
 801c30c:	458e      	cmp	lr, r1
 801c30e:	da3e      	bge.n	801c38e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c310:	9902      	ldr	r1, [sp, #8]
 801c312:	f896 b000 	ldrb.w	fp, [r6]
 801c316:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c31a:	fb1b fb04 	smulbb	fp, fp, r4
 801c31e:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c322:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c326:	eb07 0a0e 	add.w	sl, r7, lr
 801c32a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c32e:	fb0e be0c 	mla	lr, lr, ip, fp
 801c332:	fa1f fe8e 	uxth.w	lr, lr
 801c336:	f10e 0b01 	add.w	fp, lr, #1
 801c33a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c33e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c342:	fb1b fb04 	smulbb	fp, fp, r4
 801c346:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c34a:	f886 e000 	strb.w	lr, [r6]
 801c34e:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c352:	fb0e be0c 	mla	lr, lr, ip, fp
 801c356:	fa1f fe8e 	uxth.w	lr, lr
 801c35a:	f10e 0b01 	add.w	fp, lr, #1
 801c35e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c362:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c366:	f886 e001 	strb.w	lr, [r6, #1]
 801c36a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c36e:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c372:	fb1a fa04 	smulbb	sl, sl, r4
 801c376:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c37a:	fa1f fe8e 	uxth.w	lr, lr
 801c37e:	f10e 0a01 	add.w	sl, lr, #1
 801c382:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c386:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c38a:	f886 e002 	strb.w	lr, [r6, #2]
 801c38e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c390:	3603      	adds	r6, #3
 801c392:	f109 39ff 	add.w	r9, r9, #4294967295
 801c396:	4408      	add	r0, r1
 801c398:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c39a:	440a      	add	r2, r1
 801c39c:	e70b      	b.n	801c1b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801c39e:	b005      	add	sp, #20
 801c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3a8:	b085      	sub	sp, #20
 801c3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c3ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c3b0:	9203      	str	r2, [sp, #12]
 801c3b2:	6870      	ldr	r0, [r6, #4]
 801c3b4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c3b6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c3ba:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c3be:	9101      	str	r1, [sp, #4]
 801c3c0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c3c4:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801c3c8:	fb00 2404 	mla	r4, r0, r4, r2
 801c3cc:	6832      	ldr	r2, [r6, #0]
 801c3ce:	686e      	ldr	r6, [r5, #4]
 801c3d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c3d4:	3604      	adds	r6, #4
 801c3d6:	4414      	add	r4, r2
 801c3d8:	682a      	ldr	r2, [r5, #0]
 801c3da:	9202      	str	r2, [sp, #8]
 801c3dc:	9a01      	ldr	r2, [sp, #4]
 801c3de:	2a00      	cmp	r2, #0
 801c3e0:	dc03      	bgt.n	801c3ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801c3e2:	9a03      	ldr	r2, [sp, #12]
 801c3e4:	2a00      	cmp	r2, #0
 801c3e6:	f340 80b2 	ble.w	801c54e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c3ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3ec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c3f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c3f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	dd0c      	ble.n	801c414 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c3fa:	1405      	asrs	r5, r0, #16
 801c3fc:	d405      	bmi.n	801c40a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c3fe:	4575      	cmp	r5, lr
 801c400:	da03      	bge.n	801c40a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c402:	1415      	asrs	r5, r2, #16
 801c404:	d401      	bmi.n	801c40a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c406:	4545      	cmp	r5, r8
 801c408:	db05      	blt.n	801c416 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c40a:	4460      	add	r0, ip
 801c40c:	443a      	add	r2, r7
 801c40e:	3b01      	subs	r3, #1
 801c410:	3403      	adds	r4, #3
 801c412:	e7f0      	b.n	801c3f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801c414:	d03d      	beq.n	801c492 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c416:	1e5d      	subs	r5, r3, #1
 801c418:	fb0c 0905 	mla	r9, ip, r5, r0
 801c41c:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c420:	d42c      	bmi.n	801c47c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c422:	45f1      	cmp	r9, lr
 801c424:	da2a      	bge.n	801c47c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c426:	fb07 2505 	mla	r5, r7, r5, r2
 801c42a:	142d      	asrs	r5, r5, #16
 801c42c:	d426      	bmi.n	801c47c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c42e:	4545      	cmp	r5, r8
 801c430:	da24      	bge.n	801c47c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c432:	1ce5      	adds	r5, r4, #3
 801c434:	469a      	mov	sl, r3
 801c436:	f1ba 0f00 	cmp.w	sl, #0
 801c43a:	f105 0503 	add.w	r5, r5, #3
 801c43e:	dd23      	ble.n	801c488 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c440:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c444:	9902      	ldr	r1, [sp, #8]
 801c446:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c44a:	443a      	add	r2, r7
 801c44c:	fb0e 1909 	mla	r9, lr, r9, r1
 801c450:	4460      	add	r0, ip
 801c452:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c456:	f819 900b 	ldrb.w	r9, [r9, fp]
 801c45a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c45e:	eb06 0b09 	add.w	fp, r6, r9
 801c462:	f816 9009 	ldrb.w	r9, [r6, r9]
 801c466:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c46a:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c46e:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c472:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c476:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c47a:	e7dc      	b.n	801c436 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c47c:	2500      	movs	r5, #0
 801c47e:	eba3 0905 	sub.w	r9, r3, r5
 801c482:	f1b9 0f00 	cmp.w	r9, #0
 801c486:	dc3c      	bgt.n	801c502 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801c488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c48c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c490:	441c      	add	r4, r3
 801c492:	9b01      	ldr	r3, [sp, #4]
 801c494:	2b00      	cmp	r3, #0
 801c496:	dd5a      	ble.n	801c54e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c498:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c49e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4a2:	eeb0 6a62 	vmov.f32	s12, s5
 801c4a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4b2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c4b6:	eeb0 6a43 	vmov.f32	s12, s6
 801c4ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4be:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c4c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c4d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c4da:	ee12 2a90 	vmov	r2, s5
 801c4de:	eef0 2a47 	vmov.f32	s5, s14
 801c4e2:	fb92 fcf3 	sdiv	ip, r2, r3
 801c4e6:	ee13 2a10 	vmov	r2, s6
 801c4ea:	eeb0 3a67 	vmov.f32	s6, s15
 801c4ee:	fb92 f7f3 	sdiv	r7, r2, r3
 801c4f2:	9b01      	ldr	r3, [sp, #4]
 801c4f4:	9a03      	ldr	r2, [sp, #12]
 801c4f6:	3b01      	subs	r3, #1
 801c4f8:	9301      	str	r3, [sp, #4]
 801c4fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4fc:	bf08      	it	eq
 801c4fe:	4613      	moveq	r3, r2
 801c500:	e76c      	b.n	801c3dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801c502:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c506:	d41e      	bmi.n	801c546 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c508:	45f2      	cmp	sl, lr
 801c50a:	da1c      	bge.n	801c546 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c50c:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c510:	d419      	bmi.n	801c546 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c512:	45c1      	cmp	r9, r8
 801c514:	da17      	bge.n	801c546 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c516:	9902      	ldr	r1, [sp, #8]
 801c518:	fb0e 1909 	mla	r9, lr, r9, r1
 801c51c:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c520:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c524:	f816 b009 	ldrb.w	fp, [r6, r9]
 801c528:	eb06 0a09 	add.w	sl, r6, r9
 801c52c:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801c530:	f804 b009 	strb.w	fp, [r4, r9]
 801c534:	44a1      	add	r9, r4
 801c536:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c53a:	f889 b001 	strb.w	fp, [r9, #1]
 801c53e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c542:	f889 a002 	strb.w	sl, [r9, #2]
 801c546:	4460      	add	r0, ip
 801c548:	443a      	add	r2, r7
 801c54a:	3501      	adds	r5, #1
 801c54c:	e797      	b.n	801c47e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801c54e:	b005      	add	sp, #20
 801c550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c554 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c558:	b087      	sub	sp, #28
 801c55a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c55e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c560:	9204      	str	r2, [sp, #16]
 801c562:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c566:	6870      	ldr	r0, [r6, #4]
 801c568:	9205      	str	r2, [sp, #20]
 801c56a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c56c:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c570:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c574:	9101      	str	r1, [sp, #4]
 801c576:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c57a:	fb00 2505 	mla	r5, r0, r5, r2
 801c57e:	6832      	ldr	r2, [r6, #0]
 801c580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c584:	4415      	add	r5, r2
 801c586:	6822      	ldr	r2, [r4, #0]
 801c588:	9202      	str	r2, [sp, #8]
 801c58a:	6862      	ldr	r2, [r4, #4]
 801c58c:	3204      	adds	r2, #4
 801c58e:	9203      	str	r2, [sp, #12]
 801c590:	9a01      	ldr	r2, [sp, #4]
 801c592:	2a00      	cmp	r2, #0
 801c594:	dc03      	bgt.n	801c59e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c596:	9a04      	ldr	r2, [sp, #16]
 801c598:	2a00      	cmp	r2, #0
 801c59a:	f340 8124 	ble.w	801c7e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c59e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c5a0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c5a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c5a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	dd0e      	ble.n	801c5cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c5ae:	1422      	asrs	r2, r4, #16
 801c5b0:	d405      	bmi.n	801c5be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c5b2:	4572      	cmp	r2, lr
 801c5b4:	da03      	bge.n	801c5be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c5b6:	1402      	asrs	r2, r0, #16
 801c5b8:	d401      	bmi.n	801c5be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c5ba:	4542      	cmp	r2, r8
 801c5bc:	db07      	blt.n	801c5ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c5be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c5c0:	3b01      	subs	r3, #1
 801c5c2:	3503      	adds	r5, #3
 801c5c4:	4414      	add	r4, r2
 801c5c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c5c8:	4410      	add	r0, r2
 801c5ca:	e7ee      	b.n	801c5aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c5cc:	d010      	beq.n	801c5f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c5ce:	1e5a      	subs	r2, r3, #1
 801c5d0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c5d2:	fb06 4602 	mla	r6, r6, r2, r4
 801c5d6:	1436      	asrs	r6, r6, #16
 801c5d8:	d546      	bpl.n	801c668 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801c5da:	4699      	mov	r9, r3
 801c5dc:	462f      	mov	r7, r5
 801c5de:	f1b9 0f00 	cmp.w	r9, #0
 801c5e2:	f300 80a5 	bgt.w	801c730 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c5e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5ee:	441d      	add	r5, r3
 801c5f0:	9b01      	ldr	r3, [sp, #4]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	f340 80f7 	ble.w	801c7e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c5f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c602:	eeb0 6a62 	vmov.f32	s12, s5
 801c606:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c60a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c60e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c612:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c616:	eeb0 6a43 	vmov.f32	s12, s6
 801c61a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c61e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c622:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c626:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c62a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c62e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c632:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c636:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c63a:	ee12 2a90 	vmov	r2, s5
 801c63e:	eef0 2a47 	vmov.f32	s5, s14
 801c642:	fb92 f3f3 	sdiv	r3, r2, r3
 801c646:	ee13 2a10 	vmov	r2, s6
 801c64a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c64e:	eeb0 3a67 	vmov.f32	s6, s15
 801c652:	fb92 f3f3 	sdiv	r3, r2, r3
 801c656:	9314      	str	r3, [sp, #80]	; 0x50
 801c658:	9b01      	ldr	r3, [sp, #4]
 801c65a:	9a04      	ldr	r2, [sp, #16]
 801c65c:	3b01      	subs	r3, #1
 801c65e:	9301      	str	r3, [sp, #4]
 801c660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c662:	bf08      	it	eq
 801c664:	4613      	moveq	r3, r2
 801c666:	e793      	b.n	801c590 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c668:	4576      	cmp	r6, lr
 801c66a:	dab6      	bge.n	801c5da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c66c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c66e:	fb06 0202 	mla	r2, r6, r2, r0
 801c672:	1412      	asrs	r2, r2, #16
 801c674:	d4b1      	bmi.n	801c5da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c676:	4542      	cmp	r2, r8
 801c678:	daaf      	bge.n	801c5da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c67a:	1cef      	adds	r7, r5, #3
 801c67c:	4699      	mov	r9, r3
 801c67e:	f1b9 0f00 	cmp.w	r9, #0
 801c682:	ddb0      	ble.n	801c5e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c684:	9902      	ldr	r1, [sp, #8]
 801c686:	1402      	asrs	r2, r0, #16
 801c688:	1426      	asrs	r6, r4, #16
 801c68a:	fb0e 1202 	mla	r2, lr, r2, r1
 801c68e:	9903      	ldr	r1, [sp, #12]
 801c690:	5d92      	ldrb	r2, [r2, r6]
 801c692:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c696:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c69a:	d041      	beq.n	801c720 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c69c:	9a05      	ldr	r2, [sp, #20]
 801c69e:	fa5f fb86 	uxtb.w	fp, r6
 801c6a2:	fb02 fc0c 	mul.w	ip, r2, ip
 801c6a6:	f10c 0201 	add.w	r2, ip, #1
 801c6aa:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c6ae:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c6b2:	1212      	asrs	r2, r2, #8
 801c6b4:	fa1f fa82 	uxth.w	sl, r2
 801c6b8:	43d2      	mvns	r2, r2
 801c6ba:	fb1b fb0a 	smulbb	fp, fp, sl
 801c6be:	b2d2      	uxtb	r2, r2
 801c6c0:	fb0c bc02 	mla	ip, ip, r2, fp
 801c6c4:	fa1f fc8c 	uxth.w	ip, ip
 801c6c8:	f10c 0b01 	add.w	fp, ip, #1
 801c6cc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c6d0:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c6d4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c6d8:	fb1b fb0a 	smulbb	fp, fp, sl
 801c6dc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c6e0:	fb16 fa0a 	smulbb	sl, r6, sl
 801c6e4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c6e8:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c6ec:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c6f0:	fb06 aa02 	mla	sl, r6, r2, sl
 801c6f4:	fb0c bc02 	mla	ip, ip, r2, fp
 801c6f8:	fa1f fa8a 	uxth.w	sl, sl
 801c6fc:	fa1f fc8c 	uxth.w	ip, ip
 801c700:	f10a 0601 	add.w	r6, sl, #1
 801c704:	f10c 0b01 	add.w	fp, ip, #1
 801c708:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c70c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c710:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c714:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c718:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c71c:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c722:	3703      	adds	r7, #3
 801c724:	f109 39ff 	add.w	r9, r9, #4294967295
 801c728:	4414      	add	r4, r2
 801c72a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c72c:	4410      	add	r0, r2
 801c72e:	e7a6      	b.n	801c67e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c730:	1426      	asrs	r6, r4, #16
 801c732:	d450      	bmi.n	801c7d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c734:	4576      	cmp	r6, lr
 801c736:	da4e      	bge.n	801c7d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c738:	1402      	asrs	r2, r0, #16
 801c73a:	d44c      	bmi.n	801c7d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c73c:	4542      	cmp	r2, r8
 801c73e:	da4a      	bge.n	801c7d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c740:	9902      	ldr	r1, [sp, #8]
 801c742:	fb0e 1202 	mla	r2, lr, r2, r1
 801c746:	9903      	ldr	r1, [sp, #12]
 801c748:	5d92      	ldrb	r2, [r2, r6]
 801c74a:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c74e:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c752:	d040      	beq.n	801c7d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c754:	9a05      	ldr	r2, [sp, #20]
 801c756:	fa5f fb86 	uxtb.w	fp, r6
 801c75a:	fb02 fc0c 	mul.w	ip, r2, ip
 801c75e:	f10c 0201 	add.w	r2, ip, #1
 801c762:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c766:	f897 c000 	ldrb.w	ip, [r7]
 801c76a:	1212      	asrs	r2, r2, #8
 801c76c:	fa1f fa82 	uxth.w	sl, r2
 801c770:	43d2      	mvns	r2, r2
 801c772:	fb1b fb0a 	smulbb	fp, fp, sl
 801c776:	b2d2      	uxtb	r2, r2
 801c778:	fb0c bc02 	mla	ip, ip, r2, fp
 801c77c:	fa1f fc8c 	uxth.w	ip, ip
 801c780:	f10c 0b01 	add.w	fp, ip, #1
 801c784:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c788:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c78c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c790:	fb1b fb0a 	smulbb	fp, fp, sl
 801c794:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c798:	fb16 fa0a 	smulbb	sl, r6, sl
 801c79c:	78be      	ldrb	r6, [r7, #2]
 801c79e:	f887 c000 	strb.w	ip, [r7]
 801c7a2:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c7a6:	fb06 aa02 	mla	sl, r6, r2, sl
 801c7aa:	fb0c bc02 	mla	ip, ip, r2, fp
 801c7ae:	fa1f fa8a 	uxth.w	sl, sl
 801c7b2:	fa1f fc8c 	uxth.w	ip, ip
 801c7b6:	f10a 0601 	add.w	r6, sl, #1
 801c7ba:	f10c 0b01 	add.w	fp, ip, #1
 801c7be:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c7c2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c7c6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c7ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c7ce:	f887 a002 	strb.w	sl, [r7, #2]
 801c7d2:	f887 c001 	strb.w	ip, [r7, #1]
 801c7d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c7d8:	3703      	adds	r7, #3
 801c7da:	f109 39ff 	add.w	r9, r9, #4294967295
 801c7de:	4414      	add	r4, r2
 801c7e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c7e2:	4410      	add	r0, r2
 801c7e4:	e6fb      	b.n	801c5de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c7e6:	b007      	add	sp, #28
 801c7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f0:	b085      	sub	sp, #20
 801c7f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c7f8:	9203      	str	r2, [sp, #12]
 801c7fa:	6870      	ldr	r0, [r6, #4]
 801c7fc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c7fe:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c802:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c806:	9100      	str	r1, [sp, #0]
 801c808:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c80c:	fb00 2404 	mla	r4, r0, r4, r2
 801c810:	6832      	ldr	r2, [r6, #0]
 801c812:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c816:	4414      	add	r4, r2
 801c818:	682a      	ldr	r2, [r5, #0]
 801c81a:	9201      	str	r2, [sp, #4]
 801c81c:	686a      	ldr	r2, [r5, #4]
 801c81e:	3204      	adds	r2, #4
 801c820:	9202      	str	r2, [sp, #8]
 801c822:	9a00      	ldr	r2, [sp, #0]
 801c824:	2a00      	cmp	r2, #0
 801c826:	dc03      	bgt.n	801c830 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801c828:	9a03      	ldr	r2, [sp, #12]
 801c82a:	2a00      	cmp	r2, #0
 801c82c:	f340 8131 	ble.w	801ca92 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c832:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c836:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c838:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	dd0e      	ble.n	801c85e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c840:	1405      	asrs	r5, r0, #16
 801c842:	d405      	bmi.n	801c850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c844:	4575      	cmp	r5, lr
 801c846:	da03      	bge.n	801c850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c848:	1415      	asrs	r5, r2, #16
 801c84a:	d401      	bmi.n	801c850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c84c:	4545      	cmp	r5, r8
 801c84e:	db07      	blt.n	801c860 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c850:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c852:	3b01      	subs	r3, #1
 801c854:	3403      	adds	r4, #3
 801c856:	4428      	add	r0, r5
 801c858:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c85a:	442a      	add	r2, r5
 801c85c:	e7ee      	b.n	801c83c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801c85e:	d06f      	beq.n	801c940 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c860:	1e5d      	subs	r5, r3, #1
 801c862:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c864:	fb06 0605 	mla	r6, r6, r5, r0
 801c868:	1436      	asrs	r6, r6, #16
 801c86a:	d460      	bmi.n	801c92e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c86c:	4576      	cmp	r6, lr
 801c86e:	da5e      	bge.n	801c92e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c870:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c872:	fb06 2505 	mla	r5, r6, r5, r2
 801c876:	142d      	asrs	r5, r5, #16
 801c878:	d459      	bmi.n	801c92e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c87a:	4545      	cmp	r5, r8
 801c87c:	da57      	bge.n	801c92e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c87e:	1ce5      	adds	r5, r4, #3
 801c880:	469a      	mov	sl, r3
 801c882:	f1ba 0f00 	cmp.w	sl, #0
 801c886:	dd56      	ble.n	801c936 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801c888:	9901      	ldr	r1, [sp, #4]
 801c88a:	1416      	asrs	r6, r2, #16
 801c88c:	1407      	asrs	r7, r0, #16
 801c88e:	fb0e 1606 	mla	r6, lr, r6, r1
 801c892:	9902      	ldr	r1, [sp, #8]
 801c894:	5df6      	ldrb	r6, [r6, r7]
 801c896:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801c89a:	0e37      	lsrs	r7, r6, #24
 801c89c:	2fff      	cmp	r7, #255	; 0xff
 801c89e:	f000 80ef 	beq.w	801ca80 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c8a2:	fa5f fc87 	uxtb.w	ip, r7
 801c8a6:	b3d7      	cbz	r7, 801c91e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c8a8:	fa1f f78c 	uxth.w	r7, ip
 801c8ac:	ea6f 0c0c 	mvn.w	ip, ip
 801c8b0:	fa5f fb86 	uxtb.w	fp, r6
 801c8b4:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c8b8:	fa5f fc8c 	uxtb.w	ip, ip
 801c8bc:	fb1b fb07 	smulbb	fp, fp, r7
 801c8c0:	fb09 b90c 	mla	r9, r9, ip, fp
 801c8c4:	fa1f f989 	uxth.w	r9, r9
 801c8c8:	f109 0b01 	add.w	fp, r9, #1
 801c8cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8d0:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c8d4:	fb1b fb0c 	smulbb	fp, fp, ip
 801c8d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8dc:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c8e0:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c8e4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c8e8:	fb09 b907 	mla	r9, r9, r7, fp
 801c8ec:	fa1f f989 	uxth.w	r9, r9
 801c8f0:	f109 0b01 	add.w	fp, r9, #1
 801c8f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8fc:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c900:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c904:	fb19 fc0c 	smulbb	ip, r9, ip
 801c908:	fb06 c607 	mla	r6, r6, r7, ip
 801c90c:	b2b6      	uxth	r6, r6
 801c90e:	f106 0c01 	add.w	ip, r6, #1
 801c912:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801c916:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c91a:	f805 cc01 	strb.w	ip, [r5, #-1]
 801c91e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c920:	3503      	adds	r5, #3
 801c922:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c926:	4408      	add	r0, r1
 801c928:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c92a:	440a      	add	r2, r1
 801c92c:	e7a9      	b.n	801c882 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c92e:	2600      	movs	r6, #0
 801c930:	1b9d      	subs	r5, r3, r6
 801c932:	2d00      	cmp	r5, #0
 801c934:	dc40      	bgt.n	801c9b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c93a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c93e:	441c      	add	r4, r3
 801c940:	9b00      	ldr	r3, [sp, #0]
 801c942:	2b00      	cmp	r3, #0
 801c944:	f340 80a5 	ble.w	801ca92 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c948:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c94c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c94e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c952:	eeb0 6a62 	vmov.f32	s12, s5
 801c956:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c95a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c95e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c962:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c966:	eeb0 6a43 	vmov.f32	s12, s6
 801c96a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c96e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c972:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c976:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c97a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c97e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c982:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c986:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c98a:	ee12 2a90 	vmov	r2, s5
 801c98e:	eef0 2a47 	vmov.f32	s5, s14
 801c992:	fb92 f3f3 	sdiv	r3, r2, r3
 801c996:	ee13 2a10 	vmov	r2, s6
 801c99a:	9311      	str	r3, [sp, #68]	; 0x44
 801c99c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c99e:	eeb0 3a67 	vmov.f32	s6, s15
 801c9a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9a6:	9312      	str	r3, [sp, #72]	; 0x48
 801c9a8:	9b00      	ldr	r3, [sp, #0]
 801c9aa:	9a03      	ldr	r2, [sp, #12]
 801c9ac:	3b01      	subs	r3, #1
 801c9ae:	9300      	str	r3, [sp, #0]
 801c9b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9b2:	bf08      	it	eq
 801c9b4:	4613      	moveq	r3, r2
 801c9b6:	e734      	b.n	801c822 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c9b8:	1407      	asrs	r7, r0, #16
 801c9ba:	d450      	bmi.n	801ca5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c9bc:	4577      	cmp	r7, lr
 801c9be:	da4e      	bge.n	801ca5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c9c0:	1415      	asrs	r5, r2, #16
 801c9c2:	d44c      	bmi.n	801ca5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c9c4:	4545      	cmp	r5, r8
 801c9c6:	da4a      	bge.n	801ca5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c9c8:	9901      	ldr	r1, [sp, #4]
 801c9ca:	fb0e 1505 	mla	r5, lr, r5, r1
 801c9ce:	9902      	ldr	r1, [sp, #8]
 801c9d0:	5ded      	ldrb	r5, [r5, r7]
 801c9d2:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c9d6:	0e2f      	lsrs	r7, r5, #24
 801c9d8:	2fff      	cmp	r7, #255	; 0xff
 801c9da:	d046      	beq.n	801ca6a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c9dc:	fa5f f987 	uxtb.w	r9, r7
 801c9e0:	b3ef      	cbz	r7, 801ca5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c9e2:	fa1f fc89 	uxth.w	ip, r9
 801c9e6:	ea6f 0909 	mvn.w	r9, r9
 801c9ea:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c9ee:	fa5f fb85 	uxtb.w	fp, r5
 801c9f2:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c9f6:	fa5f f989 	uxtb.w	r9, r9
 801c9fa:	fb1b fb0c 	smulbb	fp, fp, ip
 801c9fe:	fb0a ba09 	mla	sl, sl, r9, fp
 801ca02:	fa1f fa8a 	uxth.w	sl, sl
 801ca06:	f10a 0b01 	add.w	fp, sl, #1
 801ca0a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ca0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca12:	f804 a007 	strb.w	sl, [r4, r7]
 801ca16:	4427      	add	r7, r4
 801ca18:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ca1c:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801ca20:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ca24:	fb1b fb09 	smulbb	fp, fp, r9
 801ca28:	fb0a ba0c 	mla	sl, sl, ip, fp
 801ca2c:	fa1f fa8a 	uxth.w	sl, sl
 801ca30:	f10a 0b01 	add.w	fp, sl, #1
 801ca34:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ca38:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca3c:	f887 a001 	strb.w	sl, [r7, #1]
 801ca40:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ca44:	fb1a f909 	smulbb	r9, sl, r9
 801ca48:	fb05 950c 	mla	r5, r5, ip, r9
 801ca4c:	b2ad      	uxth	r5, r5
 801ca4e:	f105 0901 	add.w	r9, r5, #1
 801ca52:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801ca56:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca5a:	f887 9002 	strb.w	r9, [r7, #2]
 801ca5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ca60:	3601      	adds	r6, #1
 801ca62:	4408      	add	r0, r1
 801ca64:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ca66:	440a      	add	r2, r1
 801ca68:	e762      	b.n	801c930 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ca6a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ca6e:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801ca72:	55e5      	strb	r5, [r4, r7]
 801ca74:	4427      	add	r7, r4
 801ca76:	0c2d      	lsrs	r5, r5, #16
 801ca78:	f887 c001 	strb.w	ip, [r7, #1]
 801ca7c:	70bd      	strb	r5, [r7, #2]
 801ca7e:	e7ee      	b.n	801ca5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ca80:	0a37      	lsrs	r7, r6, #8
 801ca82:	f805 6c03 	strb.w	r6, [r5, #-3]
 801ca86:	0c36      	lsrs	r6, r6, #16
 801ca88:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ca8c:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ca90:	e745      	b.n	801c91e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801ca92:	b005      	add	sp, #20
 801ca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca9c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ca9e:	9201      	str	r2, [sp, #4]
 801caa0:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801caa4:	6870      	ldr	r0, [r6, #4]
 801caa6:	9200      	str	r2, [sp, #0]
 801caa8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801caac:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801cab0:	fa1f fc85 	uxth.w	ip, r5
 801cab4:	43ed      	mvns	r5, r5
 801cab6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801caba:	b2ed      	uxtb	r5, r5
 801cabc:	fb00 2404 	mla	r4, r0, r4, r2
 801cac0:	6832      	ldr	r2, [r6, #0]
 801cac2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cac6:	4414      	add	r4, r2
 801cac8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801caca:	f8d2 8000 	ldr.w	r8, [r2]
 801cace:	2900      	cmp	r1, #0
 801cad0:	dc03      	bgt.n	801cada <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801cad2:	9a01      	ldr	r2, [sp, #4]
 801cad4:	2a00      	cmp	r2, #0
 801cad6:	f340 8104 	ble.w	801cce2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801cada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cadc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cae2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	dd0f      	ble.n	801cb0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801caea:	1406      	asrs	r6, r0, #16
 801caec:	d406      	bmi.n	801cafc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801caee:	4576      	cmp	r6, lr
 801caf0:	da04      	bge.n	801cafc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801caf2:	1416      	asrs	r6, r2, #16
 801caf4:	d402      	bmi.n	801cafc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801caf6:	9f00      	ldr	r7, [sp, #0]
 801caf8:	42be      	cmp	r6, r7
 801cafa:	db07      	blt.n	801cb0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801cafc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cafe:	3b01      	subs	r3, #1
 801cb00:	3403      	adds	r4, #3
 801cb02:	4430      	add	r0, r6
 801cb04:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cb06:	4432      	add	r2, r6
 801cb08:	e7ed      	b.n	801cae6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801cb0a:	d05f      	beq.n	801cbcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801cb0c:	1e5e      	subs	r6, r3, #1
 801cb0e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cb10:	fb07 0706 	mla	r7, r7, r6, r0
 801cb14:	143f      	asrs	r7, r7, #16
 801cb16:	d450      	bmi.n	801cbba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cb18:	4577      	cmp	r7, lr
 801cb1a:	da4e      	bge.n	801cbba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cb1c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cb1e:	fb07 2606 	mla	r6, r7, r6, r2
 801cb22:	1436      	asrs	r6, r6, #16
 801cb24:	d449      	bmi.n	801cbba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cb26:	9f00      	ldr	r7, [sp, #0]
 801cb28:	42be      	cmp	r6, r7
 801cb2a:	da46      	bge.n	801cbba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801cb2c:	1ce6      	adds	r6, r4, #3
 801cb2e:	4699      	mov	r9, r3
 801cb30:	f1b9 0f00 	cmp.w	r9, #0
 801cb34:	f106 0603 	add.w	r6, r6, #3
 801cb38:	dd43      	ble.n	801cbc2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801cb3a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cb3e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cb42:	1417      	asrs	r7, r2, #16
 801cb44:	f109 39ff 	add.w	r9, r9, #4294967295
 801cb48:	fb1b fb05 	smulbb	fp, fp, r5
 801cb4c:	fb0e a707 	mla	r7, lr, r7, sl
 801cb50:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb54:	eb08 0a07 	add.w	sl, r8, r7
 801cb58:	f818 7007 	ldrb.w	r7, [r8, r7]
 801cb5c:	fb07 b70c 	mla	r7, r7, ip, fp
 801cb60:	b2bf      	uxth	r7, r7
 801cb62:	f107 0b01 	add.w	fp, r7, #1
 801cb66:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb6a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cb6e:	fb1b fb05 	smulbb	fp, fp, r5
 801cb72:	123f      	asrs	r7, r7, #8
 801cb74:	f806 7c06 	strb.w	r7, [r6, #-6]
 801cb78:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cb7c:	fb07 b70c 	mla	r7, r7, ip, fp
 801cb80:	b2bf      	uxth	r7, r7
 801cb82:	f107 0b01 	add.w	fp, r7, #1
 801cb86:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb8a:	123f      	asrs	r7, r7, #8
 801cb8c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cb90:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cb94:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cb98:	fb1a fa05 	smulbb	sl, sl, r5
 801cb9c:	fb07 a70c 	mla	r7, r7, ip, sl
 801cba0:	b2bf      	uxth	r7, r7
 801cba2:	f107 0a01 	add.w	sl, r7, #1
 801cba6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cbaa:	123f      	asrs	r7, r7, #8
 801cbac:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cbb0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cbb2:	4438      	add	r0, r7
 801cbb4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cbb6:	443a      	add	r2, r7
 801cbb8:	e7ba      	b.n	801cb30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801cbba:	2700      	movs	r7, #0
 801cbbc:	1bde      	subs	r6, r3, r7
 801cbbe:	2e00      	cmp	r6, #0
 801cbc0:	dc3f      	bgt.n	801cc42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801cbc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbca:	441c      	add	r4, r3
 801cbcc:	2900      	cmp	r1, #0
 801cbce:	f340 8088 	ble.w	801cce2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801cbd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbd8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbdc:	3901      	subs	r1, #1
 801cbde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbe2:	eef0 6a62 	vmov.f32	s13, s5
 801cbe6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cbea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbf2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801cbf6:	eef0 6a43 	vmov.f32	s13, s6
 801cbfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbfe:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801cc02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc06:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc1a:	ee12 2a90 	vmov	r2, s5
 801cc1e:	eef0 2a47 	vmov.f32	s5, s14
 801cc22:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc26:	ee13 2a10 	vmov	r2, s6
 801cc2a:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc2e:	eeb0 3a67 	vmov.f32	s6, s15
 801cc32:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc36:	9a01      	ldr	r2, [sp, #4]
 801cc38:	9310      	str	r3, [sp, #64]	; 0x40
 801cc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc3c:	bf08      	it	eq
 801cc3e:	4613      	moveq	r3, r2
 801cc40:	e745      	b.n	801cace <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801cc42:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cc46:	d446      	bmi.n	801ccd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc48:	45f2      	cmp	sl, lr
 801cc4a:	da44      	bge.n	801ccd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc4c:	ea5f 4922 	movs.w	r9, r2, asr #16
 801cc50:	d441      	bmi.n	801ccd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc52:	9e00      	ldr	r6, [sp, #0]
 801cc54:	45b1      	cmp	r9, r6
 801cc56:	da3e      	bge.n	801ccd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801cc58:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cc5c:	fb0e a909 	mla	r9, lr, r9, sl
 801cc60:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cc64:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cc68:	fb1b fb05 	smulbb	fp, fp, r5
 801cc6c:	eb08 0a09 	add.w	sl, r8, r9
 801cc70:	f818 9009 	ldrb.w	r9, [r8, r9]
 801cc74:	fb09 b90c 	mla	r9, r9, ip, fp
 801cc78:	fa1f f989 	uxth.w	r9, r9
 801cc7c:	f109 0b01 	add.w	fp, r9, #1
 801cc80:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc84:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc88:	f804 9006 	strb.w	r9, [r4, r6]
 801cc8c:	4426      	add	r6, r4
 801cc8e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cc92:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cc96:	fb1b fb05 	smulbb	fp, fp, r5
 801cc9a:	fb09 b90c 	mla	r9, r9, ip, fp
 801cc9e:	fa1f f989 	uxth.w	r9, r9
 801cca2:	f109 0b01 	add.w	fp, r9, #1
 801cca6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ccaa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccae:	f886 9001 	strb.w	r9, [r6, #1]
 801ccb2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ccb6:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ccba:	fb1a fa05 	smulbb	sl, sl, r5
 801ccbe:	fb09 a90c 	mla	r9, r9, ip, sl
 801ccc2:	fa1f f989 	uxth.w	r9, r9
 801ccc6:	f109 0a01 	add.w	sl, r9, #1
 801ccca:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ccce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccd2:	f886 9002 	strb.w	r9, [r6, #2]
 801ccd6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ccd8:	3701      	adds	r7, #1
 801ccda:	4430      	add	r0, r6
 801ccdc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ccde:	4432      	add	r2, r6
 801cce0:	e76c      	b.n	801cbbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801cce2:	b003      	add	sp, #12
 801cce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cce8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ccee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ccf2:	9201      	str	r2, [sp, #4]
 801ccf4:	6868      	ldr	r0, [r5, #4]
 801ccf6:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801ccfa:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801ccfe:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801cd02:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801cd06:	fb00 2404 	mla	r4, r0, r4, r2
 801cd0a:	682a      	ldr	r2, [r5, #0]
 801cd0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cd10:	4414      	add	r4, r2
 801cd12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cd14:	f8d2 9000 	ldr.w	r9, [r2]
 801cd18:	2900      	cmp	r1, #0
 801cd1a:	dc03      	bgt.n	801cd24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cd1c:	9a01      	ldr	r2, [sp, #4]
 801cd1e:	2a00      	cmp	r2, #0
 801cd20:	f340 80a8 	ble.w	801ce74 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801cd24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd26:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cd2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd2c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	dd0c      	ble.n	801cd4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801cd34:	1405      	asrs	r5, r0, #16
 801cd36:	d405      	bmi.n	801cd44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cd38:	4565      	cmp	r5, ip
 801cd3a:	da03      	bge.n	801cd44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cd3c:	1415      	asrs	r5, r2, #16
 801cd3e:	d401      	bmi.n	801cd44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cd40:	4575      	cmp	r5, lr
 801cd42:	db05      	blt.n	801cd50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801cd44:	4438      	add	r0, r7
 801cd46:	4432      	add	r2, r6
 801cd48:	3b01      	subs	r3, #1
 801cd4a:	3403      	adds	r4, #3
 801cd4c:	e7f0      	b.n	801cd30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801cd4e:	d03a      	beq.n	801cdc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801cd50:	1e5d      	subs	r5, r3, #1
 801cd52:	fb07 0805 	mla	r8, r7, r5, r0
 801cd56:	ea5f 4828 	movs.w	r8, r8, asr #16
 801cd5a:	d429      	bmi.n	801cdb0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd5c:	45e0      	cmp	r8, ip
 801cd5e:	da27      	bge.n	801cdb0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd60:	fb06 2505 	mla	r5, r6, r5, r2
 801cd64:	142d      	asrs	r5, r5, #16
 801cd66:	d423      	bmi.n	801cdb0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd68:	4575      	cmp	r5, lr
 801cd6a:	da21      	bge.n	801cdb0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd6c:	f104 0803 	add.w	r8, r4, #3
 801cd70:	469a      	mov	sl, r3
 801cd72:	f1ba 0f00 	cmp.w	sl, #0
 801cd76:	f108 0803 	add.w	r8, r8, #3
 801cd7a:	dd1f      	ble.n	801cdbc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801cd7c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801cd80:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd84:	1415      	asrs	r5, r2, #16
 801cd86:	4438      	add	r0, r7
 801cd88:	4432      	add	r2, r6
 801cd8a:	fb0c b505 	mla	r5, ip, r5, fp
 801cd8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd92:	eb09 0b05 	add.w	fp, r9, r5
 801cd96:	f819 5005 	ldrb.w	r5, [r9, r5]
 801cd9a:	f808 5c06 	strb.w	r5, [r8, #-6]
 801cd9e:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801cda2:	f808 5c05 	strb.w	r5, [r8, #-5]
 801cda6:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801cdaa:	f808 5c04 	strb.w	r5, [r8, #-4]
 801cdae:	e7e0      	b.n	801cd72 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801cdb0:	2500      	movs	r5, #0
 801cdb2:	eba3 0805 	sub.w	r8, r3, r5
 801cdb6:	f1b8 0f00 	cmp.w	r8, #0
 801cdba:	dc38      	bgt.n	801ce2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801cdbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cdc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cdc4:	441c      	add	r4, r3
 801cdc6:	2900      	cmp	r1, #0
 801cdc8:	dd54      	ble.n	801ce74 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801cdca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cdce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cdd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cdd4:	3901      	subs	r1, #1
 801cdd6:	eeb0 6a62 	vmov.f32	s12, s5
 801cdda:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cdde:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cde2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cde6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cdea:	eeb0 6a43 	vmov.f32	s12, s6
 801cdee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdf2:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cdf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdfe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce0e:	ee12 2a90 	vmov	r2, s5
 801ce12:	eef0 2a47 	vmov.f32	s5, s14
 801ce16:	fb92 f7f3 	sdiv	r7, r2, r3
 801ce1a:	ee13 2a10 	vmov	r2, s6
 801ce1e:	eeb0 3a67 	vmov.f32	s6, s15
 801ce22:	fb92 f6f3 	sdiv	r6, r2, r3
 801ce26:	9a01      	ldr	r2, [sp, #4]
 801ce28:	bf08      	it	eq
 801ce2a:	4613      	moveq	r3, r2
 801ce2c:	e774      	b.n	801cd18 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801ce2e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ce32:	d41b      	bmi.n	801ce6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ce34:	45e2      	cmp	sl, ip
 801ce36:	da19      	bge.n	801ce6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ce38:	ea5f 4822 	movs.w	r8, r2, asr #16
 801ce3c:	d416      	bmi.n	801ce6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ce3e:	45f0      	cmp	r8, lr
 801ce40:	da14      	bge.n	801ce6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ce42:	fb0c a808 	mla	r8, ip, r8, sl
 801ce46:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ce4a:	f819 b008 	ldrb.w	fp, [r9, r8]
 801ce4e:	eb09 0a08 	add.w	sl, r9, r8
 801ce52:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801ce56:	f804 b008 	strb.w	fp, [r4, r8]
 801ce5a:	44a0      	add	r8, r4
 801ce5c:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ce60:	f888 b001 	strb.w	fp, [r8, #1]
 801ce64:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ce68:	f888 a002 	strb.w	sl, [r8, #2]
 801ce6c:	4438      	add	r0, r7
 801ce6e:	4432      	add	r2, r6
 801ce70:	3501      	adds	r5, #1
 801ce72:	e79e      	b.n	801cdb2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801ce74:	b003      	add	sp, #12
 801ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ce7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce7e:	b085      	sub	sp, #20
 801ce80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ce86:	9202      	str	r2, [sp, #8]
 801ce88:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ce8c:	6860      	ldr	r0, [r4, #4]
 801ce8e:	9203      	str	r2, [sp, #12]
 801ce90:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ce94:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ce98:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ce9c:	fb00 2505 	mla	r5, r0, r5, r2
 801cea0:	6822      	ldr	r2, [r4, #0]
 801cea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cea6:	4415      	add	r5, r2
 801cea8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ceaa:	6812      	ldr	r2, [r2, #0]
 801ceac:	9201      	str	r2, [sp, #4]
 801ceae:	2900      	cmp	r1, #0
 801ceb0:	dc03      	bgt.n	801ceba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801ceb2:	9a02      	ldr	r2, [sp, #8]
 801ceb4:	2a00      	cmp	r2, #0
 801ceb6:	f340 811c 	ble.w	801d0f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ceba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cebc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cec0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cec2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	dd0e      	ble.n	801cee8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ceca:	1422      	asrs	r2, r4, #16
 801cecc:	d405      	bmi.n	801ceda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cece:	4572      	cmp	r2, lr
 801ced0:	da03      	bge.n	801ceda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ced2:	1402      	asrs	r2, r0, #16
 801ced4:	d401      	bmi.n	801ceda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ced6:	4542      	cmp	r2, r8
 801ced8:	db07      	blt.n	801ceea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ceda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cedc:	3b01      	subs	r3, #1
 801cede:	3503      	adds	r5, #3
 801cee0:	4414      	add	r4, r2
 801cee2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cee4:	4410      	add	r0, r2
 801cee6:	e7ee      	b.n	801cec6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801cee8:	d072      	beq.n	801cfd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801ceea:	1e5a      	subs	r2, r3, #1
 801ceec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ceee:	fb06 4602 	mla	r6, r6, r2, r4
 801cef2:	1436      	asrs	r6, r6, #16
 801cef4:	d461      	bmi.n	801cfba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cef6:	4576      	cmp	r6, lr
 801cef8:	da5f      	bge.n	801cfba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cefa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cefc:	fb06 0202 	mla	r2, r6, r2, r0
 801cf00:	1412      	asrs	r2, r2, #16
 801cf02:	d45a      	bmi.n	801cfba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cf04:	4542      	cmp	r2, r8
 801cf06:	da58      	bge.n	801cfba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cf08:	1cef      	adds	r7, r5, #3
 801cf0a:	4699      	mov	r9, r3
 801cf0c:	f1b9 0f00 	cmp.w	r9, #0
 801cf10:	dd59      	ble.n	801cfc6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cf12:	1426      	asrs	r6, r4, #16
 801cf14:	1402      	asrs	r2, r0, #16
 801cf16:	fb0e 6202 	mla	r2, lr, r2, r6
 801cf1a:	9e01      	ldr	r6, [sp, #4]
 801cf1c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cf20:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801cf24:	d041      	beq.n	801cfaa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801cf26:	9a03      	ldr	r2, [sp, #12]
 801cf28:	fa5f fb86 	uxtb.w	fp, r6
 801cf2c:	fb02 fc0c 	mul.w	ip, r2, ip
 801cf30:	f10c 0201 	add.w	r2, ip, #1
 801cf34:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801cf38:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801cf3c:	1212      	asrs	r2, r2, #8
 801cf3e:	fa1f fa82 	uxth.w	sl, r2
 801cf42:	43d2      	mvns	r2, r2
 801cf44:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf48:	b2d2      	uxtb	r2, r2
 801cf4a:	fb0c bc02 	mla	ip, ip, r2, fp
 801cf4e:	fa1f fc8c 	uxth.w	ip, ip
 801cf52:	f10c 0b01 	add.w	fp, ip, #1
 801cf56:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cf5a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cf5e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cf62:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf66:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cf6a:	fb16 fa0a 	smulbb	sl, r6, sl
 801cf6e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cf72:	f807 cc03 	strb.w	ip, [r7, #-3]
 801cf76:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801cf7a:	fb06 aa02 	mla	sl, r6, r2, sl
 801cf7e:	fb0c bc02 	mla	ip, ip, r2, fp
 801cf82:	fa1f fa8a 	uxth.w	sl, sl
 801cf86:	fa1f fc8c 	uxth.w	ip, ip
 801cf8a:	f10a 0601 	add.w	r6, sl, #1
 801cf8e:	f10c 0b01 	add.w	fp, ip, #1
 801cf92:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cf96:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cf9a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf9e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cfa2:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cfa6:	f807 cc02 	strb.w	ip, [r7, #-2]
 801cfaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfac:	3703      	adds	r7, #3
 801cfae:	f109 39ff 	add.w	r9, r9, #4294967295
 801cfb2:	4414      	add	r4, r2
 801cfb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfb6:	4410      	add	r0, r2
 801cfb8:	e7a8      	b.n	801cf0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cfba:	f04f 0c00 	mov.w	ip, #0
 801cfbe:	eba3 020c 	sub.w	r2, r3, ip
 801cfc2:	2a00      	cmp	r2, #0
 801cfc4:	dc3d      	bgt.n	801d042 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801cfc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cfca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfce:	441d      	add	r5, r3
 801cfd0:	2900      	cmp	r1, #0
 801cfd2:	f340 808e 	ble.w	801d0f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cfd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cfe0:	3901      	subs	r1, #1
 801cfe2:	eeb0 6a62 	vmov.f32	s12, s5
 801cfe6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cfea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cfee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cff2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cff6:	eeb0 6a43 	vmov.f32	s12, s6
 801cffa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cffe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d002:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d006:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d00a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d00e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d012:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d016:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d01a:	ee12 2a90 	vmov	r2, s5
 801d01e:	eef0 2a47 	vmov.f32	s5, s14
 801d022:	fb92 f3f3 	sdiv	r3, r2, r3
 801d026:	ee13 2a10 	vmov	r2, s6
 801d02a:	9311      	str	r3, [sp, #68]	; 0x44
 801d02c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d02e:	eeb0 3a67 	vmov.f32	s6, s15
 801d032:	fb92 f3f3 	sdiv	r3, r2, r3
 801d036:	9a02      	ldr	r2, [sp, #8]
 801d038:	9312      	str	r3, [sp, #72]	; 0x48
 801d03a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d03c:	bf08      	it	eq
 801d03e:	4613      	moveq	r3, r2
 801d040:	e735      	b.n	801ceae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801d042:	1426      	asrs	r6, r4, #16
 801d044:	d44e      	bmi.n	801d0e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d046:	4576      	cmp	r6, lr
 801d048:	da4c      	bge.n	801d0e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d04a:	1402      	asrs	r2, r0, #16
 801d04c:	d44a      	bmi.n	801d0e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d04e:	4542      	cmp	r2, r8
 801d050:	da48      	bge.n	801d0e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d052:	fb0e 6202 	mla	r2, lr, r2, r6
 801d056:	9e01      	ldr	r6, [sp, #4]
 801d058:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d05c:	0e3a      	lsrs	r2, r7, #24
 801d05e:	d041      	beq.n	801d0e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d060:	9e03      	ldr	r6, [sp, #12]
 801d062:	fa5f fb87 	uxtb.w	fp, r7
 801d066:	4372      	muls	r2, r6
 801d068:	1c56      	adds	r6, r2, #1
 801d06a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d06e:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801d072:	1212      	asrs	r2, r2, #8
 801d074:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d078:	fa1f fa82 	uxth.w	sl, r2
 801d07c:	43d2      	mvns	r2, r2
 801d07e:	fb1b fb0a 	smulbb	fp, fp, sl
 801d082:	b2d2      	uxtb	r2, r2
 801d084:	fb09 b902 	mla	r9, r9, r2, fp
 801d088:	fa1f f989 	uxth.w	r9, r9
 801d08c:	f109 0b01 	add.w	fp, r9, #1
 801d090:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d094:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d098:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d09c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d0a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0a4:	fb17 fa0a 	smulbb	sl, r7, sl
 801d0a8:	f805 9006 	strb.w	r9, [r5, r6]
 801d0ac:	442e      	add	r6, r5
 801d0ae:	78b7      	ldrb	r7, [r6, #2]
 801d0b0:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d0b4:	fb07 aa02 	mla	sl, r7, r2, sl
 801d0b8:	fb09 b902 	mla	r9, r9, r2, fp
 801d0bc:	fa1f fa8a 	uxth.w	sl, sl
 801d0c0:	fa1f f989 	uxth.w	r9, r9
 801d0c4:	f10a 0701 	add.w	r7, sl, #1
 801d0c8:	f109 0b01 	add.w	fp, r9, #1
 801d0cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d0d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d0d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d0d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0dc:	f886 a002 	strb.w	sl, [r6, #2]
 801d0e0:	f886 9001 	strb.w	r9, [r6, #1]
 801d0e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d0e6:	f10c 0c01 	add.w	ip, ip, #1
 801d0ea:	4414      	add	r4, r2
 801d0ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0ee:	4410      	add	r0, r2
 801d0f0:	e765      	b.n	801cfbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801d0f2:	b005      	add	sp, #20
 801d0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0fc:	b085      	sub	sp, #20
 801d0fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d102:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d104:	9203      	str	r2, [sp, #12]
 801d106:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d10a:	6860      	ldr	r0, [r4, #4]
 801d10c:	9201      	str	r2, [sp, #4]
 801d10e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d112:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d116:	fb00 2505 	mla	r5, r0, r5, r2
 801d11a:	6822      	ldr	r2, [r4, #0]
 801d11c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d120:	4415      	add	r5, r2
 801d122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d124:	6812      	ldr	r2, [r2, #0]
 801d126:	9202      	str	r2, [sp, #8]
 801d128:	2900      	cmp	r1, #0
 801d12a:	dc03      	bgt.n	801d134 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d12c:	9a03      	ldr	r2, [sp, #12]
 801d12e:	2a00      	cmp	r2, #0
 801d130:	f340 8122 	ble.w	801d378 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801d134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d136:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d13a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d13c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d140:	2b00      	cmp	r3, #0
 801d142:	dd0f      	ble.n	801d164 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d144:	1422      	asrs	r2, r4, #16
 801d146:	d406      	bmi.n	801d156 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d148:	4572      	cmp	r2, lr
 801d14a:	da04      	bge.n	801d156 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d14c:	1402      	asrs	r2, r0, #16
 801d14e:	d402      	bmi.n	801d156 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801d150:	9e01      	ldr	r6, [sp, #4]
 801d152:	42b2      	cmp	r2, r6
 801d154:	db07      	blt.n	801d166 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d156:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d158:	3b01      	subs	r3, #1
 801d15a:	3503      	adds	r5, #3
 801d15c:	4414      	add	r4, r2
 801d15e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d160:	4410      	add	r0, r2
 801d162:	e7ed      	b.n	801d140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801d164:	d06e      	beq.n	801d244 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801d166:	1e5a      	subs	r2, r3, #1
 801d168:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d16a:	fb06 4602 	mla	r6, r6, r2, r4
 801d16e:	1436      	asrs	r6, r6, #16
 801d170:	d45d      	bmi.n	801d22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d172:	4576      	cmp	r6, lr
 801d174:	da5b      	bge.n	801d22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d176:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d178:	fb06 0202 	mla	r2, r6, r2, r0
 801d17c:	1412      	asrs	r2, r2, #16
 801d17e:	d456      	bmi.n	801d22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d180:	9e01      	ldr	r6, [sp, #4]
 801d182:	42b2      	cmp	r2, r6
 801d184:	da53      	bge.n	801d22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d186:	1cee      	adds	r6, r5, #3
 801d188:	469a      	mov	sl, r3
 801d18a:	f1ba 0f00 	cmp.w	sl, #0
 801d18e:	dd54      	ble.n	801d23a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d190:	1427      	asrs	r7, r4, #16
 801d192:	1402      	asrs	r2, r0, #16
 801d194:	fb0e 7202 	mla	r2, lr, r2, r7
 801d198:	9f02      	ldr	r7, [sp, #8]
 801d19a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d19e:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801d1a2:	d03c      	beq.n	801d21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801d1a4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d1a8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d1ac:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d1b0:	fa5f f28c 	uxtb.w	r2, ip
 801d1b4:	b2ff      	uxtb	r7, r7
 801d1b6:	f000 80d8 	beq.w	801d36a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d1ba:	fa1f f882 	uxth.w	r8, r2
 801d1be:	43d2      	mvns	r2, r2
 801d1c0:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d1c4:	fb17 f708 	smulbb	r7, r7, r8
 801d1c8:	b2d2      	uxtb	r2, r2
 801d1ca:	fb19 f908 	smulbb	r9, r9, r8
 801d1ce:	fb0c 7702 	mla	r7, ip, r2, r7
 801d1d2:	fb1b f808 	smulbb	r8, fp, r8
 801d1d6:	b2bf      	uxth	r7, r7
 801d1d8:	f107 0c01 	add.w	ip, r7, #1
 801d1dc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d1e0:	123f      	asrs	r7, r7, #8
 801d1e2:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d1e6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d1ea:	fb07 9902 	mla	r9, r7, r2, r9
 801d1ee:	fa1f f989 	uxth.w	r9, r9
 801d1f2:	f109 0701 	add.w	r7, r9, #1
 801d1f6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d1fa:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d1fe:	fb07 8802 	mla	r8, r7, r2, r8
 801d202:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d206:	fa1f f888 	uxth.w	r8, r8
 801d20a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d20e:	f108 0201 	add.w	r2, r8, #1
 801d212:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d216:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d21a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d21e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d220:	3603      	adds	r6, #3
 801d222:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d226:	4414      	add	r4, r2
 801d228:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d22a:	4410      	add	r0, r2
 801d22c:	e7ad      	b.n	801d18a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d22e:	f04f 0c00 	mov.w	ip, #0
 801d232:	eba3 020c 	sub.w	r2, r3, ip
 801d236:	2a00      	cmp	r2, #0
 801d238:	dc3d      	bgt.n	801d2b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801d23a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d23e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d242:	441d      	add	r5, r3
 801d244:	2900      	cmp	r1, #0
 801d246:	f340 8097 	ble.w	801d378 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801d24a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d24e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d250:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d254:	3901      	subs	r1, #1
 801d256:	eeb0 6a62 	vmov.f32	s12, s5
 801d25a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d25e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d262:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d266:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d26a:	eeb0 6a43 	vmov.f32	s12, s6
 801d26e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d272:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d276:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d27a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d27e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d282:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d286:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d28a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d28e:	ee12 2a90 	vmov	r2, s5
 801d292:	eef0 2a47 	vmov.f32	s5, s14
 801d296:	fb92 f3f3 	sdiv	r3, r2, r3
 801d29a:	ee13 2a10 	vmov	r2, s6
 801d29e:	9311      	str	r3, [sp, #68]	; 0x44
 801d2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2a2:	eeb0 3a67 	vmov.f32	s6, s15
 801d2a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2aa:	9a03      	ldr	r2, [sp, #12]
 801d2ac:	9312      	str	r3, [sp, #72]	; 0x48
 801d2ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2b0:	bf08      	it	eq
 801d2b2:	4613      	moveq	r3, r2
 801d2b4:	e738      	b.n	801d128 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801d2b6:	1426      	asrs	r6, r4, #16
 801d2b8:	d448      	bmi.n	801d34c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d2ba:	4576      	cmp	r6, lr
 801d2bc:	da46      	bge.n	801d34c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d2be:	1402      	asrs	r2, r0, #16
 801d2c0:	d444      	bmi.n	801d34c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d2c2:	9f01      	ldr	r7, [sp, #4]
 801d2c4:	42ba      	cmp	r2, r7
 801d2c6:	da41      	bge.n	801d34c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d2c8:	fb0e 6202 	mla	r2, lr, r2, r6
 801d2cc:	9e02      	ldr	r6, [sp, #8]
 801d2ce:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d2d2:	0e3a      	lsrs	r2, r7, #24
 801d2d4:	d03a      	beq.n	801d34c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d2d6:	2aff      	cmp	r2, #255	; 0xff
 801d2d8:	b2d6      	uxtb	r6, r2
 801d2da:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d2de:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d2e2:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801d2e6:	b2ff      	uxtb	r7, r7
 801d2e8:	d037      	beq.n	801d35a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801d2ea:	fa1f f986 	uxth.w	r9, r6
 801d2ee:	4462      	add	r2, ip
 801d2f0:	43f6      	mvns	r6, r6
 801d2f2:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d2f6:	fb17 f709 	smulbb	r7, r7, r9
 801d2fa:	fb1a fa09 	smulbb	sl, sl, r9
 801d2fe:	b2f6      	uxtb	r6, r6
 801d300:	fb1b f909 	smulbb	r9, fp, r9
 801d304:	fb08 7706 	mla	r7, r8, r6, r7
 801d308:	b2bf      	uxth	r7, r7
 801d30a:	f107 0801 	add.w	r8, r7, #1
 801d30e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d312:	123f      	asrs	r7, r7, #8
 801d314:	54af      	strb	r7, [r5, r2]
 801d316:	442a      	add	r2, r5
 801d318:	7857      	ldrb	r7, [r2, #1]
 801d31a:	fb07 aa06 	mla	sl, r7, r6, sl
 801d31e:	fa1f fa8a 	uxth.w	sl, sl
 801d322:	f10a 0701 	add.w	r7, sl, #1
 801d326:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d32a:	7897      	ldrb	r7, [r2, #2]
 801d32c:	fb07 9906 	mla	r9, r7, r6, r9
 801d330:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d334:	fa1f f989 	uxth.w	r9, r9
 801d338:	f882 a001 	strb.w	sl, [r2, #1]
 801d33c:	f109 0601 	add.w	r6, r9, #1
 801d340:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d344:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d348:	f882 9002 	strb.w	r9, [r2, #2]
 801d34c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d34e:	f10c 0c01 	add.w	ip, ip, #1
 801d352:	4414      	add	r4, r2
 801d354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d356:	4410      	add	r0, r2
 801d358:	e76b      	b.n	801d232 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801d35a:	4462      	add	r2, ip
 801d35c:	54af      	strb	r7, [r5, r2]
 801d35e:	442a      	add	r2, r5
 801d360:	f882 a001 	strb.w	sl, [r2, #1]
 801d364:	f882 b002 	strb.w	fp, [r2, #2]
 801d368:	e7f0      	b.n	801d34c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d36a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d36e:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d372:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d376:	e752      	b.n	801d21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801d378:	b005      	add	sp, #20
 801d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d380 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d384:	b087      	sub	sp, #28
 801d386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d38a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d38c:	9204      	str	r2, [sp, #16]
 801d38e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d392:	6860      	ldr	r0, [r4, #4]
 801d394:	9205      	str	r2, [sp, #20]
 801d396:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d39a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d39e:	9101      	str	r1, [sp, #4]
 801d3a0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d3a4:	fb00 2505 	mla	r5, r0, r5, r2
 801d3a8:	6822      	ldr	r2, [r4, #0]
 801d3aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d3ae:	4415      	add	r5, r2
 801d3b0:	f10e 0201 	add.w	r2, lr, #1
 801d3b4:	f022 0201 	bic.w	r2, r2, #1
 801d3b8:	9202      	str	r2, [sp, #8]
 801d3ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d3bc:	6812      	ldr	r2, [r2, #0]
 801d3be:	9203      	str	r2, [sp, #12]
 801d3c0:	9a01      	ldr	r2, [sp, #4]
 801d3c2:	2a00      	cmp	r2, #0
 801d3c4:	dc03      	bgt.n	801d3ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d3c6:	9a04      	ldr	r2, [sp, #16]
 801d3c8:	2a00      	cmp	r2, #0
 801d3ca:	f340 8132 	ble.w	801d632 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d3ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3d0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d3d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	dd0e      	ble.n	801d3fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d3de:	1422      	asrs	r2, r4, #16
 801d3e0:	d405      	bmi.n	801d3ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d3e2:	4596      	cmp	lr, r2
 801d3e4:	dd03      	ble.n	801d3ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d3e6:	1402      	asrs	r2, r0, #16
 801d3e8:	d401      	bmi.n	801d3ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d3ea:	4542      	cmp	r2, r8
 801d3ec:	db07      	blt.n	801d3fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d3ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d3f0:	3b01      	subs	r3, #1
 801d3f2:	3503      	adds	r5, #3
 801d3f4:	4414      	add	r4, r2
 801d3f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3f8:	4410      	add	r0, r2
 801d3fa:	e7ee      	b.n	801d3da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801d3fc:	d010      	beq.n	801d420 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d3fe:	1e5a      	subs	r2, r3, #1
 801d400:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d402:	fb06 4602 	mla	r6, r6, r2, r4
 801d406:	1436      	asrs	r6, r6, #16
 801d408:	d546      	bpl.n	801d498 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d40a:	4699      	mov	r9, r3
 801d40c:	462e      	mov	r6, r5
 801d40e:	f1b9 0f00 	cmp.w	r9, #0
 801d412:	f300 80ac 	bgt.w	801d56e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801d416:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d41a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d41e:	441d      	add	r5, r3
 801d420:	9b01      	ldr	r3, [sp, #4]
 801d422:	2b00      	cmp	r3, #0
 801d424:	f340 8105 	ble.w	801d632 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d428:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d42e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d432:	eeb0 6a62 	vmov.f32	s12, s5
 801d436:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d43a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d43e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d442:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d446:	eeb0 6a43 	vmov.f32	s12, s6
 801d44a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d44e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d452:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d456:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d45a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d45e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d462:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d466:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d46a:	ee12 2a90 	vmov	r2, s5
 801d46e:	eef0 2a47 	vmov.f32	s5, s14
 801d472:	fb92 f3f3 	sdiv	r3, r2, r3
 801d476:	ee13 2a10 	vmov	r2, s6
 801d47a:	9313      	str	r3, [sp, #76]	; 0x4c
 801d47c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d47e:	eeb0 3a67 	vmov.f32	s6, s15
 801d482:	fb92 f3f3 	sdiv	r3, r2, r3
 801d486:	9314      	str	r3, [sp, #80]	; 0x50
 801d488:	9b01      	ldr	r3, [sp, #4]
 801d48a:	9a04      	ldr	r2, [sp, #16]
 801d48c:	3b01      	subs	r3, #1
 801d48e:	9301      	str	r3, [sp, #4]
 801d490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d492:	bf08      	it	eq
 801d494:	4613      	moveq	r3, r2
 801d496:	e793      	b.n	801d3c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d498:	45b6      	cmp	lr, r6
 801d49a:	ddb6      	ble.n	801d40a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d49c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d49e:	fb06 0202 	mla	r2, r6, r2, r0
 801d4a2:	1412      	asrs	r2, r2, #16
 801d4a4:	d4b1      	bmi.n	801d40a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d4a6:	4542      	cmp	r2, r8
 801d4a8:	daaf      	bge.n	801d40a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d4aa:	1cee      	adds	r6, r5, #3
 801d4ac:	4699      	mov	r9, r3
 801d4ae:	f1b9 0f00 	cmp.w	r9, #0
 801d4b2:	ddb0      	ble.n	801d416 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d4b4:	1422      	asrs	r2, r4, #16
 801d4b6:	9902      	ldr	r1, [sp, #8]
 801d4b8:	1407      	asrs	r7, r0, #16
 801d4ba:	fb01 2707 	mla	r7, r1, r7, r2
 801d4be:	9903      	ldr	r1, [sp, #12]
 801d4c0:	087a      	lsrs	r2, r7, #1
 801d4c2:	5c8a      	ldrb	r2, [r1, r2]
 801d4c4:	07f9      	lsls	r1, r7, #31
 801d4c6:	bf54      	ite	pl
 801d4c8:	f002 020f 	andpl.w	r2, r2, #15
 801d4cc:	1112      	asrmi	r2, r2, #4
 801d4ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d4d2:	b2d2      	uxtb	r2, r2
 801d4d4:	2a00      	cmp	r2, #0
 801d4d6:	d042      	beq.n	801d55e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801d4d8:	4957      	ldr	r1, [pc, #348]	; (801d638 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d4da:	680f      	ldr	r7, [r1, #0]
 801d4dc:	9905      	ldr	r1, [sp, #20]
 801d4de:	fa5f fb87 	uxtb.w	fp, r7
 801d4e2:	434a      	muls	r2, r1
 801d4e4:	f102 0c01 	add.w	ip, r2, #1
 801d4e8:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d4ec:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d4f0:	1212      	asrs	r2, r2, #8
 801d4f2:	fa1f fa82 	uxth.w	sl, r2
 801d4f6:	43d2      	mvns	r2, r2
 801d4f8:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4fc:	b2d2      	uxtb	r2, r2
 801d4fe:	fb0c bc02 	mla	ip, ip, r2, fp
 801d502:	fa1f fc8c 	uxth.w	ip, ip
 801d506:	f10c 0b01 	add.w	fp, ip, #1
 801d50a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d50e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d512:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d516:	fb1b fb0a 	smulbb	fp, fp, sl
 801d51a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d51e:	fb17 fa0a 	smulbb	sl, r7, sl
 801d522:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d526:	f806 cc03 	strb.w	ip, [r6, #-3]
 801d52a:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801d52e:	fb07 aa02 	mla	sl, r7, r2, sl
 801d532:	fb0c bc02 	mla	ip, ip, r2, fp
 801d536:	fa1f fa8a 	uxth.w	sl, sl
 801d53a:	fa1f fc8c 	uxth.w	ip, ip
 801d53e:	f10a 0701 	add.w	r7, sl, #1
 801d542:	f10c 0b01 	add.w	fp, ip, #1
 801d546:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d54a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d54e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d552:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d556:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d55a:	f806 cc02 	strb.w	ip, [r6, #-2]
 801d55e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d560:	3603      	adds	r6, #3
 801d562:	f109 39ff 	add.w	r9, r9, #4294967295
 801d566:	4414      	add	r4, r2
 801d568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d56a:	4410      	add	r0, r2
 801d56c:	e79f      	b.n	801d4ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801d56e:	1422      	asrs	r2, r4, #16
 801d570:	d457      	bmi.n	801d622 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d572:	4596      	cmp	lr, r2
 801d574:	dd55      	ble.n	801d622 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d576:	1407      	asrs	r7, r0, #16
 801d578:	d453      	bmi.n	801d622 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d57a:	4547      	cmp	r7, r8
 801d57c:	da51      	bge.n	801d622 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d57e:	9902      	ldr	r1, [sp, #8]
 801d580:	fb07 2701 	mla	r7, r7, r1, r2
 801d584:	9903      	ldr	r1, [sp, #12]
 801d586:	087a      	lsrs	r2, r7, #1
 801d588:	07ff      	lsls	r7, r7, #31
 801d58a:	5c8a      	ldrb	r2, [r1, r2]
 801d58c:	bf54      	ite	pl
 801d58e:	f002 020f 	andpl.w	r2, r2, #15
 801d592:	1112      	asrmi	r2, r2, #4
 801d594:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d598:	b2d2      	uxtb	r2, r2
 801d59a:	2a00      	cmp	r2, #0
 801d59c:	d041      	beq.n	801d622 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d59e:	4926      	ldr	r1, [pc, #152]	; (801d638 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d5a0:	680f      	ldr	r7, [r1, #0]
 801d5a2:	9905      	ldr	r1, [sp, #20]
 801d5a4:	fa5f fb87 	uxtb.w	fp, r7
 801d5a8:	434a      	muls	r2, r1
 801d5aa:	f102 0c01 	add.w	ip, r2, #1
 801d5ae:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d5b2:	f896 c000 	ldrb.w	ip, [r6]
 801d5b6:	1212      	asrs	r2, r2, #8
 801d5b8:	fa1f fa82 	uxth.w	sl, r2
 801d5bc:	43d2      	mvns	r2, r2
 801d5be:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5c2:	b2d2      	uxtb	r2, r2
 801d5c4:	fb0c bc02 	mla	ip, ip, r2, fp
 801d5c8:	fa1f fc8c 	uxth.w	ip, ip
 801d5cc:	f10c 0b01 	add.w	fp, ip, #1
 801d5d0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d5d4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d5d8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d5dc:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5e0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5e4:	fb17 fa0a 	smulbb	sl, r7, sl
 801d5e8:	78b7      	ldrb	r7, [r6, #2]
 801d5ea:	f886 c000 	strb.w	ip, [r6]
 801d5ee:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d5f2:	fb07 aa02 	mla	sl, r7, r2, sl
 801d5f6:	fb0c bc02 	mla	ip, ip, r2, fp
 801d5fa:	fa1f fa8a 	uxth.w	sl, sl
 801d5fe:	fa1f fc8c 	uxth.w	ip, ip
 801d602:	f10a 0701 	add.w	r7, sl, #1
 801d606:	f10c 0b01 	add.w	fp, ip, #1
 801d60a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d60e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d612:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d616:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d61a:	f886 a002 	strb.w	sl, [r6, #2]
 801d61e:	f886 c001 	strb.w	ip, [r6, #1]
 801d622:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d624:	3603      	adds	r6, #3
 801d626:	f109 39ff 	add.w	r9, r9, #4294967295
 801d62a:	4414      	add	r4, r2
 801d62c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d62e:	4410      	add	r0, r2
 801d630:	e6ed      	b.n	801d40e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801d632:	b007      	add	sp, #28
 801d634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d638:	2000b3f0 	.word	0x2000b3f0

0801d63c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d640:	b087      	sub	sp, #28
 801d642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d646:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d648:	9205      	str	r2, [sp, #20]
 801d64a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801d64e:	6860      	ldr	r0, [r4, #4]
 801d650:	9202      	str	r2, [sp, #8]
 801d652:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801d656:	9101      	str	r1, [sp, #4]
 801d658:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801d65c:	fb00 2606 	mla	r6, r0, r6, r2
 801d660:	6822      	ldr	r2, [r4, #0]
 801d662:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d666:	4416      	add	r6, r2
 801d668:	f108 0201 	add.w	r2, r8, #1
 801d66c:	f022 0201 	bic.w	r2, r2, #1
 801d670:	9203      	str	r2, [sp, #12]
 801d672:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d674:	6812      	ldr	r2, [r2, #0]
 801d676:	9204      	str	r2, [sp, #16]
 801d678:	9a01      	ldr	r2, [sp, #4]
 801d67a:	2a00      	cmp	r2, #0
 801d67c:	dc03      	bgt.n	801d686 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d67e:	9a05      	ldr	r2, [sp, #20]
 801d680:	2a00      	cmp	r2, #0
 801d682:	f340 813a 	ble.w	801d8fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d686:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d688:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d68c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d68e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d692:	2b00      	cmp	r3, #0
 801d694:	dd0f      	ble.n	801d6b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d696:	142a      	asrs	r2, r5, #16
 801d698:	d406      	bmi.n	801d6a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d69a:	4590      	cmp	r8, r2
 801d69c:	dd04      	ble.n	801d6a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d69e:	1422      	asrs	r2, r4, #16
 801d6a0:	d402      	bmi.n	801d6a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d6a2:	9802      	ldr	r0, [sp, #8]
 801d6a4:	4282      	cmp	r2, r0
 801d6a6:	db07      	blt.n	801d6b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d6a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d6aa:	3b01      	subs	r3, #1
 801d6ac:	3603      	adds	r6, #3
 801d6ae:	4415      	add	r5, r2
 801d6b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d6b2:	4414      	add	r4, r2
 801d6b4:	e7ed      	b.n	801d692 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d6b6:	d073      	beq.n	801d7a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801d6b8:	1e5a      	subs	r2, r3, #1
 801d6ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d6bc:	fb00 5002 	mla	r0, r0, r2, r5
 801d6c0:	1400      	asrs	r0, r0, #16
 801d6c2:	d464      	bmi.n	801d78e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d6c4:	4580      	cmp	r8, r0
 801d6c6:	dd62      	ble.n	801d78e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d6c8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d6ca:	fb00 4202 	mla	r2, r0, r2, r4
 801d6ce:	1412      	asrs	r2, r2, #16
 801d6d0:	d45d      	bmi.n	801d78e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d6d2:	9802      	ldr	r0, [sp, #8]
 801d6d4:	4282      	cmp	r2, r0
 801d6d6:	da5a      	bge.n	801d78e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d6d8:	1cf0      	adds	r0, r6, #3
 801d6da:	469a      	mov	sl, r3
 801d6dc:	f1ba 0f00 	cmp.w	sl, #0
 801d6e0:	dd59      	ble.n	801d796 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801d6e2:	142a      	asrs	r2, r5, #16
 801d6e4:	9903      	ldr	r1, [sp, #12]
 801d6e6:	1427      	asrs	r7, r4, #16
 801d6e8:	fb01 2707 	mla	r7, r1, r7, r2
 801d6ec:	9904      	ldr	r1, [sp, #16]
 801d6ee:	087a      	lsrs	r2, r7, #1
 801d6f0:	5c8a      	ldrb	r2, [r1, r2]
 801d6f2:	07f9      	lsls	r1, r7, #31
 801d6f4:	bf54      	ite	pl
 801d6f6:	f002 020f 	andpl.w	r2, r2, #15
 801d6fa:	1112      	asrmi	r2, r2, #4
 801d6fc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d700:	b2d2      	uxtb	r2, r2
 801d702:	2a00      	cmp	r2, #0
 801d704:	d03b      	beq.n	801d77e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d706:	497e      	ldr	r1, [pc, #504]	; (801d900 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d708:	2aff      	cmp	r2, #255	; 0xff
 801d70a:	680f      	ldr	r7, [r1, #0]
 801d70c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d710:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d714:	b2ff      	uxtb	r7, r7
 801d716:	f000 80e9 	beq.w	801d8ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d71a:	fa1f fe82 	uxth.w	lr, r2
 801d71e:	43d2      	mvns	r2, r2
 801d720:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801d724:	fb17 f70e 	smulbb	r7, r7, lr
 801d728:	b2d2      	uxtb	r2, r2
 801d72a:	fb19 f90e 	smulbb	r9, r9, lr
 801d72e:	fb0c 7702 	mla	r7, ip, r2, r7
 801d732:	fb1b fe0e 	smulbb	lr, fp, lr
 801d736:	b2bf      	uxth	r7, r7
 801d738:	f107 0c01 	add.w	ip, r7, #1
 801d73c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d740:	123f      	asrs	r7, r7, #8
 801d742:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d746:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d74a:	fb07 9902 	mla	r9, r7, r2, r9
 801d74e:	fa1f f989 	uxth.w	r9, r9
 801d752:	f109 0701 	add.w	r7, r9, #1
 801d756:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d75a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d75e:	fb07 ee02 	mla	lr, r7, r2, lr
 801d762:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d766:	fa1f fe8e 	uxth.w	lr, lr
 801d76a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d76e:	f10e 0201 	add.w	r2, lr, #1
 801d772:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d776:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d77a:	f800 ec01 	strb.w	lr, [r0, #-1]
 801d77e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d780:	3003      	adds	r0, #3
 801d782:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d786:	4415      	add	r5, r2
 801d788:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d78a:	4414      	add	r4, r2
 801d78c:	e7a6      	b.n	801d6dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d78e:	2700      	movs	r7, #0
 801d790:	1bda      	subs	r2, r3, r7
 801d792:	2a00      	cmp	r2, #0
 801d794:	dc40      	bgt.n	801d818 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d796:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d79a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d79e:	441e      	add	r6, r3
 801d7a0:	9b01      	ldr	r3, [sp, #4]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	f340 80a9 	ble.w	801d8fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d7a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d7ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d7b2:	eeb0 6a62 	vmov.f32	s12, s5
 801d7b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d7ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d7be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7c2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d7c6:	eeb0 6a43 	vmov.f32	s12, s6
 801d7ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7ce:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d7d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d7d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d7de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d7e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d7e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7ea:	ee12 2a90 	vmov	r2, s5
 801d7ee:	eef0 2a47 	vmov.f32	s5, s14
 801d7f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7f6:	ee13 2a10 	vmov	r2, s6
 801d7fa:	9313      	str	r3, [sp, #76]	; 0x4c
 801d7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d7fe:	eeb0 3a67 	vmov.f32	s6, s15
 801d802:	fb92 f3f3 	sdiv	r3, r2, r3
 801d806:	9314      	str	r3, [sp, #80]	; 0x50
 801d808:	9b01      	ldr	r3, [sp, #4]
 801d80a:	9a05      	ldr	r2, [sp, #20]
 801d80c:	3b01      	subs	r3, #1
 801d80e:	9301      	str	r3, [sp, #4]
 801d810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d812:	bf08      	it	eq
 801d814:	4613      	moveq	r3, r2
 801d816:	e72f      	b.n	801d678 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d818:	142a      	asrs	r2, r5, #16
 801d81a:	d458      	bmi.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d81c:	4590      	cmp	r8, r2
 801d81e:	dd56      	ble.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d820:	1420      	asrs	r0, r4, #16
 801d822:	d454      	bmi.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d824:	9902      	ldr	r1, [sp, #8]
 801d826:	4288      	cmp	r0, r1
 801d828:	da51      	bge.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d82a:	9903      	ldr	r1, [sp, #12]
 801d82c:	fb00 2001 	mla	r0, r0, r1, r2
 801d830:	9904      	ldr	r1, [sp, #16]
 801d832:	0842      	lsrs	r2, r0, #1
 801d834:	07c0      	lsls	r0, r0, #31
 801d836:	5c8a      	ldrb	r2, [r1, r2]
 801d838:	bf54      	ite	pl
 801d83a:	f002 020f 	andpl.w	r2, r2, #15
 801d83e:	1112      	asrmi	r2, r2, #4
 801d840:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d844:	b2d2      	uxtb	r2, r2
 801d846:	2a00      	cmp	r2, #0
 801d848:	d041      	beq.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d84a:	492d      	ldr	r1, [pc, #180]	; (801d900 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d84c:	2aff      	cmp	r2, #255	; 0xff
 801d84e:	6808      	ldr	r0, [r1, #0]
 801d850:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d854:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d858:	fa5f fc80 	uxtb.w	ip, r0
 801d85c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d860:	d03b      	beq.n	801d8da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801d862:	fa1f f982 	uxth.w	r9, r2
 801d866:	4438      	add	r0, r7
 801d868:	43d2      	mvns	r2, r2
 801d86a:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d86e:	fb1c fc09 	smulbb	ip, ip, r9
 801d872:	fb1a fa09 	smulbb	sl, sl, r9
 801d876:	b2d2      	uxtb	r2, r2
 801d878:	fb1b f909 	smulbb	r9, fp, r9
 801d87c:	fb0e cc02 	mla	ip, lr, r2, ip
 801d880:	fa1f fc8c 	uxth.w	ip, ip
 801d884:	f10c 0e01 	add.w	lr, ip, #1
 801d888:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d88c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d890:	f806 c000 	strb.w	ip, [r6, r0]
 801d894:	4430      	add	r0, r6
 801d896:	f890 c001 	ldrb.w	ip, [r0, #1]
 801d89a:	fb0c aa02 	mla	sl, ip, r2, sl
 801d89e:	fa1f fa8a 	uxth.w	sl, sl
 801d8a2:	f10a 0c01 	add.w	ip, sl, #1
 801d8a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d8aa:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d8ae:	fb0c 9902 	mla	r9, ip, r2, r9
 801d8b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d8b6:	fa1f f989 	uxth.w	r9, r9
 801d8ba:	f880 a001 	strb.w	sl, [r0, #1]
 801d8be:	f109 0201 	add.w	r2, r9, #1
 801d8c2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d8c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8ca:	f880 9002 	strb.w	r9, [r0, #2]
 801d8ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d8d0:	3701      	adds	r7, #1
 801d8d2:	4415      	add	r5, r2
 801d8d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d8d6:	4414      	add	r4, r2
 801d8d8:	e75a      	b.n	801d790 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d8da:	4438      	add	r0, r7
 801d8dc:	f806 c000 	strb.w	ip, [r6, r0]
 801d8e0:	4430      	add	r0, r6
 801d8e2:	f880 a001 	strb.w	sl, [r0, #1]
 801d8e6:	f880 b002 	strb.w	fp, [r0, #2]
 801d8ea:	e7f0      	b.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d8ec:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d8f0:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d8f4:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d8f8:	e741      	b.n	801d77e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d8fa:	b007      	add	sp, #28
 801d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d900:	2000b3f0 	.word	0x2000b3f0

0801d904 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d904:	4770      	bx	lr

0801d906 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d906:	4770      	bx	lr

0801d908 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d908:	4770      	bx	lr

0801d90a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d90a:	4770      	bx	lr

0801d90c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d90c:	4770      	bx	lr

0801d90e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d90e:	4770      	bx	lr

0801d910 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d910:	4770      	bx	lr

0801d912 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d912:	4770      	bx	lr

0801d914 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d914:	4770      	bx	lr

0801d916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d916:	4770      	bx	lr

0801d918 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d918:	4770      	bx	lr

0801d91a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d91a:	4770      	bx	lr

0801d91c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d91c:	4770      	bx	lr

0801d91e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d91e:	4770      	bx	lr

0801d920 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d920:	4770      	bx	lr

0801d922 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d922:	4770      	bx	lr

0801d924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d924:	4770      	bx	lr

0801d926 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d926:	4770      	bx	lr

0801d928 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d928:	4770      	bx	lr

0801d92a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d92a:	4770      	bx	lr

0801d92c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d92c:	2bff      	cmp	r3, #255	; 0xff
 801d92e:	b508      	push	{r3, lr}
 801d930:	d04f      	beq.n	801d9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d932:	2a2c      	cmp	r2, #44	; 0x2c
 801d934:	d032      	beq.n	801d99c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d936:	d80f      	bhi.n	801d958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d938:	2a08      	cmp	r2, #8
 801d93a:	d046      	beq.n	801d9ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d93c:	d805      	bhi.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d93e:	2a04      	cmp	r2, #4
 801d940:	d041      	beq.n	801d9c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d942:	2a05      	cmp	r2, #5
 801d944:	d03d      	beq.n	801d9c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d946:	2000      	movs	r0, #0
 801d948:	e027      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d94a:	2a0a      	cmp	r2, #10
 801d94c:	d03d      	beq.n	801d9ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d94e:	d301      	bcc.n	801d954 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d950:	2a0b      	cmp	r2, #11
 801d952:	d1f8      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d954:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d956:	e020      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d958:	2a30      	cmp	r2, #48	; 0x30
 801d95a:	d038      	beq.n	801d9ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d95c:	d808      	bhi.n	801d970 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d95e:	2a2e      	cmp	r2, #46	; 0x2e
 801d960:	684b      	ldr	r3, [r1, #4]
 801d962:	d029      	beq.n	801d9b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d964:	d90b      	bls.n	801d97e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d966:	781b      	ldrb	r3, [r3, #0]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d1ec      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d96c:	6a00      	ldr	r0, [r0, #32]
 801d96e:	e014      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d970:	2a32      	cmp	r2, #50	; 0x32
 801d972:	d02c      	beq.n	801d9ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d974:	d301      	bcc.n	801d97a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d976:	2a33      	cmp	r2, #51	; 0x33
 801d978:	d1e5      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d97a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d97c:	e00d      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d97e:	781b      	ldrb	r3, [r3, #0]
 801d980:	2b01      	cmp	r3, #1
 801d982:	d009      	beq.n	801d998 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d984:	d3f2      	bcc.n	801d96c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d986:	2b02      	cmp	r3, #2
 801d988:	d1dd      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d98a:	4b39      	ldr	r3, [pc, #228]	; (801da70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d98c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 801d990:	4a38      	ldr	r2, [pc, #224]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d992:	4839      	ldr	r0, [pc, #228]	; (801da78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d994:	f008 f874 	bl	8025a80 <__assert_func>
 801d998:	6900      	ldr	r0, [r0, #16]
 801d99a:	bd08      	pop	{r3, pc}
 801d99c:	684b      	ldr	r3, [r1, #4]
 801d99e:	781b      	ldrb	r3, [r3, #0]
 801d9a0:	2b01      	cmp	r3, #1
 801d9a2:	d007      	beq.n	801d9b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d9a4:	d30b      	bcc.n	801d9be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d9a6:	2b02      	cmp	r3, #2
 801d9a8:	d1cd      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9aa:	4b31      	ldr	r3, [pc, #196]	; (801da70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d9ac:	f44f 6181 	mov.w	r1, #1032	; 0x408
 801d9b0:	4a30      	ldr	r2, [pc, #192]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d9b2:	e7ee      	b.n	801d992 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d9b4:	6880      	ldr	r0, [r0, #8]
 801d9b6:	e7f0      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9b8:	781b      	ldrb	r3, [r3, #0]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d1c3      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9be:	6980      	ldr	r0, [r0, #24]
 801d9c0:	e7eb      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d9c4:	e7e9      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d9c8:	e7e7      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d9cc:	e7e5      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ce:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d9d0:	e7e3      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9d2:	2a2c      	cmp	r2, #44	; 0x2c
 801d9d4:	d030      	beq.n	801da38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d9d6:	d80f      	bhi.n	801d9f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d9d8:	2a08      	cmp	r2, #8
 801d9da:	d044      	beq.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d9dc:	d805      	bhi.n	801d9ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d9de:	2a04      	cmp	r2, #4
 801d9e0:	d03f      	beq.n	801da62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d9e2:	2a05      	cmp	r2, #5
 801d9e4:	d1af      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9e6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d9e8:	e7d7      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ea:	2a0a      	cmp	r2, #10
 801d9ec:	d03b      	beq.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d9ee:	d301      	bcc.n	801d9f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d9f0:	2a0b      	cmp	r2, #11
 801d9f2:	d1a8      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9f4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d9f6:	e7d0      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9f8:	2a30      	cmp	r2, #48	; 0x30
 801d9fa:	d036      	beq.n	801da6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d9fc:	d808      	bhi.n	801da10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d9fe:	2a2e      	cmp	r2, #46	; 0x2e
 801da00:	684b      	ldr	r3, [r1, #4]
 801da02:	d028      	beq.n	801da56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801da04:	d90b      	bls.n	801da1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801da06:	781b      	ldrb	r3, [r3, #0]
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d19c      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801da0e:	e7c4      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da10:	2a32      	cmp	r2, #50	; 0x32
 801da12:	d02a      	beq.n	801da6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801da14:	d301      	bcc.n	801da1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801da16:	2a33      	cmp	r2, #51	; 0x33
 801da18:	d195      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801da1c:	e7bd      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da1e:	781b      	ldrb	r3, [r3, #0]
 801da20:	2b01      	cmp	r3, #1
 801da22:	d007      	beq.n	801da34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801da24:	d3f2      	bcc.n	801da0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801da26:	2b02      	cmp	r3, #2
 801da28:	d18d      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da2a:	4b11      	ldr	r3, [pc, #68]	; (801da70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801da2c:	f240 4139 	movw	r1, #1081	; 0x439
 801da30:	4a10      	ldr	r2, [pc, #64]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801da32:	e7ae      	b.n	801d992 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801da34:	6940      	ldr	r0, [r0, #20]
 801da36:	e7b0      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da38:	684b      	ldr	r3, [r1, #4]
 801da3a:	781b      	ldrb	r3, [r3, #0]
 801da3c:	2b01      	cmp	r3, #1
 801da3e:	d008      	beq.n	801da52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801da40:	d30d      	bcc.n	801da5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801da42:	2b02      	cmp	r3, #2
 801da44:	f47f af7f 	bne.w	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da48:	4b09      	ldr	r3, [pc, #36]	; (801da70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801da4a:	f240 4145 	movw	r1, #1093	; 0x445
 801da4e:	4a09      	ldr	r2, [pc, #36]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801da50:	e79f      	b.n	801d992 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801da52:	68c0      	ldr	r0, [r0, #12]
 801da54:	e7a1      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da56:	781b      	ldrb	r3, [r3, #0]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	f47f af74 	bne.w	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da5e:	69c0      	ldr	r0, [r0, #28]
 801da60:	e79b      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801da64:	e799      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801da68:	e797      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801da6c:	e795      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da6e:	bf00      	nop
 801da70:	0802b18b 	.word	0x0802b18b
 801da74:	0802b93b 	.word	0x0802b93b
 801da78:	0802b1d7 	.word	0x0802b1d7

0801da7c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801da7c:	b508      	push	{r3, lr}
 801da7e:	4b06      	ldr	r3, [pc, #24]	; (801da98 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801da80:	8818      	ldrh	r0, [r3, #0]
 801da82:	b928      	cbnz	r0, 801da90 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801da84:	4b05      	ldr	r3, [pc, #20]	; (801da9c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801da86:	2155      	movs	r1, #85	; 0x55
 801da88:	4a05      	ldr	r2, [pc, #20]	; (801daa0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801da8a:	4806      	ldr	r0, [pc, #24]	; (801daa4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801da8c:	f007 fff8 	bl	8025a80 <__assert_func>
 801da90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801da94:	b280      	uxth	r0, r0
 801da96:	bd08      	pop	{r3, pc}
 801da98:	2000b3c2 	.word	0x2000b3c2
 801da9c:	0802b424 	.word	0x0802b424
 801daa0:	0802b900 	.word	0x0802b900
 801daa4:	0802b466 	.word	0x0802b466

0801daa8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801daa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daac:	4616      	mov	r6, r2
 801daae:	b087      	sub	sp, #28
 801dab0:	461f      	mov	r7, r3
 801dab2:	b34b      	cbz	r3, 801db08 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801dab4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801dab8:	2b00      	cmp	r3, #0
 801daba:	dd25      	ble.n	801db08 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801dabc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	dd21      	ble.n	801db08 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801dac4:	6808      	ldr	r0, [r1, #0]
 801dac6:	ab04      	add	r3, sp, #16
 801dac8:	6849      	ldr	r1, [r1, #4]
 801daca:	4c5a      	ldr	r4, [pc, #360]	; (801dc34 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801dacc:	c303      	stmia	r3!, {r0, r1}
 801dace:	a804      	add	r0, sp, #16
 801dad0:	f7fb fccc 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dad4:	6820      	ldr	r0, [r4, #0]
 801dad6:	6803      	ldr	r3, [r0, #0]
 801dad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dada:	4798      	blx	r3
 801dadc:	2fff      	cmp	r7, #255	; 0xff
 801dade:	4623      	mov	r3, r4
 801dae0:	d015      	beq.n	801db0e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801dae2:	f010 0f08 	tst.w	r0, #8
 801dae6:	d015      	beq.n	801db14 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801dae8:	6818      	ldr	r0, [r3, #0]
 801daea:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801daee:	6801      	ldr	r1, [r0, #0]
 801daf0:	9401      	str	r4, [sp, #4]
 801daf2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801daf6:	9702      	str	r7, [sp, #8]
 801daf8:	9400      	str	r4, [sp, #0]
 801dafa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801dafe:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801db00:	4631      	mov	r1, r6
 801db02:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801db06:	47a0      	blx	r4
 801db08:	b007      	add	sp, #28
 801db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db0e:	f010 0f02 	tst.w	r0, #2
 801db12:	e7e8      	b.n	801dae6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801db14:	6818      	ldr	r0, [r3, #0]
 801db16:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801db1a:	6803      	ldr	r3, [r0, #0]
 801db1c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801db20:	6a1b      	ldr	r3, [r3, #32]
 801db22:	4798      	blx	r3
 801db24:	4944      	ldr	r1, [pc, #272]	; (801dc38 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801db26:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801db2a:	2fff      	cmp	r7, #255	; 0xff
 801db2c:	f8b1 c000 	ldrh.w	ip, [r1]
 801db30:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801db34:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801db38:	4688      	mov	r8, r1
 801db3a:	fb0c 2303 	mla	r3, ip, r3, r2
 801db3e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801db42:	b2f2      	uxtb	r2, r6
 801db44:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801db48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db4c:	4418      	add	r0, r3
 801db4e:	d112      	bne.n	801db76 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801db50:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db54:	2100      	movs	r1, #0
 801db56:	42a9      	cmp	r1, r5
 801db58:	da66      	bge.n	801dc28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801db5a:	4603      	mov	r3, r0
 801db5c:	2700      	movs	r7, #0
 801db5e:	42a7      	cmp	r7, r4
 801db60:	f103 0303 	add.w	r3, r3, #3
 801db64:	da57      	bge.n	801dc16 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801db66:	f803 2c03 	strb.w	r2, [r3, #-3]
 801db6a:	3701      	adds	r7, #1
 801db6c:	f803 ec02 	strb.w	lr, [r3, #-2]
 801db70:	f803 cc01 	strb.w	ip, [r3, #-1]
 801db74:	e7f3      	b.n	801db5e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801db76:	b2bb      	uxth	r3, r7
 801db78:	f04f 0800 	mov.w	r8, #0
 801db7c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db80:	fb0c fc03 	mul.w	ip, ip, r3
 801db84:	fb0e fe03 	mul.w	lr, lr, r3
 801db88:	435a      	muls	r2, r3
 801db8a:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801db8e:	460f      	mov	r7, r1
 801db90:	b29b      	uxth	r3, r3
 801db92:	45a8      	cmp	r8, r5
 801db94:	da48      	bge.n	801dc28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801db96:	4601      	mov	r1, r0
 801db98:	f04f 0a00 	mov.w	sl, #0
 801db9c:	45a2      	cmp	sl, r4
 801db9e:	f101 0103 	add.w	r1, r1, #3
 801dba2:	da2f      	bge.n	801dc04 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801dba4:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801dba8:	f10a 0a01 	add.w	sl, sl, #1
 801dbac:	fb19 f903 	smulbb	r9, r9, r3
 801dbb0:	4491      	add	r9, r2
 801dbb2:	fa1f f989 	uxth.w	r9, r9
 801dbb6:	f109 0b01 	add.w	fp, r9, #1
 801dbba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbc2:	f801 9c03 	strb.w	r9, [r1, #-3]
 801dbc6:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801dbca:	fb19 f903 	smulbb	r9, r9, r3
 801dbce:	44f1      	add	r9, lr
 801dbd0:	fa1f f989 	uxth.w	r9, r9
 801dbd4:	f109 0b01 	add.w	fp, r9, #1
 801dbd8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbdc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbe0:	f801 9c02 	strb.w	r9, [r1, #-2]
 801dbe4:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801dbe8:	fb19 f903 	smulbb	r9, r9, r3
 801dbec:	44e1      	add	r9, ip
 801dbee:	fa1f f989 	uxth.w	r9, r9
 801dbf2:	f109 0b01 	add.w	fp, r9, #1
 801dbf6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbfa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbfe:	f801 9c01 	strb.w	r9, [r1, #-1]
 801dc02:	e7cb      	b.n	801db9c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801dc04:	8839      	ldrh	r1, [r7, #0]
 801dc06:	f108 0801 	add.w	r8, r8, #1
 801dc0a:	1b09      	subs	r1, r1, r4
 801dc0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dc10:	4431      	add	r1, r6
 801dc12:	4408      	add	r0, r1
 801dc14:	e7bd      	b.n	801db92 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801dc16:	f8b8 3000 	ldrh.w	r3, [r8]
 801dc1a:	3101      	adds	r1, #1
 801dc1c:	1b1b      	subs	r3, r3, r4
 801dc1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc22:	4433      	add	r3, r6
 801dc24:	4418      	add	r0, r3
 801dc26:	e796      	b.n	801db56 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801dc28:	4b02      	ldr	r3, [pc, #8]	; (801dc34 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801dc2a:	6818      	ldr	r0, [r3, #0]
 801dc2c:	6803      	ldr	r3, [r0, #0]
 801dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc30:	4798      	blx	r3
 801dc32:	e769      	b.n	801db08 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801dc34:	2000b3c8 	.word	0x2000b3c8
 801dc38:	2000b3c2 	.word	0x2000b3c2

0801dc3c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801dc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc40:	b08d      	sub	sp, #52	; 0x34
 801dc42:	460c      	mov	r4, r1
 801dc44:	4617      	mov	r7, r2
 801dc46:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801dc4a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801dc4e:	2e00      	cmp	r6, #0
 801dc50:	d04a      	beq.n	801dce8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801dc52:	6810      	ldr	r0, [r2, #0]
 801dc54:	ad08      	add	r5, sp, #32
 801dc56:	6851      	ldr	r1, [r2, #4]
 801dc58:	c503      	stmia	r5!, {r0, r1}
 801dc5a:	6818      	ldr	r0, [r3, #0]
 801dc5c:	ad0a      	add	r5, sp, #40	; 0x28
 801dc5e:	6859      	ldr	r1, [r3, #4]
 801dc60:	c503      	stmia	r5!, {r0, r1}
 801dc62:	a808      	add	r0, sp, #32
 801dc64:	f7fb fc02 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc68:	4639      	mov	r1, r7
 801dc6a:	a80a      	add	r0, sp, #40	; 0x28
 801dc6c:	4f59      	ldr	r7, [pc, #356]	; (801ddd4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801dc6e:	f7fb fbe5 	bl	801943c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc72:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dc76:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801dc7a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801dc7e:	6838      	ldr	r0, [r7, #0]
 801dc80:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dc84:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801dc88:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801dc8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dc90:	440c      	add	r4, r1
 801dc92:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801dc96:	440a      	add	r2, r1
 801dc98:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801dc9c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801dca0:	4413      	add	r3, r2
 801dca2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801dca6:	6803      	ldr	r3, [r0, #0]
 801dca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcaa:	4798      	blx	r3
 801dcac:	2eff      	cmp	r6, #255	; 0xff
 801dcae:	f000 8089 	beq.w	801ddc4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801dcb2:	0743      	lsls	r3, r0, #29
 801dcb4:	d405      	bmi.n	801dcc2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801dcb6:	f1b9 0f00 	cmp.w	r9, #0
 801dcba:	d018      	beq.n	801dcee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801dcbc:	f010 0f10 	tst.w	r0, #16
 801dcc0:	d015      	beq.n	801dcee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801dcc2:	6838      	ldr	r0, [r7, #0]
 801dcc4:	b2ad      	uxth	r5, r5
 801dcc6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801dcca:	6801      	ldr	r1, [r0, #0]
 801dccc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801dcd0:	9500      	str	r5, [sp, #0]
 801dcd2:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801dcd6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801dcda:	9602      	str	r6, [sp, #8]
 801dcdc:	fa1f f688 	uxth.w	r6, r8
 801dce0:	9601      	str	r6, [sp, #4]
 801dce2:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801dce4:	4621      	mov	r1, r4
 801dce6:	47a8      	blx	r5
 801dce8:	b00d      	add	sp, #52	; 0x34
 801dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcee:	6838      	ldr	r0, [r7, #0]
 801dcf0:	6803      	ldr	r3, [r0, #0]
 801dcf2:	6a1b      	ldr	r3, [r3, #32]
 801dcf4:	4798      	blx	r3
 801dcf6:	4a38      	ldr	r2, [pc, #224]	; (801ddd8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801dcf8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801dcfc:	2eff      	cmp	r6, #255	; 0xff
 801dcfe:	8813      	ldrh	r3, [r2, #0]
 801dd00:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801dd04:	fb0c 1303 	mla	r3, ip, r3, r1
 801dd08:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801dd0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd10:	4418      	add	r0, r3
 801dd12:	d032      	beq.n	801dd7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801dd14:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801dd18:	f04f 0c00 	mov.w	ip, #0
 801dd1c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801dd20:	9306      	str	r3, [sp, #24]
 801dd22:	45c4      	cmp	ip, r8
 801dd24:	da49      	bge.n	801ddba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801dd26:	4686      	mov	lr, r0
 801dd28:	46a1      	mov	r9, r4
 801dd2a:	eba9 0304 	sub.w	r3, r9, r4
 801dd2e:	428b      	cmp	r3, r1
 801dd30:	da13      	bge.n	801dd5a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801dd32:	f819 3b01 	ldrb.w	r3, [r9], #1
 801dd36:	f89e b000 	ldrb.w	fp, [lr]
 801dd3a:	9307      	str	r3, [sp, #28]
 801dd3c:	9b06      	ldr	r3, [sp, #24]
 801dd3e:	fb1b fb03 	smulbb	fp, fp, r3
 801dd42:	9b07      	ldr	r3, [sp, #28]
 801dd44:	fb03 b306 	mla	r3, r3, r6, fp
 801dd48:	b29b      	uxth	r3, r3
 801dd4a:	f103 0b01 	add.w	fp, r3, #1
 801dd4e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801dd52:	121b      	asrs	r3, r3, #8
 801dd54:	f80e 3b01 	strb.w	r3, [lr], #1
 801dd58:	e7e7      	b.n	801dd2a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801dd5a:	8813      	ldrh	r3, [r2, #0]
 801dd5c:	f10c 0c01 	add.w	ip, ip, #1
 801dd60:	1b5b      	subs	r3, r3, r5
 801dd62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd66:	4453      	add	r3, sl
 801dd68:	4418      	add	r0, r3
 801dd6a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dd6e:	1b5b      	subs	r3, r3, r5
 801dd70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd74:	4453      	add	r3, sl
 801dd76:	441c      	add	r4, r3
 801dd78:	e7d3      	b.n	801dd22 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801dd7a:	2600      	movs	r6, #0
 801dd7c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801dd80:	4546      	cmp	r6, r8
 801dd82:	da1a      	bge.n	801ddba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801dd84:	f100 3eff 	add.w	lr, r0, #4294967295
 801dd88:	4623      	mov	r3, r4
 801dd8a:	eba3 0904 	sub.w	r9, r3, r4
 801dd8e:	4589      	cmp	r9, r1
 801dd90:	da04      	bge.n	801dd9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801dd92:	f813 9b01 	ldrb.w	r9, [r3], #1
 801dd96:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801dd9a:	e7f6      	b.n	801dd8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801dd9c:	8813      	ldrh	r3, [r2, #0]
 801dd9e:	3601      	adds	r6, #1
 801dda0:	1b5b      	subs	r3, r3, r5
 801dda2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dda6:	4463      	add	r3, ip
 801dda8:	4418      	add	r0, r3
 801ddaa:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801ddae:	1b5b      	subs	r3, r3, r5
 801ddb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ddb4:	4463      	add	r3, ip
 801ddb6:	441c      	add	r4, r3
 801ddb8:	e7e2      	b.n	801dd80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801ddba:	6838      	ldr	r0, [r7, #0]
 801ddbc:	6803      	ldr	r3, [r0, #0]
 801ddbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddc0:	4798      	blx	r3
 801ddc2:	e791      	b.n	801dce8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ddc4:	f1b9 0f00 	cmp.w	r9, #0
 801ddc8:	f47f af78 	bne.w	801dcbc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801ddcc:	f010 0f01 	tst.w	r0, #1
 801ddd0:	e776      	b.n	801dcc0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801ddd2:	bf00      	nop
 801ddd4:	2000b3c8 	.word	0x2000b3c8
 801ddd8:	2000b3c2 	.word	0x2000b3c2

0801dddc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dddc:	b510      	push	{r4, lr}
 801ddde:	4604      	mov	r4, r0
 801dde0:	2104      	movs	r1, #4
 801dde2:	f007 fe21 	bl	8025a28 <_ZdlPvj>
 801dde6:	4620      	mov	r0, r4
 801dde8:	bd10      	pop	{r4, pc}

0801ddea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ddea:	b510      	push	{r4, lr}
 801ddec:	4604      	mov	r4, r0
 801ddee:	2104      	movs	r1, #4
 801ddf0:	f007 fe1a 	bl	8025a28 <_ZdlPvj>
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	bd10      	pop	{r4, pc}

0801ddf8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ddf8:	b510      	push	{r4, lr}
 801ddfa:	4604      	mov	r4, r0
 801ddfc:	2104      	movs	r1, #4
 801ddfe:	f007 fe13 	bl	8025a28 <_ZdlPvj>
 801de02:	4620      	mov	r0, r4
 801de04:	bd10      	pop	{r4, pc}

0801de06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801de06:	b510      	push	{r4, lr}
 801de08:	4604      	mov	r4, r0
 801de0a:	2104      	movs	r1, #4
 801de0c:	f007 fe0c 	bl	8025a28 <_ZdlPvj>
 801de10:	4620      	mov	r0, r4
 801de12:	bd10      	pop	{r4, pc}

0801de14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801de14:	b510      	push	{r4, lr}
 801de16:	4604      	mov	r4, r0
 801de18:	2104      	movs	r1, #4
 801de1a:	f007 fe05 	bl	8025a28 <_ZdlPvj>
 801de1e:	4620      	mov	r0, r4
 801de20:	bd10      	pop	{r4, pc}

0801de22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801de22:	b510      	push	{r4, lr}
 801de24:	4604      	mov	r4, r0
 801de26:	2104      	movs	r1, #4
 801de28:	f007 fdfe 	bl	8025a28 <_ZdlPvj>
 801de2c:	4620      	mov	r0, r4
 801de2e:	bd10      	pop	{r4, pc}

0801de30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801de30:	b510      	push	{r4, lr}
 801de32:	4604      	mov	r4, r0
 801de34:	2104      	movs	r1, #4
 801de36:	f007 fdf7 	bl	8025a28 <_ZdlPvj>
 801de3a:	4620      	mov	r0, r4
 801de3c:	bd10      	pop	{r4, pc}

0801de3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801de3e:	b510      	push	{r4, lr}
 801de40:	4604      	mov	r4, r0
 801de42:	2104      	movs	r1, #4
 801de44:	f007 fdf0 	bl	8025a28 <_ZdlPvj>
 801de48:	4620      	mov	r0, r4
 801de4a:	bd10      	pop	{r4, pc}

0801de4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801de4c:	b510      	push	{r4, lr}
 801de4e:	4604      	mov	r4, r0
 801de50:	2104      	movs	r1, #4
 801de52:	f007 fde9 	bl	8025a28 <_ZdlPvj>
 801de56:	4620      	mov	r0, r4
 801de58:	bd10      	pop	{r4, pc}

0801de5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801de5a:	b510      	push	{r4, lr}
 801de5c:	4604      	mov	r4, r0
 801de5e:	2104      	movs	r1, #4
 801de60:	f007 fde2 	bl	8025a28 <_ZdlPvj>
 801de64:	4620      	mov	r0, r4
 801de66:	bd10      	pop	{r4, pc}

0801de68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801de68:	b510      	push	{r4, lr}
 801de6a:	4604      	mov	r4, r0
 801de6c:	2104      	movs	r1, #4
 801de6e:	f007 fddb 	bl	8025a28 <_ZdlPvj>
 801de72:	4620      	mov	r0, r4
 801de74:	bd10      	pop	{r4, pc}

0801de76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801de76:	b510      	push	{r4, lr}
 801de78:	4604      	mov	r4, r0
 801de7a:	2104      	movs	r1, #4
 801de7c:	f007 fdd4 	bl	8025a28 <_ZdlPvj>
 801de80:	4620      	mov	r0, r4
 801de82:	bd10      	pop	{r4, pc}

0801de84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801de84:	b510      	push	{r4, lr}
 801de86:	4604      	mov	r4, r0
 801de88:	2104      	movs	r1, #4
 801de8a:	f007 fdcd 	bl	8025a28 <_ZdlPvj>
 801de8e:	4620      	mov	r0, r4
 801de90:	bd10      	pop	{r4, pc}

0801de92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801de92:	b510      	push	{r4, lr}
 801de94:	4604      	mov	r4, r0
 801de96:	2104      	movs	r1, #4
 801de98:	f007 fdc6 	bl	8025a28 <_ZdlPvj>
 801de9c:	4620      	mov	r0, r4
 801de9e:	bd10      	pop	{r4, pc}

0801dea0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dea0:	b510      	push	{r4, lr}
 801dea2:	4604      	mov	r4, r0
 801dea4:	2104      	movs	r1, #4
 801dea6:	f007 fdbf 	bl	8025a28 <_ZdlPvj>
 801deaa:	4620      	mov	r0, r4
 801deac:	bd10      	pop	{r4, pc}

0801deae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801deae:	b510      	push	{r4, lr}
 801deb0:	4604      	mov	r4, r0
 801deb2:	2104      	movs	r1, #4
 801deb4:	f007 fdb8 	bl	8025a28 <_ZdlPvj>
 801deb8:	4620      	mov	r0, r4
 801deba:	bd10      	pop	{r4, pc}

0801debc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801debc:	b510      	push	{r4, lr}
 801debe:	4604      	mov	r4, r0
 801dec0:	2104      	movs	r1, #4
 801dec2:	f007 fdb1 	bl	8025a28 <_ZdlPvj>
 801dec6:	4620      	mov	r0, r4
 801dec8:	bd10      	pop	{r4, pc}

0801deca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801deca:	b510      	push	{r4, lr}
 801decc:	4604      	mov	r4, r0
 801dece:	2104      	movs	r1, #4
 801ded0:	f007 fdaa 	bl	8025a28 <_ZdlPvj>
 801ded4:	4620      	mov	r0, r4
 801ded6:	bd10      	pop	{r4, pc}

0801ded8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ded8:	b510      	push	{r4, lr}
 801deda:	4604      	mov	r4, r0
 801dedc:	2104      	movs	r1, #4
 801dede:	f007 fda3 	bl	8025a28 <_ZdlPvj>
 801dee2:	4620      	mov	r0, r4
 801dee4:	bd10      	pop	{r4, pc}

0801dee6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801dee6:	b510      	push	{r4, lr}
 801dee8:	4604      	mov	r4, r0
 801deea:	2104      	movs	r1, #4
 801deec:	f007 fd9c 	bl	8025a28 <_ZdlPvj>
 801def0:	4620      	mov	r0, r4
 801def2:	bd10      	pop	{r4, pc}

0801def4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801def4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801def8:	4d9e      	ldr	r5, [pc, #632]	; (801e174 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801defa:	4690      	mov	r8, r2
 801defc:	b08f      	sub	sp, #60	; 0x3c
 801defe:	4604      	mov	r4, r0
 801df00:	682a      	ldr	r2, [r5, #0]
 801df02:	4689      	mov	r9, r1
 801df04:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801df08:	2a02      	cmp	r2, #2
 801df0a:	d106      	bne.n	801df1a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801df0c:	4b9a      	ldr	r3, [pc, #616]	; (801e178 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801df0e:	f240 11ef 	movw	r1, #495	; 0x1ef
 801df12:	4a9a      	ldr	r2, [pc, #616]	; (801e17c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801df14:	489a      	ldr	r0, [pc, #616]	; (801e180 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801df16:	f007 fdb3 	bl	8025a80 <__assert_func>
 801df1a:	ae0e      	add	r6, sp, #56	; 0x38
 801df1c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801df20:	4630      	mov	r0, r6
 801df22:	f7fe f8b1 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801df26:	6823      	ldr	r3, [r4, #0]
 801df28:	4607      	mov	r7, r0
 801df2a:	4620      	mov	r0, r4
 801df2c:	6a1b      	ldr	r3, [r3, #32]
 801df2e:	4798      	blx	r3
 801df30:	4287      	cmp	r7, r0
 801df32:	d004      	beq.n	801df3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801df34:	4b93      	ldr	r3, [pc, #588]	; (801e184 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801df36:	f240 11f1 	movw	r1, #497	; 0x1f1
 801df3a:	4a90      	ldr	r2, [pc, #576]	; (801e17c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801df3c:	e7ea      	b.n	801df14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801df3e:	4630      	mov	r0, r6
 801df40:	f7fe f81e 	bl	801bf80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801df44:	4607      	mov	r7, r0
 801df46:	b920      	cbnz	r0, 801df52 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801df48:	4b8f      	ldr	r3, [pc, #572]	; (801e188 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801df4a:	f240 11f3 	movw	r1, #499	; 0x1f3
 801df4e:	4a8b      	ldr	r2, [pc, #556]	; (801e17c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801df50:	e7e0      	b.n	801df14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801df52:	f8d8 0000 	ldr.w	r0, [r8]
 801df56:	ab06      	add	r3, sp, #24
 801df58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801df5c:	f9b8 a000 	ldrsh.w	sl, [r8]
 801df60:	c303      	stmia	r3!, {r0, r1}
 801df62:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801df66:	ab08      	add	r3, sp, #32
 801df68:	f8d9 0000 	ldr.w	r0, [r9]
 801df6c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801df70:	c303      	stmia	r3!, {r0, r1}
 801df72:	4630      	mov	r0, r6
 801df74:	f7fd ff36 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801df78:	4680      	mov	r8, r0
 801df7a:	4630      	mov	r0, r6
 801df7c:	4e83      	ldr	r6, [pc, #524]	; (801e18c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801df7e:	f7fd ff6b 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801df82:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801df86:	f10d 0920 	add.w	r9, sp, #32
 801df8a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801df8e:	a806      	add	r0, sp, #24
 801df90:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801df94:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801df98:	f7fb fa68 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df9c:	4648      	mov	r0, r9
 801df9e:	f7fb fa65 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dfa2:	a80a      	add	r0, sp, #40	; 0x28
 801dfa4:	f7fb fa62 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dfa8:	4b79      	ldr	r3, [pc, #484]	; (801e190 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801dfaa:	2100      	movs	r1, #0
 801dfac:	f9b6 2000 	ldrsh.w	r2, [r6]
 801dfb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dfb4:	4648      	mov	r0, r9
 801dfb6:	910c      	str	r1, [sp, #48]	; 0x30
 801dfb8:	a90c      	add	r1, sp, #48	; 0x30
 801dfba:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801dfbe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dfc2:	f7f7 feef 	bl	8015da4 <_ZN8touchgfx4RectaNERKS0_>
 801dfc6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801dfca:	9602      	str	r6, [sp, #8]
 801dfcc:	f1bc 0f00 	cmp.w	ip, #0
 801dfd0:	f340 80a4 	ble.w	801e11c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dfd4:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801dfd8:	2e00      	cmp	r6, #0
 801dfda:	f340 809f 	ble.w	801e11c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dfde:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dfe2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801dfe6:	4288      	cmp	r0, r1
 801dfe8:	db36      	blt.n	801e058 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dfea:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801dfee:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801dff2:	429a      	cmp	r2, r3
 801dff4:	db30      	blt.n	801e058 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dff6:	4460      	add	r0, ip
 801dff8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801dffc:	4461      	add	r1, ip
 801dffe:	b200      	sxth	r0, r0
 801e000:	b209      	sxth	r1, r1
 801e002:	4288      	cmp	r0, r1
 801e004:	dc28      	bgt.n	801e058 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801e006:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e00a:	4432      	add	r2, r6
 801e00c:	440b      	add	r3, r1
 801e00e:	b212      	sxth	r2, r2
 801e010:	b21b      	sxth	r3, r3
 801e012:	429a      	cmp	r2, r3
 801e014:	dc20      	bgt.n	801e058 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801e016:	6823      	ldr	r3, [r4, #0]
 801e018:	4620      	mov	r0, r4
 801e01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e01c:	4798      	blx	r3
 801e01e:	4682      	mov	sl, r0
 801e020:	6828      	ldr	r0, [r5, #0]
 801e022:	6803      	ldr	r3, [r0, #0]
 801e024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e026:	4798      	blx	r3
 801e028:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e02c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e030:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e034:	9303      	str	r3, [sp, #12]
 801e036:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e03a:	1a9b      	subs	r3, r3, r2
 801e03c:	b29b      	uxth	r3, r3
 801e03e:	b21c      	sxth	r4, r3
 801e040:	2c00      	cmp	r4, #0
 801e042:	dc0e      	bgt.n	801e062 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801e044:	b134      	cbz	r4, 801e054 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801e046:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e04a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801e04e:	4413      	add	r3, r2
 801e050:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801e054:	463c      	mov	r4, r7
 801e056:	e00b      	b.n	801e070 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801e058:	4b4e      	ldr	r3, [pc, #312]	; (801e194 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801e05a:	f240 2101 	movw	r1, #513	; 0x201
 801e05e:	4a47      	ldr	r2, [pc, #284]	; (801e17c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801e060:	e758      	b.n	801df14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e062:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e066:	ebab 0303 	sub.w	r3, fp, r3
 801e06a:	443c      	add	r4, r7
 801e06c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e070:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e074:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e078:	1a9b      	subs	r3, r3, r2
 801e07a:	b29b      	uxth	r3, r3
 801e07c:	b219      	sxth	r1, r3
 801e07e:	2900      	cmp	r1, #0
 801e080:	dd50      	ble.n	801e124 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801e082:	9a03      	ldr	r2, [sp, #12]
 801e084:	fb02 4401 	mla	r4, r2, r1, r4
 801e088:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e08c:	1ad3      	subs	r3, r2, r3
 801e08e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e092:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801e096:	f1bc 0f00 	cmp.w	ip, #0
 801e09a:	dd3f      	ble.n	801e11c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e09c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e0a0:	2e00      	cmp	r6, #0
 801e0a2:	dd3b      	ble.n	801e11c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e0a4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801e0a8:	2203      	movs	r2, #3
 801e0aa:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e0ae:	fb0a f801 	mul.w	r8, sl, r1
 801e0b2:	fb13 8802 	smlabb	r8, r3, r2, r8
 801e0b6:	9a02      	ldr	r2, [sp, #8]
 801e0b8:	4480      	add	r8, r0
 801e0ba:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801e0be:	8812      	ldrh	r2, [r2, #0]
 801e0c0:	4584      	cmp	ip, r0
 801e0c2:	eba2 0303 	sub.w	r3, r2, r3
 801e0c6:	bfa8      	it	ge
 801e0c8:	4684      	movge	ip, r0
 801e0ca:	459c      	cmp	ip, r3
 801e0cc:	bfa8      	it	ge
 801e0ce:	469c      	movge	ip, r3
 801e0d0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801e0d4:	429e      	cmp	r6, r3
 801e0d6:	bfa8      	it	ge
 801e0d8:	461e      	movge	r6, r3
 801e0da:	4b2d      	ldr	r3, [pc, #180]	; (801e190 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801e0dc:	881b      	ldrh	r3, [r3, #0]
 801e0de:	1a59      	subs	r1, r3, r1
 801e0e0:	4633      	mov	r3, r6
 801e0e2:	428e      	cmp	r6, r1
 801e0e4:	bfa8      	it	ge
 801e0e6:	460b      	movge	r3, r1
 801e0e8:	4562      	cmp	r2, ip
 801e0ea:	9302      	str	r3, [sp, #8]
 801e0ec:	d12d      	bne.n	801e14a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801e0ee:	455a      	cmp	r2, fp
 801e0f0:	d12b      	bne.n	801e14a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801e0f2:	6828      	ldr	r0, [r5, #0]
 801e0f4:	6803      	ldr	r3, [r0, #0]
 801e0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0f8:	4798      	blx	r3
 801e0fa:	07c3      	lsls	r3, r0, #31
 801e0fc:	d51b      	bpl.n	801e136 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801e0fe:	6828      	ldr	r0, [r5, #0]
 801e100:	9b02      	ldr	r3, [sp, #8]
 801e102:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801e106:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801e10a:	6803      	ldr	r3, [r0, #0]
 801e10c:	f8cd b000 	str.w	fp, [sp]
 801e110:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801e112:	4623      	mov	r3, r4
 801e114:	e899 0006 	ldmia.w	r9, {r1, r2}
 801e118:	47a8      	blx	r5
 801e11a:	4607      	mov	r7, r0
 801e11c:	4638      	mov	r0, r7
 801e11e:	b00f      	add	sp, #60	; 0x3c
 801e120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e124:	bf1f      	itttt	ne
 801e126:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801e12a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801e12e:	189b      	addne	r3, r3, r2
 801e130:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e134:	e7ad      	b.n	801e092 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801e136:	6828      	ldr	r0, [r5, #0]
 801e138:	4642      	mov	r2, r8
 801e13a:	4621      	mov	r1, r4
 801e13c:	6803      	ldr	r3, [r0, #0]
 801e13e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801e140:	9b02      	ldr	r3, [sp, #8]
 801e142:	fb03 f30a 	mul.w	r3, r3, sl
 801e146:	47a8      	blx	r5
 801e148:	e7e8      	b.n	801e11c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e14a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801e14e:	f04f 0900 	mov.w	r9, #0
 801e152:	9b02      	ldr	r3, [sp, #8]
 801e154:	454b      	cmp	r3, r9
 801e156:	dde1      	ble.n	801e11c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e158:	6828      	ldr	r0, [r5, #0]
 801e15a:	4642      	mov	r2, r8
 801e15c:	4621      	mov	r1, r4
 801e15e:	44d0      	add	r8, sl
 801e160:	6803      	ldr	r3, [r0, #0]
 801e162:	f109 0901 	add.w	r9, r9, #1
 801e166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e168:	461e      	mov	r6, r3
 801e16a:	465b      	mov	r3, fp
 801e16c:	47b0      	blx	r6
 801e16e:	9b03      	ldr	r3, [sp, #12]
 801e170:	441c      	add	r4, r3
 801e172:	e7ee      	b.n	801e152 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801e174:	2000b3c8 	.word	0x2000b3c8
 801e178:	0802b209 	.word	0x0802b209
 801e17c:	0802b9e5 	.word	0x0802b9e5
 801e180:	0802b1d7 	.word	0x0802b1d7
 801e184:	0802b2bb 	.word	0x0802b2bb
 801e188:	0802b310 	.word	0x0802b310
 801e18c:	2000b3c2 	.word	0x2000b3c2
 801e190:	2000b3c4 	.word	0x2000b3c4
 801e194:	0802b34e 	.word	0x0802b34e

0801e198 <_ZN8touchgfx8LCD24bppC1Ev>:
 801e198:	4a0b      	ldr	r2, [pc, #44]	; (801e1c8 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801e19a:	6002      	str	r2, [r0, #0]
 801e19c:	2200      	movs	r2, #0
 801e19e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e1a2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e1a6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e1aa:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e1ae:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e1b2:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e1b6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e1ba:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e1be:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e1c2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e1c6:	4770      	bx	lr
 801e1c8:	0802b634 	.word	0x0802b634

0801e1cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1d0:	b093      	sub	sp, #76	; 0x4c
 801e1d2:	880c      	ldrh	r4, [r1, #0]
 801e1d4:	4605      	mov	r5, r0
 801e1d6:	460f      	mov	r7, r1
 801e1d8:	4691      	mov	r9, r2
 801e1da:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801e1de:	b12c      	cbz	r4, 801e1ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e1e0:	4b71      	ldr	r3, [pc, #452]	; (801e3a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e1e2:	2168      	movs	r1, #104	; 0x68
 801e1e4:	4a71      	ldr	r2, [pc, #452]	; (801e3ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801e1e6:	4872      	ldr	r0, [pc, #456]	; (801e3b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801e1e8:	f007 fc4a 	bl	8025a80 <__assert_func>
 801e1ec:	6810      	ldr	r0, [r2, #0]
 801e1ee:	ae0e      	add	r6, sp, #56	; 0x38
 801e1f0:	6851      	ldr	r1, [r2, #4]
 801e1f2:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801e3b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801e1f6:	c603      	stmia	r6!, {r0, r1}
 801e1f8:	6818      	ldr	r0, [r3, #0]
 801e1fa:	ae10      	add	r6, sp, #64	; 0x40
 801e1fc:	6859      	ldr	r1, [r3, #4]
 801e1fe:	c603      	stmia	r6!, {r0, r1}
 801e200:	a80e      	add	r0, sp, #56	; 0x38
 801e202:	f7fb f933 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e206:	4649      	mov	r1, r9
 801e208:	a810      	add	r0, sp, #64	; 0x40
 801e20a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801e3b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801e20e:	f7fb f915 	bl	801943c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e212:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e216:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e21a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e21e:	f8d9 0000 	ldr.w	r0, [r9]
 801e222:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e226:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801e22a:	440d      	add	r5, r1
 801e22c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801e230:	440a      	add	r2, r1
 801e232:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e236:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e23a:	4413      	add	r3, r2
 801e23c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e240:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801e244:	930b      	str	r3, [sp, #44]	; 0x2c
 801e246:	6803      	ldr	r3, [r0, #0]
 801e248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e24c:	4798      	blx	r3
 801e24e:	2801      	cmp	r0, #1
 801e250:	d11e      	bne.n	801e290 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801e252:	220b      	movs	r2, #11
 801e254:	9008      	str	r0, [sp, #32]
 801e256:	b2b6      	uxth	r6, r6
 801e258:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e25c:	9207      	str	r2, [sp, #28]
 801e25e:	4629      	mov	r1, r5
 801e260:	f8ba 2000 	ldrh.w	r2, [sl]
 801e264:	f8cd 8010 	str.w	r8, [sp, #16]
 801e268:	9601      	str	r6, [sp, #4]
 801e26a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801e26e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e272:	9203      	str	r2, [sp, #12]
 801e274:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e278:	9202      	str	r2, [sp, #8]
 801e27a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e27e:	9200      	str	r2, [sp, #0]
 801e280:	463a      	mov	r2, r7
 801e282:	f8d9 0000 	ldr.w	r0, [r9]
 801e286:	f7f8 f9db 	bl	8016640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e28a:	b013      	add	sp, #76	; 0x4c
 801e28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e290:	f8d9 0000 	ldr.w	r0, [r9]
 801e294:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801e298:	6803      	ldr	r3, [r0, #0]
 801e29a:	6a1b      	ldr	r3, [r3, #32]
 801e29c:	4798      	blx	r3
 801e29e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e2a2:	f8ba 3000 	ldrh.w	r3, [sl]
 801e2a6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e2aa:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e2ae:	fb01 2303 	mla	r3, r1, r3, r2
 801e2b2:	4621      	mov	r1, r4
 801e2b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2b8:	4418      	add	r0, r3
 801e2ba:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801e2be:	930c      	str	r3, [sp, #48]	; 0x30
 801e2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2c2:	4299      	cmp	r1, r3
 801e2c4:	da6a      	bge.n	801e39c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801e2c6:	1cc2      	adds	r2, r0, #3
 801e2c8:	46aa      	mov	sl, r5
 801e2ca:	ebaa 0305 	sub.w	r3, sl, r5
 801e2ce:	429e      	cmp	r6, r3
 801e2d0:	dd55      	ble.n	801e37e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801e2d2:	2404      	movs	r4, #4
 801e2d4:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801e2d8:	fb14 4303 	smlabb	r3, r4, r3, r4
 801e2dc:	eb07 0e03 	add.w	lr, r7, r3
 801e2e0:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801e2e4:	b184      	cbz	r4, 801e308 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e2e6:	2cff      	cmp	r4, #255	; 0xff
 801e2e8:	f817 b003 	ldrb.w	fp, [r7, r3]
 801e2ec:	d10e      	bne.n	801e30c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e2ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e2f2:	d10b      	bne.n	801e30c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e2f4:	f802 bc03 	strb.w	fp, [r2, #-3]
 801e2f8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801e2fc:	f802 3c02 	strb.w	r3, [r2, #-2]
 801e300:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801e304:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e308:	3203      	adds	r2, #3
 801e30a:	e7de      	b.n	801e2ca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801e30c:	fb08 f404 	mul.w	r4, r8, r4
 801e310:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801e314:	1c63      	adds	r3, r4, #1
 801e316:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801e31a:	121b      	asrs	r3, r3, #8
 801e31c:	b29c      	uxth	r4, r3
 801e31e:	43db      	mvns	r3, r3
 801e320:	fb1b fb04 	smulbb	fp, fp, r4
 801e324:	b2db      	uxtb	r3, r3
 801e326:	fb0c bc03 	mla	ip, ip, r3, fp
 801e32a:	fa1f fc8c 	uxth.w	ip, ip
 801e32e:	f10c 0b01 	add.w	fp, ip, #1
 801e332:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e336:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801e33a:	fb1b fb03 	smulbb	fp, fp, r3
 801e33e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e342:	f802 cc03 	strb.w	ip, [r2, #-3]
 801e346:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e34a:	fb0c bc04 	mla	ip, ip, r4, fp
 801e34e:	fa1f fc8c 	uxth.w	ip, ip
 801e352:	f10c 0b01 	add.w	fp, ip, #1
 801e356:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e35a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e35e:	f802 cc02 	strb.w	ip, [r2, #-2]
 801e362:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801e366:	f89e e002 	ldrb.w	lr, [lr, #2]
 801e36a:	fb1c f303 	smulbb	r3, ip, r3
 801e36e:	fb0e 3304 	mla	r3, lr, r4, r3
 801e372:	b29b      	uxth	r3, r3
 801e374:	1c5c      	adds	r4, r3, #1
 801e376:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e37a:	121b      	asrs	r3, r3, #8
 801e37c:	e7c2      	b.n	801e304 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e380:	3101      	adds	r1, #1
 801e382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e384:	881b      	ldrh	r3, [r3, #0]
 801e386:	1b9b      	subs	r3, r3, r6
 801e388:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e38c:	4413      	add	r3, r2
 801e38e:	4418      	add	r0, r3
 801e390:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801e394:	1b9b      	subs	r3, r3, r6
 801e396:	444b      	add	r3, r9
 801e398:	441d      	add	r5, r3
 801e39a:	e791      	b.n	801e2c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e39c:	4b05      	ldr	r3, [pc, #20]	; (801e3b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801e39e:	6818      	ldr	r0, [r3, #0]
 801e3a0:	6803      	ldr	r3, [r0, #0]
 801e3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3a4:	4798      	blx	r3
 801e3a6:	e770      	b.n	801e28a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e3a8:	0802b13b 	.word	0x0802b13b
 801e3ac:	0802b807 	.word	0x0802b807
 801e3b0:	0802b1d7 	.word	0x0802b1d7
 801e3b4:	2000b3c8 	.word	0x2000b3c8
 801e3b8:	2000b3c2 	.word	0x2000b3c2

0801e3bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c0:	4614      	mov	r4, r2
 801e3c2:	880a      	ldrh	r2, [r1, #0]
 801e3c4:	b091      	sub	sp, #68	; 0x44
 801e3c6:	4680      	mov	r8, r0
 801e3c8:	2a01      	cmp	r2, #1
 801e3ca:	460e      	mov	r6, r1
 801e3cc:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e3d0:	d005      	beq.n	801e3de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801e3d2:	4b6d      	ldr	r3, [pc, #436]	; (801e588 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801e3d4:	21b6      	movs	r1, #182	; 0xb6
 801e3d6:	4a6d      	ldr	r2, [pc, #436]	; (801e58c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801e3d8:	486d      	ldr	r0, [pc, #436]	; (801e590 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e3da:	f007 fb51 	bl	8025a80 <__assert_func>
 801e3de:	6820      	ldr	r0, [r4, #0]
 801e3e0:	ad0c      	add	r5, sp, #48	; 0x30
 801e3e2:	6861      	ldr	r1, [r4, #4]
 801e3e4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e594 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801e3e8:	c503      	stmia	r5!, {r0, r1}
 801e3ea:	6818      	ldr	r0, [r3, #0]
 801e3ec:	ad0e      	add	r5, sp, #56	; 0x38
 801e3ee:	6859      	ldr	r1, [r3, #4]
 801e3f0:	c503      	stmia	r5!, {r0, r1}
 801e3f2:	a80c      	add	r0, sp, #48	; 0x30
 801e3f4:	f7fb f83a 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3f8:	4621      	mov	r1, r4
 801e3fa:	a80e      	add	r0, sp, #56	; 0x38
 801e3fc:	f7fb f81e 	bl	801943c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e400:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e404:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e408:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e40c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801e410:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e414:	eb08 0401 	add.w	r4, r8, r1
 801e418:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e41c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801e598 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801e420:	440a      	add	r2, r1
 801e422:	f8d8 0000 	ldr.w	r0, [r8]
 801e426:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e42a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e42e:	4413      	add	r3, r2
 801e430:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e434:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e438:	930a      	str	r3, [sp, #40]	; 0x28
 801e43a:	6803      	ldr	r3, [r0, #0]
 801e43c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e440:	4798      	blx	r3
 801e442:	2801      	cmp	r0, #1
 801e444:	d11e      	bne.n	801e484 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801e446:	220b      	movs	r2, #11
 801e448:	9008      	str	r0, [sp, #32]
 801e44a:	b2ad      	uxth	r5, r5
 801e44c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e450:	9207      	str	r2, [sp, #28]
 801e452:	4621      	mov	r1, r4
 801e454:	f8b9 2000 	ldrh.w	r2, [r9]
 801e458:	9501      	str	r5, [sp, #4]
 801e45a:	9206      	str	r2, [sp, #24]
 801e45c:	2200      	movs	r2, #0
 801e45e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e462:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e466:	9203      	str	r2, [sp, #12]
 801e468:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e46c:	9202      	str	r2, [sp, #8]
 801e46e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e472:	9200      	str	r2, [sp, #0]
 801e474:	4632      	mov	r2, r6
 801e476:	f8d8 0000 	ldr.w	r0, [r8]
 801e47a:	f7f8 f8e1 	bl	8016640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e47e:	b011      	add	sp, #68	; 0x44
 801e480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e484:	f8d8 0000 	ldr.w	r0, [r8]
 801e488:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801e48c:	6803      	ldr	r3, [r0, #0]
 801e48e:	6a1b      	ldr	r3, [r3, #32]
 801e490:	4798      	blx	r3
 801e492:	f8b9 3000 	ldrh.w	r3, [r9]
 801e496:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e49a:	f04f 0e00 	mov.w	lr, #0
 801e49e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e4a2:	fa1f f987 	uxth.w	r9, r7
 801e4a6:	fb01 2303 	mla	r3, r1, r3, r2
 801e4aa:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801e4ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4b2:	b289      	uxth	r1, r1
 801e4b4:	4418      	add	r0, r3
 801e4b6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e4ba:	930b      	str	r3, [sp, #44]	; 0x2c
 801e4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4be:	459e      	cmp	lr, r3
 801e4c0:	da5c      	bge.n	801e57c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e4c2:	1cc3      	adds	r3, r0, #3
 801e4c4:	46a2      	mov	sl, r4
 801e4c6:	ebaa 0204 	sub.w	r2, sl, r4
 801e4ca:	4295      	cmp	r5, r2
 801e4cc:	dd46      	ble.n	801e55c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801e4ce:	f04f 0c03 	mov.w	ip, #3
 801e4d2:	f04f 0b04 	mov.w	fp, #4
 801e4d6:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801e4da:	2fff      	cmp	r7, #255	; 0xff
 801e4dc:	fb1c b202 	smlabb	r2, ip, r2, fp
 801e4e0:	eb06 0c02 	add.w	ip, r6, r2
 801e4e4:	f816 b002 	ldrb.w	fp, [r6, r2]
 801e4e8:	d02f      	beq.n	801e54a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801e4ea:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801e4ee:	fb12 f201 	smulbb	r2, r2, r1
 801e4f2:	fb0b 2209 	mla	r2, fp, r9, r2
 801e4f6:	b292      	uxth	r2, r2
 801e4f8:	f102 0b01 	add.w	fp, r2, #1
 801e4fc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e500:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801e504:	fb1b fb01 	smulbb	fp, fp, r1
 801e508:	1212      	asrs	r2, r2, #8
 801e50a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e50e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e512:	fb02 b209 	mla	r2, r2, r9, fp
 801e516:	b292      	uxth	r2, r2
 801e518:	f102 0b01 	add.w	fp, r2, #1
 801e51c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e520:	1212      	asrs	r2, r2, #8
 801e522:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e526:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e52a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801e52e:	fb1c fc01 	smulbb	ip, ip, r1
 801e532:	fb02 c209 	mla	r2, r2, r9, ip
 801e536:	b292      	uxth	r2, r2
 801e538:	f102 0c01 	add.w	ip, r2, #1
 801e53c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e540:	1212      	asrs	r2, r2, #8
 801e542:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e546:	3303      	adds	r3, #3
 801e548:	e7bd      	b.n	801e4c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801e54a:	f803 bc03 	strb.w	fp, [r3, #-3]
 801e54e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e552:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e556:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e55a:	e7f2      	b.n	801e542 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801e55c:	4b0d      	ldr	r3, [pc, #52]	; (801e594 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e55e:	f10e 0e01 	add.w	lr, lr, #1
 801e562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e564:	881b      	ldrh	r3, [r3, #0]
 801e566:	1b5b      	subs	r3, r3, r5
 801e568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e56c:	4413      	add	r3, r2
 801e56e:	4418      	add	r0, r3
 801e570:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e574:	1b5b      	subs	r3, r3, r5
 801e576:	4443      	add	r3, r8
 801e578:	441c      	add	r4, r3
 801e57a:	e79f      	b.n	801e4bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801e57c:	4b06      	ldr	r3, [pc, #24]	; (801e598 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e57e:	6818      	ldr	r0, [r3, #0]
 801e580:	6803      	ldr	r3, [r0, #0]
 801e582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e584:	4798      	blx	r3
 801e586:	e77a      	b.n	801e47e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e588:	0802b01f 	.word	0x0802b01f
 801e58c:	0802b6fa 	.word	0x0802b6fa
 801e590:	0802b1d7 	.word	0x0802b1d7
 801e594:	2000b3c2 	.word	0x2000b3c2
 801e598:	2000b3c8 	.word	0x2000b3c8

0801e59c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e59c:	b570      	push	{r4, r5, r6, lr}
 801e59e:	780d      	ldrb	r5, [r1, #0]
 801e5a0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e5a4:	2d01      	cmp	r5, #1
 801e5a6:	d00d      	beq.n	801e5c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e5a8:	d307      	bcc.n	801e5ba <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e5aa:	2d02      	cmp	r5, #2
 801e5ac:	d10f      	bne.n	801e5ce <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e5ae:	4b08      	ldr	r3, [pc, #32]	; (801e5d0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e5b0:	215b      	movs	r1, #91	; 0x5b
 801e5b2:	4a08      	ldr	r2, [pc, #32]	; (801e5d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e5b4:	4808      	ldr	r0, [pc, #32]	; (801e5d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e5b6:	f007 fa63 	bl	8025a80 <__assert_func>
 801e5ba:	9404      	str	r4, [sp, #16]
 801e5bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e5c0:	f7ff be04 	b.w	801e1cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e5c4:	9404      	str	r4, [sp, #16]
 801e5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e5ca:	f7ff bef7 	b.w	801e3bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e5ce:	bd70      	pop	{r4, r5, r6, pc}
 801e5d0:	0802afd4 	.word	0x0802afd4
 801e5d4:	0802b678 	.word	0x0802b678
 801e5d8:	0802b1d7 	.word	0x0802b1d7

0801e5dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5e0:	4605      	mov	r5, r0
 801e5e2:	b08f      	sub	sp, #60	; 0x3c
 801e5e4:	460c      	mov	r4, r1
 801e5e6:	461f      	mov	r7, r3
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d04e      	beq.n	801e68a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801e5ec:	6808      	ldr	r0, [r1, #0]
 801e5ee:	ab0a      	add	r3, sp, #40	; 0x28
 801e5f0:	6849      	ldr	r1, [r1, #4]
 801e5f2:	4e81      	ldr	r6, [pc, #516]	; (801e7f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801e5f4:	c303      	stmia	r3!, {r0, r1}
 801e5f6:	6810      	ldr	r0, [r2, #0]
 801e5f8:	ab0c      	add	r3, sp, #48	; 0x30
 801e5fa:	6851      	ldr	r1, [r2, #4]
 801e5fc:	c303      	stmia	r3!, {r0, r1}
 801e5fe:	a80a      	add	r0, sp, #40	; 0x28
 801e600:	f7fa ff34 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e604:	4621      	mov	r1, r4
 801e606:	a80c      	add	r0, sp, #48	; 0x30
 801e608:	f7fa ff18 	bl	801943c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e60c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e610:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e614:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e618:	6830      	ldr	r0, [r6, #0]
 801e61a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e61e:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 801e622:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 801e626:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e62a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e62e:	440a      	add	r2, r1
 801e630:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e634:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e638:	4413      	add	r3, r2
 801e63a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e63e:	6803      	ldr	r3, [r0, #0]
 801e640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e642:	4798      	blx	r3
 801e644:	2fff      	cmp	r7, #255	; 0xff
 801e646:	4633      	mov	r3, r6
 801e648:	4e6c      	ldr	r6, [pc, #432]	; (801e7fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801e64a:	d021      	beq.n	801e690 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801e64c:	f010 0f04 	tst.w	r0, #4
 801e650:	6818      	ldr	r0, [r3, #0]
 801e652:	d020      	beq.n	801e696 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801e654:	2100      	movs	r1, #0
 801e656:	f04f 0e01 	mov.w	lr, #1
 801e65a:	f8d0 c000 	ldr.w	ip, [r0]
 801e65e:	b2a4      	uxth	r4, r4
 801e660:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e664:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e668:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801e66c:	8836      	ldrh	r6, [r6, #0]
 801e66e:	9703      	str	r7, [sp, #12]
 801e670:	9400      	str	r4, [sp, #0]
 801e672:	e9cd 1604 	strd	r1, r6, [sp, #16]
 801e676:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e67a:	9102      	str	r1, [sp, #8]
 801e67c:	fa1f f188 	uxth.w	r1, r8
 801e680:	9101      	str	r1, [sp, #4]
 801e682:	4629      	mov	r1, r5
 801e684:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 801e688:	47a0      	blx	r4
 801e68a:	b00f      	add	sp, #60	; 0x3c
 801e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e690:	f010 0f01 	tst.w	r0, #1
 801e694:	e7dc      	b.n	801e650 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 801e696:	6803      	ldr	r3, [r0, #0]
 801e698:	6a1b      	ldr	r3, [r3, #32]
 801e69a:	4798      	blx	r3
 801e69c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e6a0:	8833      	ldrh	r3, [r6, #0]
 801e6a2:	2fff      	cmp	r7, #255	; 0xff
 801e6a4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801e6a8:	fb01 2303 	mla	r3, r1, r3, r2
 801e6ac:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 801e6b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e6b4:	4418      	add	r0, r3
 801e6b6:	d128      	bne.n	801e70a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 801e6b8:	0051      	lsls	r1, r2, #1
 801e6ba:	2700      	movs	r7, #0
 801e6bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e6c0:	4547      	cmp	r7, r8
 801e6c2:	f280 8092 	bge.w	801e7ea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801e6c6:	4684      	mov	ip, r0
 801e6c8:	f04f 0e00 	mov.w	lr, #0
 801e6cc:	45a6      	cmp	lr, r4
 801e6ce:	f10c 0c03 	add.w	ip, ip, #3
 801e6d2:	da7c      	bge.n	801e7ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 801e6d4:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 801e6d8:	f10e 0e01 	add.w	lr, lr, #1
 801e6dc:	ea4f 2a29 	mov.w	sl, r9, asr #8
 801e6e0:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 801e6e4:	ea4f 03e9 	mov.w	r3, r9, asr #3
 801e6e8:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801e6ec:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 801e6f0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e6f4:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 801e6f8:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801e6fc:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801e700:	f80c ac01 	strb.w	sl, [ip, #-1]
 801e704:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801e708:	e7e0      	b.n	801e6cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 801e70a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801e70e:	ea6f 0c07 	mvn.w	ip, r7
 801e712:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 801e716:	f04f 0900 	mov.w	r9, #0
 801e71a:	9309      	str	r3, [sp, #36]	; 0x24
 801e71c:	fa5f fc8c 	uxtb.w	ip, ip
 801e720:	b2bb      	uxth	r3, r7
 801e722:	45c1      	cmp	r9, r8
 801e724:	da61      	bge.n	801e7ea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801e726:	4601      	mov	r1, r0
 801e728:	f04f 0e00 	mov.w	lr, #0
 801e72c:	45a6      	cmp	lr, r4
 801e72e:	f101 0103 	add.w	r1, r1, #3
 801e732:	da3b      	bge.n	801e7ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 801e734:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 801e738:	f10e 0e01 	add.w	lr, lr, #1
 801e73c:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 801e740:	1216      	asrs	r6, r2, #8
 801e742:	10d7      	asrs	r7, r2, #3
 801e744:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 801e748:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 801e74c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e750:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e754:	fb1b fb0c 	smulbb	fp, fp, ip
 801e758:	b2d2      	uxtb	r2, r2
 801e75a:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e75e:	fb02 b203 	mla	r2, r2, r3, fp
 801e762:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e766:	fb17 f703 	smulbb	r7, r7, r3
 801e76a:	fb16 f603 	smulbb	r6, r6, r3
 801e76e:	b292      	uxth	r2, r2
 801e770:	f102 0b01 	add.w	fp, r2, #1
 801e774:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e778:	1212      	asrs	r2, r2, #8
 801e77a:	f801 2c03 	strb.w	r2, [r1, #-3]
 801e77e:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 801e782:	fb02 770c 	mla	r7, r2, ip, r7
 801e786:	b2bf      	uxth	r7, r7
 801e788:	1c7a      	adds	r2, r7, #1
 801e78a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e78e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 801e792:	fb02 660c 	mla	r6, r2, ip, r6
 801e796:	123f      	asrs	r7, r7, #8
 801e798:	b2b6      	uxth	r6, r6
 801e79a:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e79e:	1c72      	adds	r2, r6, #1
 801e7a0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e7a4:	1236      	asrs	r6, r6, #8
 801e7a6:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e7aa:	e7bf      	b.n	801e72c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 801e7ac:	4a13      	ldr	r2, [pc, #76]	; (801e7fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801e7ae:	f109 0901 	add.w	r9, r9, #1
 801e7b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e7b4:	8812      	ldrh	r2, [r2, #0]
 801e7b6:	1b12      	subs	r2, r2, r4
 801e7b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e7bc:	440a      	add	r2, r1
 801e7be:	4410      	add	r0, r2
 801e7c0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e7c4:	1b12      	subs	r2, r2, r4
 801e7c6:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801e7ca:	4415      	add	r5, r2
 801e7cc:	e7a9      	b.n	801e722 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 801e7ce:	8833      	ldrh	r3, [r6, #0]
 801e7d0:	3701      	adds	r7, #1
 801e7d2:	1b1b      	subs	r3, r3, r4
 801e7d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7d8:	4413      	add	r3, r2
 801e7da:	4418      	add	r0, r3
 801e7dc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e7e0:	1b1b      	subs	r3, r3, r4
 801e7e2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e7e6:	441d      	add	r5, r3
 801e7e8:	e76a      	b.n	801e6c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 801e7ea:	4b03      	ldr	r3, [pc, #12]	; (801e7f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801e7ec:	6818      	ldr	r0, [r3, #0]
 801e7ee:	6803      	ldr	r3, [r0, #0]
 801e7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7f2:	4798      	blx	r3
 801e7f4:	e749      	b.n	801e68a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801e7f6:	bf00      	nop
 801e7f8:	2000b3c8 	.word	0x2000b3c8
 801e7fc:	2000b3c2 	.word	0x2000b3c2

0801e800 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e804:	b08b      	sub	sp, #44	; 0x2c
 801e806:	460c      	mov	r4, r1
 801e808:	4680      	mov	r8, r0
 801e80a:	469a      	mov	sl, r3
 801e80c:	6808      	ldr	r0, [r1, #0]
 801e80e:	ab06      	add	r3, sp, #24
 801e810:	6849      	ldr	r1, [r1, #4]
 801e812:	c303      	stmia	r3!, {r0, r1}
 801e814:	6810      	ldr	r0, [r2, #0]
 801e816:	ab08      	add	r3, sp, #32
 801e818:	6851      	ldr	r1, [r2, #4]
 801e81a:	c303      	stmia	r3!, {r0, r1}
 801e81c:	a806      	add	r0, sp, #24
 801e81e:	f7fa fe25 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e822:	4621      	mov	r1, r4
 801e824:	a808      	add	r0, sp, #32
 801e826:	4c61      	ldr	r4, [pc, #388]	; (801e9ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e828:	f7fa fe08 	bl	801943c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e82c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e830:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e834:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e838:	6820      	ldr	r0, [r4, #0]
 801e83a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e83e:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e842:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801e846:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e84a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e84e:	440a      	add	r2, r1
 801e850:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e854:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e858:	4413      	add	r3, r2
 801e85a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e85e:	6803      	ldr	r3, [r0, #0]
 801e860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e862:	4798      	blx	r3
 801e864:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e868:	d118      	bne.n	801e89c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e86a:	f010 0f20 	tst.w	r0, #32
 801e86e:	6820      	ldr	r0, [r4, #0]
 801e870:	d017      	beq.n	801e8a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e872:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e876:	b2bf      	uxth	r7, r7
 801e878:	6801      	ldr	r1, [r0, #0]
 801e87a:	9402      	str	r4, [sp, #8]
 801e87c:	fa1f f489 	uxth.w	r4, r9
 801e880:	f8cd a00c 	str.w	sl, [sp, #12]
 801e884:	9401      	str	r4, [sp, #4]
 801e886:	9700      	str	r7, [sp, #0]
 801e888:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e88c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e88e:	4641      	mov	r1, r8
 801e890:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e894:	47a0      	blx	r4
 801e896:	b00b      	add	sp, #44	; 0x2c
 801e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e89c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e8a0:	e7e5      	b.n	801e86e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e8a2:	6803      	ldr	r3, [r0, #0]
 801e8a4:	6a1b      	ldr	r3, [r3, #32]
 801e8a6:	4798      	blx	r3
 801e8a8:	4b41      	ldr	r3, [pc, #260]	; (801e9b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801e8aa:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e8ae:	f04f 0c00 	mov.w	ip, #0
 801e8b2:	881a      	ldrh	r2, [r3, #0]
 801e8b4:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e8b8:	fb04 1202 	mla	r2, r4, r2, r1
 801e8bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e8c0:	4410      	add	r0, r2
 801e8c2:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801e8c6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e8ca:	0092      	lsls	r2, r2, #2
 801e8cc:	9105      	str	r1, [sp, #20]
 801e8ce:	9204      	str	r2, [sp, #16]
 801e8d0:	45cc      	cmp	ip, r9
 801e8d2:	da65      	bge.n	801e9a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801e8d4:	1cc4      	adds	r4, r0, #3
 801e8d6:	f108 0504 	add.w	r5, r8, #4
 801e8da:	f04f 0e00 	mov.w	lr, #0
 801e8de:	45be      	cmp	lr, r7
 801e8e0:	da4d      	bge.n	801e97e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801e8e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e8e6:	b181      	cbz	r1, 801e90a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e8e8:	29ff      	cmp	r1, #255	; 0xff
 801e8ea:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e8ee:	d111      	bne.n	801e914 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e8f0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e8f4:	d10e      	bne.n	801e914 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e8f6:	f804 bc03 	strb.w	fp, [r4, #-3]
 801e8fa:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e8fe:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e902:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e906:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e90a:	f10e 0e01 	add.w	lr, lr, #1
 801e90e:	3403      	adds	r4, #3
 801e910:	3504      	adds	r5, #4
 801e912:	e7e4      	b.n	801e8de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e914:	fb0a f101 	mul.w	r1, sl, r1
 801e918:	1c4a      	adds	r2, r1, #1
 801e91a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e91e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e922:	1212      	asrs	r2, r2, #8
 801e924:	b296      	uxth	r6, r2
 801e926:	43d2      	mvns	r2, r2
 801e928:	fb1b fb06 	smulbb	fp, fp, r6
 801e92c:	b2d2      	uxtb	r2, r2
 801e92e:	fb01 b102 	mla	r1, r1, r2, fp
 801e932:	b289      	uxth	r1, r1
 801e934:	f101 0b01 	add.w	fp, r1, #1
 801e938:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e93c:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801e940:	fb1b fb02 	smulbb	fp, fp, r2
 801e944:	1209      	asrs	r1, r1, #8
 801e946:	f804 1c03 	strb.w	r1, [r4, #-3]
 801e94a:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801e94e:	fb01 b106 	mla	r1, r1, r6, fp
 801e952:	b289      	uxth	r1, r1
 801e954:	f101 0b01 	add.w	fp, r1, #1
 801e958:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e95c:	1209      	asrs	r1, r1, #8
 801e95e:	f804 1c02 	strb.w	r1, [r4, #-2]
 801e962:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e966:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e96a:	fb11 f202 	smulbb	r2, r1, r2
 801e96e:	fb0b 2206 	mla	r2, fp, r6, r2
 801e972:	b292      	uxth	r2, r2
 801e974:	1c56      	adds	r6, r2, #1
 801e976:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e97a:	1212      	asrs	r2, r2, #8
 801e97c:	e7c3      	b.n	801e906 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e97e:	881a      	ldrh	r2, [r3, #0]
 801e980:	f10c 0c01 	add.w	ip, ip, #1
 801e984:	9905      	ldr	r1, [sp, #20]
 801e986:	1bd2      	subs	r2, r2, r7
 801e988:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e98c:	440a      	add	r2, r1
 801e98e:	9904      	ldr	r1, [sp, #16]
 801e990:	4410      	add	r0, r2
 801e992:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e996:	1bd2      	subs	r2, r2, r7
 801e998:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e99c:	4490      	add	r8, r2
 801e99e:	e797      	b.n	801e8d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e9a0:	4b02      	ldr	r3, [pc, #8]	; (801e9ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e9a2:	6818      	ldr	r0, [r3, #0]
 801e9a4:	6803      	ldr	r3, [r0, #0]
 801e9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9a8:	4798      	blx	r3
 801e9aa:	e774      	b.n	801e896 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e9ac:	2000b3c8 	.word	0x2000b3c8
 801e9b0:	2000b3c2 	.word	0x2000b3c2

0801e9b4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e9b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e9b8:	b085      	sub	sp, #20
 801e9ba:	4606      	mov	r6, r0
 801e9bc:	460c      	mov	r4, r1
 801e9be:	4691      	mov	r9, r2
 801e9c0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e9c4:	4698      	mov	r8, r3
 801e9c6:	b3a5      	cbz	r5, 801ea32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e9c8:	4608      	mov	r0, r1
 801e9ca:	f7fd fa0b 	bl	801bde4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e9ce:	4607      	mov	r7, r0
 801e9d0:	4620      	mov	r0, r4
 801e9d2:	f7fd fa41 	bl	801be58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e9d6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e9da:	4620      	mov	r0, r4
 801e9dc:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e9e0:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e9e4:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e9e8:	f7fd fb4e 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e9ec:	b1a0      	cbz	r0, 801ea18 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e9ee:	4620      	mov	r0, r4
 801e9f0:	f7fd fb4a 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e9f4:	2801      	cmp	r0, #1
 801e9f6:	d00f      	beq.n	801ea18 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e9f8:	4620      	mov	r0, r4
 801e9fa:	f7fd fb45 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e9fe:	2802      	cmp	r0, #2
 801ea00:	d00a      	beq.n	801ea18 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801ea02:	4620      	mov	r0, r4
 801ea04:	f7fd fb40 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea08:	280b      	cmp	r0, #11
 801ea0a:	d005      	beq.n	801ea18 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801ea0c:	4b21      	ldr	r3, [pc, #132]	; (801ea94 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 801ea0e:	213f      	movs	r1, #63	; 0x3f
 801ea10:	4a21      	ldr	r2, [pc, #132]	; (801ea98 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 801ea12:	4822      	ldr	r0, [pc, #136]	; (801ea9c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 801ea14:	f007 f834 	bl	8025a80 <__assert_func>
 801ea18:	4620      	mov	r0, r4
 801ea1a:	f7fd fb35 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea1e:	2802      	cmp	r0, #2
 801ea20:	4620      	mov	r0, r4
 801ea22:	d109      	bne.n	801ea38 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 801ea24:	f7fd faac 	bl	801bf80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea28:	462b      	mov	r3, r5
 801ea2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea2c:	a902      	add	r1, sp, #8
 801ea2e:	f7ff fee7 	bl	801e800 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ea32:	b005      	add	sp, #20
 801ea34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea38:	f7fd fb26 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea3c:	280b      	cmp	r0, #11
 801ea3e:	4620      	mov	r0, r4
 801ea40:	d10d      	bne.n	801ea5e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801ea42:	f7fd fa9d 	bl	801bf80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea46:	4606      	mov	r6, r0
 801ea48:	4620      	mov	r0, r4
 801ea4a:	f7fd facb 	bl	801bfe4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ea4e:	9500      	str	r5, [sp, #0]
 801ea50:	4601      	mov	r1, r0
 801ea52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea54:	aa02      	add	r2, sp, #8
 801ea56:	4630      	mov	r0, r6
 801ea58:	f7ff fda0 	bl	801e59c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ea5c:	e7e9      	b.n	801ea32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801ea5e:	f7fd fb13 	bl	801c088 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea62:	b940      	cbnz	r0, 801ea76 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 801ea64:	4620      	mov	r0, r4
 801ea66:	f7fd fa8b 	bl	801bf80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea6a:	462b      	mov	r3, r5
 801ea6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea6e:	a902      	add	r1, sp, #8
 801ea70:	f7ff fdb4 	bl	801e5dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801ea74:	e7dd      	b.n	801ea32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801ea76:	6833      	ldr	r3, [r6, #0]
 801ea78:	4620      	mov	r0, r4
 801ea7a:	68df      	ldr	r7, [r3, #12]
 801ea7c:	f7fd fa80 	bl	801bf80 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea80:	2300      	movs	r3, #0
 801ea82:	4601      	mov	r1, r0
 801ea84:	aa02      	add	r2, sp, #8
 801ea86:	4630      	mov	r0, r6
 801ea88:	e9cd 5300 	strd	r5, r3, [sp]
 801ea8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea8e:	47b8      	blx	r7
 801ea90:	e7cf      	b.n	801ea32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801ea92:	bf00      	nop
 801ea94:	0802b06d 	.word	0x0802b06d
 801ea98:	0802b783 	.word	0x0802b783
 801ea9c:	0802b1d7 	.word	0x0802b1d7

0801eaa0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801eaa0:	b570      	push	{r4, r5, r6, lr}
 801eaa2:	9d04      	ldr	r5, [sp, #16]
 801eaa4:	460c      	mov	r4, r1
 801eaa6:	4619      	mov	r1, r3
 801eaa8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801eaac:	2a0c      	cmp	r2, #12
 801eaae:	d826      	bhi.n	801eafe <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801eab0:	e8df f002 	tbb	[pc, r2]
 801eab4:	200e1407 	.word	0x200e1407
 801eab8:	20202020 	.word	0x20202020
 801eabc:	20202020 	.word	0x20202020
 801eac0:	20          	.byte	0x20
 801eac1:	00          	.byte	0x00
 801eac2:	4b0f      	ldr	r3, [pc, #60]	; (801eb00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801eac4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 801eac8:	4a0e      	ldr	r2, [pc, #56]	; (801eb04 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801eaca:	480f      	ldr	r0, [pc, #60]	; (801eb08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801eacc:	f006 ffd8 	bl	8025a80 <__assert_func>
 801ead0:	462a      	mov	r2, r5
 801ead2:	4620      	mov	r0, r4
 801ead4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ead8:	f7ff be92 	b.w	801e800 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eadc:	6802      	ldr	r2, [r0, #0]
 801eade:	2600      	movs	r6, #0
 801eae0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801eae4:	68d6      	ldr	r6, [r2, #12]
 801eae6:	462b      	mov	r3, r5
 801eae8:	460a      	mov	r2, r1
 801eaea:	4621      	mov	r1, r4
 801eaec:	46b4      	mov	ip, r6
 801eaee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eaf2:	4760      	bx	ip
 801eaf4:	4b05      	ldr	r3, [pc, #20]	; (801eb0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801eaf6:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801eafa:	4a02      	ldr	r2, [pc, #8]	; (801eb04 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801eafc:	e7e5      	b.n	801eaca <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801eafe:	bd70      	pop	{r4, r5, r6, pc}
 801eb00:	0802b3ae 	.word	0x0802b3ae
 801eb04:	0802ba6b 	.word	0x0802ba6b
 801eb08:	0802b1d7 	.word	0x0802b1d7
 801eb0c:	0802b3ef 	.word	0x0802b3ef

0801eb10 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801eb10:	b158      	cbz	r0, 801eb2a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801eb12:	2902      	cmp	r1, #2
 801eb14:	d00f      	beq.n	801eb36 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801eb16:	2903      	cmp	r1, #3
 801eb18:	d010      	beq.n	801eb3c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801eb1a:	2901      	cmp	r1, #1
 801eb1c:	d101      	bne.n	801eb22 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801eb1e:	2001      	movs	r0, #1
 801eb20:	4770      	bx	lr
 801eb22:	4b08      	ldr	r3, [pc, #32]	; (801eb44 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801eb24:	8819      	ldrh	r1, [r3, #0]
 801eb26:	4248      	negs	r0, r1
 801eb28:	4770      	bx	lr
 801eb2a:	2902      	cmp	r1, #2
 801eb2c:	d006      	beq.n	801eb3c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801eb2e:	2903      	cmp	r1, #3
 801eb30:	d0f7      	beq.n	801eb22 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801eb32:	2901      	cmp	r1, #1
 801eb34:	d1f3      	bne.n	801eb1e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801eb36:	4b03      	ldr	r3, [pc, #12]	; (801eb44 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801eb38:	8818      	ldrh	r0, [r3, #0]
 801eb3a:	4770      	bx	lr
 801eb3c:	f04f 30ff 	mov.w	r0, #4294967295
 801eb40:	4770      	bx	lr
 801eb42:	bf00      	nop
 801eb44:	2000b3c2 	.word	0x2000b3c2

0801eb48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801eb48:	b170      	cbz	r0, 801eb68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801eb4a:	2902      	cmp	r1, #2
 801eb4c:	d012      	beq.n	801eb74 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801eb4e:	2903      	cmp	r1, #3
 801eb50:	d006      	beq.n	801eb60 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801eb52:	2901      	cmp	r1, #1
 801eb54:	d001      	beq.n	801eb5a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801eb56:	2001      	movs	r0, #1
 801eb58:	4770      	bx	lr
 801eb5a:	4b08      	ldr	r3, [pc, #32]	; (801eb7c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801eb5c:	8818      	ldrh	r0, [r3, #0]
 801eb5e:	4770      	bx	lr
 801eb60:	4b06      	ldr	r3, [pc, #24]	; (801eb7c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801eb62:	8818      	ldrh	r0, [r3, #0]
 801eb64:	4240      	negs	r0, r0
 801eb66:	4770      	bx	lr
 801eb68:	2902      	cmp	r1, #2
 801eb6a:	d0f9      	beq.n	801eb60 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801eb6c:	2903      	cmp	r1, #3
 801eb6e:	d0f2      	beq.n	801eb56 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801eb70:	2901      	cmp	r1, #1
 801eb72:	d1f2      	bne.n	801eb5a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801eb74:	f04f 30ff 	mov.w	r0, #4294967295
 801eb78:	4770      	bx	lr
 801eb7a:	bf00      	nop
 801eb7c:	2000b3c2 	.word	0x2000b3c2

0801eb80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb84:	b097      	sub	sp, #92	; 0x5c
 801eb86:	910b      	str	r1, [sp, #44]	; 0x2c
 801eb88:	a912      	add	r1, sp, #72	; 0x48
 801eb8a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801eb8e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801eb92:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801eb96:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801eb9a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801eb9e:	e881 000c 	stmia.w	r1, {r2, r3}
 801eba2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801eba6:	9308      	str	r3, [sp, #32]
 801eba8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801ebac:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801ebb0:	9310      	str	r3, [sp, #64]	; 0x40
 801ebb2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801ebb6:	798d      	ldrb	r5, [r1, #6]
 801ebb8:	930c      	str	r3, [sp, #48]	; 0x30
 801ebba:	7b4b      	ldrb	r3, [r1, #13]
 801ebbc:	0158      	lsls	r0, r3, #5
 801ebbe:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ebc2:	4328      	orrs	r0, r5
 801ebc4:	9007      	str	r0, [sp, #28]
 801ebc6:	f000 8184 	beq.w	801eed2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ebca:	011b      	lsls	r3, r3, #4
 801ebcc:	79c8      	ldrb	r0, [r1, #7]
 801ebce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ebd2:	4303      	orrs	r3, r0
 801ebd4:	9309      	str	r3, [sp, #36]	; 0x24
 801ebd6:	f000 817c 	beq.w	801eed2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ebda:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ebde:	b29b      	uxth	r3, r3
 801ebe0:	2f00      	cmp	r7, #0
 801ebe2:	f000 8122 	beq.w	801ee2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801ebe6:	1aff      	subs	r7, r7, r3
 801ebe8:	b2bf      	uxth	r7, r7
 801ebea:	043b      	lsls	r3, r7, #16
 801ebec:	d502      	bpl.n	801ebf4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ebee:	1bf6      	subs	r6, r6, r7
 801ebf0:	2700      	movs	r7, #0
 801ebf2:	b236      	sxth	r6, r6
 801ebf4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ebf8:	a812      	add	r0, sp, #72	; 0x48
 801ebfa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ebfe:	428e      	cmp	r6, r1
 801ec00:	b28b      	uxth	r3, r1
 801ec02:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801ec06:	bfbf      	itttt	lt
 801ec08:	18ff      	addlt	r7, r7, r3
 801ec0a:	1bbe      	sublt	r6, r7, r6
 801ec0c:	b2b7      	uxthlt	r7, r6
 801ec0e:	460e      	movlt	r6, r1
 801ec10:	8891      	ldrh	r1, [r2, #4]
 801ec12:	440b      	add	r3, r1
 801ec14:	4631      	mov	r1, r6
 801ec16:	b21b      	sxth	r3, r3
 801ec18:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec1a:	88d3      	ldrh	r3, [r2, #6]
 801ec1c:	9a08      	ldr	r2, [sp, #32]
 801ec1e:	449a      	add	sl, r3
 801ec20:	fa0f f38a 	sxth.w	r3, sl
 801ec24:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801ec28:	930e      	str	r3, [sp, #56]	; 0x38
 801ec2a:	4bb2      	ldr	r3, [pc, #712]	; (801eef4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801ec2c:	f893 b000 	ldrb.w	fp, [r3]
 801ec30:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ec34:	f1dc 0300 	rsbs	r3, ip, #0
 801ec38:	eb43 030c 	adc.w	r3, r3, ip
 801ec3c:	930d      	str	r3, [sp, #52]	; 0x34
 801ec3e:	464b      	mov	r3, r9
 801ec40:	f7fa faee 	bl	8019220 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ec44:	4631      	mov	r1, r6
 801ec46:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801ec4a:	464b      	mov	r3, r9
 801ec4c:	9a08      	ldr	r2, [sp, #32]
 801ec4e:	a812      	add	r0, sp, #72	; 0x48
 801ec50:	f7fa fafe 	bl	8019250 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ec54:	a916      	add	r1, sp, #88	; 0x58
 801ec56:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ec5a:	a815      	add	r0, sp, #84	; 0x54
 801ec5c:	f7fa fbd8 	bl	8019410 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ec60:	f1b9 0f00 	cmp.w	r9, #0
 801ec64:	f040 80e4 	bne.w	801ee30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 801ec68:	f1bb 0f01 	cmp.w	fp, #1
 801ec6c:	f040 80e8 	bne.w	801ee40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 801ec70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	f040 8132 	bne.w	801eedc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801ec78:	4b9f      	ldr	r3, [pc, #636]	; (801eef8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801ec7a:	6818      	ldr	r0, [r3, #0]
 801ec7c:	6803      	ldr	r3, [r0, #0]
 801ec7e:	6a1b      	ldr	r3, [r3, #32]
 801ec80:	4798      	blx	r3
 801ec82:	4a9e      	ldr	r2, [pc, #632]	; (801eefc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801ec84:	f1b8 0f01 	cmp.w	r8, #1
 801ec88:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801ec8c:	8811      	ldrh	r1, [r2, #0]
 801ec8e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801ec92:	fb01 2303 	mla	r3, r1, r3, r2
 801ec96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec9a:	4403      	add	r3, r0
 801ec9c:	9309      	str	r3, [sp, #36]	; 0x24
 801ec9e:	f04f 0301 	mov.w	r3, #1
 801eca2:	fa03 f308 	lsl.w	r3, r3, r8
 801eca6:	f103 33ff 	add.w	r3, r3, #4294967295
 801ecaa:	b2db      	uxtb	r3, r3
 801ecac:	9311      	str	r3, [sp, #68]	; 0x44
 801ecae:	f000 8117 	beq.w	801eee0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 801ecb2:	f1b8 0f02 	cmp.w	r8, #2
 801ecb6:	f000 8115 	beq.w	801eee4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 801ecba:	f1b8 0f04 	cmp.w	r8, #4
 801ecbe:	bf14      	ite	ne
 801ecc0:	2301      	movne	r3, #1
 801ecc2:	2311      	moveq	r3, #17
 801ecc4:	930a      	str	r3, [sp, #40]	; 0x28
 801ecc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ecc8:	b153      	cbz	r3, 801ece0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801ecca:	2508      	movs	r5, #8
 801eccc:	9a07      	ldr	r2, [sp, #28]
 801ecce:	fb95 f3f8 	sdiv	r3, r5, r8
 801ecd2:	1e5d      	subs	r5, r3, #1
 801ecd4:	4415      	add	r5, r2
 801ecd6:	fb95 f5f3 	sdiv	r5, r5, r3
 801ecda:	fb15 f503 	smulbb	r5, r5, r3
 801ecde:	b2ad      	uxth	r5, r5
 801ece0:	b907      	cbnz	r7, 801ece4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 801ece2:	b174      	cbz	r4, 801ed02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x182>
 801ece4:	fb15 7304 	smlabb	r3, r5, r4, r7
 801ece8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ecea:	ebaa 0a04 	sub.w	sl, sl, r4
 801ecee:	fb13 f308 	smulbb	r3, r3, r8
 801ecf2:	fa1f fa8a 	uxth.w	sl, sl
 801ecf6:	b29b      	uxth	r3, r3
 801ecf8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ecfc:	f003 0407 	and.w	r4, r3, #7
 801ed00:	9226      	str	r2, [sp, #152]	; 0x98
 801ed02:	4649      	mov	r1, r9
 801ed04:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ed06:	f7ff ff03 	bl	801eb10 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ed0a:	4649      	mov	r1, r9
 801ed0c:	4683      	mov	fp, r0
 801ed0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ed10:	f7ff ff1a 	bl	801eb48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ed14:	9a08      	ldr	r2, [sp, #32]
 801ed16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed18:	1bf6      	subs	r6, r6, r7
 801ed1a:	1a9b      	subs	r3, r3, r2
 801ed1c:	459a      	cmp	sl, r3
 801ed1e:	bfa8      	it	ge
 801ed20:	469a      	movge	sl, r3
 801ed22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed24:	1b9e      	subs	r6, r3, r6
 801ed26:	9b07      	ldr	r3, [sp, #28]
 801ed28:	429e      	cmp	r6, r3
 801ed2a:	bfd4      	ite	le
 801ed2c:	ebc7 0706 	rsble	r7, r7, r6
 801ed30:	ebc7 0703 	rsbgt	r7, r7, r3
 801ed34:	1bed      	subs	r5, r5, r7
 801ed36:	fb0b 0017 	mls	r0, fp, r7, r0
 801ed3a:	fb08 f305 	mul.w	r3, r8, r5
 801ed3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ed42:	9308      	str	r3, [sp, #32]
 801ed44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed46:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ed4a:	930d      	str	r3, [sp, #52]	; 0x34
 801ed4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ed52:	930e      	str	r3, [sp, #56]	; 0x38
 801ed54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed56:	b2de      	uxtb	r6, r3
 801ed58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ed5a:	781a      	ldrb	r2, [r3, #0]
 801ed5c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ed60:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 801ed64:	4122      	asrs	r2, r4
 801ed66:	9307      	str	r3, [sp, #28]
 801ed68:	fb03 0b0b 	mla	fp, r3, fp, r0
 801ed6c:	b2d2      	uxtb	r2, r2
 801ed6e:	f1ba 0f00 	cmp.w	sl, #0
 801ed72:	f340 80d8 	ble.w	801ef26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 801ed76:	46be      	mov	lr, r7
 801ed78:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ed7a:	f1be 0f00 	cmp.w	lr, #0
 801ed7e:	f340 80bf 	ble.w	801ef00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801ed82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ed84:	4013      	ands	r3, r2
 801ed86:	d03e      	beq.n	801ee06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 801ed88:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ed8a:	fb13 f300 	smulbb	r3, r3, r0
 801ed8e:	2bfe      	cmp	r3, #254	; 0xfe
 801ed90:	dd03      	ble.n	801ed9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 801ed92:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ed94:	28ff      	cmp	r0, #255	; 0xff
 801ed96:	f000 80a7 	beq.w	801eee8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x368>
 801ed9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ed9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ed9e:	fb10 f303 	smulbb	r3, r0, r3
 801eda2:	b29b      	uxth	r3, r3
 801eda4:	1c58      	adds	r0, r3, #1
 801eda6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801edaa:	7808      	ldrb	r0, [r1, #0]
 801edac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801edb0:	fa1f fc83 	uxth.w	ip, r3
 801edb4:	43db      	mvns	r3, r3
 801edb6:	fb16 f90c 	smulbb	r9, r6, ip
 801edba:	b2db      	uxtb	r3, r3
 801edbc:	fb00 9003 	mla	r0, r0, r3, r9
 801edc0:	b280      	uxth	r0, r0
 801edc2:	f100 0901 	add.w	r9, r0, #1
 801edc6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801edca:	fb15 f90c 	smulbb	r9, r5, ip
 801edce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801edd0:	1200      	asrs	r0, r0, #8
 801edd2:	fb15 fc0c 	smulbb	ip, r5, ip
 801edd6:	7008      	strb	r0, [r1, #0]
 801edd8:	7848      	ldrb	r0, [r1, #1]
 801edda:	fb00 9003 	mla	r0, r0, r3, r9
 801edde:	b280      	uxth	r0, r0
 801ede0:	f100 0901 	add.w	r9, r0, #1
 801ede4:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ede8:	1200      	asrs	r0, r0, #8
 801edea:	7048      	strb	r0, [r1, #1]
 801edec:	7888      	ldrb	r0, [r1, #2]
 801edee:	fb00 cc03 	mla	ip, r0, r3, ip
 801edf2:	fa1f fc8c 	uxth.w	ip, ip
 801edf6:	f10c 0301 	add.w	r3, ip, #1
 801edfa:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801edfe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee02:	f881 c002 	strb.w	ip, [r1, #2]
 801ee06:	4444      	add	r4, r8
 801ee08:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ee0c:	b2a4      	uxth	r4, r4
 801ee0e:	2c07      	cmp	r4, #7
 801ee10:	bf89      	itett	hi
 801ee12:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801ee14:	fa42 f208 	asrls.w	r2, r2, r8
 801ee18:	2400      	movhi	r4, #0
 801ee1a:	785a      	ldrbhi	r2, [r3, #1]
 801ee1c:	bf8a      	itet	hi
 801ee1e:	3301      	addhi	r3, #1
 801ee20:	b2d2      	uxtbls	r2, r2
 801ee22:	9326      	strhi	r3, [sp, #152]	; 0x98
 801ee24:	9b07      	ldr	r3, [sp, #28]
 801ee26:	4419      	add	r1, r3
 801ee28:	e7a7      	b.n	801ed7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801ee2a:	441e      	add	r6, r3
 801ee2c:	b236      	sxth	r6, r6
 801ee2e:	e6e1      	b.n	801ebf4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ee30:	f1b9 0f01 	cmp.w	r9, #1
 801ee34:	f47f af1c 	bne.w	801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee38:	f1bb 0f01 	cmp.w	fp, #1
 801ee3c:	f47f af18 	bne.w	801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee40:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801eef8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ee44:	f8db 0000 	ldr.w	r0, [fp]
 801ee48:	6803      	ldr	r3, [r0, #0]
 801ee4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ee4c:	4798      	blx	r3
 801ee4e:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801ee52:	465a      	mov	r2, fp
 801ee54:	d006      	beq.n	801ee64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801ee56:	f1b8 0f04 	cmp.w	r8, #4
 801ee5a:	d13d      	bne.n	801eed8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 801ee5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee5e:	3300      	adds	r3, #0
 801ee60:	bf18      	it	ne
 801ee62:	2301      	movne	r3, #1
 801ee64:	05c0      	lsls	r0, r0, #23
 801ee66:	d567      	bpl.n	801ef38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801ee68:	f1b8 0f08 	cmp.w	r8, #8
 801ee6c:	d164      	bne.n	801ef38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	bf0c      	ite	eq
 801ee72:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ee76:	2180      	movne	r1, #128	; 0x80
 801ee78:	2f00      	cmp	r7, #0
 801ee7a:	f47f aef9 	bne.w	801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee7e:	2c00      	cmp	r4, #0
 801ee80:	f47f aef6 	bne.w	801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee84:	9b07      	ldr	r3, [sp, #28]
 801ee86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ee88:	18f3      	adds	r3, r6, r3
 801ee8a:	4283      	cmp	r3, r0
 801ee8c:	f73f aef0 	bgt.w	801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee90:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 801ee94:	4403      	add	r3, r0
 801ee96:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ee98:	4283      	cmp	r3, r0
 801ee9a:	f73f aee9 	bgt.w	801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee9e:	f1b8 0f08 	cmp.w	r8, #8
 801eea2:	6810      	ldr	r0, [r2, #0]
 801eea4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801eea8:	bf18      	it	ne
 801eeaa:	3501      	addne	r5, #1
 801eeac:	6804      	ldr	r4, [r0, #0]
 801eeae:	9105      	str	r1, [sp, #20]
 801eeb0:	bf18      	it	ne
 801eeb2:	f025 0501 	bicne.w	r5, r5, #1
 801eeb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eeb8:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801eebc:	bf18      	it	ne
 801eebe:	b2ad      	uxthne	r5, r5
 801eec0:	9104      	str	r1, [sp, #16]
 801eec2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801eec4:	e9cd 5a00 	strd	r5, sl, [sp]
 801eec8:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801eecc:	9926      	ldr	r1, [sp, #152]	; 0x98
 801eece:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801eed0:	47a0      	blx	r4
 801eed2:	b017      	add	sp, #92	; 0x5c
 801eed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eed8:	2300      	movs	r3, #0
 801eeda:	e7c3      	b.n	801ee64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801eedc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801eede:	e6d0      	b.n	801ec82 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801eee0:	23ff      	movs	r3, #255	; 0xff
 801eee2:	e6ef      	b.n	801ecc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801eee4:	2355      	movs	r3, #85	; 0x55
 801eee6:	e6ed      	b.n	801ecc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801eee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eeea:	700e      	strb	r6, [r1, #0]
 801eeec:	704b      	strb	r3, [r1, #1]
 801eeee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eef0:	708b      	strb	r3, [r1, #2]
 801eef2:	e788      	b.n	801ee06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 801eef4:	2000b3c0 	.word	0x2000b3c0
 801eef8:	2000b3c8 	.word	0x2000b3c8
 801eefc:	2000b3c2 	.word	0x2000b3c2
 801ef00:	9b08      	ldr	r3, [sp, #32]
 801ef02:	b153      	cbz	r3, 801ef1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801ef04:	441c      	add	r4, r3
 801ef06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ef08:	b2a4      	uxth	r4, r4
 801ef0a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ef0e:	f004 0407 	and.w	r4, r4, #7
 801ef12:	781a      	ldrb	r2, [r3, #0]
 801ef14:	9326      	str	r3, [sp, #152]	; 0x98
 801ef16:	4122      	asrs	r2, r4
 801ef18:	b2d2      	uxtb	r2, r2
 801ef1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ef20:	445b      	add	r3, fp
 801ef22:	9309      	str	r3, [sp, #36]	; 0x24
 801ef24:	e723      	b.n	801ed6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801ef26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d1d2      	bne.n	801eed2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ef2c:	4b05      	ldr	r3, [pc, #20]	; (801ef44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 801ef2e:	6818      	ldr	r0, [r3, #0]
 801ef30:	6803      	ldr	r3, [r0, #0]
 801ef32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef34:	4798      	blx	r3
 801ef36:	e7cc      	b.n	801eed2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	f43f ae99 	beq.w	801ec70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ef3e:	2180      	movs	r1, #128	; 0x80
 801ef40:	e79a      	b.n	801ee78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801ef42:	bf00      	nop
 801ef44:	2000b3c8 	.word	0x2000b3c8

0801ef48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ef48:	b538      	push	{r3, r4, r5, lr}
 801ef4a:	4c15      	ldr	r4, [pc, #84]	; (801efa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ef4c:	4605      	mov	r5, r0
 801ef4e:	7823      	ldrb	r3, [r4, #0]
 801ef50:	f3bf 8f5b 	dmb	ish
 801ef54:	07da      	lsls	r2, r3, #31
 801ef56:	d40b      	bmi.n	801ef70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ef58:	4620      	mov	r0, r4
 801ef5a:	f006 fd67 	bl	8025a2c <__cxa_guard_acquire>
 801ef5e:	b138      	cbz	r0, 801ef70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ef60:	4620      	mov	r0, r4
 801ef62:	f006 fd6f 	bl	8025a44 <__cxa_guard_release>
 801ef66:	4a0f      	ldr	r2, [pc, #60]	; (801efa4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ef68:	490f      	ldr	r1, [pc, #60]	; (801efa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ef6a:	4810      	ldr	r0, [pc, #64]	; (801efac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ef6c:	f006 fd54 	bl	8025a18 <__aeabi_atexit>
 801ef70:	4c0f      	ldr	r4, [pc, #60]	; (801efb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ef72:	7823      	ldrb	r3, [r4, #0]
 801ef74:	f3bf 8f5b 	dmb	ish
 801ef78:	07db      	lsls	r3, r3, #31
 801ef7a:	d40b      	bmi.n	801ef94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ef7c:	4620      	mov	r0, r4
 801ef7e:	f006 fd55 	bl	8025a2c <__cxa_guard_acquire>
 801ef82:	b138      	cbz	r0, 801ef94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ef84:	4620      	mov	r0, r4
 801ef86:	f006 fd5d 	bl	8025a44 <__cxa_guard_release>
 801ef8a:	4a06      	ldr	r2, [pc, #24]	; (801efa4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ef8c:	4909      	ldr	r1, [pc, #36]	; (801efb4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ef8e:	480a      	ldr	r0, [pc, #40]	; (801efb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ef90:	f006 fd42 	bl	8025a18 <__aeabi_atexit>
 801ef94:	4b05      	ldr	r3, [pc, #20]	; (801efac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ef96:	612b      	str	r3, [r5, #16]
 801ef98:	4b07      	ldr	r3, [pc, #28]	; (801efb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ef9a:	616b      	str	r3, [r5, #20]
 801ef9c:	bd38      	pop	{r3, r4, r5, pc}
 801ef9e:	bf00      	nop
 801efa0:	2000b4d4 	.word	0x2000b4d4
 801efa4:	20000000 	.word	0x20000000
 801efa8:	0801d927 	.word	0x0801d927
 801efac:	20000084 	.word	0x20000084
 801efb0:	2000b4d8 	.word	0x2000b4d8
 801efb4:	0801d925 	.word	0x0801d925
 801efb8:	20000088 	.word	0x20000088

0801efbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801efbc:	b538      	push	{r3, r4, r5, lr}
 801efbe:	4c15      	ldr	r4, [pc, #84]	; (801f014 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801efc0:	4605      	mov	r5, r0
 801efc2:	7823      	ldrb	r3, [r4, #0]
 801efc4:	f3bf 8f5b 	dmb	ish
 801efc8:	07da      	lsls	r2, r3, #31
 801efca:	d40b      	bmi.n	801efe4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801efcc:	4620      	mov	r0, r4
 801efce:	f006 fd2d 	bl	8025a2c <__cxa_guard_acquire>
 801efd2:	b138      	cbz	r0, 801efe4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801efd4:	4620      	mov	r0, r4
 801efd6:	f006 fd35 	bl	8025a44 <__cxa_guard_release>
 801efda:	4a0f      	ldr	r2, [pc, #60]	; (801f018 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801efdc:	490f      	ldr	r1, [pc, #60]	; (801f01c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801efde:	4810      	ldr	r0, [pc, #64]	; (801f020 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801efe0:	f006 fd1a 	bl	8025a18 <__aeabi_atexit>
 801efe4:	4c0f      	ldr	r4, [pc, #60]	; (801f024 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801efe6:	7823      	ldrb	r3, [r4, #0]
 801efe8:	f3bf 8f5b 	dmb	ish
 801efec:	07db      	lsls	r3, r3, #31
 801efee:	d40b      	bmi.n	801f008 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801eff0:	4620      	mov	r0, r4
 801eff2:	f006 fd1b 	bl	8025a2c <__cxa_guard_acquire>
 801eff6:	b138      	cbz	r0, 801f008 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801eff8:	4620      	mov	r0, r4
 801effa:	f006 fd23 	bl	8025a44 <__cxa_guard_release>
 801effe:	4a06      	ldr	r2, [pc, #24]	; (801f018 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f000:	4909      	ldr	r1, [pc, #36]	; (801f028 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f002:	480a      	ldr	r0, [pc, #40]	; (801f02c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f004:	f006 fd08 	bl	8025a18 <__aeabi_atexit>
 801f008:	4b05      	ldr	r3, [pc, #20]	; (801f020 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f00a:	60ab      	str	r3, [r5, #8]
 801f00c:	4b07      	ldr	r3, [pc, #28]	; (801f02c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f00e:	60eb      	str	r3, [r5, #12]
 801f010:	bd38      	pop	{r3, r4, r5, pc}
 801f012:	bf00      	nop
 801f014:	2000b4b4 	.word	0x2000b4b4
 801f018:	20000000 	.word	0x20000000
 801f01c:	0801d92b 	.word	0x0801d92b
 801f020:	20000064 	.word	0x20000064
 801f024:	2000b4b8 	.word	0x2000b4b8
 801f028:	0801d929 	.word	0x0801d929
 801f02c:	20000068 	.word	0x20000068

0801f030 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801f030:	b510      	push	{r4, lr}
 801f032:	4604      	mov	r4, r0
 801f034:	f7ff ff88 	bl	801ef48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f038:	4620      	mov	r0, r4
 801f03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f03e:	f7ff bfbd 	b.w	801efbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f044 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f044:	b538      	push	{r3, r4, r5, lr}
 801f046:	4c15      	ldr	r4, [pc, #84]	; (801f09c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f048:	4605      	mov	r5, r0
 801f04a:	7823      	ldrb	r3, [r4, #0]
 801f04c:	f3bf 8f5b 	dmb	ish
 801f050:	07da      	lsls	r2, r3, #31
 801f052:	d40b      	bmi.n	801f06c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f054:	4620      	mov	r0, r4
 801f056:	f006 fce9 	bl	8025a2c <__cxa_guard_acquire>
 801f05a:	b138      	cbz	r0, 801f06c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f05c:	4620      	mov	r0, r4
 801f05e:	f006 fcf1 	bl	8025a44 <__cxa_guard_release>
 801f062:	4a0f      	ldr	r2, [pc, #60]	; (801f0a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f064:	490f      	ldr	r1, [pc, #60]	; (801f0a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f066:	4810      	ldr	r0, [pc, #64]	; (801f0a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f068:	f006 fcd6 	bl	8025a18 <__aeabi_atexit>
 801f06c:	4c0f      	ldr	r4, [pc, #60]	; (801f0ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f06e:	7823      	ldrb	r3, [r4, #0]
 801f070:	f3bf 8f5b 	dmb	ish
 801f074:	07db      	lsls	r3, r3, #31
 801f076:	d40b      	bmi.n	801f090 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f078:	4620      	mov	r0, r4
 801f07a:	f006 fcd7 	bl	8025a2c <__cxa_guard_acquire>
 801f07e:	b138      	cbz	r0, 801f090 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f080:	4620      	mov	r0, r4
 801f082:	f006 fcdf 	bl	8025a44 <__cxa_guard_release>
 801f086:	4a06      	ldr	r2, [pc, #24]	; (801f0a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f088:	4909      	ldr	r1, [pc, #36]	; (801f0b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f08a:	480a      	ldr	r0, [pc, #40]	; (801f0b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f08c:	f006 fcc4 	bl	8025a18 <__aeabi_atexit>
 801f090:	4b05      	ldr	r3, [pc, #20]	; (801f0a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f092:	622b      	str	r3, [r5, #32]
 801f094:	4b07      	ldr	r3, [pc, #28]	; (801f0b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f096:	626b      	str	r3, [r5, #36]	; 0x24
 801f098:	bd38      	pop	{r3, r4, r5, pc}
 801f09a:	bf00      	nop
 801f09c:	2000b4dc 	.word	0x2000b4dc
 801f0a0:	20000000 	.word	0x20000000
 801f0a4:	0801d91f 	.word	0x0801d91f
 801f0a8:	2000008c 	.word	0x2000008c
 801f0ac:	2000b4e0 	.word	0x2000b4e0
 801f0b0:	0801d91d 	.word	0x0801d91d
 801f0b4:	20000090 	.word	0x20000090

0801f0b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f0b8:	b538      	push	{r3, r4, r5, lr}
 801f0ba:	4c15      	ldr	r4, [pc, #84]	; (801f110 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f0bc:	4605      	mov	r5, r0
 801f0be:	7823      	ldrb	r3, [r4, #0]
 801f0c0:	f3bf 8f5b 	dmb	ish
 801f0c4:	07da      	lsls	r2, r3, #31
 801f0c6:	d40b      	bmi.n	801f0e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f0c8:	4620      	mov	r0, r4
 801f0ca:	f006 fcaf 	bl	8025a2c <__cxa_guard_acquire>
 801f0ce:	b138      	cbz	r0, 801f0e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f0d0:	4620      	mov	r0, r4
 801f0d2:	f006 fcb7 	bl	8025a44 <__cxa_guard_release>
 801f0d6:	4a0f      	ldr	r2, [pc, #60]	; (801f114 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f0d8:	490f      	ldr	r1, [pc, #60]	; (801f118 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f0da:	4810      	ldr	r0, [pc, #64]	; (801f11c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f0dc:	f006 fc9c 	bl	8025a18 <__aeabi_atexit>
 801f0e0:	4c0f      	ldr	r4, [pc, #60]	; (801f120 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f0e2:	7823      	ldrb	r3, [r4, #0]
 801f0e4:	f3bf 8f5b 	dmb	ish
 801f0e8:	07db      	lsls	r3, r3, #31
 801f0ea:	d40b      	bmi.n	801f104 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f0ec:	4620      	mov	r0, r4
 801f0ee:	f006 fc9d 	bl	8025a2c <__cxa_guard_acquire>
 801f0f2:	b138      	cbz	r0, 801f104 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f0f4:	4620      	mov	r0, r4
 801f0f6:	f006 fca5 	bl	8025a44 <__cxa_guard_release>
 801f0fa:	4a06      	ldr	r2, [pc, #24]	; (801f114 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f0fc:	4909      	ldr	r1, [pc, #36]	; (801f124 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f0fe:	480a      	ldr	r0, [pc, #40]	; (801f128 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f100:	f006 fc8a 	bl	8025a18 <__aeabi_atexit>
 801f104:	4b05      	ldr	r3, [pc, #20]	; (801f11c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f106:	61ab      	str	r3, [r5, #24]
 801f108:	4b07      	ldr	r3, [pc, #28]	; (801f128 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f10a:	61eb      	str	r3, [r5, #28]
 801f10c:	bd38      	pop	{r3, r4, r5, pc}
 801f10e:	bf00      	nop
 801f110:	2000b4bc 	.word	0x2000b4bc
 801f114:	20000000 	.word	0x20000000
 801f118:	0801d923 	.word	0x0801d923
 801f11c:	2000006c 	.word	0x2000006c
 801f120:	2000b4c0 	.word	0x2000b4c0
 801f124:	0801d921 	.word	0x0801d921
 801f128:	20000070 	.word	0x20000070

0801f12c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f12c:	b510      	push	{r4, lr}
 801f12e:	4604      	mov	r4, r0
 801f130:	f7ff ff88 	bl	801f044 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f134:	4620      	mov	r0, r4
 801f136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f13a:	f7ff bfbd 	b.w	801f0b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f140 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f140:	b538      	push	{r3, r4, r5, lr}
 801f142:	4c15      	ldr	r4, [pc, #84]	; (801f198 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f144:	4605      	mov	r5, r0
 801f146:	7823      	ldrb	r3, [r4, #0]
 801f148:	f3bf 8f5b 	dmb	ish
 801f14c:	07da      	lsls	r2, r3, #31
 801f14e:	d40b      	bmi.n	801f168 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f150:	4620      	mov	r0, r4
 801f152:	f006 fc6b 	bl	8025a2c <__cxa_guard_acquire>
 801f156:	b138      	cbz	r0, 801f168 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f158:	4620      	mov	r0, r4
 801f15a:	f006 fc73 	bl	8025a44 <__cxa_guard_release>
 801f15e:	4a0f      	ldr	r2, [pc, #60]	; (801f19c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f160:	490f      	ldr	r1, [pc, #60]	; (801f1a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f162:	4810      	ldr	r0, [pc, #64]	; (801f1a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f164:	f006 fc58 	bl	8025a18 <__aeabi_atexit>
 801f168:	4c0f      	ldr	r4, [pc, #60]	; (801f1a8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f16a:	7823      	ldrb	r3, [r4, #0]
 801f16c:	f3bf 8f5b 	dmb	ish
 801f170:	07db      	lsls	r3, r3, #31
 801f172:	d40b      	bmi.n	801f18c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f174:	4620      	mov	r0, r4
 801f176:	f006 fc59 	bl	8025a2c <__cxa_guard_acquire>
 801f17a:	b138      	cbz	r0, 801f18c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f17c:	4620      	mov	r0, r4
 801f17e:	f006 fc61 	bl	8025a44 <__cxa_guard_release>
 801f182:	4a06      	ldr	r2, [pc, #24]	; (801f19c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f184:	4909      	ldr	r1, [pc, #36]	; (801f1ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f186:	480a      	ldr	r0, [pc, #40]	; (801f1b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f188:	f006 fc46 	bl	8025a18 <__aeabi_atexit>
 801f18c:	4b05      	ldr	r3, [pc, #20]	; (801f1a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f18e:	632b      	str	r3, [r5, #48]	; 0x30
 801f190:	4b07      	ldr	r3, [pc, #28]	; (801f1b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f192:	636b      	str	r3, [r5, #52]	; 0x34
 801f194:	bd38      	pop	{r3, r4, r5, pc}
 801f196:	bf00      	nop
 801f198:	2000b4c4 	.word	0x2000b4c4
 801f19c:	20000000 	.word	0x20000000
 801f1a0:	0801d917 	.word	0x0801d917
 801f1a4:	20000074 	.word	0x20000074
 801f1a8:	2000b4c8 	.word	0x2000b4c8
 801f1ac:	0801d915 	.word	0x0801d915
 801f1b0:	20000078 	.word	0x20000078

0801f1b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f1b4:	b538      	push	{r3, r4, r5, lr}
 801f1b6:	4c15      	ldr	r4, [pc, #84]	; (801f20c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f1b8:	4605      	mov	r5, r0
 801f1ba:	7823      	ldrb	r3, [r4, #0]
 801f1bc:	f3bf 8f5b 	dmb	ish
 801f1c0:	07da      	lsls	r2, r3, #31
 801f1c2:	d40b      	bmi.n	801f1dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	f006 fc31 	bl	8025a2c <__cxa_guard_acquire>
 801f1ca:	b138      	cbz	r0, 801f1dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f1cc:	4620      	mov	r0, r4
 801f1ce:	f006 fc39 	bl	8025a44 <__cxa_guard_release>
 801f1d2:	4a0f      	ldr	r2, [pc, #60]	; (801f210 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f1d4:	490f      	ldr	r1, [pc, #60]	; (801f214 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f1d6:	4810      	ldr	r0, [pc, #64]	; (801f218 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f1d8:	f006 fc1e 	bl	8025a18 <__aeabi_atexit>
 801f1dc:	4c0f      	ldr	r4, [pc, #60]	; (801f21c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f1de:	7823      	ldrb	r3, [r4, #0]
 801f1e0:	f3bf 8f5b 	dmb	ish
 801f1e4:	07db      	lsls	r3, r3, #31
 801f1e6:	d40b      	bmi.n	801f200 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f1e8:	4620      	mov	r0, r4
 801f1ea:	f006 fc1f 	bl	8025a2c <__cxa_guard_acquire>
 801f1ee:	b138      	cbz	r0, 801f200 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f1f0:	4620      	mov	r0, r4
 801f1f2:	f006 fc27 	bl	8025a44 <__cxa_guard_release>
 801f1f6:	4a06      	ldr	r2, [pc, #24]	; (801f210 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f1f8:	4909      	ldr	r1, [pc, #36]	; (801f220 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f1fa:	480a      	ldr	r0, [pc, #40]	; (801f224 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f1fc:	f006 fc0c 	bl	8025a18 <__aeabi_atexit>
 801f200:	4b05      	ldr	r3, [pc, #20]	; (801f218 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f202:	62ab      	str	r3, [r5, #40]	; 0x28
 801f204:	4b07      	ldr	r3, [pc, #28]	; (801f224 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f206:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f208:	bd38      	pop	{r3, r4, r5, pc}
 801f20a:	bf00      	nop
 801f20c:	2000b49c 	.word	0x2000b49c
 801f210:	20000000 	.word	0x20000000
 801f214:	0801d91b 	.word	0x0801d91b
 801f218:	2000004c 	.word	0x2000004c
 801f21c:	2000b4a0 	.word	0x2000b4a0
 801f220:	0801d919 	.word	0x0801d919
 801f224:	20000050 	.word	0x20000050

0801f228 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f228:	b510      	push	{r4, lr}
 801f22a:	4604      	mov	r4, r0
 801f22c:	f7ff ff88 	bl	801f140 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f230:	4620      	mov	r0, r4
 801f232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f236:	f7ff bfbd 	b.w	801f1b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f23c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f23c:	b538      	push	{r3, r4, r5, lr}
 801f23e:	4c15      	ldr	r4, [pc, #84]	; (801f294 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f240:	4605      	mov	r5, r0
 801f242:	7823      	ldrb	r3, [r4, #0]
 801f244:	f3bf 8f5b 	dmb	ish
 801f248:	07da      	lsls	r2, r3, #31
 801f24a:	d40b      	bmi.n	801f264 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f24c:	4620      	mov	r0, r4
 801f24e:	f006 fbed 	bl	8025a2c <__cxa_guard_acquire>
 801f252:	b138      	cbz	r0, 801f264 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f254:	4620      	mov	r0, r4
 801f256:	f006 fbf5 	bl	8025a44 <__cxa_guard_release>
 801f25a:	4a0f      	ldr	r2, [pc, #60]	; (801f298 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f25c:	490f      	ldr	r1, [pc, #60]	; (801f29c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f25e:	4810      	ldr	r0, [pc, #64]	; (801f2a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f260:	f006 fbda 	bl	8025a18 <__aeabi_atexit>
 801f264:	4c0f      	ldr	r4, [pc, #60]	; (801f2a4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f266:	7823      	ldrb	r3, [r4, #0]
 801f268:	f3bf 8f5b 	dmb	ish
 801f26c:	07db      	lsls	r3, r3, #31
 801f26e:	d40b      	bmi.n	801f288 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f270:	4620      	mov	r0, r4
 801f272:	f006 fbdb 	bl	8025a2c <__cxa_guard_acquire>
 801f276:	b138      	cbz	r0, 801f288 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f278:	4620      	mov	r0, r4
 801f27a:	f006 fbe3 	bl	8025a44 <__cxa_guard_release>
 801f27e:	4a06      	ldr	r2, [pc, #24]	; (801f298 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f280:	4909      	ldr	r1, [pc, #36]	; (801f2a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f282:	480a      	ldr	r0, [pc, #40]	; (801f2ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f284:	f006 fbc8 	bl	8025a18 <__aeabi_atexit>
 801f288:	4b05      	ldr	r3, [pc, #20]	; (801f2a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f28a:	642b      	str	r3, [r5, #64]	; 0x40
 801f28c:	4b07      	ldr	r3, [pc, #28]	; (801f2ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f28e:	646b      	str	r3, [r5, #68]	; 0x44
 801f290:	bd38      	pop	{r3, r4, r5, pc}
 801f292:	bf00      	nop
 801f294:	2000b4cc 	.word	0x2000b4cc
 801f298:	20000000 	.word	0x20000000
 801f29c:	0801d90f 	.word	0x0801d90f
 801f2a0:	2000007c 	.word	0x2000007c
 801f2a4:	2000b4d0 	.word	0x2000b4d0
 801f2a8:	0801d90d 	.word	0x0801d90d
 801f2ac:	20000080 	.word	0x20000080

0801f2b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f2b0:	b538      	push	{r3, r4, r5, lr}
 801f2b2:	4c15      	ldr	r4, [pc, #84]	; (801f308 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f2b4:	4605      	mov	r5, r0
 801f2b6:	7823      	ldrb	r3, [r4, #0]
 801f2b8:	f3bf 8f5b 	dmb	ish
 801f2bc:	07da      	lsls	r2, r3, #31
 801f2be:	d40b      	bmi.n	801f2d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f2c0:	4620      	mov	r0, r4
 801f2c2:	f006 fbb3 	bl	8025a2c <__cxa_guard_acquire>
 801f2c6:	b138      	cbz	r0, 801f2d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f2c8:	4620      	mov	r0, r4
 801f2ca:	f006 fbbb 	bl	8025a44 <__cxa_guard_release>
 801f2ce:	4a0f      	ldr	r2, [pc, #60]	; (801f30c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f2d0:	490f      	ldr	r1, [pc, #60]	; (801f310 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f2d2:	4810      	ldr	r0, [pc, #64]	; (801f314 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f2d4:	f006 fba0 	bl	8025a18 <__aeabi_atexit>
 801f2d8:	4c0f      	ldr	r4, [pc, #60]	; (801f318 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f2da:	7823      	ldrb	r3, [r4, #0]
 801f2dc:	f3bf 8f5b 	dmb	ish
 801f2e0:	07db      	lsls	r3, r3, #31
 801f2e2:	d40b      	bmi.n	801f2fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f2e4:	4620      	mov	r0, r4
 801f2e6:	f006 fba1 	bl	8025a2c <__cxa_guard_acquire>
 801f2ea:	b138      	cbz	r0, 801f2fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f2ec:	4620      	mov	r0, r4
 801f2ee:	f006 fba9 	bl	8025a44 <__cxa_guard_release>
 801f2f2:	4a06      	ldr	r2, [pc, #24]	; (801f30c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f2f4:	4909      	ldr	r1, [pc, #36]	; (801f31c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f2f6:	480a      	ldr	r0, [pc, #40]	; (801f320 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f2f8:	f006 fb8e 	bl	8025a18 <__aeabi_atexit>
 801f2fc:	4b05      	ldr	r3, [pc, #20]	; (801f314 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f2fe:	63ab      	str	r3, [r5, #56]	; 0x38
 801f300:	4b07      	ldr	r3, [pc, #28]	; (801f320 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f302:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f304:	bd38      	pop	{r3, r4, r5, pc}
 801f306:	bf00      	nop
 801f308:	2000b4ac 	.word	0x2000b4ac
 801f30c:	20000000 	.word	0x20000000
 801f310:	0801d913 	.word	0x0801d913
 801f314:	2000005c 	.word	0x2000005c
 801f318:	2000b4b0 	.word	0x2000b4b0
 801f31c:	0801d911 	.word	0x0801d911
 801f320:	20000060 	.word	0x20000060

0801f324 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f324:	b510      	push	{r4, lr}
 801f326:	4604      	mov	r4, r0
 801f328:	f7ff ff88 	bl	801f23c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f32c:	4620      	mov	r0, r4
 801f32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f332:	f7ff bfbd 	b.w	801f2b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f338 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f338:	b538      	push	{r3, r4, r5, lr}
 801f33a:	4c15      	ldr	r4, [pc, #84]	; (801f390 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f33c:	4605      	mov	r5, r0
 801f33e:	7823      	ldrb	r3, [r4, #0]
 801f340:	f3bf 8f5b 	dmb	ish
 801f344:	07da      	lsls	r2, r3, #31
 801f346:	d40b      	bmi.n	801f360 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f348:	4620      	mov	r0, r4
 801f34a:	f006 fb6f 	bl	8025a2c <__cxa_guard_acquire>
 801f34e:	b138      	cbz	r0, 801f360 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f350:	4620      	mov	r0, r4
 801f352:	f006 fb77 	bl	8025a44 <__cxa_guard_release>
 801f356:	4a0f      	ldr	r2, [pc, #60]	; (801f394 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f358:	490f      	ldr	r1, [pc, #60]	; (801f398 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f35a:	4810      	ldr	r0, [pc, #64]	; (801f39c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f35c:	f006 fb5c 	bl	8025a18 <__aeabi_atexit>
 801f360:	4c0f      	ldr	r4, [pc, #60]	; (801f3a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f362:	7823      	ldrb	r3, [r4, #0]
 801f364:	f3bf 8f5b 	dmb	ish
 801f368:	07db      	lsls	r3, r3, #31
 801f36a:	d40b      	bmi.n	801f384 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f36c:	4620      	mov	r0, r4
 801f36e:	f006 fb5d 	bl	8025a2c <__cxa_guard_acquire>
 801f372:	b138      	cbz	r0, 801f384 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f374:	4620      	mov	r0, r4
 801f376:	f006 fb65 	bl	8025a44 <__cxa_guard_release>
 801f37a:	4a06      	ldr	r2, [pc, #24]	; (801f394 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f37c:	4909      	ldr	r1, [pc, #36]	; (801f3a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f37e:	480a      	ldr	r0, [pc, #40]	; (801f3a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f380:	f006 fb4a 	bl	8025a18 <__aeabi_atexit>
 801f384:	4b05      	ldr	r3, [pc, #20]	; (801f39c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f386:	652b      	str	r3, [r5, #80]	; 0x50
 801f388:	4b07      	ldr	r3, [pc, #28]	; (801f3a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f38a:	656b      	str	r3, [r5, #84]	; 0x54
 801f38c:	bd38      	pop	{r3, r4, r5, pc}
 801f38e:	bf00      	nop
 801f390:	2000b4a4 	.word	0x2000b4a4
 801f394:	20000000 	.word	0x20000000
 801f398:	0801d907 	.word	0x0801d907
 801f39c:	20000054 	.word	0x20000054
 801f3a0:	2000b4a8 	.word	0x2000b4a8
 801f3a4:	0801d905 	.word	0x0801d905
 801f3a8:	20000058 	.word	0x20000058

0801f3ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f3ac:	b538      	push	{r3, r4, r5, lr}
 801f3ae:	4c15      	ldr	r4, [pc, #84]	; (801f404 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f3b0:	4605      	mov	r5, r0
 801f3b2:	7823      	ldrb	r3, [r4, #0]
 801f3b4:	f3bf 8f5b 	dmb	ish
 801f3b8:	07da      	lsls	r2, r3, #31
 801f3ba:	d40b      	bmi.n	801f3d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f3bc:	4620      	mov	r0, r4
 801f3be:	f006 fb35 	bl	8025a2c <__cxa_guard_acquire>
 801f3c2:	b138      	cbz	r0, 801f3d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f3c4:	4620      	mov	r0, r4
 801f3c6:	f006 fb3d 	bl	8025a44 <__cxa_guard_release>
 801f3ca:	4a0f      	ldr	r2, [pc, #60]	; (801f408 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f3cc:	490f      	ldr	r1, [pc, #60]	; (801f40c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f3ce:	4810      	ldr	r0, [pc, #64]	; (801f410 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f3d0:	f006 fb22 	bl	8025a18 <__aeabi_atexit>
 801f3d4:	4c0f      	ldr	r4, [pc, #60]	; (801f414 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f3d6:	7823      	ldrb	r3, [r4, #0]
 801f3d8:	f3bf 8f5b 	dmb	ish
 801f3dc:	07db      	lsls	r3, r3, #31
 801f3de:	d40b      	bmi.n	801f3f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f3e0:	4620      	mov	r0, r4
 801f3e2:	f006 fb23 	bl	8025a2c <__cxa_guard_acquire>
 801f3e6:	b138      	cbz	r0, 801f3f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f3e8:	4620      	mov	r0, r4
 801f3ea:	f006 fb2b 	bl	8025a44 <__cxa_guard_release>
 801f3ee:	4a06      	ldr	r2, [pc, #24]	; (801f408 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f3f0:	4909      	ldr	r1, [pc, #36]	; (801f418 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f3f2:	480a      	ldr	r0, [pc, #40]	; (801f41c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f3f4:	f006 fb10 	bl	8025a18 <__aeabi_atexit>
 801f3f8:	4b05      	ldr	r3, [pc, #20]	; (801f410 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f3fa:	64ab      	str	r3, [r5, #72]	; 0x48
 801f3fc:	4b07      	ldr	r3, [pc, #28]	; (801f41c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f3fe:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f400:	bd38      	pop	{r3, r4, r5, pc}
 801f402:	bf00      	nop
 801f404:	2000b494 	.word	0x2000b494
 801f408:	20000000 	.word	0x20000000
 801f40c:	0801d90b 	.word	0x0801d90b
 801f410:	20000044 	.word	0x20000044
 801f414:	2000b498 	.word	0x2000b498
 801f418:	0801d909 	.word	0x0801d909
 801f41c:	20000048 	.word	0x20000048

0801f420 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f420:	b510      	push	{r4, lr}
 801f422:	4604      	mov	r4, r0
 801f424:	f7ff ff88 	bl	801f338 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f428:	4620      	mov	r0, r4
 801f42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f42e:	f7ff bfbd 	b.w	801f3ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f432 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f432:	b510      	push	{r4, lr}
 801f434:	4604      	mov	r4, r0
 801f436:	f7ff fff3 	bl	801f420 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f43a:	4620      	mov	r0, r4
 801f43c:	f7ff ff72 	bl	801f324 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f440:	4620      	mov	r0, r4
 801f442:	f7ff fe73 	bl	801f12c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f446:	4620      	mov	r0, r4
 801f448:	f7ff fdf2 	bl	801f030 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f44c:	4620      	mov	r0, r4
 801f44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f452:	f7ff bee9 	b.w	801f228 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f45c:	b087      	sub	sp, #28
 801f45e:	7888      	ldrb	r0, [r1, #2]
 801f460:	4616      	mov	r6, r2
 801f462:	9001      	str	r0, [sp, #4]
 801f464:	7848      	ldrb	r0, [r1, #1]
 801f466:	9100      	str	r1, [sp, #0]
 801f468:	9002      	str	r0, [sp, #8]
 801f46a:	7808      	ldrb	r0, [r1, #0]
 801f46c:	9901      	ldr	r1, [sp, #4]
 801f46e:	9003      	str	r0, [sp, #12]
 801f470:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f474:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f478:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f47c:	9902      	ldr	r1, [sp, #8]
 801f47e:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f482:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801f486:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f48a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f48e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f492:	9005      	str	r0, [sp, #20]
 801f494:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f498:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f49c:	2d00      	cmp	r5, #0
 801f49e:	eb06 080a 	add.w	r8, r6, sl
 801f4a2:	db4a      	blt.n	801f53a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f4a4:	45a9      	cmp	r9, r5
 801f4a6:	dd48      	ble.n	801f53a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f4a8:	f1bc 0f00 	cmp.w	ip, #0
 801f4ac:	db43      	blt.n	801f536 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f4ae:	45e6      	cmp	lr, ip
 801f4b0:	dd41      	ble.n	801f536 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f4b2:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f4b6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f4ba:	441e      	add	r6, r3
 801f4bc:	f11c 0001 	adds.w	r0, ip, #1
 801f4c0:	d43e      	bmi.n	801f540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f4c2:	4586      	cmp	lr, r0
 801f4c4:	dd3c      	ble.n	801f540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f4c6:	2a00      	cmp	r2, #0
 801f4c8:	d03a      	beq.n	801f540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f4ca:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f4ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f4d2:	4418      	add	r0, r3
 801f4d4:	3501      	adds	r5, #1
 801f4d6:	d437      	bmi.n	801f548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f4d8:	45a9      	cmp	r9, r5
 801f4da:	dd35      	ble.n	801f548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f4dc:	b3a4      	cbz	r4, 801f548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f4de:	f1bc 0f00 	cmp.w	ip, #0
 801f4e2:	db2f      	blt.n	801f544 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f4e4:	45e6      	cmp	lr, ip
 801f4e6:	dd2d      	ble.n	801f544 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f4e8:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4f0:	441d      	add	r5, r3
 801f4f2:	f11c 0c01 	adds.w	ip, ip, #1
 801f4f6:	d42a      	bmi.n	801f54e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f4f8:	45e6      	cmp	lr, ip
 801f4fa:	dd28      	ble.n	801f54e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f4fc:	b33a      	cbz	r2, 801f54e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f4fe:	44c6      	add	lr, r8
 801f500:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f504:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f508:	4463      	add	r3, ip
 801f50a:	ea6f 0c07 	mvn.w	ip, r7
 801f50e:	2a0f      	cmp	r2, #15
 801f510:	f896 a000 	ldrb.w	sl, [r6]
 801f514:	fa5f fc8c 	uxtb.w	ip, ip
 801f518:	f890 b000 	ldrb.w	fp, [r0]
 801f51c:	f895 9000 	ldrb.w	r9, [r5]
 801f520:	7819      	ldrb	r1, [r3, #0]
 801f522:	d801      	bhi.n	801f528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801f524:	2c0f      	cmp	r4, #15
 801f526:	d914      	bls.n	801f552 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801f528:	4b40      	ldr	r3, [pc, #256]	; (801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f52a:	f240 11a5 	movw	r1, #421	; 0x1a5
 801f52e:	4a40      	ldr	r2, [pc, #256]	; (801f630 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f530:	4840      	ldr	r0, [pc, #256]	; (801f634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801f532:	f006 faa5 	bl	8025a80 <__assert_func>
 801f536:	ae05      	add	r6, sp, #20
 801f538:	e7c0      	b.n	801f4bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801f53a:	a805      	add	r0, sp, #20
 801f53c:	4606      	mov	r6, r0
 801f53e:	e7c9      	b.n	801f4d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f540:	a805      	add	r0, sp, #20
 801f542:	e7c7      	b.n	801f4d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f544:	ad05      	add	r5, sp, #20
 801f546:	e7d4      	b.n	801f4f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801f548:	ab05      	add	r3, sp, #20
 801f54a:	461d      	mov	r5, r3
 801f54c:	e7dd      	b.n	801f50a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f54e:	ab05      	add	r3, sp, #20
 801f550:	e7db      	b.n	801f50a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f552:	b292      	uxth	r2, r2
 801f554:	b2a4      	uxth	r4, r4
 801f556:	fa1f fc8c 	uxth.w	ip, ip
 801f55a:	fb02 f804 	mul.w	r8, r2, r4
 801f55e:	0112      	lsls	r2, r2, #4
 801f560:	b2bf      	uxth	r7, r7
 801f562:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f566:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f56a:	eba2 0208 	sub.w	r2, r2, r8
 801f56e:	b2a4      	uxth	r4, r4
 801f570:	b292      	uxth	r2, r2
 801f572:	ebae 0e04 	sub.w	lr, lr, r4
 801f576:	fb02 fb0b 	mul.w	fp, r2, fp
 801f57a:	fa1f fe8e 	uxth.w	lr, lr
 801f57e:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f582:	fb04 aa09 	mla	sl, r4, r9, sl
 801f586:	fb08 aa01 	mla	sl, r8, r1, sl
 801f58a:	9903      	ldr	r1, [sp, #12]
 801f58c:	fb11 f90c 	smulbb	r9, r1, ip
 801f590:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f594:	9900      	ldr	r1, [sp, #0]
 801f596:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f59a:	fa1f fa8a 	uxth.w	sl, sl
 801f59e:	f10a 0901 	add.w	r9, sl, #1
 801f5a2:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f5a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f5aa:	f881 a000 	strb.w	sl, [r1]
 801f5ae:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f5b2:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f5b6:	fb02 fa0a 	mul.w	sl, r2, sl
 801f5ba:	9902      	ldr	r1, [sp, #8]
 801f5bc:	fb0e aa09 	mla	sl, lr, r9, sl
 801f5c0:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f5c4:	fb04 aa09 	mla	sl, r4, r9, sl
 801f5c8:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f5cc:	fb08 a909 	mla	r9, r8, r9, sl
 801f5d0:	fb11 fa0c 	smulbb	sl, r1, ip
 801f5d4:	9900      	ldr	r1, [sp, #0]
 801f5d6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f5da:	fb09 a907 	mla	r9, r9, r7, sl
 801f5de:	fa1f f989 	uxth.w	r9, r9
 801f5e2:	f109 0a01 	add.w	sl, r9, #1
 801f5e6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f5ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f5ee:	f881 9001 	strb.w	r9, [r1, #1]
 801f5f2:	7880      	ldrb	r0, [r0, #2]
 801f5f4:	78b6      	ldrb	r6, [r6, #2]
 801f5f6:	4342      	muls	r2, r0
 801f5f8:	78a8      	ldrb	r0, [r5, #2]
 801f5fa:	789b      	ldrb	r3, [r3, #2]
 801f5fc:	fb0e 2206 	mla	r2, lr, r6, r2
 801f600:	fb04 2400 	mla	r4, r4, r0, r2
 801f604:	fb08 4803 	mla	r8, r8, r3, r4
 801f608:	9b01      	ldr	r3, [sp, #4]
 801f60a:	fb13 fc0c 	smulbb	ip, r3, ip
 801f60e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f612:	fb08 c707 	mla	r7, r8, r7, ip
 801f616:	b2bf      	uxth	r7, r7
 801f618:	f107 0c01 	add.w	ip, r7, #1
 801f61c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f620:	123f      	asrs	r7, r7, #8
 801f622:	708f      	strb	r7, [r1, #2]
 801f624:	b007      	add	sp, #28
 801f626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f62a:	bf00      	nop
 801f62c:	0802b39d 	.word	0x0802b39d
 801f630:	0802b892 	.word	0x0802b892
 801f634:	0802b466 	.word	0x0802b466

0801f638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f63c:	ed2d 8b08 	vpush	{d8-d11}
 801f640:	b095      	sub	sp, #84	; 0x54
 801f642:	eeb0 aa40 	vmov.f32	s20, s0
 801f646:	eef0 9a60 	vmov.f32	s19, s1
 801f64a:	930a      	str	r3, [sp, #40]	; 0x28
 801f64c:	eeb0 9a41 	vmov.f32	s18, s2
 801f650:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f654:	eeb0 8a62 	vmov.f32	s16, s5
 801f658:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801f65a:	eef0 8a43 	vmov.f32	s17, s6
 801f65e:	930c      	str	r3, [sp, #48]	; 0x30
 801f660:	eef0 ba44 	vmov.f32	s23, s8
 801f664:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f668:	eeb0 ba64 	vmov.f32	s22, s9
 801f66c:	9013      	str	r0, [sp, #76]	; 0x4c
 801f66e:	eef0 aa45 	vmov.f32	s21, s10
 801f672:	9310      	str	r3, [sp, #64]	; 0x40
 801f674:	6860      	ldr	r0, [r4, #4]
 801f676:	910f      	str	r1, [sp, #60]	; 0x3c
 801f678:	9212      	str	r2, [sp, #72]	; 0x48
 801f67a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f67c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801f680:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f684:	fb00 1303 	mla	r3, r0, r3, r1
 801f688:	6821      	ldr	r1, [r4, #0]
 801f68a:	6854      	ldr	r4, [r2, #4]
 801f68c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f690:	18cb      	adds	r3, r1, r3
 801f692:	930b      	str	r3, [sp, #44]	; 0x2c
 801f694:	6813      	ldr	r3, [r2, #0]
 801f696:	930e      	str	r3, [sp, #56]	; 0x38
 801f698:	1d23      	adds	r3, r4, #4
 801f69a:	9309      	str	r3, [sp, #36]	; 0x24
 801f69c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f69e:	43db      	mvns	r3, r3
 801f6a0:	b2db      	uxtb	r3, r3
 801f6a2:	930d      	str	r3, [sp, #52]	; 0x34
 801f6a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	dc03      	bgt.n	801f6b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f6aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	f340 823c 	ble.w	801fb2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	f340 8115 	ble.w	801f8e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801f6ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f6bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f6be:	1412      	asrs	r2, r2, #16
 801f6c0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f6c4:	d431      	bmi.n	801f72a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f6c6:	1c51      	adds	r1, r2, #1
 801f6c8:	428d      	cmp	r5, r1
 801f6ca:	dd31      	ble.n	801f730 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	db2f      	blt.n	801f730 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f6d0:	1c59      	adds	r1, r3, #1
 801f6d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f6d4:	4288      	cmp	r0, r1
 801f6d6:	dd2b      	ble.n	801f730 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6da:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f6dc:	3b01      	subs	r3, #1
 801f6de:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801f6e0:	fb02 1203 	mla	r2, r2, r3, r1
 801f6e4:	1412      	asrs	r2, r2, #16
 801f6e6:	d42d      	bmi.n	801f744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f6e8:	3201      	adds	r2, #1
 801f6ea:	4295      	cmp	r5, r2
 801f6ec:	dd2a      	ble.n	801f744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f6ee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f6f0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f6f2:	fb02 1303 	mla	r3, r2, r3, r1
 801f6f6:	141b      	asrs	r3, r3, #16
 801f6f8:	d424      	bmi.n	801f744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f6fa:	3301      	adds	r3, #1
 801f6fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f6fe:	429a      	cmp	r2, r3
 801f700:	dd20      	ble.n	801f744 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f704:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801f708:	f103 0c03 	add.w	ip, r3, #3
 801f70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f70e:	9311      	str	r3, [sp, #68]	; 0x44
 801f710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f712:	2b00      	cmp	r3, #0
 801f714:	f300 814f 	bgt.w	801f9b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801f718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f71a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f71c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f724:	441a      	add	r2, r3
 801f726:	920b      	str	r2, [sp, #44]	; 0x2c
 801f728:	e0de      	b.n	801f8e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f72a:	1c51      	adds	r1, r2, #1
 801f72c:	f040 80cb 	bne.w	801f8c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f730:	42aa      	cmp	r2, r5
 801f732:	f280 80c8 	bge.w	801f8c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f736:	1c5f      	adds	r7, r3, #1
 801f738:	f2c0 80c5 	blt.w	801f8c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f73c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f73e:	4293      	cmp	r3, r2
 801f740:	f280 80c1 	bge.w	801f8c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f746:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f748:	9311      	str	r3, [sp, #68]	; 0x44
 801f74a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f74c:	2b00      	cmp	r3, #0
 801f74e:	dde3      	ble.n	801f718 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f750:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f752:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f754:	141a      	asrs	r2, r3, #16
 801f756:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f758:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f75a:	1400      	asrs	r0, r0, #16
 801f75c:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f760:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f764:	f100 810e 	bmi.w	801f984 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f768:	1c46      	adds	r6, r0, #1
 801f76a:	42b5      	cmp	r5, r6
 801f76c:	f340 810c 	ble.w	801f988 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f770:	2a00      	cmp	r2, #0
 801f772:	f2c0 8109 	blt.w	801f988 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f776:	1c56      	adds	r6, r2, #1
 801f778:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f77a:	42b4      	cmp	r4, r6
 801f77c:	f340 8104 	ble.w	801f988 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f780:	fb02 0005 	mla	r0, r2, r5, r0
 801f784:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f788:	f814 e000 	ldrb.w	lr, [r4, r0]
 801f78c:	4402      	add	r2, r0
 801f78e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f790:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f794:	eb00 080e 	add.w	r8, r0, lr
 801f798:	2b00      	cmp	r3, #0
 801f79a:	f000 80e4 	beq.w	801f966 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801f79e:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f7a2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f7a6:	4484      	add	ip, r0
 801f7a8:	2900      	cmp	r1, #0
 801f7aa:	f000 80e5 	beq.w	801f978 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801f7ae:	1950      	adds	r0, r2, r5
 801f7b0:	5d52      	ldrb	r2, [r2, r5]
 801f7b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f7b4:	7840      	ldrb	r0, [r0, #1]
 801f7b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f7ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f7be:	4422      	add	r2, r4
 801f7c0:	4420      	add	r0, r4
 801f7c2:	b29b      	uxth	r3, r3
 801f7c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f7c6:	b289      	uxth	r1, r1
 801f7c8:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801f7cc:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f7d0:	fb03 fa01 	mul.w	sl, r3, r1
 801f7d4:	011b      	lsls	r3, r3, #4
 801f7d6:	f89c e000 	ldrb.w	lr, [ip]
 801f7da:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f7de:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f7e2:	eba3 030a 	sub.w	r3, r3, sl
 801f7e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f7e8:	b289      	uxth	r1, r1
 801f7ea:	b29b      	uxth	r3, r3
 801f7ec:	eba9 0901 	sub.w	r9, r9, r1
 801f7f0:	fb03 fe0e 	mul.w	lr, r3, lr
 801f7f4:	fa1f f989 	uxth.w	r9, r9
 801f7f8:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f7fc:	f892 b000 	ldrb.w	fp, [r2]
 801f800:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f804:	f890 b000 	ldrb.w	fp, [r0]
 801f808:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f80c:	f897 b000 	ldrb.w	fp, [r7]
 801f810:	fb1b fb04 	smulbb	fp, fp, r4
 801f814:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f818:	fb0e be06 	mla	lr, lr, r6, fp
 801f81c:	fa1f fe8e 	uxth.w	lr, lr
 801f820:	f10e 0b01 	add.w	fp, lr, #1
 801f824:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801f828:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f82c:	f887 b000 	strb.w	fp, [r7]
 801f830:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f834:	f898 b001 	ldrb.w	fp, [r8, #1]
 801f838:	fb03 fe0e 	mul.w	lr, r3, lr
 801f83c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f840:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f844:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f848:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f84c:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f850:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f854:	fb1b fb04 	smulbb	fp, fp, r4
 801f858:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f85c:	fb0e be06 	mla	lr, lr, r6, fp
 801f860:	fa1f fe8e 	uxth.w	lr, lr
 801f864:	f10e 0b01 	add.w	fp, lr, #1
 801f868:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f86c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f870:	f887 e001 	strb.w	lr, [r7, #1]
 801f874:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f878:	f898 e002 	ldrb.w	lr, [r8, #2]
 801f87c:	fb03 f30c 	mul.w	r3, r3, ip
 801f880:	fb09 330e 	mla	r3, r9, lr, r3
 801f884:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f888:	7882      	ldrb	r2, [r0, #2]
 801f88a:	fb01 310e 	mla	r1, r1, lr, r3
 801f88e:	fb0a 1a02 	mla	sl, sl, r2, r1
 801f892:	78b9      	ldrb	r1, [r7, #2]
 801f894:	fb11 f104 	smulbb	r1, r1, r4
 801f898:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f89c:	fb0a 1606 	mla	r6, sl, r6, r1
 801f8a0:	b2b6      	uxth	r6, r6
 801f8a2:	1c73      	adds	r3, r6, #1
 801f8a4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f8a8:	1236      	asrs	r6, r6, #8
 801f8aa:	70be      	strb	r6, [r7, #2]
 801f8ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f8ae:	3703      	adds	r7, #3
 801f8b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f8b2:	4413      	add	r3, r2
 801f8b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f8b6:	9327      	str	r3, [sp, #156]	; 0x9c
 801f8b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f8ba:	4413      	add	r3, r2
 801f8bc:	9328      	str	r3, [sp, #160]	; 0xa0
 801f8be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f8c0:	3b01      	subs	r3, #1
 801f8c2:	9311      	str	r3, [sp, #68]	; 0x44
 801f8c4:	e741      	b.n	801f74a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801f8c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f8c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f8ca:	4413      	add	r3, r2
 801f8cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f8ce:	9327      	str	r3, [sp, #156]	; 0x9c
 801f8d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f8d2:	4413      	add	r3, r2
 801f8d4:	9328      	str	r3, [sp, #160]	; 0xa0
 801f8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8d8:	3b01      	subs	r3, #1
 801f8da:	930a      	str	r3, [sp, #40]	; 0x28
 801f8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8de:	3303      	adds	r3, #3
 801f8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8e2:	e6e6      	b.n	801f6b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f8e4:	f47f aef8 	bne.w	801f6d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f8e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	f340 811d 	ble.w	801fb2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f8f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f8f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8f6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f8fa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f8fe:	eef0 6a48 	vmov.f32	s13, s16
 801f902:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f906:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f90a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f90e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f912:	eef0 6a68 	vmov.f32	s13, s17
 801f916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f91a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f91e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f922:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f926:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f92a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f92e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f932:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f936:	ee18 2a10 	vmov	r2, s16
 801f93a:	eeb0 8a47 	vmov.f32	s16, s14
 801f93e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f942:	ee18 2a90 	vmov	r2, s17
 801f946:	9329      	str	r3, [sp, #164]	; 0xa4
 801f948:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f94a:	eef0 8a67 	vmov.f32	s17, s15
 801f94e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f952:	932a      	str	r3, [sp, #168]	; 0xa8
 801f954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f956:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f958:	3b01      	subs	r3, #1
 801f95a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f95c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f95e:	bf08      	it	eq
 801f960:	4613      	moveq	r3, r2
 801f962:	930a      	str	r3, [sp, #40]	; 0x28
 801f964:	e69e      	b.n	801f6a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f966:	b151      	cbz	r1, 801f97e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801f968:	5d52      	ldrb	r2, [r2, r5]
 801f96a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f96c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f970:	4402      	add	r2, r0
 801f972:	4640      	mov	r0, r8
 801f974:	46c4      	mov	ip, r8
 801f976:	e724      	b.n	801f7c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f978:	4640      	mov	r0, r8
 801f97a:	4642      	mov	r2, r8
 801f97c:	e721      	b.n	801f7c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f97e:	4640      	mov	r0, r8
 801f980:	4642      	mov	r2, r8
 801f982:	e7f7      	b.n	801f974 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801f984:	1c46      	adds	r6, r0, #1
 801f986:	d191      	bne.n	801f8ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f988:	4285      	cmp	r5, r0
 801f98a:	dd8f      	ble.n	801f8ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f98c:	1c54      	adds	r4, r2, #1
 801f98e:	db8d      	blt.n	801f8ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f990:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f992:	4294      	cmp	r4, r2
 801f994:	dd8a      	ble.n	801f8ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f996:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f998:	9002      	str	r0, [sp, #8]
 801f99a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f99c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801f9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f9a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f9a4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f9a8:	e9cd 5300 	strd	r5, r3, [sp]
 801f9ac:	4639      	mov	r1, r7
 801f9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9b0:	f7ff fd52 	bl	801f458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f9b4:	e77a      	b.n	801f8ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f9b6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f9b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f9ba:	1410      	asrs	r0, r2, #16
 801f9bc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f9c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f9c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f9c4:	1412      	asrs	r2, r2, #16
 801f9c6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f9ca:	fb05 2000 	mla	r0, r5, r0, r2
 801f9ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f9d0:	f814 8000 	ldrb.w	r8, [r4, r0]
 801f9d4:	4402      	add	r2, r0
 801f9d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f9dc:	eb00 0708 	add.w	r7, r0, r8
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	f000 8093 	beq.w	801fb0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f9e6:	7856      	ldrb	r6, [r2, #1]
 801f9e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f9ec:	4406      	add	r6, r0
 801f9ee:	2900      	cmp	r1, #0
 801f9f0:	f000 8095 	beq.w	801fb1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f9f4:	1950      	adds	r0, r2, r5
 801f9f6:	5d52      	ldrb	r2, [r2, r5]
 801f9f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f9fa:	7840      	ldrb	r0, [r0, #1]
 801f9fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fa04:	4422      	add	r2, r4
 801fa06:	4420      	add	r0, r4
 801fa08:	b29b      	uxth	r3, r3
 801fa0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fa0c:	b289      	uxth	r1, r1
 801fa0e:	f10c 0c03 	add.w	ip, ip, #3
 801fa12:	f814 b008 	ldrb.w	fp, [r4, r8]
 801fa16:	fb03 f901 	mul.w	r9, r3, r1
 801fa1a:	011b      	lsls	r3, r3, #4
 801fa1c:	f896 8000 	ldrb.w	r8, [r6]
 801fa20:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fa24:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fa28:	eba3 0309 	sub.w	r3, r3, r9
 801fa2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fa2e:	b289      	uxth	r1, r1
 801fa30:	b29b      	uxth	r3, r3
 801fa32:	ebae 0e01 	sub.w	lr, lr, r1
 801fa36:	fb03 f808 	mul.w	r8, r3, r8
 801fa3a:	fa1f fe8e 	uxth.w	lr, lr
 801fa3e:	fb0e 880b 	mla	r8, lr, fp, r8
 801fa42:	f892 b000 	ldrb.w	fp, [r2]
 801fa46:	fb01 880b 	mla	r8, r1, fp, r8
 801fa4a:	f890 b000 	ldrb.w	fp, [r0]
 801fa4e:	fb09 880b 	mla	r8, r9, fp, r8
 801fa52:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801fa56:	fb1b fb04 	smulbb	fp, fp, r4
 801fa5a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fa5e:	fb08 b80a 	mla	r8, r8, sl, fp
 801fa62:	fa1f f888 	uxth.w	r8, r8
 801fa66:	f108 0b01 	add.w	fp, r8, #1
 801fa6a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fa6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fa72:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801fa76:	f896 8001 	ldrb.w	r8, [r6, #1]
 801fa7a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fa7e:	fb03 f808 	mul.w	r8, r3, r8
 801fa82:	fb0e 880b 	mla	r8, lr, fp, r8
 801fa86:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fa8a:	fb01 880b 	mla	r8, r1, fp, r8
 801fa8e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fa92:	fb09 880b 	mla	r8, r9, fp, r8
 801fa96:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801fa9a:	fb1b fb04 	smulbb	fp, fp, r4
 801fa9e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801faa2:	fb08 b80a 	mla	r8, r8, sl, fp
 801faa6:	fa1f f888 	uxth.w	r8, r8
 801faaa:	f108 0b01 	add.w	fp, r8, #1
 801faae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fab2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fab6:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801faba:	78b6      	ldrb	r6, [r6, #2]
 801fabc:	78bf      	ldrb	r7, [r7, #2]
 801fabe:	4373      	muls	r3, r6
 801fac0:	7896      	ldrb	r6, [r2, #2]
 801fac2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fac4:	fb0e 3307 	mla	r3, lr, r7, r3
 801fac8:	fb01 3306 	mla	r3, r1, r6, r3
 801facc:	7886      	ldrb	r6, [r0, #2]
 801face:	fb09 3906 	mla	r9, r9, r6, r3
 801fad2:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801fad6:	fb13 f304 	smulbb	r3, r3, r4
 801fada:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801fade:	fb09 390a 	mla	r9, r9, sl, r3
 801fae2:	fa1f f989 	uxth.w	r9, r9
 801fae6:	f109 0301 	add.w	r3, r9, #1
 801faea:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801faee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801faf0:	4413      	add	r3, r2
 801faf2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801faf4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801faf8:	9327      	str	r3, [sp, #156]	; 0x9c
 801fafa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fafc:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801fb00:	4413      	add	r3, r2
 801fb02:	9328      	str	r3, [sp, #160]	; 0xa0
 801fb04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fb06:	3b01      	subs	r3, #1
 801fb08:	9311      	str	r3, [sp, #68]	; 0x44
 801fb0a:	e601      	b.n	801f710 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801fb0c:	b151      	cbz	r1, 801fb24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801fb0e:	5d52      	ldrb	r2, [r2, r5]
 801fb10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fb12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb16:	4402      	add	r2, r0
 801fb18:	4638      	mov	r0, r7
 801fb1a:	463e      	mov	r6, r7
 801fb1c:	e774      	b.n	801fa08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801fb1e:	4638      	mov	r0, r7
 801fb20:	463a      	mov	r2, r7
 801fb22:	e771      	b.n	801fa08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801fb24:	4638      	mov	r0, r7
 801fb26:	463a      	mov	r2, r7
 801fb28:	e7f7      	b.n	801fb1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801fb2a:	b015      	add	sp, #84	; 0x54
 801fb2c:	ecbd 8b08 	vpop	{d8-d11}
 801fb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801fb34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb38:	780d      	ldrb	r5, [r1, #0]
 801fb3a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801fb3e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801fb42:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801fb46:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801fb4a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801fb4e:	f891 9001 	ldrb.w	r9, [r1, #1]
 801fb52:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801fb56:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801fb5a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801fb5e:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801fb62:	9501      	str	r5, [sp, #4]
 801fb64:	fb06 470c 	mla	r7, r6, ip, r4
 801fb68:	2e00      	cmp	r6, #0
 801fb6a:	eb02 0e07 	add.w	lr, r2, r7
 801fb6e:	db46      	blt.n	801fbfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801fb70:	45b0      	cmp	r8, r6
 801fb72:	dd44      	ble.n	801fbfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801fb74:	2c00      	cmp	r4, #0
 801fb76:	db40      	blt.n	801fbfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801fb78:	45a4      	cmp	ip, r4
 801fb7a:	dd3e      	ble.n	801fbfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801fb7c:	5dd7      	ldrb	r7, [r2, r7]
 801fb7e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb82:	441f      	add	r7, r3
 801fb84:	1c62      	adds	r2, r4, #1
 801fb86:	d43d      	bmi.n	801fc04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801fb88:	4594      	cmp	ip, r2
 801fb8a:	dd3b      	ble.n	801fc04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801fb8c:	f1ba 0f00 	cmp.w	sl, #0
 801fb90:	d038      	beq.n	801fc04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801fb92:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801fb96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb9a:	441d      	add	r5, r3
 801fb9c:	3601      	adds	r6, #1
 801fb9e:	d435      	bmi.n	801fc0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801fba0:	45b0      	cmp	r8, r6
 801fba2:	dd33      	ble.n	801fc0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801fba4:	b390      	cbz	r0, 801fc0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801fba6:	2c00      	cmp	r4, #0
 801fba8:	db2e      	blt.n	801fc08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801fbaa:	45a4      	cmp	ip, r4
 801fbac:	dd2c      	ble.n	801fc08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801fbae:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801fbb2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fbb6:	441e      	add	r6, r3
 801fbb8:	1c62      	adds	r2, r4, #1
 801fbba:	d42a      	bmi.n	801fc12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801fbbc:	4594      	cmp	ip, r2
 801fbbe:	dd28      	ble.n	801fc12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801fbc0:	f1ba 0f00 	cmp.w	sl, #0
 801fbc4:	d025      	beq.n	801fc12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801fbc6:	44f4      	add	ip, lr
 801fbc8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fbcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fbd0:	4413      	add	r3, r2
 801fbd2:	f1ba 0f0f 	cmp.w	sl, #15
 801fbd6:	f897 8000 	ldrb.w	r8, [r7]
 801fbda:	f895 9000 	ldrb.w	r9, [r5]
 801fbde:	f896 e000 	ldrb.w	lr, [r6]
 801fbe2:	f893 c000 	ldrb.w	ip, [r3]
 801fbe6:	d801      	bhi.n	801fbec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801fbe8:	280f      	cmp	r0, #15
 801fbea:	d914      	bls.n	801fc16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801fbec:	4b29      	ldr	r3, [pc, #164]	; (801fc94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801fbee:	f240 11a5 	movw	r1, #421	; 0x1a5
 801fbf2:	4a29      	ldr	r2, [pc, #164]	; (801fc98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801fbf4:	4829      	ldr	r0, [pc, #164]	; (801fc9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801fbf6:	f005 ff43 	bl	8025a80 <__assert_func>
 801fbfa:	af01      	add	r7, sp, #4
 801fbfc:	e7c2      	b.n	801fb84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801fbfe:	ad01      	add	r5, sp, #4
 801fc00:	462f      	mov	r7, r5
 801fc02:	e7cb      	b.n	801fb9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801fc04:	ad01      	add	r5, sp, #4
 801fc06:	e7c9      	b.n	801fb9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801fc08:	ae01      	add	r6, sp, #4
 801fc0a:	e7d5      	b.n	801fbb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801fc0c:	ab01      	add	r3, sp, #4
 801fc0e:	461e      	mov	r6, r3
 801fc10:	e7df      	b.n	801fbd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801fc12:	ab01      	add	r3, sp, #4
 801fc14:	e7dd      	b.n	801fbd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801fc16:	fa1f f48a 	uxth.w	r4, sl
 801fc1a:	b280      	uxth	r0, r0
 801fc1c:	fb04 fa00 	mul.w	sl, r4, r0
 801fc20:	0124      	lsls	r4, r4, #4
 801fc22:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fc26:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801fc2a:	b282      	uxth	r2, r0
 801fc2c:	eba4 000a 	sub.w	r0, r4, sl
 801fc30:	ebab 0b02 	sub.w	fp, fp, r2
 801fc34:	b280      	uxth	r0, r0
 801fc36:	fa1f fb8b 	uxth.w	fp, fp
 801fc3a:	fb00 f909 	mul.w	r9, r0, r9
 801fc3e:	fb0b 9808 	mla	r8, fp, r8, r9
 801fc42:	fb02 8e0e 	mla	lr, r2, lr, r8
 801fc46:	fb0a ec0c 	mla	ip, sl, ip, lr
 801fc4a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fc4e:	f881 c000 	strb.w	ip, [r1]
 801fc52:	786c      	ldrb	r4, [r5, #1]
 801fc54:	f897 c001 	ldrb.w	ip, [r7, #1]
 801fc58:	4344      	muls	r4, r0
 801fc5a:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801fc5e:	7874      	ldrb	r4, [r6, #1]
 801fc60:	fb02 cc04 	mla	ip, r2, r4, ip
 801fc64:	785c      	ldrb	r4, [r3, #1]
 801fc66:	fb0a c404 	mla	r4, sl, r4, ip
 801fc6a:	1224      	asrs	r4, r4, #8
 801fc6c:	704c      	strb	r4, [r1, #1]
 801fc6e:	78ad      	ldrb	r5, [r5, #2]
 801fc70:	78bc      	ldrb	r4, [r7, #2]
 801fc72:	4368      	muls	r0, r5
 801fc74:	fb0b 0b04 	mla	fp, fp, r4, r0
 801fc78:	78b0      	ldrb	r0, [r6, #2]
 801fc7a:	fb02 b000 	mla	r0, r2, r0, fp
 801fc7e:	789a      	ldrb	r2, [r3, #2]
 801fc80:	fb0a 0a02 	mla	sl, sl, r2, r0
 801fc84:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fc88:	f881 a002 	strb.w	sl, [r1, #2]
 801fc8c:	b003      	add	sp, #12
 801fc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc92:	bf00      	nop
 801fc94:	0802b39d 	.word	0x0802b39d
 801fc98:	0802b892 	.word	0x0802b892
 801fc9c:	0802b466 	.word	0x0802b466

0801fca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fca4:	ed2d 8b0a 	vpush	{d8-d12}
 801fca8:	b08f      	sub	sp, #60	; 0x3c
 801fcaa:	eeb0 aa40 	vmov.f32	s20, s0
 801fcae:	eef0 9a60 	vmov.f32	s19, s1
 801fcb2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801fcb4:	eeb0 9a41 	vmov.f32	s18, s2
 801fcb8:	9307      	str	r3, [sp, #28]
 801fcba:	eeb0 8a62 	vmov.f32	s16, s5
 801fcbe:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801fcc2:	eef0 8a43 	vmov.f32	s17, s6
 801fcc6:	900d      	str	r0, [sp, #52]	; 0x34
 801fcc8:	eeb0 ca44 	vmov.f32	s24, s8
 801fccc:	6860      	ldr	r0, [r4, #4]
 801fcce:	eef0 ba64 	vmov.f32	s23, s9
 801fcd2:	9309      	str	r3, [sp, #36]	; 0x24
 801fcd4:	eeb0 ba45 	vmov.f32	s22, s10
 801fcd8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801fcdc:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801fce0:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801fce4:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801fce8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fcea:	fb00 1303 	mla	r3, r0, r3, r1
 801fcee:	6821      	ldr	r1, [r4, #0]
 801fcf0:	6854      	ldr	r4, [r2, #4]
 801fcf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fcf6:	3404      	adds	r4, #4
 801fcf8:	18cb      	adds	r3, r1, r3
 801fcfa:	9308      	str	r3, [sp, #32]
 801fcfc:	6813      	ldr	r3, [r2, #0]
 801fcfe:	930a      	str	r3, [sp, #40]	; 0x28
 801fd00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	dc03      	bgt.n	801fd0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fd06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	f340 81d2 	ble.w	80200b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fd0e:	9b07      	ldr	r3, [sp, #28]
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	f340 80e3 	ble.w	801fedc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801fd16:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fd18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd1a:	1412      	asrs	r2, r2, #16
 801fd1c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fd20:	d42f      	bmi.n	801fd82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801fd22:	1c51      	adds	r1, r2, #1
 801fd24:	428d      	cmp	r5, r1
 801fd26:	dd2f      	ble.n	801fd88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	db2d      	blt.n	801fd88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fd2c:	1c59      	adds	r1, r3, #1
 801fd2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd30:	4288      	cmp	r0, r1
 801fd32:	dd29      	ble.n	801fd88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fd34:	9b07      	ldr	r3, [sp, #28]
 801fd36:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fd38:	3b01      	subs	r3, #1
 801fd3a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801fd3c:	fb02 1203 	mla	r2, r2, r3, r1
 801fd40:	1412      	asrs	r2, r2, #16
 801fd42:	d42b      	bmi.n	801fd9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fd44:	3201      	adds	r2, #1
 801fd46:	4295      	cmp	r5, r2
 801fd48:	dd28      	ble.n	801fd9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fd4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fd4c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fd4e:	fb02 1303 	mla	r3, r2, r3, r1
 801fd52:	141b      	asrs	r3, r3, #16
 801fd54:	d422      	bmi.n	801fd9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fd56:	3301      	adds	r3, #1
 801fd58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd5a:	429a      	cmp	r2, r3
 801fd5c:	dd1e      	ble.n	801fd9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fd5e:	9b08      	ldr	r3, [sp, #32]
 801fd60:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fd64:	f103 0803 	add.w	r8, r3, #3
 801fd68:	f1ba 0f00 	cmp.w	sl, #0
 801fd6c:	f300 8119 	bgt.w	801ffa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801fd70:	9b07      	ldr	r3, [sp, #28]
 801fd72:	9a08      	ldr	r2, [sp, #32]
 801fd74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd7c:	441a      	add	r2, r3
 801fd7e:	9208      	str	r2, [sp, #32]
 801fd80:	e0ae      	b.n	801fee0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801fd82:	1c51      	adds	r1, r2, #1
 801fd84:	f040 809b 	bne.w	801febe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fd88:	42aa      	cmp	r2, r5
 801fd8a:	f280 8098 	bge.w	801febe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fd8e:	1c5a      	adds	r2, r3, #1
 801fd90:	f2c0 8095 	blt.w	801febe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fd94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd96:	4293      	cmp	r3, r2
 801fd98:	f280 8091 	bge.w	801febe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fd9c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801fda0:	f1bb 0f00 	cmp.w	fp, #0
 801fda4:	dde4      	ble.n	801fd70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fda6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fda8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fdaa:	141a      	asrs	r2, r3, #16
 801fdac:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fdae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fdb0:	1400      	asrs	r0, r0, #16
 801fdb2:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801fdb6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fdba:	f100 80dc 	bmi.w	801ff76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801fdbe:	1c47      	adds	r7, r0, #1
 801fdc0:	42bd      	cmp	r5, r7
 801fdc2:	f340 80da 	ble.w	801ff7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fdc6:	2a00      	cmp	r2, #0
 801fdc8:	f2c0 80d7 	blt.w	801ff7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fdcc:	f102 0c01 	add.w	ip, r2, #1
 801fdd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fdd2:	4567      	cmp	r7, ip
 801fdd4:	f340 80d1 	ble.w	801ff7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fdd8:	fb02 0005 	mla	r0, r2, r5, r0
 801fddc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fdde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fde0:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fde4:	4402      	add	r2, r0
 801fde6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fdea:	eb04 0c08 	add.w	ip, r4, r8
 801fdee:	2b00      	cmp	r3, #0
 801fdf0:	f000 80b3 	beq.w	801ff5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801fdf4:	7857      	ldrb	r7, [r2, #1]
 801fdf6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fdfa:	4427      	add	r7, r4
 801fdfc:	2900      	cmp	r1, #0
 801fdfe:	f000 80b4 	beq.w	801ff6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801fe02:	1950      	adds	r0, r2, r5
 801fe04:	5d52      	ldrb	r2, [r2, r5]
 801fe06:	7840      	ldrb	r0, [r0, #1]
 801fe08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fe10:	4422      	add	r2, r4
 801fe12:	4420      	add	r0, r4
 801fe14:	b29b      	uxth	r3, r3
 801fe16:	f814 a008 	ldrb.w	sl, [r4, r8]
 801fe1a:	b289      	uxth	r1, r1
 801fe1c:	f897 8000 	ldrb.w	r8, [r7]
 801fe20:	fb03 f901 	mul.w	r9, r3, r1
 801fe24:	011b      	lsls	r3, r3, #4
 801fe26:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fe2a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fe2e:	eba3 0309 	sub.w	r3, r3, r9
 801fe32:	b289      	uxth	r1, r1
 801fe34:	b29b      	uxth	r3, r3
 801fe36:	ebae 0e01 	sub.w	lr, lr, r1
 801fe3a:	fb03 f808 	mul.w	r8, r3, r8
 801fe3e:	fa1f fe8e 	uxth.w	lr, lr
 801fe42:	fb0e 880a 	mla	r8, lr, sl, r8
 801fe46:	f892 a000 	ldrb.w	sl, [r2]
 801fe4a:	fb01 880a 	mla	r8, r1, sl, r8
 801fe4e:	f890 a000 	ldrb.w	sl, [r0]
 801fe52:	fb09 880a 	mla	r8, r9, sl, r8
 801fe56:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fe5a:	f886 8000 	strb.w	r8, [r6]
 801fe5e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fe62:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fe66:	fb03 f808 	mul.w	r8, r3, r8
 801fe6a:	fb0e 880a 	mla	r8, lr, sl, r8
 801fe6e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fe72:	fb01 880a 	mla	r8, r1, sl, r8
 801fe76:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fe7a:	fb09 880a 	mla	r8, r9, sl, r8
 801fe7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fe82:	f886 8001 	strb.w	r8, [r6, #1]
 801fe86:	78bf      	ldrb	r7, [r7, #2]
 801fe88:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fe8c:	437b      	muls	r3, r7
 801fe8e:	7892      	ldrb	r2, [r2, #2]
 801fe90:	fb0e 330c 	mla	r3, lr, ip, r3
 801fe94:	fb01 3102 	mla	r1, r1, r2, r3
 801fe98:	7882      	ldrb	r2, [r0, #2]
 801fe9a:	fb09 1902 	mla	r9, r9, r2, r1
 801fe9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fea2:	f886 9002 	strb.w	r9, [r6, #2]
 801fea6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fea8:	3603      	adds	r6, #3
 801feaa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801feac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801feb0:	4413      	add	r3, r2
 801feb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801feb4:	9323      	str	r3, [sp, #140]	; 0x8c
 801feb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801feb8:	4413      	add	r3, r2
 801feba:	9324      	str	r3, [sp, #144]	; 0x90
 801febc:	e770      	b.n	801fda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801febe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fec0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fec2:	4413      	add	r3, r2
 801fec4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fec6:	9323      	str	r3, [sp, #140]	; 0x8c
 801fec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801feca:	4413      	add	r3, r2
 801fecc:	9324      	str	r3, [sp, #144]	; 0x90
 801fece:	9b07      	ldr	r3, [sp, #28]
 801fed0:	3b01      	subs	r3, #1
 801fed2:	9307      	str	r3, [sp, #28]
 801fed4:	9b08      	ldr	r3, [sp, #32]
 801fed6:	3303      	adds	r3, #3
 801fed8:	9308      	str	r3, [sp, #32]
 801feda:	e718      	b.n	801fd0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fedc:	f47f af2a 	bne.w	801fd34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	f340 80e5 	ble.w	80200b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fee8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801feec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801feee:	ee79 9aab 	vadd.f32	s19, s19, s23
 801fef2:	eef0 6a48 	vmov.f32	s13, s16
 801fef6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801fefa:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801fefe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff02:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ff06:	eef0 6a68 	vmov.f32	s13, s17
 801ff0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff0e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801ff12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ff16:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ff1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ff1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ff22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ff26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ff2a:	ee18 2a10 	vmov	r2, s16
 801ff2e:	eeb0 8a47 	vmov.f32	s16, s14
 801ff32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff36:	ee18 2a90 	vmov	r2, s17
 801ff3a:	9325      	str	r3, [sp, #148]	; 0x94
 801ff3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ff3e:	eef0 8a67 	vmov.f32	s17, s15
 801ff42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff46:	9326      	str	r3, [sp, #152]	; 0x98
 801ff48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ff4c:	3b01      	subs	r3, #1
 801ff4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ff50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ff52:	bf08      	it	eq
 801ff54:	4613      	moveq	r3, r2
 801ff56:	9307      	str	r3, [sp, #28]
 801ff58:	e6d2      	b.n	801fd00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ff5a:	b149      	cbz	r1, 801ff70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801ff5c:	5d52      	ldrb	r2, [r2, r5]
 801ff5e:	4660      	mov	r0, ip
 801ff60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ff64:	4422      	add	r2, r4
 801ff66:	4667      	mov	r7, ip
 801ff68:	e754      	b.n	801fe14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801ff6a:	4660      	mov	r0, ip
 801ff6c:	4662      	mov	r2, ip
 801ff6e:	e751      	b.n	801fe14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801ff70:	4660      	mov	r0, ip
 801ff72:	4662      	mov	r2, ip
 801ff74:	e7f7      	b.n	801ff66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801ff76:	1c47      	adds	r7, r0, #1
 801ff78:	d195      	bne.n	801fea6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801ff7a:	4285      	cmp	r5, r0
 801ff7c:	dd93      	ble.n	801fea6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801ff7e:	1c57      	adds	r7, r2, #1
 801ff80:	db91      	blt.n	801fea6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801ff82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ff84:	4297      	cmp	r7, r2
 801ff86:	dd8e      	ble.n	801fea6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801ff88:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801ff8c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801ff90:	e9cd 5700 	strd	r5, r7, [sp]
 801ff94:	4623      	mov	r3, r4
 801ff96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ff98:	4631      	mov	r1, r6
 801ff9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ff9c:	f7ff fdca 	bl	801fb34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801ffa0:	e781      	b.n	801fea6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801ffa2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ffa4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ffa6:	1410      	asrs	r0, r2, #16
 801ffa8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ffac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ffae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ffb0:	1412      	asrs	r2, r2, #16
 801ffb2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ffb6:	fb05 2000 	mla	r0, r5, r0, r2
 801ffba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ffbc:	f816 e000 	ldrb.w	lr, [r6, r0]
 801ffc0:	4402      	add	r2, r0
 801ffc2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ffc6:	eb04 070e 	add.w	r7, r4, lr
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d063      	beq.n	8020096 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801ffce:	7856      	ldrb	r6, [r2, #1]
 801ffd0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ffd4:	4426      	add	r6, r4
 801ffd6:	2900      	cmp	r1, #0
 801ffd8:	d065      	beq.n	80200a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801ffda:	1950      	adds	r0, r2, r5
 801ffdc:	5d52      	ldrb	r2, [r2, r5]
 801ffde:	7840      	ldrb	r0, [r0, #1]
 801ffe0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ffe4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ffe8:	4422      	add	r2, r4
 801ffea:	4420      	add	r0, r4
 801ffec:	b29b      	uxth	r3, r3
 801ffee:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fff2:	b289      	uxth	r1, r1
 801fff4:	f896 e000 	ldrb.w	lr, [r6]
 801fff8:	f108 0803 	add.w	r8, r8, #3
 801fffc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020000:	fb03 f901 	mul.w	r9, r3, r1
 8020004:	011b      	lsls	r3, r3, #4
 8020006:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802000a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802000e:	eba3 0309 	sub.w	r3, r3, r9
 8020012:	b289      	uxth	r1, r1
 8020014:	b29b      	uxth	r3, r3
 8020016:	ebac 0c01 	sub.w	ip, ip, r1
 802001a:	fb03 fe0e 	mul.w	lr, r3, lr
 802001e:	fa1f fc8c 	uxth.w	ip, ip
 8020022:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020026:	f892 b000 	ldrb.w	fp, [r2]
 802002a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802002e:	f890 b000 	ldrb.w	fp, [r0]
 8020032:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020036:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802003a:	f808 ec06 	strb.w	lr, [r8, #-6]
 802003e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020042:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020046:	fb03 fe0e 	mul.w	lr, r3, lr
 802004a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802004e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020052:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020056:	f890 b001 	ldrb.w	fp, [r0, #1]
 802005a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802005e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020062:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020066:	78b6      	ldrb	r6, [r6, #2]
 8020068:	78bf      	ldrb	r7, [r7, #2]
 802006a:	4373      	muls	r3, r6
 802006c:	7896      	ldrb	r6, [r2, #2]
 802006e:	7882      	ldrb	r2, [r0, #2]
 8020070:	fb0c 3307 	mla	r3, ip, r7, r3
 8020074:	fb01 3306 	mla	r3, r1, r6, r3
 8020078:	fb09 3902 	mla	r9, r9, r2, r3
 802007c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802007e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020080:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020084:	4413      	add	r3, r2
 8020086:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020088:	f808 9c04 	strb.w	r9, [r8, #-4]
 802008c:	9323      	str	r3, [sp, #140]	; 0x8c
 802008e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020090:	4413      	add	r3, r2
 8020092:	9324      	str	r3, [sp, #144]	; 0x90
 8020094:	e668      	b.n	801fd68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8020096:	b149      	cbz	r1, 80200ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8020098:	5d52      	ldrb	r2, [r2, r5]
 802009a:	4638      	mov	r0, r7
 802009c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80200a0:	4422      	add	r2, r4
 80200a2:	463e      	mov	r6, r7
 80200a4:	e7a2      	b.n	801ffec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80200a6:	4638      	mov	r0, r7
 80200a8:	463a      	mov	r2, r7
 80200aa:	e79f      	b.n	801ffec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80200ac:	4638      	mov	r0, r7
 80200ae:	463a      	mov	r2, r7
 80200b0:	e7f7      	b.n	80200a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 80200b2:	b00f      	add	sp, #60	; 0x3c
 80200b4:	ecbd 8b0a 	vpop	{d8-d12}
 80200b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80200bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200c0:	b087      	sub	sp, #28
 80200c2:	7888      	ldrb	r0, [r1, #2]
 80200c4:	9002      	str	r0, [sp, #8]
 80200c6:	7848      	ldrb	r0, [r1, #1]
 80200c8:	9e02      	ldr	r6, [sp, #8]
 80200ca:	9003      	str	r0, [sp, #12]
 80200cc:	7808      	ldrb	r0, [r1, #0]
 80200ce:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80200d2:	9004      	str	r0, [sp, #16]
 80200d4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80200d8:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80200dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80200e0:	9e03      	ldr	r6, [sp, #12]
 80200e2:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 80200e6:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80200ea:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80200ee:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 80200f2:	fb04 7508 	mla	r5, r4, r8, r7
 80200f6:	2c00      	cmp	r4, #0
 80200f8:	eb02 0905 	add.w	r9, r2, r5
 80200fc:	db45      	blt.n	802018a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 80200fe:	45a2      	cmp	sl, r4
 8020100:	dd43      	ble.n	802018a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8020102:	2f00      	cmp	r7, #0
 8020104:	db3f      	blt.n	8020186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8020106:	45b8      	cmp	r8, r7
 8020108:	dd3d      	ble.n	8020186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 802010a:	5d52      	ldrb	r2, [r2, r5]
 802010c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020110:	1c7a      	adds	r2, r7, #1
 8020112:	d43d      	bmi.n	8020190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8020114:	4590      	cmp	r8, r2
 8020116:	dd3b      	ble.n	8020190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8020118:	f1bc 0f00 	cmp.w	ip, #0
 802011c:	d038      	beq.n	8020190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 802011e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020122:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020126:	3401      	adds	r4, #1
 8020128:	d436      	bmi.n	8020198 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 802012a:	45a2      	cmp	sl, r4
 802012c:	dd34      	ble.n	8020198 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 802012e:	f1be 0f00 	cmp.w	lr, #0
 8020132:	d031      	beq.n	8020198 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8020134:	2f00      	cmp	r7, #0
 8020136:	db2d      	blt.n	8020194 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8020138:	45b8      	cmp	r8, r7
 802013a:	dd2b      	ble.n	8020194 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 802013c:	f819 2008 	ldrb.w	r2, [r9, r8]
 8020140:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020144:	3701      	adds	r7, #1
 8020146:	d409      	bmi.n	802015c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020148:	45b8      	cmp	r8, r7
 802014a:	dd07      	ble.n	802015c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 802014c:	f1bc 0f00 	cmp.w	ip, #0
 8020150:	d004      	beq.n	802015c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020152:	44c8      	add	r8, r9
 8020154:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020158:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802015c:	f1bc 0f0f 	cmp.w	ip, #15
 8020160:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020164:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8020168:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802016c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020170:	d802      	bhi.n	8020178 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8020172:	f1be 0f0f 	cmp.w	lr, #15
 8020176:	d911      	bls.n	802019c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8020178:	4b77      	ldr	r3, [pc, #476]	; (8020358 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 802017a:	f240 11a5 	movw	r1, #421	; 0x1a5
 802017e:	4a77      	ldr	r2, [pc, #476]	; (802035c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8020180:	4877      	ldr	r0, [pc, #476]	; (8020360 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8020182:	f005 fc7d 	bl	8025a80 <__assert_func>
 8020186:	4606      	mov	r6, r0
 8020188:	e7c2      	b.n	8020110 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 802018a:	4605      	mov	r5, r0
 802018c:	4606      	mov	r6, r0
 802018e:	e7ca      	b.n	8020126 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8020190:	4605      	mov	r5, r0
 8020192:	e7c8      	b.n	8020126 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8020194:	4604      	mov	r4, r0
 8020196:	e7d5      	b.n	8020144 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8020198:	4604      	mov	r4, r0
 802019a:	e7df      	b.n	802015c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 802019c:	fa1f fc8c 	uxth.w	ip, ip
 80201a0:	fa1f f28e 	uxth.w	r2, lr
 80201a4:	fb02 fe0c 	mul.w	lr, r2, ip
 80201a8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80201ac:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 80201b0:	ebac 070e 	sub.w	r7, ip, lr
 80201b4:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80201b8:	b292      	uxth	r2, r2
 80201ba:	b2bf      	uxth	r7, r7
 80201bc:	1a9b      	subs	r3, r3, r2
 80201be:	fb07 fc0a 	mul.w	ip, r7, sl
 80201c2:	b29b      	uxth	r3, r3
 80201c4:	fb03 cc0b 	mla	ip, r3, fp, ip
 80201c8:	9301      	str	r3, [sp, #4]
 80201ca:	fb02 cc09 	mla	ip, r2, r9, ip
 80201ce:	fb0e cc08 	mla	ip, lr, r8, ip
 80201d2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80201d6:	9305      	str	r3, [sp, #20]
 80201d8:	2b00      	cmp	r3, #0
 80201da:	f000 80b9 	beq.w	8020350 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 80201de:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80201e2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80201e6:	fb0b fc0c 	mul.w	ip, fp, ip
 80201ea:	fb0b f606 	mul.w	r6, fp, r6
 80201ee:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80201f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201f6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80201fa:	44dc      	add	ip, fp
 80201fc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020200:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020204:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020208:	fb0a fb0b 	mul.w	fp, sl, fp
 802020c:	fb0a fa05 	mul.w	sl, sl, r5
 8020210:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020214:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020218:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 802021c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020220:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020224:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020228:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 802022c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020230:	0a36      	lsrs	r6, r6, #8
 8020232:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020236:	44dc      	add	ip, fp
 8020238:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802023c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020240:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020244:	fb09 fb0b 	mul.w	fp, r9, fp
 8020248:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802024c:	fb09 f904 	mul.w	r9, r9, r4
 8020250:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020254:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8020258:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802025c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020260:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020264:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020268:	fb0c fc07 	mul.w	ip, ip, r7
 802026c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020270:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8020274:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020278:	445d      	add	r5, fp
 802027a:	fb08 f404 	mul.w	r4, r8, r4
 802027e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020282:	fb08 f800 	mul.w	r8, r8, r0
 8020286:	0a2d      	lsrs	r5, r5, #8
 8020288:	0a20      	lsrs	r0, r4, #8
 802028a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802028e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020292:	fb07 f70a 	mul.w	r7, r7, sl
 8020296:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802029a:	4404      	add	r4, r0
 802029c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80202a0:	0a24      	lsrs	r4, r4, #8
 80202a2:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 80202a6:	9801      	ldr	r0, [sp, #4]
 80202a8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80202ac:	fb03 cc00 	mla	ip, r3, r0, ip
 80202b0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80202b4:	fb00 7606 	mla	r6, r0, r6, r7
 80202b8:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 80202bc:	fb04 cc0e 	mla	ip, r4, lr, ip
 80202c0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80202c4:	b280      	uxth	r0, r0
 80202c6:	9c04      	ldr	r4, [sp, #16]
 80202c8:	fb05 cc02 	mla	ip, r5, r2, ip
 80202cc:	fb0e 6e08 	mla	lr, lr, r8, r6
 80202d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202d4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80202d8:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 80202dc:	fb02 ec0c 	mla	ip, r2, ip, lr
 80202e0:	9a05      	ldr	r2, [sp, #20]
 80202e2:	4342      	muls	r2, r0
 80202e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202e8:	1c53      	adds	r3, r2, #1
 80202ea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80202ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80202f2:	ea45 0c0c 	orr.w	ip, r5, ip
 80202f6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80202fa:	fa5f f28c 	uxtb.w	r2, ip
 80202fe:	b2db      	uxtb	r3, r3
 8020300:	fb14 f403 	smulbb	r4, r4, r3
 8020304:	fb02 4200 	mla	r2, r2, r0, r4
 8020308:	b292      	uxth	r2, r2
 802030a:	1c54      	adds	r4, r2, #1
 802030c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8020310:	9c03      	ldr	r4, [sp, #12]
 8020312:	fb14 f403 	smulbb	r4, r4, r3
 8020316:	1212      	asrs	r2, r2, #8
 8020318:	700a      	strb	r2, [r1, #0]
 802031a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802031e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020322:	fb02 4200 	mla	r2, r2, r0, r4
 8020326:	b292      	uxth	r2, r2
 8020328:	1c54      	adds	r4, r2, #1
 802032a:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802032e:	1212      	asrs	r2, r2, #8
 8020330:	704a      	strb	r2, [r1, #1]
 8020332:	9a02      	ldr	r2, [sp, #8]
 8020334:	fb12 f303 	smulbb	r3, r2, r3
 8020338:	fb0c 3c00 	mla	ip, ip, r0, r3
 802033c:	fa1f fc8c 	uxth.w	ip, ip
 8020340:	f10c 0301 	add.w	r3, ip, #1
 8020344:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020348:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802034c:	f881 c002 	strb.w	ip, [r1, #2]
 8020350:	b007      	add	sp, #28
 8020352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020356:	bf00      	nop
 8020358:	0802b39d 	.word	0x0802b39d
 802035c:	0802b892 	.word	0x0802b892
 8020360:	0802b466 	.word	0x0802b466

08020364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020368:	ed2d 8b08 	vpush	{d8-d11}
 802036c:	b09b      	sub	sp, #108	; 0x6c
 802036e:	eeb0 aa40 	vmov.f32	s20, s0
 8020372:	eef0 9a60 	vmov.f32	s19, s1
 8020376:	930a      	str	r3, [sp, #40]	; 0x28
 8020378:	eeb0 9a41 	vmov.f32	s18, s2
 802037c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8020380:	eeb0 8a62 	vmov.f32	s16, s5
 8020384:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8020386:	eef0 8a43 	vmov.f32	s17, s6
 802038a:	9312      	str	r3, [sp, #72]	; 0x48
 802038c:	eef0 ba44 	vmov.f32	s23, s8
 8020390:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8020394:	eeb0 ba64 	vmov.f32	s22, s9
 8020398:	9019      	str	r0, [sp, #100]	; 0x64
 802039a:	eef0 aa45 	vmov.f32	s21, s10
 802039e:	9114      	str	r1, [sp, #80]	; 0x50
 80203a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80203a2:	6868      	ldr	r0, [r5, #4]
 80203a4:	9218      	str	r2, [sp, #96]	; 0x60
 80203a6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80203a8:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 80203ac:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80203b0:	fb00 1303 	mla	r3, r0, r3, r1
 80203b4:	6829      	ldr	r1, [r5, #0]
 80203b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80203ba:	18cb      	adds	r3, r1, r3
 80203bc:	930d      	str	r3, [sp, #52]	; 0x34
 80203be:	6813      	ldr	r3, [r2, #0]
 80203c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80203c2:	6853      	ldr	r3, [r2, #4]
 80203c4:	3304      	adds	r3, #4
 80203c6:	9309      	str	r3, [sp, #36]	; 0x24
 80203c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	dc03      	bgt.n	80203d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80203ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	f340 8352 	ble.w	8020a7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80203d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203d8:	2b00      	cmp	r3, #0
 80203da:	f340 81a2 	ble.w	8020722 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 80203de:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80203e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80203e2:	1412      	asrs	r2, r2, #16
 80203e4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80203e8:	d431      	bmi.n	802044e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80203ea:	1c51      	adds	r1, r2, #1
 80203ec:	428c      	cmp	r4, r1
 80203ee:	dd31      	ble.n	8020454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	db2f      	blt.n	8020454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80203f4:	1c59      	adds	r1, r3, #1
 80203f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80203f8:	4288      	cmp	r0, r1
 80203fa:	dd2b      	ble.n	8020454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80203fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203fe:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020400:	3b01      	subs	r3, #1
 8020402:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020404:	fb02 1203 	mla	r2, r2, r3, r1
 8020408:	1412      	asrs	r2, r2, #16
 802040a:	d42d      	bmi.n	8020468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802040c:	3201      	adds	r2, #1
 802040e:	4294      	cmp	r4, r2
 8020410:	dd2a      	ble.n	8020468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020412:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020414:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8020416:	fb02 1303 	mla	r3, r2, r3, r1
 802041a:	141b      	asrs	r3, r3, #16
 802041c:	d424      	bmi.n	8020468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802041e:	3301      	adds	r3, #1
 8020420:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020422:	429a      	cmp	r2, r3
 8020424:	dd20      	ble.n	8020468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020428:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 802042c:	f103 0e03 	add.w	lr, r3, #3
 8020430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020432:	9315      	str	r3, [sp, #84]	; 0x54
 8020434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020436:	2b00      	cmp	r3, #0
 8020438:	f300 81de 	bgt.w	80207f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 802043c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802043e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020440:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020444:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020448:	441a      	add	r2, r3
 802044a:	920d      	str	r2, [sp, #52]	; 0x34
 802044c:	e16b      	b.n	8020726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 802044e:	1c51      	adds	r1, r2, #1
 8020450:	f040 8158 	bne.w	8020704 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020454:	42a2      	cmp	r2, r4
 8020456:	f280 8155 	bge.w	8020704 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 802045a:	1c5a      	adds	r2, r3, #1
 802045c:	f2c0 8152 	blt.w	8020704 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020462:	4293      	cmp	r3, r2
 8020464:	f280 814e 	bge.w	8020704 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802046a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802046c:	9316      	str	r3, [sp, #88]	; 0x58
 802046e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8020472:	9315      	str	r3, [sp, #84]	; 0x54
 8020474:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020476:	2b00      	cmp	r3, #0
 8020478:	dde0      	ble.n	802043c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802047a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802047c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802047e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020482:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020484:	141b      	asrs	r3, r3, #16
 8020486:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802048a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802048c:	1412      	asrs	r2, r2, #16
 802048e:	f100 819a 	bmi.w	80207c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8020492:	1c55      	adds	r5, r2, #1
 8020494:	42ac      	cmp	r4, r5
 8020496:	f340 8198 	ble.w	80207ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802049a:	2b00      	cmp	r3, #0
 802049c:	f2c0 8195 	blt.w	80207ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80204a0:	1c5d      	adds	r5, r3, #1
 80204a2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80204a4:	42af      	cmp	r7, r5
 80204a6:	f340 8190 	ble.w	80207ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80204aa:	fb03 2304 	mla	r3, r3, r4, r2
 80204ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80204b0:	18d5      	adds	r5, r2, r3
 80204b2:	5cd3      	ldrb	r3, [r2, r3]
 80204b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80204b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80204ba:	0e1f      	lsrs	r7, r3, #24
 80204bc:	2800      	cmp	r0, #0
 80204be:	f000 8171 	beq.w	80207a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 80204c2:	f895 c001 	ldrb.w	ip, [r5, #1]
 80204c6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80204ca:	920e      	str	r2, [sp, #56]	; 0x38
 80204cc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80204d0:	2900      	cmp	r1, #0
 80204d2:	f000 8172 	beq.w	80207ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80204d6:	eb05 0c04 	add.w	ip, r5, r4
 80204da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80204dc:	5d2d      	ldrb	r5, [r5, r4]
 80204de:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80204e2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80204e6:	950b      	str	r5, [sp, #44]	; 0x2c
 80204e8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80204ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80204ee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80204f2:	0e15      	lsrs	r5, r2, #24
 80204f4:	920f      	str	r2, [sp, #60]	; 0x3c
 80204f6:	b280      	uxth	r0, r0
 80204f8:	b289      	uxth	r1, r1
 80204fa:	fb00 fa01 	mul.w	sl, r0, r1
 80204fe:	0100      	lsls	r0, r0, #4
 8020500:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8020504:	eba0 080a 	sub.w	r8, r0, sl
 8020508:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802050c:	b289      	uxth	r1, r1
 802050e:	fa1f f888 	uxth.w	r8, r8
 8020512:	1a52      	subs	r2, r2, r1
 8020514:	fb08 f00e 	mul.w	r0, r8, lr
 8020518:	b292      	uxth	r2, r2
 802051a:	fb02 0007 	mla	r0, r2, r7, r0
 802051e:	fb01 0009 	mla	r0, r1, r9, r0
 8020522:	fb0a 0005 	mla	r0, sl, r5, r0
 8020526:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802052a:	2800      	cmp	r0, #0
 802052c:	f000 80dd 	beq.w	80206ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020530:	2fff      	cmp	r7, #255	; 0xff
 8020532:	d01a      	beq.n	802056a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020534:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802053c:	fb07 fc0c 	mul.w	ip, r7, ip
 8020540:	435f      	muls	r7, r3
 8020542:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020546:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802054a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802054e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020552:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8020556:	4463      	add	r3, ip
 8020558:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802055c:	0a1b      	lsrs	r3, r3, #8
 802055e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020562:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020566:	ea43 030b 	orr.w	r3, r3, fp
 802056a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802056e:	d01e      	beq.n	80205ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8020570:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020572:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8020576:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802057a:	fb0e fb0b 	mul.w	fp, lr, fp
 802057e:	fb0e fe07 	mul.w	lr, lr, r7
 8020582:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020586:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802058a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802058e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020592:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020596:	44dc      	add	ip, fp
 8020598:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802059c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205a0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80205a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205a8:	ea4c 070e 	orr.w	r7, ip, lr
 80205ac:	970e      	str	r7, [sp, #56]	; 0x38
 80205ae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80205b2:	d01e      	beq.n	80205f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80205b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80205b6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80205ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80205be:	fb09 fe0e 	mul.w	lr, r9, lr
 80205c2:	fb09 f907 	mul.w	r9, r9, r7
 80205c6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80205ca:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80205ce:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80205d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205d6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80205da:	44f4      	add	ip, lr
 80205dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80205e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205e4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80205e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205ec:	ea4c 0709 	orr.w	r7, ip, r9
 80205f0:	970b      	str	r7, [sp, #44]	; 0x2c
 80205f2:	2dff      	cmp	r5, #255	; 0xff
 80205f4:	d01c      	beq.n	8020630 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 80205f6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80205f8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80205fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020600:	fb05 fe0e 	mul.w	lr, r5, lr
 8020604:	437d      	muls	r5, r7
 8020606:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802060a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802060e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8020612:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020616:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802061a:	44f4      	add	ip, lr
 802061c:	0a2d      	lsrs	r5, r5, #8
 802061e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020622:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020626:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802062a:	ea4c 0505 	orr.w	r5, ip, r5
 802062e:	950f      	str	r5, [sp, #60]	; 0x3c
 8020630:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020632:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020636:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802063a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802063e:	fb08 f505 	mul.w	r5, r8, r5
 8020642:	fb02 5507 	mla	r5, r2, r7, r5
 8020646:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020648:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802064c:	fb01 5507 	mla	r5, r1, r7, r5
 8020650:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020652:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020656:	fb0a 5507 	mla	r5, sl, r7, r5
 802065a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802065c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020660:	0a2d      	lsrs	r5, r5, #8
 8020662:	fb08 f807 	mul.w	r8, r8, r7
 8020666:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802066a:	fb02 8303 	mla	r3, r2, r3, r8
 802066e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020670:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020674:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020676:	fb01 330c 	mla	r3, r1, ip, r3
 802067a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802067e:	fb0a 3a01 	mla	sl, sl, r1, r3
 8020682:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020684:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020686:	4343      	muls	r3, r0
 8020688:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802068c:	1c58      	adds	r0, r3, #1
 802068e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020692:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020696:	ea45 050a 	orr.w	r5, r5, sl
 802069a:	7833      	ldrb	r3, [r6, #0]
 802069c:	b2ea      	uxtb	r2, r5
 802069e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80206a2:	fb12 f201 	smulbb	r2, r2, r1
 80206a6:	b2c0      	uxtb	r0, r0
 80206a8:	fb03 2300 	mla	r3, r3, r0, r2
 80206ac:	b29b      	uxth	r3, r3
 80206ae:	1c5a      	adds	r2, r3, #1
 80206b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80206b4:	7872      	ldrb	r2, [r6, #1]
 80206b6:	fb12 f200 	smulbb	r2, r2, r0
 80206ba:	121b      	asrs	r3, r3, #8
 80206bc:	7033      	strb	r3, [r6, #0]
 80206be:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80206c2:	0c2d      	lsrs	r5, r5, #16
 80206c4:	fb03 2301 	mla	r3, r3, r1, r2
 80206c8:	b29b      	uxth	r3, r3
 80206ca:	1c5a      	adds	r2, r3, #1
 80206cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80206d0:	121b      	asrs	r3, r3, #8
 80206d2:	7073      	strb	r3, [r6, #1]
 80206d4:	78b3      	ldrb	r3, [r6, #2]
 80206d6:	fb13 f000 	smulbb	r0, r3, r0
 80206da:	fb05 0501 	mla	r5, r5, r1, r0
 80206de:	b2ad      	uxth	r5, r5
 80206e0:	1c6b      	adds	r3, r5, #1
 80206e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80206e6:	122d      	asrs	r5, r5, #8
 80206e8:	70b5      	strb	r5, [r6, #2]
 80206ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80206ec:	3603      	adds	r6, #3
 80206ee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80206f0:	4413      	add	r3, r2
 80206f2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80206f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80206f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206f8:	4413      	add	r3, r2
 80206fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80206fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80206fe:	3b01      	subs	r3, #1
 8020700:	9316      	str	r3, [sp, #88]	; 0x58
 8020702:	e6b7      	b.n	8020474 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020704:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020706:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020708:	4413      	add	r3, r2
 802070a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802070c:	932d      	str	r3, [sp, #180]	; 0xb4
 802070e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020710:	4413      	add	r3, r2
 8020712:	932e      	str	r3, [sp, #184]	; 0xb8
 8020714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020716:	3b01      	subs	r3, #1
 8020718:	930a      	str	r3, [sp, #40]	; 0x28
 802071a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802071c:	3303      	adds	r3, #3
 802071e:	930d      	str	r3, [sp, #52]	; 0x34
 8020720:	e659      	b.n	80203d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020722:	f47f ae6b 	bne.w	80203fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8020726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020728:	2b00      	cmp	r3, #0
 802072a:	f340 81a6 	ble.w	8020a7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802072e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020732:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020734:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020738:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802073c:	eef0 6a48 	vmov.f32	s13, s16
 8020740:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020744:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020748:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802074c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8020750:	eef0 6a68 	vmov.f32	s13, s17
 8020754:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020758:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 802075c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020760:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020764:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020768:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802076c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020770:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020774:	ee18 2a10 	vmov	r2, s16
 8020778:	eeb0 8a47 	vmov.f32	s16, s14
 802077c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020780:	ee18 2a90 	vmov	r2, s17
 8020784:	932f      	str	r3, [sp, #188]	; 0xbc
 8020786:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020788:	eef0 8a67 	vmov.f32	s17, s15
 802078c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020790:	9330      	str	r3, [sp, #192]	; 0xc0
 8020792:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020794:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020796:	3b01      	subs	r3, #1
 8020798:	9314      	str	r3, [sp, #80]	; 0x50
 802079a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802079c:	bf08      	it	eq
 802079e:	4613      	moveq	r3, r2
 80207a0:	930a      	str	r3, [sp, #40]	; 0x28
 80207a2:	e611      	b.n	80203c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80207a4:	b161      	cbz	r1, 80207c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80207a6:	5d2a      	ldrb	r2, [r5, r4]
 80207a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80207aa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80207ae:	25ff      	movs	r5, #255	; 0xff
 80207b0:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80207b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80207b6:	46ae      	mov	lr, r5
 80207b8:	e69d      	b.n	80204f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80207ba:	25ff      	movs	r5, #255	; 0xff
 80207bc:	46a9      	mov	r9, r5
 80207be:	e69a      	b.n	80204f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80207c0:	25ff      	movs	r5, #255	; 0xff
 80207c2:	46a9      	mov	r9, r5
 80207c4:	e7f7      	b.n	80207b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 80207c6:	1c57      	adds	r7, r2, #1
 80207c8:	d18f      	bne.n	80206ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80207ca:	4294      	cmp	r4, r2
 80207cc:	dd8d      	ble.n	80206ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80207ce:	1c5d      	adds	r5, r3, #1
 80207d0:	db8b      	blt.n	80206ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80207d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80207d4:	429d      	cmp	r5, r3
 80207d6:	dd88      	ble.n	80206ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80207d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80207da:	9202      	str	r2, [sp, #8]
 80207dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80207de:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80207e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80207e4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80207e6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80207ea:	e9cd 4300 	strd	r4, r3, [sp]
 80207ee:	4631      	mov	r1, r6
 80207f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207f2:	f7ff fc63 	bl	80200bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80207f6:	e778      	b.n	80206ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80207f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80207fa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80207fc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020800:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020802:	1412      	asrs	r2, r2, #16
 8020804:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020808:	141b      	asrs	r3, r3, #16
 802080a:	fb04 2303 	mla	r3, r4, r3, r2
 802080e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020810:	18d5      	adds	r5, r2, r3
 8020812:	5cd3      	ldrb	r3, [r2, r3]
 8020814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802081a:	0e1e      	lsrs	r6, r3, #24
 802081c:	2900      	cmp	r1, #0
 802081e:	f000 811b 	beq.w	8020a58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8020822:	786a      	ldrb	r2, [r5, #1]
 8020824:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020826:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802082a:	9210      	str	r2, [sp, #64]	; 0x40
 802082c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8020830:	2800      	cmp	r0, #0
 8020832:	f000 811c 	beq.w	8020a6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8020836:	192a      	adds	r2, r5, r4
 8020838:	5d2d      	ldrb	r5, [r5, r4]
 802083a:	7852      	ldrb	r2, [r2, #1]
 802083c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8020840:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020844:	950c      	str	r5, [sp, #48]	; 0x30
 8020846:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802084a:	0e15      	lsrs	r5, r2, #24
 802084c:	9211      	str	r2, [sp, #68]	; 0x44
 802084e:	b289      	uxth	r1, r1
 8020850:	b280      	uxth	r0, r0
 8020852:	fb01 fa00 	mul.w	sl, r1, r0
 8020856:	0109      	lsls	r1, r1, #4
 8020858:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802085c:	eba1 080a 	sub.w	r8, r1, sl
 8020860:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020864:	b280      	uxth	r0, r0
 8020866:	fa1f f888 	uxth.w	r8, r8
 802086a:	1a12      	subs	r2, r2, r0
 802086c:	fb08 f10c 	mul.w	r1, r8, ip
 8020870:	b292      	uxth	r2, r2
 8020872:	fb02 1106 	mla	r1, r2, r6, r1
 8020876:	fb00 1109 	mla	r1, r0, r9, r1
 802087a:	fb0a 1105 	mla	r1, sl, r5, r1
 802087e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020882:	2900      	cmp	r1, #0
 8020884:	f000 80da 	beq.w	8020a3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8020888:	2eff      	cmp	r6, #255	; 0xff
 802088a:	d016      	beq.n	80208ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802088c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020890:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020894:	4377      	muls	r7, r6
 8020896:	435e      	muls	r6, r3
 8020898:	0a3b      	lsrs	r3, r7, #8
 802089a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802089e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80208a2:	443b      	add	r3, r7
 80208a4:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80208a8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80208ac:	0a1b      	lsrs	r3, r3, #8
 80208ae:	0a3f      	lsrs	r7, r7, #8
 80208b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80208b4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80208b8:	433b      	orrs	r3, r7
 80208ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80208be:	d01d      	beq.n	80208fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 80208c0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80208c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80208c4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80208c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80208cc:	fb0c f606 	mul.w	r6, ip, r6
 80208d0:	fb0c fc07 	mul.w	ip, ip, r7
 80208d4:	0a37      	lsrs	r7, r6, #8
 80208d6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80208da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80208de:	4437      	add	r7, r6
 80208e0:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80208e4:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80208e8:	0a3f      	lsrs	r7, r7, #8
 80208ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80208f2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80208f6:	ea47 060c 	orr.w	r6, r7, ip
 80208fa:	9610      	str	r6, [sp, #64]	; 0x40
 80208fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020900:	d01d      	beq.n	802093e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8020902:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020904:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020908:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802090c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020910:	fb09 f906 	mul.w	r9, r9, r6
 8020914:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020918:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802091c:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8020920:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020924:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020928:	4467      	add	r7, ip
 802092a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802092e:	0a3f      	lsrs	r7, r7, #8
 8020930:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020934:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020938:	ea47 0609 	orr.w	r6, r7, r9
 802093c:	960c      	str	r6, [sp, #48]	; 0x30
 802093e:	2dff      	cmp	r5, #255	; 0xff
 8020940:	d01a      	beq.n	8020978 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8020942:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020944:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020948:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802094c:	fb05 fc0c 	mul.w	ip, r5, ip
 8020950:	4375      	muls	r5, r6
 8020952:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020956:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802095a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802095e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020962:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020966:	4467      	add	r7, ip
 8020968:	0a2d      	lsrs	r5, r5, #8
 802096a:	0a3f      	lsrs	r7, r7, #8
 802096c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020970:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020974:	433d      	orrs	r5, r7
 8020976:	9511      	str	r5, [sp, #68]	; 0x44
 8020978:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802097a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802097e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020982:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020986:	fb08 f505 	mul.w	r5, r8, r5
 802098a:	fb02 5506 	mla	r5, r2, r6, r5
 802098e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020990:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020994:	fb00 5506 	mla	r5, r0, r6, r5
 8020998:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802099a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802099e:	fb0a 5506 	mla	r5, sl, r6, r5
 80209a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80209a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80209a8:	0a2d      	lsrs	r5, r5, #8
 80209aa:	fb08 f806 	mul.w	r8, r8, r6
 80209ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80209b2:	fb02 8303 	mla	r3, r2, r3, r8
 80209b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80209b8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80209bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80209be:	fb00 3307 	mla	r3, r0, r7, r3
 80209c2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80209c6:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80209ca:	fb01 f30b 	mul.w	r3, r1, fp
 80209ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209d2:	1c59      	adds	r1, r3, #1
 80209d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80209d8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80209dc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80209e0:	ea45 050c 	orr.w	r5, r5, ip
 80209e4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80209e8:	b2ea      	uxtb	r2, r5
 80209ea:	b2c9      	uxtb	r1, r1
 80209ec:	fb12 f20b 	smulbb	r2, r2, fp
 80209f0:	fb03 2301 	mla	r3, r3, r1, r2
 80209f4:	b29b      	uxth	r3, r3
 80209f6:	1c5a      	adds	r2, r3, #1
 80209f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209fc:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020a00:	fb12 f201 	smulbb	r2, r2, r1
 8020a04:	121b      	asrs	r3, r3, #8
 8020a06:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020a0a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020a0e:	0c2d      	lsrs	r5, r5, #16
 8020a10:	fb03 230b 	mla	r3, r3, fp, r2
 8020a14:	b29b      	uxth	r3, r3
 8020a16:	1c5a      	adds	r2, r3, #1
 8020a18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020a1c:	121b      	asrs	r3, r3, #8
 8020a1e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020a22:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020a26:	fb13 f101 	smulbb	r1, r3, r1
 8020a2a:	fb05 150b 	mla	r5, r5, fp, r1
 8020a2e:	b2ad      	uxth	r5, r5
 8020a30:	1c69      	adds	r1, r5, #1
 8020a32:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020a36:	122d      	asrs	r5, r5, #8
 8020a38:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8020a3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020a3e:	f10e 0e03 	add.w	lr, lr, #3
 8020a42:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020a44:	4413      	add	r3, r2
 8020a46:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020a48:	932d      	str	r3, [sp, #180]	; 0xb4
 8020a4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020a4c:	4413      	add	r3, r2
 8020a4e:	932e      	str	r3, [sp, #184]	; 0xb8
 8020a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020a52:	3b01      	subs	r3, #1
 8020a54:	9315      	str	r3, [sp, #84]	; 0x54
 8020a56:	e4ed      	b.n	8020434 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8020a58:	b160      	cbz	r0, 8020a74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 8020a5a:	5d2a      	ldrb	r2, [r5, r4]
 8020a5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020a5e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020a62:	25ff      	movs	r5, #255	; 0xff
 8020a64:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020a68:	920c      	str	r2, [sp, #48]	; 0x30
 8020a6a:	46ac      	mov	ip, r5
 8020a6c:	e6ef      	b.n	802084e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8020a6e:	25ff      	movs	r5, #255	; 0xff
 8020a70:	46a9      	mov	r9, r5
 8020a72:	e6ec      	b.n	802084e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8020a74:	25ff      	movs	r5, #255	; 0xff
 8020a76:	46a9      	mov	r9, r5
 8020a78:	e7f7      	b.n	8020a6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 8020a7a:	b01b      	add	sp, #108	; 0x6c
 8020a7c:	ecbd 8b08 	vpop	{d8-d11}
 8020a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a88:	b085      	sub	sp, #20
 8020a8a:	7888      	ldrb	r0, [r1, #2]
 8020a8c:	4692      	mov	sl, r2
 8020a8e:	4698      	mov	r8, r3
 8020a90:	9000      	str	r0, [sp, #0]
 8020a92:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020a96:	7848      	ldrb	r0, [r1, #1]
 8020a98:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020a9c:	9001      	str	r0, [sp, #4]
 8020a9e:	7808      	ldrb	r0, [r1, #0]
 8020aa0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020aa4:	9002      	str	r0, [sp, #8]
 8020aa6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020aaa:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8020aae:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020ab2:	fb04 560c 	mla	r6, r4, ip, r5
 8020ab6:	2c00      	cmp	r4, #0
 8020ab8:	eb02 0e06 	add.w	lr, r2, r6
 8020abc:	9a00      	ldr	r2, [sp, #0]
 8020abe:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020ac2:	9a01      	ldr	r2, [sp, #4]
 8020ac4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020ac8:	db3e      	blt.n	8020b48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8020aca:	45a1      	cmp	r9, r4
 8020acc:	dd3c      	ble.n	8020b48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8020ace:	2d00      	cmp	r5, #0
 8020ad0:	db38      	blt.n	8020b44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020ad2:	45ac      	cmp	ip, r5
 8020ad4:	dd36      	ble.n	8020b44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020ad6:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8020ada:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8020ade:	1c6e      	adds	r6, r5, #1
 8020ae0:	d435      	bmi.n	8020b4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020ae2:	45b4      	cmp	ip, r6
 8020ae4:	dd33      	ble.n	8020b4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020ae6:	b393      	cbz	r3, 8020b4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020ae8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8020aec:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8020af0:	3401      	adds	r4, #1
 8020af2:	d430      	bmi.n	8020b56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020af4:	45a1      	cmp	r9, r4
 8020af6:	dd2e      	ble.n	8020b56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020af8:	b36f      	cbz	r7, 8020b56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020afa:	2d00      	cmp	r5, #0
 8020afc:	db29      	blt.n	8020b52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8020afe:	45ac      	cmp	ip, r5
 8020b00:	dd27      	ble.n	8020b52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8020b02:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020b06:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8020b0a:	3501      	adds	r5, #1
 8020b0c:	d407      	bmi.n	8020b1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020b0e:	45ac      	cmp	ip, r5
 8020b10:	dd05      	ble.n	8020b1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020b12:	b123      	cbz	r3, 8020b1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020b14:	44f4      	add	ip, lr
 8020b16:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020b1a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8020b1e:	2b0f      	cmp	r3, #15
 8020b20:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020b24:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020b28:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020b2c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020b30:	d801      	bhi.n	8020b36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020b32:	2f0f      	cmp	r7, #15
 8020b34:	d911      	bls.n	8020b5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8020b36:	4b76      	ldr	r3, [pc, #472]	; (8020d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8020b38:	f240 11a5 	movw	r1, #421	; 0x1a5
 8020b3c:	4a75      	ldr	r2, [pc, #468]	; (8020d14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8020b3e:	4876      	ldr	r0, [pc, #472]	; (8020d18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8020b40:	f004 ff9e 	bl	8025a80 <__assert_func>
 8020b44:	4602      	mov	r2, r0
 8020b46:	e7ca      	b.n	8020ade <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8020b48:	4606      	mov	r6, r0
 8020b4a:	4602      	mov	r2, r0
 8020b4c:	e7d0      	b.n	8020af0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8020b4e:	4606      	mov	r6, r0
 8020b50:	e7ce      	b.n	8020af0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8020b52:	4604      	mov	r4, r0
 8020b54:	e7d9      	b.n	8020b0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8020b56:	4604      	mov	r4, r0
 8020b58:	e7e1      	b.n	8020b1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020b5a:	b29b      	uxth	r3, r3
 8020b5c:	b2bf      	uxth	r7, r7
 8020b5e:	fb07 fe03 	mul.w	lr, r7, r3
 8020b62:	011b      	lsls	r3, r3, #4
 8020b64:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020b68:	eba3 0c0e 	sub.w	ip, r3, lr
 8020b6c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8020b70:	b2bf      	uxth	r7, r7
 8020b72:	fa1f fc8c 	uxth.w	ip, ip
 8020b76:	1bed      	subs	r5, r5, r7
 8020b78:	fb0c f30a 	mul.w	r3, ip, sl
 8020b7c:	b2ad      	uxth	r5, r5
 8020b7e:	fb05 330b 	mla	r3, r5, fp, r3
 8020b82:	fb07 3309 	mla	r3, r7, r9, r3
 8020b86:	fb0e 3308 	mla	r3, lr, r8, r3
 8020b8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020b8e:	9303      	str	r3, [sp, #12]
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	f000 80b9 	beq.w	8020d08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8020b96:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020b9a:	d018      	beq.n	8020bce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8020b9c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020ba0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020ba4:	fb0b f303 	mul.w	r3, fp, r3
 8020ba8:	fb0b fb02 	mul.w	fp, fp, r2
 8020bac:	0a1a      	lsrs	r2, r3, #8
 8020bae:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020bb2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020bb6:	441a      	add	r2, r3
 8020bb8:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8020bbc:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020bc0:	0a12      	lsrs	r2, r2, #8
 8020bc2:	0a1b      	lsrs	r3, r3, #8
 8020bc4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020bc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020bcc:	431a      	orrs	r2, r3
 8020bce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020bd2:	d019      	beq.n	8020c08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8020bd4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020bd8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020bdc:	fb0a fb0b 	mul.w	fp, sl, fp
 8020be0:	fb0a fa06 	mul.w	sl, sl, r6
 8020be4:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020be8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020bec:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020bf0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020bf4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020bf8:	445e      	add	r6, fp
 8020bfa:	0a1b      	lsrs	r3, r3, #8
 8020bfc:	0a36      	lsrs	r6, r6, #8
 8020bfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c02:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c06:	431e      	orrs	r6, r3
 8020c08:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020c0c:	d019      	beq.n	8020c42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8020c0e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020c12:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020c16:	fb09 fa0a 	mul.w	sl, r9, sl
 8020c1a:	fb09 f904 	mul.w	r9, r9, r4
 8020c1e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020c22:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020c26:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8020c2a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020c2e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020c32:	4454      	add	r4, sl
 8020c34:	0a1b      	lsrs	r3, r3, #8
 8020c36:	0a24      	lsrs	r4, r4, #8
 8020c38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c3c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020c40:	431c      	orrs	r4, r3
 8020c42:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020c46:	d019      	beq.n	8020c7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8020c48:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8020c4c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020c50:	fb08 f909 	mul.w	r9, r8, r9
 8020c54:	fb08 f800 	mul.w	r8, r8, r0
 8020c58:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020c5c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020c60:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020c64:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020c68:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8020c6c:	4448      	add	r0, r9
 8020c6e:	0a1b      	lsrs	r3, r3, #8
 8020c70:	0a00      	lsrs	r0, r0, #8
 8020c72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c76:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020c7a:	4318      	orrs	r0, r3
 8020c7c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020c80:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020c84:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020c8c:	fb0c f808 	mul.w	r8, ip, r8
 8020c90:	fb0c f606 	mul.w	r6, ip, r6
 8020c94:	fb05 8803 	mla	r8, r5, r3, r8
 8020c98:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020c9c:	fb05 6202 	mla	r2, r5, r2, r6
 8020ca0:	fb07 8803 	mla	r8, r7, r3, r8
 8020ca4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020ca8:	fb0e 8303 	mla	r3, lr, r3, r8
 8020cac:	0a1b      	lsrs	r3, r3, #8
 8020cae:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020cb2:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020cb6:	9c02      	ldr	r4, [sp, #8]
 8020cb8:	fb07 2703 	mla	r7, r7, r3, r2
 8020cbc:	9a03      	ldr	r2, [sp, #12]
 8020cbe:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020cc2:	43d2      	mvns	r2, r2
 8020cc4:	fb0e 7303 	mla	r3, lr, r3, r7
 8020cc8:	b2d2      	uxtb	r2, r2
 8020cca:	0a1b      	lsrs	r3, r3, #8
 8020ccc:	4354      	muls	r4, r2
 8020cce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cd2:	1c60      	adds	r0, r4, #1
 8020cd4:	ea48 0303 	orr.w	r3, r8, r3
 8020cd8:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020cdc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020ce0:	7008      	strb	r0, [r1, #0]
 8020ce2:	9801      	ldr	r0, [sp, #4]
 8020ce4:	4350      	muls	r0, r2
 8020ce6:	1c44      	adds	r4, r0, #1
 8020ce8:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8020cec:	0a18      	lsrs	r0, r3, #8
 8020cee:	0c1b      	lsrs	r3, r3, #16
 8020cf0:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020cf4:	7048      	strb	r0, [r1, #1]
 8020cf6:	9800      	ldr	r0, [sp, #0]
 8020cf8:	4350      	muls	r0, r2
 8020cfa:	4602      	mov	r2, r0
 8020cfc:	3001      	adds	r0, #1
 8020cfe:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020d02:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020d06:	708b      	strb	r3, [r1, #2]
 8020d08:	b005      	add	sp, #20
 8020d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d0e:	bf00      	nop
 8020d10:	0802b39d 	.word	0x0802b39d
 8020d14:	0802b892 	.word	0x0802b892
 8020d18:	0802b466 	.word	0x0802b466

08020d1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d20:	ed2d 8b08 	vpush	{d8-d11}
 8020d24:	b097      	sub	sp, #92	; 0x5c
 8020d26:	eeb0 aa40 	vmov.f32	s20, s0
 8020d2a:	eef0 9a60 	vmov.f32	s19, s1
 8020d2e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8020d30:	eeb0 9a41 	vmov.f32	s18, s2
 8020d34:	9308      	str	r3, [sp, #32]
 8020d36:	eeb0 8a62 	vmov.f32	s16, s5
 8020d3a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8020d3e:	eef0 8a43 	vmov.f32	s17, s6
 8020d42:	9015      	str	r0, [sp, #84]	; 0x54
 8020d44:	eef0 ba44 	vmov.f32	s23, s8
 8020d48:	6868      	ldr	r0, [r5, #4]
 8020d4a:	eeb0 ba64 	vmov.f32	s22, s9
 8020d4e:	9112      	str	r1, [sp, #72]	; 0x48
 8020d50:	eef0 aa45 	vmov.f32	s21, s10
 8020d54:	9310      	str	r3, [sp, #64]	; 0x40
 8020d56:	9214      	str	r2, [sp, #80]	; 0x50
 8020d58:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8020d5a:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8020d5e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020d62:	fb00 1303 	mla	r3, r0, r3, r1
 8020d66:	6829      	ldr	r1, [r5, #0]
 8020d68:	6855      	ldr	r5, [r2, #4]
 8020d6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d6e:	3504      	adds	r5, #4
 8020d70:	18cb      	adds	r3, r1, r3
 8020d72:	930b      	str	r3, [sp, #44]	; 0x2c
 8020d74:	6813      	ldr	r3, [r2, #0]
 8020d76:	9311      	str	r3, [sp, #68]	; 0x44
 8020d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020d7a:	2b00      	cmp	r3, #0
 8020d7c:	dc03      	bgt.n	8020d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	f340 8333 	ble.w	80213ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020d86:	9b08      	ldr	r3, [sp, #32]
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	f340 8190 	ble.w	80210ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020d8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020d90:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d92:	1412      	asrs	r2, r2, #16
 8020d94:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020d98:	d42f      	bmi.n	8020dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020d9a:	1c51      	adds	r1, r2, #1
 8020d9c:	428c      	cmp	r4, r1
 8020d9e:	dd2f      	ble.n	8020e00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	db2d      	blt.n	8020e00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020da4:	1c59      	adds	r1, r3, #1
 8020da6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020da8:	4288      	cmp	r0, r1
 8020daa:	dd29      	ble.n	8020e00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020dac:	9b08      	ldr	r3, [sp, #32]
 8020dae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020db0:	3b01      	subs	r3, #1
 8020db2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020db4:	fb02 1203 	mla	r2, r2, r3, r1
 8020db8:	1412      	asrs	r2, r2, #16
 8020dba:	d42b      	bmi.n	8020e14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020dbc:	3201      	adds	r2, #1
 8020dbe:	4294      	cmp	r4, r2
 8020dc0:	dd28      	ble.n	8020e14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020dc2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020dc4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020dc6:	fb02 1303 	mla	r3, r2, r3, r1
 8020dca:	141b      	asrs	r3, r3, #16
 8020dcc:	d422      	bmi.n	8020e14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020dce:	3301      	adds	r3, #1
 8020dd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020dd2:	429a      	cmp	r2, r3
 8020dd4:	dd1e      	ble.n	8020e14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020dd8:	f103 0803 	add.w	r8, r3, #3
 8020ddc:	9b08      	ldr	r3, [sp, #32]
 8020dde:	9307      	str	r3, [sp, #28]
 8020de0:	9b07      	ldr	r3, [sp, #28]
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	f300 81ca 	bgt.w	802117c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020de8:	9b08      	ldr	r3, [sp, #32]
 8020dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020dec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020df0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020df4:	441a      	add	r2, r3
 8020df6:	920b      	str	r2, [sp, #44]	; 0x2c
 8020df8:	e15b      	b.n	80210b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8020dfa:	1c51      	adds	r1, r2, #1
 8020dfc:	f040 8148 	bne.w	8021090 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020e00:	42a2      	cmp	r2, r4
 8020e02:	f280 8145 	bge.w	8021090 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020e06:	1c5a      	adds	r2, r3, #1
 8020e08:	f2c0 8142 	blt.w	8021090 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020e0e:	4293      	cmp	r3, r2
 8020e10:	f280 813e 	bge.w	8021090 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020e14:	9b08      	ldr	r3, [sp, #32]
 8020e16:	9313      	str	r3, [sp, #76]	; 0x4c
 8020e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e1a:	9307      	str	r3, [sp, #28]
 8020e1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020e1e:	2b00      	cmp	r3, #0
 8020e20:	dde2      	ble.n	8020de8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020e22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020e24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e26:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020e2a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020e2c:	141b      	asrs	r3, r3, #16
 8020e2e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020e32:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020e34:	1412      	asrs	r2, r2, #16
 8020e36:	f100 818b 	bmi.w	8021150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8020e3a:	1c56      	adds	r6, r2, #1
 8020e3c:	42b4      	cmp	r4, r6
 8020e3e:	f340 8189 	ble.w	8021154 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	f2c0 8186 	blt.w	8021154 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020e48:	1c5e      	adds	r6, r3, #1
 8020e4a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020e4c:	42b7      	cmp	r7, r6
 8020e4e:	f340 8181 	ble.w	8021154 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020e52:	fb03 2304 	mla	r3, r3, r4, r2
 8020e56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e58:	18d6      	adds	r6, r2, r3
 8020e5a:	5cd3      	ldrb	r3, [r2, r3]
 8020e5c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020e60:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020e64:	2900      	cmp	r1, #0
 8020e66:	f000 8163 	beq.w	8021130 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020e6a:	7872      	ldrb	r2, [r6, #1]
 8020e6c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020e70:	920c      	str	r2, [sp, #48]	; 0x30
 8020e72:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020e76:	2800      	cmp	r0, #0
 8020e78:	f000 8164 	beq.w	8021144 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020e7c:	1932      	adds	r2, r6, r4
 8020e7e:	5d36      	ldrb	r6, [r6, r4]
 8020e80:	7852      	ldrb	r2, [r2, #1]
 8020e82:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020e86:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020e8a:	9609      	str	r6, [sp, #36]	; 0x24
 8020e8c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020e90:	0e16      	lsrs	r6, r2, #24
 8020e92:	920d      	str	r2, [sp, #52]	; 0x34
 8020e94:	b289      	uxth	r1, r1
 8020e96:	b280      	uxth	r0, r0
 8020e98:	fb01 fb00 	mul.w	fp, r1, r0
 8020e9c:	0109      	lsls	r1, r1, #4
 8020e9e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020ea2:	eba1 090b 	sub.w	r9, r1, fp
 8020ea6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020eaa:	b280      	uxth	r0, r0
 8020eac:	fa1f f989 	uxth.w	r9, r9
 8020eb0:	1a12      	subs	r2, r2, r0
 8020eb2:	fb09 f108 	mul.w	r1, r9, r8
 8020eb6:	b292      	uxth	r2, r2
 8020eb8:	fb02 110c 	mla	r1, r2, ip, r1
 8020ebc:	fb00 110a 	mla	r1, r0, sl, r1
 8020ec0:	fb0b 1106 	mla	r1, fp, r6, r1
 8020ec4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020ec8:	2900      	cmp	r1, #0
 8020eca:	f000 80d2 	beq.w	8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ece:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020ed2:	d01b      	beq.n	8020f0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020ed4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020ed8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020edc:	fb0c fe0e 	mul.w	lr, ip, lr
 8020ee0:	fb0c fc03 	mul.w	ip, ip, r3
 8020ee4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020ee8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020eec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ef0:	4473      	add	r3, lr
 8020ef2:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020ef6:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020efa:	0a1b      	lsrs	r3, r3, #8
 8020efc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f04:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020f08:	ea43 030e 	orr.w	r3, r3, lr
 8020f0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020f10:	d01e      	beq.n	8020f50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020f12:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020f14:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020f18:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020f1c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020f20:	fb08 f80e 	mul.w	r8, r8, lr
 8020f24:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020f28:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020f2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f30:	44e6      	add	lr, ip
 8020f32:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020f36:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020f3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f3e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020f42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f46:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020f4a:	ea4e 0708 	orr.w	r7, lr, r8
 8020f4e:	970c      	str	r7, [sp, #48]	; 0x30
 8020f50:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020f54:	d01e      	beq.n	8020f94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020f56:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020f58:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020f5c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020f60:	fb0a f808 	mul.w	r8, sl, r8
 8020f64:	fb0a fa0c 	mul.w	sl, sl, ip
 8020f68:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020f6c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020f70:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020f74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f78:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020f7c:	44c6      	add	lr, r8
 8020f7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f8e:	ea4e 070a 	orr.w	r7, lr, sl
 8020f92:	9709      	str	r7, [sp, #36]	; 0x24
 8020f94:	2eff      	cmp	r6, #255	; 0xff
 8020f96:	d01d      	beq.n	8020fd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020f98:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020f9a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020f9e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020fa2:	fb06 f808 	mul.w	r8, r6, r8
 8020fa6:	fb06 f60c 	mul.w	r6, r6, ip
 8020faa:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020fae:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020fb2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020fb6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fba:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020fbe:	44c6      	add	lr, r8
 8020fc0:	0a36      	lsrs	r6, r6, #8
 8020fc2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fc6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020fca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fce:	ea4e 0606 	orr.w	r6, lr, r6
 8020fd2:	960d      	str	r6, [sp, #52]	; 0x34
 8020fd4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020fd6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020fda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020fdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020fe0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020fe4:	43c9      	mvns	r1, r1
 8020fe6:	fb09 f606 	mul.w	r6, r9, r6
 8020fea:	b2c9      	uxtb	r1, r1
 8020fec:	fb02 660c 	mla	r6, r2, ip, r6
 8020ff0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020ff4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020ff6:	fb00 660c 	mla	r6, r0, ip, r6
 8020ffa:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020ffe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021000:	fb0b 660c 	mla	r6, fp, ip, r6
 8021004:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021008:	fb09 f90c 	mul.w	r9, r9, ip
 802100c:	0a36      	lsrs	r6, r6, #8
 802100e:	fb02 9303 	mla	r3, r2, r3, r9
 8021012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021014:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021018:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802101c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802101e:	fb00 330e 	mla	r3, r0, lr, r3
 8021022:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021026:	fb0b 3b00 	mla	fp, fp, r0, r3
 802102a:	9b07      	ldr	r3, [sp, #28]
 802102c:	781b      	ldrb	r3, [r3, #0]
 802102e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021032:	fb03 f201 	mul.w	r2, r3, r1
 8021036:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802103a:	1c53      	adds	r3, r2, #1
 802103c:	ea46 060b 	orr.w	r6, r6, fp
 8021040:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021044:	9a07      	ldr	r2, [sp, #28]
 8021046:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802104a:	7013      	strb	r3, [r2, #0]
 802104c:	7853      	ldrb	r3, [r2, #1]
 802104e:	434b      	muls	r3, r1
 8021050:	1c5a      	adds	r2, r3, #1
 8021052:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021056:	0a33      	lsrs	r3, r6, #8
 8021058:	0c36      	lsrs	r6, r6, #16
 802105a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802105e:	9a07      	ldr	r2, [sp, #28]
 8021060:	7053      	strb	r3, [r2, #1]
 8021062:	7893      	ldrb	r3, [r2, #2]
 8021064:	4359      	muls	r1, r3
 8021066:	1c4b      	adds	r3, r1, #1
 8021068:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802106c:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8021070:	7096      	strb	r6, [r2, #2]
 8021072:	9b07      	ldr	r3, [sp, #28]
 8021074:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021076:	3303      	adds	r3, #3
 8021078:	9307      	str	r3, [sp, #28]
 802107a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802107c:	4413      	add	r3, r2
 802107e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021080:	9329      	str	r3, [sp, #164]	; 0xa4
 8021082:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021084:	4413      	add	r3, r2
 8021086:	932a      	str	r3, [sp, #168]	; 0xa8
 8021088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802108a:	3b01      	subs	r3, #1
 802108c:	9313      	str	r3, [sp, #76]	; 0x4c
 802108e:	e6c5      	b.n	8020e1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8021090:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021092:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021094:	4413      	add	r3, r2
 8021096:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021098:	9329      	str	r3, [sp, #164]	; 0xa4
 802109a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802109c:	4413      	add	r3, r2
 802109e:	932a      	str	r3, [sp, #168]	; 0xa8
 80210a0:	9b08      	ldr	r3, [sp, #32]
 80210a2:	3b01      	subs	r3, #1
 80210a4:	9308      	str	r3, [sp, #32]
 80210a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210a8:	3303      	adds	r3, #3
 80210aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80210ac:	e66b      	b.n	8020d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80210ae:	f47f ae7d 	bne.w	8020dac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 80210b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	f340 8199 	ble.w	80213ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80210ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80210be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80210c0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80210c4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80210c8:	eef0 6a48 	vmov.f32	s13, s16
 80210cc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80210d0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80210d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210d8:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80210dc:	eef0 6a68 	vmov.f32	s13, s17
 80210e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210e4:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80210e8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80210ec:	ee69 7a27 	vmul.f32	s15, s18, s15
 80210f0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80210f4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80210f8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80210fc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021100:	ee18 2a10 	vmov	r2, s16
 8021104:	eeb0 8a47 	vmov.f32	s16, s14
 8021108:	fb92 f3f3 	sdiv	r3, r2, r3
 802110c:	ee18 2a90 	vmov	r2, s17
 8021110:	932b      	str	r3, [sp, #172]	; 0xac
 8021112:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021114:	eef0 8a67 	vmov.f32	s17, s15
 8021118:	fb92 f3f3 	sdiv	r3, r2, r3
 802111c:	932c      	str	r3, [sp, #176]	; 0xb0
 802111e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021122:	3b01      	subs	r3, #1
 8021124:	9312      	str	r3, [sp, #72]	; 0x48
 8021126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021128:	bf08      	it	eq
 802112a:	4613      	moveq	r3, r2
 802112c:	9308      	str	r3, [sp, #32]
 802112e:	e623      	b.n	8020d78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8021130:	b158      	cbz	r0, 802114a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021132:	5d32      	ldrb	r2, [r6, r4]
 8021134:	26ff      	movs	r6, #255	; 0xff
 8021136:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802113a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802113e:	9209      	str	r2, [sp, #36]	; 0x24
 8021140:	46b0      	mov	r8, r6
 8021142:	e6a7      	b.n	8020e94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8021144:	26ff      	movs	r6, #255	; 0xff
 8021146:	46b2      	mov	sl, r6
 8021148:	e6a4      	b.n	8020e94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 802114a:	26ff      	movs	r6, #255	; 0xff
 802114c:	46b2      	mov	sl, r6
 802114e:	e7f7      	b.n	8021140 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8021150:	1c57      	adds	r7, r2, #1
 8021152:	d18e      	bne.n	8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021154:	4294      	cmp	r4, r2
 8021156:	dd8c      	ble.n	8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021158:	1c5e      	adds	r6, r3, #1
 802115a:	db8a      	blt.n	8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802115c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802115e:	429e      	cmp	r6, r3
 8021160:	dd87      	ble.n	8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021162:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8021166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802116a:	e9cd 4600 	strd	r4, r6, [sp]
 802116e:	462b      	mov	r3, r5
 8021170:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021172:	9907      	ldr	r1, [sp, #28]
 8021174:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021176:	f7ff fc85 	bl	8020a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802117a:	e77a      	b.n	8021072 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802117c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802117e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021180:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021184:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021186:	1409      	asrs	r1, r1, #16
 8021188:	f3c3 3003 	ubfx	r0, r3, #12, #4
 802118c:	141b      	asrs	r3, r3, #16
 802118e:	fb04 1303 	mla	r3, r4, r3, r1
 8021192:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021194:	18ce      	adds	r6, r1, r3
 8021196:	5ccb      	ldrb	r3, [r1, r3]
 8021198:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802119c:	0e1f      	lsrs	r7, r3, #24
 802119e:	2a00      	cmp	r2, #0
 80211a0:	f000 8114 	beq.w	80213cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 80211a4:	7871      	ldrb	r1, [r6, #1]
 80211a6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80211aa:	910e      	str	r1, [sp, #56]	; 0x38
 80211ac:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80211b0:	2800      	cmp	r0, #0
 80211b2:	f000 8115 	beq.w	80213e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 80211b6:	1931      	adds	r1, r6, r4
 80211b8:	5d36      	ldrb	r6, [r6, r4]
 80211ba:	7849      	ldrb	r1, [r1, #1]
 80211bc:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80211c0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80211c4:	960a      	str	r6, [sp, #40]	; 0x28
 80211c6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80211ca:	0e0e      	lsrs	r6, r1, #24
 80211cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80211ce:	b292      	uxth	r2, r2
 80211d0:	b280      	uxth	r0, r0
 80211d2:	fb02 fb00 	mul.w	fp, r2, r0
 80211d6:	0112      	lsls	r2, r2, #4
 80211d8:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80211dc:	eba2 090b 	sub.w	r9, r2, fp
 80211e0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80211e4:	b280      	uxth	r0, r0
 80211e6:	fa1f f989 	uxth.w	r9, r9
 80211ea:	1a09      	subs	r1, r1, r0
 80211ec:	fb09 f20e 	mul.w	r2, r9, lr
 80211f0:	b289      	uxth	r1, r1
 80211f2:	fb01 2207 	mla	r2, r1, r7, r2
 80211f6:	fb00 220a 	mla	r2, r0, sl, r2
 80211fa:	fb0b 2206 	mla	r2, fp, r6, r2
 80211fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021202:	9213      	str	r2, [sp, #76]	; 0x4c
 8021204:	2a00      	cmp	r2, #0
 8021206:	f000 80d4 	beq.w	80213b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 802120a:	2fff      	cmp	r7, #255	; 0xff
 802120c:	d01a      	beq.n	8021244 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 802120e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021212:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021216:	fb07 fc0c 	mul.w	ip, r7, ip
 802121a:	435f      	muls	r7, r3
 802121c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021220:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021224:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021228:	4463      	add	r3, ip
 802122a:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802122e:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8021232:	0a1b      	lsrs	r3, r3, #8
 8021234:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021238:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802123c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021240:	ea43 030c 	orr.w	r3, r3, ip
 8021244:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021248:	d01f      	beq.n	802128a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 802124a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802124c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802124e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021252:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021256:	fb0e f707 	mul.w	r7, lr, r7
 802125a:	fb0e fe0c 	mul.w	lr, lr, ip
 802125e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021262:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021266:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802126a:	44bc      	add	ip, r7
 802126c:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021270:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021274:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021278:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802127c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021280:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021284:	ea4c 020e 	orr.w	r2, ip, lr
 8021288:	920e      	str	r2, [sp, #56]	; 0x38
 802128a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802128e:	d01e      	beq.n	80212ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8021290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021292:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021296:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802129a:	fb0a fe0e 	mul.w	lr, sl, lr
 802129e:	fb0a fa07 	mul.w	sl, sl, r7
 80212a2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80212a6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80212aa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80212ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212b2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80212b6:	44f4      	add	ip, lr
 80212b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80212c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212c8:	ea4c 020a 	orr.w	r2, ip, sl
 80212cc:	920a      	str	r2, [sp, #40]	; 0x28
 80212ce:	2eff      	cmp	r6, #255	; 0xff
 80212d0:	d01c      	beq.n	802130c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 80212d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80212d4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80212d8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80212dc:	fb06 fe0e 	mul.w	lr, r6, lr
 80212e0:	437e      	muls	r6, r7
 80212e2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80212e6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80212ea:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80212ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212f2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80212f6:	44f4      	add	ip, lr
 80212f8:	0a36      	lsrs	r6, r6, #8
 80212fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021302:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021306:	ea4c 0206 	orr.w	r2, ip, r6
 802130a:	920f      	str	r2, [sp, #60]	; 0x3c
 802130c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802130e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021312:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021316:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802131a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802131c:	fb09 f606 	mul.w	r6, r9, r6
 8021320:	fb01 6607 	mla	r6, r1, r7, r6
 8021324:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8021328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802132a:	fb00 6607 	mla	r6, r0, r7, r6
 802132e:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8021332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021334:	fb0b 6607 	mla	r6, fp, r7, r6
 8021338:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802133c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802133e:	fb09 f907 	mul.w	r9, r9, r7
 8021342:	0a36      	lsrs	r6, r6, #8
 8021344:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802134a:	fb01 9303 	mla	r3, r1, r3, r9
 802134e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021352:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021356:	fb00 330c 	mla	r3, r0, ip, r3
 802135a:	fb0b 3e0e 	mla	lr, fp, lr, r3
 802135e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021360:	43da      	mvns	r2, r3
 8021362:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8021366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802136a:	b2d2      	uxtb	r2, r2
 802136c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021370:	fb03 f102 	mul.w	r1, r3, r2
 8021374:	ea46 060e 	orr.w	r6, r6, lr
 8021378:	1c4b      	adds	r3, r1, #1
 802137a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802137e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021382:	f808 3c03 	strb.w	r3, [r8, #-3]
 8021386:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 802138a:	4353      	muls	r3, r2
 802138c:	1c59      	adds	r1, r3, #1
 802138e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021392:	0a33      	lsrs	r3, r6, #8
 8021394:	0c36      	lsrs	r6, r6, #16
 8021396:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802139a:	f808 3c02 	strb.w	r3, [r8, #-2]
 802139e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80213a2:	435a      	muls	r2, r3
 80213a4:	1c53      	adds	r3, r2, #1
 80213a6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80213aa:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80213ae:	f808 6c01 	strb.w	r6, [r8, #-1]
 80213b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80213b4:	f108 0803 	add.w	r8, r8, #3
 80213b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80213ba:	4413      	add	r3, r2
 80213bc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80213be:	9329      	str	r3, [sp, #164]	; 0xa4
 80213c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80213c2:	4413      	add	r3, r2
 80213c4:	932a      	str	r3, [sp, #168]	; 0xa8
 80213c6:	9b07      	ldr	r3, [sp, #28]
 80213c8:	3b01      	subs	r3, #1
 80213ca:	e508      	b.n	8020dde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 80213cc:	b158      	cbz	r0, 80213e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 80213ce:	5d31      	ldrb	r1, [r6, r4]
 80213d0:	26ff      	movs	r6, #255	; 0xff
 80213d2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80213d6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80213da:	910a      	str	r1, [sp, #40]	; 0x28
 80213dc:	46b6      	mov	lr, r6
 80213de:	e6f6      	b.n	80211ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80213e0:	26ff      	movs	r6, #255	; 0xff
 80213e2:	46b2      	mov	sl, r6
 80213e4:	e6f3      	b.n	80211ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80213e6:	26ff      	movs	r6, #255	; 0xff
 80213e8:	46b2      	mov	sl, r6
 80213ea:	e7f7      	b.n	80213dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 80213ec:	b017      	add	sp, #92	; 0x5c
 80213ee:	ecbd 8b08 	vpop	{d8-d11}
 80213f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080213f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80213f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213fc:	b08d      	sub	sp, #52	; 0x34
 80213fe:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8021402:	9103      	str	r1, [sp, #12]
 8021404:	fb07 5803 	mla	r8, r7, r3, r5
 8021408:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802140c:	9803      	ldr	r0, [sp, #12]
 802140e:	2f00      	cmp	r7, #0
 8021410:	910b      	str	r1, [sp, #44]	; 0x2c
 8021412:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021416:	9903      	ldr	r1, [sp, #12]
 8021418:	9c03      	ldr	r4, [sp, #12]
 802141a:	eb02 0608 	add.w	r6, r2, r8
 802141e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021422:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8021426:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 802142a:	7809      	ldrb	r1, [r1, #0]
 802142c:	7840      	ldrb	r0, [r0, #1]
 802142e:	78a4      	ldrb	r4, [r4, #2]
 8021430:	db51      	blt.n	80214d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021432:	45be      	cmp	lr, r7
 8021434:	dd4f      	ble.n	80214d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021436:	2d00      	cmp	r5, #0
 8021438:	db49      	blt.n	80214ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802143a:	42ab      	cmp	r3, r5
 802143c:	dd47      	ble.n	80214ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802143e:	f812 2008 	ldrb.w	r2, [r2, r8]
 8021442:	9204      	str	r2, [sp, #16]
 8021444:	7872      	ldrb	r2, [r6, #1]
 8021446:	9205      	str	r2, [sp, #20]
 8021448:	78b2      	ldrb	r2, [r6, #2]
 802144a:	9206      	str	r2, [sp, #24]
 802144c:	1c6a      	adds	r2, r5, #1
 802144e:	d449      	bmi.n	80214e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021450:	4293      	cmp	r3, r2
 8021452:	dd47      	ble.n	80214e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021454:	f1bc 0f00 	cmp.w	ip, #0
 8021458:	d044      	beq.n	80214e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802145a:	7972      	ldrb	r2, [r6, #5]
 802145c:	f896 b003 	ldrb.w	fp, [r6, #3]
 8021460:	f896 a004 	ldrb.w	sl, [r6, #4]
 8021464:	9201      	str	r2, [sp, #4]
 8021466:	3701      	adds	r7, #1
 8021468:	d444      	bmi.n	80214f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802146a:	45be      	cmp	lr, r7
 802146c:	dd42      	ble.n	80214f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802146e:	f1b9 0f00 	cmp.w	r9, #0
 8021472:	f000 80c1 	beq.w	80215f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8021476:	2d00      	cmp	r5, #0
 8021478:	db38      	blt.n	80214ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802147a:	42ab      	cmp	r3, r5
 802147c:	dd36      	ble.n	80214ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802147e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021482:	f816 8002 	ldrb.w	r8, [r6, r2]
 8021486:	2203      	movs	r2, #3
 8021488:	fb03 6702 	mla	r7, r3, r2, r6
 802148c:	fb03 6202 	mla	r2, r3, r2, r6
 8021490:	787f      	ldrb	r7, [r7, #1]
 8021492:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021496:	9702      	str	r7, [sp, #8]
 8021498:	3501      	adds	r5, #1
 802149a:	d432      	bmi.n	8021502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802149c:	42ab      	cmp	r3, r5
 802149e:	dd30      	ble.n	8021502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80214a0:	f1bc 0f00 	cmp.w	ip, #0
 80214a4:	d031      	beq.n	802150a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80214a6:	2703      	movs	r7, #3
 80214a8:	fb13 7207 	smlabb	r2, r3, r7, r7
 80214ac:	5cb5      	ldrb	r5, [r6, r2]
 80214ae:	fb03 6207 	mla	r2, r3, r7, r6
 80214b2:	fb03 6307 	mla	r3, r3, r7, r6
 80214b6:	7912      	ldrb	r2, [r2, #4]
 80214b8:	795e      	ldrb	r6, [r3, #5]
 80214ba:	f1bc 0f0f 	cmp.w	ip, #15
 80214be:	d927      	bls.n	8021510 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 80214c0:	4b53      	ldr	r3, [pc, #332]	; (8021610 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 80214c2:	f240 11a5 	movw	r1, #421	; 0x1a5
 80214c6:	4a53      	ldr	r2, [pc, #332]	; (8021614 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80214c8:	4853      	ldr	r0, [pc, #332]	; (8021618 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80214ca:	f004 fad9 	bl	8025a80 <__assert_func>
 80214ce:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80214d2:	9104      	str	r1, [sp, #16]
 80214d4:	e7ba      	b.n	802144c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80214d6:	9401      	str	r4, [sp, #4]
 80214d8:	4682      	mov	sl, r0
 80214da:	468b      	mov	fp, r1
 80214dc:	9104      	str	r1, [sp, #16]
 80214de:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80214e2:	e7c0      	b.n	8021466 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80214e4:	9401      	str	r4, [sp, #4]
 80214e6:	4682      	mov	sl, r0
 80214e8:	468b      	mov	fp, r1
 80214ea:	e7bc      	b.n	8021466 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80214ec:	46a6      	mov	lr, r4
 80214ee:	9002      	str	r0, [sp, #8]
 80214f0:	4688      	mov	r8, r1
 80214f2:	e7d1      	b.n	8021498 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80214f4:	4626      	mov	r6, r4
 80214f6:	4602      	mov	r2, r0
 80214f8:	460d      	mov	r5, r1
 80214fa:	46a6      	mov	lr, r4
 80214fc:	9002      	str	r0, [sp, #8]
 80214fe:	4688      	mov	r8, r1
 8021500:	e7db      	b.n	80214ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021502:	4626      	mov	r6, r4
 8021504:	4602      	mov	r2, r0
 8021506:	460d      	mov	r5, r1
 8021508:	e7d7      	b.n	80214ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802150a:	4626      	mov	r6, r4
 802150c:	4602      	mov	r2, r0
 802150e:	460d      	mov	r5, r1
 8021510:	f1b9 0f0f 	cmp.w	r9, #15
 8021514:	d8d4      	bhi.n	80214c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021516:	fa1f f38c 	uxth.w	r3, ip
 802151a:	fa1f fc89 	uxth.w	ip, r9
 802151e:	fb03 f70c 	mul.w	r7, r3, ip
 8021522:	011b      	lsls	r3, r3, #4
 8021524:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021528:	9707      	str	r7, [sp, #28]
 802152a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802152e:	fa1f fc8c 	uxth.w	ip, ip
 8021532:	eba7 070c 	sub.w	r7, r7, ip
 8021536:	b2bf      	uxth	r7, r7
 8021538:	9709      	str	r7, [sp, #36]	; 0x24
 802153a:	9f07      	ldr	r7, [sp, #28]
 802153c:	1bdb      	subs	r3, r3, r7
 802153e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8021542:	b29b      	uxth	r3, r3
 8021544:	9708      	str	r7, [sp, #32]
 8021546:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021548:	930a      	str	r3, [sp, #40]	; 0x28
 802154a:	ea6f 0907 	mvn.w	r9, r7
 802154e:	fb03 fb0b 	mul.w	fp, r3, fp
 8021552:	9f04      	ldr	r7, [sp, #16]
 8021554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021556:	fa5f f989 	uxtb.w	r9, r9
 802155a:	fb03 bb07 	mla	fp, r3, r7, fp
 802155e:	9f07      	ldr	r7, [sp, #28]
 8021560:	fb11 f109 	smulbb	r1, r1, r9
 8021564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021566:	fb0c b808 	mla	r8, ip, r8, fp
 802156a:	fb10 f009 	smulbb	r0, r0, r9
 802156e:	fb14 f409 	smulbb	r4, r4, r9
 8021572:	fb07 8805 	mla	r8, r7, r5, r8
 8021576:	9d08      	ldr	r5, [sp, #32]
 8021578:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802157a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802157e:	fb08 1805 	mla	r8, r8, r5, r1
 8021582:	9d05      	ldr	r5, [sp, #20]
 8021584:	fa1f f888 	uxth.w	r8, r8
 8021588:	f108 0101 	add.w	r1, r8, #1
 802158c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021590:	9903      	ldr	r1, [sp, #12]
 8021592:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021596:	f881 8000 	strb.w	r8, [r1]
 802159a:	fb03 f10a 	mul.w	r1, r3, sl
 802159e:	fb07 1105 	mla	r1, r7, r5, r1
 80215a2:	9d02      	ldr	r5, [sp, #8]
 80215a4:	fb0c 1105 	mla	r1, ip, r5, r1
 80215a8:	9d07      	ldr	r5, [sp, #28]
 80215aa:	fb05 1102 	mla	r1, r5, r2, r1
 80215ae:	9a08      	ldr	r2, [sp, #32]
 80215b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80215b4:	fb01 0102 	mla	r1, r1, r2, r0
 80215b8:	9a03      	ldr	r2, [sp, #12]
 80215ba:	b289      	uxth	r1, r1
 80215bc:	1c48      	adds	r0, r1, #1
 80215be:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80215c2:	1209      	asrs	r1, r1, #8
 80215c4:	7051      	strb	r1, [r2, #1]
 80215c6:	9a01      	ldr	r2, [sp, #4]
 80215c8:	4353      	muls	r3, r2
 80215ca:	9a06      	ldr	r2, [sp, #24]
 80215cc:	fb07 3702 	mla	r7, r7, r2, r3
 80215d0:	9b08      	ldr	r3, [sp, #32]
 80215d2:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80215d6:	fb05 c606 	mla	r6, r5, r6, ip
 80215da:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80215de:	fb06 4603 	mla	r6, r6, r3, r4
 80215e2:	9b03      	ldr	r3, [sp, #12]
 80215e4:	b2b6      	uxth	r6, r6
 80215e6:	f106 0e01 	add.w	lr, r6, #1
 80215ea:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80215ee:	1236      	asrs	r6, r6, #8
 80215f0:	709e      	strb	r6, [r3, #2]
 80215f2:	b00d      	add	sp, #52	; 0x34
 80215f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215f8:	f1bc 0f0f 	cmp.w	ip, #15
 80215fc:	f63f af60 	bhi.w	80214c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021600:	4626      	mov	r6, r4
 8021602:	4602      	mov	r2, r0
 8021604:	460d      	mov	r5, r1
 8021606:	46a6      	mov	lr, r4
 8021608:	9002      	str	r0, [sp, #8]
 802160a:	4688      	mov	r8, r1
 802160c:	e783      	b.n	8021516 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802160e:	bf00      	nop
 8021610:	0802b39d 	.word	0x0802b39d
 8021614:	0802b892 	.word	0x0802b892
 8021618:	0802b466 	.word	0x0802b466

0802161c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021620:	ed2d 8b08 	vpush	{d8-d11}
 8021624:	b0a1      	sub	sp, #132	; 0x84
 8021626:	eeb0 aa40 	vmov.f32	s20, s0
 802162a:	eef0 9a60 	vmov.f32	s19, s1
 802162e:	9307      	str	r3, [sp, #28]
 8021630:	eeb0 9a41 	vmov.f32	s18, s2
 8021634:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8021638:	eeb0 8a62 	vmov.f32	s16, s5
 802163c:	9210      	str	r2, [sp, #64]	; 0x40
 802163e:	eef0 8a43 	vmov.f32	s17, s6
 8021642:	9308      	str	r3, [sp, #32]
 8021644:	eef0 ba44 	vmov.f32	s23, s8
 8021648:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 802164c:	eeb0 ba64 	vmov.f32	s22, s9
 8021650:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8021652:	eef0 aa45 	vmov.f32	s21, s10
 8021656:	930a      	str	r3, [sp, #40]	; 0x28
 8021658:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 802165c:	901f      	str	r0, [sp, #124]	; 0x7c
 802165e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021660:	6850      	ldr	r0, [r2, #4]
 8021662:	910e      	str	r1, [sp, #56]	; 0x38
 8021664:	6812      	ldr	r2, [r2, #0]
 8021666:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 802166a:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802166e:	fb00 1303 	mla	r3, r0, r3, r1
 8021672:	9908      	ldr	r1, [sp, #32]
 8021674:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021678:	18d3      	adds	r3, r2, r3
 802167a:	2203      	movs	r2, #3
 802167c:	9309      	str	r3, [sp, #36]	; 0x24
 802167e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8021680:	681b      	ldr	r3, [r3, #0]
 8021682:	930c      	str	r3, [sp, #48]	; 0x30
 8021684:	f06f 0304 	mvn.w	r3, #4
 8021688:	fb11 3302 	smlabb	r3, r1, r2, r3
 802168c:	930d      	str	r3, [sp, #52]	; 0x34
 802168e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021690:	43db      	mvns	r3, r3
 8021692:	b2db      	uxtb	r3, r3
 8021694:	930b      	str	r3, [sp, #44]	; 0x2c
 8021696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021698:	2b00      	cmp	r3, #0
 802169a:	dc03      	bgt.n	80216a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802169c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802169e:	2b00      	cmp	r3, #0
 80216a0:	f340 81df 	ble.w	8021a62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80216a4:	9b07      	ldr	r3, [sp, #28]
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	f340 80f2 	ble.w	8021890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80216ac:	ea5f 4228 	movs.w	r2, r8, asr #16
 80216b0:	ea4f 432b 	mov.w	r3, fp, asr #16
 80216b4:	d430      	bmi.n	8021718 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80216b6:	1c51      	adds	r1, r2, #1
 80216b8:	9808      	ldr	r0, [sp, #32]
 80216ba:	4281      	cmp	r1, r0
 80216bc:	da2f      	bge.n	802171e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80216be:	2b00      	cmp	r3, #0
 80216c0:	db2d      	blt.n	802171e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80216c2:	1c59      	adds	r1, r3, #1
 80216c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80216c6:	4288      	cmp	r0, r1
 80216c8:	dd29      	ble.n	802171e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80216ca:	9b07      	ldr	r3, [sp, #28]
 80216cc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80216ce:	3b01      	subs	r3, #1
 80216d0:	fb02 8203 	mla	r2, r2, r3, r8
 80216d4:	1412      	asrs	r2, r2, #16
 80216d6:	d42d      	bmi.n	8021734 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80216d8:	3201      	adds	r2, #1
 80216da:	9908      	ldr	r1, [sp, #32]
 80216dc:	4291      	cmp	r1, r2
 80216de:	dd29      	ble.n	8021734 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80216e0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80216e2:	fb02 b303 	mla	r3, r2, r3, fp
 80216e6:	141b      	asrs	r3, r3, #16
 80216e8:	d424      	bmi.n	8021734 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80216ea:	3301      	adds	r3, #1
 80216ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80216ee:	429a      	cmp	r2, r3
 80216f0:	dd20      	ble.n	8021734 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80216f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216f4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80216f8:	1cde      	adds	r6, r3, #3
 80216fa:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 80216fe:	f1bc 0f00 	cmp.w	ip, #0
 8021702:	f300 811f 	bgt.w	8021944 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8021706:	9b07      	ldr	r3, [sp, #28]
 8021708:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802170c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802170e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021712:	4423      	add	r3, r4
 8021714:	9309      	str	r3, [sp, #36]	; 0x24
 8021716:	e0bd      	b.n	8021894 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021718:	1c57      	adds	r7, r2, #1
 802171a:	f040 80ae 	bne.w	802187a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802171e:	9908      	ldr	r1, [sp, #32]
 8021720:	428a      	cmp	r2, r1
 8021722:	f280 80aa 	bge.w	802187a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021726:	1c5e      	adds	r6, r3, #1
 8021728:	f2c0 80a7 	blt.w	802187a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802172c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802172e:	4293      	cmp	r3, r2
 8021730:	f280 80a3 	bge.w	802187a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021734:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021738:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802173a:	f1ba 0f00 	cmp.w	sl, #0
 802173e:	dde2      	ble.n	8021706 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8021740:	ea5f 4028 	movs.w	r0, r8, asr #16
 8021744:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8021748:	ea4f 412b 	mov.w	r1, fp, asr #16
 802174c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021750:	f100 80df 	bmi.w	8021912 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8021754:	1c45      	adds	r5, r0, #1
 8021756:	9f08      	ldr	r7, [sp, #32]
 8021758:	42af      	cmp	r7, r5
 802175a:	f340 80dc 	ble.w	8021916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802175e:	2900      	cmp	r1, #0
 8021760:	f2c0 80d9 	blt.w	8021916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8021764:	1c4d      	adds	r5, r1, #1
 8021766:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021768:	42af      	cmp	r7, r5
 802176a:	f340 80d4 	ble.w	8021916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802176e:	9d08      	ldr	r5, [sp, #32]
 8021770:	fb05 0101 	mla	r1, r5, r1, r0
 8021774:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021776:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802177a:	1845      	adds	r5, r0, r1
 802177c:	5c40      	ldrb	r0, [r0, r1]
 802177e:	792f      	ldrb	r7, [r5, #4]
 8021780:	7869      	ldrb	r1, [r5, #1]
 8021782:	9711      	str	r7, [sp, #68]	; 0x44
 8021784:	796f      	ldrb	r7, [r5, #5]
 8021786:	f895 e002 	ldrb.w	lr, [r5, #2]
 802178a:	f895 9003 	ldrb.w	r9, [r5, #3]
 802178e:	9712      	str	r7, [sp, #72]	; 0x48
 8021790:	b17a      	cbz	r2, 80217b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8021792:	3505      	adds	r5, #5
 8021794:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021796:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021798:	19ef      	adds	r7, r5, r7
 802179a:	5d2d      	ldrb	r5, [r5, r4]
 802179c:	787c      	ldrb	r4, [r7, #1]
 802179e:	9513      	str	r5, [sp, #76]	; 0x4c
 80217a0:	9415      	str	r4, [sp, #84]	; 0x54
 80217a2:	78bc      	ldrb	r4, [r7, #2]
 80217a4:	9417      	str	r4, [sp, #92]	; 0x5c
 80217a6:	78fc      	ldrb	r4, [r7, #3]
 80217a8:	9414      	str	r4, [sp, #80]	; 0x50
 80217aa:	793c      	ldrb	r4, [r7, #4]
 80217ac:	9416      	str	r4, [sp, #88]	; 0x58
 80217ae:	797c      	ldrb	r4, [r7, #5]
 80217b0:	9418      	str	r4, [sp, #96]	; 0x60
 80217b2:	b29b      	uxth	r3, r3
 80217b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80217b6:	b292      	uxth	r2, r2
 80217b8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80217bc:	fb03 f702 	mul.w	r7, r3, r2
 80217c0:	011b      	lsls	r3, r3, #4
 80217c2:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80217c6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80217ca:	1bdb      	subs	r3, r3, r7
 80217cc:	b292      	uxth	r2, r2
 80217ce:	b29b      	uxth	r3, r3
 80217d0:	ebac 0c02 	sub.w	ip, ip, r2
 80217d4:	fb03 f909 	mul.w	r9, r3, r9
 80217d8:	fa1f fc8c 	uxth.w	ip, ip
 80217dc:	fb0c 9000 	mla	r0, ip, r0, r9
 80217e0:	f896 9000 	ldrb.w	r9, [r6]
 80217e4:	fb02 0004 	mla	r0, r2, r4, r0
 80217e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80217ea:	fb07 0004 	mla	r0, r7, r4, r0
 80217ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80217f0:	fb19 f904 	smulbb	r9, r9, r4
 80217f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80217f8:	fb00 9005 	mla	r0, r0, r5, r9
 80217fc:	b280      	uxth	r0, r0
 80217fe:	f100 0901 	add.w	r9, r0, #1
 8021802:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021806:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021808:	4358      	muls	r0, r3
 802180a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802180e:	fb0c 0101 	mla	r1, ip, r1, r0
 8021812:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021814:	f886 9000 	strb.w	r9, [r6]
 8021818:	fb02 1100 	mla	r1, r2, r0, r1
 802181c:	9816      	ldr	r0, [sp, #88]	; 0x58
 802181e:	fb07 1100 	mla	r1, r7, r0, r1
 8021822:	7870      	ldrb	r0, [r6, #1]
 8021824:	fb10 f004 	smulbb	r0, r0, r4
 8021828:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802182c:	fb01 0105 	mla	r1, r1, r5, r0
 8021830:	b289      	uxth	r1, r1
 8021832:	1c48      	adds	r0, r1, #1
 8021834:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021838:	1209      	asrs	r1, r1, #8
 802183a:	7071      	strb	r1, [r6, #1]
 802183c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802183e:	434b      	muls	r3, r1
 8021840:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021842:	fb0c 330e 	mla	r3, ip, lr, r3
 8021846:	fb02 3201 	mla	r2, r2, r1, r3
 802184a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802184c:	fb07 2703 	mla	r7, r7, r3, r2
 8021850:	78b2      	ldrb	r2, [r6, #2]
 8021852:	fb12 f204 	smulbb	r2, r2, r4
 8021856:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802185a:	fb07 2505 	mla	r5, r7, r5, r2
 802185e:	b2ad      	uxth	r5, r5
 8021860:	1c6f      	adds	r7, r5, #1
 8021862:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8021866:	122d      	asrs	r5, r5, #8
 8021868:	70b5      	strb	r5, [r6, #2]
 802186a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802186c:	3603      	adds	r6, #3
 802186e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021872:	4498      	add	r8, r3
 8021874:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021876:	449b      	add	fp, r3
 8021878:	e75f      	b.n	802173a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802187a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802187c:	4498      	add	r8, r3
 802187e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021880:	449b      	add	fp, r3
 8021882:	9b07      	ldr	r3, [sp, #28]
 8021884:	3b01      	subs	r3, #1
 8021886:	9307      	str	r3, [sp, #28]
 8021888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802188a:	3303      	adds	r3, #3
 802188c:	9309      	str	r3, [sp, #36]	; 0x24
 802188e:	e709      	b.n	80216a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8021890:	f47f af1b 	bne.w	80216ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8021894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021896:	2b00      	cmp	r3, #0
 8021898:	f340 80e3 	ble.w	8021a62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802189c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80218a0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80218a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80218a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80218aa:	eef0 6a48 	vmov.f32	s13, s16
 80218ae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80218b2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80218b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218ba:	ee16 8a90 	vmov	r8, s13
 80218be:	eef0 6a68 	vmov.f32	s13, s17
 80218c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218c6:	ee16 ba90 	vmov	fp, s13
 80218ca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80218ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80218d2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80218d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80218da:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80218de:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80218e2:	ee18 2a10 	vmov	r2, s16
 80218e6:	eeb0 8a47 	vmov.f32	s16, s14
 80218ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80218ee:	ee18 2a90 	vmov	r2, s17
 80218f2:	9335      	str	r3, [sp, #212]	; 0xd4
 80218f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80218f6:	eef0 8a67 	vmov.f32	s17, s15
 80218fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80218fe:	9336      	str	r3, [sp, #216]	; 0xd8
 8021900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021902:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021904:	3b01      	subs	r3, #1
 8021906:	930e      	str	r3, [sp, #56]	; 0x38
 8021908:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802190a:	bf08      	it	eq
 802190c:	4613      	moveq	r3, r2
 802190e:	9307      	str	r3, [sp, #28]
 8021910:	e6c1      	b.n	8021696 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021912:	1c45      	adds	r5, r0, #1
 8021914:	d1a9      	bne.n	802186a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021916:	9c08      	ldr	r4, [sp, #32]
 8021918:	42a0      	cmp	r0, r4
 802191a:	daa6      	bge.n	802186a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802191c:	1c4c      	adds	r4, r1, #1
 802191e:	dba4      	blt.n	802186a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021920:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021922:	428c      	cmp	r4, r1
 8021924:	dda1      	ble.n	802186a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021926:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021928:	9001      	str	r0, [sp, #4]
 802192a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802192c:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8021930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021932:	4631      	mov	r1, r6
 8021934:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8021938:	9300      	str	r3, [sp, #0]
 802193a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802193c:	9b08      	ldr	r3, [sp, #32]
 802193e:	f7ff fd5b 	bl	80213f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8021942:	e792      	b.n	802186a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021944:	ea4f 4228 	mov.w	r2, r8, asr #16
 8021948:	9c08      	ldr	r4, [sp, #32]
 802194a:	ea4f 402b 	mov.w	r0, fp, asr #16
 802194e:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8021952:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8021956:	fb04 2000 	mla	r0, r4, r0, r2
 802195a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802195c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802195e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021962:	4402      	add	r2, r0
 8021964:	5c25      	ldrb	r5, [r4, r0]
 8021966:	7894      	ldrb	r4, [r2, #2]
 8021968:	7850      	ldrb	r0, [r2, #1]
 802196a:	9411      	str	r4, [sp, #68]	; 0x44
 802196c:	7954      	ldrb	r4, [r2, #5]
 802196e:	f892 a003 	ldrb.w	sl, [r2, #3]
 8021972:	f892 9004 	ldrb.w	r9, [r2, #4]
 8021976:	9412      	str	r4, [sp, #72]	; 0x48
 8021978:	b171      	cbz	r1, 8021998 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802197a:	3205      	adds	r2, #5
 802197c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802197e:	1917      	adds	r7, r2, r4
 8021980:	5d12      	ldrb	r2, [r2, r4]
 8021982:	9219      	str	r2, [sp, #100]	; 0x64
 8021984:	787a      	ldrb	r2, [r7, #1]
 8021986:	921b      	str	r2, [sp, #108]	; 0x6c
 8021988:	78ba      	ldrb	r2, [r7, #2]
 802198a:	921d      	str	r2, [sp, #116]	; 0x74
 802198c:	78fa      	ldrb	r2, [r7, #3]
 802198e:	921a      	str	r2, [sp, #104]	; 0x68
 8021990:	793a      	ldrb	r2, [r7, #4]
 8021992:	921c      	str	r2, [sp, #112]	; 0x70
 8021994:	797a      	ldrb	r2, [r7, #5]
 8021996:	921e      	str	r2, [sp, #120]	; 0x78
 8021998:	b29b      	uxth	r3, r3
 802199a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802199c:	b289      	uxth	r1, r1
 802199e:	3603      	adds	r6, #3
 80219a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80219a4:	fb03 f201 	mul.w	r2, r3, r1
 80219a8:	011b      	lsls	r3, r3, #4
 80219aa:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80219ae:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80219b2:	1a9b      	subs	r3, r3, r2
 80219b4:	b289      	uxth	r1, r1
 80219b6:	b29b      	uxth	r3, r3
 80219b8:	1a7f      	subs	r7, r7, r1
 80219ba:	fb03 fa0a 	mul.w	sl, r3, sl
 80219be:	b2bf      	uxth	r7, r7
 80219c0:	fb03 f909 	mul.w	r9, r3, r9
 80219c4:	fb07 a505 	mla	r5, r7, r5, sl
 80219c8:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 80219cc:	fb07 9000 	mla	r0, r7, r0, r9
 80219d0:	fb01 5504 	mla	r5, r1, r4, r5
 80219d4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80219d6:	fb02 5504 	mla	r5, r2, r4, r5
 80219da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219dc:	fb1a fa04 	smulbb	sl, sl, r4
 80219e0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80219e4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80219e6:	fb05 a50e 	mla	r5, r5, lr, sl
 80219ea:	fb01 0004 	mla	r0, r1, r4, r0
 80219ee:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80219f0:	b2ad      	uxth	r5, r5
 80219f2:	fb02 0004 	mla	r0, r2, r4, r0
 80219f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219f8:	f105 0a01 	add.w	sl, r5, #1
 80219fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021a00:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021a04:	122d      	asrs	r5, r5, #8
 8021a06:	f806 5c06 	strb.w	r5, [r6, #-6]
 8021a0a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8021a0e:	fb15 f504 	smulbb	r5, r5, r4
 8021a12:	fb00 500e 	mla	r0, r0, lr, r5
 8021a16:	b280      	uxth	r0, r0
 8021a18:	1c45      	adds	r5, r0, #1
 8021a1a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021a1e:	1200      	asrs	r0, r0, #8
 8021a20:	f806 0c05 	strb.w	r0, [r6, #-5]
 8021a24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021a26:	4343      	muls	r3, r0
 8021a28:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021a2a:	fb07 3300 	mla	r3, r7, r0, r3
 8021a2e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021a30:	fb01 3100 	mla	r1, r1, r0, r3
 8021a34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021a36:	fb02 1203 	mla	r2, r2, r3, r1
 8021a3a:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8021a3e:	fb11 f104 	smulbb	r1, r1, r4
 8021a42:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021a46:	fb02 120e 	mla	r2, r2, lr, r1
 8021a4a:	b292      	uxth	r2, r2
 8021a4c:	1c53      	adds	r3, r2, #1
 8021a4e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021a52:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8021a54:	1212      	asrs	r2, r2, #8
 8021a56:	4498      	add	r8, r3
 8021a58:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021a5a:	f806 2c04 	strb.w	r2, [r6, #-4]
 8021a5e:	449b      	add	fp, r3
 8021a60:	e64d      	b.n	80216fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8021a62:	b021      	add	sp, #132	; 0x84
 8021a64:	ecbd 8b08 	vpop	{d8-d11}
 8021a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a70:	b085      	sub	sp, #20
 8021a72:	784d      	ldrb	r5, [r1, #1]
 8021a74:	788e      	ldrb	r6, [r1, #2]
 8021a76:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8021a7a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8021a7e:	9403      	str	r4, [sp, #12]
 8021a80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021a84:	780c      	ldrb	r4, [r1, #0]
 8021a86:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8021a8a:	fb07 ce03 	mla	lr, r7, r3, ip
 8021a8e:	2f00      	cmp	r7, #0
 8021a90:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021a94:	eb02 0b0e 	add.w	fp, r2, lr
 8021a98:	db56      	blt.n	8021b48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021a9a:	45b9      	cmp	r9, r7
 8021a9c:	dd54      	ble.n	8021b48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021a9e:	f1bc 0f00 	cmp.w	ip, #0
 8021aa2:	db4d      	blt.n	8021b40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021aa4:	4563      	cmp	r3, ip
 8021aa6:	dd4b      	ble.n	8021b40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021aa8:	f812 200e 	ldrb.w	r2, [r2, lr]
 8021aac:	9200      	str	r2, [sp, #0]
 8021aae:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021ab2:	9201      	str	r2, [sp, #4]
 8021ab4:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021ab8:	9202      	str	r2, [sp, #8]
 8021aba:	f11c 0201 	adds.w	r2, ip, #1
 8021abe:	d44a      	bmi.n	8021b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021ac0:	4293      	cmp	r3, r2
 8021ac2:	dd48      	ble.n	8021b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021ac4:	2800      	cmp	r0, #0
 8021ac6:	d046      	beq.n	8021b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021ac8:	f89b e003 	ldrb.w	lr, [fp, #3]
 8021acc:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021ad0:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021ad4:	3701      	adds	r7, #1
 8021ad6:	d446      	bmi.n	8021b66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021ad8:	45b9      	cmp	r9, r7
 8021ada:	dd44      	ble.n	8021b66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021adc:	9a03      	ldr	r2, [sp, #12]
 8021ade:	2a00      	cmp	r2, #0
 8021ae0:	d045      	beq.n	8021b6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021ae2:	f1bc 0f00 	cmp.w	ip, #0
 8021ae6:	db3a      	blt.n	8021b5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021ae8:	4563      	cmp	r3, ip
 8021aea:	dd38      	ble.n	8021b5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021aec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021af0:	f04f 0903 	mov.w	r9, #3
 8021af4:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021af8:	fb03 b209 	mla	r2, r3, r9, fp
 8021afc:	fb03 b909 	mla	r9, r3, r9, fp
 8021b00:	7852      	ldrb	r2, [r2, #1]
 8021b02:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021b06:	f11c 0c01 	adds.w	ip, ip, #1
 8021b0a:	d40d      	bmi.n	8021b28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021b0c:	4563      	cmp	r3, ip
 8021b0e:	dd0b      	ble.n	8021b28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021b10:	b160      	cbz	r0, 8021b2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021b12:	2603      	movs	r6, #3
 8021b14:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021b18:	fb03 b506 	mla	r5, r3, r6, fp
 8021b1c:	fb03 b306 	mla	r3, r3, r6, fp
 8021b20:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021b24:	792d      	ldrb	r5, [r5, #4]
 8021b26:	795e      	ldrb	r6, [r3, #5]
 8021b28:	280f      	cmp	r0, #15
 8021b2a:	d802      	bhi.n	8021b32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021b2c:	9b03      	ldr	r3, [sp, #12]
 8021b2e:	2b0f      	cmp	r3, #15
 8021b30:	d922      	bls.n	8021b78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8021b32:	4b2f      	ldr	r3, [pc, #188]	; (8021bf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8021b34:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021b38:	4a2e      	ldr	r2, [pc, #184]	; (8021bf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8021b3a:	482f      	ldr	r0, [pc, #188]	; (8021bf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8021b3c:	f003 ffa0 	bl	8025a80 <__assert_func>
 8021b40:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021b44:	9400      	str	r4, [sp, #0]
 8021b46:	e7b8      	b.n	8021aba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8021b48:	46b2      	mov	sl, r6
 8021b4a:	46a8      	mov	r8, r5
 8021b4c:	46a6      	mov	lr, r4
 8021b4e:	9400      	str	r4, [sp, #0]
 8021b50:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021b54:	e7be      	b.n	8021ad4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021b56:	46b2      	mov	sl, r6
 8021b58:	46a8      	mov	r8, r5
 8021b5a:	46a6      	mov	lr, r4
 8021b5c:	e7ba      	b.n	8021ad4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021b5e:	46b1      	mov	r9, r6
 8021b60:	462a      	mov	r2, r5
 8021b62:	4627      	mov	r7, r4
 8021b64:	e7cf      	b.n	8021b06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021b66:	46b1      	mov	r9, r6
 8021b68:	462a      	mov	r2, r5
 8021b6a:	4627      	mov	r7, r4
 8021b6c:	e7dc      	b.n	8021b28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021b6e:	280f      	cmp	r0, #15
 8021b70:	d8df      	bhi.n	8021b32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021b72:	46b1      	mov	r9, r6
 8021b74:	462a      	mov	r2, r5
 8021b76:	4627      	mov	r7, r4
 8021b78:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8021b7c:	b280      	uxth	r0, r0
 8021b7e:	fb00 f30b 	mul.w	r3, r0, fp
 8021b82:	0100      	lsls	r0, r0, #4
 8021b84:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021b88:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8021b8c:	1ac0      	subs	r0, r0, r3
 8021b8e:	fa1f fb8b 	uxth.w	fp, fp
 8021b92:	b280      	uxth	r0, r0
 8021b94:	ebac 0c0b 	sub.w	ip, ip, fp
 8021b98:	9003      	str	r0, [sp, #12]
 8021b9a:	fa1f fc8c 	uxth.w	ip, ip
 8021b9e:	fb00 fe0e 	mul.w	lr, r0, lr
 8021ba2:	9800      	ldr	r0, [sp, #0]
 8021ba4:	fb0c ee00 	mla	lr, ip, r0, lr
 8021ba8:	9803      	ldr	r0, [sp, #12]
 8021baa:	fb00 f808 	mul.w	r8, r0, r8
 8021bae:	9801      	ldr	r0, [sp, #4]
 8021bb0:	fb0b ee07 	mla	lr, fp, r7, lr
 8021bb4:	fb0c 8800 	mla	r8, ip, r0, r8
 8021bb8:	fb03 ee04 	mla	lr, r3, r4, lr
 8021bbc:	fb0b 8202 	mla	r2, fp, r2, r8
 8021bc0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021bc4:	fb03 2505 	mla	r5, r3, r5, r2
 8021bc8:	9a03      	ldr	r2, [sp, #12]
 8021bca:	f881 e000 	strb.w	lr, [r1]
 8021bce:	fb02 f00a 	mul.w	r0, r2, sl
 8021bd2:	9a02      	ldr	r2, [sp, #8]
 8021bd4:	122d      	asrs	r5, r5, #8
 8021bd6:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021bda:	704d      	strb	r5, [r1, #1]
 8021bdc:	fb0b c909 	mla	r9, fp, r9, ip
 8021be0:	fb03 9606 	mla	r6, r3, r6, r9
 8021be4:	1236      	asrs	r6, r6, #8
 8021be6:	708e      	strb	r6, [r1, #2]
 8021be8:	b005      	add	sp, #20
 8021bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bee:	bf00      	nop
 8021bf0:	0802b39d 	.word	0x0802b39d
 8021bf4:	0802b892 	.word	0x0802b892
 8021bf8:	0802b466 	.word	0x0802b466

08021bfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c00:	ed2d 8b0a 	vpush	{d8-d12}
 8021c04:	b09d      	sub	sp, #116	; 0x74
 8021c06:	eeb0 aa40 	vmov.f32	s20, s0
 8021c0a:	eef0 9a60 	vmov.f32	s19, s1
 8021c0e:	9306      	str	r3, [sp, #24]
 8021c10:	eeb0 9a41 	vmov.f32	s18, s2
 8021c14:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8021c18:	eeb0 8a62 	vmov.f32	s16, s5
 8021c1c:	901b      	str	r0, [sp, #108]	; 0x6c
 8021c1e:	eef0 8a43 	vmov.f32	s17, s6
 8021c22:	9307      	str	r3, [sp, #28]
 8021c24:	eeb0 ca44 	vmov.f32	s24, s8
 8021c28:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8021c2c:	eef0 ba64 	vmov.f32	s23, s9
 8021c30:	eeb0 ba45 	vmov.f32	s22, s10
 8021c34:	9309      	str	r3, [sp, #36]	; 0x24
 8021c36:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8021c3a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8021c3e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8021c40:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8021c44:	6850      	ldr	r0, [r2, #4]
 8021c46:	6812      	ldr	r2, [r2, #0]
 8021c48:	fb00 1303 	mla	r3, r0, r3, r1
 8021c4c:	9907      	ldr	r1, [sp, #28]
 8021c4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c52:	18d3      	adds	r3, r2, r3
 8021c54:	2203      	movs	r2, #3
 8021c56:	9308      	str	r3, [sp, #32]
 8021c58:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8021c5a:	681b      	ldr	r3, [r3, #0]
 8021c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8021c5e:	f06f 0304 	mvn.w	r3, #4
 8021c62:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8021c66:	fb11 3302 	smlabb	r3, r1, r2, r3
 8021c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	dc03      	bgt.n	8021c7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	f340 8193 	ble.w	8021fa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8021c7a:	9b06      	ldr	r3, [sp, #24]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	f340 80d0 	ble.w	8021e22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8021c82:	1432      	asrs	r2, r6, #16
 8021c84:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021c88:	d42f      	bmi.n	8021cea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8021c8a:	1c51      	adds	r1, r2, #1
 8021c8c:	9807      	ldr	r0, [sp, #28]
 8021c8e:	4281      	cmp	r1, r0
 8021c90:	da2e      	bge.n	8021cf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021c92:	2b00      	cmp	r3, #0
 8021c94:	db2c      	blt.n	8021cf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021c96:	1c59      	adds	r1, r3, #1
 8021c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021c9a:	4288      	cmp	r0, r1
 8021c9c:	dd28      	ble.n	8021cf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021c9e:	9b06      	ldr	r3, [sp, #24]
 8021ca0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021ca2:	3b01      	subs	r3, #1
 8021ca4:	fb02 6203 	mla	r2, r2, r3, r6
 8021ca8:	1412      	asrs	r2, r2, #16
 8021caa:	d42c      	bmi.n	8021d06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021cac:	3201      	adds	r2, #1
 8021cae:	9907      	ldr	r1, [sp, #28]
 8021cb0:	4291      	cmp	r1, r2
 8021cb2:	dd28      	ble.n	8021d06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021cb4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021cb6:	fb02 5303 	mla	r3, r2, r3, r5
 8021cba:	141b      	asrs	r3, r3, #16
 8021cbc:	d423      	bmi.n	8021d06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021cbe:	3301      	adds	r3, #1
 8021cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021cc2:	429a      	cmp	r2, r3
 8021cc4:	dd1f      	ble.n	8021d06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021cc6:	9b08      	ldr	r3, [sp, #32]
 8021cc8:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021ccc:	f103 0c03 	add.w	ip, r3, #3
 8021cd0:	f1be 0f00 	cmp.w	lr, #0
 8021cd4:	f300 80fa 	bgt.w	8021ecc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021cd8:	9b06      	ldr	r3, [sp, #24]
 8021cda:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021cde:	9b08      	ldr	r3, [sp, #32]
 8021ce0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021ce4:	4423      	add	r3, r4
 8021ce6:	9308      	str	r3, [sp, #32]
 8021ce8:	e09d      	b.n	8021e26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021cea:	1c51      	adds	r1, r2, #1
 8021cec:	f040 808e 	bne.w	8021e0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021cf0:	9907      	ldr	r1, [sp, #28]
 8021cf2:	428a      	cmp	r2, r1
 8021cf4:	f280 808a 	bge.w	8021e0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021cf8:	1c5f      	adds	r7, r3, #1
 8021cfa:	f2c0 8087 	blt.w	8021e0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d00:	4293      	cmp	r3, r2
 8021d02:	f280 8083 	bge.w	8021e0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021d06:	9f06      	ldr	r7, [sp, #24]
 8021d08:	f8dd a020 	ldr.w	sl, [sp, #32]
 8021d0c:	2f00      	cmp	r7, #0
 8021d0e:	dde3      	ble.n	8021cd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8021d10:	1432      	asrs	r2, r6, #16
 8021d12:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021d16:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021d1a:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8021d1e:	f100 80bf 	bmi.w	8021ea0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8021d22:	1c50      	adds	r0, r2, #1
 8021d24:	9c07      	ldr	r4, [sp, #28]
 8021d26:	4284      	cmp	r4, r0
 8021d28:	f340 80bc 	ble.w	8021ea4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	f2c0 80b9 	blt.w	8021ea4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021d32:	1c58      	adds	r0, r3, #1
 8021d34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021d36:	4284      	cmp	r4, r0
 8021d38:	f340 80b4 	ble.w	8021ea4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021d3c:	9807      	ldr	r0, [sp, #28]
 8021d3e:	fb00 2303 	mla	r3, r0, r3, r2
 8021d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021d44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021d46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d4a:	441a      	add	r2, r3
 8021d4c:	f810 c003 	ldrb.w	ip, [r0, r3]
 8021d50:	7953      	ldrb	r3, [r2, #5]
 8021d52:	7850      	ldrb	r0, [r2, #1]
 8021d54:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021d58:	f892 9003 	ldrb.w	r9, [r2, #3]
 8021d5c:	f892 8004 	ldrb.w	r8, [r2, #4]
 8021d60:	930e      	str	r3, [sp, #56]	; 0x38
 8021d62:	f1bb 0f00 	cmp.w	fp, #0
 8021d66:	d00f      	beq.n	8021d88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8021d68:	3205      	adds	r2, #5
 8021d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021d6e:	18d3      	adds	r3, r2, r3
 8021d70:	5d12      	ldrb	r2, [r2, r4]
 8021d72:	920f      	str	r2, [sp, #60]	; 0x3c
 8021d74:	785a      	ldrb	r2, [r3, #1]
 8021d76:	9211      	str	r2, [sp, #68]	; 0x44
 8021d78:	789a      	ldrb	r2, [r3, #2]
 8021d7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8021d7c:	78da      	ldrb	r2, [r3, #3]
 8021d7e:	9210      	str	r2, [sp, #64]	; 0x40
 8021d80:	791a      	ldrb	r2, [r3, #4]
 8021d82:	795b      	ldrb	r3, [r3, #5]
 8021d84:	9212      	str	r2, [sp, #72]	; 0x48
 8021d86:	9314      	str	r3, [sp, #80]	; 0x50
 8021d88:	b28b      	uxth	r3, r1
 8021d8a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021d8c:	fa1f f28b 	uxth.w	r2, fp
 8021d90:	fb03 fb02 	mul.w	fp, r3, r2
 8021d94:	011b      	lsls	r3, r3, #4
 8021d96:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8021d9a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8021d9e:	eba3 030b 	sub.w	r3, r3, fp
 8021da2:	b292      	uxth	r2, r2
 8021da4:	b29b      	uxth	r3, r3
 8021da6:	1a89      	subs	r1, r1, r2
 8021da8:	fb03 f808 	mul.w	r8, r3, r8
 8021dac:	b289      	uxth	r1, r1
 8021dae:	fb03 f909 	mul.w	r9, r3, r9
 8021db2:	fb01 8800 	mla	r8, r1, r0, r8
 8021db6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021db8:	fb01 990c 	mla	r9, r1, ip, r9
 8021dbc:	fb02 8800 	mla	r8, r2, r0, r8
 8021dc0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021dc2:	fb02 9904 	mla	r9, r2, r4, r9
 8021dc6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021dc8:	fb0b 8800 	mla	r8, fp, r0, r8
 8021dcc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021dce:	fb0b 9904 	mla	r9, fp, r4, r9
 8021dd2:	4343      	muls	r3, r0
 8021dd4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021dd8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021ddc:	fb01 330e 	mla	r3, r1, lr, r3
 8021de0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021de2:	f88a 9000 	strb.w	r9, [sl]
 8021de6:	fb02 3201 	mla	r2, r2, r1, r3
 8021dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021dec:	f88a 8001 	strb.w	r8, [sl, #1]
 8021df0:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021df4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021df8:	f88a b002 	strb.w	fp, [sl, #2]
 8021dfc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021dfe:	f10a 0a03 	add.w	sl, sl, #3
 8021e02:	3f01      	subs	r7, #1
 8021e04:	441e      	add	r6, r3
 8021e06:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021e08:	441d      	add	r5, r3
 8021e0a:	e77f      	b.n	8021d0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021e0c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021e0e:	441e      	add	r6, r3
 8021e10:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021e12:	441d      	add	r5, r3
 8021e14:	9b06      	ldr	r3, [sp, #24]
 8021e16:	3b01      	subs	r3, #1
 8021e18:	9306      	str	r3, [sp, #24]
 8021e1a:	9b08      	ldr	r3, [sp, #32]
 8021e1c:	3303      	adds	r3, #3
 8021e1e:	9308      	str	r3, [sp, #32]
 8021e20:	e72b      	b.n	8021c7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021e22:	f47f af3c 	bne.w	8021c9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	f340 80b9 	ble.w	8021fa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8021e2e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021e32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021e34:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021e38:	eef0 6a48 	vmov.f32	s13, s16
 8021e3c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021e40:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021e44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e48:	ee16 6a90 	vmov	r6, s13
 8021e4c:	eef0 6a68 	vmov.f32	s13, s17
 8021e50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e54:	ee16 5a90 	vmov	r5, s13
 8021e58:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021e5c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021e60:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021e64:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021e68:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021e6c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021e70:	ee18 2a10 	vmov	r2, s16
 8021e74:	eeb0 8a47 	vmov.f32	s16, s14
 8021e78:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e7c:	ee18 2a90 	vmov	r2, s17
 8021e80:	9333      	str	r3, [sp, #204]	; 0xcc
 8021e82:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021e84:	eef0 8a67 	vmov.f32	s17, s15
 8021e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e8c:	9334      	str	r3, [sp, #208]	; 0xd0
 8021e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021e92:	3b01      	subs	r3, #1
 8021e94:	930c      	str	r3, [sp, #48]	; 0x30
 8021e96:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021e98:	bf08      	it	eq
 8021e9a:	4613      	moveq	r3, r2
 8021e9c:	9306      	str	r3, [sp, #24]
 8021e9e:	e6e5      	b.n	8021c6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021ea0:	1c54      	adds	r4, r2, #1
 8021ea2:	d1ab      	bne.n	8021dfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021ea4:	9807      	ldr	r0, [sp, #28]
 8021ea6:	4282      	cmp	r2, r0
 8021ea8:	daa8      	bge.n	8021dfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021eaa:	1c58      	adds	r0, r3, #1
 8021eac:	dba6      	blt.n	8021dfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021eb0:	4298      	cmp	r0, r3
 8021eb2:	dda3      	ble.n	8021dfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021eb4:	9000      	str	r0, [sp, #0]
 8021eb6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021eb8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021ebc:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021ec0:	9b07      	ldr	r3, [sp, #28]
 8021ec2:	4651      	mov	r1, sl
 8021ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ec6:	f7ff fdd1 	bl	8021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021eca:	e797      	b.n	8021dfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021ecc:	1431      	asrs	r1, r6, #16
 8021ece:	9c07      	ldr	r4, [sp, #28]
 8021ed0:	1428      	asrs	r0, r5, #16
 8021ed2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021ed6:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8021eda:	fb04 1000 	mla	r0, r4, r0, r1
 8021ede:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021ee0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ee2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021ee6:	4401      	add	r1, r0
 8021ee8:	5c20      	ldrb	r0, [r4, r0]
 8021eea:	f891 8002 	ldrb.w	r8, [r1, #2]
 8021eee:	900e      	str	r0, [sp, #56]	; 0x38
 8021ef0:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021ef4:	7848      	ldrb	r0, [r1, #1]
 8021ef6:	f891 9004 	ldrb.w	r9, [r1, #4]
 8021efa:	f891 b005 	ldrb.w	fp, [r1, #5]
 8021efe:	b172      	cbz	r2, 8021f1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021f00:	3105      	adds	r1, #5
 8021f02:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f04:	190f      	adds	r7, r1, r4
 8021f06:	5d09      	ldrb	r1, [r1, r4]
 8021f08:	9115      	str	r1, [sp, #84]	; 0x54
 8021f0a:	7879      	ldrb	r1, [r7, #1]
 8021f0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8021f0e:	78b9      	ldrb	r1, [r7, #2]
 8021f10:	9119      	str	r1, [sp, #100]	; 0x64
 8021f12:	78f9      	ldrb	r1, [r7, #3]
 8021f14:	9116      	str	r1, [sp, #88]	; 0x58
 8021f16:	7939      	ldrb	r1, [r7, #4]
 8021f18:	9118      	str	r1, [sp, #96]	; 0x60
 8021f1a:	7979      	ldrb	r1, [r7, #5]
 8021f1c:	911a      	str	r1, [sp, #104]	; 0x68
 8021f1e:	b29b      	uxth	r3, r3
 8021f20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f22:	b292      	uxth	r2, r2
 8021f24:	f10c 0c03 	add.w	ip, ip, #3
 8021f28:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021f2c:	fb03 f102 	mul.w	r1, r3, r2
 8021f30:	011b      	lsls	r3, r3, #4
 8021f32:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021f36:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021f3a:	1a5b      	subs	r3, r3, r1
 8021f3c:	b292      	uxth	r2, r2
 8021f3e:	b29b      	uxth	r3, r3
 8021f40:	1abf      	subs	r7, r7, r2
 8021f42:	fb03 f909 	mul.w	r9, r3, r9
 8021f46:	b2bf      	uxth	r7, r7
 8021f48:	fb03 fa0a 	mul.w	sl, r3, sl
 8021f4c:	fb03 f30b 	mul.w	r3, r3, fp
 8021f50:	fb07 9900 	mla	r9, r7, r0, r9
 8021f54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021f56:	fb07 aa04 	mla	sl, r7, r4, sl
 8021f5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f5c:	fb02 9900 	mla	r9, r2, r0, r9
 8021f60:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021f62:	fb07 3308 	mla	r3, r7, r8, r3
 8021f66:	fb01 9900 	mla	r9, r1, r0, r9
 8021f6a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021f6c:	fb02 aa04 	mla	sl, r2, r4, sl
 8021f70:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021f72:	fb02 3200 	mla	r2, r2, r0, r3
 8021f76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021f78:	fb01 aa04 	mla	sl, r1, r4, sl
 8021f7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f80:	fb01 2103 	mla	r1, r1, r3, r2
 8021f84:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021f86:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021f8a:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8021f8e:	1209      	asrs	r1, r1, #8
 8021f90:	441e      	add	r6, r3
 8021f92:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021f94:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021f98:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021f9c:	441d      	add	r5, r3
 8021f9e:	e697      	b.n	8021cd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021fa0:	b01d      	add	sp, #116	; 0x74
 8021fa2:	ecbd 8b0a 	vpop	{d8-d12}
 8021fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fb0:	b085      	sub	sp, #20
 8021fb2:	7888      	ldrb	r0, [r1, #2]
 8021fb4:	4691      	mov	r9, r2
 8021fb6:	9000      	str	r0, [sp, #0]
 8021fb8:	7848      	ldrb	r0, [r1, #1]
 8021fba:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021fbe:	9001      	str	r0, [sp, #4]
 8021fc0:	7808      	ldrb	r0, [r1, #0]
 8021fc2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021fc6:	9002      	str	r0, [sp, #8]
 8021fc8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021fcc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021fd0:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021fd4:	fb04 c603 	mla	r6, r4, r3, ip
 8021fd8:	2c00      	cmp	r4, #0
 8021fda:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021fde:	9a00      	ldr	r2, [sp, #0]
 8021fe0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021fe4:	9a01      	ldr	r2, [sp, #4]
 8021fe6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021fea:	db3a      	blt.n	8022062 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021fec:	45a0      	cmp	r8, r4
 8021fee:	dd38      	ble.n	8022062 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021ff0:	f1bc 0f00 	cmp.w	ip, #0
 8021ff4:	db33      	blt.n	802205e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021ff6:	4563      	cmp	r3, ip
 8021ff8:	dd31      	ble.n	802205e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021ffa:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021ffe:	f11c 0601 	adds.w	r6, ip, #1
 8022002:	d431      	bmi.n	8022068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8022004:	42b3      	cmp	r3, r6
 8022006:	dd2f      	ble.n	8022068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8022008:	b375      	cbz	r5, 8022068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 802200a:	f8de 6004 	ldr.w	r6, [lr, #4]
 802200e:	3401      	adds	r4, #1
 8022010:	d42e      	bmi.n	8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022012:	45a0      	cmp	r8, r4
 8022014:	dd2c      	ble.n	8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022016:	b35f      	cbz	r7, 8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022018:	f1bc 0f00 	cmp.w	ip, #0
 802201c:	db26      	blt.n	802206c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802201e:	4563      	cmp	r3, ip
 8022020:	dd24      	ble.n	802206c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8022022:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022026:	f11c 0c01 	adds.w	ip, ip, #1
 802202a:	d405      	bmi.n	8022038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802202c:	4563      	cmp	r3, ip
 802202e:	dd03      	ble.n	8022038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022030:	b115      	cbz	r5, 8022038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022032:	3301      	adds	r3, #1
 8022034:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022038:	2d0f      	cmp	r5, #15
 802203a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802203e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022042:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022046:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802204a:	d801      	bhi.n	8022050 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 802204c:	2f0f      	cmp	r7, #15
 802204e:	d911      	bls.n	8022074 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8022050:	4b80      	ldr	r3, [pc, #512]	; (8022254 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8022052:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022056:	4a80      	ldr	r2, [pc, #512]	; (8022258 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8022058:	4880      	ldr	r0, [pc, #512]	; (802225c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 802205a:	f003 fd11 	bl	8025a80 <__assert_func>
 802205e:	4602      	mov	r2, r0
 8022060:	e7cd      	b.n	8021ffe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8022062:	4606      	mov	r6, r0
 8022064:	4602      	mov	r2, r0
 8022066:	e7d2      	b.n	802200e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8022068:	4606      	mov	r6, r0
 802206a:	e7d0      	b.n	802200e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 802206c:	4604      	mov	r4, r0
 802206e:	e7da      	b.n	8022026 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8022070:	4604      	mov	r4, r0
 8022072:	e7e1      	b.n	8022038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022074:	b2ab      	uxth	r3, r5
 8022076:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802207a:	b2bf      	uxth	r7, r7
 802207c:	fb03 fe07 	mul.w	lr, r3, r7
 8022080:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022084:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022088:	eba3 0c0e 	sub.w	ip, r3, lr
 802208c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8022090:	b2bf      	uxth	r7, r7
 8022092:	fa1f fc8c 	uxth.w	ip, ip
 8022096:	eba5 0507 	sub.w	r5, r5, r7
 802209a:	fb0c f30a 	mul.w	r3, ip, sl
 802209e:	b2ad      	uxth	r5, r5
 80220a0:	fb05 330b 	mla	r3, r5, fp, r3
 80220a4:	fb07 3309 	mla	r3, r7, r9, r3
 80220a8:	fb0e 3308 	mla	r3, lr, r8, r3
 80220ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80220b0:	9303      	str	r3, [sp, #12]
 80220b2:	d018      	beq.n	80220e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 80220b4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80220b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80220bc:	fb0b f303 	mul.w	r3, fp, r3
 80220c0:	fb0b fb02 	mul.w	fp, fp, r2
 80220c4:	0a1a      	lsrs	r2, r3, #8
 80220c6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80220ca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80220ce:	441a      	add	r2, r3
 80220d0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80220d4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80220d8:	0a12      	lsrs	r2, r2, #8
 80220da:	0a1b      	lsrs	r3, r3, #8
 80220dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80220e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80220e4:	431a      	orrs	r2, r3
 80220e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80220ea:	d019      	beq.n	8022120 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 80220ec:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80220f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80220f4:	fb0a fb0b 	mul.w	fp, sl, fp
 80220f8:	fb0a fa06 	mul.w	sl, sl, r6
 80220fc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022100:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022104:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022108:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802210c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022110:	445e      	add	r6, fp
 8022112:	0a1b      	lsrs	r3, r3, #8
 8022114:	0a36      	lsrs	r6, r6, #8
 8022116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802211a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802211e:	431e      	orrs	r6, r3
 8022120:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022124:	d019      	beq.n	802215a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8022126:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802212a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802212e:	fb09 fa0a 	mul.w	sl, r9, sl
 8022132:	fb09 f904 	mul.w	r9, r9, r4
 8022136:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802213a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802213e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8022142:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022146:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802214a:	4454      	add	r4, sl
 802214c:	0a1b      	lsrs	r3, r3, #8
 802214e:	0a24      	lsrs	r4, r4, #8
 8022150:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022154:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022158:	431c      	orrs	r4, r3
 802215a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802215e:	d019      	beq.n	8022194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8022160:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022164:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022168:	fb08 f909 	mul.w	r9, r8, r9
 802216c:	fb08 f800 	mul.w	r8, r8, r0
 8022170:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022174:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022178:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802217c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022180:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022184:	4448      	add	r0, r9
 8022186:	0a1b      	lsrs	r3, r3, #8
 8022188:	0a00      	lsrs	r0, r0, #8
 802218a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802218e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022192:	4318      	orrs	r0, r3
 8022194:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022198:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802219c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80221a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80221a4:	fb0c f808 	mul.w	r8, ip, r8
 80221a8:	fb0c f606 	mul.w	r6, ip, r6
 80221ac:	fb05 8803 	mla	r8, r5, r3, r8
 80221b0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80221b4:	fb05 6202 	mla	r2, r5, r2, r6
 80221b8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80221bc:	fb07 8803 	mla	r8, r7, r3, r8
 80221c0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80221c4:	fb07 2704 	mla	r7, r7, r4, r2
 80221c8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80221cc:	fb0e 8303 	mla	r3, lr, r3, r8
 80221d0:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80221d4:	fb0e 7e00 	mla	lr, lr, r0, r7
 80221d8:	9803      	ldr	r0, [sp, #12]
 80221da:	b292      	uxth	r2, r2
 80221dc:	9c02      	ldr	r4, [sp, #8]
 80221de:	0a1b      	lsrs	r3, r3, #8
 80221e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221e4:	4350      	muls	r0, r2
 80221e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221ea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80221ee:	ea43 0e0e 	orr.w	lr, r3, lr
 80221f2:	1c43      	adds	r3, r0, #1
 80221f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80221f8:	fa5f f08e 	uxtb.w	r0, lr
 80221fc:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022200:	b2db      	uxtb	r3, r3
 8022202:	fb14 f403 	smulbb	r4, r4, r3
 8022206:	fb00 4002 	mla	r0, r0, r2, r4
 802220a:	b280      	uxth	r0, r0
 802220c:	1c44      	adds	r4, r0, #1
 802220e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022212:	9c01      	ldr	r4, [sp, #4]
 8022214:	fb14 f403 	smulbb	r4, r4, r3
 8022218:	1200      	asrs	r0, r0, #8
 802221a:	7008      	strb	r0, [r1, #0]
 802221c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8022220:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022224:	fb00 4002 	mla	r0, r0, r2, r4
 8022228:	b280      	uxth	r0, r0
 802222a:	1c44      	adds	r4, r0, #1
 802222c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022230:	1200      	asrs	r0, r0, #8
 8022232:	7048      	strb	r0, [r1, #1]
 8022234:	9800      	ldr	r0, [sp, #0]
 8022236:	fb10 f303 	smulbb	r3, r0, r3
 802223a:	fb0e 3202 	mla	r2, lr, r2, r3
 802223e:	b292      	uxth	r2, r2
 8022240:	f102 0e01 	add.w	lr, r2, #1
 8022244:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022248:	1212      	asrs	r2, r2, #8
 802224a:	708a      	strb	r2, [r1, #2]
 802224c:	b005      	add	sp, #20
 802224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022252:	bf00      	nop
 8022254:	0802b39d 	.word	0x0802b39d
 8022258:	0802b892 	.word	0x0802b892
 802225c:	0802b466 	.word	0x0802b466

08022260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022264:	ed2d 8b08 	vpush	{d8-d11}
 8022268:	b099      	sub	sp, #100	; 0x64
 802226a:	eeb0 aa40 	vmov.f32	s20, s0
 802226e:	eef0 9a60 	vmov.f32	s19, s1
 8022272:	9306      	str	r3, [sp, #24]
 8022274:	eeb0 9a41 	vmov.f32	s18, s2
 8022278:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802227c:	eeb0 8a62 	vmov.f32	s16, s5
 8022280:	9216      	str	r2, [sp, #88]	; 0x58
 8022282:	eef0 8a43 	vmov.f32	s17, s6
 8022286:	9307      	str	r3, [sp, #28]
 8022288:	eef0 ba44 	vmov.f32	s23, s8
 802228c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8022290:	eeb0 ba64 	vmov.f32	s22, s9
 8022294:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022296:	eef0 aa45 	vmov.f32	s21, s10
 802229a:	9310      	str	r3, [sp, #64]	; 0x40
 802229c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 80222a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80222a2:	9112      	str	r1, [sp, #72]	; 0x48
 80222a4:	6850      	ldr	r0, [r2, #4]
 80222a6:	9315      	str	r3, [sp, #84]	; 0x54
 80222a8:	6812      	ldr	r2, [r2, #0]
 80222aa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80222ac:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80222b0:	fb00 1303 	mla	r3, r0, r3, r1
 80222b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222b8:	18d3      	adds	r3, r2, r3
 80222ba:	930a      	str	r3, [sp, #40]	; 0x28
 80222bc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80222be:	681b      	ldr	r3, [r3, #0]
 80222c0:	9311      	str	r3, [sp, #68]	; 0x44
 80222c2:	9b07      	ldr	r3, [sp, #28]
 80222c4:	009b      	lsls	r3, r3, #2
 80222c6:	930e      	str	r3, [sp, #56]	; 0x38
 80222c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80222ca:	2b00      	cmp	r3, #0
 80222cc:	dc03      	bgt.n	80222d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80222ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	f340 833b 	ble.w	802294c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80222d6:	9b06      	ldr	r3, [sp, #24]
 80222d8:	2b00      	cmp	r3, #0
 80222da:	f340 8197 	ble.w	802260c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 80222de:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80222e0:	1423      	asrs	r3, r4, #16
 80222e2:	1412      	asrs	r2, r2, #16
 80222e4:	d432      	bmi.n	802234c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80222e6:	1c51      	adds	r1, r2, #1
 80222e8:	9807      	ldr	r0, [sp, #28]
 80222ea:	4288      	cmp	r0, r1
 80222ec:	dd31      	ble.n	8022352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	db2f      	blt.n	8022352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80222f2:	1c59      	adds	r1, r3, #1
 80222f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80222f6:	4288      	cmp	r0, r1
 80222f8:	dd2b      	ble.n	8022352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80222fa:	9b06      	ldr	r3, [sp, #24]
 80222fc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80222fe:	3b01      	subs	r3, #1
 8022300:	992b      	ldr	r1, [sp, #172]	; 0xac
 8022302:	fb02 1203 	mla	r2, r2, r3, r1
 8022306:	1412      	asrs	r2, r2, #16
 8022308:	d42e      	bmi.n	8022368 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802230a:	3201      	adds	r2, #1
 802230c:	9907      	ldr	r1, [sp, #28]
 802230e:	4291      	cmp	r1, r2
 8022310:	dd2a      	ble.n	8022368 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022312:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022314:	fb02 4303 	mla	r3, r2, r3, r4
 8022318:	141b      	asrs	r3, r3, #16
 802231a:	d425      	bmi.n	8022368 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802231c:	3301      	adds	r3, #1
 802231e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022320:	429a      	cmp	r2, r3
 8022322:	dd21      	ble.n	8022368 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8022324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022326:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 802232a:	f103 0e03 	add.w	lr, r3, #3
 802232e:	9b06      	ldr	r3, [sp, #24]
 8022330:	9313      	str	r3, [sp, #76]	; 0x4c
 8022332:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022334:	2b00      	cmp	r3, #0
 8022336:	f300 81d2 	bgt.w	80226de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 802233a:	9b06      	ldr	r3, [sp, #24]
 802233c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022342:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022346:	4423      	add	r3, r4
 8022348:	930a      	str	r3, [sp, #40]	; 0x28
 802234a:	e161      	b.n	8022610 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 802234c:	1c51      	adds	r1, r2, #1
 802234e:	f040 8150 	bne.w	80225f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022352:	9907      	ldr	r1, [sp, #28]
 8022354:	428a      	cmp	r2, r1
 8022356:	f280 814c 	bge.w	80225f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802235a:	1c5a      	adds	r2, r3, #1
 802235c:	f2c0 8149 	blt.w	80225f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022360:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022362:	4293      	cmp	r3, r2
 8022364:	f280 8145 	bge.w	80225f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022368:	9b06      	ldr	r3, [sp, #24]
 802236a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802236c:	9314      	str	r3, [sp, #80]	; 0x50
 802236e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8022372:	9313      	str	r3, [sp, #76]	; 0x4c
 8022374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022376:	2b00      	cmp	r3, #0
 8022378:	dddf      	ble.n	802233a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 802237a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802237c:	1423      	asrs	r3, r4, #16
 802237e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022382:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022386:	1412      	asrs	r2, r2, #16
 8022388:	f100 8190 	bmi.w	80226ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 802238c:	1c55      	adds	r5, r2, #1
 802238e:	9f07      	ldr	r7, [sp, #28]
 8022390:	42af      	cmp	r7, r5
 8022392:	f340 818d 	ble.w	80226b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022396:	2b00      	cmp	r3, #0
 8022398:	f2c0 818a 	blt.w	80226b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802239c:	1c5d      	adds	r5, r3, #1
 802239e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80223a0:	42af      	cmp	r7, r5
 80223a2:	f340 8185 	ble.w	80226b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80223a6:	9d07      	ldr	r5, [sp, #28]
 80223a8:	fb03 2305 	mla	r3, r3, r5, r2
 80223ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80223ae:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80223b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80223b6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80223ba:	2800      	cmp	r0, #0
 80223bc:	f000 8167 	beq.w	802268e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80223c0:	686a      	ldr	r2, [r5, #4]
 80223c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80223c4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80223c8:	2900      	cmp	r1, #0
 80223ca:	f000 8169 	beq.w	80226a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 80223ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80223d0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80223d2:	18aa      	adds	r2, r5, r2
 80223d4:	59ed      	ldr	r5, [r5, r7]
 80223d6:	6852      	ldr	r2, [r2, #4]
 80223d8:	9508      	str	r5, [sp, #32]
 80223da:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80223de:	0e15      	lsrs	r5, r2, #24
 80223e0:	920c      	str	r2, [sp, #48]	; 0x30
 80223e2:	b280      	uxth	r0, r0
 80223e4:	b289      	uxth	r1, r1
 80223e6:	fb00 fb01 	mul.w	fp, r0, r1
 80223ea:	0100      	lsls	r0, r0, #4
 80223ec:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 80223f0:	eba0 090b 	sub.w	r9, r0, fp
 80223f4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80223f8:	b289      	uxth	r1, r1
 80223fa:	fa1f f989 	uxth.w	r9, r9
 80223fe:	1a52      	subs	r2, r2, r1
 8022400:	fb09 f008 	mul.w	r0, r9, r8
 8022404:	b292      	uxth	r2, r2
 8022406:	fb02 000c 	mla	r0, r2, ip, r0
 802240a:	fb01 000a 	mla	r0, r1, sl, r0
 802240e:	fb0b 0005 	mla	r0, fp, r5, r0
 8022412:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022416:	2800      	cmp	r0, #0
 8022418:	f000 80e0 	beq.w	80225dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802241c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022420:	d01b      	beq.n	802245a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8022422:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022426:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802242a:	fb0c fe0e 	mul.w	lr, ip, lr
 802242e:	fb0c fc03 	mul.w	ip, ip, r3
 8022432:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022436:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802243a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802243e:	4473      	add	r3, lr
 8022440:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8022444:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022448:	0a1b      	lsrs	r3, r3, #8
 802244a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802244e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022452:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022456:	ea43 030e 	orr.w	r3, r3, lr
 802245a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802245e:	d01e      	beq.n	802249e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8022460:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022462:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022466:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 802246a:	fb08 fc0c 	mul.w	ip, r8, ip
 802246e:	fb08 f80e 	mul.w	r8, r8, lr
 8022472:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022476:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802247a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802247e:	44e6      	add	lr, ip
 8022480:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022484:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022488:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802248c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022490:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022494:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022498:	ea4e 0708 	orr.w	r7, lr, r8
 802249c:	970b      	str	r7, [sp, #44]	; 0x2c
 802249e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80224a2:	d01e      	beq.n	80224e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80224a4:	9f08      	ldr	r7, [sp, #32]
 80224a6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80224aa:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80224ae:	fb0a f808 	mul.w	r8, sl, r8
 80224b2:	fb0a fa0c 	mul.w	sl, sl, ip
 80224b6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80224ba:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80224be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80224c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80224ca:	44c6      	add	lr, r8
 80224cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80224d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80224d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224dc:	ea4e 070a 	orr.w	r7, lr, sl
 80224e0:	9708      	str	r7, [sp, #32]
 80224e2:	2dff      	cmp	r5, #255	; 0xff
 80224e4:	d01d      	beq.n	8022522 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 80224e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80224e8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80224ec:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80224f0:	fb05 f808 	mul.w	r8, r5, r8
 80224f4:	fb05 f50c 	mul.w	r5, r5, ip
 80224f8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80224fc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022500:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022504:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022508:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802250c:	44c6      	add	lr, r8
 802250e:	0a2d      	lsrs	r5, r5, #8
 8022510:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022514:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022518:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802251c:	ea4e 0505 	orr.w	r5, lr, r5
 8022520:	950c      	str	r5, [sp, #48]	; 0x30
 8022522:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022524:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022528:	9f08      	ldr	r7, [sp, #32]
 802252a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802252e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022532:	fb09 f505 	mul.w	r5, r9, r5
 8022536:	fb02 550c 	mla	r5, r2, ip, r5
 802253a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802253e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022540:	fb01 550c 	mla	r5, r1, ip, r5
 8022544:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022548:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802254a:	fb0b 550c 	mla	r5, fp, ip, r5
 802254e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022552:	fb09 f90c 	mul.w	r9, r9, ip
 8022556:	0a2d      	lsrs	r5, r5, #8
 8022558:	fb02 9303 	mla	r3, r2, r3, r9
 802255c:	9a08      	ldr	r2, [sp, #32]
 802255e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022562:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022568:	fb01 330e 	mla	r3, r1, lr, r3
 802256c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022570:	fb0b 3b01 	mla	fp, fp, r1, r3
 8022574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022576:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022578:	4343      	muls	r3, r0
 802257a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802257e:	1c58      	adds	r0, r3, #1
 8022580:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022584:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022588:	ea45 050b 	orr.w	r5, r5, fp
 802258c:	7833      	ldrb	r3, [r6, #0]
 802258e:	b2ea      	uxtb	r2, r5
 8022590:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022594:	fb12 f201 	smulbb	r2, r2, r1
 8022598:	b2c0      	uxtb	r0, r0
 802259a:	fb03 2300 	mla	r3, r3, r0, r2
 802259e:	b29b      	uxth	r3, r3
 80225a0:	1c5a      	adds	r2, r3, #1
 80225a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80225a6:	7872      	ldrb	r2, [r6, #1]
 80225a8:	fb12 f200 	smulbb	r2, r2, r0
 80225ac:	121b      	asrs	r3, r3, #8
 80225ae:	7033      	strb	r3, [r6, #0]
 80225b0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80225b4:	0c2d      	lsrs	r5, r5, #16
 80225b6:	fb03 2301 	mla	r3, r3, r1, r2
 80225ba:	b29b      	uxth	r3, r3
 80225bc:	1c5a      	adds	r2, r3, #1
 80225be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80225c2:	121b      	asrs	r3, r3, #8
 80225c4:	7073      	strb	r3, [r6, #1]
 80225c6:	78b3      	ldrb	r3, [r6, #2]
 80225c8:	fb13 f000 	smulbb	r0, r3, r0
 80225cc:	fb05 0501 	mla	r5, r5, r1, r0
 80225d0:	b2ad      	uxth	r5, r5
 80225d2:	1c6b      	adds	r3, r5, #1
 80225d4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80225d8:	122d      	asrs	r5, r5, #8
 80225da:	70b5      	strb	r5, [r6, #2]
 80225dc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80225de:	3603      	adds	r6, #3
 80225e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80225e2:	4413      	add	r3, r2
 80225e4:	932b      	str	r3, [sp, #172]	; 0xac
 80225e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80225e8:	441c      	add	r4, r3
 80225ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80225ec:	3b01      	subs	r3, #1
 80225ee:	9314      	str	r3, [sp, #80]	; 0x50
 80225f0:	e6c0      	b.n	8022374 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80225f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80225f4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80225f6:	4413      	add	r3, r2
 80225f8:	932b      	str	r3, [sp, #172]	; 0xac
 80225fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80225fc:	441c      	add	r4, r3
 80225fe:	9b06      	ldr	r3, [sp, #24]
 8022600:	3b01      	subs	r3, #1
 8022602:	9306      	str	r3, [sp, #24]
 8022604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022606:	3303      	adds	r3, #3
 8022608:	930a      	str	r3, [sp, #40]	; 0x28
 802260a:	e664      	b.n	80222d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802260c:	f47f ae75 	bne.w	80222fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022612:	2b00      	cmp	r3, #0
 8022614:	f340 819a 	ble.w	802294c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802261c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802261e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022622:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022626:	eef0 6a48 	vmov.f32	s13, s16
 802262a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802262e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022632:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022636:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802263a:	eef0 6a68 	vmov.f32	s13, s17
 802263e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022642:	ee16 4a90 	vmov	r4, s13
 8022646:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802264a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802264e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022652:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022656:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802265a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802265e:	ee18 2a10 	vmov	r2, s16
 8022662:	eeb0 8a47 	vmov.f32	s16, s14
 8022666:	fb92 f3f3 	sdiv	r3, r2, r3
 802266a:	ee18 2a90 	vmov	r2, s17
 802266e:	932d      	str	r3, [sp, #180]	; 0xb4
 8022670:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022672:	eef0 8a67 	vmov.f32	s17, s15
 8022676:	fb92 f3f3 	sdiv	r3, r2, r3
 802267a:	932e      	str	r3, [sp, #184]	; 0xb8
 802267c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802267e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022680:	3b01      	subs	r3, #1
 8022682:	9312      	str	r3, [sp, #72]	; 0x48
 8022684:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022686:	bf08      	it	eq
 8022688:	4613      	moveq	r3, r2
 802268a:	9306      	str	r3, [sp, #24]
 802268c:	e61c      	b.n	80222c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802268e:	b151      	cbz	r1, 80226a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022692:	58aa      	ldr	r2, [r5, r2]
 8022694:	25ff      	movs	r5, #255	; 0xff
 8022696:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802269a:	9208      	str	r2, [sp, #32]
 802269c:	46a8      	mov	r8, r5
 802269e:	e6a0      	b.n	80223e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80226a0:	25ff      	movs	r5, #255	; 0xff
 80226a2:	46aa      	mov	sl, r5
 80226a4:	e69d      	b.n	80223e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80226a6:	25ff      	movs	r5, #255	; 0xff
 80226a8:	46aa      	mov	sl, r5
 80226aa:	e7f7      	b.n	802269c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80226ac:	1c57      	adds	r7, r2, #1
 80226ae:	d195      	bne.n	80225dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80226b0:	9d07      	ldr	r5, [sp, #28]
 80226b2:	4295      	cmp	r5, r2
 80226b4:	dd92      	ble.n	80225dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80226b6:	1c5d      	adds	r5, r3, #1
 80226b8:	db90      	blt.n	80225dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80226ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80226bc:	429d      	cmp	r5, r3
 80226be:	dd8d      	ble.n	80225dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80226c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80226c2:	9201      	str	r2, [sp, #4]
 80226c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80226c6:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80226ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80226ce:	9300      	str	r3, [sp, #0]
 80226d0:	9b07      	ldr	r3, [sp, #28]
 80226d2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80226d6:	4631      	mov	r1, r6
 80226d8:	f7ff fc68 	bl	8021fac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80226dc:	e77e      	b.n	80225dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80226de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80226e0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80226e4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80226e6:	9d07      	ldr	r5, [sp, #28]
 80226e8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80226ec:	1412      	asrs	r2, r2, #16
 80226ee:	1423      	asrs	r3, r4, #16
 80226f0:	fb05 2303 	mla	r3, r5, r3, r2
 80226f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80226f6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80226fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80226fe:	0e1e      	lsrs	r6, r3, #24
 8022700:	2900      	cmp	r1, #0
 8022702:	f000 8114 	beq.w	802292e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8022706:	686a      	ldr	r2, [r5, #4]
 8022708:	920d      	str	r2, [sp, #52]	; 0x34
 802270a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802270e:	2800      	cmp	r0, #0
 8022710:	f000 8116 	beq.w	8022940 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8022714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022716:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022718:	18aa      	adds	r2, r5, r2
 802271a:	59ed      	ldr	r5, [r5, r7]
 802271c:	6852      	ldr	r2, [r2, #4]
 802271e:	9509      	str	r5, [sp, #36]	; 0x24
 8022720:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022724:	0e15      	lsrs	r5, r2, #24
 8022726:	920f      	str	r2, [sp, #60]	; 0x3c
 8022728:	b289      	uxth	r1, r1
 802272a:	b280      	uxth	r0, r0
 802272c:	fb01 fa00 	mul.w	sl, r1, r0
 8022730:	0109      	lsls	r1, r1, #4
 8022732:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022736:	eba1 080a 	sub.w	r8, r1, sl
 802273a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802273e:	b280      	uxth	r0, r0
 8022740:	fa1f f888 	uxth.w	r8, r8
 8022744:	1a12      	subs	r2, r2, r0
 8022746:	fb08 f10c 	mul.w	r1, r8, ip
 802274a:	b292      	uxth	r2, r2
 802274c:	fb02 1106 	mla	r1, r2, r6, r1
 8022750:	fb00 1109 	mla	r1, r0, r9, r1
 8022754:	fb0a 1105 	mla	r1, sl, r5, r1
 8022758:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802275c:	2900      	cmp	r1, #0
 802275e:	f000 80da 	beq.w	8022916 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022762:	2eff      	cmp	r6, #255	; 0xff
 8022764:	d016      	beq.n	8022794 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8022766:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802276a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802276e:	4377      	muls	r7, r6
 8022770:	435e      	muls	r6, r3
 8022772:	0a3b      	lsrs	r3, r7, #8
 8022774:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022778:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802277c:	443b      	add	r3, r7
 802277e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022782:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022786:	0a1b      	lsrs	r3, r3, #8
 8022788:	0a3f      	lsrs	r7, r7, #8
 802278a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802278e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022792:	433b      	orrs	r3, r7
 8022794:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022798:	d01d      	beq.n	80227d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802279a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802279c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802279e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80227a2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80227a6:	fb0c f606 	mul.w	r6, ip, r6
 80227aa:	fb0c fc07 	mul.w	ip, ip, r7
 80227ae:	0a37      	lsrs	r7, r6, #8
 80227b0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80227b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80227b8:	4437      	add	r7, r6
 80227ba:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80227be:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80227c2:	0a3f      	lsrs	r7, r7, #8
 80227c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80227cc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80227d0:	ea47 060c 	orr.w	r6, r7, ip
 80227d4:	960d      	str	r6, [sp, #52]	; 0x34
 80227d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80227da:	d01d      	beq.n	8022818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 80227dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80227de:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80227e2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80227e6:	fb09 fc0c 	mul.w	ip, r9, ip
 80227ea:	fb09 f906 	mul.w	r9, r9, r6
 80227ee:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80227f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80227f6:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80227fa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80227fe:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022802:	4467      	add	r7, ip
 8022804:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022808:	0a3f      	lsrs	r7, r7, #8
 802280a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802280e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022812:	ea47 0609 	orr.w	r6, r7, r9
 8022816:	9609      	str	r6, [sp, #36]	; 0x24
 8022818:	2dff      	cmp	r5, #255	; 0xff
 802281a:	d01a      	beq.n	8022852 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 802281c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802281e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022822:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022826:	fb05 fc0c 	mul.w	ip, r5, ip
 802282a:	4375      	muls	r5, r6
 802282c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022830:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022834:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8022838:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802283c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022840:	4467      	add	r7, ip
 8022842:	0a2d      	lsrs	r5, r5, #8
 8022844:	0a3f      	lsrs	r7, r7, #8
 8022846:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802284a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802284e:	433d      	orrs	r5, r7
 8022850:	950f      	str	r5, [sp, #60]	; 0x3c
 8022852:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022854:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8022858:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802285c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022860:	fb08 f505 	mul.w	r5, r8, r5
 8022864:	fb02 5506 	mla	r5, r2, r6, r5
 8022868:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802286a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802286e:	fb00 5506 	mla	r5, r0, r6, r5
 8022872:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022874:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022878:	fb0a 5506 	mla	r5, sl, r6, r5
 802287c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802287e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022882:	0a2d      	lsrs	r5, r5, #8
 8022884:	fb08 f806 	mul.w	r8, r8, r6
 8022888:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802288c:	fb02 8303 	mla	r3, r2, r3, r8
 8022890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022892:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022898:	fb00 3307 	mla	r3, r0, r7, r3
 802289c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80228a0:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80228a4:	fb01 f30b 	mul.w	r3, r1, fp
 80228a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228ac:	1c59      	adds	r1, r3, #1
 80228ae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80228b2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80228b6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80228ba:	ea45 050c 	orr.w	r5, r5, ip
 80228be:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80228c2:	b2ea      	uxtb	r2, r5
 80228c4:	b2c9      	uxtb	r1, r1
 80228c6:	fb12 f20b 	smulbb	r2, r2, fp
 80228ca:	fb03 2301 	mla	r3, r3, r1, r2
 80228ce:	b29b      	uxth	r3, r3
 80228d0:	1c5a      	adds	r2, r3, #1
 80228d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80228d6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80228da:	fb12 f201 	smulbb	r2, r2, r1
 80228de:	121b      	asrs	r3, r3, #8
 80228e0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80228e4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80228e8:	0c2d      	lsrs	r5, r5, #16
 80228ea:	fb03 230b 	mla	r3, r3, fp, r2
 80228ee:	b29b      	uxth	r3, r3
 80228f0:	1c5a      	adds	r2, r3, #1
 80228f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80228f6:	121b      	asrs	r3, r3, #8
 80228f8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80228fc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022900:	fb13 f101 	smulbb	r1, r3, r1
 8022904:	fb05 150b 	mla	r5, r5, fp, r1
 8022908:	b2ad      	uxth	r5, r5
 802290a:	1c69      	adds	r1, r5, #1
 802290c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022910:	122d      	asrs	r5, r5, #8
 8022912:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022916:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022918:	f10e 0e03 	add.w	lr, lr, #3
 802291c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802291e:	4413      	add	r3, r2
 8022920:	932b      	str	r3, [sp, #172]	; 0xac
 8022922:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022924:	441c      	add	r4, r3
 8022926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022928:	3b01      	subs	r3, #1
 802292a:	9313      	str	r3, [sp, #76]	; 0x4c
 802292c:	e501      	b.n	8022332 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802292e:	b150      	cbz	r0, 8022946 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8022930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022932:	58aa      	ldr	r2, [r5, r2]
 8022934:	25ff      	movs	r5, #255	; 0xff
 8022936:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802293a:	9209      	str	r2, [sp, #36]	; 0x24
 802293c:	46ac      	mov	ip, r5
 802293e:	e6f3      	b.n	8022728 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8022940:	25ff      	movs	r5, #255	; 0xff
 8022942:	46a9      	mov	r9, r5
 8022944:	e6f0      	b.n	8022728 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8022946:	25ff      	movs	r5, #255	; 0xff
 8022948:	46a9      	mov	r9, r5
 802294a:	e7f7      	b.n	802293c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 802294c:	b019      	add	sp, #100	; 0x64
 802294e:	ecbd 8b08 	vpop	{d8-d11}
 8022952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022958 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8022958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802295c:	b085      	sub	sp, #20
 802295e:	7888      	ldrb	r0, [r1, #2]
 8022960:	4691      	mov	r9, r2
 8022962:	9000      	str	r0, [sp, #0]
 8022964:	7848      	ldrb	r0, [r1, #1]
 8022966:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802296a:	9001      	str	r0, [sp, #4]
 802296c:	7808      	ldrb	r0, [r1, #0]
 802296e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8022972:	9002      	str	r0, [sp, #8]
 8022974:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022978:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802297c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8022980:	fb04 c603 	mla	r6, r4, r3, ip
 8022984:	2c00      	cmp	r4, #0
 8022986:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802298a:	9a00      	ldr	r2, [sp, #0]
 802298c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022990:	9a01      	ldr	r2, [sp, #4]
 8022992:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022996:	db3a      	blt.n	8022a0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8022998:	45a0      	cmp	r8, r4
 802299a:	dd38      	ble.n	8022a0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802299c:	f1bc 0f00 	cmp.w	ip, #0
 80229a0:	db33      	blt.n	8022a0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80229a2:	4563      	cmp	r3, ip
 80229a4:	dd31      	ble.n	8022a0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80229a6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80229aa:	f11c 0601 	adds.w	r6, ip, #1
 80229ae:	d431      	bmi.n	8022a14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80229b0:	42b3      	cmp	r3, r6
 80229b2:	dd2f      	ble.n	8022a14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80229b4:	b375      	cbz	r5, 8022a14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80229b6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80229ba:	3401      	adds	r4, #1
 80229bc:	d42e      	bmi.n	8022a1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80229be:	45a0      	cmp	r8, r4
 80229c0:	dd2c      	ble.n	8022a1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80229c2:	b35f      	cbz	r7, 8022a1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80229c4:	f1bc 0f00 	cmp.w	ip, #0
 80229c8:	db26      	blt.n	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80229ca:	4563      	cmp	r3, ip
 80229cc:	dd24      	ble.n	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80229ce:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80229d2:	f11c 0c01 	adds.w	ip, ip, #1
 80229d6:	d405      	bmi.n	80229e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80229d8:	4563      	cmp	r3, ip
 80229da:	dd03      	ble.n	80229e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80229dc:	b115      	cbz	r5, 80229e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80229de:	3301      	adds	r3, #1
 80229e0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80229e4:	2d0f      	cmp	r5, #15
 80229e6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80229ea:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80229ee:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80229f2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80229f6:	d801      	bhi.n	80229fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 80229f8:	2f0f      	cmp	r7, #15
 80229fa:	d911      	bls.n	8022a20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 80229fc:	4b77      	ldr	r3, [pc, #476]	; (8022bdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 80229fe:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022a02:	4a77      	ldr	r2, [pc, #476]	; (8022be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8022a04:	4877      	ldr	r0, [pc, #476]	; (8022be4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8022a06:	f003 f83b 	bl	8025a80 <__assert_func>
 8022a0a:	4602      	mov	r2, r0
 8022a0c:	e7cd      	b.n	80229aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8022a0e:	4606      	mov	r6, r0
 8022a10:	4602      	mov	r2, r0
 8022a12:	e7d2      	b.n	80229ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022a14:	4606      	mov	r6, r0
 8022a16:	e7d0      	b.n	80229ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022a18:	4604      	mov	r4, r0
 8022a1a:	e7da      	b.n	80229d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8022a1c:	4604      	mov	r4, r0
 8022a1e:	e7e1      	b.n	80229e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022a20:	b2ab      	uxth	r3, r5
 8022a22:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022a26:	b2bf      	uxth	r7, r7
 8022a28:	fb03 fe07 	mul.w	lr, r3, r7
 8022a2c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022a30:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022a34:	eba3 0c0e 	sub.w	ip, r3, lr
 8022a38:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8022a3c:	b2bf      	uxth	r7, r7
 8022a3e:	fa1f fc8c 	uxth.w	ip, ip
 8022a42:	eba5 0507 	sub.w	r5, r5, r7
 8022a46:	fb0c f30a 	mul.w	r3, ip, sl
 8022a4a:	b2ad      	uxth	r5, r5
 8022a4c:	fb05 330b 	mla	r3, r5, fp, r3
 8022a50:	fb07 3309 	mla	r3, r7, r9, r3
 8022a54:	fb0e 3308 	mla	r3, lr, r8, r3
 8022a58:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022a5c:	9303      	str	r3, [sp, #12]
 8022a5e:	d018      	beq.n	8022a92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8022a60:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022a64:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022a68:	fb0b f303 	mul.w	r3, fp, r3
 8022a6c:	fb0b fb02 	mul.w	fp, fp, r2
 8022a70:	0a1a      	lsrs	r2, r3, #8
 8022a72:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022a76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022a7a:	441a      	add	r2, r3
 8022a7c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022a80:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022a84:	0a12      	lsrs	r2, r2, #8
 8022a86:	0a1b      	lsrs	r3, r3, #8
 8022a88:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022a8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a90:	431a      	orrs	r2, r3
 8022a92:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022a96:	d019      	beq.n	8022acc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8022a98:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022a9c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022aa0:	fb0a fb0b 	mul.w	fp, sl, fp
 8022aa4:	fb0a fa06 	mul.w	sl, sl, r6
 8022aa8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022aac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ab0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022ab4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022ab8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022abc:	445e      	add	r6, fp
 8022abe:	0a1b      	lsrs	r3, r3, #8
 8022ac0:	0a36      	lsrs	r6, r6, #8
 8022ac2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022ac6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022aca:	431e      	orrs	r6, r3
 8022acc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022ad0:	d019      	beq.n	8022b06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8022ad2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022ad6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022ada:	fb09 fa0a 	mul.w	sl, r9, sl
 8022ade:	fb09 f904 	mul.w	r9, r9, r4
 8022ae2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022ae6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022aea:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8022aee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022af2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022af6:	4454      	add	r4, sl
 8022af8:	0a1b      	lsrs	r3, r3, #8
 8022afa:	0a24      	lsrs	r4, r4, #8
 8022afc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b00:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b04:	431c      	orrs	r4, r3
 8022b06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022b0a:	d019      	beq.n	8022b40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8022b0c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022b10:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b14:	fb08 f909 	mul.w	r9, r8, r9
 8022b18:	fb08 f800 	mul.w	r8, r8, r0
 8022b1c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022b20:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022b24:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022b28:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022b2c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022b30:	4448      	add	r0, r9
 8022b32:	0a1b      	lsrs	r3, r3, #8
 8022b34:	0a00      	lsrs	r0, r0, #8
 8022b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b3a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022b3e:	4318      	orrs	r0, r3
 8022b40:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022b44:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b48:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022b4c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022b50:	fb0c f808 	mul.w	r8, ip, r8
 8022b54:	fb0c f606 	mul.w	r6, ip, r6
 8022b58:	fb05 8803 	mla	r8, r5, r3, r8
 8022b5c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022b60:	fb05 6202 	mla	r2, r5, r2, r6
 8022b64:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022b68:	fb07 8803 	mla	r8, r7, r3, r8
 8022b6c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022b70:	fb07 2704 	mla	r7, r7, r4, r2
 8022b74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b78:	fb0e 8303 	mla	r3, lr, r3, r8
 8022b7c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022b80:	9802      	ldr	r0, [sp, #8]
 8022b82:	0a1b      	lsrs	r3, r3, #8
 8022b84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b8c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022b90:	ea43 0e0e 	orr.w	lr, r3, lr
 8022b94:	9b03      	ldr	r3, [sp, #12]
 8022b96:	43db      	mvns	r3, r3
 8022b98:	b2db      	uxtb	r3, r3
 8022b9a:	4358      	muls	r0, r3
 8022b9c:	1c42      	adds	r2, r0, #1
 8022b9e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022ba2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022ba6:	700a      	strb	r2, [r1, #0]
 8022ba8:	9a01      	ldr	r2, [sp, #4]
 8022baa:	435a      	muls	r2, r3
 8022bac:	1c50      	adds	r0, r2, #1
 8022bae:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022bb2:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022bb6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022bba:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022bbe:	704a      	strb	r2, [r1, #1]
 8022bc0:	9a00      	ldr	r2, [sp, #0]
 8022bc2:	435a      	muls	r2, r3
 8022bc4:	4613      	mov	r3, r2
 8022bc6:	3201      	adds	r2, #1
 8022bc8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022bcc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022bd0:	f881 e002 	strb.w	lr, [r1, #2]
 8022bd4:	b005      	add	sp, #20
 8022bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bda:	bf00      	nop
 8022bdc:	0802b39d 	.word	0x0802b39d
 8022be0:	0802b892 	.word	0x0802b892
 8022be4:	0802b466 	.word	0x0802b466

08022be8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bec:	ed2d 8b08 	vpush	{d8-d11}
 8022bf0:	b097      	sub	sp, #92	; 0x5c
 8022bf2:	eeb0 aa40 	vmov.f32	s20, s0
 8022bf6:	eef0 9a60 	vmov.f32	s19, s1
 8022bfa:	9306      	str	r3, [sp, #24]
 8022bfc:	eeb0 9a41 	vmov.f32	s18, s2
 8022c00:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8022c04:	eeb0 8a62 	vmov.f32	s16, s5
 8022c08:	9214      	str	r2, [sp, #80]	; 0x50
 8022c0a:	eef0 8a43 	vmov.f32	s17, s6
 8022c0e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022c10:	eef0 ba44 	vmov.f32	s23, s8
 8022c14:	9307      	str	r3, [sp, #28]
 8022c16:	eeb0 ba64 	vmov.f32	s22, s9
 8022c1a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8022c1e:	eef0 aa45 	vmov.f32	s21, s10
 8022c22:	9015      	str	r0, [sp, #84]	; 0x54
 8022c24:	9112      	str	r1, [sp, #72]	; 0x48
 8022c26:	6850      	ldr	r0, [r2, #4]
 8022c28:	9310      	str	r3, [sp, #64]	; 0x40
 8022c2a:	6812      	ldr	r2, [r2, #0]
 8022c2c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8022c2e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022c32:	fb00 1303 	mla	r3, r0, r3, r1
 8022c36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c3a:	18d3      	adds	r3, r2, r3
 8022c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8022c3e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022c40:	681b      	ldr	r3, [r3, #0]
 8022c42:	9311      	str	r3, [sp, #68]	; 0x44
 8022c44:	9b07      	ldr	r3, [sp, #28]
 8022c46:	009b      	lsls	r3, r3, #2
 8022c48:	930e      	str	r3, [sp, #56]	; 0x38
 8022c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	dc03      	bgt.n	8022c58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022c50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022c52:	2b00      	cmp	r3, #0
 8022c54:	f340 832e 	ble.w	80232b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022c58:	9b06      	ldr	r3, [sp, #24]
 8022c5a:	2b00      	cmp	r3, #0
 8022c5c:	f340 8186 	ble.w	8022f6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8022c60:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022c62:	1423      	asrs	r3, r4, #16
 8022c64:	1412      	asrs	r2, r2, #16
 8022c66:	d42f      	bmi.n	8022cc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022c68:	1c51      	adds	r1, r2, #1
 8022c6a:	9807      	ldr	r0, [sp, #28]
 8022c6c:	4288      	cmp	r0, r1
 8022c6e:	dd2e      	ble.n	8022cce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	db2c      	blt.n	8022cce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022c74:	1c59      	adds	r1, r3, #1
 8022c76:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022c78:	4288      	cmp	r0, r1
 8022c7a:	dd28      	ble.n	8022cce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022c7c:	9b06      	ldr	r3, [sp, #24]
 8022c7e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022c80:	3b01      	subs	r3, #1
 8022c82:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022c84:	fb02 1203 	mla	r2, r2, r3, r1
 8022c88:	1412      	asrs	r2, r2, #16
 8022c8a:	d42b      	bmi.n	8022ce4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022c8c:	3201      	adds	r2, #1
 8022c8e:	9907      	ldr	r1, [sp, #28]
 8022c90:	4291      	cmp	r1, r2
 8022c92:	dd27      	ble.n	8022ce4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022c94:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022c96:	fb02 4303 	mla	r3, r2, r3, r4
 8022c9a:	141b      	asrs	r3, r3, #16
 8022c9c:	d422      	bmi.n	8022ce4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022c9e:	3301      	adds	r3, #1
 8022ca0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022ca2:	429a      	cmp	r2, r3
 8022ca4:	dd1e      	ble.n	8022ce4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ca8:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022cac:	1cdd      	adds	r5, r3, #3
 8022cae:	f1bb 0f00 	cmp.w	fp, #0
 8022cb2:	f300 81c4 	bgt.w	802303e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022cb6:	9b06      	ldr	r3, [sp, #24]
 8022cb8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022cc2:	4423      	add	r3, r4
 8022cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8022cc6:	e153      	b.n	8022f70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022cc8:	1c51      	adds	r1, r2, #1
 8022cca:	f040 8142 	bne.w	8022f52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022cce:	9907      	ldr	r1, [sp, #28]
 8022cd0:	428a      	cmp	r2, r1
 8022cd2:	f280 813e 	bge.w	8022f52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022cd6:	1c5a      	adds	r2, r3, #1
 8022cd8:	f2c0 813b 	blt.w	8022f52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022cdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022cde:	4293      	cmp	r3, r2
 8022ce0:	f280 8137 	bge.w	8022f52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022ce4:	9b06      	ldr	r3, [sp, #24]
 8022ce6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022ce8:	9313      	str	r3, [sp, #76]	; 0x4c
 8022cea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022cec:	2b00      	cmp	r3, #0
 8022cee:	dde2      	ble.n	8022cb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022cf0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022cf2:	1423      	asrs	r3, r4, #16
 8022cf4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022cf6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022cfa:	1409      	asrs	r1, r1, #16
 8022cfc:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022d00:	f100 8187 	bmi.w	8023012 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022d04:	1c4e      	adds	r6, r1, #1
 8022d06:	9f07      	ldr	r7, [sp, #28]
 8022d08:	42b7      	cmp	r7, r6
 8022d0a:	f340 8184 	ble.w	8023016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	f2c0 8181 	blt.w	8023016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022d14:	1c5e      	adds	r6, r3, #1
 8022d16:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022d18:	42b7      	cmp	r7, r6
 8022d1a:	f340 817c 	ble.w	8023016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022d1e:	9e07      	ldr	r6, [sp, #28]
 8022d20:	fb03 1306 	mla	r3, r3, r6, r1
 8022d24:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022d26:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022d2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022d2e:	0e1f      	lsrs	r7, r3, #24
 8022d30:	2a00      	cmp	r2, #0
 8022d32:	f000 815c 	beq.w	8022fee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022d36:	6871      	ldr	r1, [r6, #4]
 8022d38:	910b      	str	r1, [sp, #44]	; 0x2c
 8022d3a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022d3e:	2800      	cmp	r0, #0
 8022d40:	f000 815e 	beq.w	8023000 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8022d44:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022d46:	eb06 0c01 	add.w	ip, r6, r1
 8022d4a:	5876      	ldr	r6, [r6, r1]
 8022d4c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022d50:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022d54:	9608      	str	r6, [sp, #32]
 8022d56:	0e0e      	lsrs	r6, r1, #24
 8022d58:	910c      	str	r1, [sp, #48]	; 0x30
 8022d5a:	b292      	uxth	r2, r2
 8022d5c:	b280      	uxth	r0, r0
 8022d5e:	fb02 fa00 	mul.w	sl, r2, r0
 8022d62:	0112      	lsls	r2, r2, #4
 8022d64:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022d68:	eba2 080a 	sub.w	r8, r2, sl
 8022d6c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022d70:	b280      	uxth	r0, r0
 8022d72:	fa1f f888 	uxth.w	r8, r8
 8022d76:	1a09      	subs	r1, r1, r0
 8022d78:	fb08 f20e 	mul.w	r2, r8, lr
 8022d7c:	b289      	uxth	r1, r1
 8022d7e:	fb01 2207 	mla	r2, r1, r7, r2
 8022d82:	fb00 2209 	mla	r2, r0, r9, r2
 8022d86:	fb0a 2206 	mla	r2, sl, r6, r2
 8022d8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022d8e:	2a00      	cmp	r2, #0
 8022d90:	f000 80d4 	beq.w	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022d94:	2fff      	cmp	r7, #255	; 0xff
 8022d96:	d01a      	beq.n	8022dce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8022d98:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022d9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022da0:	fb07 fc0c 	mul.w	ip, r7, ip
 8022da4:	435f      	muls	r7, r3
 8022da6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022daa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022dae:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022db2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022db6:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022dba:	4463      	add	r3, ip
 8022dbc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022dc0:	0a1b      	lsrs	r3, r3, #8
 8022dc2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022dc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dca:	ea43 030b 	orr.w	r3, r3, fp
 8022dce:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022dd2:	d01e      	beq.n	8022e12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022dd4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022dd6:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022dda:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022dde:	fb0e fb0b 	mul.w	fp, lr, fp
 8022de2:	fb0e fe07 	mul.w	lr, lr, r7
 8022de6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022dea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022dee:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022df2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022df6:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022dfa:	44dc      	add	ip, fp
 8022dfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e04:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e0c:	ea4c 070e 	orr.w	r7, ip, lr
 8022e10:	970b      	str	r7, [sp, #44]	; 0x2c
 8022e12:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022e16:	d01e      	beq.n	8022e56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022e18:	9f08      	ldr	r7, [sp, #32]
 8022e1a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022e1e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022e22:	fb09 fe0e 	mul.w	lr, r9, lr
 8022e26:	fb09 f907 	mul.w	r9, r9, r7
 8022e2a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022e2e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022e32:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022e36:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e3a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022e3e:	44f4      	add	ip, lr
 8022e40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022e44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e48:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022e4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e50:	ea4c 0709 	orr.w	r7, ip, r9
 8022e54:	9708      	str	r7, [sp, #32]
 8022e56:	2eff      	cmp	r6, #255	; 0xff
 8022e58:	d01c      	beq.n	8022e94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022e5a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022e5c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022e60:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022e64:	fb06 fe0e 	mul.w	lr, r6, lr
 8022e68:	437e      	muls	r6, r7
 8022e6a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022e6e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022e72:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022e76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e7a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022e7e:	44f4      	add	ip, lr
 8022e80:	0a36      	lsrs	r6, r6, #8
 8022e82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e86:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e8e:	ea4c 0606 	orr.w	r6, ip, r6
 8022e92:	960c      	str	r6, [sp, #48]	; 0x30
 8022e94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022e96:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022e9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e9e:	2aff      	cmp	r2, #255	; 0xff
 8022ea0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022ea4:	fb08 f606 	mul.w	r6, r8, r6
 8022ea8:	fb01 6607 	mla	r6, r1, r7, r6
 8022eac:	9f08      	ldr	r7, [sp, #32]
 8022eae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022eb2:	fb00 6607 	mla	r6, r0, r7, r6
 8022eb6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022eb8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022ebc:	fb0a 6607 	mla	r6, sl, r7, r6
 8022ec0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022ec2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ec6:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022eca:	fb08 f807 	mul.w	r8, r8, r7
 8022ece:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022ed2:	fb01 8303 	mla	r3, r1, r3, r8
 8022ed6:	9908      	ldr	r1, [sp, #32]
 8022ed8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022edc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022ede:	fb00 330c 	mla	r3, r0, ip, r3
 8022ee2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022ee6:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022eea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022eee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ef2:	ea46 060a 	orr.w	r6, r6, sl
 8022ef6:	b2f0      	uxtb	r0, r6
 8022ef8:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022efc:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022f00:	f000 8084 	beq.w	802300c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022f04:	43d2      	mvns	r2, r2
 8022f06:	782b      	ldrb	r3, [r5, #0]
 8022f08:	b2d2      	uxtb	r2, r2
 8022f0a:	fb03 f702 	mul.w	r7, r3, r2
 8022f0e:	1c7b      	adds	r3, r7, #1
 8022f10:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022f14:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022f18:	702b      	strb	r3, [r5, #0]
 8022f1a:	786b      	ldrb	r3, [r5, #1]
 8022f1c:	fb03 f002 	mul.w	r0, r3, r2
 8022f20:	1c43      	adds	r3, r0, #1
 8022f22:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022f26:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022f2a:	706b      	strb	r3, [r5, #1]
 8022f2c:	78ab      	ldrb	r3, [r5, #2]
 8022f2e:	4353      	muls	r3, r2
 8022f30:	1c5a      	adds	r2, r3, #1
 8022f32:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022f36:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022f3a:	70ae      	strb	r6, [r5, #2]
 8022f3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022f3e:	3503      	adds	r5, #3
 8022f40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022f42:	4413      	add	r3, r2
 8022f44:	9329      	str	r3, [sp, #164]	; 0xa4
 8022f46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f48:	441c      	add	r4, r3
 8022f4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022f4c:	3b01      	subs	r3, #1
 8022f4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f50:	e6cb      	b.n	8022cea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022f52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022f54:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022f56:	4413      	add	r3, r2
 8022f58:	9329      	str	r3, [sp, #164]	; 0xa4
 8022f5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f5c:	441c      	add	r4, r3
 8022f5e:	9b06      	ldr	r3, [sp, #24]
 8022f60:	3b01      	subs	r3, #1
 8022f62:	9306      	str	r3, [sp, #24]
 8022f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f66:	3303      	adds	r3, #3
 8022f68:	930a      	str	r3, [sp, #40]	; 0x28
 8022f6a:	e675      	b.n	8022c58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022f6c:	f47f ae86 	bne.w	8022c7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022f70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022f72:	2b00      	cmp	r3, #0
 8022f74:	f340 819e 	ble.w	80232b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022f7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022f7e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022f82:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022f86:	eef0 6a48 	vmov.f32	s13, s16
 8022f8a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022f8e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022f92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f96:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022f9a:	eef0 6a68 	vmov.f32	s13, s17
 8022f9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fa2:	ee16 4a90 	vmov	r4, s13
 8022fa6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022faa:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022fae:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022fb2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022fb6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022fba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022fbe:	ee18 2a10 	vmov	r2, s16
 8022fc2:	eeb0 8a47 	vmov.f32	s16, s14
 8022fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fca:	ee18 2a90 	vmov	r2, s17
 8022fce:	932b      	str	r3, [sp, #172]	; 0xac
 8022fd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022fd2:	eef0 8a67 	vmov.f32	s17, s15
 8022fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fda:	932c      	str	r3, [sp, #176]	; 0xb0
 8022fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022fde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022fe0:	3b01      	subs	r3, #1
 8022fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8022fe4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022fe6:	bf08      	it	eq
 8022fe8:	4613      	moveq	r3, r2
 8022fea:	9306      	str	r3, [sp, #24]
 8022fec:	e62d      	b.n	8022c4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022fee:	b150      	cbz	r0, 8023006 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022ff0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022ff2:	5871      	ldr	r1, [r6, r1]
 8022ff4:	26ff      	movs	r6, #255	; 0xff
 8022ff6:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022ffa:	9108      	str	r1, [sp, #32]
 8022ffc:	46b6      	mov	lr, r6
 8022ffe:	e6ac      	b.n	8022d5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023000:	26ff      	movs	r6, #255	; 0xff
 8023002:	46b1      	mov	r9, r6
 8023004:	e6a9      	b.n	8022d5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023006:	26ff      	movs	r6, #255	; 0xff
 8023008:	46b1      	mov	r9, r6
 802300a:	e7f7      	b.n	8022ffc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802300c:	7028      	strb	r0, [r5, #0]
 802300e:	7069      	strb	r1, [r5, #1]
 8023010:	e793      	b.n	8022f3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8023012:	1c4f      	adds	r7, r1, #1
 8023014:	d192      	bne.n	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023016:	9e07      	ldr	r6, [sp, #28]
 8023018:	428e      	cmp	r6, r1
 802301a:	dd8f      	ble.n	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802301c:	1c5e      	adds	r6, r3, #1
 802301e:	db8d      	blt.n	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023020:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023022:	429e      	cmp	r6, r3
 8023024:	dd8a      	ble.n	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023026:	9600      	str	r6, [sp, #0]
 8023028:	e9cd 2003 	strd	r2, r0, [sp, #12]
 802302c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8023030:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023032:	4629      	mov	r1, r5
 8023034:	9b07      	ldr	r3, [sp, #28]
 8023036:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023038:	f7ff fc8e 	bl	8022958 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802303c:	e77e      	b.n	8022f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802303e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023040:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023044:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023046:	9e07      	ldr	r6, [sp, #28]
 8023048:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802304c:	1409      	asrs	r1, r1, #16
 802304e:	1423      	asrs	r3, r4, #16
 8023050:	fb06 1303 	mla	r3, r6, r3, r1
 8023054:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023056:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802305a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802305e:	0e1f      	lsrs	r7, r3, #24
 8023060:	2a00      	cmp	r2, #0
 8023062:	f000 8113 	beq.w	802328c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8023066:	6871      	ldr	r1, [r6, #4]
 8023068:	910d      	str	r1, [sp, #52]	; 0x34
 802306a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802306e:	2800      	cmp	r0, #0
 8023070:	f000 8115 	beq.w	802329e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8023074:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023076:	eb06 0c01 	add.w	ip, r6, r1
 802307a:	5876      	ldr	r6, [r6, r1]
 802307c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023080:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8023084:	9609      	str	r6, [sp, #36]	; 0x24
 8023086:	0e0e      	lsrs	r6, r1, #24
 8023088:	910f      	str	r1, [sp, #60]	; 0x3c
 802308a:	b292      	uxth	r2, r2
 802308c:	b280      	uxth	r0, r0
 802308e:	fb02 fa00 	mul.w	sl, r2, r0
 8023092:	0112      	lsls	r2, r2, #4
 8023094:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023098:	eba2 080a 	sub.w	r8, r2, sl
 802309c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80230a0:	b280      	uxth	r0, r0
 80230a2:	fa1f f888 	uxth.w	r8, r8
 80230a6:	1a09      	subs	r1, r1, r0
 80230a8:	fb08 f20e 	mul.w	r2, r8, lr
 80230ac:	b289      	uxth	r1, r1
 80230ae:	fb01 2207 	mla	r2, r1, r7, r2
 80230b2:	fb00 2209 	mla	r2, r0, r9, r2
 80230b6:	fb0a 2206 	mla	r2, sl, r6, r2
 80230ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80230be:	2a00      	cmp	r2, #0
 80230c0:	f000 80da 	beq.w	8023278 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 80230c4:	2fff      	cmp	r7, #255	; 0xff
 80230c6:	d01a      	beq.n	80230fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 80230c8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80230cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80230d0:	fb07 fc0c 	mul.w	ip, r7, ip
 80230d4:	435f      	muls	r7, r3
 80230d6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80230da:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80230de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230e2:	4463      	add	r3, ip
 80230e4:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80230e8:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80230ec:	0a1b      	lsrs	r3, r3, #8
 80230ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80230fa:	ea43 030c 	orr.w	r3, r3, ip
 80230fe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023102:	d021      	beq.n	8023148 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8023104:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023106:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802310a:	fb0e f707 	mul.w	r7, lr, r7
 802310e:	9713      	str	r7, [sp, #76]	; 0x4c
 8023110:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023112:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023116:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8023118:	fb0e fe0c 	mul.w	lr, lr, ip
 802311c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023120:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023124:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023128:	44bc      	add	ip, r7
 802312a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802312e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023132:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023136:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802313a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802313e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023142:	ea4c 070e 	orr.w	r7, ip, lr
 8023146:	970d      	str	r7, [sp, #52]	; 0x34
 8023148:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802314c:	d01e      	beq.n	802318c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 802314e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023150:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023154:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023158:	fb09 fe0e 	mul.w	lr, r9, lr
 802315c:	fb09 f907 	mul.w	r9, r9, r7
 8023160:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023164:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023168:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802316c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023170:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023174:	44f4      	add	ip, lr
 8023176:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802317a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802317e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023182:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023186:	ea4c 0709 	orr.w	r7, ip, r9
 802318a:	9709      	str	r7, [sp, #36]	; 0x24
 802318c:	2eff      	cmp	r6, #255	; 0xff
 802318e:	d01c      	beq.n	80231ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8023190:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023192:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023196:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802319a:	fb06 fe0e 	mul.w	lr, r6, lr
 802319e:	437e      	muls	r6, r7
 80231a0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80231a4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80231a8:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80231ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231b0:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80231b4:	44f4      	add	ip, lr
 80231b6:	0a36      	lsrs	r6, r6, #8
 80231b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80231c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231c4:	ea4c 0606 	orr.w	r6, ip, r6
 80231c8:	960f      	str	r6, [sp, #60]	; 0x3c
 80231ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80231cc:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80231d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231d4:	2aff      	cmp	r2, #255	; 0xff
 80231d6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80231da:	fb08 f606 	mul.w	r6, r8, r6
 80231de:	fb01 6607 	mla	r6, r1, r7, r6
 80231e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80231e4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231e8:	fb00 6607 	mla	r6, r0, r7, r6
 80231ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80231ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231f2:	fb0a 6607 	mla	r6, sl, r7, r6
 80231f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80231f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80231fc:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8023200:	fb08 f807 	mul.w	r8, r8, r7
 8023204:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023208:	fb01 8303 	mla	r3, r1, r3, r8
 802320c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802320e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023212:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023214:	fb00 330c 	mla	r3, r0, ip, r3
 8023218:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802321c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8023220:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023224:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023228:	ea46 060e 	orr.w	r6, r6, lr
 802322c:	b2f0      	uxtb	r0, r6
 802322e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8023232:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8023236:	d038      	beq.n	80232aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8023238:	43d2      	mvns	r2, r2
 802323a:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 802323e:	b2d2      	uxtb	r2, r2
 8023240:	4357      	muls	r7, r2
 8023242:	1c7b      	adds	r3, r7, #1
 8023244:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023248:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802324c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8023250:	4350      	muls	r0, r2
 8023252:	f805 3c03 	strb.w	r3, [r5, #-3]
 8023256:	1c43      	adds	r3, r0, #1
 8023258:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802325c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023260:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8023264:	4353      	muls	r3, r2
 8023266:	f805 1c02 	strb.w	r1, [r5, #-2]
 802326a:	1c5a      	adds	r2, r3, #1
 802326c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023270:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023274:	f805 6c01 	strb.w	r6, [r5, #-1]
 8023278:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802327a:	3503      	adds	r5, #3
 802327c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802327e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023282:	4413      	add	r3, r2
 8023284:	9329      	str	r3, [sp, #164]	; 0xa4
 8023286:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023288:	441c      	add	r4, r3
 802328a:	e510      	b.n	8022cae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 802328c:	b150      	cbz	r0, 80232a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802328e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023290:	5871      	ldr	r1, [r6, r1]
 8023292:	26ff      	movs	r6, #255	; 0xff
 8023294:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8023298:	9109      	str	r1, [sp, #36]	; 0x24
 802329a:	46b6      	mov	lr, r6
 802329c:	e6f5      	b.n	802308a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802329e:	26ff      	movs	r6, #255	; 0xff
 80232a0:	46b1      	mov	r9, r6
 80232a2:	e6f2      	b.n	802308a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80232a4:	26ff      	movs	r6, #255	; 0xff
 80232a6:	46b1      	mov	r9, r6
 80232a8:	e7f7      	b.n	802329a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 80232aa:	f805 0c03 	strb.w	r0, [r5, #-3]
 80232ae:	f805 1c02 	strb.w	r1, [r5, #-2]
 80232b2:	e7df      	b.n	8023274 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 80232b4:	b017      	add	sp, #92	; 0x5c
 80232b6:	ecbd 8b08 	vpop	{d8-d11}
 80232ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080232c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80232c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232c4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80232c8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80232cc:	2800      	cmp	r0, #0
 80232ce:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80232d2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80232d6:	fb0c 0e03 	mla	lr, ip, r3, r0
 80232da:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80232de:	db6b      	blt.n	80233b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80232e0:	4580      	cmp	r8, r0
 80232e2:	dd69      	ble.n	80233b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80232e4:	f1bc 0f00 	cmp.w	ip, #0
 80232e8:	db66      	blt.n	80233b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80232ea:	45e1      	cmp	r9, ip
 80232ec:	dd64      	ble.n	80233b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80232ee:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80232f2:	f01e 0f01 	tst.w	lr, #1
 80232f6:	5d16      	ldrb	r6, [r2, r4]
 80232f8:	bf0c      	ite	eq
 80232fa:	f006 060f 	andeq.w	r6, r6, #15
 80232fe:	1136      	asrne	r6, r6, #4
 8023300:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023304:	b2f6      	uxtb	r6, r6
 8023306:	f110 0a01 	adds.w	sl, r0, #1
 802330a:	d457      	bmi.n	80233bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802330c:	45d0      	cmp	r8, sl
 802330e:	dd55      	ble.n	80233bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023310:	f1bc 0f00 	cmp.w	ip, #0
 8023314:	db52      	blt.n	80233bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023316:	45e1      	cmp	r9, ip
 8023318:	dd50      	ble.n	80233bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802331a:	2f00      	cmp	r7, #0
 802331c:	f000 80ac 	beq.w	8023478 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8023320:	f10e 0b01 	add.w	fp, lr, #1
 8023324:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023328:	f01b 0f01 	tst.w	fp, #1
 802332c:	5d14      	ldrb	r4, [r2, r4]
 802332e:	bf0c      	ite	eq
 8023330:	f004 040f 	andeq.w	r4, r4, #15
 8023334:	1124      	asrne	r4, r4, #4
 8023336:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802333a:	b2e4      	uxtb	r4, r4
 802333c:	2d00      	cmp	r5, #0
 802333e:	f000 8096 	beq.w	802346e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8023342:	2800      	cmp	r0, #0
 8023344:	f10c 0c01 	add.w	ip, ip, #1
 8023348:	db3c      	blt.n	80233c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802334a:	4580      	cmp	r8, r0
 802334c:	dd3a      	ble.n	80233c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802334e:	f1bc 0f00 	cmp.w	ip, #0
 8023352:	db37      	blt.n	80233c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023354:	45e1      	cmp	r9, ip
 8023356:	dd35      	ble.n	80233c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023358:	eb03 0b0e 	add.w	fp, r3, lr
 802335c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023360:	f01b 0f01 	tst.w	fp, #1
 8023364:	5c10      	ldrb	r0, [r2, r0]
 8023366:	bf0c      	ite	eq
 8023368:	f000 000f 	andeq.w	r0, r0, #15
 802336c:	1100      	asrne	r0, r0, #4
 802336e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023372:	b2c0      	uxtb	r0, r0
 8023374:	f1ba 0f00 	cmp.w	sl, #0
 8023378:	db26      	blt.n	80233c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802337a:	45d0      	cmp	r8, sl
 802337c:	dd24      	ble.n	80233c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802337e:	f1bc 0f00 	cmp.w	ip, #0
 8023382:	db21      	blt.n	80233c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023384:	45e1      	cmp	r9, ip
 8023386:	dd1f      	ble.n	80233c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023388:	b307      	cbz	r7, 80233cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802338a:	3301      	adds	r3, #1
 802338c:	449e      	add	lr, r3
 802338e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023392:	f01e 0f01 	tst.w	lr, #1
 8023396:	5cd3      	ldrb	r3, [r2, r3]
 8023398:	bf0c      	ite	eq
 802339a:	f003 030f 	andeq.w	r3, r3, #15
 802339e:	111b      	asrne	r3, r3, #4
 80233a0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80233a4:	b2db      	uxtb	r3, r3
 80233a6:	2f0f      	cmp	r7, #15
 80233a8:	d911      	bls.n	80233ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80233aa:	4b35      	ldr	r3, [pc, #212]	; (8023480 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80233ac:	f240 11a5 	movw	r1, #421	; 0x1a5
 80233b0:	4a34      	ldr	r2, [pc, #208]	; (8023484 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80233b2:	4835      	ldr	r0, [pc, #212]	; (8023488 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80233b4:	f002 fb64 	bl	8025a80 <__assert_func>
 80233b8:	2600      	movs	r6, #0
 80233ba:	e7a4      	b.n	8023306 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80233bc:	2400      	movs	r4, #0
 80233be:	e7bd      	b.n	802333c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80233c0:	463c      	mov	r4, r7
 80233c2:	e7be      	b.n	8023342 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80233c4:	2000      	movs	r0, #0
 80233c6:	e7d5      	b.n	8023374 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80233c8:	2300      	movs	r3, #0
 80233ca:	e7ec      	b.n	80233a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80233cc:	463b      	mov	r3, r7
 80233ce:	2d0f      	cmp	r5, #15
 80233d0:	d8eb      	bhi.n	80233aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80233d2:	b2bf      	uxth	r7, r7
 80233d4:	b2ad      	uxth	r5, r5
 80233d6:	fb07 f205 	mul.w	r2, r7, r5
 80233da:	013f      	lsls	r7, r7, #4
 80233dc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80233e0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80233e4:	1abf      	subs	r7, r7, r2
 80233e6:	b2ad      	uxth	r5, r5
 80233e8:	b2bf      	uxth	r7, r7
 80233ea:	ebac 0c05 	sub.w	ip, ip, r5
 80233ee:	437c      	muls	r4, r7
 80233f0:	fa1f fc8c 	uxth.w	ip, ip
 80233f4:	fb06 440c 	mla	r4, r6, ip, r4
 80233f8:	fb05 4400 	mla	r4, r5, r0, r4
 80233fc:	fb02 4203 	mla	r2, r2, r3, r4
 8023400:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023404:	b38a      	cbz	r2, 802346a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023406:	4b21      	ldr	r3, [pc, #132]	; (802348c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023408:	681c      	ldr	r4, [r3, #0]
 802340a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802340e:	b2e5      	uxtb	r5, r4
 8023410:	4353      	muls	r3, r2
 8023412:	1c5a      	adds	r2, r3, #1
 8023414:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023418:	1212      	asrs	r2, r2, #8
 802341a:	b290      	uxth	r0, r2
 802341c:	43d2      	mvns	r2, r2
 802341e:	fb15 f500 	smulbb	r5, r5, r0
 8023422:	b2d3      	uxtb	r3, r2
 8023424:	780a      	ldrb	r2, [r1, #0]
 8023426:	fb02 5203 	mla	r2, r2, r3, r5
 802342a:	b292      	uxth	r2, r2
 802342c:	1c55      	adds	r5, r2, #1
 802342e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023432:	784d      	ldrb	r5, [r1, #1]
 8023434:	fb15 f503 	smulbb	r5, r5, r3
 8023438:	1212      	asrs	r2, r2, #8
 802343a:	700a      	strb	r2, [r1, #0]
 802343c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023440:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023444:	fb02 5200 	mla	r2, r2, r0, r5
 8023448:	b292      	uxth	r2, r2
 802344a:	1c55      	adds	r5, r2, #1
 802344c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023450:	1212      	asrs	r2, r2, #8
 8023452:	704a      	strb	r2, [r1, #1]
 8023454:	788a      	ldrb	r2, [r1, #2]
 8023456:	fb12 f303 	smulbb	r3, r2, r3
 802345a:	fb04 3300 	mla	r3, r4, r0, r3
 802345e:	b29b      	uxth	r3, r3
 8023460:	1c5a      	adds	r2, r3, #1
 8023462:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023466:	121b      	asrs	r3, r3, #8
 8023468:	708b      	strb	r3, [r1, #2]
 802346a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802346e:	2f0f      	cmp	r7, #15
 8023470:	d89b      	bhi.n	80233aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023472:	462b      	mov	r3, r5
 8023474:	4628      	mov	r0, r5
 8023476:	e7ac      	b.n	80233d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8023478:	2d00      	cmp	r5, #0
 802347a:	d1a1      	bne.n	80233c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802347c:	462c      	mov	r4, r5
 802347e:	e7f8      	b.n	8023472 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8023480:	0802b39d 	.word	0x0802b39d
 8023484:	0802b892 	.word	0x0802b892
 8023488:	0802b466 	.word	0x0802b466
 802348c:	2000b3f0 	.word	0x2000b3f0

08023490 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023494:	ed2d 8b08 	vpush	{d8-d11}
 8023498:	b097      	sub	sp, #92	; 0x5c
 802349a:	eeb0 aa40 	vmov.f32	s20, s0
 802349e:	eef0 9a60 	vmov.f32	s19, s1
 80234a2:	9308      	str	r3, [sp, #32]
 80234a4:	eeb0 9a41 	vmov.f32	s18, s2
 80234a8:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80234ac:	eeb0 8a62 	vmov.f32	s16, s5
 80234b0:	9214      	str	r2, [sp, #80]	; 0x50
 80234b2:	eef0 8a43 	vmov.f32	s17, s6
 80234b6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80234b8:	eef0 ba44 	vmov.f32	s23, s8
 80234bc:	9309      	str	r3, [sp, #36]	; 0x24
 80234be:	eeb0 ba64 	vmov.f32	s22, s9
 80234c2:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80234c6:	eef0 aa45 	vmov.f32	s21, s10
 80234ca:	9015      	str	r0, [sp, #84]	; 0x54
 80234cc:	910c      	str	r1, [sp, #48]	; 0x30
 80234ce:	930e      	str	r3, [sp, #56]	; 0x38
 80234d0:	6850      	ldr	r0, [r2, #4]
 80234d2:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 80234d6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80234da:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80234de:	fb00 1803 	mla	r8, r0, r3, r1
 80234e2:	6813      	ldr	r3, [r2, #0]
 80234e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80234e8:	4498      	add	r8, r3
 80234ea:	f10b 0301 	add.w	r3, fp, #1
 80234ee:	f023 0301 	bic.w	r3, r3, #1
 80234f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80234f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80234f6:	681f      	ldr	r7, [r3, #0]
 80234f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	dc03      	bgt.n	8023506 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80234fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023500:	2b00      	cmp	r3, #0
 8023502:	f340 8238 	ble.w	8023976 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023506:	9b08      	ldr	r3, [sp, #32]
 8023508:	2b00      	cmp	r3, #0
 802350a:	f340 810c 	ble.w	8023726 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802350e:	142a      	asrs	r2, r5, #16
 8023510:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023514:	d42c      	bmi.n	8023570 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023516:	1c51      	adds	r1, r2, #1
 8023518:	458b      	cmp	fp, r1
 802351a:	dd2c      	ble.n	8023576 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802351c:	2b00      	cmp	r3, #0
 802351e:	db2a      	blt.n	8023576 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023520:	1c59      	adds	r1, r3, #1
 8023522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023524:	4288      	cmp	r0, r1
 8023526:	dd26      	ble.n	8023576 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023528:	9b08      	ldr	r3, [sp, #32]
 802352a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802352c:	3b01      	subs	r3, #1
 802352e:	fb02 5203 	mla	r2, r2, r3, r5
 8023532:	1412      	asrs	r2, r2, #16
 8023534:	d429      	bmi.n	802358a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023536:	3201      	adds	r2, #1
 8023538:	4593      	cmp	fp, r2
 802353a:	dd26      	ble.n	802358a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802353c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802353e:	fb02 6303 	mla	r3, r2, r3, r6
 8023542:	141b      	asrs	r3, r3, #16
 8023544:	d421      	bmi.n	802358a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023546:	3301      	adds	r3, #1
 8023548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802354a:	429a      	cmp	r2, r3
 802354c:	dd1d      	ble.n	802358a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802354e:	f108 0e03 	add.w	lr, r8, #3
 8023552:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023556:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802355a:	f1b9 0f00 	cmp.w	r9, #0
 802355e:	f300 814f 	bgt.w	8023800 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8023562:	9b08      	ldr	r3, [sp, #32]
 8023564:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023568:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802356c:	44a0      	add	r8, r4
 802356e:	e0dc      	b.n	802372a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8023570:	1c51      	adds	r1, r2, #1
 8023572:	f040 80ce 	bne.w	8023712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023576:	4593      	cmp	fp, r2
 8023578:	f340 80cb 	ble.w	8023712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802357c:	1c5a      	adds	r2, r3, #1
 802357e:	f2c0 80c8 	blt.w	8023712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023584:	4293      	cmp	r3, r2
 8023586:	f280 80c4 	bge.w	8023712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802358a:	9b08      	ldr	r3, [sp, #32]
 802358c:	46c1      	mov	r9, r8
 802358e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8023592:	930d      	str	r3, [sp, #52]	; 0x34
 8023594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023596:	2b00      	cmp	r3, #0
 8023598:	dde3      	ble.n	8023562 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802359a:	1428      	asrs	r0, r5, #16
 802359c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80235a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80235a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80235a8:	f100 8111 	bmi.w	80237ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80235ac:	f100 0c01 	add.w	ip, r0, #1
 80235b0:	45e3      	cmp	fp, ip
 80235b2:	f340 810e 	ble.w	80237d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	f2c0 810b 	blt.w	80237d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80235bc:	f103 0c01 	add.w	ip, r3, #1
 80235c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80235c2:	4564      	cmp	r4, ip
 80235c4:	f340 8105 	ble.w	80237d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80235c8:	fb03 030a 	mla	r3, r3, sl, r0
 80235cc:	0858      	lsrs	r0, r3, #1
 80235ce:	07dc      	lsls	r4, r3, #31
 80235d0:	5c38      	ldrb	r0, [r7, r0]
 80235d2:	bf54      	ite	pl
 80235d4:	f000 000f 	andpl.w	r0, r0, #15
 80235d8:	1100      	asrmi	r0, r0, #4
 80235da:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80235de:	b2c0      	uxtb	r0, r0
 80235e0:	2a00      	cmp	r2, #0
 80235e2:	f000 80e1 	beq.w	80237a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 80235e6:	f103 0e01 	add.w	lr, r3, #1
 80235ea:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80235ee:	f01e 0f01 	tst.w	lr, #1
 80235f2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235f6:	bf0c      	ite	eq
 80235f8:	f00c 0c0f 	andeq.w	ip, ip, #15
 80235fc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023600:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023604:	fa5f f48c 	uxtb.w	r4, ip
 8023608:	9410      	str	r4, [sp, #64]	; 0x40
 802360a:	b1f9      	cbz	r1, 802364c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802360c:	4453      	add	r3, sl
 802360e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023612:	07dc      	lsls	r4, r3, #31
 8023614:	f103 0301 	add.w	r3, r3, #1
 8023618:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802361c:	bf54      	ite	pl
 802361e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023622:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023626:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802362a:	fa5f f48c 	uxtb.w	r4, ip
 802362e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023632:	940a      	str	r4, [sp, #40]	; 0x28
 8023634:	07dc      	lsls	r4, r3, #31
 8023636:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802363a:	bf54      	ite	pl
 802363c:	f00c 030f 	andpl.w	r3, ip, #15
 8023640:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023644:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023648:	b2db      	uxtb	r3, r3
 802364a:	9311      	str	r3, [sp, #68]	; 0x44
 802364c:	b292      	uxth	r2, r2
 802364e:	b289      	uxth	r1, r1
 8023650:	0113      	lsls	r3, r2, #4
 8023652:	fb02 fc01 	mul.w	ip, r2, r1
 8023656:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023658:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802365c:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8023660:	eba3 030c 	sub.w	r3, r3, ip
 8023664:	b289      	uxth	r1, r1
 8023666:	b29b      	uxth	r3, r3
 8023668:	ebae 0e01 	sub.w	lr, lr, r1
 802366c:	4353      	muls	r3, r2
 802366e:	fa1f fe8e 	uxth.w	lr, lr
 8023672:	fb00 320e 	mla	r2, r0, lr, r3
 8023676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023678:	fb01 2203 	mla	r2, r1, r3, r2
 802367c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802367e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023682:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023686:	2a00      	cmp	r2, #0
 8023688:	d039      	beq.n	80236fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802368a:	4bbd      	ldr	r3, [pc, #756]	; (8023980 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802368c:	6819      	ldr	r1, [r3, #0]
 802368e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023690:	fa5f fc81 	uxtb.w	ip, r1
 8023694:	435a      	muls	r2, r3
 8023696:	1c53      	adds	r3, r2, #1
 8023698:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802369c:	1212      	asrs	r2, r2, #8
 802369e:	b290      	uxth	r0, r2
 80236a0:	43d2      	mvns	r2, r2
 80236a2:	fb1c fc00 	smulbb	ip, ip, r0
 80236a6:	b2d3      	uxtb	r3, r2
 80236a8:	f899 2000 	ldrb.w	r2, [r9]
 80236ac:	fb02 c203 	mla	r2, r2, r3, ip
 80236b0:	b292      	uxth	r2, r2
 80236b2:	f102 0c01 	add.w	ip, r2, #1
 80236b6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80236ba:	f899 c001 	ldrb.w	ip, [r9, #1]
 80236be:	fb1c fc03 	smulbb	ip, ip, r3
 80236c2:	1212      	asrs	r2, r2, #8
 80236c4:	f889 2000 	strb.w	r2, [r9]
 80236c8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80236cc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80236d0:	fb02 c200 	mla	r2, r2, r0, ip
 80236d4:	b292      	uxth	r2, r2
 80236d6:	f102 0c01 	add.w	ip, r2, #1
 80236da:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80236de:	1212      	asrs	r2, r2, #8
 80236e0:	f889 2001 	strb.w	r2, [r9, #1]
 80236e4:	f899 2002 	ldrb.w	r2, [r9, #2]
 80236e8:	fb12 f303 	smulbb	r3, r2, r3
 80236ec:	fb01 3300 	mla	r3, r1, r0, r3
 80236f0:	b29b      	uxth	r3, r3
 80236f2:	1c5a      	adds	r2, r3, #1
 80236f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80236f8:	121b      	asrs	r3, r3, #8
 80236fa:	f889 3002 	strb.w	r3, [r9, #2]
 80236fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023700:	f109 0903 	add.w	r9, r9, #3
 8023704:	441d      	add	r5, r3
 8023706:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023708:	441e      	add	r6, r3
 802370a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802370c:	3b01      	subs	r3, #1
 802370e:	930d      	str	r3, [sp, #52]	; 0x34
 8023710:	e740      	b.n	8023594 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8023712:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023714:	f108 0803 	add.w	r8, r8, #3
 8023718:	441d      	add	r5, r3
 802371a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802371c:	441e      	add	r6, r3
 802371e:	9b08      	ldr	r3, [sp, #32]
 8023720:	3b01      	subs	r3, #1
 8023722:	9308      	str	r3, [sp, #32]
 8023724:	e6ef      	b.n	8023506 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023726:	f47f aeff 	bne.w	8023528 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802372a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802372c:	2b00      	cmp	r3, #0
 802372e:	f340 8122 	ble.w	8023976 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023736:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023738:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802373c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023740:	eef0 6a48 	vmov.f32	s13, s16
 8023744:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023748:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802374c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023750:	ee16 5a90 	vmov	r5, s13
 8023754:	eef0 6a68 	vmov.f32	s13, s17
 8023758:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802375c:	ee16 6a90 	vmov	r6, s13
 8023760:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023764:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023768:	ee37 8a48 	vsub.f32	s16, s14, s16
 802376c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023770:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023774:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023778:	ee18 2a10 	vmov	r2, s16
 802377c:	eeb0 8a47 	vmov.f32	s16, s14
 8023780:	fb92 f3f3 	sdiv	r3, r2, r3
 8023784:	ee18 2a90 	vmov	r2, s17
 8023788:	932b      	str	r3, [sp, #172]	; 0xac
 802378a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802378c:	eef0 8a67 	vmov.f32	s17, s15
 8023790:	fb92 f3f3 	sdiv	r3, r2, r3
 8023794:	932c      	str	r3, [sp, #176]	; 0xb0
 8023796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023798:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802379a:	3b01      	subs	r3, #1
 802379c:	930c      	str	r3, [sp, #48]	; 0x30
 802379e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80237a0:	bf08      	it	eq
 80237a2:	4613      	moveq	r3, r2
 80237a4:	9308      	str	r3, [sp, #32]
 80237a6:	e6a7      	b.n	80234f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80237a8:	2900      	cmp	r1, #0
 80237aa:	f43f af4f 	beq.w	802364c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80237ae:	4453      	add	r3, sl
 80237b0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80237b4:	07db      	lsls	r3, r3, #31
 80237b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80237ba:	bf54      	ite	pl
 80237bc:	f00c 030f 	andpl.w	r3, ip, #15
 80237c0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80237c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80237c8:	b2db      	uxtb	r3, r3
 80237ca:	930a      	str	r3, [sp, #40]	; 0x28
 80237cc:	e73e      	b.n	802364c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80237ce:	1c44      	adds	r4, r0, #1
 80237d0:	d195      	bne.n	80236fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80237d2:	4583      	cmp	fp, r0
 80237d4:	dd93      	ble.n	80236fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80237d6:	1c5c      	adds	r4, r3, #1
 80237d8:	db91      	blt.n	80236fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80237da:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80237dc:	429c      	cmp	r4, r3
 80237de:	dd8e      	ble.n	80236fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80237e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80237e2:	9002      	str	r0, [sp, #8]
 80237e4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80237e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80237ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237ec:	463a      	mov	r2, r7
 80237ee:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80237f2:	e9cd b300 	strd	fp, r3, [sp]
 80237f6:	4649      	mov	r1, r9
 80237f8:	4653      	mov	r3, sl
 80237fa:	f7ff fd61 	bl	80232c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80237fe:	e77e      	b.n	80236fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023800:	142a      	asrs	r2, r5, #16
 8023802:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023806:	1433      	asrs	r3, r6, #16
 8023808:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802380c:	fb0a 2303 	mla	r3, sl, r3, r2
 8023810:	085a      	lsrs	r2, r3, #1
 8023812:	07dc      	lsls	r4, r3, #31
 8023814:	5cba      	ldrb	r2, [r7, r2]
 8023816:	bf54      	ite	pl
 8023818:	f002 020f 	andpl.w	r2, r2, #15
 802381c:	1112      	asrmi	r2, r2, #4
 802381e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023822:	b2d2      	uxtb	r2, r2
 8023824:	2900      	cmp	r1, #0
 8023826:	f000 8093 	beq.w	8023950 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 802382a:	1c5c      	adds	r4, r3, #1
 802382c:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8023830:	07e4      	lsls	r4, r4, #31
 8023832:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023836:	bf54      	ite	pl
 8023838:	f00c 0c0f 	andpl.w	ip, ip, #15
 802383c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023840:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023844:	fa5f f48c 	uxtb.w	r4, ip
 8023848:	9412      	str	r4, [sp, #72]	; 0x48
 802384a:	b300      	cbz	r0, 802388e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802384c:	4453      	add	r3, sl
 802384e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023852:	07dc      	lsls	r4, r3, #31
 8023854:	f103 0301 	add.w	r3, r3, #1
 8023858:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802385c:	bf54      	ite	pl
 802385e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023862:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023866:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802386a:	fa5f f48c 	uxtb.w	r4, ip
 802386e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023872:	940b      	str	r4, [sp, #44]	; 0x2c
 8023874:	07dc      	lsls	r4, r3, #31
 8023876:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802387a:	bf54      	ite	pl
 802387c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023880:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023884:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023888:	fa5f f38c 	uxtb.w	r3, ip
 802388c:	9313      	str	r3, [sp, #76]	; 0x4c
 802388e:	b289      	uxth	r1, r1
 8023890:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023892:	b280      	uxth	r0, r0
 8023894:	fb01 f300 	mul.w	r3, r1, r0
 8023898:	0109      	lsls	r1, r1, #4
 802389a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802389e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80238a2:	1ac9      	subs	r1, r1, r3
 80238a4:	b280      	uxth	r0, r0
 80238a6:	b289      	uxth	r1, r1
 80238a8:	ebac 0c00 	sub.w	ip, ip, r0
 80238ac:	4361      	muls	r1, r4
 80238ae:	fa1f fc8c 	uxth.w	ip, ip
 80238b2:	fb02 120c 	mla	r2, r2, ip, r1
 80238b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80238b8:	fb00 2001 	mla	r0, r0, r1, r2
 80238bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80238be:	fb03 0302 	mla	r3, r3, r2, r0
 80238c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d039      	beq.n	802393e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 80238ca:	4a2d      	ldr	r2, [pc, #180]	; (8023980 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80238cc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80238d0:	6810      	ldr	r0, [r2, #0]
 80238d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80238d4:	fa5f fc80 	uxtb.w	ip, r0
 80238d8:	4353      	muls	r3, r2
 80238da:	1c5a      	adds	r2, r3, #1
 80238dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80238e0:	121b      	asrs	r3, r3, #8
 80238e2:	b29a      	uxth	r2, r3
 80238e4:	43db      	mvns	r3, r3
 80238e6:	fb1c fc02 	smulbb	ip, ip, r2
 80238ea:	b2db      	uxtb	r3, r3
 80238ec:	fb01 c103 	mla	r1, r1, r3, ip
 80238f0:	b289      	uxth	r1, r1
 80238f2:	f101 0c01 	add.w	ip, r1, #1
 80238f6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80238fa:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80238fe:	fb1c fc03 	smulbb	ip, ip, r3
 8023902:	1209      	asrs	r1, r1, #8
 8023904:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023908:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802390c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023910:	fb01 c102 	mla	r1, r1, r2, ip
 8023914:	b289      	uxth	r1, r1
 8023916:	f101 0c01 	add.w	ip, r1, #1
 802391a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802391e:	1209      	asrs	r1, r1, #8
 8023920:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023924:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023928:	fb11 f303 	smulbb	r3, r1, r3
 802392c:	fb00 3002 	mla	r0, r0, r2, r3
 8023930:	b280      	uxth	r0, r0
 8023932:	1c42      	adds	r2, r0, #1
 8023934:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023938:	1200      	asrs	r0, r0, #8
 802393a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802393e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023940:	f10e 0e03 	add.w	lr, lr, #3
 8023944:	f109 39ff 	add.w	r9, r9, #4294967295
 8023948:	441d      	add	r5, r3
 802394a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802394c:	441e      	add	r6, r3
 802394e:	e604      	b.n	802355a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8023950:	2800      	cmp	r0, #0
 8023952:	d09c      	beq.n	802388e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8023954:	4453      	add	r3, sl
 8023956:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802395a:	07db      	lsls	r3, r3, #31
 802395c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023960:	bf54      	ite	pl
 8023962:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023966:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802396a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802396e:	fa5f f38c 	uxtb.w	r3, ip
 8023972:	930b      	str	r3, [sp, #44]	; 0x2c
 8023974:	e78b      	b.n	802388e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8023976:	b017      	add	sp, #92	; 0x5c
 8023978:	ecbd 8b08 	vpop	{d8-d11}
 802397c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023980:	2000b3f0 	.word	0x2000b3f0

08023984 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023988:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802398c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023990:	2800      	cmp	r0, #0
 8023992:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023996:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802399a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802399e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80239a2:	db6b      	blt.n	8023a7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80239a4:	4580      	cmp	r8, r0
 80239a6:	dd69      	ble.n	8023a7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80239a8:	f1bc 0f00 	cmp.w	ip, #0
 80239ac:	db66      	blt.n	8023a7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80239ae:	45e1      	cmp	r9, ip
 80239b0:	dd64      	ble.n	8023a7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80239b2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80239b6:	f01e 0f01 	tst.w	lr, #1
 80239ba:	5d16      	ldrb	r6, [r2, r4]
 80239bc:	bf0c      	ite	eq
 80239be:	f006 060f 	andeq.w	r6, r6, #15
 80239c2:	1136      	asrne	r6, r6, #4
 80239c4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80239c8:	b2f6      	uxtb	r6, r6
 80239ca:	f110 0a01 	adds.w	sl, r0, #1
 80239ce:	d457      	bmi.n	8023a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80239d0:	45d0      	cmp	r8, sl
 80239d2:	dd55      	ble.n	8023a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80239d4:	f1bc 0f00 	cmp.w	ip, #0
 80239d8:	db52      	blt.n	8023a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80239da:	45e1      	cmp	r9, ip
 80239dc:	dd50      	ble.n	8023a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80239de:	2f00      	cmp	r7, #0
 80239e0:	f000 80a5 	beq.w	8023b2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80239e4:	f10e 0b01 	add.w	fp, lr, #1
 80239e8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80239ec:	f01b 0f01 	tst.w	fp, #1
 80239f0:	5d14      	ldrb	r4, [r2, r4]
 80239f2:	bf0c      	ite	eq
 80239f4:	f004 040f 	andeq.w	r4, r4, #15
 80239f8:	1124      	asrne	r4, r4, #4
 80239fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80239fe:	b2e4      	uxtb	r4, r4
 8023a00:	2d00      	cmp	r5, #0
 8023a02:	f000 808f 	beq.w	8023b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023a06:	2800      	cmp	r0, #0
 8023a08:	f10c 0c01 	add.w	ip, ip, #1
 8023a0c:	db3c      	blt.n	8023a88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023a0e:	4580      	cmp	r8, r0
 8023a10:	dd3a      	ble.n	8023a88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023a12:	f1bc 0f00 	cmp.w	ip, #0
 8023a16:	db37      	blt.n	8023a88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023a18:	45e1      	cmp	r9, ip
 8023a1a:	dd35      	ble.n	8023a88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023a1c:	eb03 0b0e 	add.w	fp, r3, lr
 8023a20:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023a24:	f01b 0f01 	tst.w	fp, #1
 8023a28:	5c10      	ldrb	r0, [r2, r0]
 8023a2a:	bf0c      	ite	eq
 8023a2c:	f000 000f 	andeq.w	r0, r0, #15
 8023a30:	1100      	asrne	r0, r0, #4
 8023a32:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023a36:	b2c0      	uxtb	r0, r0
 8023a38:	f1ba 0f00 	cmp.w	sl, #0
 8023a3c:	db26      	blt.n	8023a8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023a3e:	45d0      	cmp	r8, sl
 8023a40:	dd24      	ble.n	8023a8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023a42:	f1bc 0f00 	cmp.w	ip, #0
 8023a46:	db21      	blt.n	8023a8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023a48:	45e1      	cmp	r9, ip
 8023a4a:	dd1f      	ble.n	8023a8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023a4c:	b307      	cbz	r7, 8023a90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8023a4e:	3301      	adds	r3, #1
 8023a50:	449e      	add	lr, r3
 8023a52:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023a56:	f01e 0f01 	tst.w	lr, #1
 8023a5a:	5cd3      	ldrb	r3, [r2, r3]
 8023a5c:	bf0c      	ite	eq
 8023a5e:	f003 030f 	andeq.w	r3, r3, #15
 8023a62:	111b      	asrne	r3, r3, #4
 8023a64:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023a68:	b2db      	uxtb	r3, r3
 8023a6a:	2f0f      	cmp	r7, #15
 8023a6c:	d911      	bls.n	8023a92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8023a6e:	4b32      	ldr	r3, [pc, #200]	; (8023b38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8023a70:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023a74:	4a31      	ldr	r2, [pc, #196]	; (8023b3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8023a76:	4832      	ldr	r0, [pc, #200]	; (8023b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8023a78:	f002 f802 	bl	8025a80 <__assert_func>
 8023a7c:	2600      	movs	r6, #0
 8023a7e:	e7a4      	b.n	80239ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023a80:	2400      	movs	r4, #0
 8023a82:	e7bd      	b.n	8023a00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023a84:	463c      	mov	r4, r7
 8023a86:	e7be      	b.n	8023a06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023a88:	2000      	movs	r0, #0
 8023a8a:	e7d5      	b.n	8023a38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8023a8c:	2300      	movs	r3, #0
 8023a8e:	e7ec      	b.n	8023a6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023a90:	463b      	mov	r3, r7
 8023a92:	2d0f      	cmp	r5, #15
 8023a94:	d8eb      	bhi.n	8023a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023a96:	b2bf      	uxth	r7, r7
 8023a98:	b2ad      	uxth	r5, r5
 8023a9a:	fb07 f205 	mul.w	r2, r7, r5
 8023a9e:	013f      	lsls	r7, r7, #4
 8023aa0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023aa4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023aa8:	1abf      	subs	r7, r7, r2
 8023aaa:	b2ad      	uxth	r5, r5
 8023aac:	b2bf      	uxth	r7, r7
 8023aae:	ebac 0c05 	sub.w	ip, ip, r5
 8023ab2:	437c      	muls	r4, r7
 8023ab4:	fa1f fc8c 	uxth.w	ip, ip
 8023ab8:	fb06 440c 	mla	r4, r6, ip, r4
 8023abc:	fb05 4400 	mla	r4, r5, r0, r4
 8023ac0:	fb02 4303 	mla	r3, r2, r3, r4
 8023ac4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023ac8:	b353      	cbz	r3, 8023b20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8023aca:	4a1e      	ldr	r2, [pc, #120]	; (8023b44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8023acc:	7808      	ldrb	r0, [r1, #0]
 8023ace:	6814      	ldr	r4, [r2, #0]
 8023ad0:	b29a      	uxth	r2, r3
 8023ad2:	43db      	mvns	r3, r3
 8023ad4:	b2e5      	uxtb	r5, r4
 8023ad6:	b2db      	uxtb	r3, r3
 8023ad8:	fb15 f502 	smulbb	r5, r5, r2
 8023adc:	fb00 5003 	mla	r0, r0, r3, r5
 8023ae0:	b280      	uxth	r0, r0
 8023ae2:	1c45      	adds	r5, r0, #1
 8023ae4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023ae8:	784d      	ldrb	r5, [r1, #1]
 8023aea:	fb15 f503 	smulbb	r5, r5, r3
 8023aee:	1200      	asrs	r0, r0, #8
 8023af0:	7008      	strb	r0, [r1, #0]
 8023af2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023af6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023afa:	fb00 5002 	mla	r0, r0, r2, r5
 8023afe:	b280      	uxth	r0, r0
 8023b00:	1c45      	adds	r5, r0, #1
 8023b02:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023b06:	1200      	asrs	r0, r0, #8
 8023b08:	7048      	strb	r0, [r1, #1]
 8023b0a:	7888      	ldrb	r0, [r1, #2]
 8023b0c:	fb10 f303 	smulbb	r3, r0, r3
 8023b10:	fb04 3202 	mla	r2, r4, r2, r3
 8023b14:	b292      	uxth	r2, r2
 8023b16:	1c53      	adds	r3, r2, #1
 8023b18:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023b1c:	1212      	asrs	r2, r2, #8
 8023b1e:	708a      	strb	r2, [r1, #2]
 8023b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b24:	2f0f      	cmp	r7, #15
 8023b26:	d8a2      	bhi.n	8023a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023b28:	462b      	mov	r3, r5
 8023b2a:	4628      	mov	r0, r5
 8023b2c:	e7b3      	b.n	8023a96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8023b2e:	2d00      	cmp	r5, #0
 8023b30:	d1a8      	bne.n	8023a84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8023b32:	462c      	mov	r4, r5
 8023b34:	e7f8      	b.n	8023b28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8023b36:	bf00      	nop
 8023b38:	0802b39d 	.word	0x0802b39d
 8023b3c:	0802b892 	.word	0x0802b892
 8023b40:	0802b466 	.word	0x0802b466
 8023b44:	2000b3f0 	.word	0x2000b3f0

08023b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b4c:	ed2d 8b08 	vpush	{d8-d11}
 8023b50:	b095      	sub	sp, #84	; 0x54
 8023b52:	461c      	mov	r4, r3
 8023b54:	eeb0 aa40 	vmov.f32	s20, s0
 8023b58:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8023b5c:	eef0 9a60 	vmov.f32	s19, s1
 8023b60:	920e      	str	r2, [sp, #56]	; 0x38
 8023b62:	eeb0 9a41 	vmov.f32	s18, s2
 8023b66:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023b68:	eeb0 8a62 	vmov.f32	s16, s5
 8023b6c:	9307      	str	r3, [sp, #28]
 8023b6e:	eef0 8a43 	vmov.f32	s17, s6
 8023b72:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8023b76:	eef0 ba44 	vmov.f32	s23, s8
 8023b7a:	9013      	str	r0, [sp, #76]	; 0x4c
 8023b7c:	eeb0 ba64 	vmov.f32	s22, s9
 8023b80:	9109      	str	r1, [sp, #36]	; 0x24
 8023b82:	eef0 aa45 	vmov.f32	s21, s10
 8023b86:	9308      	str	r3, [sp, #32]
 8023b88:	6850      	ldr	r0, [r2, #4]
 8023b8a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023b8e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8023b92:	fb00 1803 	mla	r8, r0, r3, r1
 8023b96:	6813      	ldr	r3, [r2, #0]
 8023b98:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023b9c:	4498      	add	r8, r3
 8023b9e:	9b07      	ldr	r3, [sp, #28]
 8023ba0:	3301      	adds	r3, #1
 8023ba2:	f023 0301 	bic.w	r3, r3, #1
 8023ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ba8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023baa:	681f      	ldr	r7, [r3, #0]
 8023bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	dc03      	bgt.n	8023bba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023bb4:	2b00      	cmp	r3, #0
 8023bb6:	f340 8238 	ble.w	802402a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023bba:	2c00      	cmp	r4, #0
 8023bbc:	f340 8109 	ble.w	8023dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023bc0:	142a      	asrs	r2, r5, #16
 8023bc2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023bc6:	d42b      	bmi.n	8023c20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023bc8:	1c51      	adds	r1, r2, #1
 8023bca:	9807      	ldr	r0, [sp, #28]
 8023bcc:	4288      	cmp	r0, r1
 8023bce:	dd2a      	ble.n	8023c26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023bd0:	2b00      	cmp	r3, #0
 8023bd2:	db28      	blt.n	8023c26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023bd4:	1c59      	adds	r1, r3, #1
 8023bd6:	9808      	ldr	r0, [sp, #32]
 8023bd8:	4288      	cmp	r0, r1
 8023bda:	dd24      	ble.n	8023c26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023bdc:	1e63      	subs	r3, r4, #1
 8023bde:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023be0:	fb02 5203 	mla	r2, r2, r3, r5
 8023be4:	1412      	asrs	r2, r2, #16
 8023be6:	d429      	bmi.n	8023c3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023be8:	3201      	adds	r2, #1
 8023bea:	9907      	ldr	r1, [sp, #28]
 8023bec:	4291      	cmp	r1, r2
 8023bee:	dd25      	ble.n	8023c3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023bf0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023bf2:	fb02 6303 	mla	r3, r2, r3, r6
 8023bf6:	141b      	asrs	r3, r3, #16
 8023bf8:	d420      	bmi.n	8023c3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023bfa:	3301      	adds	r3, #1
 8023bfc:	9a08      	ldr	r2, [sp, #32]
 8023bfe:	429a      	cmp	r2, r3
 8023c00:	dd1c      	ble.n	8023c3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023c02:	f108 0e03 	add.w	lr, r8, #3
 8023c06:	46a1      	mov	r9, r4
 8023c08:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8023c0c:	f1b9 0f00 	cmp.w	r9, #0
 8023c10:	f300 8155 	bgt.w	8023ebe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8023c14:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023c18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c1c:	44a0      	add	r8, r4
 8023c1e:	e0da      	b.n	8023dd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8023c20:	1c50      	adds	r0, r2, #1
 8023c22:	f040 80ce 	bne.w	8023dc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023c26:	9907      	ldr	r1, [sp, #28]
 8023c28:	4291      	cmp	r1, r2
 8023c2a:	f340 80ca 	ble.w	8023dc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023c2e:	1c59      	adds	r1, r3, #1
 8023c30:	f2c0 80c7 	blt.w	8023dc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023c34:	9a08      	ldr	r2, [sp, #32]
 8023c36:	4293      	cmp	r3, r2
 8023c38:	f280 80c3 	bge.w	8023dc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023c3c:	46a3      	mov	fp, r4
 8023c3e:	46c1      	mov	r9, r8
 8023c40:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8023c44:	f1bb 0f00 	cmp.w	fp, #0
 8023c48:	dde4      	ble.n	8023c14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8023c4a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023c4e:	1428      	asrs	r0, r5, #16
 8023c50:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023c54:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023c58:	920a      	str	r2, [sp, #40]	; 0x28
 8023c5a:	f100 8116 	bmi.w	8023e8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023c5e:	f100 0c01 	add.w	ip, r0, #1
 8023c62:	9a07      	ldr	r2, [sp, #28]
 8023c64:	4562      	cmp	r2, ip
 8023c66:	f340 8112 	ble.w	8023e8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8023c6a:	2b00      	cmp	r3, #0
 8023c6c:	f2c0 810f 	blt.w	8023e8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8023c70:	f103 0c01 	add.w	ip, r3, #1
 8023c74:	9a08      	ldr	r2, [sp, #32]
 8023c76:	4562      	cmp	r2, ip
 8023c78:	f340 8109 	ble.w	8023e8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8023c7c:	fb03 030a 	mla	r3, r3, sl, r0
 8023c80:	0858      	lsrs	r0, r3, #1
 8023c82:	07da      	lsls	r2, r3, #31
 8023c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c86:	5c38      	ldrb	r0, [r7, r0]
 8023c88:	bf54      	ite	pl
 8023c8a:	f000 000f 	andpl.w	r0, r0, #15
 8023c8e:	1100      	asrmi	r0, r0, #4
 8023c90:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023c94:	b2c0      	uxtb	r0, r0
 8023c96:	2a00      	cmp	r2, #0
 8023c98:	f000 80dd 	beq.w	8023e56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8023c9c:	f103 0e01 	add.w	lr, r3, #1
 8023ca0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023ca4:	f01e 0f01 	tst.w	lr, #1
 8023ca8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023cac:	bf0c      	ite	eq
 8023cae:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023cb2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023cb6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023cba:	fa5f fc8c 	uxtb.w	ip, ip
 8023cbe:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8023cc2:	b301      	cbz	r1, 8023d06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023cc4:	4453      	add	r3, sl
 8023cc6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023cca:	07da      	lsls	r2, r3, #31
 8023ccc:	f103 0301 	add.w	r3, r3, #1
 8023cd0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023cd4:	bf54      	ite	pl
 8023cd6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023cda:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023cde:	07da      	lsls	r2, r3, #31
 8023ce0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023ce4:	fa5f fc8c 	uxtb.w	ip, ip
 8023ce8:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8023cec:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023cf0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023cf4:	bf54      	ite	pl
 8023cf6:	f00c 030f 	andpl.w	r3, ip, #15
 8023cfa:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023cfe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023d02:	b2db      	uxtb	r3, r3
 8023d04:	9310      	str	r3, [sp, #64]	; 0x40
 8023d06:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8023d0a:	b289      	uxth	r1, r1
 8023d0c:	fb02 f301 	mul.w	r3, r2, r1
 8023d10:	0112      	lsls	r2, r2, #4
 8023d12:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023d16:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8023d1a:	1ad2      	subs	r2, r2, r3
 8023d1c:	fa1f fe81 	uxth.w	lr, r1
 8023d20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023d22:	b292      	uxth	r2, r2
 8023d24:	ebac 0c0e 	sub.w	ip, ip, lr
 8023d28:	434a      	muls	r2, r1
 8023d2a:	fa1f fc8c 	uxth.w	ip, ip
 8023d2e:	fb00 200c 	mla	r0, r0, ip, r2
 8023d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023d34:	fb0e 0002 	mla	r0, lr, r2, r0
 8023d38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023d3a:	fb03 0002 	mla	r0, r3, r2, r0
 8023d3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023d42:	b3a8      	cbz	r0, 8023db0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023d44:	4bbb      	ldr	r3, [pc, #748]	; (8024034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023d46:	28ff      	cmp	r0, #255	; 0xff
 8023d48:	681b      	ldr	r3, [r3, #0]
 8023d4a:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8023d4e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8023d52:	b2db      	uxtb	r3, r3
 8023d54:	f000 8092 	beq.w	8023e7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8023d58:	b282      	uxth	r2, r0
 8023d5a:	43c0      	mvns	r0, r0
 8023d5c:	f899 e000 	ldrb.w	lr, [r9]
 8023d60:	fb13 f302 	smulbb	r3, r3, r2
 8023d64:	b2c0      	uxtb	r0, r0
 8023d66:	fb11 f102 	smulbb	r1, r1, r2
 8023d6a:	fb0e 3300 	mla	r3, lr, r0, r3
 8023d6e:	fb1c f202 	smulbb	r2, ip, r2
 8023d72:	b29b      	uxth	r3, r3
 8023d74:	f103 0e01 	add.w	lr, r3, #1
 8023d78:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023d7c:	121b      	asrs	r3, r3, #8
 8023d7e:	f889 3000 	strb.w	r3, [r9]
 8023d82:	f899 3001 	ldrb.w	r3, [r9, #1]
 8023d86:	fb03 1100 	mla	r1, r3, r0, r1
 8023d8a:	b289      	uxth	r1, r1
 8023d8c:	1c4b      	adds	r3, r1, #1
 8023d8e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023d92:	f899 3002 	ldrb.w	r3, [r9, #2]
 8023d96:	fb03 2000 	mla	r0, r3, r0, r2
 8023d9a:	1209      	asrs	r1, r1, #8
 8023d9c:	b280      	uxth	r0, r0
 8023d9e:	f889 1001 	strb.w	r1, [r9, #1]
 8023da2:	f100 0c01 	add.w	ip, r0, #1
 8023da6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8023daa:	1200      	asrs	r0, r0, #8
 8023dac:	f889 0002 	strb.w	r0, [r9, #2]
 8023db0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023db2:	f109 0903 	add.w	r9, r9, #3
 8023db6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023dba:	441d      	add	r5, r3
 8023dbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023dbe:	441e      	add	r6, r3
 8023dc0:	e740      	b.n	8023c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023dc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023dc4:	3c01      	subs	r4, #1
 8023dc6:	f108 0803 	add.w	r8, r8, #3
 8023dca:	441d      	add	r5, r3
 8023dcc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023dce:	441e      	add	r6, r3
 8023dd0:	e6f3      	b.n	8023bba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023dd2:	f47f af03 	bne.w	8023bdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dd8:	2b00      	cmp	r3, #0
 8023dda:	f340 8126 	ble.w	802402a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023de4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023de8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023dec:	eef0 6a48 	vmov.f32	s13, s16
 8023df0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023df4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023df8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023dfc:	ee16 5a90 	vmov	r5, s13
 8023e00:	eef0 6a68 	vmov.f32	s13, s17
 8023e04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e08:	ee16 6a90 	vmov	r6, s13
 8023e0c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023e10:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023e14:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023e18:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023e1c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023e20:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023e24:	ee18 2a10 	vmov	r2, s16
 8023e28:	eeb0 8a47 	vmov.f32	s16, s14
 8023e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e30:	ee18 2a90 	vmov	r2, s17
 8023e34:	9329      	str	r3, [sp, #164]	; 0xa4
 8023e36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023e38:	eef0 8a67 	vmov.f32	s17, s15
 8023e3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e40:	932a      	str	r3, [sp, #168]	; 0xa8
 8023e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023e46:	3b01      	subs	r3, #1
 8023e48:	9309      	str	r3, [sp, #36]	; 0x24
 8023e4a:	bf08      	it	eq
 8023e4c:	4614      	moveq	r4, r2
 8023e4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023e50:	bf18      	it	ne
 8023e52:	461c      	movne	r4, r3
 8023e54:	e6aa      	b.n	8023bac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023e56:	2900      	cmp	r1, #0
 8023e58:	f43f af55 	beq.w	8023d06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023e5c:	4453      	add	r3, sl
 8023e5e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023e62:	07db      	lsls	r3, r3, #31
 8023e64:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023e68:	bf54      	ite	pl
 8023e6a:	f00c 030f 	andpl.w	r3, ip, #15
 8023e6e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023e72:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023e76:	b2db      	uxtb	r3, r3
 8023e78:	930c      	str	r3, [sp, #48]	; 0x30
 8023e7a:	e744      	b.n	8023d06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023e7c:	f889 3000 	strb.w	r3, [r9]
 8023e80:	f889 1001 	strb.w	r1, [r9, #1]
 8023e84:	f889 c002 	strb.w	ip, [r9, #2]
 8023e88:	e792      	b.n	8023db0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023e8a:	1c42      	adds	r2, r0, #1
 8023e8c:	d190      	bne.n	8023db0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023e8e:	9a07      	ldr	r2, [sp, #28]
 8023e90:	4282      	cmp	r2, r0
 8023e92:	dd8d      	ble.n	8023db0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023e94:	1c5a      	adds	r2, r3, #1
 8023e96:	db8b      	blt.n	8023db0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023e98:	9a08      	ldr	r2, [sp, #32]
 8023e9a:	429a      	cmp	r2, r3
 8023e9c:	dd88      	ble.n	8023db0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ea0:	9105      	str	r1, [sp, #20]
 8023ea2:	4649      	mov	r1, r9
 8023ea4:	9002      	str	r0, [sp, #8]
 8023ea6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023ea8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023eac:	9b08      	ldr	r3, [sp, #32]
 8023eae:	463a      	mov	r2, r7
 8023eb0:	9301      	str	r3, [sp, #4]
 8023eb2:	9b07      	ldr	r3, [sp, #28]
 8023eb4:	9300      	str	r3, [sp, #0]
 8023eb6:	4653      	mov	r3, sl
 8023eb8:	f7ff fd64 	bl	8023984 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023ebc:	e778      	b.n	8023db0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023ebe:	142a      	asrs	r2, r5, #16
 8023ec0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023ec4:	1433      	asrs	r3, r6, #16
 8023ec6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023eca:	fb0a 2303 	mla	r3, sl, r3, r2
 8023ece:	085a      	lsrs	r2, r3, #1
 8023ed0:	07d9      	lsls	r1, r3, #31
 8023ed2:	5cba      	ldrb	r2, [r7, r2]
 8023ed4:	bf54      	ite	pl
 8023ed6:	f002 020f 	andpl.w	r2, r2, #15
 8023eda:	1112      	asrmi	r2, r2, #4
 8023edc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023ee0:	b2d2      	uxtb	r2, r2
 8023ee2:	2800      	cmp	r0, #0
 8023ee4:	f000 808a 	beq.w	8023ffc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023ee8:	f103 0b01 	add.w	fp, r3, #1
 8023eec:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023ef0:	f01b 0f01 	tst.w	fp, #1
 8023ef4:	5c79      	ldrb	r1, [r7, r1]
 8023ef6:	bf0c      	ite	eq
 8023ef8:	f001 010f 	andeq.w	r1, r1, #15
 8023efc:	1109      	asrne	r1, r1, #4
 8023efe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023f02:	b2c9      	uxtb	r1, r1
 8023f04:	9111      	str	r1, [sp, #68]	; 0x44
 8023f06:	f1bc 0f00 	cmp.w	ip, #0
 8023f0a:	d019      	beq.n	8023f40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023f0c:	4453      	add	r3, sl
 8023f0e:	0859      	lsrs	r1, r3, #1
 8023f10:	f013 0f01 	tst.w	r3, #1
 8023f14:	f103 0301 	add.w	r3, r3, #1
 8023f18:	5c79      	ldrb	r1, [r7, r1]
 8023f1a:	bf0c      	ite	eq
 8023f1c:	f001 010f 	andeq.w	r1, r1, #15
 8023f20:	1109      	asrne	r1, r1, #4
 8023f22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023f26:	b2c9      	uxtb	r1, r1
 8023f28:	910d      	str	r1, [sp, #52]	; 0x34
 8023f2a:	0859      	lsrs	r1, r3, #1
 8023f2c:	07db      	lsls	r3, r3, #31
 8023f2e:	5c79      	ldrb	r1, [r7, r1]
 8023f30:	bf54      	ite	pl
 8023f32:	f001 010f 	andpl.w	r1, r1, #15
 8023f36:	1109      	asrmi	r1, r1, #4
 8023f38:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023f3c:	b2c9      	uxtb	r1, r1
 8023f3e:	9112      	str	r1, [sp, #72]	; 0x48
 8023f40:	b280      	uxth	r0, r0
 8023f42:	fa1f fc8c 	uxth.w	ip, ip
 8023f46:	fb00 f30c 	mul.w	r3, r0, ip
 8023f4a:	0100      	lsls	r0, r0, #4
 8023f4c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023f50:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023f54:	1ac0      	subs	r0, r0, r3
 8023f56:	fa1f fc8c 	uxth.w	ip, ip
 8023f5a:	b280      	uxth	r0, r0
 8023f5c:	eba1 010c 	sub.w	r1, r1, ip
 8023f60:	fa1f fb81 	uxth.w	fp, r1
 8023f64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023f66:	4348      	muls	r0, r1
 8023f68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023f6a:	fb02 020b 	mla	r2, r2, fp, r0
 8023f6e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023f72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023f74:	fb03 c302 	mla	r3, r3, r2, ip
 8023f78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023f7c:	b3ab      	cbz	r3, 8023fea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023f7e:	4a2d      	ldr	r2, [pc, #180]	; (8024034 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023f80:	2bff      	cmp	r3, #255	; 0xff
 8023f82:	6811      	ldr	r1, [r2, #0]
 8023f84:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023f88:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023f8c:	b2c9      	uxtb	r1, r1
 8023f8e:	d045      	beq.n	802401c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023f90:	b298      	uxth	r0, r3
 8023f92:	43db      	mvns	r3, r3
 8023f94:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023f98:	fb11 f100 	smulbb	r1, r1, r0
 8023f9c:	b2db      	uxtb	r3, r3
 8023f9e:	fb1c fc00 	smulbb	ip, ip, r0
 8023fa2:	fb02 1103 	mla	r1, r2, r3, r1
 8023fa6:	fb1b f000 	smulbb	r0, fp, r0
 8023faa:	b289      	uxth	r1, r1
 8023fac:	1c4a      	adds	r2, r1, #1
 8023fae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023fb2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023fb6:	fb02 cc03 	mla	ip, r2, r3, ip
 8023fba:	1209      	asrs	r1, r1, #8
 8023fbc:	fa1f fc8c 	uxth.w	ip, ip
 8023fc0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023fc4:	f10c 0201 	add.w	r2, ip, #1
 8023fc8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023fcc:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023fd0:	fb02 0303 	mla	r3, r2, r3, r0
 8023fd4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023fd8:	b29b      	uxth	r3, r3
 8023fda:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023fde:	1c5a      	adds	r2, r3, #1
 8023fe0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023fe4:	121b      	asrs	r3, r3, #8
 8023fe6:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023fea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023fec:	f10e 0e03 	add.w	lr, lr, #3
 8023ff0:	f109 39ff 	add.w	r9, r9, #4294967295
 8023ff4:	441d      	add	r5, r3
 8023ff6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ff8:	441e      	add	r6, r3
 8023ffa:	e607      	b.n	8023c0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023ffc:	f1bc 0f00 	cmp.w	ip, #0
 8024000:	d09e      	beq.n	8023f40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8024002:	4453      	add	r3, sl
 8024004:	0859      	lsrs	r1, r3, #1
 8024006:	07db      	lsls	r3, r3, #31
 8024008:	5c79      	ldrb	r1, [r7, r1]
 802400a:	bf54      	ite	pl
 802400c:	f001 010f 	andpl.w	r1, r1, #15
 8024010:	1109      	asrmi	r1, r1, #4
 8024012:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024016:	b2c9      	uxtb	r1, r1
 8024018:	910d      	str	r1, [sp, #52]	; 0x34
 802401a:	e791      	b.n	8023f40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802401c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024020:	f80e cc02 	strb.w	ip, [lr, #-2]
 8024024:	f80e bc01 	strb.w	fp, [lr, #-1]
 8024028:	e7df      	b.n	8023fea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802402a:	b015      	add	sp, #84	; 0x54
 802402c:	ecbd 8b08 	vpop	{d8-d11}
 8024030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024034:	2000b3f0 	.word	0x2000b3f0

08024038 <CRC_Lock>:
 8024038:	4a1d      	ldr	r2, [pc, #116]	; (80240b0 <CRC_Lock+0x78>)
 802403a:	b530      	push	{r4, r5, lr}
 802403c:	6813      	ldr	r3, [r2, #0]
 802403e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024042:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024046:	f023 0301 	bic.w	r3, r3, #1
 802404a:	6013      	str	r3, [r2, #0]
 802404c:	4b19      	ldr	r3, [pc, #100]	; (80240b4 <CRC_Lock+0x7c>)
 802404e:	681a      	ldr	r2, [r3, #0]
 8024050:	4022      	ands	r2, r4
 8024052:	42aa      	cmp	r2, r5
 8024054:	d005      	beq.n	8024062 <CRC_Lock+0x2a>
 8024056:	681b      	ldr	r3, [r3, #0]
 8024058:	f24c 2270 	movw	r2, #49776	; 0xc270
 802405c:	4023      	ands	r3, r4
 802405e:	4293      	cmp	r3, r2
 8024060:	d11d      	bne.n	802409e <CRC_Lock+0x66>
 8024062:	4b15      	ldr	r3, [pc, #84]	; (80240b8 <CRC_Lock+0x80>)
 8024064:	681b      	ldr	r3, [r3, #0]
 8024066:	b9d3      	cbnz	r3, 802409e <CRC_Lock+0x66>
 8024068:	4a14      	ldr	r2, [pc, #80]	; (80240bc <CRC_Lock+0x84>)
 802406a:	6813      	ldr	r3, [r2, #0]
 802406c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024070:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8024074:	d006      	beq.n	8024084 <CRC_Lock+0x4c>
 8024076:	6813      	ldr	r3, [r2, #0]
 8024078:	f240 4283 	movw	r2, #1155	; 0x483
 802407c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024080:	4293      	cmp	r3, r2
 8024082:	d10c      	bne.n	802409e <CRC_Lock+0x66>
 8024084:	4b0e      	ldr	r3, [pc, #56]	; (80240c0 <CRC_Lock+0x88>)
 8024086:	2201      	movs	r2, #1
 8024088:	601a      	str	r2, [r3, #0]
 802408a:	681a      	ldr	r2, [r3, #0]
 802408c:	2a00      	cmp	r2, #0
 802408e:	d1fc      	bne.n	802408a <CRC_Lock+0x52>
 8024090:	4b0c      	ldr	r3, [pc, #48]	; (80240c4 <CRC_Lock+0x8c>)
 8024092:	6018      	str	r0, [r3, #0]
 8024094:	6818      	ldr	r0, [r3, #0]
 8024096:	1a43      	subs	r3, r0, r1
 8024098:	4258      	negs	r0, r3
 802409a:	4158      	adcs	r0, r3
 802409c:	bd30      	pop	{r4, r5, pc}
 802409e:	4b0a      	ldr	r3, [pc, #40]	; (80240c8 <CRC_Lock+0x90>)
 80240a0:	2201      	movs	r2, #1
 80240a2:	601a      	str	r2, [r3, #0]
 80240a4:	681a      	ldr	r2, [r3, #0]
 80240a6:	2a00      	cmp	r2, #0
 80240a8:	d1fc      	bne.n	80240a4 <CRC_Lock+0x6c>
 80240aa:	4b08      	ldr	r3, [pc, #32]	; (80240cc <CRC_Lock+0x94>)
 80240ac:	e7f1      	b.n	8024092 <CRC_Lock+0x5a>
 80240ae:	bf00      	nop
 80240b0:	e0002000 	.word	0xe0002000
 80240b4:	e000ed00 	.word	0xe000ed00
 80240b8:	e0042000 	.word	0xe0042000
 80240bc:	5c001000 	.word	0x5c001000
 80240c0:	58024c08 	.word	0x58024c08
 80240c4:	58024c00 	.word	0x58024c00
 80240c8:	40023008 	.word	0x40023008
 80240cc:	40023000 	.word	0x40023000

080240d0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80240d0:	6101      	str	r1, [r0, #16]
 80240d2:	4770      	bx	lr

080240d4 <_ZN8touchgfx8Gestures4tickEv>:
 80240d4:	7b83      	ldrb	r3, [r0, #14]
 80240d6:	b14b      	cbz	r3, 80240ec <_ZN8touchgfx8Gestures4tickEv+0x18>
 80240d8:	8903      	ldrh	r3, [r0, #8]
 80240da:	3301      	adds	r3, #1
 80240dc:	b29b      	uxth	r3, r3
 80240de:	2b07      	cmp	r3, #7
 80240e0:	8103      	strh	r3, [r0, #8]
 80240e2:	bf81      	itttt	hi
 80240e4:	2300      	movhi	r3, #0
 80240e6:	8143      	strhhi	r3, [r0, #10]
 80240e8:	8183      	strhhi	r3, [r0, #12]
 80240ea:	7383      	strbhi	r3, [r0, #14]
 80240ec:	4770      	bx	lr
	...

080240f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80240f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80240f4:	4604      	mov	r4, r0
 80240f6:	4698      	mov	r8, r3
 80240f8:	8880      	ldrh	r0, [r0, #4]
 80240fa:	4617      	mov	r7, r2
 80240fc:	4b1d      	ldr	r3, [pc, #116]	; (8024174 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80240fe:	460e      	mov	r6, r1
 8024100:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024104:	eba8 0000 	sub.w	r0, r8, r0
 8024108:	9300      	str	r3, [sp, #0]
 802410a:	2300      	movs	r3, #0
 802410c:	b280      	uxth	r0, r0
 802410e:	8aa2      	ldrh	r2, [r4, #20]
 8024110:	f88d 3004 	strb.w	r3, [sp, #4]
 8024114:	b203      	sxth	r3, r0
 8024116:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802411a:	88e1      	ldrh	r1, [r4, #6]
 802411c:	2b00      	cmp	r3, #0
 802411e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024122:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024126:	bfb8      	it	lt
 8024128:	4240      	neglt	r0, r0
 802412a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802412e:	bfb8      	it	lt
 8024130:	b203      	sxthlt	r3, r0
 8024132:	4293      	cmp	r3, r2
 8024134:	dc08      	bgt.n	8024148 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024136:	1a69      	subs	r1, r5, r1
 8024138:	b289      	uxth	r1, r1
 802413a:	b20b      	sxth	r3, r1
 802413c:	2b00      	cmp	r3, #0
 802413e:	bfbc      	itt	lt
 8024140:	4249      	neglt	r1, r1
 8024142:	b20b      	sxthlt	r3, r1
 8024144:	429a      	cmp	r2, r3
 8024146:	da13      	bge.n	8024170 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024148:	6920      	ldr	r0, [r4, #16]
 802414a:	4669      	mov	r1, sp
 802414c:	eba8 0606 	sub.w	r6, r8, r6
 8024150:	1bef      	subs	r7, r5, r7
 8024152:	6803      	ldr	r3, [r0, #0]
 8024154:	685b      	ldr	r3, [r3, #4]
 8024156:	4798      	blx	r3
 8024158:	2300      	movs	r3, #0
 802415a:	2001      	movs	r0, #1
 802415c:	8166      	strh	r6, [r4, #10]
 802415e:	8123      	strh	r3, [r4, #8]
 8024160:	81a7      	strh	r7, [r4, #12]
 8024162:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024166:	80e5      	strh	r5, [r4, #6]
 8024168:	73a0      	strb	r0, [r4, #14]
 802416a:	b004      	add	sp, #16
 802416c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024170:	2000      	movs	r0, #0
 8024172:	e7fa      	b.n	802416a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024174:	0802a7f8 	.word	0x0802a7f8

08024178 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024178:	b5f0      	push	{r4, r5, r6, r7, lr}
 802417a:	461e      	mov	r6, r3
 802417c:	1e4b      	subs	r3, r1, #1
 802417e:	b085      	sub	sp, #20
 8024180:	4604      	mov	r4, r0
 8024182:	2b01      	cmp	r3, #1
 8024184:	460d      	mov	r5, r1
 8024186:	4617      	mov	r7, r2
 8024188:	d84b      	bhi.n	8024222 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802418a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802418e:	1cd3      	adds	r3, r2, #3
 8024190:	b29b      	uxth	r3, r3
 8024192:	2b06      	cmp	r3, #6
 8024194:	d916      	bls.n	80241c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024196:	f8df c098 	ldr.w	ip, [pc, #152]	; 8024230 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 802419a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802419e:	f8cd c004 	str.w	ip, [sp, #4]
 80241a2:	f04f 0c00 	mov.w	ip, #0
 80241a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80241aa:	6900      	ldr	r0, [r0, #16]
 80241ac:	f8ad 100c 	strh.w	r1, [sp, #12]
 80241b0:	a901      	add	r1, sp, #4
 80241b2:	f88d c008 	strb.w	ip, [sp, #8]
 80241b6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80241ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 80241be:	6803      	ldr	r3, [r0, #0]
 80241c0:	689b      	ldr	r3, [r3, #8]
 80241c2:	4798      	blx	r3
 80241c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80241c8:	1cd3      	adds	r3, r2, #3
 80241ca:	b29b      	uxth	r3, r3
 80241cc:	2b06      	cmp	r3, #6
 80241ce:	d916      	bls.n	80241fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80241d0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8024230 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80241d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80241d8:	f8cd c004 	str.w	ip, [sp, #4]
 80241dc:	f04f 0c01 	mov.w	ip, #1
 80241e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80241e4:	6920      	ldr	r0, [r4, #16]
 80241e6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80241ea:	a901      	add	r1, sp, #4
 80241ec:	f88d c008 	strb.w	ip, [sp, #8]
 80241f0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80241f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80241f8:	6803      	ldr	r3, [r0, #0]
 80241fa:	689b      	ldr	r3, [r3, #8]
 80241fc:	4798      	blx	r3
 80241fe:	4b0b      	ldr	r3, [pc, #44]	; (802422c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8024200:	a901      	add	r1, sp, #4
 8024202:	6920      	ldr	r0, [r4, #16]
 8024204:	9301      	str	r3, [sp, #4]
 8024206:	2300      	movs	r3, #0
 8024208:	f88d 5008 	strb.w	r5, [sp, #8]
 802420c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024210:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024214:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024218:	6803      	ldr	r3, [r0, #0]
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	4798      	blx	r3
 802421e:	b005      	add	sp, #20
 8024220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024222:	2900      	cmp	r1, #0
 8024224:	d1eb      	bne.n	80241fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024226:	80a2      	strh	r2, [r4, #4]
 8024228:	80c6      	strh	r6, [r0, #6]
 802422a:	e7e8      	b.n	80241fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802422c:	0802a7e4 	.word	0x0802a7e4
 8024230:	0802a80c 	.word	0x0802a80c

08024234 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8024234:	10c9      	asrs	r1, r1, #3
 8024236:	2900      	cmp	r1, #0
 8024238:	bfb8      	it	lt
 802423a:	4249      	neglt	r1, r1
 802423c:	2801      	cmp	r0, #1
 802423e:	d108      	bne.n	8024252 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8024240:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024244:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024248:	4601      	mov	r1, r0
 802424a:	dd02      	ble.n	8024252 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 802424c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024250:	4770      	bx	lr
 8024252:	29ff      	cmp	r1, #255	; 0xff
 8024254:	bfa8      	it	ge
 8024256:	21ff      	movge	r1, #255	; 0xff
 8024258:	4608      	mov	r0, r1
 802425a:	4770      	bx	lr

0802425c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 802425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024260:	688c      	ldr	r4, [r1, #8]
 8024262:	b087      	sub	sp, #28
 8024264:	4607      	mov	r7, r0
 8024266:	2c00      	cmp	r4, #0
 8024268:	db2b      	blt.n	80242c2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802426a:	6803      	ldr	r3, [r0, #0]
 802426c:	691a      	ldr	r2, [r3, #16]
 802426e:	42a2      	cmp	r2, r4
 8024270:	dd27      	ble.n	80242c2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024272:	685a      	ldr	r2, [r3, #4]
 8024274:	695e      	ldr	r6, [r3, #20]
 8024276:	68cd      	ldr	r5, [r1, #12]
 8024278:	fb06 2604 	mla	r6, r6, r4, r2
 802427c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024280:	698a      	ldr	r2, [r1, #24]
 8024282:	f893 a008 	ldrb.w	sl, [r3, #8]
 8024286:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802428a:	9205      	str	r2, [sp, #20]
 802428c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024290:	9b05      	ldr	r3, [sp, #20]
 8024292:	6839      	ldr	r1, [r7, #0]
 8024294:	eb03 0c02 	add.w	ip, r3, r2
 8024298:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802429c:	68c9      	ldr	r1, [r1, #12]
 802429e:	1898      	adds	r0, r3, r2
 80242a0:	4288      	cmp	r0, r1
 80242a2:	db02      	blt.n	80242aa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80242a4:	1a8b      	subs	r3, r1, r2
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	dd09      	ble.n	80242be <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80242aa:	6878      	ldr	r0, [r7, #4]
 80242ac:	6801      	ldr	r1, [r0, #0]
 80242ae:	9400      	str	r4, [sp, #0]
 80242b0:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80242b4:	4653      	mov	r3, sl
 80242b6:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80242ba:	4631      	mov	r1, r6
 80242bc:	47d8      	blx	fp
 80242be:	3d01      	subs	r5, #1
 80242c0:	d1e4      	bne.n	802428c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80242c2:	b007      	add	sp, #28
 80242c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080242c8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80242c8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80242cc:	b90b      	cbnz	r3, 80242d2 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 80242ce:	f001 b970 	b.w	80255b2 <_ZN8touchgfx7Outline6lineToEii>
 80242d2:	4770      	bx	lr

080242d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80242d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80242d8:	4604      	mov	r4, r0
 80242da:	2600      	movs	r6, #0
 80242dc:	4b8e      	ldr	r3, [pc, #568]	; (8024518 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 80242de:	f100 0518 	add.w	r5, r0, #24
 80242e2:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80242e6:	b086      	sub	sp, #24
 80242e8:	4690      	mov	r8, r2
 80242ea:	e9c0 3100 	strd	r3, r1, [r0]
 80242ee:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80242f2:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80242f6:	4628      	mov	r0, r5
 80242f8:	f001 fb7a 	bl	80259f0 <_ZN8touchgfx15RenderingBufferC1Ev>
 80242fc:	4638      	mov	r0, r7
 80242fe:	f000 fb41 	bl	8024984 <_ZN8touchgfx7OutlineC1Ev>
 8024302:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8024306:	f001 fb1f 	bl	8025948 <_ZN8touchgfx8ScanlineC1Ev>
 802430a:	2301      	movs	r3, #1
 802430c:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8024310:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8024314:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024318:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802431c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8024320:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8024324:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8024328:	f7f4 fa1c 	bl	8018764 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802432c:	b928      	cbnz	r0, 802433a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802432e:	4b7b      	ldr	r3, [pc, #492]	; (802451c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8024330:	2118      	movs	r1, #24
 8024332:	4a7b      	ldr	r2, [pc, #492]	; (8024520 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024334:	487b      	ldr	r0, [pc, #492]	; (8024524 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024336:	f001 fba3 	bl	8025a80 <__assert_func>
 802433a:	f9b8 2000 	ldrsh.w	r2, [r8]
 802433e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8024342:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8024346:	4410      	add	r0, r2
 8024348:	9602      	str	r6, [sp, #8]
 802434a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802434e:	b280      	uxth	r0, r0
 8024350:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8024354:	fa0f fa80 	sxth.w	sl, r0
 8024358:	f1ba 0f00 	cmp.w	sl, #0
 802435c:	dd70      	ble.n	8024440 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802435e:	4591      	cmp	r9, r2
 8024360:	dd6e      	ble.n	8024440 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024362:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024366:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802436a:	440b      	add	r3, r1
 802436c:	b29b      	uxth	r3, r3
 802436e:	b21e      	sxth	r6, r3
 8024370:	2e00      	cmp	r6, #0
 8024372:	dd65      	ble.n	8024440 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024374:	458e      	cmp	lr, r1
 8024376:	dd63      	ble.n	8024440 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024378:	45d1      	cmp	r9, sl
 802437a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802437e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8024382:	bfb8      	it	lt
 8024384:	fa1f f089 	uxthlt.w	r0, r9
 8024388:	45b6      	cmp	lr, r6
 802438a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802438e:	bfb8      	it	lt
 8024390:	fa1f f38e 	uxthlt.w	r3, lr
 8024394:	1a80      	subs	r0, r0, r2
 8024396:	f8ad 100a 	strh.w	r1, [sp, #10]
 802439a:	1a5b      	subs	r3, r3, r1
 802439c:	f8ad 000c 	strh.w	r0, [sp, #12]
 80243a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80243a4:	f10d 0808 	add.w	r8, sp, #8
 80243a8:	ae04      	add	r6, sp, #16
 80243aa:	e898 0003 	ldmia.w	r8, {r0, r1}
 80243ae:	e886 0003 	stmia.w	r6, {r0, r1}
 80243b2:	f8dc 3000 	ldr.w	r3, [ip]
 80243b6:	4660      	mov	r0, ip
 80243b8:	4631      	mov	r1, r6
 80243ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80243bc:	4798      	blx	r3
 80243be:	6861      	ldr	r1, [r4, #4]
 80243c0:	4640      	mov	r0, r8
 80243c2:	3104      	adds	r1, #4
 80243c4:	f7f5 f83a 	bl	801943c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80243c8:	4630      	mov	r0, r6
 80243ca:	f7f5 f84f 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80243ce:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80243d2:	f7f4 f957 	bl	8018684 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80243d6:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80243da:	4638      	mov	r0, r7
 80243dc:	f000 faae 	bl	802493c <_ZN8touchgfx7Outline5resetEv>
 80243e0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80243e4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80243e8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80243ec:	015b      	lsls	r3, r3, #5
 80243ee:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 80243f2:	0152      	lsls	r2, r2, #5
 80243f4:	60e3      	str	r3, [r4, #12]
 80243f6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80243fa:	60a2      	str	r2, [r4, #8]
 80243fc:	015b      	lsls	r3, r3, #5
 80243fe:	6123      	str	r3, [r4, #16]
 8024400:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024404:	015b      	lsls	r3, r3, #5
 8024406:	6163      	str	r3, [r4, #20]
 8024408:	4b47      	ldr	r3, [pc, #284]	; (8024528 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802440a:	6818      	ldr	r0, [r3, #0]
 802440c:	6803      	ldr	r3, [r0, #0]
 802440e:	6a1b      	ldr	r3, [r3, #32]
 8024410:	4798      	blx	r3
 8024412:	4606      	mov	r6, r0
 8024414:	f7e8 fa36 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8024418:	6803      	ldr	r3, [r0, #0]
 802441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802441c:	4798      	blx	r3
 802441e:	4607      	mov	r7, r0
 8024420:	f7e8 fa30 	bl	800c884 <_ZN8touchgfx3HAL3lcdEv>
 8024424:	6803      	ldr	r3, [r0, #0]
 8024426:	6a1b      	ldr	r3, [r3, #32]
 8024428:	4798      	blx	r3
 802442a:	280c      	cmp	r0, #12
 802442c:	d854      	bhi.n	80244d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802442e:	e8df f000 	tbb	[pc, r0]
 8024432:	554b      	.short	0x554b
 8024434:	2b6e0a66 	.word	0x2b6e0a66
 8024438:	5f5f5f3b 	.word	0x5f5f5f3b
 802443c:	5f5f      	.short	0x5f5f
 802443e:	6e          	.byte	0x6e
 802443f:	00          	.byte	0x00
 8024440:	2300      	movs	r3, #0
 8024442:	9303      	str	r3, [sp, #12]
 8024444:	e7ae      	b.n	80243a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8024446:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802444a:	2108      	movs	r1, #8
 802444c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024450:	fb92 f1f1 	sdiv	r1, r2, r1
 8024454:	fb07 1303 	mla	r3, r7, r3, r1
 8024458:	441e      	add	r6, r3
 802445a:	4253      	negs	r3, r2
 802445c:	f002 0207 	and.w	r2, r2, #7
 8024460:	f003 0307 	and.w	r3, r3, #7
 8024464:	bf58      	it	pl
 8024466:	425a      	negpl	r2, r3
 8024468:	b2d2      	uxtb	r2, r2
 802446a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802446e:	4628      	mov	r0, r5
 8024470:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024474:	6721      	str	r1, [r4, #112]	; 0x70
 8024476:	e9cd 1700 	strd	r1, r7, [sp]
 802447a:	4631      	mov	r1, r6
 802447c:	f001 fac4 	bl	8025a08 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8024480:	4620      	mov	r0, r4
 8024482:	b006      	add	sp, #24
 8024484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024488:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802448c:	2104      	movs	r1, #4
 802448e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024492:	fb92 f1f1 	sdiv	r1, r2, r1
 8024496:	fb07 1303 	mla	r3, r7, r3, r1
 802449a:	441e      	add	r6, r3
 802449c:	4253      	negs	r3, r2
 802449e:	f002 0203 	and.w	r2, r2, #3
 80244a2:	f003 0303 	and.w	r3, r3, #3
 80244a6:	e7dd      	b.n	8024464 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80244a8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80244ac:	2102      	movs	r1, #2
 80244ae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80244b2:	2a00      	cmp	r2, #0
 80244b4:	fb92 f1f1 	sdiv	r1, r2, r1
 80244b8:	f002 0201 	and.w	r2, r2, #1
 80244bc:	fb07 1303 	mla	r3, r7, r3, r1
 80244c0:	bfb8      	it	lt
 80244c2:	4252      	neglt	r2, r2
 80244c4:	441e      	add	r6, r3
 80244c6:	e7cf      	b.n	8024468 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80244c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80244cc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80244d0:	437b      	muls	r3, r7
 80244d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80244d6:	441e      	add	r6, r3
 80244d8:	2200      	movs	r2, #0
 80244da:	e7c6      	b.n	802446a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 80244dc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80244e0:	2103      	movs	r1, #3
 80244e2:	fb07 f203 	mul.w	r2, r7, r3
 80244e6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80244ea:	fb13 2301 	smlabb	r3, r3, r1, r2
 80244ee:	e7f2      	b.n	80244d6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80244f0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80244f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80244f8:	fb07 2303 	mla	r3, r7, r3, r2
 80244fc:	e7eb      	b.n	80244d6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80244fe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024502:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024506:	437b      	muls	r3, r7
 8024508:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802450c:	e7e3      	b.n	80244d6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802450e:	4b07      	ldr	r3, [pc, #28]	; (802452c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024510:	2156      	movs	r1, #86	; 0x56
 8024512:	4a03      	ldr	r2, [pc, #12]	; (8024520 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024514:	e70e      	b.n	8024334 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8024516:	bf00      	nop
 8024518:	0802bbb8 	.word	0x0802bbb8
 802451c:	0802bb02 	.word	0x0802bb02
 8024520:	0802bbc0 	.word	0x0802bbc0
 8024524:	0802bb5e 	.word	0x0802bb5e
 8024528:	2000b3c8 	.word	0x2000b3c8
 802452c:	0802bb92 	.word	0x0802bb92

08024530 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8024530:	6812      	ldr	r2, [r2, #0]
 8024532:	2a00      	cmp	r2, #0
 8024534:	db0b      	blt.n	802454e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8024536:	9800      	ldr	r0, [sp, #0]
 8024538:	6800      	ldr	r0, [r0, #0]
 802453a:	4290      	cmp	r0, r2
 802453c:	bfd4      	ite	le
 802453e:	2002      	movle	r0, #2
 8024540:	2000      	movgt	r0, #0
 8024542:	680a      	ldr	r2, [r1, #0]
 8024544:	2a00      	cmp	r2, #0
 8024546:	da04      	bge.n	8024552 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8024548:	f040 0004 	orr.w	r0, r0, #4
 802454c:	4770      	bx	lr
 802454e:	2001      	movs	r0, #1
 8024550:	e7f7      	b.n	8024542 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8024552:	681b      	ldr	r3, [r3, #0]
 8024554:	4293      	cmp	r3, r2
 8024556:	bfd8      	it	le
 8024558:	f040 0008 	orrle.w	r0, r0, #8
 802455c:	4770      	bx	lr
	...

08024560 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8024560:	4b07      	ldr	r3, [pc, #28]	; (8024580 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8024562:	b510      	push	{r4, lr}
 8024564:	781b      	ldrb	r3, [r3, #0]
 8024566:	2b01      	cmp	r3, #1
 8024568:	d108      	bne.n	802457c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802456a:	6843      	ldr	r3, [r0, #4]
 802456c:	6814      	ldr	r4, [r2, #0]
 802456e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8024572:	680b      	ldr	r3, [r1, #0]
 8024574:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024578:	6013      	str	r3, [r2, #0]
 802457a:	600c      	str	r4, [r1, #0]
 802457c:	bd10      	pop	{r4, pc}
 802457e:	bf00      	nop
 8024580:	2000b3c0 	.word	0x2000b3c0

08024584 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024586:	b085      	sub	sp, #20
 8024588:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802458c:	4604      	mov	r4, r0
 802458e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024592:	b33b      	cbz	r3, 80245e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024594:	aa02      	add	r2, sp, #8
 8024596:	a903      	add	r1, sp, #12
 8024598:	f7ff ffe2 	bl	8024560 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802459c:	68a3      	ldr	r3, [r4, #8]
 802459e:	9e03      	ldr	r6, [sp, #12]
 80245a0:	aa02      	add	r2, sp, #8
 80245a2:	9f02      	ldr	r7, [sp, #8]
 80245a4:	a903      	add	r1, sp, #12
 80245a6:	1af6      	subs	r6, r6, r3
 80245a8:	68e3      	ldr	r3, [r4, #12]
 80245aa:	4620      	mov	r0, r4
 80245ac:	1aff      	subs	r7, r7, r3
 80245ae:	f104 0314 	add.w	r3, r4, #20
 80245b2:	9603      	str	r6, [sp, #12]
 80245b4:	9300      	str	r3, [sp, #0]
 80245b6:	f104 0310 	add.w	r3, r4, #16
 80245ba:	9702      	str	r7, [sp, #8]
 80245bc:	f7ff ffb8 	bl	8024530 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80245c0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80245c4:	4605      	mov	r5, r0
 80245c6:	b97b      	cbnz	r3, 80245e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80245c8:	463a      	mov	r2, r7
 80245ca:	4631      	mov	r1, r6
 80245cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80245d0:	f7ff fe7a 	bl	80242c8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80245d4:	9b03      	ldr	r3, [sp, #12]
 80245d6:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80245da:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80245de:	9b02      	ldr	r3, [sp, #8]
 80245e0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80245e4:	b005      	add	sp, #20
 80245e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245e8:	b110      	cbz	r0, 80245f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80245ea:	ea13 0200 	ands.w	r2, r3, r0
 80245ee:	d11c      	bne.n	802462a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80245f0:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 80245f4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80245f8:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 80245fc:	b188      	cbz	r0, 8024622 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80245fe:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8024602:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024606:	b913      	cbnz	r3, 802460e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024608:	4630      	mov	r0, r6
 802460a:	f001 f802 	bl	8025612 <_ZN8touchgfx7Outline6moveToEii>
 802460e:	2300      	movs	r3, #0
 8024610:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024614:	2301      	movs	r3, #1
 8024616:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802461a:	4630      	mov	r0, r6
 802461c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8024620:	e7d6      	b.n	80245d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8024622:	4630      	mov	r0, r6
 8024624:	f7ff fe50 	bl	80242c8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024628:	e7f7      	b.n	802461a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802462a:	4615      	mov	r5, r2
 802462c:	e7d2      	b.n	80245d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802462e <_ZN8touchgfx6Canvas5closeEv>:
 802462e:	b538      	push	{r3, r4, r5, lr}
 8024630:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024634:	4604      	mov	r4, r0
 8024636:	b993      	cbnz	r3, 802465e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024638:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802463c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8024640:	4213      	tst	r3, r2
 8024642:	d10c      	bne.n	802465e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024644:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8024648:	b123      	cbz	r3, 8024654 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802464a:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802464e:	4628      	mov	r0, r5
 8024650:	f7ff fe3a 	bl	80242c8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024654:	4628      	mov	r0, r5
 8024656:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802465a:	f7ff fe35 	bl	80242c8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802465e:	2300      	movs	r3, #0
 8024660:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024664:	bd38      	pop	{r3, r4, r5, pc}

08024666 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024668:	b085      	sub	sp, #20
 802466a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802466e:	4604      	mov	r4, r0
 8024670:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024674:	b353      	cbz	r3, 80246cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024676:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802467a:	b90b      	cbnz	r3, 8024680 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802467c:	f7ff ffd7 	bl	802462e <_ZN8touchgfx6Canvas5closeEv>
 8024680:	aa02      	add	r2, sp, #8
 8024682:	a903      	add	r1, sp, #12
 8024684:	4620      	mov	r0, r4
 8024686:	f7ff ff6b 	bl	8024560 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802468a:	68a3      	ldr	r3, [r4, #8]
 802468c:	9d03      	ldr	r5, [sp, #12]
 802468e:	aa02      	add	r2, sp, #8
 8024690:	9e02      	ldr	r6, [sp, #8]
 8024692:	a903      	add	r1, sp, #12
 8024694:	1aed      	subs	r5, r5, r3
 8024696:	68e3      	ldr	r3, [r4, #12]
 8024698:	4620      	mov	r0, r4
 802469a:	1af6      	subs	r6, r6, r3
 802469c:	f104 0314 	add.w	r3, r4, #20
 80246a0:	9503      	str	r5, [sp, #12]
 80246a2:	9300      	str	r3, [sp, #0]
 80246a4:	f104 0310 	add.w	r3, r4, #16
 80246a8:	9602      	str	r6, [sp, #8]
 80246aa:	f7ff ff41 	bl	8024530 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80246ae:	4607      	mov	r7, r0
 80246b0:	b170      	cbz	r0, 80246d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80246b2:	2301      	movs	r3, #1
 80246b4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80246b8:	9a03      	ldr	r2, [sp, #12]
 80246ba:	9b02      	ldr	r3, [sp, #8]
 80246bc:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80246c0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80246c4:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80246c8:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80246cc:	b005      	add	sp, #20
 80246ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80246d0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80246d4:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 80246d8:	b92b      	cbnz	r3, 80246e6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80246da:	4632      	mov	r2, r6
 80246dc:	4629      	mov	r1, r5
 80246de:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80246e2:	f000 ff96 	bl	8025612 <_ZN8touchgfx7Outline6moveToEii>
 80246e6:	2300      	movs	r3, #0
 80246e8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80246ec:	2301      	movs	r3, #1
 80246ee:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80246f2:	e7e1      	b.n	80246b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080246f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80246f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246f8:	4604      	mov	r4, r0
 80246fa:	b087      	sub	sp, #28
 80246fc:	9105      	str	r1, [sp, #20]
 80246fe:	f001 f8cc 	bl	802589a <_ZN8touchgfx7Outline8getCellsEv>
 8024702:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024706:	4605      	mov	r5, r0
 8024708:	f1b9 0f00 	cmp.w	r9, #0
 802470c:	d103      	bne.n	8024716 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802470e:	2001      	movs	r0, #1
 8024710:	b007      	add	sp, #28
 8024712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024716:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802471a:	2e00      	cmp	r6, #0
 802471c:	d139      	bne.n	8024792 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802471e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8024722:	f105 0708 	add.w	r7, r5, #8
 8024726:	4640      	mov	r0, r8
 8024728:	f001 f8f9 	bl	802591e <_ZN8touchgfx8Scanline5resetEv>
 802472c:	f109 33ff 	add.w	r3, r9, #4294967295
 8024730:	9303      	str	r3, [sp, #12]
 8024732:	f9b5 b000 	ldrsh.w	fp, [r5]
 8024736:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802473a:	46da      	mov	sl, fp
 802473c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8024740:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8024744:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8024748:	9b03      	ldr	r3, [sp, #12]
 802474a:	4416      	add	r6, r2
 802474c:	9504      	str	r5, [sp, #16]
 802474e:	463d      	mov	r5, r7
 8024750:	3b01      	subs	r3, #1
 8024752:	9303      	str	r3, [sp, #12]
 8024754:	3301      	adds	r3, #1
 8024756:	d01e      	beq.n	8024796 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8024758:	3708      	adds	r7, #8
 802475a:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802475e:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8024762:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8024766:	4290      	cmp	r0, r2
 8024768:	d11e      	bne.n	80247a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802476a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802476e:	4411      	add	r1, r2
 8024770:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024774:	e7e8      	b.n	8024748 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024776:	1c91      	adds	r1, r2, #2
 8024778:	f04f 0301 	mov.w	r3, #1
 802477c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802477e:	8053      	strh	r3, [r2, #2]
 8024780:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024782:	1c91      	adds	r1, r2, #2
 8024784:	65a1      	str	r1, [r4, #88]	; 0x58
 8024786:	f8a2 b002 	strh.w	fp, [r2, #2]
 802478a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802478c:	3201      	adds	r2, #1
 802478e:	6562      	str	r2, [r4, #84]	; 0x54
 8024790:	e03a      	b.n	8024808 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024792:	2000      	movs	r0, #0
 8024794:	e7bc      	b.n	8024710 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024796:	b951      	cbnz	r1, 80247ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024798:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802479a:	2b00      	cmp	r3, #0
 802479c:	d0b7      	beq.n	802470e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802479e:	4641      	mov	r1, r8
 80247a0:	9805      	ldr	r0, [sp, #20]
 80247a2:	f7ff fd5b 	bl	802425c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80247a6:	e7b2      	b.n	802470e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80247a8:	2900      	cmp	r1, #0
 80247aa:	d035      	beq.n	8024818 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80247ac:	9504      	str	r5, [sp, #16]
 80247ae:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80247b2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80247b6:	f7ff fd3d 	bl	8024234 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 80247ba:	4605      	mov	r5, r0
 80247bc:	b330      	cbz	r0, 802480c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80247be:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80247c0:	b182      	cbz	r2, 80247e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80247c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80247c4:	454a      	cmp	r2, r9
 80247c6:	d00d      	beq.n	80247e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80247c8:	4641      	mov	r1, r8
 80247ca:	9805      	ldr	r0, [sp, #20]
 80247cc:	f7ff fd46 	bl	802425c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80247d0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80247d4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80247d6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80247da:	65e2      	str	r2, [r4, #92]	; 0x5c
 80247dc:	2300      	movs	r3, #0
 80247de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80247e0:	6563      	str	r3, [r4, #84]	; 0x54
 80247e2:	65a2      	str	r2, [r4, #88]	; 0x58
 80247e4:	f1bb 0f00 	cmp.w	fp, #0
 80247e8:	db10      	blt.n	802480c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80247ea:	f7f3 ffc9 	bl	8018780 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80247ee:	4583      	cmp	fp, r0
 80247f0:	d20c      	bcs.n	802480c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80247f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80247f4:	f802 500b 	strb.w	r5, [r2, fp]
 80247f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80247fa:	3201      	adds	r2, #1
 80247fc:	455a      	cmp	r2, fp
 80247fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024800:	d1b9      	bne.n	8024776 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024802:	8811      	ldrh	r1, [r2, #0]
 8024804:	3101      	adds	r1, #1
 8024806:	8011      	strh	r1, [r2, #0]
 8024808:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802480c:	9b03      	ldr	r3, [sp, #12]
 802480e:	3301      	adds	r3, #1
 8024810:	d0c2      	beq.n	8024798 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024812:	f10b 0a01 	add.w	sl, fp, #1
 8024816:	9d04      	ldr	r5, [sp, #16]
 8024818:	f9b5 3000 	ldrsh.w	r3, [r5]
 802481c:	4553      	cmp	r3, sl
 802481e:	dd88      	ble.n	8024732 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024820:	01b1      	lsls	r1, r6, #6
 8024822:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024826:	f7ff fd05 	bl	8024234 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 802482a:	4683      	mov	fp, r0
 802482c:	2800      	cmp	r0, #0
 802482e:	d080      	beq.n	8024732 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024830:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024832:	b183      	cbz	r3, 8024856 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024834:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024836:	454b      	cmp	r3, r9
 8024838:	d00d      	beq.n	8024856 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802483a:	4641      	mov	r1, r8
 802483c:	9805      	ldr	r0, [sp, #20]
 802483e:	f7ff fd0d 	bl	802425c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024842:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024846:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802484a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802484c:	65e3      	str	r3, [r4, #92]	; 0x5c
 802484e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024850:	65a3      	str	r3, [r4, #88]	; 0x58
 8024852:	2300      	movs	r3, #0
 8024854:	6563      	str	r3, [r4, #84]	; 0x54
 8024856:	f9b5 3000 	ldrsh.w	r3, [r5]
 802485a:	464a      	mov	r2, r9
 802485c:	f8cd b000 	str.w	fp, [sp]
 8024860:	4651      	mov	r1, sl
 8024862:	eba3 030a 	sub.w	r3, r3, sl
 8024866:	4640      	mov	r0, r8
 8024868:	f001 f880 	bl	802596c <_ZN8touchgfx8Scanline7addSpanEiijj>
 802486c:	e761      	b.n	8024732 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802486e <_ZN8touchgfx6Canvas6renderEv>:
 802486e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024870:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024874:	4604      	mov	r4, r0
 8024876:	b913      	cbnz	r3, 802487e <_ZN8touchgfx6Canvas6renderEv+0x10>
 8024878:	2001      	movs	r0, #1
 802487a:	b003      	add	sp, #12
 802487c:	bd30      	pop	{r4, r5, pc}
 802487e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8024882:	2b00      	cmp	r3, #0
 8024884:	d12e      	bne.n	80248e4 <_ZN8touchgfx6Canvas6renderEv+0x76>
 8024886:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802488a:	2b00      	cmp	r3, #0
 802488c:	d0f4      	beq.n	8024878 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802488e:	6840      	ldr	r0, [r0, #4]
 8024890:	6803      	ldr	r3, [r0, #0]
 8024892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024894:	4798      	blx	r3
 8024896:	2800      	cmp	r0, #0
 8024898:	d0ee      	beq.n	8024878 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802489a:	4620      	mov	r0, r4
 802489c:	f7ff fec7 	bl	802462e <_ZN8touchgfx6Canvas5closeEv>
 80248a0:	6860      	ldr	r0, [r4, #4]
 80248a2:	6803      	ldr	r3, [r0, #0]
 80248a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80248a6:	4798      	blx	r3
 80248a8:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 80248ac:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 80248b0:	8082      	strh	r2, [r0, #4]
 80248b2:	80c3      	strh	r3, [r0, #6]
 80248b4:	6860      	ldr	r0, [r4, #4]
 80248b6:	6803      	ldr	r3, [r0, #0]
 80248b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80248ba:	4798      	blx	r3
 80248bc:	4605      	mov	r5, r0
 80248be:	6860      	ldr	r0, [r4, #4]
 80248c0:	6803      	ldr	r3, [r0, #0]
 80248c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80248c4:	4798      	blx	r3
 80248c6:	7228      	strb	r0, [r5, #8]
 80248c8:	6860      	ldr	r0, [r4, #4]
 80248ca:	6803      	ldr	r3, [r0, #0]
 80248cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80248ce:	4798      	blx	r3
 80248d0:	f104 0318 	add.w	r3, r4, #24
 80248d4:	4669      	mov	r1, sp
 80248d6:	e9cd 3000 	strd	r3, r0, [sp]
 80248da:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80248de:	f7ff ff09 	bl	80246f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80248e2:	e7ca      	b.n	802487a <_ZN8touchgfx6Canvas6renderEv+0xc>
 80248e4:	2000      	movs	r0, #0
 80248e6:	e7c8      	b.n	802487a <_ZN8touchgfx6Canvas6renderEv+0xc>

080248e8 <_ZN8touchgfx6CanvasD1Ev>:
 80248e8:	b538      	push	{r3, r4, r5, lr}
 80248ea:	4605      	mov	r5, r0
 80248ec:	4b08      	ldr	r3, [pc, #32]	; (8024910 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80248ee:	4604      	mov	r4, r0
 80248f0:	f845 3b30 	str.w	r3, [r5], #48
 80248f4:	4b07      	ldr	r3, [pc, #28]	; (8024914 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80248f6:	6818      	ldr	r0, [r3, #0]
 80248f8:	6803      	ldr	r3, [r0, #0]
 80248fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80248fc:	4798      	blx	r3
 80248fe:	4628      	mov	r0, r5
 8024900:	f000 f814 	bl	802492c <_ZN8touchgfx7OutlineD1Ev>
 8024904:	f104 0018 	add.w	r0, r4, #24
 8024908:	f001 f869 	bl	80259de <_ZN8touchgfx15RenderingBufferD1Ev>
 802490c:	4620      	mov	r0, r4
 802490e:	bd38      	pop	{r3, r4, r5, pc}
 8024910:	0802bbb8 	.word	0x0802bbb8
 8024914:	2000b3c8 	.word	0x2000b3c8

08024918 <_ZN8touchgfx6CanvasD0Ev>:
 8024918:	b510      	push	{r4, lr}
 802491a:	4604      	mov	r4, r0
 802491c:	f7ff ffe4 	bl	80248e8 <_ZN8touchgfx6CanvasD1Ev>
 8024920:	21bc      	movs	r1, #188	; 0xbc
 8024922:	4620      	mov	r0, r4
 8024924:	f001 f880 	bl	8025a28 <_ZdlPvj>
 8024928:	4620      	mov	r0, r4
 802492a:	bd10      	pop	{r4, pc}

0802492c <_ZN8touchgfx7OutlineD1Ev>:
 802492c:	4770      	bx	lr

0802492e <_ZN8touchgfx7OutlineD0Ev>:
 802492e:	b510      	push	{r4, lr}
 8024930:	4604      	mov	r4, r0
 8024932:	2148      	movs	r1, #72	; 0x48
 8024934:	f001 f878 	bl	8025a28 <_ZdlPvj>
 8024938:	4620      	mov	r0, r4
 802493a:	bd10      	pop	{r4, pc}

0802493c <_ZN8touchgfx7Outline5resetEv>:
 802493c:	b510      	push	{r4, lr}
 802493e:	4604      	mov	r4, r0
 8024940:	f7f3 ff36 	bl	80187b0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8024944:	60e0      	str	r0, [r4, #12]
 8024946:	f7f3 ff39 	bl	80187bc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802494a:	68e3      	ldr	r3, [r4, #12]
 802494c:	2200      	movs	r2, #0
 802494e:	08c0      	lsrs	r0, r0, #3
 8024950:	6123      	str	r3, [r4, #16]
 8024952:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024956:	6060      	str	r0, [r4, #4]
 8024958:	82a3      	strh	r3, [r4, #20]
 802495a:	82e3      	strh	r3, [r4, #22]
 802495c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802495e:	60a2      	str	r2, [r4, #8]
 8024960:	f023 0301 	bic.w	r3, r3, #1
 8024964:	8322      	strh	r2, [r4, #24]
 8024966:	8362      	strh	r2, [r4, #26]
 8024968:	f043 0302 	orr.w	r3, r3, #2
 802496c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024970:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024972:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024976:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802497a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802497e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8024982:	bd10      	pop	{r4, pc}

08024984 <_ZN8touchgfx7OutlineC1Ev>:
 8024984:	4b0f      	ldr	r3, [pc, #60]	; (80249c4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8024986:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802498a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802498e:	b510      	push	{r4, lr}
 8024990:	6003      	str	r3, [r0, #0]
 8024992:	2300      	movs	r3, #0
 8024994:	4604      	mov	r4, r0
 8024996:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802499a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802499e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80249a2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80249a6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80249aa:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80249ae:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80249b2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80249b6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80249ba:	f7ff ffbf 	bl	802493c <_ZN8touchgfx7Outline5resetEv>
 80249be:	4620      	mov	r0, r4
 80249c0:	bd10      	pop	{r4, pc}
 80249c2:	bf00      	nop
 80249c4:	0802bc18 	.word	0x0802bc18

080249c8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80249c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249cc:	b093      	sub	sp, #76	; 0x4c
 80249ce:	4604      	mov	r4, r0
 80249d0:	1156      	asrs	r6, r2, #5
 80249d2:	f002 0e1f 	and.w	lr, r2, #31
 80249d6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80249d8:	9305      	str	r3, [sp, #20]
 80249da:	1143      	asrs	r3, r0, #5
 80249dc:	1145      	asrs	r5, r0, #5
 80249de:	930c      	str	r3, [sp, #48]	; 0x30
 80249e0:	f000 031f 	and.w	r3, r0, #31
 80249e4:	9303      	str	r3, [sp, #12]
 80249e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80249e8:	42b3      	cmp	r3, r6
 80249ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80249ec:	bfc8      	it	gt
 80249ee:	6326      	strgt	r6, [r4, #48]	; 0x30
 80249f0:	42b3      	cmp	r3, r6
 80249f2:	bfdc      	itt	le
 80249f4:	1c73      	addle	r3, r6, #1
 80249f6:	63a3      	strle	r3, [r4, #56]	; 0x38
 80249f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80249fa:	42ab      	cmp	r3, r5
 80249fc:	bfc8      	it	gt
 80249fe:	462b      	movgt	r3, r5
 8024a00:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024a04:	bfc8      	it	gt
 8024a06:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024a08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024a0a:	42ab      	cmp	r3, r5
 8024a0c:	bfd8      	it	le
 8024a0e:	462b      	movle	r3, r5
 8024a10:	ea4f 1561 	mov.w	r5, r1, asr #5
 8024a14:	bfdc      	itt	le
 8024a16:	3301      	addle	r3, #1
 8024a18:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024a1a:	9b05      	ldr	r3, [sp, #20]
 8024a1c:	eba3 0a01 	sub.w	sl, r3, r1
 8024a20:	1143      	asrs	r3, r0, #5
 8024a22:	429e      	cmp	r6, r3
 8024a24:	f040 8119 	bne.w	8024c5a <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8024a28:	9b05      	ldr	r3, [sp, #20]
 8024a2a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8024a2e:	9b03      	ldr	r3, [sp, #12]
 8024a30:	459e      	cmp	lr, r3
 8024a32:	d12c      	bne.n	8024a8e <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8024a34:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024a38:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8024a3c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024a40:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8024a44:	4291      	cmp	r1, r2
 8024a46:	d037      	beq.n	8024ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024a48:	8b61      	ldrh	r1, [r4, #26]
 8024a4a:	8b22      	ldrh	r2, [r4, #24]
 8024a4c:	430a      	orrs	r2, r1
 8024a4e:	d00b      	beq.n	8024a68 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024a50:	2b00      	cmp	r3, #0
 8024a52:	db09      	blt.n	8024a68 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024a54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024a56:	429a      	cmp	r2, r3
 8024a58:	dd06      	ble.n	8024a68 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024a5a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024a5e:	429a      	cmp	r2, r3
 8024a60:	d308      	bcc.n	8024a74 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8024a62:	2301      	movs	r3, #1
 8024a64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024a68:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024a6c:	82e6      	strh	r6, [r4, #22]
 8024a6e:	2300      	movs	r3, #0
 8024a70:	8323      	strh	r3, [r4, #24]
 8024a72:	e0c6      	b.n	8024c02 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024a74:	f104 0314 	add.w	r3, r4, #20
 8024a78:	6922      	ldr	r2, [r4, #16]
 8024a7a:	cb03      	ldmia	r3!, {r0, r1}
 8024a7c:	6010      	str	r0, [r2, #0]
 8024a7e:	6051      	str	r1, [r2, #4]
 8024a80:	6923      	ldr	r3, [r4, #16]
 8024a82:	3308      	adds	r3, #8
 8024a84:	6123      	str	r3, [r4, #16]
 8024a86:	68a3      	ldr	r3, [r4, #8]
 8024a88:	3301      	adds	r3, #1
 8024a8a:	60a3      	str	r3, [r4, #8]
 8024a8c:	e7ec      	b.n	8024a68 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024a8e:	9b05      	ldr	r3, [sp, #20]
 8024a90:	45ac      	cmp	ip, r5
 8024a92:	f001 011f 	and.w	r1, r1, #31
 8024a96:	8b20      	ldrh	r0, [r4, #24]
 8024a98:	f003 031f 	and.w	r3, r3, #31
 8024a9c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8024aa0:	9304      	str	r3, [sp, #16]
 8024aa2:	9b03      	ldr	r3, [sp, #12]
 8024aa4:	eba3 020e 	sub.w	r2, r3, lr
 8024aa8:	d109      	bne.n	8024abe <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8024aaa:	9b04      	ldr	r3, [sp, #16]
 8024aac:	4410      	add	r0, r2
 8024aae:	4419      	add	r1, r3
 8024ab0:	8320      	strh	r0, [r4, #24]
 8024ab2:	fb02 8201 	mla	r2, r2, r1, r8
 8024ab6:	8362      	strh	r2, [r4, #26]
 8024ab8:	b013      	add	sp, #76	; 0x4c
 8024aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024abe:	f1ba 0f00 	cmp.w	sl, #0
 8024ac2:	f2c0 80a0 	blt.w	8024c06 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8024ac6:	f1c1 0320 	rsb	r3, r1, #32
 8024aca:	f04f 0b20 	mov.w	fp, #32
 8024ace:	435a      	muls	r2, r3
 8024ad0:	2301      	movs	r3, #1
 8024ad2:	9302      	str	r3, [sp, #8]
 8024ad4:	4459      	add	r1, fp
 8024ad6:	fb92 f7fa 	sdiv	r7, r2, sl
 8024ada:	fb0a 2217 	mls	r2, sl, r7, r2
 8024ade:	2a00      	cmp	r2, #0
 8024ae0:	bfbc      	itt	lt
 8024ae2:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024ae6:	4452      	addlt	r2, sl
 8024ae8:	fb07 8101 	mla	r1, r7, r1, r8
 8024aec:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024af0:	4438      	add	r0, r7
 8024af2:	b20b      	sxth	r3, r1
 8024af4:	9902      	ldr	r1, [sp, #8]
 8024af6:	b200      	sxth	r0, r0
 8024af8:	9301      	str	r3, [sp, #4]
 8024afa:	8363      	strh	r3, [r4, #26]
 8024afc:	186b      	adds	r3, r5, r1
 8024afe:	0435      	lsls	r5, r6, #16
 8024b00:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024b04:	8320      	strh	r0, [r4, #24]
 8024b06:	eb03 0905 	add.w	r9, r3, r5
 8024b0a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8024b0e:	9300      	str	r3, [sp, #0]
 8024b10:	45c1      	cmp	r9, r8
 8024b12:	9505      	str	r5, [sp, #20]
 8024b14:	d014      	beq.n	8024b40 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8024b16:	9b01      	ldr	r3, [sp, #4]
 8024b18:	4303      	orrs	r3, r0
 8024b1a:	d00b      	beq.n	8024b34 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024b1c:	2900      	cmp	r1, #0
 8024b1e:	db09      	blt.n	8024b34 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024b22:	428b      	cmp	r3, r1
 8024b24:	dd06      	ble.n	8024b34 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024b26:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024b2a:	4299      	cmp	r1, r3
 8024b2c:	d374      	bcc.n	8024c18 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8024b2e:	2301      	movs	r3, #1
 8024b30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024b34:	9b00      	ldr	r3, [sp, #0]
 8024b36:	82e6      	strh	r6, [r4, #22]
 8024b38:	82a3      	strh	r3, [r4, #20]
 8024b3a:	2300      	movs	r3, #0
 8024b3c:	8323      	strh	r3, [r4, #24]
 8024b3e:	8363      	strh	r3, [r4, #26]
 8024b40:	9900      	ldr	r1, [sp, #0]
 8024b42:	eb0e 0307 	add.w	r3, lr, r7
 8024b46:	458c      	cmp	ip, r1
 8024b48:	d04e      	beq.n	8024be8 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8024b4a:	9903      	ldr	r1, [sp, #12]
 8024b4c:	eba2 020a 	sub.w	r2, r2, sl
 8024b50:	1ac9      	subs	r1, r1, r3
 8024b52:	9201      	str	r2, [sp, #4]
 8024b54:	440f      	add	r7, r1
 8024b56:	017f      	lsls	r7, r7, #5
 8024b58:	fb97 fefa 	sdiv	lr, r7, sl
 8024b5c:	fb0a 771e 	mls	r7, sl, lr, r7
 8024b60:	2f00      	cmp	r7, #0
 8024b62:	bfbc      	itt	lt
 8024b64:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024b68:	4457      	addlt	r7, sl
 8024b6a:	f10e 0101 	add.w	r1, lr, #1
 8024b6e:	9106      	str	r1, [sp, #24]
 8024b70:	9a01      	ldr	r2, [sp, #4]
 8024b72:	8b20      	ldrh	r0, [r4, #24]
 8024b74:	19d2      	adds	r2, r2, r7
 8024b76:	8b61      	ldrh	r1, [r4, #26]
 8024b78:	9d02      	ldr	r5, [sp, #8]
 8024b7a:	9201      	str	r2, [sp, #4]
 8024b7c:	bf5b      	ittet	pl
 8024b7e:	eba2 020a 	subpl.w	r2, r2, sl
 8024b82:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8024b86:	46f0      	movmi	r8, lr
 8024b88:	9201      	strpl	r2, [sp, #4]
 8024b8a:	9a00      	ldr	r2, [sp, #0]
 8024b8c:	4440      	add	r0, r8
 8024b8e:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024b92:	4443      	add	r3, r8
 8024b94:	442a      	add	r2, r5
 8024b96:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024b9a:	9d05      	ldr	r5, [sp, #20]
 8024b9c:	b200      	sxth	r0, r0
 8024b9e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024ba2:	b209      	sxth	r1, r1
 8024ba4:	4415      	add	r5, r2
 8024ba6:	8320      	strh	r0, [r4, #24]
 8024ba8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024bac:	8361      	strh	r1, [r4, #26]
 8024bae:	9200      	str	r2, [sp, #0]
 8024bb0:	454d      	cmp	r5, r9
 8024bb2:	d016      	beq.n	8024be2 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8024bb4:	4301      	orrs	r1, r0
 8024bb6:	d00d      	beq.n	8024bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024bb8:	f1b8 0f00 	cmp.w	r8, #0
 8024bbc:	db0a      	blt.n	8024bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024bbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024bc0:	4541      	cmp	r1, r8
 8024bc2:	dd07      	ble.n	8024bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024bc4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024bc8:	4288      	cmp	r0, r1
 8024bca:	d335      	bcc.n	8024c38 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024bcc:	f04f 0101 	mov.w	r1, #1
 8024bd0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024bd4:	9900      	ldr	r1, [sp, #0]
 8024bd6:	82e6      	strh	r6, [r4, #22]
 8024bd8:	82a1      	strh	r1, [r4, #20]
 8024bda:	f04f 0100 	mov.w	r1, #0
 8024bde:	8321      	strh	r1, [r4, #24]
 8024be0:	8361      	strh	r1, [r4, #26]
 8024be2:	9a00      	ldr	r2, [sp, #0]
 8024be4:	4594      	cmp	ip, r2
 8024be6:	d1c3      	bne.n	8024b70 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8024be8:	9a03      	ldr	r2, [sp, #12]
 8024bea:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8024bee:	1ad3      	subs	r3, r2, r3
 8024bf0:	8b22      	ldrh	r2, [r4, #24]
 8024bf2:	441a      	add	r2, r3
 8024bf4:	8322      	strh	r2, [r4, #24]
 8024bf6:	9a04      	ldr	r2, [sp, #16]
 8024bf8:	3220      	adds	r2, #32
 8024bfa:	eba2 020b 	sub.w	r2, r2, fp
 8024bfe:	fb03 c302 	mla	r3, r3, r2, ip
 8024c02:	8363      	strh	r3, [r4, #26]
 8024c04:	e758      	b.n	8024ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024c06:	f04f 33ff 	mov.w	r3, #4294967295
 8024c0a:	434a      	muls	r2, r1
 8024c0c:	f1ca 0a00 	rsb	sl, sl, #0
 8024c10:	f04f 0b00 	mov.w	fp, #0
 8024c14:	9302      	str	r3, [sp, #8]
 8024c16:	e75d      	b.n	8024ad4 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8024c18:	f104 0314 	add.w	r3, r4, #20
 8024c1c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024c20:	cb03      	ldmia	r3!, {r0, r1}
 8024c22:	f8c8 0000 	str.w	r0, [r8]
 8024c26:	f8c8 1004 	str.w	r1, [r8, #4]
 8024c2a:	6923      	ldr	r3, [r4, #16]
 8024c2c:	3308      	adds	r3, #8
 8024c2e:	6123      	str	r3, [r4, #16]
 8024c30:	68a3      	ldr	r3, [r4, #8]
 8024c32:	3301      	adds	r3, #1
 8024c34:	60a3      	str	r3, [r4, #8]
 8024c36:	e77d      	b.n	8024b34 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024c38:	f104 0814 	add.w	r8, r4, #20
 8024c3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024c40:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024c44:	f8c9 0000 	str.w	r0, [r9]
 8024c48:	f8c9 1004 	str.w	r1, [r9, #4]
 8024c4c:	6921      	ldr	r1, [r4, #16]
 8024c4e:	3108      	adds	r1, #8
 8024c50:	6121      	str	r1, [r4, #16]
 8024c52:	68a1      	ldr	r1, [r4, #8]
 8024c54:	3101      	adds	r1, #1
 8024c56:	60a1      	str	r1, [r4, #8]
 8024c58:	e7bc      	b.n	8024bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024c5a:	1a83      	subs	r3, r0, r2
 8024c5c:	9301      	str	r3, [sp, #4]
 8024c5e:	f1ba 0f00 	cmp.w	sl, #0
 8024c62:	f040 8094 	bne.w	8024d8e <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8024c66:	9a01      	ldr	r2, [sp, #4]
 8024c68:	0049      	lsls	r1, r1, #1
 8024c6a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8024c6e:	2a00      	cmp	r2, #0
 8024c70:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8024c74:	8b62      	ldrh	r2, [r4, #26]
 8024c76:	bfaa      	itet	ge
 8024c78:	f04f 0a20 	movge.w	sl, #32
 8024c7c:	f04f 38ff 	movlt.w	r8, #4294967295
 8024c80:	f04f 0801 	movge.w	r8, #1
 8024c84:	8b21      	ldrh	r1, [r4, #24]
 8024c86:	ebaa 0e0e 	sub.w	lr, sl, lr
 8024c8a:	4471      	add	r1, lr
 8024c8c:	fb0e 2e03 	mla	lr, lr, r3, r2
 8024c90:	eb08 0206 	add.w	r2, r8, r6
 8024c94:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8024c98:	b209      	sxth	r1, r1
 8024c9a:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8024c9e:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8024ca2:	8321      	strh	r1, [r4, #24]
 8024ca4:	fa0f fe8e 	sxth.w	lr, lr
 8024ca8:	42b7      	cmp	r7, r6
 8024caa:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024cae:	d013      	beq.n	8024cd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024cb0:	ea51 010e 	orrs.w	r1, r1, lr
 8024cb4:	d00b      	beq.n	8024cce <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024cb6:	2800      	cmp	r0, #0
 8024cb8:	db09      	blt.n	8024cce <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024cba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024cbc:	4281      	cmp	r1, r0
 8024cbe:	dd06      	ble.n	8024cce <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024cc0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024cc4:	4288      	cmp	r0, r1
 8024cc6:	d339      	bcc.n	8024d3c <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8024cc8:	2101      	movs	r1, #1
 8024cca:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024cce:	2100      	movs	r1, #0
 8024cd0:	82a5      	strh	r5, [r4, #20]
 8024cd2:	82e2      	strh	r2, [r4, #22]
 8024cd4:	8321      	strh	r1, [r4, #24]
 8024cd6:	8361      	strh	r1, [r4, #26]
 8024cd8:	f1aa 0610 	sub.w	r6, sl, #16
 8024cdc:	f04f 0e00 	mov.w	lr, #0
 8024ce0:	f04f 0b01 	mov.w	fp, #1
 8024ce4:	0076      	lsls	r6, r6, #1
 8024ce6:	fb06 f703 	mul.w	r7, r6, r3
 8024cea:	b236      	sxth	r6, r6
 8024cec:	b23f      	sxth	r7, r7
 8024cee:	ea46 0107 	orr.w	r1, r6, r7
 8024cf2:	9100      	str	r1, [sp, #0]
 8024cf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024cf6:	428a      	cmp	r2, r1
 8024cf8:	d03e      	beq.n	8024d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8024cfa:	4442      	add	r2, r8
 8024cfc:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024d00:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024d04:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8024d08:	8326      	strh	r6, [r4, #24]
 8024d0a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024d0e:	8367      	strh	r7, [r4, #26]
 8024d10:	4584      	cmp	ip, r0
 8024d12:	d0ef      	beq.n	8024cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024d14:	9800      	ldr	r0, [sp, #0]
 8024d16:	b150      	cbz	r0, 8024d2e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024d18:	2900      	cmp	r1, #0
 8024d1a:	db08      	blt.n	8024d2e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024d1c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024d1e:	4288      	cmp	r0, r1
 8024d20:	dd05      	ble.n	8024d2e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024d22:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024d26:	4288      	cmp	r0, r1
 8024d28:	d315      	bcc.n	8024d56 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024d2a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8024d2e:	82a5      	strh	r5, [r4, #20]
 8024d30:	82e2      	strh	r2, [r4, #22]
 8024d32:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024d36:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024d3a:	e7db      	b.n	8024cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024d3c:	f104 0614 	add.w	r6, r4, #20
 8024d40:	6927      	ldr	r7, [r4, #16]
 8024d42:	ce03      	ldmia	r6!, {r0, r1}
 8024d44:	6038      	str	r0, [r7, #0]
 8024d46:	6079      	str	r1, [r7, #4]
 8024d48:	6921      	ldr	r1, [r4, #16]
 8024d4a:	3108      	adds	r1, #8
 8024d4c:	6121      	str	r1, [r4, #16]
 8024d4e:	68a1      	ldr	r1, [r4, #8]
 8024d50:	3101      	adds	r1, #1
 8024d52:	60a1      	str	r1, [r4, #8]
 8024d54:	e7bb      	b.n	8024cce <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024d56:	f104 0c14 	add.w	ip, r4, #20
 8024d5a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024d5e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8024d62:	f8c9 0000 	str.w	r0, [r9]
 8024d66:	f8c9 1004 	str.w	r1, [r9, #4]
 8024d6a:	6921      	ldr	r1, [r4, #16]
 8024d6c:	3108      	adds	r1, #8
 8024d6e:	6121      	str	r1, [r4, #16]
 8024d70:	68a1      	ldr	r1, [r4, #8]
 8024d72:	3101      	adds	r1, #1
 8024d74:	60a1      	str	r1, [r4, #8]
 8024d76:	e7da      	b.n	8024d2e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024d78:	9a03      	ldr	r2, [sp, #12]
 8024d7a:	8b61      	ldrh	r1, [r4, #26]
 8024d7c:	f1a2 0c20 	sub.w	ip, r2, #32
 8024d80:	8b22      	ldrh	r2, [r4, #24]
 8024d82:	44d4      	add	ip, sl
 8024d84:	4462      	add	r2, ip
 8024d86:	fb0c 1303 	mla	r3, ip, r3, r1
 8024d8a:	8322      	strh	r2, [r4, #24]
 8024d8c:	e739      	b.n	8024c02 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024d8e:	9b01      	ldr	r3, [sp, #4]
 8024d90:	2b00      	cmp	r3, #0
 8024d92:	db3f      	blt.n	8024e14 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8024d94:	2201      	movs	r2, #1
 8024d96:	f1ce 0320 	rsb	r3, lr, #32
 8024d9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8024d9c:	2220      	movs	r2, #32
 8024d9e:	fb0a f303 	mul.w	r3, sl, r3
 8024da2:	9202      	str	r2, [sp, #8]
 8024da4:	9a01      	ldr	r2, [sp, #4]
 8024da6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024daa:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024dae:	fb93 f7f2 	sdiv	r7, r3, r2
 8024db2:	fb02 3317 	mls	r3, r2, r7, r3
 8024db6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024dba:	2b00      	cmp	r3, #0
 8024dbc:	9308      	str	r3, [sp, #32]
 8024dbe:	bfbc      	itt	lt
 8024dc0:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024dc4:	189b      	addlt	r3, r3, r2
 8024dc6:	eb07 0b01 	add.w	fp, r7, r1
 8024dca:	bfb8      	it	lt
 8024dcc:	9308      	strlt	r3, [sp, #32]
 8024dce:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024dd2:	9304      	str	r3, [sp, #16]
 8024dd4:	9b02      	ldr	r3, [sp, #8]
 8024dd6:	4573      	cmp	r3, lr
 8024dd8:	d133      	bne.n	8024e42 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024dda:	9b04      	ldr	r3, [sp, #16]
 8024ddc:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024de0:	454b      	cmp	r3, r9
 8024de2:	d045      	beq.n	8024e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024de4:	8b62      	ldrh	r2, [r4, #26]
 8024de6:	8b23      	ldrh	r3, [r4, #24]
 8024de8:	4313      	orrs	r3, r2
 8024dea:	d00c      	beq.n	8024e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024dec:	f1b8 0f00 	cmp.w	r8, #0
 8024df0:	db09      	blt.n	8024e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024df4:	4543      	cmp	r3, r8
 8024df6:	dd06      	ble.n	8024e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024df8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024dfc:	429a      	cmp	r2, r3
 8024dfe:	d313      	bcc.n	8024e28 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024e00:	2301      	movs	r3, #1
 8024e02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024e06:	9b04      	ldr	r3, [sp, #16]
 8024e08:	82e6      	strh	r6, [r4, #22]
 8024e0a:	82a3      	strh	r3, [r4, #20]
 8024e0c:	2300      	movs	r3, #0
 8024e0e:	8323      	strh	r3, [r4, #24]
 8024e10:	8363      	strh	r3, [r4, #26]
 8024e12:	e02d      	b.n	8024e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024e14:	9a01      	ldr	r2, [sp, #4]
 8024e16:	fb0a f30e 	mul.w	r3, sl, lr
 8024e1a:	4252      	negs	r2, r2
 8024e1c:	9201      	str	r2, [sp, #4]
 8024e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8024e22:	920b      	str	r2, [sp, #44]	; 0x2c
 8024e24:	2200      	movs	r2, #0
 8024e26:	e7bc      	b.n	8024da2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8024e28:	f104 0314 	add.w	r3, r4, #20
 8024e2c:	6922      	ldr	r2, [r4, #16]
 8024e2e:	cb03      	ldmia	r3!, {r0, r1}
 8024e30:	6010      	str	r0, [r2, #0]
 8024e32:	6051      	str	r1, [r2, #4]
 8024e34:	6923      	ldr	r3, [r4, #16]
 8024e36:	3308      	adds	r3, #8
 8024e38:	6123      	str	r3, [r4, #16]
 8024e3a:	68a3      	ldr	r3, [r4, #8]
 8024e3c:	3301      	adds	r3, #1
 8024e3e:	60a3      	str	r3, [r4, #8]
 8024e40:	e7e1      	b.n	8024e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024e42:	f00b 031f 	and.w	r3, fp, #31
 8024e46:	f001 011f 	and.w	r1, r1, #31
 8024e4a:	8b20      	ldrh	r0, [r4, #24]
 8024e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8024e4e:	9b02      	ldr	r3, [sp, #8]
 8024e50:	eba3 020e 	sub.w	r2, r3, lr
 8024e54:	8b63      	ldrh	r3, [r4, #26]
 8024e56:	9300      	str	r3, [sp, #0]
 8024e58:	9b04      	ldr	r3, [sp, #16]
 8024e5a:	42ab      	cmp	r3, r5
 8024e5c:	f040 80ef 	bne.w	802503e <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e62:	4410      	add	r0, r2
 8024e64:	4419      	add	r1, r3
 8024e66:	9b00      	ldr	r3, [sp, #0]
 8024e68:	8320      	strh	r0, [r4, #24]
 8024e6a:	fb02 3101 	mla	r1, r2, r1, r3
 8024e6e:	8361      	strh	r1, [r4, #26]
 8024e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e72:	9904      	ldr	r1, [sp, #16]
 8024e74:	4433      	add	r3, r6
 8024e76:	9300      	str	r3, [sp, #0]
 8024e78:	9a00      	ldr	r2, [sp, #0]
 8024e7a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024e7e:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8024e82:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024e86:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024e8a:	4288      	cmp	r0, r1
 8024e8c:	d018      	beq.n	8024ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024e8e:	8b60      	ldrh	r0, [r4, #26]
 8024e90:	8b21      	ldrh	r1, [r4, #24]
 8024e92:	ea50 0201 	orrs.w	r2, r0, r1
 8024e96:	d00c      	beq.n	8024eb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024e98:	2b00      	cmp	r3, #0
 8024e9a:	db0a      	blt.n	8024eb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024e9c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024e9e:	4299      	cmp	r1, r3
 8024ea0:	dd07      	ble.n	8024eb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024ea2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024ea6:	4299      	cmp	r1, r3
 8024ea8:	f0c0 818b 	bcc.w	80251c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024eac:	2301      	movs	r3, #1
 8024eae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024eb2:	9b04      	ldr	r3, [sp, #16]
 8024eb4:	82a3      	strh	r3, [r4, #20]
 8024eb6:	9b00      	ldr	r3, [sp, #0]
 8024eb8:	82e3      	strh	r3, [r4, #22]
 8024eba:	2300      	movs	r3, #0
 8024ebc:	8323      	strh	r3, [r4, #24]
 8024ebe:	8363      	strh	r3, [r4, #26]
 8024ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024ec2:	9a00      	ldr	r2, [sp, #0]
 8024ec4:	4293      	cmp	r3, r2
 8024ec6:	f000 808d 	beq.w	8024fe4 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024eca:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024ece:	9901      	ldr	r1, [sp, #4]
 8024ed0:	9801      	ldr	r0, [sp, #4]
 8024ed2:	fb93 f1f1 	sdiv	r1, r3, r1
 8024ed6:	fb00 3311 	mls	r3, r0, r1, r3
 8024eda:	9106      	str	r1, [sp, #24]
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	9307      	str	r3, [sp, #28]
 8024ee0:	da04      	bge.n	8024eec <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8024ee2:	1e4b      	subs	r3, r1, #1
 8024ee4:	9306      	str	r3, [sp, #24]
 8024ee6:	9b07      	ldr	r3, [sp, #28]
 8024ee8:	4403      	add	r3, r0
 8024eea:	9307      	str	r3, [sp, #28]
 8024eec:	9b08      	ldr	r3, [sp, #32]
 8024eee:	f04f 0c00 	mov.w	ip, #0
 8024ef2:	9901      	ldr	r1, [sp, #4]
 8024ef4:	1a5b      	subs	r3, r3, r1
 8024ef6:	4659      	mov	r1, fp
 8024ef8:	9308      	str	r3, [sp, #32]
 8024efa:	9b02      	ldr	r3, [sp, #8]
 8024efc:	f1c3 0320 	rsb	r3, r3, #32
 8024f00:	930a      	str	r3, [sp, #40]	; 0x28
 8024f02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024f04:	9b02      	ldr	r3, [sp, #8]
 8024f06:	1a1b      	subs	r3, r3, r0
 8024f08:	9309      	str	r3, [sp, #36]	; 0x24
 8024f0a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024f0e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024f12:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8024f16:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8024f1a:	181b      	adds	r3, r3, r0
 8024f1c:	bf58      	it	pl
 8024f1e:	9801      	ldrpl	r0, [sp, #4]
 8024f20:	9308      	str	r3, [sp, #32]
 8024f22:	bf54      	ite	pl
 8024f24:	1a1b      	subpl	r3, r3, r0
 8024f26:	9d06      	ldrmi	r5, [sp, #24]
 8024f28:	9802      	ldr	r0, [sp, #8]
 8024f2a:	bf5e      	ittt	pl
 8024f2c:	9308      	strpl	r3, [sp, #32]
 8024f2e:	9b06      	ldrpl	r3, [sp, #24]
 8024f30:	1c5d      	addpl	r5, r3, #1
 8024f32:	44ab      	add	fp, r5
 8024f34:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024f38:	9304      	str	r3, [sp, #16]
 8024f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f3c:	4283      	cmp	r3, r0
 8024f3e:	f040 815a 	bne.w	80251f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024f42:	9b04      	ldr	r3, [sp, #16]
 8024f44:	9a00      	ldr	r2, [sp, #0]
 8024f46:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8024f4a:	4543      	cmp	r3, r8
 8024f4c:	d01a      	beq.n	8024f84 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024f4e:	8b61      	ldrh	r1, [r4, #26]
 8024f50:	8b23      	ldrh	r3, [r4, #24]
 8024f52:	430b      	orrs	r3, r1
 8024f54:	d00e      	beq.n	8024f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024f56:	f1be 0f00 	cmp.w	lr, #0
 8024f5a:	db0b      	blt.n	8024f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024f5e:	4573      	cmp	r3, lr
 8024f60:	dd08      	ble.n	8024f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024f62:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024f66:	4299      	cmp	r1, r3
 8024f68:	f0c0 8138 	bcc.w	80251dc <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024f6c:	f04f 0301 	mov.w	r3, #1
 8024f70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024f74:	9b04      	ldr	r3, [sp, #16]
 8024f76:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024f7a:	82a3      	strh	r3, [r4, #20]
 8024f7c:	9b00      	ldr	r3, [sp, #0]
 8024f7e:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024f82:	82e3      	strh	r3, [r4, #22]
 8024f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f86:	9a00      	ldr	r2, [sp, #0]
 8024f88:	441a      	add	r2, r3
 8024f8a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024f8e:	9200      	str	r2, [sp, #0]
 8024f90:	9900      	ldr	r1, [sp, #0]
 8024f92:	9a04      	ldr	r2, [sp, #16]
 8024f94:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024f98:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024fa0:	4288      	cmp	r0, r1
 8024fa2:	d01a      	beq.n	8024fda <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024fa4:	8b60      	ldrh	r0, [r4, #26]
 8024fa6:	8b21      	ldrh	r1, [r4, #24]
 8024fa8:	ea50 0201 	orrs.w	r2, r0, r1
 8024fac:	d00d      	beq.n	8024fca <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	db0b      	blt.n	8024fca <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024fb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024fb4:	4299      	cmp	r1, r3
 8024fb6:	dd08      	ble.n	8024fca <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024fb8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024fbc:	4299      	cmp	r1, r3
 8024fbe:	f0c0 81f9 	bcc.w	80253b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024fc2:	f04f 0301 	mov.w	r3, #1
 8024fc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024fca:	9b04      	ldr	r3, [sp, #16]
 8024fcc:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024fd0:	82a3      	strh	r3, [r4, #20]
 8024fd2:	9b00      	ldr	r3, [sp, #0]
 8024fd4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024fd8:	82e3      	strh	r3, [r4, #22]
 8024fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024fdc:	4659      	mov	r1, fp
 8024fde:	9a00      	ldr	r2, [sp, #0]
 8024fe0:	4293      	cmp	r3, r2
 8024fe2:	d192      	bne.n	8024f0a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024fe4:	9b02      	ldr	r3, [sp, #8]
 8024fe6:	f1c3 0c20 	rsb	ip, r3, #32
 8024fea:	9b05      	ldr	r3, [sp, #20]
 8024fec:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024ff0:	9b03      	ldr	r3, [sp, #12]
 8024ff2:	459c      	cmp	ip, r3
 8024ff4:	f040 81f8 	bne.w	80253e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024ff8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024ffc:	9a00      	ldr	r2, [sp, #0]
 8024ffe:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025002:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8025006:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802500a:	4288      	cmp	r0, r1
 802500c:	f43f ad54 	beq.w	8024ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025010:	8b60      	ldrh	r0, [r4, #26]
 8025012:	8b21      	ldrh	r1, [r4, #24]
 8025014:	ea50 0201 	orrs.w	r2, r0, r1
 8025018:	d00c      	beq.n	8025034 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802501a:	2b00      	cmp	r3, #0
 802501c:	db0a      	blt.n	8025034 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802501e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025020:	4299      	cmp	r1, r3
 8025022:	dd07      	ble.n	8025034 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025024:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025028:	4299      	cmp	r1, r3
 802502a:	f0c0 81d0 	bcc.w	80253ce <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 802502e:	2301      	movs	r3, #1
 8025030:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025034:	9b00      	ldr	r3, [sp, #0]
 8025036:	f8a4 e014 	strh.w	lr, [r4, #20]
 802503a:	82e3      	strh	r3, [r4, #22]
 802503c:	e517      	b.n	8024a6e <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 802503e:	2f00      	cmp	r7, #0
 8025040:	f2c0 8097 	blt.w	8025172 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8025044:	2301      	movs	r3, #1
 8025046:	f1c1 0c20 	rsb	ip, r1, #32
 802504a:	9307      	str	r3, [sp, #28]
 802504c:	2320      	movs	r3, #32
 802504e:	fb02 f20c 	mul.w	r2, r2, ip
 8025052:	9306      	str	r3, [sp, #24]
 8025054:	9b06      	ldr	r3, [sp, #24]
 8025056:	fb92 fcf7 	sdiv	ip, r2, r7
 802505a:	fb07 221c 	mls	r2, r7, ip, r2
 802505e:	4419      	add	r1, r3
 8025060:	9b00      	ldr	r3, [sp, #0]
 8025062:	2a00      	cmp	r2, #0
 8025064:	bfbc      	itt	lt
 8025066:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802506a:	19d2      	addlt	r2, r2, r7
 802506c:	fb0c 3101 	mla	r1, ip, r1, r3
 8025070:	9b07      	ldr	r3, [sp, #28]
 8025072:	4460      	add	r0, ip
 8025074:	441d      	add	r5, r3
 8025076:	0433      	lsls	r3, r6, #16
 8025078:	b200      	sxth	r0, r0
 802507a:	930a      	str	r3, [sp, #40]	; 0x28
 802507c:	18eb      	adds	r3, r5, r3
 802507e:	b209      	sxth	r1, r1
 8025080:	8320      	strh	r0, [r4, #24]
 8025082:	454b      	cmp	r3, r9
 8025084:	8361      	strh	r1, [r4, #26]
 8025086:	d014      	beq.n	80250b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8025088:	ea50 0301 	orrs.w	r3, r0, r1
 802508c:	d00c      	beq.n	80250a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802508e:	f1b8 0f00 	cmp.w	r8, #0
 8025092:	db09      	blt.n	80250a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025096:	4543      	cmp	r3, r8
 8025098:	dd06      	ble.n	80250a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802509a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802509e:	4299      	cmp	r1, r3
 80250a0:	d36e      	bcc.n	8025180 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80250a2:	2301      	movs	r3, #1
 80250a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80250a8:	2300      	movs	r3, #0
 80250aa:	82a5      	strh	r5, [r4, #20]
 80250ac:	82e6      	strh	r6, [r4, #22]
 80250ae:	8323      	strh	r3, [r4, #24]
 80250b0:	8363      	strh	r3, [r4, #26]
 80250b2:	9904      	ldr	r1, [sp, #16]
 80250b4:	eb0e 030c 	add.w	r3, lr, ip
 80250b8:	42a9      	cmp	r1, r5
 80250ba:	d04d      	beq.n	8025158 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 80250bc:	9902      	ldr	r1, [sp, #8]
 80250be:	1bd2      	subs	r2, r2, r7
 80250c0:	1ac9      	subs	r1, r1, r3
 80250c2:	9200      	str	r2, [sp, #0]
 80250c4:	448c      	add	ip, r1
 80250c6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80250ca:	fb9c fef7 	sdiv	lr, ip, r7
 80250ce:	fb07 cc1e 	mls	ip, r7, lr, ip
 80250d2:	f1bc 0f00 	cmp.w	ip, #0
 80250d6:	bfbc      	itt	lt
 80250d8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80250dc:	44bc      	addlt	ip, r7
 80250de:	f10e 0101 	add.w	r1, lr, #1
 80250e2:	910d      	str	r1, [sp, #52]	; 0x34
 80250e4:	9a00      	ldr	r2, [sp, #0]
 80250e6:	8b20      	ldrh	r0, [r4, #24]
 80250e8:	eb12 020c 	adds.w	r2, r2, ip
 80250ec:	8b61      	ldrh	r1, [r4, #26]
 80250ee:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80250f2:	9200      	str	r2, [sp, #0]
 80250f4:	bf5b      	ittet	pl
 80250f6:	1bd2      	subpl	r2, r2, r7
 80250f8:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 80250fc:	46f0      	movmi	r8, lr
 80250fe:	9200      	strpl	r2, [sp, #0]
 8025100:	9a07      	ldr	r2, [sp, #28]
 8025102:	4440      	add	r0, r8
 8025104:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8025108:	4443      	add	r3, r8
 802510a:	4415      	add	r5, r2
 802510c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025112:	b200      	sxth	r0, r0
 8025114:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025118:	442a      	add	r2, r5
 802511a:	b209      	sxth	r1, r1
 802511c:	8320      	strh	r0, [r4, #24]
 802511e:	454a      	cmp	r2, r9
 8025120:	8361      	strh	r1, [r4, #26]
 8025122:	d016      	beq.n	8025152 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8025124:	ea50 0201 	orrs.w	r2, r0, r1
 8025128:	d00d      	beq.n	8025146 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802512a:	f1b8 0f00 	cmp.w	r8, #0
 802512e:	db0a      	blt.n	8025146 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025130:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025132:	4541      	cmp	r1, r8
 8025134:	dd07      	ble.n	8025146 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025136:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802513a:	4288      	cmp	r0, r1
 802513c:	d330      	bcc.n	80251a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 802513e:	f04f 0201 	mov.w	r2, #1
 8025142:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025146:	f04f 0200 	mov.w	r2, #0
 802514a:	82a5      	strh	r5, [r4, #20]
 802514c:	82e6      	strh	r6, [r4, #22]
 802514e:	8322      	strh	r2, [r4, #24]
 8025150:	8362      	strh	r2, [r4, #26]
 8025152:	9904      	ldr	r1, [sp, #16]
 8025154:	42a9      	cmp	r1, r5
 8025156:	d1c5      	bne.n	80250e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8025158:	9a02      	ldr	r2, [sp, #8]
 802515a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802515c:	1ad3      	subs	r3, r2, r3
 802515e:	8b22      	ldrh	r2, [r4, #24]
 8025160:	3120      	adds	r1, #32
 8025162:	441a      	add	r2, r3
 8025164:	8322      	strh	r2, [r4, #24]
 8025166:	9a06      	ldr	r2, [sp, #24]
 8025168:	1a89      	subs	r1, r1, r2
 802516a:	8b62      	ldrh	r2, [r4, #26]
 802516c:	fb03 2301 	mla	r3, r3, r1, r2
 8025170:	e64e      	b.n	8024e10 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8025172:	f04f 33ff 	mov.w	r3, #4294967295
 8025176:	434a      	muls	r2, r1
 8025178:	427f      	negs	r7, r7
 802517a:	9307      	str	r3, [sp, #28]
 802517c:	2300      	movs	r3, #0
 802517e:	e768      	b.n	8025052 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8025180:	f104 0314 	add.w	r3, r4, #20
 8025184:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025188:	cb03      	ldmia	r3!, {r0, r1}
 802518a:	f8c8 0000 	str.w	r0, [r8]
 802518e:	f8c8 1004 	str.w	r1, [r8, #4]
 8025192:	6923      	ldr	r3, [r4, #16]
 8025194:	3308      	adds	r3, #8
 8025196:	6123      	str	r3, [r4, #16]
 8025198:	68a3      	ldr	r3, [r4, #8]
 802519a:	3301      	adds	r3, #1
 802519c:	60a3      	str	r3, [r4, #8]
 802519e:	e783      	b.n	80250a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80251a0:	f104 0814 	add.w	r8, r4, #20
 80251a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80251a8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80251ac:	f8c9 0000 	str.w	r0, [r9]
 80251b0:	f8c9 1004 	str.w	r1, [r9, #4]
 80251b4:	6921      	ldr	r1, [r4, #16]
 80251b6:	3108      	adds	r1, #8
 80251b8:	6121      	str	r1, [r4, #16]
 80251ba:	68a1      	ldr	r1, [r4, #8]
 80251bc:	3101      	adds	r1, #1
 80251be:	60a1      	str	r1, [r4, #8]
 80251c0:	e7c1      	b.n	8025146 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80251c2:	f104 0314 	add.w	r3, r4, #20
 80251c6:	6925      	ldr	r5, [r4, #16]
 80251c8:	cb03      	ldmia	r3!, {r0, r1}
 80251ca:	6028      	str	r0, [r5, #0]
 80251cc:	6069      	str	r1, [r5, #4]
 80251ce:	6923      	ldr	r3, [r4, #16]
 80251d0:	3308      	adds	r3, #8
 80251d2:	6123      	str	r3, [r4, #16]
 80251d4:	68a3      	ldr	r3, [r4, #8]
 80251d6:	3301      	adds	r3, #1
 80251d8:	60a3      	str	r3, [r4, #8]
 80251da:	e66a      	b.n	8024eb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80251dc:	f104 0314 	add.w	r3, r4, #20
 80251e0:	6925      	ldr	r5, [r4, #16]
 80251e2:	cb03      	ldmia	r3!, {r0, r1}
 80251e4:	6028      	str	r0, [r5, #0]
 80251e6:	6069      	str	r1, [r5, #4]
 80251e8:	6923      	ldr	r3, [r4, #16]
 80251ea:	3308      	adds	r3, #8
 80251ec:	6123      	str	r3, [r4, #16]
 80251ee:	68a3      	ldr	r3, [r4, #8]
 80251f0:	3301      	adds	r3, #1
 80251f2:	60a3      	str	r3, [r4, #8]
 80251f4:	e6be      	b.n	8024f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80251f6:	f00b 031f 	and.w	r3, fp, #31
 80251fa:	114f      	asrs	r7, r1, #5
 80251fc:	8b20      	ldrh	r0, [r4, #24]
 80251fe:	f001 011f 	and.w	r1, r1, #31
 8025202:	930f      	str	r3, [sp, #60]	; 0x3c
 8025204:	9b04      	ldr	r3, [sp, #16]
 8025206:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802520a:	429f      	cmp	r7, r3
 802520c:	d10a      	bne.n	8025224 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025210:	4418      	add	r0, r3
 8025212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025214:	4419      	add	r1, r3
 8025216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025218:	8320      	strh	r0, [r4, #24]
 802521a:	fb03 9901 	mla	r9, r3, r1, r9
 802521e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8025222:	e6af      	b.n	8024f84 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8025224:	2d00      	cmp	r5, #0
 8025226:	f2c0 809b 	blt.w	8025360 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802522a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802522c:	f1c1 0320 	rsb	r3, r1, #32
 8025230:	4373      	muls	r3, r6
 8025232:	2601      	movs	r6, #1
 8025234:	960e      	str	r6, [sp, #56]	; 0x38
 8025236:	2620      	movs	r6, #32
 8025238:	960d      	str	r6, [sp, #52]	; 0x34
 802523a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802523c:	fb93 f6f5 	sdiv	r6, r3, r5
 8025240:	4411      	add	r1, r2
 8025242:	fb05 3316 	mls	r3, r5, r6, r3
 8025246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025248:	2b00      	cmp	r3, #0
 802524a:	4417      	add	r7, r2
 802524c:	9a00      	ldr	r2, [sp, #0]
 802524e:	bfbc      	itt	lt
 8025250:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8025254:	195b      	addlt	r3, r3, r5
 8025256:	0412      	lsls	r2, r2, #16
 8025258:	fb06 9101 	mla	r1, r6, r1, r9
 802525c:	4430      	add	r0, r6
 802525e:	eb07 0902 	add.w	r9, r7, r2
 8025262:	9210      	str	r2, [sp, #64]	; 0x40
 8025264:	b200      	sxth	r0, r0
 8025266:	b209      	sxth	r1, r1
 8025268:	45c1      	cmp	r9, r8
 802526a:	8320      	strh	r0, [r4, #24]
 802526c:	8361      	strh	r1, [r4, #26]
 802526e:	d017      	beq.n	80252a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8025270:	ea50 0201 	orrs.w	r2, r0, r1
 8025274:	d00d      	beq.n	8025292 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025276:	f1be 0f00 	cmp.w	lr, #0
 802527a:	db0a      	blt.n	8025292 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802527c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802527e:	4571      	cmp	r1, lr
 8025280:	dd07      	ble.n	8025292 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025282:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025286:	4288      	cmp	r0, r1
 8025288:	d372      	bcc.n	8025370 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 802528a:	f04f 0201 	mov.w	r2, #1
 802528e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025292:	9a00      	ldr	r2, [sp, #0]
 8025294:	82a7      	strh	r7, [r4, #20]
 8025296:	82e2      	strh	r2, [r4, #22]
 8025298:	f8a4 c018 	strh.w	ip, [r4, #24]
 802529c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80252a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80252a2:	eb02 0e06 	add.w	lr, r2, r6
 80252a6:	9a04      	ldr	r2, [sp, #16]
 80252a8:	42ba      	cmp	r2, r7
 80252aa:	d049      	beq.n	8025340 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 80252ac:	9a02      	ldr	r2, [sp, #8]
 80252ae:	1b5b      	subs	r3, r3, r5
 80252b0:	eba2 010e 	sub.w	r1, r2, lr
 80252b4:	440e      	add	r6, r1
 80252b6:	0176      	lsls	r6, r6, #5
 80252b8:	fb96 f8f5 	sdiv	r8, r6, r5
 80252bc:	fb05 6618 	mls	r6, r5, r8, r6
 80252c0:	2e00      	cmp	r6, #0
 80252c2:	bfbc      	itt	lt
 80252c4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80252c8:	1976      	addlt	r6, r6, r5
 80252ca:	f108 0201 	add.w	r2, r8, #1
 80252ce:	9211      	str	r2, [sp, #68]	; 0x44
 80252d0:	199b      	adds	r3, r3, r6
 80252d2:	8b20      	ldrh	r0, [r4, #24]
 80252d4:	8b61      	ldrh	r1, [r4, #26]
 80252d6:	bf54      	ite	pl
 80252d8:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 80252dc:	46c1      	movmi	r9, r8
 80252de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80252e0:	bf58      	it	pl
 80252e2:	1b5b      	subpl	r3, r3, r5
 80252e4:	4448      	add	r0, r9
 80252e6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80252ea:	4417      	add	r7, r2
 80252ec:	44ce      	add	lr, r9
 80252ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80252f0:	b200      	sxth	r0, r0
 80252f2:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80252f6:	b209      	sxth	r1, r1
 80252f8:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80252fc:	443a      	add	r2, r7
 80252fe:	8320      	strh	r0, [r4, #24]
 8025300:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025304:	8361      	strh	r1, [r4, #26]
 8025306:	4552      	cmp	r2, sl
 8025308:	d017      	beq.n	802533a <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802530a:	ea50 0201 	orrs.w	r2, r0, r1
 802530e:	d00d      	beq.n	802532c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025310:	f1b9 0f00 	cmp.w	r9, #0
 8025314:	db0a      	blt.n	802532c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025316:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025318:	4549      	cmp	r1, r9
 802531a:	dd07      	ble.n	802532c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802531c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025320:	4288      	cmp	r0, r1
 8025322:	d336      	bcc.n	8025392 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8025324:	f04f 0201 	mov.w	r2, #1
 8025328:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802532c:	9a00      	ldr	r2, [sp, #0]
 802532e:	82a7      	strh	r7, [r4, #20]
 8025330:	82e2      	strh	r2, [r4, #22]
 8025332:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025336:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802533a:	9a04      	ldr	r2, [sp, #16]
 802533c:	42ba      	cmp	r2, r7
 802533e:	d1c7      	bne.n	80252d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025340:	9b02      	ldr	r3, [sp, #8]
 8025342:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025344:	eba3 0e0e 	sub.w	lr, r3, lr
 8025348:	8b23      	ldrh	r3, [r4, #24]
 802534a:	3120      	adds	r1, #32
 802534c:	4473      	add	r3, lr
 802534e:	8323      	strh	r3, [r4, #24]
 8025350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025352:	1ac9      	subs	r1, r1, r3
 8025354:	8b63      	ldrh	r3, [r4, #26]
 8025356:	fb0e 3e01 	mla	lr, lr, r1, r3
 802535a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802535e:	e611      	b.n	8024f84 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8025360:	f04f 36ff 	mov.w	r6, #4294967295
 8025364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025366:	426d      	negs	r5, r5
 8025368:	960e      	str	r6, [sp, #56]	; 0x38
 802536a:	2600      	movs	r6, #0
 802536c:	434b      	muls	r3, r1
 802536e:	e763      	b.n	8025238 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8025370:	f104 0e14 	add.w	lr, r4, #20
 8025374:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025378:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802537c:	f8c8 0000 	str.w	r0, [r8]
 8025380:	f8c8 1004 	str.w	r1, [r8, #4]
 8025384:	6921      	ldr	r1, [r4, #16]
 8025386:	3108      	adds	r1, #8
 8025388:	6121      	str	r1, [r4, #16]
 802538a:	68a1      	ldr	r1, [r4, #8]
 802538c:	3101      	adds	r1, #1
 802538e:	60a1      	str	r1, [r4, #8]
 8025390:	e77f      	b.n	8025292 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025392:	f104 0914 	add.w	r9, r4, #20
 8025396:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802539a:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802539e:	f8ca 0000 	str.w	r0, [sl]
 80253a2:	f8ca 1004 	str.w	r1, [sl, #4]
 80253a6:	6921      	ldr	r1, [r4, #16]
 80253a8:	3108      	adds	r1, #8
 80253aa:	6121      	str	r1, [r4, #16]
 80253ac:	68a1      	ldr	r1, [r4, #8]
 80253ae:	3101      	adds	r1, #1
 80253b0:	60a1      	str	r1, [r4, #8]
 80253b2:	e7bb      	b.n	802532c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80253b4:	f104 0314 	add.w	r3, r4, #20
 80253b8:	6925      	ldr	r5, [r4, #16]
 80253ba:	cb03      	ldmia	r3!, {r0, r1}
 80253bc:	6028      	str	r0, [r5, #0]
 80253be:	6069      	str	r1, [r5, #4]
 80253c0:	6923      	ldr	r3, [r4, #16]
 80253c2:	3308      	adds	r3, #8
 80253c4:	6123      	str	r3, [r4, #16]
 80253c6:	68a3      	ldr	r3, [r4, #8]
 80253c8:	3301      	adds	r3, #1
 80253ca:	60a3      	str	r3, [r4, #8]
 80253cc:	e5fd      	b.n	8024fca <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80253ce:	f104 0314 	add.w	r3, r4, #20
 80253d2:	6925      	ldr	r5, [r4, #16]
 80253d4:	cb03      	ldmia	r3!, {r0, r1}
 80253d6:	6028      	str	r0, [r5, #0]
 80253d8:	6069      	str	r1, [r5, #4]
 80253da:	6923      	ldr	r3, [r4, #16]
 80253dc:	3308      	adds	r3, #8
 80253de:	6123      	str	r3, [r4, #16]
 80253e0:	68a3      	ldr	r3, [r4, #8]
 80253e2:	3301      	adds	r3, #1
 80253e4:	60a3      	str	r3, [r4, #8]
 80253e6:	e625      	b.n	8025034 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80253e8:	9b05      	ldr	r3, [sp, #20]
 80253ea:	ea4f 176b 	mov.w	r7, fp, asr #5
 80253ee:	f00b 081f 	and.w	r8, fp, #31
 80253f2:	8b20      	ldrh	r0, [r4, #24]
 80253f4:	f003 031f 	and.w	r3, r3, #31
 80253f8:	4577      	cmp	r7, lr
 80253fa:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80253fe:	9302      	str	r3, [sp, #8]
 8025400:	9b03      	ldr	r3, [sp, #12]
 8025402:	eba3 050c 	sub.w	r5, r3, ip
 8025406:	d108      	bne.n	802541a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8025408:	9b02      	ldr	r3, [sp, #8]
 802540a:	4428      	add	r0, r5
 802540c:	4498      	add	r8, r3
 802540e:	8320      	strh	r0, [r4, #24]
 8025410:	fb05 9508 	mla	r5, r5, r8, r9
 8025414:	8365      	strh	r5, [r4, #26]
 8025416:	f7ff bb4f 	b.w	8024ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802541a:	9b05      	ldr	r3, [sp, #20]
 802541c:	ebb3 030b 	subs.w	r3, r3, fp
 8025420:	f100 809c 	bmi.w	802555c <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8025424:	f1c8 0120 	rsb	r1, r8, #32
 8025428:	2201      	movs	r2, #1
 802542a:	f04f 0b20 	mov.w	fp, #32
 802542e:	434d      	muls	r5, r1
 8025430:	9201      	str	r2, [sp, #4]
 8025432:	9a01      	ldr	r2, [sp, #4]
 8025434:	44d8      	add	r8, fp
 8025436:	fb95 f6f3 	sdiv	r6, r5, r3
 802543a:	fb03 5516 	mls	r5, r3, r6, r5
 802543e:	4417      	add	r7, r2
 8025440:	9a00      	ldr	r2, [sp, #0]
 8025442:	2d00      	cmp	r5, #0
 8025444:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8025448:	bfbc      	itt	lt
 802544a:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802544e:	18ed      	addlt	r5, r5, r3
 8025450:	eb07 0a02 	add.w	sl, r7, r2
 8025454:	9204      	str	r2, [sp, #16]
 8025456:	fb06 9808 	mla	r8, r6, r8, r9
 802545a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802545e:	4430      	add	r0, r6
 8025460:	fa0f f188 	sxth.w	r1, r8
 8025464:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025468:	b200      	sxth	r0, r0
 802546a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802546e:	8361      	strh	r1, [r4, #26]
 8025470:	8320      	strh	r0, [r4, #24]
 8025472:	45ca      	cmp	sl, r9
 8025474:	d015      	beq.n	80254a2 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8025476:	ea50 0201 	orrs.w	r2, r0, r1
 802547a:	d00c      	beq.n	8025496 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802547c:	f1b8 0f00 	cmp.w	r8, #0
 8025480:	db09      	blt.n	8025496 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025482:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025484:	4541      	cmp	r1, r8
 8025486:	dd06      	ble.n	8025496 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025488:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802548c:	4288      	cmp	r0, r1
 802548e:	d36e      	bcc.n	802556e <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8025490:	2101      	movs	r1, #1
 8025492:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025496:	2100      	movs	r1, #0
 8025498:	9a00      	ldr	r2, [sp, #0]
 802549a:	82a7      	strh	r7, [r4, #20]
 802549c:	82e2      	strh	r2, [r4, #22]
 802549e:	8321      	strh	r1, [r4, #24]
 80254a0:	8361      	strh	r1, [r4, #26]
 80254a2:	45be      	cmp	lr, r7
 80254a4:	44b4      	add	ip, r6
 80254a6:	d048      	beq.n	802553a <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 80254a8:	9a03      	ldr	r2, [sp, #12]
 80254aa:	1aed      	subs	r5, r5, r3
 80254ac:	eba2 010c 	sub.w	r1, r2, ip
 80254b0:	440e      	add	r6, r1
 80254b2:	0176      	lsls	r6, r6, #5
 80254b4:	fb96 f8f3 	sdiv	r8, r6, r3
 80254b8:	fb03 6618 	mls	r6, r3, r8, r6
 80254bc:	2e00      	cmp	r6, #0
 80254be:	bfbc      	itt	lt
 80254c0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80254c4:	18f6      	addlt	r6, r6, r3
 80254c6:	f108 0201 	add.w	r2, r8, #1
 80254ca:	9205      	str	r2, [sp, #20]
 80254cc:	19ad      	adds	r5, r5, r6
 80254ce:	8b20      	ldrh	r0, [r4, #24]
 80254d0:	8b61      	ldrh	r1, [r4, #26]
 80254d2:	bf54      	ite	pl
 80254d4:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 80254d8:	46c1      	movmi	r9, r8
 80254da:	9a01      	ldr	r2, [sp, #4]
 80254dc:	bf58      	it	pl
 80254de:	1aed      	subpl	r5, r5, r3
 80254e0:	4448      	add	r0, r9
 80254e2:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80254e6:	4417      	add	r7, r2
 80254e8:	44cc      	add	ip, r9
 80254ea:	9a04      	ldr	r2, [sp, #16]
 80254ec:	b200      	sxth	r0, r0
 80254ee:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80254f2:	b209      	sxth	r1, r1
 80254f4:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80254f8:	443a      	add	r2, r7
 80254fa:	8320      	strh	r0, [r4, #24]
 80254fc:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025500:	8361      	strh	r1, [r4, #26]
 8025502:	4552      	cmp	r2, sl
 8025504:	d017      	beq.n	8025536 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8025506:	ea50 0201 	orrs.w	r2, r0, r1
 802550a:	d00d      	beq.n	8025528 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802550c:	f1b9 0f00 	cmp.w	r9, #0
 8025510:	db0a      	blt.n	8025528 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025512:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025514:	4549      	cmp	r1, r9
 8025516:	dd07      	ble.n	8025528 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025518:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802551c:	4288      	cmp	r0, r1
 802551e:	d337      	bcc.n	8025590 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8025520:	f04f 0201 	mov.w	r2, #1
 8025524:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025528:	9a00      	ldr	r2, [sp, #0]
 802552a:	82a7      	strh	r7, [r4, #20]
 802552c:	82e2      	strh	r2, [r4, #22]
 802552e:	f04f 0200 	mov.w	r2, #0
 8025532:	8322      	strh	r2, [r4, #24]
 8025534:	8362      	strh	r2, [r4, #26]
 8025536:	45be      	cmp	lr, r7
 8025538:	d1c8      	bne.n	80254cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802553a:	9b03      	ldr	r3, [sp, #12]
 802553c:	8b62      	ldrh	r2, [r4, #26]
 802553e:	eba3 0c0c 	sub.w	ip, r3, ip
 8025542:	8b23      	ldrh	r3, [r4, #24]
 8025544:	4463      	add	r3, ip
 8025546:	8323      	strh	r3, [r4, #24]
 8025548:	9b02      	ldr	r3, [sp, #8]
 802554a:	3320      	adds	r3, #32
 802554c:	eba3 030b 	sub.w	r3, r3, fp
 8025550:	fb0c 2c03 	mla	ip, ip, r3, r2
 8025554:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025558:	f7ff baae 	b.w	8024ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802555c:	f04f 32ff 	mov.w	r2, #4294967295
 8025560:	fb05 f508 	mul.w	r5, r5, r8
 8025564:	425b      	negs	r3, r3
 8025566:	f04f 0b00 	mov.w	fp, #0
 802556a:	9201      	str	r2, [sp, #4]
 802556c:	e761      	b.n	8025432 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802556e:	f104 0814 	add.w	r8, r4, #20
 8025572:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025576:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802557a:	f8c9 0000 	str.w	r0, [r9]
 802557e:	f8c9 1004 	str.w	r1, [r9, #4]
 8025582:	6921      	ldr	r1, [r4, #16]
 8025584:	3108      	adds	r1, #8
 8025586:	6121      	str	r1, [r4, #16]
 8025588:	68a1      	ldr	r1, [r4, #8]
 802558a:	3101      	adds	r1, #1
 802558c:	60a1      	str	r1, [r4, #8]
 802558e:	e782      	b.n	8025496 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025590:	f104 0914 	add.w	r9, r4, #20
 8025594:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025598:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802559c:	f8ca 0000 	str.w	r0, [sl]
 80255a0:	f8ca 1004 	str.w	r1, [sl, #4]
 80255a4:	6921      	ldr	r1, [r4, #16]
 80255a6:	3108      	adds	r1, #8
 80255a8:	6121      	str	r1, [r4, #16]
 80255aa:	68a1      	ldr	r1, [r4, #8]
 80255ac:	3101      	adds	r1, #1
 80255ae:	60a1      	str	r1, [r4, #8]
 80255b0:	e7ba      	b.n	8025528 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080255b2 <_ZN8touchgfx7Outline6lineToEii>:
 80255b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80255b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80255b6:	4604      	mov	r4, r0
 80255b8:	460d      	mov	r5, r1
 80255ba:	4616      	mov	r6, r2
 80255bc:	079b      	lsls	r3, r3, #30
 80255be:	d526      	bpl.n	802560e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80255c0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80255c4:	ea85 0001 	eor.w	r0, r5, r1
 80255c8:	ea86 0302 	eor.w	r3, r6, r2
 80255cc:	4303      	orrs	r3, r0
 80255ce:	d01e      	beq.n	802560e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80255d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80255d2:	114b      	asrs	r3, r1, #5
 80255d4:	9600      	str	r6, [sp, #0]
 80255d6:	4283      	cmp	r3, r0
 80255d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80255da:	bfb8      	it	lt
 80255dc:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80255de:	3301      	adds	r3, #1
 80255e0:	4283      	cmp	r3, r0
 80255e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80255e4:	bfc8      	it	gt
 80255e6:	6363      	strgt	r3, [r4, #52]	; 0x34
 80255e8:	116b      	asrs	r3, r5, #5
 80255ea:	4283      	cmp	r3, r0
 80255ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80255ee:	bfb8      	it	lt
 80255f0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80255f2:	3301      	adds	r3, #1
 80255f4:	4283      	cmp	r3, r0
 80255f6:	4620      	mov	r0, r4
 80255f8:	bfc8      	it	gt
 80255fa:	6363      	strgt	r3, [r4, #52]	; 0x34
 80255fc:	462b      	mov	r3, r5
 80255fe:	f7ff f9e3 	bl	80249c8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8025602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025604:	f043 0301 	orr.w	r3, r3, #1
 8025608:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802560c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802560e:	b002      	add	sp, #8
 8025610:	bd70      	pop	{r4, r5, r6, pc}

08025612 <_ZN8touchgfx7Outline6moveToEii>:
 8025612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025614:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025616:	4615      	mov	r5, r2
 8025618:	4604      	mov	r4, r0
 802561a:	460e      	mov	r6, r1
 802561c:	079a      	lsls	r2, r3, #30
 802561e:	d401      	bmi.n	8025624 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8025620:	f7ff f98c 	bl	802493c <_ZN8touchgfx7Outline5resetEv>
 8025624:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025626:	07db      	lsls	r3, r3, #31
 8025628:	d504      	bpl.n	8025634 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802562a:	4620      	mov	r0, r4
 802562c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8025630:	f7ff ffbf 	bl	80255b2 <_ZN8touchgfx7Outline6lineToEii>
 8025634:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8025638:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802563c:	116f      	asrs	r7, r5, #5
 802563e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8025642:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8025646:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802564a:	4291      	cmp	r1, r2
 802564c:	d015      	beq.n	802567a <_ZN8touchgfx7Outline6moveToEii+0x68>
 802564e:	8b61      	ldrh	r1, [r4, #26]
 8025650:	8b22      	ldrh	r2, [r4, #24]
 8025652:	430a      	orrs	r2, r1
 8025654:	d00b      	beq.n	802566e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8025656:	2b00      	cmp	r3, #0
 8025658:	db09      	blt.n	802566e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802565a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802565c:	429a      	cmp	r2, r3
 802565e:	dd06      	ble.n	802566e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8025660:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025664:	429a      	cmp	r2, r3
 8025666:	d30d      	bcc.n	8025684 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8025668:	2301      	movs	r3, #1
 802566a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802566e:	2300      	movs	r3, #0
 8025670:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025674:	82e7      	strh	r7, [r4, #22]
 8025676:	8323      	strh	r3, [r4, #24]
 8025678:	8363      	strh	r3, [r4, #26]
 802567a:	61e6      	str	r6, [r4, #28]
 802567c:	62a5      	str	r5, [r4, #40]	; 0x28
 802567e:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8025682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025684:	f104 0314 	add.w	r3, r4, #20
 8025688:	6922      	ldr	r2, [r4, #16]
 802568a:	cb03      	ldmia	r3!, {r0, r1}
 802568c:	6010      	str	r0, [r2, #0]
 802568e:	6051      	str	r1, [r2, #4]
 8025690:	6923      	ldr	r3, [r4, #16]
 8025692:	3308      	adds	r3, #8
 8025694:	6123      	str	r3, [r4, #16]
 8025696:	68a3      	ldr	r3, [r4, #8]
 8025698:	3301      	adds	r3, #1
 802569a:	60a3      	str	r3, [r4, #8]
 802569c:	e7e7      	b.n	802566e <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802569e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802569e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256a2:	b0d1      	sub	sp, #324	; 0x144
 80256a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80256a8:	466c      	mov	r4, sp
 80256aa:	1a0d      	subs	r5, r1, r0
 80256ac:	f100 0208 	add.w	r2, r0, #8
 80256b0:	2d48      	cmp	r5, #72	; 0x48
 80256b2:	f340 80ba 	ble.w	802582a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80256b6:	112d      	asrs	r5, r5, #4
 80256b8:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80256bc:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80256c0:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80256c4:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80256c8:	f9b0 8000 	ldrsh.w	r8, [r0]
 80256cc:	681e      	ldr	r6, [r3, #0]
 80256ce:	6006      	str	r6, [r0, #0]
 80256d0:	685e      	ldr	r6, [r3, #4]
 80256d2:	6046      	str	r6, [r0, #4]
 80256d4:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 80256d8:	f8a3 c004 	strh.w	ip, [r3, #4]
 80256dc:	f8a3 e002 	strh.w	lr, [r3, #2]
 80256e0:	80df      	strh	r7, [r3, #6]
 80256e2:	f1a1 0308 	sub.w	r3, r1, #8
 80256e6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80256ea:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80256ee:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80256f2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80256f6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80256fa:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80256fe:	45ac      	cmp	ip, r5
 8025700:	dd0f      	ble.n	8025722 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8025702:	681d      	ldr	r5, [r3, #0]
 8025704:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025708:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802570c:	6015      	str	r5, [r2, #0]
 802570e:	685d      	ldr	r5, [r3, #4]
 8025710:	6055      	str	r5, [r2, #4]
 8025712:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025716:	f821 6c06 	strh.w	r6, [r1, #-6]
 802571a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802571e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025722:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8025726:	f9b0 7000 	ldrsh.w	r7, [r0]
 802572a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802572e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8025732:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8025736:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802573a:	4565      	cmp	r5, ip
 802573c:	dd0d      	ble.n	802575a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802573e:	6815      	ldr	r5, [r2, #0]
 8025740:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025744:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025748:	6005      	str	r5, [r0, #0]
 802574a:	6855      	ldr	r5, [r2, #4]
 802574c:	8107      	strh	r7, [r0, #8]
 802574e:	6045      	str	r5, [r0, #4]
 8025750:	8146      	strh	r6, [r0, #10]
 8025752:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8025756:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802575a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802575e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025762:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8025766:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802576a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802576e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025772:	45ac      	cmp	ip, r5
 8025774:	dd0f      	ble.n	8025796 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025776:	681d      	ldr	r5, [r3, #0]
 8025778:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802577c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025780:	6005      	str	r5, [r0, #0]
 8025782:	685d      	ldr	r5, [r3, #4]
 8025784:	6045      	str	r5, [r0, #4]
 8025786:	f821 7c08 	strh.w	r7, [r1, #-8]
 802578a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802578e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025792:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025796:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802579a:	f102 0508 	add.w	r5, r2, #8
 802579e:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80257a2:	f9b0 e000 	ldrsh.w	lr, [r0]
 80257a6:	462f      	mov	r7, r5
 80257a8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80257ac:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80257b0:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80257b4:	45b2      	cmp	sl, r6
 80257b6:	dc18      	bgt.n	80257ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80257b8:	3b08      	subs	r3, #8
 80257ba:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80257be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80257c2:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80257c6:	45b2      	cmp	sl, r6
 80257c8:	dbf6      	blt.n	80257b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80257ca:	42ab      	cmp	r3, r5
 80257cc:	681e      	ldr	r6, [r3, #0]
 80257ce:	d30e      	bcc.n	80257ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80257d0:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 80257d4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80257d8:	602e      	str	r6, [r5, #0]
 80257da:	685e      	ldr	r6, [r3, #4]
 80257dc:	606e      	str	r6, [r5, #4]
 80257de:	f8a3 9000 	strh.w	r9, [r3]
 80257e2:	f8a3 8002 	strh.w	r8, [r3, #2]
 80257e6:	809f      	strh	r7, [r3, #4]
 80257e8:	80da      	strh	r2, [r3, #6]
 80257ea:	462a      	mov	r2, r5
 80257ec:	e7d3      	b.n	8025796 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80257ee:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80257f2:	6006      	str	r6, [r0, #0]
 80257f4:	685e      	ldr	r6, [r3, #4]
 80257f6:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80257fa:	6046      	str	r6, [r0, #4]
 80257fc:	1a1e      	subs	r6, r3, r0
 80257fe:	80da      	strh	r2, [r3, #6]
 8025800:	1b4a      	subs	r2, r1, r5
 8025802:	f8a3 e000 	strh.w	lr, [r3]
 8025806:	10d2      	asrs	r2, r2, #3
 8025808:	f8a3 c002 	strh.w	ip, [r3, #2]
 802580c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025810:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8025814:	bfb5      	itete	lt
 8025816:	e9c4 0300 	strdlt	r0, r3, [r4]
 802581a:	4607      	movge	r7, r0
 802581c:	460b      	movlt	r3, r1
 802581e:	e9c4 5100 	strdge	r5, r1, [r4]
 8025822:	4638      	mov	r0, r7
 8025824:	3408      	adds	r4, #8
 8025826:	4619      	mov	r1, r3
 8025828:	e73f      	b.n	80256aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802582a:	4291      	cmp	r1, r2
 802582c:	d925      	bls.n	802587a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802582e:	f1a2 0310 	sub.w	r3, r2, #16
 8025832:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8025836:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802583a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802583e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8025842:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8025846:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802584a:	42b5      	cmp	r5, r6
 802584c:	dd13      	ble.n	8025876 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802584e:	461d      	mov	r5, r3
 8025850:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8025854:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8025858:	3b08      	subs	r3, #8
 802585a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802585e:	619e      	str	r6, [r3, #24]
 8025860:	42a8      	cmp	r0, r5
 8025862:	686e      	ldr	r6, [r5, #4]
 8025864:	f8a3 c010 	strh.w	ip, [r3, #16]
 8025868:	61de      	str	r6, [r3, #28]
 802586a:	825f      	strh	r7, [r3, #18]
 802586c:	f8a3 8014 	strh.w	r8, [r3, #20]
 8025870:	f8a3 e016 	strh.w	lr, [r3, #22]
 8025874:	d1dd      	bne.n	8025832 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8025876:	3208      	adds	r2, #8
 8025878:	e7d7      	b.n	802582a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802587a:	466b      	mov	r3, sp
 802587c:	429c      	cmp	r4, r3
 802587e:	d903      	bls.n	8025888 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025880:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8025884:	3c08      	subs	r4, #8
 8025886:	e710      	b.n	80256aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025888:	b051      	add	sp, #324	; 0x144
 802588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802588e <_ZN8touchgfx7Outline9sortCellsEv>:
 802588e:	6881      	ldr	r1, [r0, #8]
 8025890:	b111      	cbz	r1, 8025898 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8025892:	68c0      	ldr	r0, [r0, #12]
 8025894:	f7ff bf03 	b.w	802569e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025898:	4770      	bx	lr

0802589a <_ZN8touchgfx7Outline8getCellsEv>:
 802589a:	b510      	push	{r4, lr}
 802589c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802589e:	4604      	mov	r4, r0
 80258a0:	07da      	lsls	r2, r3, #31
 80258a2:	d507      	bpl.n	80258b4 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80258a4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80258a8:	f7ff fe83 	bl	80255b2 <_ZN8touchgfx7Outline6lineToEii>
 80258ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80258ae:	f023 0301 	bic.w	r3, r3, #1
 80258b2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80258b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80258b6:	079b      	lsls	r3, r3, #30
 80258b8:	d51a      	bpl.n	80258f0 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80258ba:	8b62      	ldrh	r2, [r4, #26]
 80258bc:	8b23      	ldrh	r3, [r4, #24]
 80258be:	4313      	orrs	r3, r2
 80258c0:	d00d      	beq.n	80258de <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80258c2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80258c6:	2b00      	cmp	r3, #0
 80258c8:	db09      	blt.n	80258de <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80258ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80258cc:	4293      	cmp	r3, r2
 80258ce:	da06      	bge.n	80258de <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80258d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80258d4:	429a      	cmp	r2, r3
 80258d6:	d80d      	bhi.n	80258f4 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 80258d8:	2301      	movs	r3, #1
 80258da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80258de:	68a0      	ldr	r0, [r4, #8]
 80258e0:	b138      	cbz	r0, 80258f2 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 80258e2:	4620      	mov	r0, r4
 80258e4:	f7ff ffd3 	bl	802588e <_ZN8touchgfx7Outline9sortCellsEv>
 80258e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80258ea:	f023 0302 	bic.w	r3, r3, #2
 80258ee:	63e3      	str	r3, [r4, #60]	; 0x3c
 80258f0:	68e0      	ldr	r0, [r4, #12]
 80258f2:	bd10      	pop	{r4, pc}
 80258f4:	f104 0314 	add.w	r3, r4, #20
 80258f8:	6922      	ldr	r2, [r4, #16]
 80258fa:	cb03      	ldmia	r3!, {r0, r1}
 80258fc:	6010      	str	r0, [r2, #0]
 80258fe:	6051      	str	r1, [r2, #4]
 8025900:	6923      	ldr	r3, [r4, #16]
 8025902:	3308      	adds	r3, #8
 8025904:	6123      	str	r3, [r4, #16]
 8025906:	68a3      	ldr	r3, [r4, #8]
 8025908:	3301      	adds	r3, #1
 802590a:	60a3      	str	r3, [r4, #8]
 802590c:	e7e7      	b.n	80258de <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802590e <_ZN8touchgfx8ScanlineD1Ev>:
 802590e:	4770      	bx	lr

08025910 <_ZN8touchgfx8ScanlineD0Ev>:
 8025910:	b510      	push	{r4, lr}
 8025912:	4604      	mov	r4, r0
 8025914:	2124      	movs	r1, #36	; 0x24
 8025916:	f000 f887 	bl	8025a28 <_ZdlPvj>
 802591a:	4620      	mov	r0, r4
 802591c:	bd10      	pop	{r4, pc}

0802591e <_ZN8touchgfx8Scanline5resetEv>:
 802591e:	b510      	push	{r4, lr}
 8025920:	4604      	mov	r4, r0
 8025922:	f7f2 ff33 	bl	801878c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8025926:	61a0      	str	r0, [r4, #24]
 8025928:	f7f2 ff36 	bl	8018798 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802592c:	61e0      	str	r0, [r4, #28]
 802592e:	f7f2 ff39 	bl	80187a4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8025932:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025936:	6220      	str	r0, [r4, #32]
 8025938:	6160      	str	r0, [r4, #20]
 802593a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802593e:	69e3      	ldr	r3, [r4, #28]
 8025940:	6123      	str	r3, [r4, #16]
 8025942:	2300      	movs	r3, #0
 8025944:	60e3      	str	r3, [r4, #12]
 8025946:	bd10      	pop	{r4, pc}

08025948 <_ZN8touchgfx8ScanlineC1Ev>:
 8025948:	4b07      	ldr	r3, [pc, #28]	; (8025968 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802594a:	b510      	push	{r4, lr}
 802594c:	6003      	str	r3, [r0, #0]
 802594e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025952:	4604      	mov	r4, r0
 8025954:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025958:	2300      	movs	r3, #0
 802595a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802595e:	6143      	str	r3, [r0, #20]
 8025960:	f7ff ffdd 	bl	802591e <_ZN8touchgfx8Scanline5resetEv>
 8025964:	4620      	mov	r0, r4
 8025966:	bd10      	pop	{r4, pc}
 8025968:	0802bc28 	.word	0x0802bc28

0802596c <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025970:	1e0c      	subs	r4, r1, #0
 8025972:	4605      	mov	r5, r0
 8025974:	4617      	mov	r7, r2
 8025976:	461e      	mov	r6, r3
 8025978:	da03      	bge.n	8025982 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802597a:	4426      	add	r6, r4
 802597c:	2e01      	cmp	r6, #1
 802597e:	d421      	bmi.n	80259c4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025980:	2400      	movs	r4, #0
 8025982:	f7f2 fefd 	bl	8018780 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025986:	42a0      	cmp	r0, r4
 8025988:	d91c      	bls.n	80259c4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802598a:	eb04 0806 	add.w	r8, r4, r6
 802598e:	f7f2 fef7 	bl	8018780 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025992:	4580      	cmp	r8, r0
 8025994:	d902      	bls.n	802599c <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8025996:	f7f2 fef3 	bl	8018780 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802599a:	1b06      	subs	r6, r0, r4
 802599c:	69a8      	ldr	r0, [r5, #24]
 802599e:	4632      	mov	r2, r6
 80259a0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80259a4:	4420      	add	r0, r4
 80259a6:	f7f4 fc53 	bl	801a250 <_ZN8touchgfx6memsetEPvhm>
 80259aa:	686b      	ldr	r3, [r5, #4]
 80259ac:	b2b2      	uxth	r2, r6
 80259ae:	3301      	adds	r3, #1
 80259b0:	42a3      	cmp	r3, r4
 80259b2:	696b      	ldr	r3, [r5, #20]
 80259b4:	d108      	bne.n	80259c8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80259b6:	8819      	ldrh	r1, [r3, #0]
 80259b8:	440a      	add	r2, r1
 80259ba:	801a      	strh	r2, [r3, #0]
 80259bc:	3c01      	subs	r4, #1
 80259be:	4434      	add	r4, r6
 80259c0:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80259c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80259c8:	1c99      	adds	r1, r3, #2
 80259ca:	6169      	str	r1, [r5, #20]
 80259cc:	805a      	strh	r2, [r3, #2]
 80259ce:	692b      	ldr	r3, [r5, #16]
 80259d0:	1c9a      	adds	r2, r3, #2
 80259d2:	612a      	str	r2, [r5, #16]
 80259d4:	805c      	strh	r4, [r3, #2]
 80259d6:	68eb      	ldr	r3, [r5, #12]
 80259d8:	3301      	adds	r3, #1
 80259da:	60eb      	str	r3, [r5, #12]
 80259dc:	e7ee      	b.n	80259bc <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

080259de <_ZN8touchgfx15RenderingBufferD1Ev>:
 80259de:	4770      	bx	lr

080259e0 <_ZN8touchgfx15RenderingBufferD0Ev>:
 80259e0:	b510      	push	{r4, lr}
 80259e2:	4604      	mov	r4, r0
 80259e4:	2118      	movs	r1, #24
 80259e6:	f000 f81f 	bl	8025a28 <_ZdlPvj>
 80259ea:	4620      	mov	r0, r4
 80259ec:	bd10      	pop	{r4, pc}
	...

080259f0 <_ZN8touchgfx15RenderingBufferC1Ev>:
 80259f0:	4a04      	ldr	r2, [pc, #16]	; (8025a04 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 80259f2:	6002      	str	r2, [r0, #0]
 80259f4:	2200      	movs	r2, #0
 80259f6:	6042      	str	r2, [r0, #4]
 80259f8:	7202      	strb	r2, [r0, #8]
 80259fa:	6142      	str	r2, [r0, #20]
 80259fc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8025a00:	4770      	bx	lr
 8025a02:	bf00      	nop
 8025a04:	0802bc38 	.word	0x0802bc38

08025a08 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025a08:	60c3      	str	r3, [r0, #12]
 8025a0a:	9b00      	ldr	r3, [sp, #0]
 8025a0c:	6041      	str	r1, [r0, #4]
 8025a0e:	6103      	str	r3, [r0, #16]
 8025a10:	9b01      	ldr	r3, [sp, #4]
 8025a12:	7202      	strb	r2, [r0, #8]
 8025a14:	6143      	str	r3, [r0, #20]
 8025a16:	4770      	bx	lr

08025a18 <__aeabi_atexit>:
 8025a18:	460b      	mov	r3, r1
 8025a1a:	4601      	mov	r1, r0
 8025a1c:	4618      	mov	r0, r3
 8025a1e:	f000 b853 	b.w	8025ac8 <__cxa_atexit>

08025a22 <__cxa_pure_virtual>:
 8025a22:	b508      	push	{r3, lr}
 8025a24:	f000 f820 	bl	8025a68 <_ZSt9terminatev>

08025a28 <_ZdlPvj>:
 8025a28:	f000 b80f 	b.w	8025a4a <_ZdlPv>

08025a2c <__cxa_guard_acquire>:
 8025a2c:	6803      	ldr	r3, [r0, #0]
 8025a2e:	07db      	lsls	r3, r3, #31
 8025a30:	d406      	bmi.n	8025a40 <__cxa_guard_acquire+0x14>
 8025a32:	7843      	ldrb	r3, [r0, #1]
 8025a34:	b103      	cbz	r3, 8025a38 <__cxa_guard_acquire+0xc>
 8025a36:	deff      	udf	#255	; 0xff
 8025a38:	2301      	movs	r3, #1
 8025a3a:	7043      	strb	r3, [r0, #1]
 8025a3c:	4618      	mov	r0, r3
 8025a3e:	4770      	bx	lr
 8025a40:	2000      	movs	r0, #0
 8025a42:	4770      	bx	lr

08025a44 <__cxa_guard_release>:
 8025a44:	2301      	movs	r3, #1
 8025a46:	6003      	str	r3, [r0, #0]
 8025a48:	4770      	bx	lr

08025a4a <_ZdlPv>:
 8025a4a:	f000 b88f 	b.w	8025b6c <free>

08025a4e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025a4e:	b508      	push	{r3, lr}
 8025a50:	4780      	blx	r0
 8025a52:	f000 f80e 	bl	8025a72 <abort>
	...

08025a58 <_ZSt13get_terminatev>:
 8025a58:	4b02      	ldr	r3, [pc, #8]	; (8025a64 <_ZSt13get_terminatev+0xc>)
 8025a5a:	6818      	ldr	r0, [r3, #0]
 8025a5c:	f3bf 8f5b 	dmb	ish
 8025a60:	4770      	bx	lr
 8025a62:	bf00      	nop
 8025a64:	20000094 	.word	0x20000094

08025a68 <_ZSt9terminatev>:
 8025a68:	b508      	push	{r3, lr}
 8025a6a:	f7ff fff5 	bl	8025a58 <_ZSt13get_terminatev>
 8025a6e:	f7ff ffee 	bl	8025a4e <_ZN10__cxxabiv111__terminateEPFvvE>

08025a72 <abort>:
 8025a72:	b508      	push	{r3, lr}
 8025a74:	2006      	movs	r0, #6
 8025a76:	f000 fc71 	bl	802635c <raise>
 8025a7a:	2001      	movs	r0, #1
 8025a7c:	f7dc fefc 	bl	8002878 <_exit>

08025a80 <__assert_func>:
 8025a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025a82:	461c      	mov	r4, r3
 8025a84:	4b09      	ldr	r3, [pc, #36]	; (8025aac <__assert_func+0x2c>)
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	4605      	mov	r5, r0
 8025a8a:	68d8      	ldr	r0, [r3, #12]
 8025a8c:	b152      	cbz	r2, 8025aa4 <__assert_func+0x24>
 8025a8e:	4b08      	ldr	r3, [pc, #32]	; (8025ab0 <__assert_func+0x30>)
 8025a90:	9100      	str	r1, [sp, #0]
 8025a92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8025a96:	4907      	ldr	r1, [pc, #28]	; (8025ab4 <__assert_func+0x34>)
 8025a98:	462b      	mov	r3, r5
 8025a9a:	4622      	mov	r2, r4
 8025a9c:	f000 f828 	bl	8025af0 <fiprintf>
 8025aa0:	f7ff ffe7 	bl	8025a72 <abort>
 8025aa4:	4b04      	ldr	r3, [pc, #16]	; (8025ab8 <__assert_func+0x38>)
 8025aa6:	461a      	mov	r2, r3
 8025aa8:	e7f2      	b.n	8025a90 <__assert_func+0x10>
 8025aaa:	bf00      	nop
 8025aac:	20000098 	.word	0x20000098
 8025ab0:	0802bc40 	.word	0x0802bc40
 8025ab4:	0802bc4d 	.word	0x0802bc4d
 8025ab8:	0802bc7b 	.word	0x0802bc7b

08025abc <atexit>:
 8025abc:	2300      	movs	r3, #0
 8025abe:	4601      	mov	r1, r0
 8025ac0:	461a      	mov	r2, r3
 8025ac2:	4618      	mov	r0, r3
 8025ac4:	f000 bd26 	b.w	8026514 <__register_exitproc>

08025ac8 <__cxa_atexit>:
 8025ac8:	b510      	push	{r4, lr}
 8025aca:	4c05      	ldr	r4, [pc, #20]	; (8025ae0 <__cxa_atexit+0x18>)
 8025acc:	4613      	mov	r3, r2
 8025ace:	b12c      	cbz	r4, 8025adc <__cxa_atexit+0x14>
 8025ad0:	460a      	mov	r2, r1
 8025ad2:	4601      	mov	r1, r0
 8025ad4:	2002      	movs	r0, #2
 8025ad6:	f000 fd1d 	bl	8026514 <__register_exitproc>
 8025ada:	bd10      	pop	{r4, pc}
 8025adc:	4620      	mov	r0, r4
 8025ade:	e7fc      	b.n	8025ada <__cxa_atexit+0x12>
 8025ae0:	08026515 	.word	0x08026515

08025ae4 <__errno>:
 8025ae4:	4b01      	ldr	r3, [pc, #4]	; (8025aec <__errno+0x8>)
 8025ae6:	6818      	ldr	r0, [r3, #0]
 8025ae8:	4770      	bx	lr
 8025aea:	bf00      	nop
 8025aec:	20000098 	.word	0x20000098

08025af0 <fiprintf>:
 8025af0:	b40e      	push	{r1, r2, r3}
 8025af2:	b503      	push	{r0, r1, lr}
 8025af4:	4601      	mov	r1, r0
 8025af6:	ab03      	add	r3, sp, #12
 8025af8:	4805      	ldr	r0, [pc, #20]	; (8025b10 <fiprintf+0x20>)
 8025afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8025afe:	6800      	ldr	r0, [r0, #0]
 8025b00:	9301      	str	r3, [sp, #4]
 8025b02:	f000 f921 	bl	8025d48 <_vfiprintf_r>
 8025b06:	b002      	add	sp, #8
 8025b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8025b0c:	b003      	add	sp, #12
 8025b0e:	4770      	bx	lr
 8025b10:	20000098 	.word	0x20000098

08025b14 <__libc_init_array>:
 8025b14:	b570      	push	{r4, r5, r6, lr}
 8025b16:	4e0d      	ldr	r6, [pc, #52]	; (8025b4c <__libc_init_array+0x38>)
 8025b18:	4c0d      	ldr	r4, [pc, #52]	; (8025b50 <__libc_init_array+0x3c>)
 8025b1a:	1ba4      	subs	r4, r4, r6
 8025b1c:	10a4      	asrs	r4, r4, #2
 8025b1e:	2500      	movs	r5, #0
 8025b20:	42a5      	cmp	r5, r4
 8025b22:	d109      	bne.n	8025b38 <__libc_init_array+0x24>
 8025b24:	4e0b      	ldr	r6, [pc, #44]	; (8025b54 <__libc_init_array+0x40>)
 8025b26:	4c0c      	ldr	r4, [pc, #48]	; (8025b58 <__libc_init_array+0x44>)
 8025b28:	f000 ffe4 	bl	8026af4 <_init>
 8025b2c:	1ba4      	subs	r4, r4, r6
 8025b2e:	10a4      	asrs	r4, r4, #2
 8025b30:	2500      	movs	r5, #0
 8025b32:	42a5      	cmp	r5, r4
 8025b34:	d105      	bne.n	8025b42 <__libc_init_array+0x2e>
 8025b36:	bd70      	pop	{r4, r5, r6, pc}
 8025b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025b3c:	4798      	blx	r3
 8025b3e:	3501      	adds	r5, #1
 8025b40:	e7ee      	b.n	8025b20 <__libc_init_array+0xc>
 8025b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025b46:	4798      	blx	r3
 8025b48:	3501      	adds	r5, #1
 8025b4a:	e7f2      	b.n	8025b32 <__libc_init_array+0x1e>
 8025b4c:	080e1758 	.word	0x080e1758
 8025b50:	080e1758 	.word	0x080e1758
 8025b54:	080e1758 	.word	0x080e1758
 8025b58:	080e176c 	.word	0x080e176c

08025b5c <malloc>:
 8025b5c:	4b02      	ldr	r3, [pc, #8]	; (8025b68 <malloc+0xc>)
 8025b5e:	4601      	mov	r1, r0
 8025b60:	6818      	ldr	r0, [r3, #0]
 8025b62:	f000 b86d 	b.w	8025c40 <_malloc_r>
 8025b66:	bf00      	nop
 8025b68:	20000098 	.word	0x20000098

08025b6c <free>:
 8025b6c:	4b02      	ldr	r3, [pc, #8]	; (8025b78 <free+0xc>)
 8025b6e:	4601      	mov	r1, r0
 8025b70:	6818      	ldr	r0, [r3, #0]
 8025b72:	f000 b817 	b.w	8025ba4 <_free_r>
 8025b76:	bf00      	nop
 8025b78:	20000098 	.word	0x20000098

08025b7c <memcpy>:
 8025b7c:	b510      	push	{r4, lr}
 8025b7e:	1e43      	subs	r3, r0, #1
 8025b80:	440a      	add	r2, r1
 8025b82:	4291      	cmp	r1, r2
 8025b84:	d100      	bne.n	8025b88 <memcpy+0xc>
 8025b86:	bd10      	pop	{r4, pc}
 8025b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025b90:	e7f7      	b.n	8025b82 <memcpy+0x6>

08025b92 <memset>:
 8025b92:	4402      	add	r2, r0
 8025b94:	4603      	mov	r3, r0
 8025b96:	4293      	cmp	r3, r2
 8025b98:	d100      	bne.n	8025b9c <memset+0xa>
 8025b9a:	4770      	bx	lr
 8025b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8025ba0:	e7f9      	b.n	8025b96 <memset+0x4>
	...

08025ba4 <_free_r>:
 8025ba4:	b538      	push	{r3, r4, r5, lr}
 8025ba6:	4605      	mov	r5, r0
 8025ba8:	2900      	cmp	r1, #0
 8025baa:	d045      	beq.n	8025c38 <_free_r+0x94>
 8025bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025bb0:	1f0c      	subs	r4, r1, #4
 8025bb2:	2b00      	cmp	r3, #0
 8025bb4:	bfb8      	it	lt
 8025bb6:	18e4      	addlt	r4, r4, r3
 8025bb8:	f000 feee 	bl	8026998 <__malloc_lock>
 8025bbc:	4a1f      	ldr	r2, [pc, #124]	; (8025c3c <_free_r+0x98>)
 8025bbe:	6813      	ldr	r3, [r2, #0]
 8025bc0:	4610      	mov	r0, r2
 8025bc2:	b933      	cbnz	r3, 8025bd2 <_free_r+0x2e>
 8025bc4:	6063      	str	r3, [r4, #4]
 8025bc6:	6014      	str	r4, [r2, #0]
 8025bc8:	4628      	mov	r0, r5
 8025bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025bce:	f000 bee4 	b.w	802699a <__malloc_unlock>
 8025bd2:	42a3      	cmp	r3, r4
 8025bd4:	d90c      	bls.n	8025bf0 <_free_r+0x4c>
 8025bd6:	6821      	ldr	r1, [r4, #0]
 8025bd8:	1862      	adds	r2, r4, r1
 8025bda:	4293      	cmp	r3, r2
 8025bdc:	bf04      	itt	eq
 8025bde:	681a      	ldreq	r2, [r3, #0]
 8025be0:	685b      	ldreq	r3, [r3, #4]
 8025be2:	6063      	str	r3, [r4, #4]
 8025be4:	bf04      	itt	eq
 8025be6:	1852      	addeq	r2, r2, r1
 8025be8:	6022      	streq	r2, [r4, #0]
 8025bea:	6004      	str	r4, [r0, #0]
 8025bec:	e7ec      	b.n	8025bc8 <_free_r+0x24>
 8025bee:	4613      	mov	r3, r2
 8025bf0:	685a      	ldr	r2, [r3, #4]
 8025bf2:	b10a      	cbz	r2, 8025bf8 <_free_r+0x54>
 8025bf4:	42a2      	cmp	r2, r4
 8025bf6:	d9fa      	bls.n	8025bee <_free_r+0x4a>
 8025bf8:	6819      	ldr	r1, [r3, #0]
 8025bfa:	1858      	adds	r0, r3, r1
 8025bfc:	42a0      	cmp	r0, r4
 8025bfe:	d10b      	bne.n	8025c18 <_free_r+0x74>
 8025c00:	6820      	ldr	r0, [r4, #0]
 8025c02:	4401      	add	r1, r0
 8025c04:	1858      	adds	r0, r3, r1
 8025c06:	4282      	cmp	r2, r0
 8025c08:	6019      	str	r1, [r3, #0]
 8025c0a:	d1dd      	bne.n	8025bc8 <_free_r+0x24>
 8025c0c:	6810      	ldr	r0, [r2, #0]
 8025c0e:	6852      	ldr	r2, [r2, #4]
 8025c10:	605a      	str	r2, [r3, #4]
 8025c12:	4401      	add	r1, r0
 8025c14:	6019      	str	r1, [r3, #0]
 8025c16:	e7d7      	b.n	8025bc8 <_free_r+0x24>
 8025c18:	d902      	bls.n	8025c20 <_free_r+0x7c>
 8025c1a:	230c      	movs	r3, #12
 8025c1c:	602b      	str	r3, [r5, #0]
 8025c1e:	e7d3      	b.n	8025bc8 <_free_r+0x24>
 8025c20:	6820      	ldr	r0, [r4, #0]
 8025c22:	1821      	adds	r1, r4, r0
 8025c24:	428a      	cmp	r2, r1
 8025c26:	bf04      	itt	eq
 8025c28:	6811      	ldreq	r1, [r2, #0]
 8025c2a:	6852      	ldreq	r2, [r2, #4]
 8025c2c:	6062      	str	r2, [r4, #4]
 8025c2e:	bf04      	itt	eq
 8025c30:	1809      	addeq	r1, r1, r0
 8025c32:	6021      	streq	r1, [r4, #0]
 8025c34:	605c      	str	r4, [r3, #4]
 8025c36:	e7c7      	b.n	8025bc8 <_free_r+0x24>
 8025c38:	bd38      	pop	{r3, r4, r5, pc}
 8025c3a:	bf00      	nop
 8025c3c:	2000b4e4 	.word	0x2000b4e4

08025c40 <_malloc_r>:
 8025c40:	b570      	push	{r4, r5, r6, lr}
 8025c42:	1ccd      	adds	r5, r1, #3
 8025c44:	f025 0503 	bic.w	r5, r5, #3
 8025c48:	3508      	adds	r5, #8
 8025c4a:	2d0c      	cmp	r5, #12
 8025c4c:	bf38      	it	cc
 8025c4e:	250c      	movcc	r5, #12
 8025c50:	2d00      	cmp	r5, #0
 8025c52:	4606      	mov	r6, r0
 8025c54:	db01      	blt.n	8025c5a <_malloc_r+0x1a>
 8025c56:	42a9      	cmp	r1, r5
 8025c58:	d903      	bls.n	8025c62 <_malloc_r+0x22>
 8025c5a:	230c      	movs	r3, #12
 8025c5c:	6033      	str	r3, [r6, #0]
 8025c5e:	2000      	movs	r0, #0
 8025c60:	bd70      	pop	{r4, r5, r6, pc}
 8025c62:	f000 fe99 	bl	8026998 <__malloc_lock>
 8025c66:	4a21      	ldr	r2, [pc, #132]	; (8025cec <_malloc_r+0xac>)
 8025c68:	6814      	ldr	r4, [r2, #0]
 8025c6a:	4621      	mov	r1, r4
 8025c6c:	b991      	cbnz	r1, 8025c94 <_malloc_r+0x54>
 8025c6e:	4c20      	ldr	r4, [pc, #128]	; (8025cf0 <_malloc_r+0xb0>)
 8025c70:	6823      	ldr	r3, [r4, #0]
 8025c72:	b91b      	cbnz	r3, 8025c7c <_malloc_r+0x3c>
 8025c74:	4630      	mov	r0, r6
 8025c76:	f000 fb39 	bl	80262ec <_sbrk_r>
 8025c7a:	6020      	str	r0, [r4, #0]
 8025c7c:	4629      	mov	r1, r5
 8025c7e:	4630      	mov	r0, r6
 8025c80:	f000 fb34 	bl	80262ec <_sbrk_r>
 8025c84:	1c43      	adds	r3, r0, #1
 8025c86:	d124      	bne.n	8025cd2 <_malloc_r+0x92>
 8025c88:	230c      	movs	r3, #12
 8025c8a:	6033      	str	r3, [r6, #0]
 8025c8c:	4630      	mov	r0, r6
 8025c8e:	f000 fe84 	bl	802699a <__malloc_unlock>
 8025c92:	e7e4      	b.n	8025c5e <_malloc_r+0x1e>
 8025c94:	680b      	ldr	r3, [r1, #0]
 8025c96:	1b5b      	subs	r3, r3, r5
 8025c98:	d418      	bmi.n	8025ccc <_malloc_r+0x8c>
 8025c9a:	2b0b      	cmp	r3, #11
 8025c9c:	d90f      	bls.n	8025cbe <_malloc_r+0x7e>
 8025c9e:	600b      	str	r3, [r1, #0]
 8025ca0:	50cd      	str	r5, [r1, r3]
 8025ca2:	18cc      	adds	r4, r1, r3
 8025ca4:	4630      	mov	r0, r6
 8025ca6:	f000 fe78 	bl	802699a <__malloc_unlock>
 8025caa:	f104 000b 	add.w	r0, r4, #11
 8025cae:	1d23      	adds	r3, r4, #4
 8025cb0:	f020 0007 	bic.w	r0, r0, #7
 8025cb4:	1ac3      	subs	r3, r0, r3
 8025cb6:	d0d3      	beq.n	8025c60 <_malloc_r+0x20>
 8025cb8:	425a      	negs	r2, r3
 8025cba:	50e2      	str	r2, [r4, r3]
 8025cbc:	e7d0      	b.n	8025c60 <_malloc_r+0x20>
 8025cbe:	428c      	cmp	r4, r1
 8025cc0:	684b      	ldr	r3, [r1, #4]
 8025cc2:	bf16      	itet	ne
 8025cc4:	6063      	strne	r3, [r4, #4]
 8025cc6:	6013      	streq	r3, [r2, #0]
 8025cc8:	460c      	movne	r4, r1
 8025cca:	e7eb      	b.n	8025ca4 <_malloc_r+0x64>
 8025ccc:	460c      	mov	r4, r1
 8025cce:	6849      	ldr	r1, [r1, #4]
 8025cd0:	e7cc      	b.n	8025c6c <_malloc_r+0x2c>
 8025cd2:	1cc4      	adds	r4, r0, #3
 8025cd4:	f024 0403 	bic.w	r4, r4, #3
 8025cd8:	42a0      	cmp	r0, r4
 8025cda:	d005      	beq.n	8025ce8 <_malloc_r+0xa8>
 8025cdc:	1a21      	subs	r1, r4, r0
 8025cde:	4630      	mov	r0, r6
 8025ce0:	f000 fb04 	bl	80262ec <_sbrk_r>
 8025ce4:	3001      	adds	r0, #1
 8025ce6:	d0cf      	beq.n	8025c88 <_malloc_r+0x48>
 8025ce8:	6025      	str	r5, [r4, #0]
 8025cea:	e7db      	b.n	8025ca4 <_malloc_r+0x64>
 8025cec:	2000b4e4 	.word	0x2000b4e4
 8025cf0:	2000b4e8 	.word	0x2000b4e8

08025cf4 <__sfputc_r>:
 8025cf4:	6893      	ldr	r3, [r2, #8]
 8025cf6:	3b01      	subs	r3, #1
 8025cf8:	2b00      	cmp	r3, #0
 8025cfa:	b410      	push	{r4}
 8025cfc:	6093      	str	r3, [r2, #8]
 8025cfe:	da08      	bge.n	8025d12 <__sfputc_r+0x1e>
 8025d00:	6994      	ldr	r4, [r2, #24]
 8025d02:	42a3      	cmp	r3, r4
 8025d04:	db01      	blt.n	8025d0a <__sfputc_r+0x16>
 8025d06:	290a      	cmp	r1, #10
 8025d08:	d103      	bne.n	8025d12 <__sfputc_r+0x1e>
 8025d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025d0e:	f000 bb41 	b.w	8026394 <__swbuf_r>
 8025d12:	6813      	ldr	r3, [r2, #0]
 8025d14:	1c58      	adds	r0, r3, #1
 8025d16:	6010      	str	r0, [r2, #0]
 8025d18:	7019      	strb	r1, [r3, #0]
 8025d1a:	4608      	mov	r0, r1
 8025d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025d20:	4770      	bx	lr

08025d22 <__sfputs_r>:
 8025d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d24:	4606      	mov	r6, r0
 8025d26:	460f      	mov	r7, r1
 8025d28:	4614      	mov	r4, r2
 8025d2a:	18d5      	adds	r5, r2, r3
 8025d2c:	42ac      	cmp	r4, r5
 8025d2e:	d101      	bne.n	8025d34 <__sfputs_r+0x12>
 8025d30:	2000      	movs	r0, #0
 8025d32:	e007      	b.n	8025d44 <__sfputs_r+0x22>
 8025d34:	463a      	mov	r2, r7
 8025d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d3a:	4630      	mov	r0, r6
 8025d3c:	f7ff ffda 	bl	8025cf4 <__sfputc_r>
 8025d40:	1c43      	adds	r3, r0, #1
 8025d42:	d1f3      	bne.n	8025d2c <__sfputs_r+0xa>
 8025d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025d48 <_vfiprintf_r>:
 8025d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d4c:	460c      	mov	r4, r1
 8025d4e:	b09d      	sub	sp, #116	; 0x74
 8025d50:	4617      	mov	r7, r2
 8025d52:	461d      	mov	r5, r3
 8025d54:	4606      	mov	r6, r0
 8025d56:	b118      	cbz	r0, 8025d60 <_vfiprintf_r+0x18>
 8025d58:	6983      	ldr	r3, [r0, #24]
 8025d5a:	b90b      	cbnz	r3, 8025d60 <_vfiprintf_r+0x18>
 8025d5c:	f000 fd2e 	bl	80267bc <__sinit>
 8025d60:	4b7c      	ldr	r3, [pc, #496]	; (8025f54 <_vfiprintf_r+0x20c>)
 8025d62:	429c      	cmp	r4, r3
 8025d64:	d158      	bne.n	8025e18 <_vfiprintf_r+0xd0>
 8025d66:	6874      	ldr	r4, [r6, #4]
 8025d68:	89a3      	ldrh	r3, [r4, #12]
 8025d6a:	0718      	lsls	r0, r3, #28
 8025d6c:	d55e      	bpl.n	8025e2c <_vfiprintf_r+0xe4>
 8025d6e:	6923      	ldr	r3, [r4, #16]
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	d05b      	beq.n	8025e2c <_vfiprintf_r+0xe4>
 8025d74:	2300      	movs	r3, #0
 8025d76:	9309      	str	r3, [sp, #36]	; 0x24
 8025d78:	2320      	movs	r3, #32
 8025d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025d7e:	2330      	movs	r3, #48	; 0x30
 8025d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025d84:	9503      	str	r5, [sp, #12]
 8025d86:	f04f 0b01 	mov.w	fp, #1
 8025d8a:	46b8      	mov	r8, r7
 8025d8c:	4645      	mov	r5, r8
 8025d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025d92:	b10b      	cbz	r3, 8025d98 <_vfiprintf_r+0x50>
 8025d94:	2b25      	cmp	r3, #37	; 0x25
 8025d96:	d154      	bne.n	8025e42 <_vfiprintf_r+0xfa>
 8025d98:	ebb8 0a07 	subs.w	sl, r8, r7
 8025d9c:	d00b      	beq.n	8025db6 <_vfiprintf_r+0x6e>
 8025d9e:	4653      	mov	r3, sl
 8025da0:	463a      	mov	r2, r7
 8025da2:	4621      	mov	r1, r4
 8025da4:	4630      	mov	r0, r6
 8025da6:	f7ff ffbc 	bl	8025d22 <__sfputs_r>
 8025daa:	3001      	adds	r0, #1
 8025dac:	f000 80c2 	beq.w	8025f34 <_vfiprintf_r+0x1ec>
 8025db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025db2:	4453      	add	r3, sl
 8025db4:	9309      	str	r3, [sp, #36]	; 0x24
 8025db6:	f898 3000 	ldrb.w	r3, [r8]
 8025dba:	2b00      	cmp	r3, #0
 8025dbc:	f000 80ba 	beq.w	8025f34 <_vfiprintf_r+0x1ec>
 8025dc0:	2300      	movs	r3, #0
 8025dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8025dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025dca:	9304      	str	r3, [sp, #16]
 8025dcc:	9307      	str	r3, [sp, #28]
 8025dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8025dd4:	46a8      	mov	r8, r5
 8025dd6:	2205      	movs	r2, #5
 8025dd8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025ddc:	485e      	ldr	r0, [pc, #376]	; (8025f58 <_vfiprintf_r+0x210>)
 8025dde:	f7da fa17 	bl	8000210 <memchr>
 8025de2:	9b04      	ldr	r3, [sp, #16]
 8025de4:	bb78      	cbnz	r0, 8025e46 <_vfiprintf_r+0xfe>
 8025de6:	06d9      	lsls	r1, r3, #27
 8025de8:	bf44      	itt	mi
 8025dea:	2220      	movmi	r2, #32
 8025dec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025df0:	071a      	lsls	r2, r3, #28
 8025df2:	bf44      	itt	mi
 8025df4:	222b      	movmi	r2, #43	; 0x2b
 8025df6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025dfa:	782a      	ldrb	r2, [r5, #0]
 8025dfc:	2a2a      	cmp	r2, #42	; 0x2a
 8025dfe:	d02a      	beq.n	8025e56 <_vfiprintf_r+0x10e>
 8025e00:	9a07      	ldr	r2, [sp, #28]
 8025e02:	46a8      	mov	r8, r5
 8025e04:	2000      	movs	r0, #0
 8025e06:	250a      	movs	r5, #10
 8025e08:	4641      	mov	r1, r8
 8025e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025e0e:	3b30      	subs	r3, #48	; 0x30
 8025e10:	2b09      	cmp	r3, #9
 8025e12:	d969      	bls.n	8025ee8 <_vfiprintf_r+0x1a0>
 8025e14:	b360      	cbz	r0, 8025e70 <_vfiprintf_r+0x128>
 8025e16:	e024      	b.n	8025e62 <_vfiprintf_r+0x11a>
 8025e18:	4b50      	ldr	r3, [pc, #320]	; (8025f5c <_vfiprintf_r+0x214>)
 8025e1a:	429c      	cmp	r4, r3
 8025e1c:	d101      	bne.n	8025e22 <_vfiprintf_r+0xda>
 8025e1e:	68b4      	ldr	r4, [r6, #8]
 8025e20:	e7a2      	b.n	8025d68 <_vfiprintf_r+0x20>
 8025e22:	4b4f      	ldr	r3, [pc, #316]	; (8025f60 <_vfiprintf_r+0x218>)
 8025e24:	429c      	cmp	r4, r3
 8025e26:	bf08      	it	eq
 8025e28:	68f4      	ldreq	r4, [r6, #12]
 8025e2a:	e79d      	b.n	8025d68 <_vfiprintf_r+0x20>
 8025e2c:	4621      	mov	r1, r4
 8025e2e:	4630      	mov	r0, r6
 8025e30:	f000 fb02 	bl	8026438 <__swsetup_r>
 8025e34:	2800      	cmp	r0, #0
 8025e36:	d09d      	beq.n	8025d74 <_vfiprintf_r+0x2c>
 8025e38:	f04f 30ff 	mov.w	r0, #4294967295
 8025e3c:	b01d      	add	sp, #116	; 0x74
 8025e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e42:	46a8      	mov	r8, r5
 8025e44:	e7a2      	b.n	8025d8c <_vfiprintf_r+0x44>
 8025e46:	4a44      	ldr	r2, [pc, #272]	; (8025f58 <_vfiprintf_r+0x210>)
 8025e48:	1a80      	subs	r0, r0, r2
 8025e4a:	fa0b f000 	lsl.w	r0, fp, r0
 8025e4e:	4318      	orrs	r0, r3
 8025e50:	9004      	str	r0, [sp, #16]
 8025e52:	4645      	mov	r5, r8
 8025e54:	e7be      	b.n	8025dd4 <_vfiprintf_r+0x8c>
 8025e56:	9a03      	ldr	r2, [sp, #12]
 8025e58:	1d11      	adds	r1, r2, #4
 8025e5a:	6812      	ldr	r2, [r2, #0]
 8025e5c:	9103      	str	r1, [sp, #12]
 8025e5e:	2a00      	cmp	r2, #0
 8025e60:	db01      	blt.n	8025e66 <_vfiprintf_r+0x11e>
 8025e62:	9207      	str	r2, [sp, #28]
 8025e64:	e004      	b.n	8025e70 <_vfiprintf_r+0x128>
 8025e66:	4252      	negs	r2, r2
 8025e68:	f043 0302 	orr.w	r3, r3, #2
 8025e6c:	9207      	str	r2, [sp, #28]
 8025e6e:	9304      	str	r3, [sp, #16]
 8025e70:	f898 3000 	ldrb.w	r3, [r8]
 8025e74:	2b2e      	cmp	r3, #46	; 0x2e
 8025e76:	d10e      	bne.n	8025e96 <_vfiprintf_r+0x14e>
 8025e78:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8025e7e:	d138      	bne.n	8025ef2 <_vfiprintf_r+0x1aa>
 8025e80:	9b03      	ldr	r3, [sp, #12]
 8025e82:	1d1a      	adds	r2, r3, #4
 8025e84:	681b      	ldr	r3, [r3, #0]
 8025e86:	9203      	str	r2, [sp, #12]
 8025e88:	2b00      	cmp	r3, #0
 8025e8a:	bfb8      	it	lt
 8025e8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8025e90:	f108 0802 	add.w	r8, r8, #2
 8025e94:	9305      	str	r3, [sp, #20]
 8025e96:	4d33      	ldr	r5, [pc, #204]	; (8025f64 <_vfiprintf_r+0x21c>)
 8025e98:	f898 1000 	ldrb.w	r1, [r8]
 8025e9c:	2203      	movs	r2, #3
 8025e9e:	4628      	mov	r0, r5
 8025ea0:	f7da f9b6 	bl	8000210 <memchr>
 8025ea4:	b140      	cbz	r0, 8025eb8 <_vfiprintf_r+0x170>
 8025ea6:	2340      	movs	r3, #64	; 0x40
 8025ea8:	1b40      	subs	r0, r0, r5
 8025eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8025eae:	9b04      	ldr	r3, [sp, #16]
 8025eb0:	4303      	orrs	r3, r0
 8025eb2:	f108 0801 	add.w	r8, r8, #1
 8025eb6:	9304      	str	r3, [sp, #16]
 8025eb8:	f898 1000 	ldrb.w	r1, [r8]
 8025ebc:	482a      	ldr	r0, [pc, #168]	; (8025f68 <_vfiprintf_r+0x220>)
 8025ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025ec2:	2206      	movs	r2, #6
 8025ec4:	f108 0701 	add.w	r7, r8, #1
 8025ec8:	f7da f9a2 	bl	8000210 <memchr>
 8025ecc:	2800      	cmp	r0, #0
 8025ece:	d037      	beq.n	8025f40 <_vfiprintf_r+0x1f8>
 8025ed0:	4b26      	ldr	r3, [pc, #152]	; (8025f6c <_vfiprintf_r+0x224>)
 8025ed2:	bb1b      	cbnz	r3, 8025f1c <_vfiprintf_r+0x1d4>
 8025ed4:	9b03      	ldr	r3, [sp, #12]
 8025ed6:	3307      	adds	r3, #7
 8025ed8:	f023 0307 	bic.w	r3, r3, #7
 8025edc:	3308      	adds	r3, #8
 8025ede:	9303      	str	r3, [sp, #12]
 8025ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ee2:	444b      	add	r3, r9
 8025ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8025ee6:	e750      	b.n	8025d8a <_vfiprintf_r+0x42>
 8025ee8:	fb05 3202 	mla	r2, r5, r2, r3
 8025eec:	2001      	movs	r0, #1
 8025eee:	4688      	mov	r8, r1
 8025ef0:	e78a      	b.n	8025e08 <_vfiprintf_r+0xc0>
 8025ef2:	2300      	movs	r3, #0
 8025ef4:	f108 0801 	add.w	r8, r8, #1
 8025ef8:	9305      	str	r3, [sp, #20]
 8025efa:	4619      	mov	r1, r3
 8025efc:	250a      	movs	r5, #10
 8025efe:	4640      	mov	r0, r8
 8025f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025f04:	3a30      	subs	r2, #48	; 0x30
 8025f06:	2a09      	cmp	r2, #9
 8025f08:	d903      	bls.n	8025f12 <_vfiprintf_r+0x1ca>
 8025f0a:	2b00      	cmp	r3, #0
 8025f0c:	d0c3      	beq.n	8025e96 <_vfiprintf_r+0x14e>
 8025f0e:	9105      	str	r1, [sp, #20]
 8025f10:	e7c1      	b.n	8025e96 <_vfiprintf_r+0x14e>
 8025f12:	fb05 2101 	mla	r1, r5, r1, r2
 8025f16:	2301      	movs	r3, #1
 8025f18:	4680      	mov	r8, r0
 8025f1a:	e7f0      	b.n	8025efe <_vfiprintf_r+0x1b6>
 8025f1c:	ab03      	add	r3, sp, #12
 8025f1e:	9300      	str	r3, [sp, #0]
 8025f20:	4622      	mov	r2, r4
 8025f22:	4b13      	ldr	r3, [pc, #76]	; (8025f70 <_vfiprintf_r+0x228>)
 8025f24:	a904      	add	r1, sp, #16
 8025f26:	4630      	mov	r0, r6
 8025f28:	f3af 8000 	nop.w
 8025f2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025f30:	4681      	mov	r9, r0
 8025f32:	d1d5      	bne.n	8025ee0 <_vfiprintf_r+0x198>
 8025f34:	89a3      	ldrh	r3, [r4, #12]
 8025f36:	065b      	lsls	r3, r3, #25
 8025f38:	f53f af7e 	bmi.w	8025e38 <_vfiprintf_r+0xf0>
 8025f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025f3e:	e77d      	b.n	8025e3c <_vfiprintf_r+0xf4>
 8025f40:	ab03      	add	r3, sp, #12
 8025f42:	9300      	str	r3, [sp, #0]
 8025f44:	4622      	mov	r2, r4
 8025f46:	4b0a      	ldr	r3, [pc, #40]	; (8025f70 <_vfiprintf_r+0x228>)
 8025f48:	a904      	add	r1, sp, #16
 8025f4a:	4630      	mov	r0, r6
 8025f4c:	f000 f888 	bl	8026060 <_printf_i>
 8025f50:	e7ec      	b.n	8025f2c <_vfiprintf_r+0x1e4>
 8025f52:	bf00      	nop
 8025f54:	0802bcd8 	.word	0x0802bcd8
 8025f58:	0802bc80 	.word	0x0802bc80
 8025f5c:	0802bcf8 	.word	0x0802bcf8
 8025f60:	0802bcb8 	.word	0x0802bcb8
 8025f64:	0802bc86 	.word	0x0802bc86
 8025f68:	0802bc8a 	.word	0x0802bc8a
 8025f6c:	00000000 	.word	0x00000000
 8025f70:	08025d23 	.word	0x08025d23

08025f74 <_printf_common>:
 8025f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025f78:	4691      	mov	r9, r2
 8025f7a:	461f      	mov	r7, r3
 8025f7c:	688a      	ldr	r2, [r1, #8]
 8025f7e:	690b      	ldr	r3, [r1, #16]
 8025f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025f84:	4293      	cmp	r3, r2
 8025f86:	bfb8      	it	lt
 8025f88:	4613      	movlt	r3, r2
 8025f8a:	f8c9 3000 	str.w	r3, [r9]
 8025f8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025f92:	4606      	mov	r6, r0
 8025f94:	460c      	mov	r4, r1
 8025f96:	b112      	cbz	r2, 8025f9e <_printf_common+0x2a>
 8025f98:	3301      	adds	r3, #1
 8025f9a:	f8c9 3000 	str.w	r3, [r9]
 8025f9e:	6823      	ldr	r3, [r4, #0]
 8025fa0:	0699      	lsls	r1, r3, #26
 8025fa2:	bf42      	ittt	mi
 8025fa4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025fa8:	3302      	addmi	r3, #2
 8025faa:	f8c9 3000 	strmi.w	r3, [r9]
 8025fae:	6825      	ldr	r5, [r4, #0]
 8025fb0:	f015 0506 	ands.w	r5, r5, #6
 8025fb4:	d107      	bne.n	8025fc6 <_printf_common+0x52>
 8025fb6:	f104 0a19 	add.w	sl, r4, #25
 8025fba:	68e3      	ldr	r3, [r4, #12]
 8025fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8025fc0:	1a9b      	subs	r3, r3, r2
 8025fc2:	42ab      	cmp	r3, r5
 8025fc4:	dc28      	bgt.n	8026018 <_printf_common+0xa4>
 8025fc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025fca:	6822      	ldr	r2, [r4, #0]
 8025fcc:	3300      	adds	r3, #0
 8025fce:	bf18      	it	ne
 8025fd0:	2301      	movne	r3, #1
 8025fd2:	0692      	lsls	r2, r2, #26
 8025fd4:	d42d      	bmi.n	8026032 <_printf_common+0xbe>
 8025fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025fda:	4639      	mov	r1, r7
 8025fdc:	4630      	mov	r0, r6
 8025fde:	47c0      	blx	r8
 8025fe0:	3001      	adds	r0, #1
 8025fe2:	d020      	beq.n	8026026 <_printf_common+0xb2>
 8025fe4:	6823      	ldr	r3, [r4, #0]
 8025fe6:	68e5      	ldr	r5, [r4, #12]
 8025fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8025fec:	f003 0306 	and.w	r3, r3, #6
 8025ff0:	2b04      	cmp	r3, #4
 8025ff2:	bf08      	it	eq
 8025ff4:	1aad      	subeq	r5, r5, r2
 8025ff6:	68a3      	ldr	r3, [r4, #8]
 8025ff8:	6922      	ldr	r2, [r4, #16]
 8025ffa:	bf0c      	ite	eq
 8025ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026000:	2500      	movne	r5, #0
 8026002:	4293      	cmp	r3, r2
 8026004:	bfc4      	itt	gt
 8026006:	1a9b      	subgt	r3, r3, r2
 8026008:	18ed      	addgt	r5, r5, r3
 802600a:	f04f 0900 	mov.w	r9, #0
 802600e:	341a      	adds	r4, #26
 8026010:	454d      	cmp	r5, r9
 8026012:	d11a      	bne.n	802604a <_printf_common+0xd6>
 8026014:	2000      	movs	r0, #0
 8026016:	e008      	b.n	802602a <_printf_common+0xb6>
 8026018:	2301      	movs	r3, #1
 802601a:	4652      	mov	r2, sl
 802601c:	4639      	mov	r1, r7
 802601e:	4630      	mov	r0, r6
 8026020:	47c0      	blx	r8
 8026022:	3001      	adds	r0, #1
 8026024:	d103      	bne.n	802602e <_printf_common+0xba>
 8026026:	f04f 30ff 	mov.w	r0, #4294967295
 802602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802602e:	3501      	adds	r5, #1
 8026030:	e7c3      	b.n	8025fba <_printf_common+0x46>
 8026032:	18e1      	adds	r1, r4, r3
 8026034:	1c5a      	adds	r2, r3, #1
 8026036:	2030      	movs	r0, #48	; 0x30
 8026038:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802603c:	4422      	add	r2, r4
 802603e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026042:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026046:	3302      	adds	r3, #2
 8026048:	e7c5      	b.n	8025fd6 <_printf_common+0x62>
 802604a:	2301      	movs	r3, #1
 802604c:	4622      	mov	r2, r4
 802604e:	4639      	mov	r1, r7
 8026050:	4630      	mov	r0, r6
 8026052:	47c0      	blx	r8
 8026054:	3001      	adds	r0, #1
 8026056:	d0e6      	beq.n	8026026 <_printf_common+0xb2>
 8026058:	f109 0901 	add.w	r9, r9, #1
 802605c:	e7d8      	b.n	8026010 <_printf_common+0x9c>
	...

08026060 <_printf_i>:
 8026060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026064:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8026068:	460c      	mov	r4, r1
 802606a:	7e09      	ldrb	r1, [r1, #24]
 802606c:	b085      	sub	sp, #20
 802606e:	296e      	cmp	r1, #110	; 0x6e
 8026070:	4617      	mov	r7, r2
 8026072:	4606      	mov	r6, r0
 8026074:	4698      	mov	r8, r3
 8026076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026078:	f000 80b3 	beq.w	80261e2 <_printf_i+0x182>
 802607c:	d822      	bhi.n	80260c4 <_printf_i+0x64>
 802607e:	2963      	cmp	r1, #99	; 0x63
 8026080:	d036      	beq.n	80260f0 <_printf_i+0x90>
 8026082:	d80a      	bhi.n	802609a <_printf_i+0x3a>
 8026084:	2900      	cmp	r1, #0
 8026086:	f000 80b9 	beq.w	80261fc <_printf_i+0x19c>
 802608a:	2958      	cmp	r1, #88	; 0x58
 802608c:	f000 8083 	beq.w	8026196 <_printf_i+0x136>
 8026090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026094:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8026098:	e032      	b.n	8026100 <_printf_i+0xa0>
 802609a:	2964      	cmp	r1, #100	; 0x64
 802609c:	d001      	beq.n	80260a2 <_printf_i+0x42>
 802609e:	2969      	cmp	r1, #105	; 0x69
 80260a0:	d1f6      	bne.n	8026090 <_printf_i+0x30>
 80260a2:	6820      	ldr	r0, [r4, #0]
 80260a4:	6813      	ldr	r3, [r2, #0]
 80260a6:	0605      	lsls	r5, r0, #24
 80260a8:	f103 0104 	add.w	r1, r3, #4
 80260ac:	d52a      	bpl.n	8026104 <_printf_i+0xa4>
 80260ae:	681b      	ldr	r3, [r3, #0]
 80260b0:	6011      	str	r1, [r2, #0]
 80260b2:	2b00      	cmp	r3, #0
 80260b4:	da03      	bge.n	80260be <_printf_i+0x5e>
 80260b6:	222d      	movs	r2, #45	; 0x2d
 80260b8:	425b      	negs	r3, r3
 80260ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80260be:	486f      	ldr	r0, [pc, #444]	; (802627c <_printf_i+0x21c>)
 80260c0:	220a      	movs	r2, #10
 80260c2:	e039      	b.n	8026138 <_printf_i+0xd8>
 80260c4:	2973      	cmp	r1, #115	; 0x73
 80260c6:	f000 809d 	beq.w	8026204 <_printf_i+0x1a4>
 80260ca:	d808      	bhi.n	80260de <_printf_i+0x7e>
 80260cc:	296f      	cmp	r1, #111	; 0x6f
 80260ce:	d020      	beq.n	8026112 <_printf_i+0xb2>
 80260d0:	2970      	cmp	r1, #112	; 0x70
 80260d2:	d1dd      	bne.n	8026090 <_printf_i+0x30>
 80260d4:	6823      	ldr	r3, [r4, #0]
 80260d6:	f043 0320 	orr.w	r3, r3, #32
 80260da:	6023      	str	r3, [r4, #0]
 80260dc:	e003      	b.n	80260e6 <_printf_i+0x86>
 80260de:	2975      	cmp	r1, #117	; 0x75
 80260e0:	d017      	beq.n	8026112 <_printf_i+0xb2>
 80260e2:	2978      	cmp	r1, #120	; 0x78
 80260e4:	d1d4      	bne.n	8026090 <_printf_i+0x30>
 80260e6:	2378      	movs	r3, #120	; 0x78
 80260e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80260ec:	4864      	ldr	r0, [pc, #400]	; (8026280 <_printf_i+0x220>)
 80260ee:	e055      	b.n	802619c <_printf_i+0x13c>
 80260f0:	6813      	ldr	r3, [r2, #0]
 80260f2:	1d19      	adds	r1, r3, #4
 80260f4:	681b      	ldr	r3, [r3, #0]
 80260f6:	6011      	str	r1, [r2, #0]
 80260f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80260fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026100:	2301      	movs	r3, #1
 8026102:	e08c      	b.n	802621e <_printf_i+0x1be>
 8026104:	681b      	ldr	r3, [r3, #0]
 8026106:	6011      	str	r1, [r2, #0]
 8026108:	f010 0f40 	tst.w	r0, #64	; 0x40
 802610c:	bf18      	it	ne
 802610e:	b21b      	sxthne	r3, r3
 8026110:	e7cf      	b.n	80260b2 <_printf_i+0x52>
 8026112:	6813      	ldr	r3, [r2, #0]
 8026114:	6825      	ldr	r5, [r4, #0]
 8026116:	1d18      	adds	r0, r3, #4
 8026118:	6010      	str	r0, [r2, #0]
 802611a:	0628      	lsls	r0, r5, #24
 802611c:	d501      	bpl.n	8026122 <_printf_i+0xc2>
 802611e:	681b      	ldr	r3, [r3, #0]
 8026120:	e002      	b.n	8026128 <_printf_i+0xc8>
 8026122:	0668      	lsls	r0, r5, #25
 8026124:	d5fb      	bpl.n	802611e <_printf_i+0xbe>
 8026126:	881b      	ldrh	r3, [r3, #0]
 8026128:	4854      	ldr	r0, [pc, #336]	; (802627c <_printf_i+0x21c>)
 802612a:	296f      	cmp	r1, #111	; 0x6f
 802612c:	bf14      	ite	ne
 802612e:	220a      	movne	r2, #10
 8026130:	2208      	moveq	r2, #8
 8026132:	2100      	movs	r1, #0
 8026134:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026138:	6865      	ldr	r5, [r4, #4]
 802613a:	60a5      	str	r5, [r4, #8]
 802613c:	2d00      	cmp	r5, #0
 802613e:	f2c0 8095 	blt.w	802626c <_printf_i+0x20c>
 8026142:	6821      	ldr	r1, [r4, #0]
 8026144:	f021 0104 	bic.w	r1, r1, #4
 8026148:	6021      	str	r1, [r4, #0]
 802614a:	2b00      	cmp	r3, #0
 802614c:	d13d      	bne.n	80261ca <_printf_i+0x16a>
 802614e:	2d00      	cmp	r5, #0
 8026150:	f040 808e 	bne.w	8026270 <_printf_i+0x210>
 8026154:	4665      	mov	r5, ip
 8026156:	2a08      	cmp	r2, #8
 8026158:	d10b      	bne.n	8026172 <_printf_i+0x112>
 802615a:	6823      	ldr	r3, [r4, #0]
 802615c:	07db      	lsls	r3, r3, #31
 802615e:	d508      	bpl.n	8026172 <_printf_i+0x112>
 8026160:	6923      	ldr	r3, [r4, #16]
 8026162:	6862      	ldr	r2, [r4, #4]
 8026164:	429a      	cmp	r2, r3
 8026166:	bfde      	ittt	le
 8026168:	2330      	movle	r3, #48	; 0x30
 802616a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802616e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026172:	ebac 0305 	sub.w	r3, ip, r5
 8026176:	6123      	str	r3, [r4, #16]
 8026178:	f8cd 8000 	str.w	r8, [sp]
 802617c:	463b      	mov	r3, r7
 802617e:	aa03      	add	r2, sp, #12
 8026180:	4621      	mov	r1, r4
 8026182:	4630      	mov	r0, r6
 8026184:	f7ff fef6 	bl	8025f74 <_printf_common>
 8026188:	3001      	adds	r0, #1
 802618a:	d14d      	bne.n	8026228 <_printf_i+0x1c8>
 802618c:	f04f 30ff 	mov.w	r0, #4294967295
 8026190:	b005      	add	sp, #20
 8026192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026196:	4839      	ldr	r0, [pc, #228]	; (802627c <_printf_i+0x21c>)
 8026198:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802619c:	6813      	ldr	r3, [r2, #0]
 802619e:	6821      	ldr	r1, [r4, #0]
 80261a0:	1d1d      	adds	r5, r3, #4
 80261a2:	681b      	ldr	r3, [r3, #0]
 80261a4:	6015      	str	r5, [r2, #0]
 80261a6:	060a      	lsls	r2, r1, #24
 80261a8:	d50b      	bpl.n	80261c2 <_printf_i+0x162>
 80261aa:	07ca      	lsls	r2, r1, #31
 80261ac:	bf44      	itt	mi
 80261ae:	f041 0120 	orrmi.w	r1, r1, #32
 80261b2:	6021      	strmi	r1, [r4, #0]
 80261b4:	b91b      	cbnz	r3, 80261be <_printf_i+0x15e>
 80261b6:	6822      	ldr	r2, [r4, #0]
 80261b8:	f022 0220 	bic.w	r2, r2, #32
 80261bc:	6022      	str	r2, [r4, #0]
 80261be:	2210      	movs	r2, #16
 80261c0:	e7b7      	b.n	8026132 <_printf_i+0xd2>
 80261c2:	064d      	lsls	r5, r1, #25
 80261c4:	bf48      	it	mi
 80261c6:	b29b      	uxthmi	r3, r3
 80261c8:	e7ef      	b.n	80261aa <_printf_i+0x14a>
 80261ca:	4665      	mov	r5, ip
 80261cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80261d0:	fb02 3311 	mls	r3, r2, r1, r3
 80261d4:	5cc3      	ldrb	r3, [r0, r3]
 80261d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80261da:	460b      	mov	r3, r1
 80261dc:	2900      	cmp	r1, #0
 80261de:	d1f5      	bne.n	80261cc <_printf_i+0x16c>
 80261e0:	e7b9      	b.n	8026156 <_printf_i+0xf6>
 80261e2:	6813      	ldr	r3, [r2, #0]
 80261e4:	6825      	ldr	r5, [r4, #0]
 80261e6:	6961      	ldr	r1, [r4, #20]
 80261e8:	1d18      	adds	r0, r3, #4
 80261ea:	6010      	str	r0, [r2, #0]
 80261ec:	0628      	lsls	r0, r5, #24
 80261ee:	681b      	ldr	r3, [r3, #0]
 80261f0:	d501      	bpl.n	80261f6 <_printf_i+0x196>
 80261f2:	6019      	str	r1, [r3, #0]
 80261f4:	e002      	b.n	80261fc <_printf_i+0x19c>
 80261f6:	066a      	lsls	r2, r5, #25
 80261f8:	d5fb      	bpl.n	80261f2 <_printf_i+0x192>
 80261fa:	8019      	strh	r1, [r3, #0]
 80261fc:	2300      	movs	r3, #0
 80261fe:	6123      	str	r3, [r4, #16]
 8026200:	4665      	mov	r5, ip
 8026202:	e7b9      	b.n	8026178 <_printf_i+0x118>
 8026204:	6813      	ldr	r3, [r2, #0]
 8026206:	1d19      	adds	r1, r3, #4
 8026208:	6011      	str	r1, [r2, #0]
 802620a:	681d      	ldr	r5, [r3, #0]
 802620c:	6862      	ldr	r2, [r4, #4]
 802620e:	2100      	movs	r1, #0
 8026210:	4628      	mov	r0, r5
 8026212:	f7d9 fffd 	bl	8000210 <memchr>
 8026216:	b108      	cbz	r0, 802621c <_printf_i+0x1bc>
 8026218:	1b40      	subs	r0, r0, r5
 802621a:	6060      	str	r0, [r4, #4]
 802621c:	6863      	ldr	r3, [r4, #4]
 802621e:	6123      	str	r3, [r4, #16]
 8026220:	2300      	movs	r3, #0
 8026222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026226:	e7a7      	b.n	8026178 <_printf_i+0x118>
 8026228:	6923      	ldr	r3, [r4, #16]
 802622a:	462a      	mov	r2, r5
 802622c:	4639      	mov	r1, r7
 802622e:	4630      	mov	r0, r6
 8026230:	47c0      	blx	r8
 8026232:	3001      	adds	r0, #1
 8026234:	d0aa      	beq.n	802618c <_printf_i+0x12c>
 8026236:	6823      	ldr	r3, [r4, #0]
 8026238:	079b      	lsls	r3, r3, #30
 802623a:	d413      	bmi.n	8026264 <_printf_i+0x204>
 802623c:	68e0      	ldr	r0, [r4, #12]
 802623e:	9b03      	ldr	r3, [sp, #12]
 8026240:	4298      	cmp	r0, r3
 8026242:	bfb8      	it	lt
 8026244:	4618      	movlt	r0, r3
 8026246:	e7a3      	b.n	8026190 <_printf_i+0x130>
 8026248:	2301      	movs	r3, #1
 802624a:	464a      	mov	r2, r9
 802624c:	4639      	mov	r1, r7
 802624e:	4630      	mov	r0, r6
 8026250:	47c0      	blx	r8
 8026252:	3001      	adds	r0, #1
 8026254:	d09a      	beq.n	802618c <_printf_i+0x12c>
 8026256:	3501      	adds	r5, #1
 8026258:	68e3      	ldr	r3, [r4, #12]
 802625a:	9a03      	ldr	r2, [sp, #12]
 802625c:	1a9b      	subs	r3, r3, r2
 802625e:	42ab      	cmp	r3, r5
 8026260:	dcf2      	bgt.n	8026248 <_printf_i+0x1e8>
 8026262:	e7eb      	b.n	802623c <_printf_i+0x1dc>
 8026264:	2500      	movs	r5, #0
 8026266:	f104 0919 	add.w	r9, r4, #25
 802626a:	e7f5      	b.n	8026258 <_printf_i+0x1f8>
 802626c:	2b00      	cmp	r3, #0
 802626e:	d1ac      	bne.n	80261ca <_printf_i+0x16a>
 8026270:	7803      	ldrb	r3, [r0, #0]
 8026272:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026276:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802627a:	e76c      	b.n	8026156 <_printf_i+0xf6>
 802627c:	0802bc91 	.word	0x0802bc91
 8026280:	0802bca2 	.word	0x0802bca2

08026284 <rand>:
 8026284:	b538      	push	{r3, r4, r5, lr}
 8026286:	4b13      	ldr	r3, [pc, #76]	; (80262d4 <rand+0x50>)
 8026288:	681c      	ldr	r4, [r3, #0]
 802628a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802628c:	b97b      	cbnz	r3, 80262ae <rand+0x2a>
 802628e:	2018      	movs	r0, #24
 8026290:	f7ff fc64 	bl	8025b5c <malloc>
 8026294:	4a10      	ldr	r2, [pc, #64]	; (80262d8 <rand+0x54>)
 8026296:	4b11      	ldr	r3, [pc, #68]	; (80262dc <rand+0x58>)
 8026298:	63a0      	str	r0, [r4, #56]	; 0x38
 802629a:	e9c0 2300 	strd	r2, r3, [r0]
 802629e:	4b10      	ldr	r3, [pc, #64]	; (80262e0 <rand+0x5c>)
 80262a0:	6083      	str	r3, [r0, #8]
 80262a2:	230b      	movs	r3, #11
 80262a4:	8183      	strh	r3, [r0, #12]
 80262a6:	2201      	movs	r2, #1
 80262a8:	2300      	movs	r3, #0
 80262aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80262ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80262b0:	480c      	ldr	r0, [pc, #48]	; (80262e4 <rand+0x60>)
 80262b2:	690a      	ldr	r2, [r1, #16]
 80262b4:	694b      	ldr	r3, [r1, #20]
 80262b6:	4c0c      	ldr	r4, [pc, #48]	; (80262e8 <rand+0x64>)
 80262b8:	4350      	muls	r0, r2
 80262ba:	fb04 0003 	mla	r0, r4, r3, r0
 80262be:	fba2 2304 	umull	r2, r3, r2, r4
 80262c2:	4403      	add	r3, r0
 80262c4:	1c54      	adds	r4, r2, #1
 80262c6:	f143 0500 	adc.w	r5, r3, #0
 80262ca:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80262ce:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80262d2:	bd38      	pop	{r3, r4, r5, pc}
 80262d4:	20000098 	.word	0x20000098
 80262d8:	abcd330e 	.word	0xabcd330e
 80262dc:	e66d1234 	.word	0xe66d1234
 80262e0:	0005deec 	.word	0x0005deec
 80262e4:	5851f42d 	.word	0x5851f42d
 80262e8:	4c957f2d 	.word	0x4c957f2d

080262ec <_sbrk_r>:
 80262ec:	b538      	push	{r3, r4, r5, lr}
 80262ee:	4c06      	ldr	r4, [pc, #24]	; (8026308 <_sbrk_r+0x1c>)
 80262f0:	2300      	movs	r3, #0
 80262f2:	4605      	mov	r5, r0
 80262f4:	4608      	mov	r0, r1
 80262f6:	6023      	str	r3, [r4, #0]
 80262f8:	f7dc fb36 	bl	8002968 <_sbrk>
 80262fc:	1c43      	adds	r3, r0, #1
 80262fe:	d102      	bne.n	8026306 <_sbrk_r+0x1a>
 8026300:	6823      	ldr	r3, [r4, #0]
 8026302:	b103      	cbz	r3, 8026306 <_sbrk_r+0x1a>
 8026304:	602b      	str	r3, [r5, #0]
 8026306:	bd38      	pop	{r3, r4, r5, pc}
 8026308:	2000bba8 	.word	0x2000bba8

0802630c <_raise_r>:
 802630c:	291f      	cmp	r1, #31
 802630e:	b538      	push	{r3, r4, r5, lr}
 8026310:	4604      	mov	r4, r0
 8026312:	460d      	mov	r5, r1
 8026314:	d904      	bls.n	8026320 <_raise_r+0x14>
 8026316:	2316      	movs	r3, #22
 8026318:	6003      	str	r3, [r0, #0]
 802631a:	f04f 30ff 	mov.w	r0, #4294967295
 802631e:	bd38      	pop	{r3, r4, r5, pc}
 8026320:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026322:	b112      	cbz	r2, 802632a <_raise_r+0x1e>
 8026324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026328:	b94b      	cbnz	r3, 802633e <_raise_r+0x32>
 802632a:	4620      	mov	r0, r4
 802632c:	f000 f830 	bl	8026390 <_getpid_r>
 8026330:	462a      	mov	r2, r5
 8026332:	4601      	mov	r1, r0
 8026334:	4620      	mov	r0, r4
 8026336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802633a:	f000 b817 	b.w	802636c <_kill_r>
 802633e:	2b01      	cmp	r3, #1
 8026340:	d00a      	beq.n	8026358 <_raise_r+0x4c>
 8026342:	1c59      	adds	r1, r3, #1
 8026344:	d103      	bne.n	802634e <_raise_r+0x42>
 8026346:	2316      	movs	r3, #22
 8026348:	6003      	str	r3, [r0, #0]
 802634a:	2001      	movs	r0, #1
 802634c:	e7e7      	b.n	802631e <_raise_r+0x12>
 802634e:	2400      	movs	r4, #0
 8026350:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026354:	4628      	mov	r0, r5
 8026356:	4798      	blx	r3
 8026358:	2000      	movs	r0, #0
 802635a:	e7e0      	b.n	802631e <_raise_r+0x12>

0802635c <raise>:
 802635c:	4b02      	ldr	r3, [pc, #8]	; (8026368 <raise+0xc>)
 802635e:	4601      	mov	r1, r0
 8026360:	6818      	ldr	r0, [r3, #0]
 8026362:	f7ff bfd3 	b.w	802630c <_raise_r>
 8026366:	bf00      	nop
 8026368:	20000098 	.word	0x20000098

0802636c <_kill_r>:
 802636c:	b538      	push	{r3, r4, r5, lr}
 802636e:	4c07      	ldr	r4, [pc, #28]	; (802638c <_kill_r+0x20>)
 8026370:	2300      	movs	r3, #0
 8026372:	4605      	mov	r5, r0
 8026374:	4608      	mov	r0, r1
 8026376:	4611      	mov	r1, r2
 8026378:	6023      	str	r3, [r4, #0]
 802637a:	f7dc fa6d 	bl	8002858 <_kill>
 802637e:	1c43      	adds	r3, r0, #1
 8026380:	d102      	bne.n	8026388 <_kill_r+0x1c>
 8026382:	6823      	ldr	r3, [r4, #0]
 8026384:	b103      	cbz	r3, 8026388 <_kill_r+0x1c>
 8026386:	602b      	str	r3, [r5, #0]
 8026388:	bd38      	pop	{r3, r4, r5, pc}
 802638a:	bf00      	nop
 802638c:	2000bba8 	.word	0x2000bba8

08026390 <_getpid_r>:
 8026390:	f7dc ba5a 	b.w	8002848 <_getpid>

08026394 <__swbuf_r>:
 8026394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026396:	460e      	mov	r6, r1
 8026398:	4614      	mov	r4, r2
 802639a:	4605      	mov	r5, r0
 802639c:	b118      	cbz	r0, 80263a6 <__swbuf_r+0x12>
 802639e:	6983      	ldr	r3, [r0, #24]
 80263a0:	b90b      	cbnz	r3, 80263a6 <__swbuf_r+0x12>
 80263a2:	f000 fa0b 	bl	80267bc <__sinit>
 80263a6:	4b21      	ldr	r3, [pc, #132]	; (802642c <__swbuf_r+0x98>)
 80263a8:	429c      	cmp	r4, r3
 80263aa:	d12a      	bne.n	8026402 <__swbuf_r+0x6e>
 80263ac:	686c      	ldr	r4, [r5, #4]
 80263ae:	69a3      	ldr	r3, [r4, #24]
 80263b0:	60a3      	str	r3, [r4, #8]
 80263b2:	89a3      	ldrh	r3, [r4, #12]
 80263b4:	071a      	lsls	r2, r3, #28
 80263b6:	d52e      	bpl.n	8026416 <__swbuf_r+0x82>
 80263b8:	6923      	ldr	r3, [r4, #16]
 80263ba:	b363      	cbz	r3, 8026416 <__swbuf_r+0x82>
 80263bc:	6923      	ldr	r3, [r4, #16]
 80263be:	6820      	ldr	r0, [r4, #0]
 80263c0:	1ac0      	subs	r0, r0, r3
 80263c2:	6963      	ldr	r3, [r4, #20]
 80263c4:	b2f6      	uxtb	r6, r6
 80263c6:	4283      	cmp	r3, r0
 80263c8:	4637      	mov	r7, r6
 80263ca:	dc04      	bgt.n	80263d6 <__swbuf_r+0x42>
 80263cc:	4621      	mov	r1, r4
 80263ce:	4628      	mov	r0, r5
 80263d0:	f000 f98a 	bl	80266e8 <_fflush_r>
 80263d4:	bb28      	cbnz	r0, 8026422 <__swbuf_r+0x8e>
 80263d6:	68a3      	ldr	r3, [r4, #8]
 80263d8:	3b01      	subs	r3, #1
 80263da:	60a3      	str	r3, [r4, #8]
 80263dc:	6823      	ldr	r3, [r4, #0]
 80263de:	1c5a      	adds	r2, r3, #1
 80263e0:	6022      	str	r2, [r4, #0]
 80263e2:	701e      	strb	r6, [r3, #0]
 80263e4:	6963      	ldr	r3, [r4, #20]
 80263e6:	3001      	adds	r0, #1
 80263e8:	4283      	cmp	r3, r0
 80263ea:	d004      	beq.n	80263f6 <__swbuf_r+0x62>
 80263ec:	89a3      	ldrh	r3, [r4, #12]
 80263ee:	07db      	lsls	r3, r3, #31
 80263f0:	d519      	bpl.n	8026426 <__swbuf_r+0x92>
 80263f2:	2e0a      	cmp	r6, #10
 80263f4:	d117      	bne.n	8026426 <__swbuf_r+0x92>
 80263f6:	4621      	mov	r1, r4
 80263f8:	4628      	mov	r0, r5
 80263fa:	f000 f975 	bl	80266e8 <_fflush_r>
 80263fe:	b190      	cbz	r0, 8026426 <__swbuf_r+0x92>
 8026400:	e00f      	b.n	8026422 <__swbuf_r+0x8e>
 8026402:	4b0b      	ldr	r3, [pc, #44]	; (8026430 <__swbuf_r+0x9c>)
 8026404:	429c      	cmp	r4, r3
 8026406:	d101      	bne.n	802640c <__swbuf_r+0x78>
 8026408:	68ac      	ldr	r4, [r5, #8]
 802640a:	e7d0      	b.n	80263ae <__swbuf_r+0x1a>
 802640c:	4b09      	ldr	r3, [pc, #36]	; (8026434 <__swbuf_r+0xa0>)
 802640e:	429c      	cmp	r4, r3
 8026410:	bf08      	it	eq
 8026412:	68ec      	ldreq	r4, [r5, #12]
 8026414:	e7cb      	b.n	80263ae <__swbuf_r+0x1a>
 8026416:	4621      	mov	r1, r4
 8026418:	4628      	mov	r0, r5
 802641a:	f000 f80d 	bl	8026438 <__swsetup_r>
 802641e:	2800      	cmp	r0, #0
 8026420:	d0cc      	beq.n	80263bc <__swbuf_r+0x28>
 8026422:	f04f 37ff 	mov.w	r7, #4294967295
 8026426:	4638      	mov	r0, r7
 8026428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802642a:	bf00      	nop
 802642c:	0802bcd8 	.word	0x0802bcd8
 8026430:	0802bcf8 	.word	0x0802bcf8
 8026434:	0802bcb8 	.word	0x0802bcb8

08026438 <__swsetup_r>:
 8026438:	4b32      	ldr	r3, [pc, #200]	; (8026504 <__swsetup_r+0xcc>)
 802643a:	b570      	push	{r4, r5, r6, lr}
 802643c:	681d      	ldr	r5, [r3, #0]
 802643e:	4606      	mov	r6, r0
 8026440:	460c      	mov	r4, r1
 8026442:	b125      	cbz	r5, 802644e <__swsetup_r+0x16>
 8026444:	69ab      	ldr	r3, [r5, #24]
 8026446:	b913      	cbnz	r3, 802644e <__swsetup_r+0x16>
 8026448:	4628      	mov	r0, r5
 802644a:	f000 f9b7 	bl	80267bc <__sinit>
 802644e:	4b2e      	ldr	r3, [pc, #184]	; (8026508 <__swsetup_r+0xd0>)
 8026450:	429c      	cmp	r4, r3
 8026452:	d10f      	bne.n	8026474 <__swsetup_r+0x3c>
 8026454:	686c      	ldr	r4, [r5, #4]
 8026456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802645a:	b29a      	uxth	r2, r3
 802645c:	0715      	lsls	r5, r2, #28
 802645e:	d42c      	bmi.n	80264ba <__swsetup_r+0x82>
 8026460:	06d0      	lsls	r0, r2, #27
 8026462:	d411      	bmi.n	8026488 <__swsetup_r+0x50>
 8026464:	2209      	movs	r2, #9
 8026466:	6032      	str	r2, [r6, #0]
 8026468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802646c:	81a3      	strh	r3, [r4, #12]
 802646e:	f04f 30ff 	mov.w	r0, #4294967295
 8026472:	e03e      	b.n	80264f2 <__swsetup_r+0xba>
 8026474:	4b25      	ldr	r3, [pc, #148]	; (802650c <__swsetup_r+0xd4>)
 8026476:	429c      	cmp	r4, r3
 8026478:	d101      	bne.n	802647e <__swsetup_r+0x46>
 802647a:	68ac      	ldr	r4, [r5, #8]
 802647c:	e7eb      	b.n	8026456 <__swsetup_r+0x1e>
 802647e:	4b24      	ldr	r3, [pc, #144]	; (8026510 <__swsetup_r+0xd8>)
 8026480:	429c      	cmp	r4, r3
 8026482:	bf08      	it	eq
 8026484:	68ec      	ldreq	r4, [r5, #12]
 8026486:	e7e6      	b.n	8026456 <__swsetup_r+0x1e>
 8026488:	0751      	lsls	r1, r2, #29
 802648a:	d512      	bpl.n	80264b2 <__swsetup_r+0x7a>
 802648c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802648e:	b141      	cbz	r1, 80264a2 <__swsetup_r+0x6a>
 8026490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026494:	4299      	cmp	r1, r3
 8026496:	d002      	beq.n	802649e <__swsetup_r+0x66>
 8026498:	4630      	mov	r0, r6
 802649a:	f7ff fb83 	bl	8025ba4 <_free_r>
 802649e:	2300      	movs	r3, #0
 80264a0:	6363      	str	r3, [r4, #52]	; 0x34
 80264a2:	89a3      	ldrh	r3, [r4, #12]
 80264a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80264a8:	81a3      	strh	r3, [r4, #12]
 80264aa:	2300      	movs	r3, #0
 80264ac:	6063      	str	r3, [r4, #4]
 80264ae:	6923      	ldr	r3, [r4, #16]
 80264b0:	6023      	str	r3, [r4, #0]
 80264b2:	89a3      	ldrh	r3, [r4, #12]
 80264b4:	f043 0308 	orr.w	r3, r3, #8
 80264b8:	81a3      	strh	r3, [r4, #12]
 80264ba:	6923      	ldr	r3, [r4, #16]
 80264bc:	b94b      	cbnz	r3, 80264d2 <__swsetup_r+0x9a>
 80264be:	89a3      	ldrh	r3, [r4, #12]
 80264c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80264c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80264c8:	d003      	beq.n	80264d2 <__swsetup_r+0x9a>
 80264ca:	4621      	mov	r1, r4
 80264cc:	4630      	mov	r0, r6
 80264ce:	f000 fa23 	bl	8026918 <__smakebuf_r>
 80264d2:	89a2      	ldrh	r2, [r4, #12]
 80264d4:	f012 0301 	ands.w	r3, r2, #1
 80264d8:	d00c      	beq.n	80264f4 <__swsetup_r+0xbc>
 80264da:	2300      	movs	r3, #0
 80264dc:	60a3      	str	r3, [r4, #8]
 80264de:	6963      	ldr	r3, [r4, #20]
 80264e0:	425b      	negs	r3, r3
 80264e2:	61a3      	str	r3, [r4, #24]
 80264e4:	6923      	ldr	r3, [r4, #16]
 80264e6:	b953      	cbnz	r3, 80264fe <__swsetup_r+0xc6>
 80264e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80264ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80264f0:	d1ba      	bne.n	8026468 <__swsetup_r+0x30>
 80264f2:	bd70      	pop	{r4, r5, r6, pc}
 80264f4:	0792      	lsls	r2, r2, #30
 80264f6:	bf58      	it	pl
 80264f8:	6963      	ldrpl	r3, [r4, #20]
 80264fa:	60a3      	str	r3, [r4, #8]
 80264fc:	e7f2      	b.n	80264e4 <__swsetup_r+0xac>
 80264fe:	2000      	movs	r0, #0
 8026500:	e7f7      	b.n	80264f2 <__swsetup_r+0xba>
 8026502:	bf00      	nop
 8026504:	20000098 	.word	0x20000098
 8026508:	0802bcd8 	.word	0x0802bcd8
 802650c:	0802bcf8 	.word	0x0802bcf8
 8026510:	0802bcb8 	.word	0x0802bcb8

08026514 <__register_exitproc>:
 8026514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026518:	4d2c      	ldr	r5, [pc, #176]	; (80265cc <__register_exitproc+0xb8>)
 802651a:	682c      	ldr	r4, [r5, #0]
 802651c:	4607      	mov	r7, r0
 802651e:	460e      	mov	r6, r1
 8026520:	4691      	mov	r9, r2
 8026522:	4698      	mov	r8, r3
 8026524:	b934      	cbnz	r4, 8026534 <__register_exitproc+0x20>
 8026526:	4b2a      	ldr	r3, [pc, #168]	; (80265d0 <__register_exitproc+0xbc>)
 8026528:	4c2a      	ldr	r4, [pc, #168]	; (80265d4 <__register_exitproc+0xc0>)
 802652a:	602c      	str	r4, [r5, #0]
 802652c:	b113      	cbz	r3, 8026534 <__register_exitproc+0x20>
 802652e:	681b      	ldr	r3, [r3, #0]
 8026530:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026534:	6863      	ldr	r3, [r4, #4]
 8026536:	2b1f      	cmp	r3, #31
 8026538:	dd3d      	ble.n	80265b6 <__register_exitproc+0xa2>
 802653a:	4b27      	ldr	r3, [pc, #156]	; (80265d8 <__register_exitproc+0xc4>)
 802653c:	b91b      	cbnz	r3, 8026546 <__register_exitproc+0x32>
 802653e:	f04f 30ff 	mov.w	r0, #4294967295
 8026542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026546:	208c      	movs	r0, #140	; 0x8c
 8026548:	f7ff fb08 	bl	8025b5c <malloc>
 802654c:	4604      	mov	r4, r0
 802654e:	2800      	cmp	r0, #0
 8026550:	d0f5      	beq.n	802653e <__register_exitproc+0x2a>
 8026552:	2300      	movs	r3, #0
 8026554:	682a      	ldr	r2, [r5, #0]
 8026556:	6002      	str	r2, [r0, #0]
 8026558:	6043      	str	r3, [r0, #4]
 802655a:	6028      	str	r0, [r5, #0]
 802655c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8026560:	b30f      	cbz	r7, 80265a6 <__register_exitproc+0x92>
 8026562:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026566:	f7ff faf9 	bl	8025b5c <malloc>
 802656a:	2800      	cmp	r0, #0
 802656c:	d0e7      	beq.n	802653e <__register_exitproc+0x2a>
 802656e:	2300      	movs	r3, #0
 8026570:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026574:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8026578:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802657c:	6862      	ldr	r2, [r4, #4]
 802657e:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8026582:	2301      	movs	r3, #1
 8026584:	4093      	lsls	r3, r2
 8026586:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802658a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802658e:	431a      	orrs	r2, r3
 8026590:	2f02      	cmp	r7, #2
 8026592:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8026596:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802659a:	bf02      	ittt	eq
 802659c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80265a0:	4313      	orreq	r3, r2
 80265a2:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80265a6:	6863      	ldr	r3, [r4, #4]
 80265a8:	1c5a      	adds	r2, r3, #1
 80265aa:	3302      	adds	r3, #2
 80265ac:	6062      	str	r2, [r4, #4]
 80265ae:	2000      	movs	r0, #0
 80265b0:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80265b4:	e7c5      	b.n	8026542 <__register_exitproc+0x2e>
 80265b6:	2f00      	cmp	r7, #0
 80265b8:	d0f5      	beq.n	80265a6 <__register_exitproc+0x92>
 80265ba:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80265be:	2800      	cmp	r0, #0
 80265c0:	d1dc      	bne.n	802657c <__register_exitproc+0x68>
 80265c2:	4b05      	ldr	r3, [pc, #20]	; (80265d8 <__register_exitproc+0xc4>)
 80265c4:	2b00      	cmp	r3, #0
 80265c6:	d0ba      	beq.n	802653e <__register_exitproc+0x2a>
 80265c8:	e7cb      	b.n	8026562 <__register_exitproc+0x4e>
 80265ca:	bf00      	nop
 80265cc:	2000b680 	.word	0x2000b680
 80265d0:	0802bcb4 	.word	0x0802bcb4
 80265d4:	2000b5f4 	.word	0x2000b5f4
 80265d8:	08025b5d 	.word	0x08025b5d

080265dc <__sflush_r>:
 80265dc:	898a      	ldrh	r2, [r1, #12]
 80265de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80265e2:	4605      	mov	r5, r0
 80265e4:	0710      	lsls	r0, r2, #28
 80265e6:	460c      	mov	r4, r1
 80265e8:	d458      	bmi.n	802669c <__sflush_r+0xc0>
 80265ea:	684b      	ldr	r3, [r1, #4]
 80265ec:	2b00      	cmp	r3, #0
 80265ee:	dc05      	bgt.n	80265fc <__sflush_r+0x20>
 80265f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80265f2:	2b00      	cmp	r3, #0
 80265f4:	dc02      	bgt.n	80265fc <__sflush_r+0x20>
 80265f6:	2000      	movs	r0, #0
 80265f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80265fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80265fe:	2e00      	cmp	r6, #0
 8026600:	d0f9      	beq.n	80265f6 <__sflush_r+0x1a>
 8026602:	2300      	movs	r3, #0
 8026604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026608:	682f      	ldr	r7, [r5, #0]
 802660a:	6a21      	ldr	r1, [r4, #32]
 802660c:	602b      	str	r3, [r5, #0]
 802660e:	d032      	beq.n	8026676 <__sflush_r+0x9a>
 8026610:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026612:	89a3      	ldrh	r3, [r4, #12]
 8026614:	075a      	lsls	r2, r3, #29
 8026616:	d505      	bpl.n	8026624 <__sflush_r+0x48>
 8026618:	6863      	ldr	r3, [r4, #4]
 802661a:	1ac0      	subs	r0, r0, r3
 802661c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802661e:	b10b      	cbz	r3, 8026624 <__sflush_r+0x48>
 8026620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026622:	1ac0      	subs	r0, r0, r3
 8026624:	2300      	movs	r3, #0
 8026626:	4602      	mov	r2, r0
 8026628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802662a:	6a21      	ldr	r1, [r4, #32]
 802662c:	4628      	mov	r0, r5
 802662e:	47b0      	blx	r6
 8026630:	1c43      	adds	r3, r0, #1
 8026632:	89a3      	ldrh	r3, [r4, #12]
 8026634:	d106      	bne.n	8026644 <__sflush_r+0x68>
 8026636:	6829      	ldr	r1, [r5, #0]
 8026638:	291d      	cmp	r1, #29
 802663a:	d848      	bhi.n	80266ce <__sflush_r+0xf2>
 802663c:	4a29      	ldr	r2, [pc, #164]	; (80266e4 <__sflush_r+0x108>)
 802663e:	40ca      	lsrs	r2, r1
 8026640:	07d6      	lsls	r6, r2, #31
 8026642:	d544      	bpl.n	80266ce <__sflush_r+0xf2>
 8026644:	2200      	movs	r2, #0
 8026646:	6062      	str	r2, [r4, #4]
 8026648:	04d9      	lsls	r1, r3, #19
 802664a:	6922      	ldr	r2, [r4, #16]
 802664c:	6022      	str	r2, [r4, #0]
 802664e:	d504      	bpl.n	802665a <__sflush_r+0x7e>
 8026650:	1c42      	adds	r2, r0, #1
 8026652:	d101      	bne.n	8026658 <__sflush_r+0x7c>
 8026654:	682b      	ldr	r3, [r5, #0]
 8026656:	b903      	cbnz	r3, 802665a <__sflush_r+0x7e>
 8026658:	6560      	str	r0, [r4, #84]	; 0x54
 802665a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802665c:	602f      	str	r7, [r5, #0]
 802665e:	2900      	cmp	r1, #0
 8026660:	d0c9      	beq.n	80265f6 <__sflush_r+0x1a>
 8026662:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026666:	4299      	cmp	r1, r3
 8026668:	d002      	beq.n	8026670 <__sflush_r+0x94>
 802666a:	4628      	mov	r0, r5
 802666c:	f7ff fa9a 	bl	8025ba4 <_free_r>
 8026670:	2000      	movs	r0, #0
 8026672:	6360      	str	r0, [r4, #52]	; 0x34
 8026674:	e7c0      	b.n	80265f8 <__sflush_r+0x1c>
 8026676:	2301      	movs	r3, #1
 8026678:	4628      	mov	r0, r5
 802667a:	47b0      	blx	r6
 802667c:	1c41      	adds	r1, r0, #1
 802667e:	d1c8      	bne.n	8026612 <__sflush_r+0x36>
 8026680:	682b      	ldr	r3, [r5, #0]
 8026682:	2b00      	cmp	r3, #0
 8026684:	d0c5      	beq.n	8026612 <__sflush_r+0x36>
 8026686:	2b1d      	cmp	r3, #29
 8026688:	d001      	beq.n	802668e <__sflush_r+0xb2>
 802668a:	2b16      	cmp	r3, #22
 802668c:	d101      	bne.n	8026692 <__sflush_r+0xb6>
 802668e:	602f      	str	r7, [r5, #0]
 8026690:	e7b1      	b.n	80265f6 <__sflush_r+0x1a>
 8026692:	89a3      	ldrh	r3, [r4, #12]
 8026694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026698:	81a3      	strh	r3, [r4, #12]
 802669a:	e7ad      	b.n	80265f8 <__sflush_r+0x1c>
 802669c:	690f      	ldr	r7, [r1, #16]
 802669e:	2f00      	cmp	r7, #0
 80266a0:	d0a9      	beq.n	80265f6 <__sflush_r+0x1a>
 80266a2:	0793      	lsls	r3, r2, #30
 80266a4:	680e      	ldr	r6, [r1, #0]
 80266a6:	bf08      	it	eq
 80266a8:	694b      	ldreq	r3, [r1, #20]
 80266aa:	600f      	str	r7, [r1, #0]
 80266ac:	bf18      	it	ne
 80266ae:	2300      	movne	r3, #0
 80266b0:	eba6 0807 	sub.w	r8, r6, r7
 80266b4:	608b      	str	r3, [r1, #8]
 80266b6:	f1b8 0f00 	cmp.w	r8, #0
 80266ba:	dd9c      	ble.n	80265f6 <__sflush_r+0x1a>
 80266bc:	4643      	mov	r3, r8
 80266be:	463a      	mov	r2, r7
 80266c0:	6a21      	ldr	r1, [r4, #32]
 80266c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80266c4:	4628      	mov	r0, r5
 80266c6:	47b0      	blx	r6
 80266c8:	2800      	cmp	r0, #0
 80266ca:	dc06      	bgt.n	80266da <__sflush_r+0xfe>
 80266cc:	89a3      	ldrh	r3, [r4, #12]
 80266ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80266d2:	81a3      	strh	r3, [r4, #12]
 80266d4:	f04f 30ff 	mov.w	r0, #4294967295
 80266d8:	e78e      	b.n	80265f8 <__sflush_r+0x1c>
 80266da:	4407      	add	r7, r0
 80266dc:	eba8 0800 	sub.w	r8, r8, r0
 80266e0:	e7e9      	b.n	80266b6 <__sflush_r+0xda>
 80266e2:	bf00      	nop
 80266e4:	20400001 	.word	0x20400001

080266e8 <_fflush_r>:
 80266e8:	b538      	push	{r3, r4, r5, lr}
 80266ea:	690b      	ldr	r3, [r1, #16]
 80266ec:	4605      	mov	r5, r0
 80266ee:	460c      	mov	r4, r1
 80266f0:	b1db      	cbz	r3, 802672a <_fflush_r+0x42>
 80266f2:	b118      	cbz	r0, 80266fc <_fflush_r+0x14>
 80266f4:	6983      	ldr	r3, [r0, #24]
 80266f6:	b90b      	cbnz	r3, 80266fc <_fflush_r+0x14>
 80266f8:	f000 f860 	bl	80267bc <__sinit>
 80266fc:	4b0c      	ldr	r3, [pc, #48]	; (8026730 <_fflush_r+0x48>)
 80266fe:	429c      	cmp	r4, r3
 8026700:	d109      	bne.n	8026716 <_fflush_r+0x2e>
 8026702:	686c      	ldr	r4, [r5, #4]
 8026704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026708:	b17b      	cbz	r3, 802672a <_fflush_r+0x42>
 802670a:	4621      	mov	r1, r4
 802670c:	4628      	mov	r0, r5
 802670e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026712:	f7ff bf63 	b.w	80265dc <__sflush_r>
 8026716:	4b07      	ldr	r3, [pc, #28]	; (8026734 <_fflush_r+0x4c>)
 8026718:	429c      	cmp	r4, r3
 802671a:	d101      	bne.n	8026720 <_fflush_r+0x38>
 802671c:	68ac      	ldr	r4, [r5, #8]
 802671e:	e7f1      	b.n	8026704 <_fflush_r+0x1c>
 8026720:	4b05      	ldr	r3, [pc, #20]	; (8026738 <_fflush_r+0x50>)
 8026722:	429c      	cmp	r4, r3
 8026724:	bf08      	it	eq
 8026726:	68ec      	ldreq	r4, [r5, #12]
 8026728:	e7ec      	b.n	8026704 <_fflush_r+0x1c>
 802672a:	2000      	movs	r0, #0
 802672c:	bd38      	pop	{r3, r4, r5, pc}
 802672e:	bf00      	nop
 8026730:	0802bcd8 	.word	0x0802bcd8
 8026734:	0802bcf8 	.word	0x0802bcf8
 8026738:	0802bcb8 	.word	0x0802bcb8

0802673c <std>:
 802673c:	2300      	movs	r3, #0
 802673e:	b510      	push	{r4, lr}
 8026740:	4604      	mov	r4, r0
 8026742:	e9c0 3300 	strd	r3, r3, [r0]
 8026746:	6083      	str	r3, [r0, #8]
 8026748:	8181      	strh	r1, [r0, #12]
 802674a:	6643      	str	r3, [r0, #100]	; 0x64
 802674c:	81c2      	strh	r2, [r0, #14]
 802674e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026752:	6183      	str	r3, [r0, #24]
 8026754:	4619      	mov	r1, r3
 8026756:	2208      	movs	r2, #8
 8026758:	305c      	adds	r0, #92	; 0x5c
 802675a:	f7ff fa1a 	bl	8025b92 <memset>
 802675e:	4b05      	ldr	r3, [pc, #20]	; (8026774 <std+0x38>)
 8026760:	6263      	str	r3, [r4, #36]	; 0x24
 8026762:	4b05      	ldr	r3, [pc, #20]	; (8026778 <std+0x3c>)
 8026764:	62a3      	str	r3, [r4, #40]	; 0x28
 8026766:	4b05      	ldr	r3, [pc, #20]	; (802677c <std+0x40>)
 8026768:	62e3      	str	r3, [r4, #44]	; 0x2c
 802676a:	4b05      	ldr	r3, [pc, #20]	; (8026780 <std+0x44>)
 802676c:	6224      	str	r4, [r4, #32]
 802676e:	6323      	str	r3, [r4, #48]	; 0x30
 8026770:	bd10      	pop	{r4, pc}
 8026772:	bf00      	nop
 8026774:	0802699d 	.word	0x0802699d
 8026778:	080269bf 	.word	0x080269bf
 802677c:	080269f7 	.word	0x080269f7
 8026780:	08026a1b 	.word	0x08026a1b

08026784 <_cleanup_r>:
 8026784:	4901      	ldr	r1, [pc, #4]	; (802678c <_cleanup_r+0x8>)
 8026786:	f000 b885 	b.w	8026894 <_fwalk_reent>
 802678a:	bf00      	nop
 802678c:	080266e9 	.word	0x080266e9

08026790 <__sfmoreglue>:
 8026790:	b570      	push	{r4, r5, r6, lr}
 8026792:	1e4a      	subs	r2, r1, #1
 8026794:	2568      	movs	r5, #104	; 0x68
 8026796:	4355      	muls	r5, r2
 8026798:	460e      	mov	r6, r1
 802679a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802679e:	f7ff fa4f 	bl	8025c40 <_malloc_r>
 80267a2:	4604      	mov	r4, r0
 80267a4:	b140      	cbz	r0, 80267b8 <__sfmoreglue+0x28>
 80267a6:	2100      	movs	r1, #0
 80267a8:	e9c0 1600 	strd	r1, r6, [r0]
 80267ac:	300c      	adds	r0, #12
 80267ae:	60a0      	str	r0, [r4, #8]
 80267b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80267b4:	f7ff f9ed 	bl	8025b92 <memset>
 80267b8:	4620      	mov	r0, r4
 80267ba:	bd70      	pop	{r4, r5, r6, pc}

080267bc <__sinit>:
 80267bc:	6983      	ldr	r3, [r0, #24]
 80267be:	b510      	push	{r4, lr}
 80267c0:	4604      	mov	r4, r0
 80267c2:	bb33      	cbnz	r3, 8026812 <__sinit+0x56>
 80267c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80267c8:	6503      	str	r3, [r0, #80]	; 0x50
 80267ca:	4b12      	ldr	r3, [pc, #72]	; (8026814 <__sinit+0x58>)
 80267cc:	4a12      	ldr	r2, [pc, #72]	; (8026818 <__sinit+0x5c>)
 80267ce:	681b      	ldr	r3, [r3, #0]
 80267d0:	6282      	str	r2, [r0, #40]	; 0x28
 80267d2:	4298      	cmp	r0, r3
 80267d4:	bf04      	itt	eq
 80267d6:	2301      	moveq	r3, #1
 80267d8:	6183      	streq	r3, [r0, #24]
 80267da:	f000 f81f 	bl	802681c <__sfp>
 80267de:	6060      	str	r0, [r4, #4]
 80267e0:	4620      	mov	r0, r4
 80267e2:	f000 f81b 	bl	802681c <__sfp>
 80267e6:	60a0      	str	r0, [r4, #8]
 80267e8:	4620      	mov	r0, r4
 80267ea:	f000 f817 	bl	802681c <__sfp>
 80267ee:	2200      	movs	r2, #0
 80267f0:	60e0      	str	r0, [r4, #12]
 80267f2:	2104      	movs	r1, #4
 80267f4:	6860      	ldr	r0, [r4, #4]
 80267f6:	f7ff ffa1 	bl	802673c <std>
 80267fa:	2201      	movs	r2, #1
 80267fc:	2109      	movs	r1, #9
 80267fe:	68a0      	ldr	r0, [r4, #8]
 8026800:	f7ff ff9c 	bl	802673c <std>
 8026804:	2202      	movs	r2, #2
 8026806:	2112      	movs	r1, #18
 8026808:	68e0      	ldr	r0, [r4, #12]
 802680a:	f7ff ff97 	bl	802673c <std>
 802680e:	2301      	movs	r3, #1
 8026810:	61a3      	str	r3, [r4, #24]
 8026812:	bd10      	pop	{r4, pc}
 8026814:	0802bc7c 	.word	0x0802bc7c
 8026818:	08026785 	.word	0x08026785

0802681c <__sfp>:
 802681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802681e:	4b1b      	ldr	r3, [pc, #108]	; (802688c <__sfp+0x70>)
 8026820:	681e      	ldr	r6, [r3, #0]
 8026822:	69b3      	ldr	r3, [r6, #24]
 8026824:	4607      	mov	r7, r0
 8026826:	b913      	cbnz	r3, 802682e <__sfp+0x12>
 8026828:	4630      	mov	r0, r6
 802682a:	f7ff ffc7 	bl	80267bc <__sinit>
 802682e:	3648      	adds	r6, #72	; 0x48
 8026830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026834:	3b01      	subs	r3, #1
 8026836:	d503      	bpl.n	8026840 <__sfp+0x24>
 8026838:	6833      	ldr	r3, [r6, #0]
 802683a:	b133      	cbz	r3, 802684a <__sfp+0x2e>
 802683c:	6836      	ldr	r6, [r6, #0]
 802683e:	e7f7      	b.n	8026830 <__sfp+0x14>
 8026840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026844:	b16d      	cbz	r5, 8026862 <__sfp+0x46>
 8026846:	3468      	adds	r4, #104	; 0x68
 8026848:	e7f4      	b.n	8026834 <__sfp+0x18>
 802684a:	2104      	movs	r1, #4
 802684c:	4638      	mov	r0, r7
 802684e:	f7ff ff9f 	bl	8026790 <__sfmoreglue>
 8026852:	6030      	str	r0, [r6, #0]
 8026854:	2800      	cmp	r0, #0
 8026856:	d1f1      	bne.n	802683c <__sfp+0x20>
 8026858:	230c      	movs	r3, #12
 802685a:	603b      	str	r3, [r7, #0]
 802685c:	4604      	mov	r4, r0
 802685e:	4620      	mov	r0, r4
 8026860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026862:	4b0b      	ldr	r3, [pc, #44]	; (8026890 <__sfp+0x74>)
 8026864:	6665      	str	r5, [r4, #100]	; 0x64
 8026866:	e9c4 5500 	strd	r5, r5, [r4]
 802686a:	60a5      	str	r5, [r4, #8]
 802686c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8026870:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8026874:	2208      	movs	r2, #8
 8026876:	4629      	mov	r1, r5
 8026878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802687c:	f7ff f989 	bl	8025b92 <memset>
 8026880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026888:	e7e9      	b.n	802685e <__sfp+0x42>
 802688a:	bf00      	nop
 802688c:	0802bc7c 	.word	0x0802bc7c
 8026890:	ffff0001 	.word	0xffff0001

08026894 <_fwalk_reent>:
 8026894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026898:	4680      	mov	r8, r0
 802689a:	4689      	mov	r9, r1
 802689c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80268a0:	2600      	movs	r6, #0
 80268a2:	b914      	cbnz	r4, 80268aa <_fwalk_reent+0x16>
 80268a4:	4630      	mov	r0, r6
 80268a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80268aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80268ae:	3f01      	subs	r7, #1
 80268b0:	d501      	bpl.n	80268b6 <_fwalk_reent+0x22>
 80268b2:	6824      	ldr	r4, [r4, #0]
 80268b4:	e7f5      	b.n	80268a2 <_fwalk_reent+0xe>
 80268b6:	89ab      	ldrh	r3, [r5, #12]
 80268b8:	2b01      	cmp	r3, #1
 80268ba:	d907      	bls.n	80268cc <_fwalk_reent+0x38>
 80268bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80268c0:	3301      	adds	r3, #1
 80268c2:	d003      	beq.n	80268cc <_fwalk_reent+0x38>
 80268c4:	4629      	mov	r1, r5
 80268c6:	4640      	mov	r0, r8
 80268c8:	47c8      	blx	r9
 80268ca:	4306      	orrs	r6, r0
 80268cc:	3568      	adds	r5, #104	; 0x68
 80268ce:	e7ee      	b.n	80268ae <_fwalk_reent+0x1a>

080268d0 <__swhatbuf_r>:
 80268d0:	b570      	push	{r4, r5, r6, lr}
 80268d2:	460e      	mov	r6, r1
 80268d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268d8:	2900      	cmp	r1, #0
 80268da:	b096      	sub	sp, #88	; 0x58
 80268dc:	4614      	mov	r4, r2
 80268de:	461d      	mov	r5, r3
 80268e0:	da07      	bge.n	80268f2 <__swhatbuf_r+0x22>
 80268e2:	2300      	movs	r3, #0
 80268e4:	602b      	str	r3, [r5, #0]
 80268e6:	89b3      	ldrh	r3, [r6, #12]
 80268e8:	061a      	lsls	r2, r3, #24
 80268ea:	d410      	bmi.n	802690e <__swhatbuf_r+0x3e>
 80268ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80268f0:	e00e      	b.n	8026910 <__swhatbuf_r+0x40>
 80268f2:	466a      	mov	r2, sp
 80268f4:	f000 f8b8 	bl	8026a68 <_fstat_r>
 80268f8:	2800      	cmp	r0, #0
 80268fa:	dbf2      	blt.n	80268e2 <__swhatbuf_r+0x12>
 80268fc:	9a01      	ldr	r2, [sp, #4]
 80268fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026906:	425a      	negs	r2, r3
 8026908:	415a      	adcs	r2, r3
 802690a:	602a      	str	r2, [r5, #0]
 802690c:	e7ee      	b.n	80268ec <__swhatbuf_r+0x1c>
 802690e:	2340      	movs	r3, #64	; 0x40
 8026910:	2000      	movs	r0, #0
 8026912:	6023      	str	r3, [r4, #0]
 8026914:	b016      	add	sp, #88	; 0x58
 8026916:	bd70      	pop	{r4, r5, r6, pc}

08026918 <__smakebuf_r>:
 8026918:	898b      	ldrh	r3, [r1, #12]
 802691a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802691c:	079d      	lsls	r5, r3, #30
 802691e:	4606      	mov	r6, r0
 8026920:	460c      	mov	r4, r1
 8026922:	d507      	bpl.n	8026934 <__smakebuf_r+0x1c>
 8026924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026928:	6023      	str	r3, [r4, #0]
 802692a:	6123      	str	r3, [r4, #16]
 802692c:	2301      	movs	r3, #1
 802692e:	6163      	str	r3, [r4, #20]
 8026930:	b002      	add	sp, #8
 8026932:	bd70      	pop	{r4, r5, r6, pc}
 8026934:	ab01      	add	r3, sp, #4
 8026936:	466a      	mov	r2, sp
 8026938:	f7ff ffca 	bl	80268d0 <__swhatbuf_r>
 802693c:	9900      	ldr	r1, [sp, #0]
 802693e:	4605      	mov	r5, r0
 8026940:	4630      	mov	r0, r6
 8026942:	f7ff f97d 	bl	8025c40 <_malloc_r>
 8026946:	b948      	cbnz	r0, 802695c <__smakebuf_r+0x44>
 8026948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802694c:	059a      	lsls	r2, r3, #22
 802694e:	d4ef      	bmi.n	8026930 <__smakebuf_r+0x18>
 8026950:	f023 0303 	bic.w	r3, r3, #3
 8026954:	f043 0302 	orr.w	r3, r3, #2
 8026958:	81a3      	strh	r3, [r4, #12]
 802695a:	e7e3      	b.n	8026924 <__smakebuf_r+0xc>
 802695c:	4b0d      	ldr	r3, [pc, #52]	; (8026994 <__smakebuf_r+0x7c>)
 802695e:	62b3      	str	r3, [r6, #40]	; 0x28
 8026960:	89a3      	ldrh	r3, [r4, #12]
 8026962:	6020      	str	r0, [r4, #0]
 8026964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026968:	81a3      	strh	r3, [r4, #12]
 802696a:	9b00      	ldr	r3, [sp, #0]
 802696c:	6163      	str	r3, [r4, #20]
 802696e:	9b01      	ldr	r3, [sp, #4]
 8026970:	6120      	str	r0, [r4, #16]
 8026972:	b15b      	cbz	r3, 802698c <__smakebuf_r+0x74>
 8026974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026978:	4630      	mov	r0, r6
 802697a:	f000 f887 	bl	8026a8c <_isatty_r>
 802697e:	b128      	cbz	r0, 802698c <__smakebuf_r+0x74>
 8026980:	89a3      	ldrh	r3, [r4, #12]
 8026982:	f023 0303 	bic.w	r3, r3, #3
 8026986:	f043 0301 	orr.w	r3, r3, #1
 802698a:	81a3      	strh	r3, [r4, #12]
 802698c:	89a3      	ldrh	r3, [r4, #12]
 802698e:	431d      	orrs	r5, r3
 8026990:	81a5      	strh	r5, [r4, #12]
 8026992:	e7cd      	b.n	8026930 <__smakebuf_r+0x18>
 8026994:	08026785 	.word	0x08026785

08026998 <__malloc_lock>:
 8026998:	4770      	bx	lr

0802699a <__malloc_unlock>:
 802699a:	4770      	bx	lr

0802699c <__sread>:
 802699c:	b510      	push	{r4, lr}
 802699e:	460c      	mov	r4, r1
 80269a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80269a4:	f000 f894 	bl	8026ad0 <_read_r>
 80269a8:	2800      	cmp	r0, #0
 80269aa:	bfab      	itete	ge
 80269ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80269ae:	89a3      	ldrhlt	r3, [r4, #12]
 80269b0:	181b      	addge	r3, r3, r0
 80269b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80269b6:	bfac      	ite	ge
 80269b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80269ba:	81a3      	strhlt	r3, [r4, #12]
 80269bc:	bd10      	pop	{r4, pc}

080269be <__swrite>:
 80269be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80269c2:	461f      	mov	r7, r3
 80269c4:	898b      	ldrh	r3, [r1, #12]
 80269c6:	05db      	lsls	r3, r3, #23
 80269c8:	4605      	mov	r5, r0
 80269ca:	460c      	mov	r4, r1
 80269cc:	4616      	mov	r6, r2
 80269ce:	d505      	bpl.n	80269dc <__swrite+0x1e>
 80269d0:	2302      	movs	r3, #2
 80269d2:	2200      	movs	r2, #0
 80269d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80269d8:	f000 f868 	bl	8026aac <_lseek_r>
 80269dc:	89a3      	ldrh	r3, [r4, #12]
 80269de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80269e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80269e6:	81a3      	strh	r3, [r4, #12]
 80269e8:	4632      	mov	r2, r6
 80269ea:	463b      	mov	r3, r7
 80269ec:	4628      	mov	r0, r5
 80269ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80269f2:	f000 b817 	b.w	8026a24 <_write_r>

080269f6 <__sseek>:
 80269f6:	b510      	push	{r4, lr}
 80269f8:	460c      	mov	r4, r1
 80269fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80269fe:	f000 f855 	bl	8026aac <_lseek_r>
 8026a02:	1c43      	adds	r3, r0, #1
 8026a04:	89a3      	ldrh	r3, [r4, #12]
 8026a06:	bf15      	itete	ne
 8026a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8026a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026a12:	81a3      	strheq	r3, [r4, #12]
 8026a14:	bf18      	it	ne
 8026a16:	81a3      	strhne	r3, [r4, #12]
 8026a18:	bd10      	pop	{r4, pc}

08026a1a <__sclose>:
 8026a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a1e:	f000 b813 	b.w	8026a48 <_close_r>
	...

08026a24 <_write_r>:
 8026a24:	b538      	push	{r3, r4, r5, lr}
 8026a26:	4c07      	ldr	r4, [pc, #28]	; (8026a44 <_write_r+0x20>)
 8026a28:	4605      	mov	r5, r0
 8026a2a:	4608      	mov	r0, r1
 8026a2c:	4611      	mov	r1, r2
 8026a2e:	2200      	movs	r2, #0
 8026a30:	6022      	str	r2, [r4, #0]
 8026a32:	461a      	mov	r2, r3
 8026a34:	f7db ff47 	bl	80028c6 <_write>
 8026a38:	1c43      	adds	r3, r0, #1
 8026a3a:	d102      	bne.n	8026a42 <_write_r+0x1e>
 8026a3c:	6823      	ldr	r3, [r4, #0]
 8026a3e:	b103      	cbz	r3, 8026a42 <_write_r+0x1e>
 8026a40:	602b      	str	r3, [r5, #0]
 8026a42:	bd38      	pop	{r3, r4, r5, pc}
 8026a44:	2000bba8 	.word	0x2000bba8

08026a48 <_close_r>:
 8026a48:	b538      	push	{r3, r4, r5, lr}
 8026a4a:	4c06      	ldr	r4, [pc, #24]	; (8026a64 <_close_r+0x1c>)
 8026a4c:	2300      	movs	r3, #0
 8026a4e:	4605      	mov	r5, r0
 8026a50:	4608      	mov	r0, r1
 8026a52:	6023      	str	r3, [r4, #0]
 8026a54:	f7db ff53 	bl	80028fe <_close>
 8026a58:	1c43      	adds	r3, r0, #1
 8026a5a:	d102      	bne.n	8026a62 <_close_r+0x1a>
 8026a5c:	6823      	ldr	r3, [r4, #0]
 8026a5e:	b103      	cbz	r3, 8026a62 <_close_r+0x1a>
 8026a60:	602b      	str	r3, [r5, #0]
 8026a62:	bd38      	pop	{r3, r4, r5, pc}
 8026a64:	2000bba8 	.word	0x2000bba8

08026a68 <_fstat_r>:
 8026a68:	b538      	push	{r3, r4, r5, lr}
 8026a6a:	4c07      	ldr	r4, [pc, #28]	; (8026a88 <_fstat_r+0x20>)
 8026a6c:	2300      	movs	r3, #0
 8026a6e:	4605      	mov	r5, r0
 8026a70:	4608      	mov	r0, r1
 8026a72:	4611      	mov	r1, r2
 8026a74:	6023      	str	r3, [r4, #0]
 8026a76:	f7db ff4e 	bl	8002916 <_fstat>
 8026a7a:	1c43      	adds	r3, r0, #1
 8026a7c:	d102      	bne.n	8026a84 <_fstat_r+0x1c>
 8026a7e:	6823      	ldr	r3, [r4, #0]
 8026a80:	b103      	cbz	r3, 8026a84 <_fstat_r+0x1c>
 8026a82:	602b      	str	r3, [r5, #0]
 8026a84:	bd38      	pop	{r3, r4, r5, pc}
 8026a86:	bf00      	nop
 8026a88:	2000bba8 	.word	0x2000bba8

08026a8c <_isatty_r>:
 8026a8c:	b538      	push	{r3, r4, r5, lr}
 8026a8e:	4c06      	ldr	r4, [pc, #24]	; (8026aa8 <_isatty_r+0x1c>)
 8026a90:	2300      	movs	r3, #0
 8026a92:	4605      	mov	r5, r0
 8026a94:	4608      	mov	r0, r1
 8026a96:	6023      	str	r3, [r4, #0]
 8026a98:	f7db ff4d 	bl	8002936 <_isatty>
 8026a9c:	1c43      	adds	r3, r0, #1
 8026a9e:	d102      	bne.n	8026aa6 <_isatty_r+0x1a>
 8026aa0:	6823      	ldr	r3, [r4, #0]
 8026aa2:	b103      	cbz	r3, 8026aa6 <_isatty_r+0x1a>
 8026aa4:	602b      	str	r3, [r5, #0]
 8026aa6:	bd38      	pop	{r3, r4, r5, pc}
 8026aa8:	2000bba8 	.word	0x2000bba8

08026aac <_lseek_r>:
 8026aac:	b538      	push	{r3, r4, r5, lr}
 8026aae:	4c07      	ldr	r4, [pc, #28]	; (8026acc <_lseek_r+0x20>)
 8026ab0:	4605      	mov	r5, r0
 8026ab2:	4608      	mov	r0, r1
 8026ab4:	4611      	mov	r1, r2
 8026ab6:	2200      	movs	r2, #0
 8026ab8:	6022      	str	r2, [r4, #0]
 8026aba:	461a      	mov	r2, r3
 8026abc:	f7db ff46 	bl	800294c <_lseek>
 8026ac0:	1c43      	adds	r3, r0, #1
 8026ac2:	d102      	bne.n	8026aca <_lseek_r+0x1e>
 8026ac4:	6823      	ldr	r3, [r4, #0]
 8026ac6:	b103      	cbz	r3, 8026aca <_lseek_r+0x1e>
 8026ac8:	602b      	str	r3, [r5, #0]
 8026aca:	bd38      	pop	{r3, r4, r5, pc}
 8026acc:	2000bba8 	.word	0x2000bba8

08026ad0 <_read_r>:
 8026ad0:	b538      	push	{r3, r4, r5, lr}
 8026ad2:	4c07      	ldr	r4, [pc, #28]	; (8026af0 <_read_r+0x20>)
 8026ad4:	4605      	mov	r5, r0
 8026ad6:	4608      	mov	r0, r1
 8026ad8:	4611      	mov	r1, r2
 8026ada:	2200      	movs	r2, #0
 8026adc:	6022      	str	r2, [r4, #0]
 8026ade:	461a      	mov	r2, r3
 8026ae0:	f7db fed4 	bl	800288c <_read>
 8026ae4:	1c43      	adds	r3, r0, #1
 8026ae6:	d102      	bne.n	8026aee <_read_r+0x1e>
 8026ae8:	6823      	ldr	r3, [r4, #0]
 8026aea:	b103      	cbz	r3, 8026aee <_read_r+0x1e>
 8026aec:	602b      	str	r3, [r5, #0]
 8026aee:	bd38      	pop	{r3, r4, r5, pc}
 8026af0:	2000bba8 	.word	0x2000bba8

08026af4 <_init>:
 8026af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026af6:	bf00      	nop
 8026af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026afa:	bc08      	pop	{r3}
 8026afc:	469e      	mov	lr, r3
 8026afe:	4770      	bx	lr

08026b00 <_fini>:
 8026b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026b02:	bf00      	nop
 8026b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026b06:	bc08      	pop	{r3}
 8026b08:	469e      	mov	lr, r3
 8026b0a:	4770      	bx	lr
