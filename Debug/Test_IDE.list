
Test_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028568  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005080  08028738  08028738  00038738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000019ac  0802d7b8  0802d7b8  0003d7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000920d8  0802f164  0802f164  0003f164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000c8  080c123c  080c123c  000d123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080c1304  080c1304  000e00fc  2**0
                  CONTENTS
  7 .ARM          00000008  080c1304  080c1304  000d1304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080c130c  080c130c  000e00fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080c130c  080c130c  000d130c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080c1320  080c1320  000d1320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080c1328  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c16c  200000fc  080c1424  000e00fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000c268  080c1424  000ec268  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000e00fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000e2df0  00000000  00000000  000e012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00016ad7  00000000  00000000  001c2f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000058f0  00000000  00000000  001d99f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000052b0  00000000  00000000  001df2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003dac4  00000000  00000000  001e4598  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004f3b8  00000000  00000000  0022205c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013dc61  00000000  00000000  00271414  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003af075  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00018448  00000000  00000000  003af170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08028720 	.word	0x08028720

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08028720 	.word	0x08028720

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f00e fb52 	bl	800ec64 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f00e fb0d 	bl	800ec28 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00e fad7 	bl	800ec28 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000118 	.word	0x20000118

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00e fa24 	bl	800ec28 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00e fa16 	bl	800ec28 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00e f9fb 	bl	800ec28 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00e f9ed 	bl	800ec28 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000118 	.word	0x20000118
 8000890:	2000011c 	.word	0x2000011c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00e f9a0 	bl	800ebf4 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00e f98c 	bl	800ebf4 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f00e f951 	bl	800ebe0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80009ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <vApplicationGetIdleTaskMemory+0x30>)
 80009b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000120 	.word	0x20000120
 80009cc:	20000178 	.word	0x20000178

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f002 fb2e 	bl	8003036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f849 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f001 f801 	bl	80019e4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009e2:	f000 f903 	bl	8000bec <MX_ADC3_Init>
  MX_CRC_Init();
 80009e6:	f000 f953 	bl	8000c90 <MX_CRC_Init>
  MX_DCMI_Init();
 80009ea:	f000 f973 	bl	8000cd4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80009ee:	f000 f9a5 	bl	8000d3c <MX_DMA2D_Init>
  MX_FMC_Init();
 80009f2:	f000 ff4b 	bl	800188c <MX_FMC_Init>
  MX_I2C1_Init();
 80009f6:	f000 f9d3 	bl	8000da0 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009fa:	f000 fa11 	bl	8000e20 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009fe:	f000 fa4f 	bl	8000ea0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000a02:	f000 fb03 	bl	800100c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000a06:	f000 fb2d 	bl	8001064 <MX_RTC_Init>
  MX_SAI2_Init();
 8000a0a:	f000 fbd1 	bl	80011b0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000a0e:	f000 fc77 	bl	8001300 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000a12:	f000 fc95 	bl	8001340 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000a16:	f000 fcc3 	bl	80013a0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a1a:	f000 fcff 	bl	800141c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a1e:	f000 fd73 	bl	8001508 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a22:	f000 fde9 	bl	80015f8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a26:	f000 fe5f 	bl	80016e8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000a2a:	f000 feb1 	bl	8001790 <MX_TIM12_Init>
  MX_USART6_UART_Init();
 8000a2e:	f000 fef5 	bl	800181c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000a32:	f00a fddb 	bl	800b5ec <MX_FATFS_Init>
  MX_USB_OTG_FS_USB_Init();
 8000a36:	f000 ff21 	bl	800187c <MX_USB_OTG_FS_USB_Init>
  MX_TouchGFX_Init();
 8000a3a:	f00e f91e 	bl	800ec7a <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <main+0x98>)
 8000a40:	1d3c      	adds	r4, r7, #4
 8000a42:	461d      	mov	r5, r3
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00b f8c1 	bl	800bbdc <osThreadCreate>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <main+0x9c>)
 8000a5e:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a60:	f00b f899 	bl	800bb96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x94>
 8000a66:	bf00      	nop
 8000a68:	08028744 	.word	0x08028744
 8000a6c:	2000bd30 	.word	0x2000bd30

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b4      	sub	sp, #208	; 0xd0
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f026 fed1 	bl	8027826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2284      	movs	r2, #132	; 0x84
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f026 fec2 	bl	8027826 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa2:	f005 f8d5 	bl	8005c50 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <SystemClock_Config+0x170>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a4d      	ldr	r2, [pc, #308]	; (8000be0 <SystemClock_Config+0x170>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <SystemClock_Config+0x170>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abe:	4b49      	ldr	r3, [pc, #292]	; (8000be4 <SystemClock_Config+0x174>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a48      	ldr	r2, [pc, #288]	; (8000be4 <SystemClock_Config+0x174>)
 8000ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <SystemClock_Config+0x174>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ad6:	2309      	movs	r3, #9
 8000ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000af8:	2319      	movs	r3, #25
 8000afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000afe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 f9bc 	bl	8005e94 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b22:	f001 f9b5 	bl	8001e90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b26:	f005 f8a3 	bl	8005c70 <HAL_PWREx_EnableOverDrive>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b30:	f001 f9ae 	bl	8001e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 fc3d 	bl	80063dc <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000b68:	f001 f992 	bl	8001e90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <SystemClock_Config+0x178>)
 8000b6e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000b80:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b84:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000baa:	2300      	movs	r3, #0
 8000bac:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000bb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 fe0b 	bl	80067e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x168>
  {
    Error_Handler();
 8000bd4:	f001 f95c 	bl	8001e90 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	37d0      	adds	r7, #208	; 0xd0
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40007000 	.word	0x40007000
 8000be8:	01b14828 	.word	0x01b14828

08000bec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_ADC3_Init+0x9c>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_ADC3_Init+0xa0>)
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c4e:	f002 fa41 	bl	80030d4 <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c58:	f001 f91a 	bl	8001e90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c6e:	f002 fa75 	bl	800315c <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c78:	f001 f90a 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000ba24 	.word	0x2000ba24
 8000c88:	40012200 	.word	0x40012200
 8000c8c:	0f000001 	.word	0x0f000001

08000c90 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <MX_CRC_Init+0x40>)
 8000c98:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cba:	f002 fda5 	bl	8003808 <HAL_CRC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000cc4:	f001 f8e4 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000b97c 	.word	0x2000b97c
 8000cd0:	40023000 	.word	0x40023000

08000cd4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cda:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <MX_DCMI_Init+0x64>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d22:	f002 fe5b 	bl	80039dc <HAL_DCMI_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f001 f8b0 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000b92c 	.word	0x2000b92c
 8000d38:	50050000 	.word	0x50050000

08000d3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <MX_DMA2D_Init+0x60>)
 8000d44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d72:	f002 ff47 	bl	8003c04 <HAL_DMA2D_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d7c:	f001 f888 	bl	8001e90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d80:	2101      	movs	r1, #1
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d84:	f003 fa08 	bl	8004198 <HAL_DMA2D_ConfigLayer>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d8e:	f001 f87f 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000bc70 	.word	0x2000bc70
 8000d9c:	4002b000 	.word	0x4002b000

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <MX_I2C1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <MX_I2C1_Init+0x7c>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000ddc:	f003 fdf0 	bl	80049c0 <HAL_I2C_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000de6:	f001 f853 	bl	8001e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dee:	f004 faff 	bl	80053f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df8:	f001 f84a 	bl	8001e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000e00:	f004 fb41 	bl	8005486 <HAL_I2CEx_ConfigDigitalFilter>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f001 f841 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000b8c0 	.word	0x2000b8c0
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	00c0eaff 	.word	0x00c0eaff

08000e20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <MX_I2C3_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_I2C3_Init+0x7c>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e5c:	f003 fdb0 	bl	80049c0 <HAL_I2C_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e66:	f001 f813 	bl	8001e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e6e:	f004 fabf 	bl	80053f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f001 f80a 	bl	8001e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e80:	f004 fb01 	bl	8005486 <HAL_I2CEx_ConfigDigitalFilter>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f001 f801 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000b874 	.word	0x2000b874
 8000e98:	40005c00 	.word	0x40005c00
 8000e9c:	00c0eaff 	.word	0x00c0eaff

08000ea0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09a      	sub	sp, #104	; 0x68
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ea6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eaa:	2234      	movs	r2, #52	; 0x34
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f026 fcb9 	bl	8027826 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2234      	movs	r2, #52	; 0x34
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f026 fcb3 	bl	8027826 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ec2:	4a51      	ldr	r2, [pc, #324]	; (8001008 <MX_LTDC_Init+0x168>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ec6:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <MX_LTDC_Init+0x164>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ede:	4b49      	ldr	r3, [pc, #292]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ee0:	2228      	movs	r2, #40	; 0x28
 8000ee2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ee4:	4b47      	ldr	r3, [pc, #284]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ee6:	2209      	movs	r2, #9
 8000ee8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000eea:	4b46      	ldr	r3, [pc, #280]	; (8001004 <MX_LTDC_Init+0x164>)
 8000eec:	2235      	movs	r2, #53	; 0x35
 8000eee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ef0:	4b44      	ldr	r3, [pc, #272]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ef2:	220b      	movs	r2, #11
 8000ef4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ef8:	f240 2215 	movw	r2, #533	; 0x215
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f00:	f240 121b 	movw	r2, #283	; 0x11b
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f08:	f240 2235 	movw	r2, #565	; 0x235
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f10:	f240 121d 	movw	r2, #285	; 0x11d
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f2e:	4835      	ldr	r0, [pc, #212]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f30:	f004 faf6 	bl	8005520 <HAL_LTDC_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f3a:	f000 ffa9 	bl	8001e90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000f42:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000f4c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f50:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f52:	2301      	movs	r3, #1
 8000f54:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000f56:	23ff      	movs	r3, #255	; 0xff
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f62:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f64:	2305      	movs	r3, #5
 8000f66:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f68:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000f6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000f74:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f78:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f96:	f004 fc4b 	bl	8005830 <HAL_LTDC_ConfigLayer>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000fa0:	f000 ff76 	bl	8001e90 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_LTDC_Init+0x164>)
 8000fec:	f004 fc20 	bl	8005830 <HAL_LTDC_ConfigLayer>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000ff6:	f000 ff4b 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3768      	adds	r7, #104	; 0x68
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000ba6c 	.word	0x2000ba6c
 8001008:	40016800 	.word	0x40016800

0800100c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <MX_QUADSPI_Init+0x54>)
 8001014:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_QUADSPI_Init+0x50>)
 800101e:	2201      	movs	r2, #1
 8001020:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_QUADSPI_Init+0x50>)
 800102a:	2201      	movs	r2, #1
 800102c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_QUADSPI_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001048:	f004 fe62 	bl	8005d10 <HAL_QSPI_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001052:	f000 ff1d 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000bbd8 	.word	0x2000bbd8
 8001060:	a0001000 	.word	0xa0001000

08001064 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b092      	sub	sp, #72	; 0x48
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	222c      	movs	r2, #44	; 0x2c
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f026 fbcd 	bl	8027826 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <MX_RTC_Init+0x144>)
 800108e:	4a47      	ldr	r2, [pc, #284]	; (80011ac <MX_RTC_Init+0x148>)
 8001090:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001092:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <MX_RTC_Init+0x144>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001098:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <MX_RTC_Init+0x144>)
 800109a:	227f      	movs	r2, #127	; 0x7f
 800109c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <MX_RTC_Init+0x144>)
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <MX_RTC_Init+0x144>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010aa:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <MX_RTC_Init+0x144>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <MX_RTC_Init+0x144>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010b6:	483c      	ldr	r0, [pc, #240]	; (80011a8 <MX_RTC_Init+0x144>)
 80010b8:	f006 f8b6 	bl	8007228 <HAL_RTC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010c2:	f000 fee5 	bl	8001e90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	482f      	ldr	r0, [pc, #188]	; (80011a8 <MX_RTC_Init+0x144>)
 80010ea:	f006 f919 	bl	8007320 <HAL_RTC_SetTime>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010f4:	f000 fecc 	bl	8001e90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80010fe:	2301      	movs	r3, #1
 8001100:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800110a:	2300      	movs	r3, #0
 800110c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	4823      	ldr	r0, [pc, #140]	; (80011a8 <MX_RTC_Init+0x144>)
 800111a:	f006 f9bf 	bl	800749c <HAL_RTC_SetDate>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001124:	f000 feb4 	bl	8001e90 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001128:	2300      	movs	r3, #0
 800112a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800112c:	2300      	movs	r3, #0
 800112e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001130:	2300      	movs	r3, #0
 8001132:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800114c:	2301      	movs	r3, #1
 800114e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	2201      	movs	r2, #1
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <MX_RTC_Init+0x144>)
 8001160:	f006 fa44 	bl	80075ec <HAL_RTC_SetAlarm>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800116a:	f000 fe91 	bl	8001e90 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800116e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <MX_RTC_Init+0x144>)
 800117c:	f006 fa36 	bl	80075ec <HAL_RTC_SetAlarm>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001186:	f000 fe83 	bl	8001e90 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800118a:	2202      	movs	r2, #2
 800118c:	2100      	movs	r1, #0
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_RTC_Init+0x144>)
 8001190:	f006 fbb6 	bl	8007900 <HAL_RTCEx_SetTimeStamp>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800119a:	f000 fe79 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3748      	adds	r7, #72	; 0x48
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000b90c 	.word	0x2000b90c
 80011ac:	40002800 	.word	0x40002800

080011b0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011b6:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <MX_SAI2_Init+0x140>)
 80011b8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011d2:	4b46      	ldr	r3, [pc, #280]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011d8:	4b44      	ldr	r3, [pc, #272]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011e4:	4b41      	ldr	r3, [pc, #260]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <MX_SAI2_Init+0x144>)
 80011f4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <MX_SAI2_Init+0x13c>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001210:	2208      	movs	r2, #8
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001214:	4b35      	ldr	r3, [pc, #212]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001216:	2201      	movs	r2, #1
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <MX_SAI2_Init+0x13c>)
 800121c:	2200      	movs	r2, #0
 800121e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001222:	2200      	movs	r2, #0
 8001224:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001228:	2200      	movs	r2, #0
 800122a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <MX_SAI2_Init+0x13c>)
 800122e:	2200      	movs	r2, #0
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001234:	2200      	movs	r2, #0
 8001236:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <MX_SAI2_Init+0x13c>)
 800123a:	2201      	movs	r2, #1
 800123c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001240:	2200      	movs	r2, #0
 8001242:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001244:	4829      	ldr	r0, [pc, #164]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001246:	f006 fbb1 	bl	80079ac <HAL_SAI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001250:	f000 fe1e 	bl	8001e90 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001256:	4a29      	ldr	r2, [pc, #164]	; (80012fc <MX_SAI2_Init+0x14c>)
 8001258:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_SAI2_Init+0x148>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001262:	2203      	movs	r2, #3
 8001264:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_SAI2_Init+0x148>)
 800126e:	2200      	movs	r2, #0
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001274:	2200      	movs	r2, #0
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_SAI2_Init+0x148>)
 800127a:	2201      	movs	r2, #1
 800127c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_SAI2_Init+0x148>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_SAI2_Init+0x148>)
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012a4:	2208      	movs	r2, #8
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012bc:	2200      	movs	r2, #0
 80012be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012da:	f006 fb67 	bl	80079ac <HAL_SAI_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80012e4:	f000 fdd4 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000b7f0 	.word	0x2000b7f0
 80012f0:	40015c04 	.word	0x40015c04
 80012f4:	0002ee00 	.word	0x0002ee00
 80012f8:	2000bb54 	.word	0x2000bb54
 80012fc:	40015c24 	.word	0x40015c24

08001300 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001306:	4a0d      	ldr	r2, [pc, #52]	; (800133c <MX_SDMMC1_SD_Init+0x3c>)
 8001308:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	2000b9a0 	.word	0x2000b9a0
 800133c:	40012c00 	.word	0x40012c00

08001340 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001346:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800134a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800138a:	f007 fda3 	bl	8008ed4 <HAL_SPDIFRX_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fd7c 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000bc24 	.word	0x2000bc24

080013a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_SPI2_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_SPI2_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_SPI2_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_SPI2_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_SPI2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_SPI2_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_SPI2_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_SPI2_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_SPI2_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ee:	2207      	movs	r2, #7
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_SPI2_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_SPI2_Init+0x74>)
 80013fa:	2208      	movs	r2, #8
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_SPI2_Init+0x74>)
 8001400:	f007 fdc4 	bl	8008f8c <HAL_SPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 fd41 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000b78c 	.word	0x2000b78c
 8001418:	40003800 	.word	0x40003800

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001454:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MX_TIM2_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_TIM2_Init+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001476:	4823      	ldr	r0, [pc, #140]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001478:	f007 fe1a 	bl	80090b0 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001482:	f000 fd05 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001490:	4619      	mov	r1, r3
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001494:	f008 f8c4 	bl	8009620 <HAL_TIM_ConfigClockSource>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800149e:	f000 fcf7 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014a4:	f007 fe5a 	bl	800915c <HAL_TIM_PWM_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014ae:	f000 fcef 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014c2:	f008 fd27 	bl	8009f14 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014cc:	f000 fce0 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d0:	2360      	movs	r3, #96	; 0x60
 80014d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	4619      	mov	r1, r3
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014e8:	f007 ff82 	bl	80093f0 <HAL_TIM_PWM_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014f2:	f000 fccd 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014f8:	f001 fa18 	bl	800292c <HAL_TIM_MspPostInit>

}
 80014fc:	bf00      	nop
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000bd74 	.word	0x2000bd74

08001508 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800153c:	4a2d      	ldr	r2, [pc, #180]	; (80015f4 <MX_TIM3_Init+0xec>)
 800153e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800154e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001560:	4823      	ldr	r0, [pc, #140]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001562:	f007 fda5 	bl	80090b0 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800156c:	f000 fc90 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	481c      	ldr	r0, [pc, #112]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800157e:	f008 f84f 	bl	8009620 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001588:	f000 fc82 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800158c:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800158e:	f007 fde5 	bl	800915c <HAL_TIM_PWM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001598:	f000 fc7a 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015ac:	f008 fcb2 	bl	8009f14 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015b6:	f000 fc6b 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	; 0x60
 80015bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015d2:	f007 ff0d 	bl	80093f0 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80015dc:	f000 fc58 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015e2:	f001 f9a3 	bl	800292c <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	; 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000b6d8 	.word	0x2000b6d8
 80015f4:	40000400 	.word	0x40000400

080015f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800162c:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <MX_TIM5_Init+0xec>)
 800162e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800163e:	f04f 32ff 	mov.w	r2, #4294967295
 8001642:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001650:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001652:	f007 fd2d 	bl	80090b0 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800165c:	f000 fc18 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166a:	4619      	mov	r1, r3
 800166c:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800166e:	f007 ffd7 	bl	8009620 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001678:	f000 fc0a 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800167e:	f007 fd6d 	bl	800915c <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001688:	f000 fc02 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800169c:	f008 fc3a 	bl	8009f14 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80016a6:	f000 fbf3 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	220c      	movs	r2, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM5_Init+0xe8>)
 80016c2:	f007 fe95 	bl	80093f0 <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80016cc:	f000 fbe0 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM5_Init+0xe8>)
 80016d2:	f001 f92b 	bl	800292c <HAL_TIM_MspPostInit>

}
 80016d6:	bf00      	nop
 80016d8:	3738      	adds	r7, #56	; 0x38
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000bd34 	.word	0x2000bd34
 80016e4:	40000c00 	.word	0x40000c00

080016e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001708:	4a20      	ldr	r2, [pc, #128]	; (800178c <MX_TIM8_Init+0xa4>)
 800170a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <MX_TIM8_Init+0xa0>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_TIM8_Init+0xa0>)
 800171a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_TIM8_Init+0xa0>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001734:	f007 fcbc 	bl	80090b0 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800173e:	f000 fba7 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001750:	f007 ff66 	bl	8009620 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800175a:	f000 fb99 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001770:	f008 fbd0 	bl	8009f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800177a:	f000 fb89 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000b718 	.word	0x2000b718
 800178c:	40010400 	.word	0x40010400

08001790 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_TIM12_Init+0x84>)
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MX_TIM12_Init+0x88>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM12_Init+0x84>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_TIM12_Init+0x84>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM12_Init+0x84>)
 80017bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_TIM12_Init+0x84>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_TIM12_Init+0x84>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017ce:	4811      	ldr	r0, [pc, #68]	; (8001814 <MX_TIM12_Init+0x84>)
 80017d0:	f007 fcc4 	bl	800915c <HAL_TIM_PWM_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80017da:	f000 fb59 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017de:	2360      	movs	r3, #96	; 0x60
 80017e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_TIM12_Init+0x84>)
 80017f6:	f007 fdfb 	bl	80093f0 <HAL_TIM_PWM_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001800:	f000 fb46 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <MX_TIM12_Init+0x84>)
 8001806:	f001 f891 	bl	800292c <HAL_TIM_MspPostInit>

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000bb14 	.word	0x2000bb14
 8001818:	40001800 	.word	0x40001800

0800181c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <MX_USART6_UART_Init+0x5c>)
 8001824:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001860:	f008 fc04 	bl	800a06c <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800186a:	f000 fb11 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000bcb0 	.word	0x2000bcb0
 8001878:	40011400 	.word	0x40011400

0800187c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018a6:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <MX_FMC_Init+0x150>)
 80018a8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80018b6:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018b8:	2204      	movs	r2, #4
 80018ba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80018bc:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018be:	2210      	movs	r2, #16
 80018c0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018c2:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018ca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80018ce:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018dc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80018de:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80018f0:	2307      	movs	r3, #7
 80018f2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80018f8:	2307      	movs	r3, #7
 80018fa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80018fc:	2303      	movs	r3, #3
 80018fe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001904:	2302      	movs	r3, #2
 8001906:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4832      	ldr	r0, [pc, #200]	; (80019d8 <MX_FMC_Init+0x14c>)
 800190e:	f007 fa61 	bl	8008dd4 <HAL_SDRAM_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001918:	f000 faba 	bl	8001e90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  __IO uint32_t tmpmrd = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001920:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <MX_FMC_Init+0x154>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <MX_FMC_Init+0x154>)
 8001928:	2210      	movs	r2, #16
 800192a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_FMC_Init+0x154>)
 800192e:	2201      	movs	r2, #1
 8001930:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <MX_FMC_Init+0x154>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193c:	4928      	ldr	r1, [pc, #160]	; (80019e0 <MX_FMC_Init+0x154>)
 800193e:	4826      	ldr	r0, [pc, #152]	; (80019d8 <MX_FMC_Init+0x14c>)
 8001940:	f007 fa7c 	bl	8008e3c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f001 fba3 	bl	8003090 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <MX_FMC_Init+0x154>)
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <MX_FMC_Init+0x154>)
 8001952:	2210      	movs	r2, #16
 8001954:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <MX_FMC_Init+0x154>)
 8001958:	2201      	movs	r2, #1
 800195a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <MX_FMC_Init+0x154>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001966:	491e      	ldr	r1, [pc, #120]	; (80019e0 <MX_FMC_Init+0x154>)
 8001968:	481b      	ldr	r0, [pc, #108]	; (80019d8 <MX_FMC_Init+0x14c>)
 800196a:	f007 fa67 	bl	8008e3c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <MX_FMC_Init+0x154>)
 8001970:	2203      	movs	r2, #3
 8001972:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_FMC_Init+0x154>)
 8001976:	2210      	movs	r2, #16
 8001978:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <MX_FMC_Init+0x154>)
 800197c:	2208      	movs	r2, #8
 800197e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <MX_FMC_Init+0x154>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198a:	4915      	ldr	r1, [pc, #84]	; (80019e0 <MX_FMC_Init+0x154>)
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <MX_FMC_Init+0x14c>)
 800198e:	f007 fa55 	bl	8008e3c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001992:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001996:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_FMC_Init+0x154>)
 800199a:	2204      	movs	r2, #4
 800199c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_FMC_Init+0x154>)
 80019a0:	2210      	movs	r2, #16
 80019a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_FMC_Init+0x154>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <MX_FMC_Init+0x154>)
 80019ae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80019b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b4:	490a      	ldr	r1, [pc, #40]	; (80019e0 <MX_FMC_Init+0x154>)
 80019b6:	4808      	ldr	r0, [pc, #32]	; (80019d8 <MX_FMC_Init+0x14c>)
 80019b8:	f007 fa40 	bl	8008e3c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80019bc:	f240 712b 	movw	r1, #1835	; 0x72b
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_FMC_Init+0x14c>)
 80019c2:	f007 fa66 	bl	8008e92 <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 80019c6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80019ca:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019ce:	601a      	str	r2, [r3, #0]

  /* USER CODE END FMC_Init 2 */
}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000b758 	.word	0x2000b758
 80019dc:	a0000140 	.word	0xa0000140
 80019e0:	20000378 	.word	0x20000378

080019e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b090      	sub	sp, #64	; 0x40
 80019e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fa:	4baf      	ldr	r3, [pc, #700]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4aae      	ldr	r2, [pc, #696]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4bac      	ldr	r3, [pc, #688]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a12:	4ba9      	ldr	r3, [pc, #676]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4aa8      	ldr	r2, [pc, #672]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4ba6      	ldr	r3, [pc, #664]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4ba3      	ldr	r3, [pc, #652]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4aa2      	ldr	r2, [pc, #648]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4ba0      	ldr	r3, [pc, #640]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	4b9d      	ldr	r3, [pc, #628]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a9c      	ldr	r2, [pc, #624]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b9a      	ldr	r3, [pc, #616]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	4b97      	ldr	r3, [pc, #604]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a96      	ldr	r2, [pc, #600]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b91      	ldr	r3, [pc, #580]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a90      	ldr	r2, [pc, #576]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a8a      	ldr	r2, [pc, #552]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a84      	ldr	r2, [pc, #528]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad2:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a78      	ldr	r2, [pc, #480]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2120      	movs	r1, #32
 8001b06:	486d      	ldr	r0, [pc, #436]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001b08:	f002 ff40 	bl	800498c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	210c      	movs	r1, #12
 8001b10:	486b      	ldr	r0, [pc, #428]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001b12:	f002 ff3b 	bl	800498c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2108      	movs	r1, #8
 8001b1a:	486a      	ldr	r0, [pc, #424]	; (8001cc4 <MX_GPIO_Init+0x2e0>)
 8001b1c:	f002 ff36 	bl	800498c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	4866      	ldr	r0, [pc, #408]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001b28:	f002 ff30 	bl	800498c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b32:	4865      	ldr	r0, [pc, #404]	; (8001cc8 <MX_GPIO_Init+0x2e4>)
 8001b34:	f002 ff2a 	bl	800498c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	21c8      	movs	r1, #200	; 0xc8
 8001b3c:	4863      	ldr	r0, [pc, #396]	; (8001ccc <MX_GPIO_Init+0x2e8>)
 8001b3e:	f002 ff25 	bl	800498c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001b42:	2308      	movs	r3, #8
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	485e      	ldr	r0, [pc, #376]	; (8001cd0 <MX_GPIO_Init+0x2ec>)
 8001b56:	f002 fc4d 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001b5a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4855      	ldr	r0, [pc, #340]	; (8001ccc <MX_GPIO_Init+0x2e8>)
 8001b78:	f002 fc3c 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001b7c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b8e:	230a      	movs	r3, #10
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b96:	4619      	mov	r1, r3
 8001b98:	484e      	ldr	r0, [pc, #312]	; (8001cd4 <MX_GPIO_Init+0x2f0>)
 8001b9a:	f002 fc2b 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4846      	ldr	r0, [pc, #280]	; (8001cd4 <MX_GPIO_Init+0x2f0>)
 8001bba:	f002 fc1b 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4841      	ldr	r0, [pc, #260]	; (8001cd8 <MX_GPIO_Init+0x2f4>)
 8001bd4:	f002 fc0e 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <MX_GPIO_Init+0x2f8>)
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be8:	4619      	mov	r1, r3
 8001bea:	4834      	ldr	r0, [pc, #208]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001bec:	f002 fc02 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001bf0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c02:	230a      	movs	r3, #10
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4834      	ldr	r0, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0x2fc>)
 8001c0e:	f002 fbf1 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c12:	2320      	movs	r3, #32
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	4824      	ldr	r0, [pc, #144]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001c2a:	f002 fbe3 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001c2e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c44:	4619      	mov	r1, r3
 8001c46:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001c48:	f002 fbd4 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4820      	ldr	r0, [pc, #128]	; (8001ce4 <MX_GPIO_Init+0x300>)
 8001c62:	f002 fbc7 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c66:	2308      	movs	r3, #8
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_GPIO_Init+0x2e0>)
 8001c7e:	f002 fbb9 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c82:	2310      	movs	r3, #16
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001c96:	f002 fbad 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001c9a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_GPIO_Init+0x2e4>)
 8001cb0:	f002 fba0 	bl	80043f4 <HAL_GPIO_Init>
 8001cb4:	e018      	b.n	8001ce8 <MX_GPIO_Init+0x304>
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40022800 	.word	0x40022800
 8001cc8:	40021c00 	.word	0x40021c00
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40022400 	.word	0x40022400
 8001cdc:	10120000 	.word	0x10120000
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020800 	.word	0x40020800

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	484f      	ldr	r0, [pc, #316]	; (8001e40 <MX_GPIO_Init+0x45c>)
 8001d02:	f002 fb77 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	4848      	ldr	r0, [pc, #288]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001d24:	f002 fb66 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	483f      	ldr	r0, [pc, #252]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001d46:	f002 fb55 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <MX_GPIO_Init+0x464>)
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	483b      	ldr	r0, [pc, #236]	; (8001e4c <MX_GPIO_Init+0x468>)
 8001d60:	f002 fb48 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d64:	2310      	movs	r3, #16
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d74:	230a      	movs	r3, #10
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4830      	ldr	r0, [pc, #192]	; (8001e40 <MX_GPIO_Init+0x45c>)
 8001d80:	f002 fb38 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001d84:	23c8      	movs	r3, #200	; 0xc8
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482d      	ldr	r0, [pc, #180]	; (8001e50 <MX_GPIO_Init+0x46c>)
 8001d9c:	f002 fb2a 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001da0:	2305      	movs	r3, #5
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001db0:	230a      	movs	r3, #10
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	4619      	mov	r1, r3
 8001dba:	4826      	ldr	r0, [pc, #152]	; (8001e54 <MX_GPIO_Init+0x470>)
 8001dbc:	f002 fb1a 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dc0:	2332      	movs	r3, #50	; 0x32
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481e      	ldr	r0, [pc, #120]	; (8001e54 <MX_GPIO_Init+0x470>)
 8001ddc:	f002 fb0a 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001de0:	2304      	movs	r3, #4
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <MX_GPIO_Init+0x46c>)
 8001df4:	f002 fafe 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001df8:	2386      	movs	r3, #134	; 0x86
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e10:	4619      	mov	r1, r3
 8001e12:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001e14:	f002 faee 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e18:	2328      	movs	r3, #40	; 0x28
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e28:	230a      	movs	r3, #10
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e30:	4619      	mov	r1, r3
 8001e32:	4804      	ldr	r0, [pc, #16]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001e34:	f002 fade 	bl	80043f4 <HAL_GPIO_Init>

}
 8001e38:	bf00      	nop
 8001e3a:	3740      	adds	r7, #64	; 0x40
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021c00 	.word	0x40021c00
 8001e44:	40020000 	.word	0x40020000
 8001e48:	10120000 	.word	0x10120000
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40020800 	.word	0x40020800

08001e58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001e60:	f00c ff11 	bl	800ec86 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f009 ff05 	bl	800bc74 <osDelay>
 8001e6a:	e7fb      	b.n	8001e64 <StartDefaultTask+0xc>

08001e6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e7e:	f001 f8e7 	bl	8003050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40001000 	.word	0x40001000

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	210f      	movs	r1, #15
 8001eda:	f06f 0001 	mvn.w	r0, #1
 8001ede:	f001 fc5b 	bl	8003798 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_ADC_MspInit+0xa4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d13c      	bne.n	8001f8c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001f5a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f5e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f60:	2303      	movs	r3, #3
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480b      	ldr	r0, [pc, #44]	; (8001f9c <HAL_ADC_MspInit+0xac>)
 8001f70:	f002 fa40 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <HAL_ADC_MspInit+0xb0>)
 8001f88:	f002 fa34 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40012200 	.word	0x40012200
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40021400 	.word	0x40021400
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_CRC_MspInit+0x38>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10b      	bne.n	8001fce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023000 	.word	0x40023000
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a50      	ldr	r2, [pc, #320]	; (8002144 <HAL_DCMI_MspInit+0x160>)
 8002002:	4293      	cmp	r3, r2
 8002004:	f040 809a 	bne.w	800213c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002008:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6353      	str	r3, [r2, #52]	; 0x34
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	623b      	str	r3, [r7, #32]
 800201e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002020:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a3c      	ldr	r2, [pc, #240]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4a36      	ldr	r2, [pc, #216]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800206e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002072:	6313      	str	r3, [r2, #48]	; 0x30
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	4a30      	ldr	r2, [pc, #192]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6313      	str	r3, [r2, #48]	; 0x30
 800208c:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002098:	2360      	movs	r3, #96	; 0x60
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020a8:	230d      	movs	r3, #13
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4826      	ldr	r0, [pc, #152]	; (800214c <HAL_DCMI_MspInit+0x168>)
 80020b4:	f002 f99e 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80020b8:	2308      	movs	r3, #8
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020c8:	230d      	movs	r3, #13
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	4619      	mov	r1, r3
 80020d2:	481f      	ldr	r0, [pc, #124]	; (8002150 <HAL_DCMI_MspInit+0x16c>)
 80020d4:	f002 f98e 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80020d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020ea:	230d      	movs	r3, #13
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4817      	ldr	r0, [pc, #92]	; (8002154 <HAL_DCMI_MspInit+0x170>)
 80020f6:	f002 f97d 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80020fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800210c:	230d      	movs	r3, #13
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	4810      	ldr	r0, [pc, #64]	; (8002158 <HAL_DCMI_MspInit+0x174>)
 8002118:	f002 f96c 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800211c:	2350      	movs	r3, #80	; 0x50
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800212c:	230d      	movs	r3, #13
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_DCMI_MspInit+0x178>)
 8002138:	f002 f95c 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3738      	adds	r7, #56	; 0x38
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	50050000 	.word	0x50050000
 8002148:	40023800 	.word	0x40023800
 800214c:	40021000 	.word	0x40021000
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40020000 	.word	0x40020000

08002160 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_DMA2D_MspInit+0x44>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	205a      	movs	r0, #90	; 0x5a
 8002190:	f001 fb02 	bl	8003798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002194:	205a      	movs	r0, #90	; 0x5a
 8002196:	f001 fb1b 	bl	80037d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	4002b000 	.word	0x4002b000
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_DMA2D_MspDeInit+0x2c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_DMA2D_MspDeInit+0x30>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_DMA2D_MspDeInit+0x30>)
 80021c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80021ca:	205a      	movs	r0, #90	; 0x5a
 80021cc:	f001 fb0e 	bl	80037ec <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	4002b000 	.word	0x4002b000
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <HAL_I2C_MspInit+0xdc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d129      	bne.n	8002256 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800221a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002220:	2312      	movs	r3, #18
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002224:	2301      	movs	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222c:	2304      	movs	r3, #4
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4823      	ldr	r0, [pc, #140]	; (80022c4 <HAL_I2C_MspInit+0xe4>)
 8002238:	f002 f8dc 	bl	80043f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002246:	6413      	str	r3, [r2, #64]	; 0x40
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002254:	e02d      	b.n	80022b2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_I2C_MspInit+0xe8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d128      	bne.n	80022b2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002278:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227e:	2312      	movs	r3, #18
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002282:	2301      	movs	r3, #1
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800228a:	2304      	movs	r3, #4
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <HAL_I2C_MspInit+0xec>)
 8002296:	f002 f8ad 	bl	80043f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 80022a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	bf00      	nop
 80022b4:	3730      	adds	r7, #48	; 0x30
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40005400 	.word	0x40005400
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40005c00 	.word	0x40005c00
 80022cc:	40021c00 	.word	0x40021c00

080022d0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_I2C_MspDeInit+0x64>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d110      	bne.n	8002304 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 80022e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80022ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f2:	4812      	ldr	r0, [pc, #72]	; (800233c <HAL_I2C_MspDeInit+0x6c>)
 80022f4:	f002 fa28 	bl	8004748 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80022f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022fc:	480f      	ldr	r0, [pc, #60]	; (800233c <HAL_I2C_MspDeInit+0x6c>)
 80022fe:	f002 fa23 	bl	8004748 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002302:	e013      	b.n	800232c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_I2C_MspDeInit+0x70>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10e      	bne.n	800232c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 8002314:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	4809      	ldr	r0, [pc, #36]	; (8002344 <HAL_I2C_MspDeInit+0x74>)
 800231e:	f002 fa13 	bl	8004748 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <HAL_I2C_MspDeInit+0x74>)
 8002328:	f002 fa0e 	bl	8004748 <HAL_GPIO_DeInit>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40005400 	.word	0x40005400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020400 	.word	0x40020400
 8002340:	40005c00 	.word	0x40005c00
 8002344:	40021c00 	.word	0x40021c00

08002348 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	; 0x38
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_LTDC_MspInit+0x174>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f040 80a3 	bne.w	80024b2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800236c:	4b54      	ldr	r3, [pc, #336]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	4a53      	ldr	r2, [pc, #332]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002376:	6453      	str	r3, [r2, #68]	; 0x44
 8002378:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002384:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	6313      	str	r3, [r2, #48]	; 0x30
 8002390:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800239c:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a6:	6313      	str	r3, [r2, #48]	; 0x30
 80023a8:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80023b4:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	4a41      	ldr	r2, [pc, #260]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a35      	ldr	r2, [pc, #212]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80023fc:	2310      	movs	r3, #16
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800240c:	230e      	movs	r3, #14
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	482b      	ldr	r0, [pc, #172]	; (80024c4 <HAL_LTDC_MspInit+0x17c>)
 8002418:	f001 ffec 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800241c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800242e:	230e      	movs	r3, #14
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	4823      	ldr	r0, [pc, #140]	; (80024c8 <HAL_LTDC_MspInit+0x180>)
 800243a:	f001 ffdb 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800243e:	23f7      	movs	r3, #247	; 0xf7
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800244e:	230e      	movs	r3, #14
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	4619      	mov	r1, r3
 8002458:	481c      	ldr	r0, [pc, #112]	; (80024cc <HAL_LTDC_MspInit+0x184>)
 800245a:	f001 ffcb 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800245e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002470:	2309      	movs	r3, #9
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	4815      	ldr	r0, [pc, #84]	; (80024d0 <HAL_LTDC_MspInit+0x188>)
 800247c:	f001 ffba 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002480:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002492:	230e      	movs	r3, #14
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249a:	4619      	mov	r1, r3
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <HAL_LTDC_MspInit+0x18c>)
 800249e:	f001 ffa9 	bl	80043f4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2058      	movs	r0, #88	; 0x58
 80024a8:	f001 f976 	bl	8003798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024ac:	2058      	movs	r0, #88	; 0x58
 80024ae:	f001 f98f 	bl	80037d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3738      	adds	r7, #56	; 0x38
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40016800 	.word	0x40016800
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40022400 	.word	0x40022400
 80024cc:	40022800 	.word	0x40022800
 80024d0:	40021800 	.word	0x40021800
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_QSPI_MspInit+0x10c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d170      	bne.n	80025dc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	4a3a      	ldr	r2, [pc, #232]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6393      	str	r3, [r2, #56]	; 0x38
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800255a:	2304      	movs	r3, #4
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800256a:	2309      	movs	r3, #9
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	481d      	ldr	r0, [pc, #116]	; (80025ec <HAL_QSPI_MspInit+0x114>)
 8002576:	f001 ff3d 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800257a:	2340      	movs	r3, #64	; 0x40
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800258a:	230a      	movs	r3, #10
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4816      	ldr	r0, [pc, #88]	; (80025f0 <HAL_QSPI_MspInit+0x118>)
 8002596:	f001 ff2d 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259a:	2304      	movs	r3, #4
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025aa:	2309      	movs	r3, #9
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	480e      	ldr	r0, [pc, #56]	; (80025f0 <HAL_QSPI_MspInit+0x118>)
 80025b6:	f001 ff1d 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80025ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025cc:	2309      	movs	r3, #9
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4807      	ldr	r0, [pc, #28]	; (80025f4 <HAL_QSPI_MspInit+0x11c>)
 80025d8:	f001 ff0c 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	a0001000 	.word	0xa0001000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020c00 	.word	0x40020c00

080025f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_RTC_MspInit+0x2c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d105      	bne.n	8002616 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RTC_MspInit+0x30>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <HAL_RTC_MspInit+0x30>)
 8002610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40002800 	.word	0x40002800
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <HAL_SD_MspInit+0xb4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d144      	bne.n	80026d8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002696:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800269a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026a8:	230c      	movs	r3, #12
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <HAL_SD_MspInit+0xbc>)
 80026b4:	f001 fe9e 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80026b8:	2304      	movs	r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026c8:	230c      	movs	r3, #12
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <HAL_SD_MspInit+0xc0>)
 80026d4:	f001 fe8e 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020c00 	.word	0x40020c00

080026f0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002710:	d127      	bne.n	8002762 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002752:	2308      	movs	r3, #8
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <HAL_SPDIFRX_MspInit+0x80>)
 800275e:	f001 fe49 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40020c00 	.word	0x40020c00

08002774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_SPI_MspInit+0xb4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d144      	bne.n	8002820 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_SPI_MspInit+0xb8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_SPI_MspInit+0xb8>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80027de:	2302      	movs	r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ee:	2305      	movs	r3, #5
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <HAL_SPI_MspInit+0xbc>)
 80027fa:	f001 fdfb 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80027fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002810:	2305      	movs	r3, #5
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <HAL_SPI_MspInit+0xc0>)
 800281c:	f001 fdea 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40003800 	.word	0x40003800
 800282c:	40023800 	.word	0x40023800
 8002830:	40022000 	.word	0x40022000
 8002834:	40020400 	.word	0x40020400

08002838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d10c      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002862:	e034      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_TIM_Base_MspInit+0xa8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10c      	bne.n	8002888 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286e:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
}
 8002886:	e022      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <HAL_TIM_Base_MspInit+0xac>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10c      	bne.n	80028ac <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a11      	ldr	r2, [pc, #68]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	e010      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_TIM_Base_MspInit+0xb0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10b      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a08      	ldr	r2, [pc, #32]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40010400 	.word	0x40010400

080028ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_TIM_PWM_MspInit+0x38>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10b      	bne.n	8002916 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 8002904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40001800 	.word	0x40001800
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d11d      	bne.n	800298a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a42      	ldr	r2, [pc, #264]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002978:	2301      	movs	r3, #1
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	4837      	ldr	r0, [pc, #220]	; (8002a60 <HAL_TIM_MspPostInit+0x134>)
 8002984:	f001 fd36 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002988:	e064      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a35      	ldr	r2, [pc, #212]	; (8002a64 <HAL_TIM_MspPostInit+0x138>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d11c      	bne.n	80029ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80029ac:	2310      	movs	r3, #16
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029bc:	2302      	movs	r3, #2
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	4619      	mov	r1, r3
 80029c6:	4828      	ldr	r0, [pc, #160]	; (8002a68 <HAL_TIM_MspPostInit+0x13c>)
 80029c8:	f001 fd14 	bl	80043f4 <HAL_GPIO_Init>
}
 80029cc:	e042      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <HAL_TIM_MspPostInit+0x140>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d11c      	bne.n	8002a12 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6313      	str	r3, [r2, #48]	; 0x30
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80029f0:	2301      	movs	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4819      	ldr	r0, [pc, #100]	; (8002a70 <HAL_TIM_MspPostInit+0x144>)
 8002a0c:	f001 fcf2 	bl	80043f4 <HAL_GPIO_Init>
}
 8002a10:	e020      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_TIM_MspPostInit+0x148>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	6313      	str	r3, [r2, #48]	; 0x30
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002a34:	2340      	movs	r3, #64	; 0x40
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a44:	2309      	movs	r3, #9
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	480a      	ldr	r0, [pc, #40]	; (8002a78 <HAL_TIM_MspPostInit+0x14c>)
 8002a50:	f001 fcd0 	bl	80043f4 <HAL_GPIO_Init>
}
 8002a54:	bf00      	nop
 8002a56:	3730      	adds	r7, #48	; 0x30
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40000c00 	.word	0x40000c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40001800 	.word	0x40001800
 8002a78:	40021c00 	.word	0x40021c00

08002a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <HAL_UART_MspInit+0x7c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d127      	bne.n	8002aee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <HAL_UART_MspInit+0x80>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <HAL_UART_MspInit+0x80>)
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_UART_MspInit+0x80>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_UART_MspInit+0x80>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_UART_MspInit+0x80>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_UART_MspInit+0x80>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002ace:	23c0      	movs	r3, #192	; 0xc0
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4805      	ldr	r0, [pc, #20]	; (8002b00 <HAL_UART_MspInit+0x84>)
 8002aea:	f001 fc83 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40011400 	.word	0x40011400
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020800 	.word	0x40020800

08002b04 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b18:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <HAL_FMC_MspInit+0x100>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d16d      	bne.n	8002bfc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_FMC_MspInit+0x100>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b26:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_FMC_MspInit+0x104>)
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	4a37      	ldr	r2, [pc, #220]	; (8002c08 <HAL_FMC_MspInit+0x104>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6393      	str	r3, [r2, #56]	; 0x38
 8002b32:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_FMC_MspInit+0x104>)
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002b3e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b42:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b50:	230c      	movs	r3, #12
 8002b52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	482c      	ldr	r0, [pc, #176]	; (8002c0c <HAL_FMC_MspInit+0x108>)
 8002b5a:	f001 fc4b 	bl	80043f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002b5e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b62:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b70:	230c      	movs	r3, #12
 8002b72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4825      	ldr	r0, [pc, #148]	; (8002c10 <HAL_FMC_MspInit+0x10c>)
 8002b7a:	f001 fc3b 	bl	80043f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002b7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b82:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b90:	230c      	movs	r3, #12
 8002b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	481e      	ldr	r0, [pc, #120]	; (8002c14 <HAL_FMC_MspInit+0x110>)
 8002b9a:	f001 fc2b 	bl	80043f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002b9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002ba2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	2303      	movs	r3, #3
 8002bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4817      	ldr	r0, [pc, #92]	; (8002c18 <HAL_FMC_MspInit+0x114>)
 8002bba:	f001 fc1b 	bl	80043f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002bbe:	2328      	movs	r3, #40	; 0x28
 8002bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bce:	230c      	movs	r3, #12
 8002bd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4811      	ldr	r0, [pc, #68]	; (8002c1c <HAL_FMC_MspInit+0x118>)
 8002bd8:	f001 fc0c 	bl	80043f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002bdc:	2308      	movs	r3, #8
 8002bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bec:	230c      	movs	r3, #12
 8002bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	480a      	ldr	r0, [pc, #40]	; (8002c20 <HAL_FMC_MspInit+0x11c>)
 8002bf6:	f001 fbfd 	bl	80043f4 <HAL_GPIO_Init>
 8002bfa:	e000      	b.n	8002bfe <HAL_FMC_MspInit+0xfa>
    return;
 8002bfc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000388 	.word	0x20000388
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40021800 	.word	0x40021800
 8002c14:	40020c00 	.word	0x40020c00
 8002c18:	40021400 	.word	0x40021400
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40020800 	.word	0x40020800

08002c24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c2c:	f7ff ff6a 	bl	8002b04 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2b      	ldr	r2, [pc, #172]	; (8002cf4 <HAL_SAI_MspInit+0xbc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d124      	bne.n	8002c94 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_SAI_MspInit+0xc0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10b      	bne.n	8002c6a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002c52:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <HAL_SAI_MspInit+0xc4>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a29      	ldr	r2, [pc, #164]	; (8002cfc <HAL_SAI_MspInit+0xc4>)
 8002c58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_SAI_MspInit+0xc4>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_SAI_MspInit+0xc0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <HAL_SAI_MspInit+0xc0>)
 8002c72:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002c74:	23f0      	movs	r3, #240	; 0xf0
 8002c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c84:	230a      	movs	r3, #10
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	481c      	ldr	r0, [pc, #112]	; (8002d00 <HAL_SAI_MspInit+0xc8>)
 8002c90:	f001 fbb0 	bl	80043f4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_SAI_MspInit+0xcc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d125      	bne.n	8002cea <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_SAI_MspInit+0xc0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10b      	bne.n	8002cbe <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_SAI_MspInit+0xc4>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_SAI_MspInit+0xc4>)
 8002cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_SAI_MspInit+0xc4>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_SAI_MspInit+0xc0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <HAL_SAI_MspInit+0xc0>)
 8002cc6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cda:	230a      	movs	r3, #10
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4808      	ldr	r0, [pc, #32]	; (8002d08 <HAL_SAI_MspInit+0xd0>)
 8002ce6:	f001 fb85 	bl	80043f4 <HAL_GPIO_Init>

    }
}
 8002cea:	bf00      	nop
 8002cec:	3728      	adds	r7, #40	; 0x28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40015c04 	.word	0x40015c04
 8002cf8:	2000038c 	.word	0x2000038c
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40022000 	.word	0x40022000
 8002d04:	40015c24 	.word	0x40015c24
 8002d08:	40021800 	.word	0x40021800

08002d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	2036      	movs	r0, #54	; 0x36
 8002d22:	f000 fd39 	bl	8003798 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d26:	2036      	movs	r0, #54	; 0x36
 8002d28:	f000 fd52 	bl	80037d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <HAL_InitTick+0xa0>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_InitTick+0xa0>)
 8002d32:	f043 0310 	orr.w	r3, r3, #16
 8002d36:	6413      	str	r3, [r2, #64]	; 0x40
 8002d38:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_InitTick+0xa0>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d44:	f107 0210 	add.w	r2, r7, #16
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fd16 	bl	8006780 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d54:	f003 fcec 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <HAL_InitTick+0xa4>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0c9b      	lsrs	r3, r3, #18
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_InitTick+0xa8>)
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_InitTick+0xac>)
 8002d70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_InitTick+0xa8>)
 8002d74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_InitTick+0xa8>)
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_InitTick+0xa8>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_InitTick+0xa8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d8c:	4809      	ldr	r0, [pc, #36]	; (8002db4 <HAL_InitTick+0xa8>)
 8002d8e:	f006 f98f 	bl	80090b0 <HAL_TIM_Base_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d98:	4806      	ldr	r0, [pc, #24]	; (8002db4 <HAL_InitTick+0xa8>)
 8002d9a:	f006 f9b5 	bl	8009108 <HAL_TIM_Base_Start_IT>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	e000      	b.n	8002da4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3730      	adds	r7, #48	; 0x30
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	431bde83 	.word	0x431bde83
 8002db4:	2000bdb4 	.word	0x2000bdb4
 8002db8:	40001000 	.word	0x40001000

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <HardFault_Handler+0x4>

08002dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <MemManage_Handler+0x4>

08002dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <BusFault_Handler+0x4>

08002ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <UsageFault_Handler+0x4>

08002de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <TIM6_DAC_IRQHandler+0x10>)
 8002df6:	f006 f9dc 	bl	80091b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	2000bdb4 	.word	0x2000bdb4

08002e04 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <LTDC_IRQHandler+0x10>)
 8002e0a:	f002 fc59 	bl	80056c0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000ba6c 	.word	0x2000ba6c

08002e18 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA2D_IRQHandler+0x10>)
 8002e1e:	f001 f8aa 	bl	8003f76 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000bc70 	.word	0x2000bc70

08002e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
	return 1;
 8002e30:	2301      	movs	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_kill>:

int _kill(int pid, int sig)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e46:	f024 fc97 	bl	8027778 <__errno>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	2316      	movs	r3, #22
 8002e4e:	6013      	str	r3, [r2, #0]
	return -1;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_exit>:

void _exit (int status)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ffe7 	bl	8002e3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e6e:	e7fe      	b.n	8002e6e <_exit+0x12>

08002e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e00a      	b.n	8002e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e82:	f3af 8000 	nop.w
 8002e86:	4601      	mov	r1, r0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	60ba      	str	r2, [r7, #8]
 8002e8e:	b2ca      	uxtb	r2, r1
 8002e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3301      	adds	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	dbf0      	blt.n	8002e82 <_read+0x12>
	}

return len;
 8002ea0:	687b      	ldr	r3, [r7, #4]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e009      	b.n	8002ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf1      	blt.n	8002ebc <_write+0x12>
	}
	return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_close>:

int _close(int file)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_isatty>:

int _isatty(int file)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
	return 1;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <_sbrk+0x5c>)
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <_sbrk+0x60>)
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <_sbrk+0x64>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <_sbrk+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f7c:	f024 fbfc 	bl	8027778 <__errno>
 8002f80:	4602      	mov	r2, r0
 8002f82:	230c      	movs	r3, #12
 8002f84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	e009      	b.n	8002fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <_sbrk+0x64>)
 8002f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20050000 	.word	0x20050000
 8002fac:	00000400 	.word	0x00000400
 8002fb0:	20000390 	.word	0x20000390
 8002fb4:	2000c268 	.word	0x2000c268

08002fb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <SystemInit+0x28>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <SystemInit+0x28>)
 8002fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <SystemInit+0x28>)
 8002fce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fd2:	609a      	str	r2, [r3, #8]
#endif
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800301c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fe8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fea:	e003      	b.n	8002ff4 <LoopCopyDataInit>

08002fec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ff0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ff2:	3104      	adds	r1, #4

08002ff4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ff4:	480b      	ldr	r0, [pc, #44]	; (8003024 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ff8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ffa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ffc:	d3f6      	bcc.n	8002fec <CopyDataInit>
  ldr  r2, =_sbss
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003000:	e002      	b.n	8003008 <LoopFillZerobss>

08003002 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003002:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003004:	f842 3b04 	str.w	r3, [r2], #4

08003008 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800300a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800300c:	d3f9      	bcc.n	8003002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800300e:	f7ff ffd3 	bl	8002fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003012:	f024 fbc9 	bl	80277a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003016:	f7fd fcdb 	bl	80009d0 <main>
  bx  lr    
 800301a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800301c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003020:	080c1328 	.word	0x080c1328
  ldr  r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003028:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 800302c:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8003030:	2000c268 	.word	0x2000c268

08003034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC_IRQHandler>

08003036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303a:	2003      	movs	r0, #3
 800303c:	f000 fba1 	bl	8003782 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003040:	2000      	movs	r0, #0
 8003042:	f7ff fe63 	bl	8002d0c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003046:	f7fe ff2b 	bl	8001ea0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_IncTick+0x20>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_IncTick+0x24>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_IncTick+0x24>)
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000034 	.word	0x20000034
 8003074:	2000bdf4 	.word	0x2000bdf4

08003078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return uwTick;
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_GetTick+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	2000bdf4 	.word	0x2000bdf4

08003090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff ffee 	bl	8003078 <HAL_GetTick>
 800309c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d005      	beq.n	80030b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_Delay+0x40>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030b6:	bf00      	nop
 80030b8:	f7ff ffde 	bl	8003078 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d8f7      	bhi.n	80030b8 <HAL_Delay+0x28>
  {
  }
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000034 	.word	0x20000034

080030d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e031      	b.n	800314e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe fefc 	bl	8001ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d116      	bne.n	8003140 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_ADC_Init+0x84>)
 8003118:	4013      	ands	r3, r2
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f964 	bl	80033f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
 800313e:	e001      	b.n	8003144 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	ffffeefd 	.word	0xffffeefd

0800315c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x1c>
 8003174:	2302      	movs	r3, #2
 8003176:	e12a      	b.n	80033ce <HAL_ADC_ConfigChannel+0x272>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d93a      	bls.n	80031fe <HAL_ADC_ConfigChannel+0xa2>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003190:	d035      	beq.n	80031fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68d9      	ldr	r1, [r3, #12]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	3b1e      	subs	r3, #30
 80031a8:	2207      	movs	r2, #7
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	400a      	ands	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a87      	ldr	r2, [pc, #540]	; (80033dc <HAL_ADC_ConfigChannel+0x280>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10a      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68d9      	ldr	r1, [r3, #12]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	061a      	lsls	r2, r3, #24
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031d6:	e035      	b.n	8003244 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68d9      	ldr	r1, [r3, #12]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4403      	add	r3, r0
 80031f0:	3b1e      	subs	r3, #30
 80031f2:	409a      	lsls	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031fc:	e022      	b.n	8003244 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6919      	ldr	r1, [r3, #16]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	2207      	movs	r2, #7
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43da      	mvns	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	400a      	ands	r2, r1
 8003220:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6919      	ldr	r1, [r3, #16]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	4618      	mov	r0, r3
 8003234:	4603      	mov	r3, r0
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4403      	add	r3, r0
 800323a:	409a      	lsls	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b06      	cmp	r3, #6
 800324a:	d824      	bhi.n	8003296 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	3b05      	subs	r3, #5
 800325e:	221f      	movs	r2, #31
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43da      	mvns	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	400a      	ands	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	4618      	mov	r0, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	3b05      	subs	r3, #5
 8003288:	fa00 f203 	lsl.w	r2, r0, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	635a      	str	r2, [r3, #52]	; 0x34
 8003294:	e04c      	b.n	8003330 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b0c      	cmp	r3, #12
 800329c:	d824      	bhi.n	80032e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b23      	subs	r3, #35	; 0x23
 80032b0:	221f      	movs	r2, #31
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	400a      	ands	r2, r1
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	3b23      	subs	r3, #35	; 0x23
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
 80032e6:	e023      	b.n	8003330 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	3b41      	subs	r3, #65	; 0x41
 80032fa:	221f      	movs	r2, #31
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43da      	mvns	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	400a      	ands	r2, r1
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	4618      	mov	r0, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3b41      	subs	r3, #65	; 0x41
 8003324:	fa00 f203 	lsl.w	r2, r0, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <HAL_ADC_ConfigChannel+0x284>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10a      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x1f4>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003342:	d105      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_ADC_ConfigChannel+0x288>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <HAL_ADC_ConfigChannel+0x288>)
 800334a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800334e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <HAL_ADC_ConfigChannel+0x284>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d109      	bne.n	800336e <HAL_ADC_ConfigChannel+0x212>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b12      	cmp	r3, #18
 8003360:	d105      	bne.n	800336e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_ADC_ConfigChannel+0x288>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <HAL_ADC_ConfigChannel+0x288>)
 8003368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800336c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_ADC_ConfigChannel+0x284>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d125      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x268>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a17      	ldr	r2, [pc, #92]	; (80033dc <HAL_ADC_ConfigChannel+0x280>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <HAL_ADC_ConfigChannel+0x22e>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b11      	cmp	r3, #17
 8003388:	d11c      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800338a:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_ADC_ConfigChannel+0x288>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <HAL_ADC_ConfigChannel+0x288>)
 8003390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003394:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_ADC_ConfigChannel+0x280>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d111      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_ADC_ConfigChannel+0x28c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a11      	ldr	r2, [pc, #68]	; (80033ec <HAL_ADC_ConfigChannel+0x290>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0c9a      	lsrs	r2, r3, #18
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033b6:	e002      	b.n	80033be <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	10000012 	.word	0x10000012
 80033e0:	40012000 	.word	0x40012000
 80033e4:	40012300 	.word	0x40012300
 80033e8:	2000002c 	.word	0x2000002c
 80033ec:	431bde83 	.word	0x431bde83

080033f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80033f8:	4b78      	ldr	r3, [pc, #480]	; (80035dc <ADC_Init+0x1ec>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a77      	ldr	r2, [pc, #476]	; (80035dc <ADC_Init+0x1ec>)
 80033fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003402:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003404:	4b75      	ldr	r3, [pc, #468]	; (80035dc <ADC_Init+0x1ec>)
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4973      	ldr	r1, [pc, #460]	; (80035dc <ADC_Init+0x1ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	021a      	lsls	r2, r3, #8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6899      	ldr	r1, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	4a58      	ldr	r2, [pc, #352]	; (80035e0 <ADC_Init+0x1f0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6899      	ldr	r1, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6899      	ldr	r1, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	e00f      	b.n	80034ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0202 	bic.w	r2, r2, #2
 80034f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	005a      	lsls	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003526:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	3b01      	subs	r3, #1
 8003544:	035a      	lsls	r2, r3, #13
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	e007      	b.n	8003560 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	3b01      	subs	r3, #1
 800357c:	051a      	lsls	r2, r3, #20
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6899      	ldr	r1, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035a2:	025a      	lsls	r2, r3, #9
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6899      	ldr	r1, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	029a      	lsls	r2, r3, #10
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40012300 	.word	0x40012300
 80035e0:	0f000001 	.word	0x0f000001

080035e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <__NVIC_SetPriorityGrouping+0x40>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003612:	4a04      	ldr	r2, [pc, #16]	; (8003624 <__NVIC_SetPriorityGrouping+0x40>)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	60d3      	str	r3, [r2, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00
 8003628:	05fa0000 	.word	0x05fa0000

0800362c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <__NVIC_GetPriorityGrouping+0x18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0307 	and.w	r3, r3, #7
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4907      	ldr	r1, [pc, #28]	; (8003680 <__NVIC_EnableIRQ+0x38>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	db10      	blt.n	80036b8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	4909      	ldr	r1, [pc, #36]	; (80036c4 <__NVIC_DisableIRQ+0x40>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2001      	movs	r0, #1
 80036a6:	fa00 f202 	lsl.w	r2, r0, r2
 80036aa:	3320      	adds	r3, #32
 80036ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100

080036c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	db0a      	blt.n	80036f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	490c      	ldr	r1, [pc, #48]	; (8003714 <__NVIC_SetPriority+0x4c>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f0:	e00a      	b.n	8003708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4908      	ldr	r1, [pc, #32]	; (8003718 <__NVIC_SetPriority+0x50>)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	3b04      	subs	r3, #4
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	440b      	add	r3, r1
 8003706:	761a      	strb	r2, [r3, #24]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f1c3 0307 	rsb	r3, r3, #7
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf28      	it	cs
 800373a:	2304      	movcs	r3, #4
 800373c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3304      	adds	r3, #4
 8003742:	2b06      	cmp	r3, #6
 8003744:	d902      	bls.n	800374c <NVIC_EncodePriority+0x30>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3b03      	subs	r3, #3
 800374a:	e000      	b.n	800374e <NVIC_EncodePriority+0x32>
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	401a      	ands	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003764:	f04f 31ff 	mov.w	r1, #4294967295
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	43d9      	mvns	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	4313      	orrs	r3, r2
         );
}
 8003776:	4618      	mov	r0, r3
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff2a 	bl	80035e4 <__NVIC_SetPriorityGrouping>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037aa:	f7ff ff3f 	bl	800362c <__NVIC_GetPriorityGrouping>
 80037ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	6978      	ldr	r0, [r7, #20]
 80037b6:	f7ff ffb1 	bl	800371c <NVIC_EncodePriority>
 80037ba:	4602      	mov	r2, r0
 80037bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff ff80 	bl	80036c8 <__NVIC_SetPriority>
}
 80037c8:	bf00      	nop
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff32 	bl	8003648 <__NVIC_EnableIRQ>
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff ff42 	bl	8003684 <__NVIC_DisableIRQ>
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e054      	b.n	80038c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7f5b      	ldrb	r3, [r3, #29]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe fbba 	bl	8001fa4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	791b      	ldrb	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a22      	ldr	r2, [pc, #136]	; (80038cc <HAL_CRC_Init+0xc4>)
 8003844:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0218 	bic.w	r2, r2, #24
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	e00c      	b.n	8003872 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6899      	ldr	r1, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	461a      	mov	r2, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f834 	bl	80038d0 <HAL_CRCEx_Polynomial_Set>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e028      	b.n	80038c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	795b      	ldrb	r3, [r3, #5]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f04f 32ff 	mov.w	r2, #4294967295
 8003882:	611a      	str	r2, [r3, #16]
 8003884:	e004      	b.n	8003890 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6912      	ldr	r2, [r2, #16]
 800388e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	04c11db7 	.word	0x04c11db7

080038d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80038e0:	231f      	movs	r3, #31
 80038e2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80038e4:	bf00      	nop
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	613a      	str	r2, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <HAL_CRCEx_Polynomial_Set+0x34>
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b18      	cmp	r3, #24
 8003908:	d846      	bhi.n	8003998 <HAL_CRCEx_Polynomial_Set+0xc8>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_CRCEx_Polynomial_Set+0x40>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	0800399f 	.word	0x0800399f
 8003914:	08003999 	.word	0x08003999
 8003918:	08003999 	.word	0x08003999
 800391c:	08003999 	.word	0x08003999
 8003920:	08003999 	.word	0x08003999
 8003924:	08003999 	.word	0x08003999
 8003928:	08003999 	.word	0x08003999
 800392c:	08003999 	.word	0x08003999
 8003930:	0800398d 	.word	0x0800398d
 8003934:	08003999 	.word	0x08003999
 8003938:	08003999 	.word	0x08003999
 800393c:	08003999 	.word	0x08003999
 8003940:	08003999 	.word	0x08003999
 8003944:	08003999 	.word	0x08003999
 8003948:	08003999 	.word	0x08003999
 800394c:	08003999 	.word	0x08003999
 8003950:	08003981 	.word	0x08003981
 8003954:	08003999 	.word	0x08003999
 8003958:	08003999 	.word	0x08003999
 800395c:	08003999 	.word	0x08003999
 8003960:	08003999 	.word	0x08003999
 8003964:	08003999 	.word	0x08003999
 8003968:	08003999 	.word	0x08003999
 800396c:	08003999 	.word	0x08003999
 8003970:	08003975 	.word	0x08003975
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b06      	cmp	r3, #6
 8003978:	d913      	bls.n	80039a2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800397e:	e010      	b.n	80039a2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b07      	cmp	r3, #7
 8003984:	d90f      	bls.n	80039a6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800398a:	e00c      	b.n	80039a6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d90b      	bls.n	80039aa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003996:	e008      	b.n	80039aa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
      break;
 800399c:	e006      	b.n	80039ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800399e:	bf00      	nop
 80039a0:	e004      	b.n	80039ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039a2:	bf00      	nop
 80039a4:	e002      	b.n	80039ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039aa:	bf00      	nop
  }
  if (status == HAL_OK)
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f023 0118 	bic.w	r1, r3, #24
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e069      	b.n	8003ac2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fe faf2 	bl	8001fe4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b2a      	ldr	r3, [pc, #168]	; (8003acc <HAL_DCMI_Init+0xf0>)
 8003a22:	400b      	ands	r3, r1
 8003a24:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a3a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a46:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a52:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a6a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d112      	bne.n	8003aa2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7f1b      	ldrb	r3, [r3, #28]
 8003a80:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7f5b      	ldrb	r3, [r3, #29]
 8003a86:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003a88:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7f9b      	ldrb	r3, [r3, #30]
 8003a8e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003a90:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	7fdb      	ldrb	r3, [r3, #31]
 8003a98:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003a9e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003aa0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 021e 	orr.w	r2, r2, #30
 8003ab0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	ffe0f007 	.word	0xffe0f007

08003ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_DMA_Start_IT+0x26>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e048      	b.n	8003b88 <HAL_DMA_Start_IT+0xb8>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d137      	bne.n	8003b7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f842 	bl	8003ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	223f      	movs	r2, #63	; 0x3f
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0216 	orr.w	r2, r2, #22
 8003b3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b4e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0208 	orr.w	r2, r2, #8
 8003b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e005      	b.n	8003b86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
 8003b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d108      	bne.n	8003be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003be6:	e007      	b.n	8003bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e039      	b.n	8003c8a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fe fa98 	bl	8002160 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	f023 0107 	bic.w	r1, r3, #7
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_DMA2D_Init+0x90>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68d1      	ldr	r1, [r2, #12]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	ffffc000 	.word	0xffffc000

08003c98 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e05f      	b.n	8003d6a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003caa:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <HAL_DMA2D_DeInit+0xdc>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d02e      	beq.n	8003d14 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d107      	bne.n	8003cd4 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8c1 	bl	8003e4c <HAL_DMA2D_Abort>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d021      	beq.n	8003d14 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e04a      	b.n	8003d6a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d108      	bne.n	8003cf4 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f8f7 	bl	8003ed8 <HAL_DMA2D_CLUTLoading_Abort>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d011      	beq.n	8003d14 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e03a      	b.n	8003d6a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d108      	bne.n	8003d14 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003d02:	2101      	movs	r1, #1
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8e7 	bl	8003ed8 <HAL_DMA2D_CLUTLoading_Abort>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e02a      	b.n	8003d6a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	223f      	movs	r2, #63	; 0x3f
 8003d22:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2200      	movs	r2, #0
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fe fa2d 	bl	80021ac <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800

08003d78 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_DMA2D_Start_IT+0x1c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e020      	b.n	8003dd6 <HAL_DMA2D_Start_IT+0x5e>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fa84 	bl	80042bc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af02      	add	r7, sp, #8
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e024      	b.n	8003e44 <HAL_DMA2D_BlendingStart_IT+0x66>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fa4d 	bl	80042bc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003e30:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 0205 	bic.w	r2, r3, #5
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0204 	orr.w	r2, r2, #4
 8003e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e68:	f7ff f906 	bl	8003078 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e6e:	e017      	b.n	8003ea0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003e70:	f7ff f902 	bl	8003078 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e7e:	d90f      	bls.n	8003ea0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e017      	b.n	8003ed0 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e0      	bne.n	8003e70 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0204 	orr.w	r2, r2, #4
 8003ef8:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d103      	bne.n	8003f08 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	331c      	adds	r3, #28
 8003f06:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003f08:	f7ff f8b6 	bl	8003078 <HAL_GetTick>
 8003f0c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003f0e:	e017      	b.n	8003f40 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003f10:	f7ff f8b2 	bl	8003078 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1e:	d90f      	bls.n	8003f40 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2203      	movs	r2, #3
 8003f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e016      	b.n	8003f6e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e1      	bne.n	8003f10 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d026      	beq.n	8003fe6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d021      	beq.n	8003fe6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d026      	beq.n	800403e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d021      	beq.n	800403e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004008:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2220      	movs	r2, #32
 8004010:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2204      	movs	r2, #4
 8004022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d026      	beq.n	8004096 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404e:	2b00      	cmp	r3, #0
 8004050:	d021      	beq.n	8004096 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004060:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2208      	movs	r2, #8
 8004068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	f043 0204 	orr.w	r2, r3, #4
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2204      	movs	r2, #4
 800407a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2204      	movs	r2, #4
 80040c0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f853 	bl	800416e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d024      	beq.n	800411c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01f      	beq.n	800411c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040ea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2202      	movs	r2, #2
 80040f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01f      	beq.n	8004166 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01a      	beq.n	8004166 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800413e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2210      	movs	r2, #16
 8004146:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f80e 	bl	8004182 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_DMA2D_ConfigLayer+0x20>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e079      	b.n	80042ac <HAL_DMA2D_ConfigLayer+0x114>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	3318      	adds	r3, #24
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80041e2:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <HAL_DMA2D_ConfigLayer+0x120>)
 80041e4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b0a      	cmp	r3, #10
 80041ec:	d003      	beq.n	80041f6 <HAL_DMA2D_ConfigLayer+0x5e>
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b09      	cmp	r3, #9
 80041f4:	d107      	bne.n	8004206 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e005      	b.n	8004212 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d120      	bne.n	800425a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	43db      	mvns	r3, r3
 8004222:	ea02 0103 	and.w	r1, r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	430a      	orrs	r2, r1
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b0a      	cmp	r3, #10
 8004240:	d003      	beq.n	800424a <HAL_DMA2D_ConfigLayer+0xb2>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b09      	cmp	r3, #9
 8004248:	d127      	bne.n	800429a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
 8004258:	e01f      	b.n	800429a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43db      	mvns	r3, r3
 8004264:	ea02 0103 	and.w	r1, r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	430a      	orrs	r2, r1
 8004270:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b0a      	cmp	r3, #10
 8004282:	d003      	beq.n	800428c <HAL_DMA2D_ConfigLayer+0xf4>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b09      	cmp	r3, #9
 800428a:	d106      	bne.n	800429a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004298:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	ff03000f 	.word	0xff03000f

080042bc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80042bc:	b480      	push	{r7}
 80042be:	b08b      	sub	sp, #44	; 0x2c
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	041a      	lsls	r2, r3, #16
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	431a      	orrs	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f4:	d174      	bne.n	80043e0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80042fc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004304:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800430c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d108      	bne.n	800432e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	431a      	orrs	r2, r3
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	4313      	orrs	r3, r2
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	e053      	b.n	80043d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d106      	bne.n	8004344 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4313      	orrs	r3, r2
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
 8004342:	e048      	b.n	80043d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d111      	bne.n	8004370 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	0cdb      	lsrs	r3, r3, #19
 8004350:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	0a9b      	lsrs	r3, r3, #10
 8004356:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	08db      	lsrs	r3, r3, #3
 800435c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	02db      	lsls	r3, r3, #11
 8004366:	4313      	orrs	r3, r2
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	e032      	b.n	80043d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d117      	bne.n	80043a8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	0fdb      	lsrs	r3, r3, #31
 800437c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	0cdb      	lsrs	r3, r3, #19
 8004382:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	0adb      	lsrs	r3, r3, #11
 8004388:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	029b      	lsls	r3, r3, #10
 8004398:	431a      	orrs	r2, r3
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	03db      	lsls	r3, r3, #15
 800439e:	4313      	orrs	r3, r2
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
 80043a6:	e016      	b.n	80043d6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	0f1b      	lsrs	r3, r3, #28
 80043ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	0d1b      	lsrs	r3, r3, #20
 80043b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	0b1b      	lsrs	r3, r3, #12
 80043b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	011a      	lsls	r2, r3, #4
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	431a      	orrs	r2, r3
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	4313      	orrs	r3, r2
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80043de:	e003      	b.n	80043e8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	60da      	str	r2, [r3, #12]
}
 80043e8:	bf00      	nop
 80043ea:	372c      	adds	r7, #44	; 0x2c
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e175      	b.n	8004700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004414:	2201      	movs	r2, #1
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	429a      	cmp	r2, r3
 800442e:	f040 8164 	bne.w	80046fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d00b      	beq.n	8004452 <HAL_GPIO_Init+0x5e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d007      	beq.n	8004452 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004446:	2b11      	cmp	r3, #17
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b12      	cmp	r3, #18
 8004450:	d130      	bne.n	80044b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	2203      	movs	r2, #3
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004488:	2201      	movs	r2, #1
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 0201 	and.w	r2, r3, #1
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	2203      	movs	r2, #3
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d003      	beq.n	80044f4 <HAL_GPIO_Init+0x100>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b12      	cmp	r3, #18
 80044f2:	d123      	bne.n	800453c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	08da      	lsrs	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3208      	adds	r2, #8
 80044fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	220f      	movs	r2, #15
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	08da      	lsrs	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3208      	adds	r2, #8
 8004536:	69b9      	ldr	r1, [r7, #24]
 8004538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	2203      	movs	r2, #3
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0203 	and.w	r2, r3, #3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80be 	beq.w	80046fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_GPIO_Init+0x320>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	4a64      	ldr	r2, [pc, #400]	; (8004714 <HAL_GPIO_Init+0x320>)
 8004584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004588:	6453      	str	r3, [r2, #68]	; 0x44
 800458a:	4b62      	ldr	r3, [pc, #392]	; (8004714 <HAL_GPIO_Init+0x320>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004596:	4a60      	ldr	r2, [pc, #384]	; (8004718 <HAL_GPIO_Init+0x324>)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	3302      	adds	r3, #2
 800459e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a57      	ldr	r2, [pc, #348]	; (800471c <HAL_GPIO_Init+0x328>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d037      	beq.n	8004632 <HAL_GPIO_Init+0x23e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a56      	ldr	r2, [pc, #344]	; (8004720 <HAL_GPIO_Init+0x32c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d031      	beq.n	800462e <HAL_GPIO_Init+0x23a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a55      	ldr	r2, [pc, #340]	; (8004724 <HAL_GPIO_Init+0x330>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d02b      	beq.n	800462a <HAL_GPIO_Init+0x236>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a54      	ldr	r2, [pc, #336]	; (8004728 <HAL_GPIO_Init+0x334>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d025      	beq.n	8004626 <HAL_GPIO_Init+0x232>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a53      	ldr	r2, [pc, #332]	; (800472c <HAL_GPIO_Init+0x338>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <HAL_GPIO_Init+0x22e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_GPIO_Init+0x33c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d019      	beq.n	800461e <HAL_GPIO_Init+0x22a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a51      	ldr	r2, [pc, #324]	; (8004734 <HAL_GPIO_Init+0x340>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_GPIO_Init+0x226>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a50      	ldr	r2, [pc, #320]	; (8004738 <HAL_GPIO_Init+0x344>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00d      	beq.n	8004616 <HAL_GPIO_Init+0x222>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4f      	ldr	r2, [pc, #316]	; (800473c <HAL_GPIO_Init+0x348>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d007      	beq.n	8004612 <HAL_GPIO_Init+0x21e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4e      	ldr	r2, [pc, #312]	; (8004740 <HAL_GPIO_Init+0x34c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_GPIO_Init+0x21a>
 800460a:	2309      	movs	r3, #9
 800460c:	e012      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800460e:	230a      	movs	r3, #10
 8004610:	e010      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004612:	2308      	movs	r3, #8
 8004614:	e00e      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004616:	2307      	movs	r3, #7
 8004618:	e00c      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800461a:	2306      	movs	r3, #6
 800461c:	e00a      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800461e:	2305      	movs	r3, #5
 8004620:	e008      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004622:	2304      	movs	r3, #4
 8004624:	e006      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004626:	2303      	movs	r3, #3
 8004628:	e004      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800462a:	2302      	movs	r3, #2
 800462c:	e002      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004632:	2300      	movs	r3, #0
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	f002 0203 	and.w	r2, r2, #3
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	4093      	lsls	r3, r2
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004644:	4934      	ldr	r1, [pc, #208]	; (8004718 <HAL_GPIO_Init+0x324>)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	3302      	adds	r3, #2
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004652:	4b3c      	ldr	r3, [pc, #240]	; (8004744 <HAL_GPIO_Init+0x350>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004676:	4a33      	ldr	r2, [pc, #204]	; (8004744 <HAL_GPIO_Init+0x350>)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_GPIO_Init+0x350>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046a0:	4a28      	ldr	r2, [pc, #160]	; (8004744 <HAL_GPIO_Init+0x350>)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046a6:	4b27      	ldr	r3, [pc, #156]	; (8004744 <HAL_GPIO_Init+0x350>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <HAL_GPIO_Init+0x350>)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046d0:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <HAL_GPIO_Init+0x350>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046f4:	4a13      	ldr	r2, [pc, #76]	; (8004744 <HAL_GPIO_Init+0x350>)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	f67f ae86 	bls.w	8004414 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004708:	bf00      	nop
 800470a:	3724      	adds	r7, #36	; 0x24
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40023800 	.word	0x40023800
 8004718:	40013800 	.word	0x40013800
 800471c:	40020000 	.word	0x40020000
 8004720:	40020400 	.word	0x40020400
 8004724:	40020800 	.word	0x40020800
 8004728:	40020c00 	.word	0x40020c00
 800472c:	40021000 	.word	0x40021000
 8004730:	40021400 	.word	0x40021400
 8004734:	40021800 	.word	0x40021800
 8004738:	40021c00 	.word	0x40021c00
 800473c:	40022000 	.word	0x40022000
 8004740:	40022400 	.word	0x40022400
 8004744:	40013c00 	.word	0x40013c00

08004748 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e0d9      	b.n	8004918 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004764:	2201      	movs	r2, #1
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	429a      	cmp	r2, r3
 800477c:	f040 80c9 	bne.w	8004912 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004780:	4a6a      	ldr	r2, [pc, #424]	; (800492c <HAL_GPIO_DeInit+0x1e4>)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	3302      	adds	r3, #2
 8004788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	220f      	movs	r2, #15
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	4013      	ands	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a62      	ldr	r2, [pc, #392]	; (8004930 <HAL_GPIO_DeInit+0x1e8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d037      	beq.n	800481a <HAL_GPIO_DeInit+0xd2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a61      	ldr	r2, [pc, #388]	; (8004934 <HAL_GPIO_DeInit+0x1ec>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d031      	beq.n	8004816 <HAL_GPIO_DeInit+0xce>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a60      	ldr	r2, [pc, #384]	; (8004938 <HAL_GPIO_DeInit+0x1f0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02b      	beq.n	8004812 <HAL_GPIO_DeInit+0xca>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a5f      	ldr	r2, [pc, #380]	; (800493c <HAL_GPIO_DeInit+0x1f4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d025      	beq.n	800480e <HAL_GPIO_DeInit+0xc6>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a5e      	ldr	r2, [pc, #376]	; (8004940 <HAL_GPIO_DeInit+0x1f8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01f      	beq.n	800480a <HAL_GPIO_DeInit+0xc2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a5d      	ldr	r2, [pc, #372]	; (8004944 <HAL_GPIO_DeInit+0x1fc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d019      	beq.n	8004806 <HAL_GPIO_DeInit+0xbe>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a5c      	ldr	r2, [pc, #368]	; (8004948 <HAL_GPIO_DeInit+0x200>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_GPIO_DeInit+0xba>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a5b      	ldr	r2, [pc, #364]	; (800494c <HAL_GPIO_DeInit+0x204>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00d      	beq.n	80047fe <HAL_GPIO_DeInit+0xb6>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a5a      	ldr	r2, [pc, #360]	; (8004950 <HAL_GPIO_DeInit+0x208>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <HAL_GPIO_DeInit+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a59      	ldr	r2, [pc, #356]	; (8004954 <HAL_GPIO_DeInit+0x20c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d101      	bne.n	80047f6 <HAL_GPIO_DeInit+0xae>
 80047f2:	2309      	movs	r3, #9
 80047f4:	e012      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 80047f6:	230a      	movs	r3, #10
 80047f8:	e010      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 80047fa:	2308      	movs	r3, #8
 80047fc:	e00e      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 80047fe:	2307      	movs	r3, #7
 8004800:	e00c      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 8004802:	2306      	movs	r3, #6
 8004804:	e00a      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 8004806:	2305      	movs	r3, #5
 8004808:	e008      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 800480a:	2304      	movs	r3, #4
 800480c:	e006      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 800480e:	2303      	movs	r3, #3
 8004810:	e004      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 8004812:	2302      	movs	r3, #2
 8004814:	e002      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_GPIO_DeInit+0xd4>
 800481a:	2300      	movs	r3, #0
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	f002 0203 	and.w	r2, r2, #3
 8004822:	0092      	lsls	r2, r2, #2
 8004824:	4093      	lsls	r3, r2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	d132      	bne.n	8004892 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800482c:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_GPIO_DeInit+0x210>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	43db      	mvns	r3, r3
 8004834:	4948      	ldr	r1, [pc, #288]	; (8004958 <HAL_GPIO_DeInit+0x210>)
 8004836:	4013      	ands	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_GPIO_DeInit+0x210>)
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	43db      	mvns	r3, r3
 8004842:	4945      	ldr	r1, [pc, #276]	; (8004958 <HAL_GPIO_DeInit+0x210>)
 8004844:	4013      	ands	r3, r2
 8004846:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004848:	4b43      	ldr	r3, [pc, #268]	; (8004958 <HAL_GPIO_DeInit+0x210>)
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43db      	mvns	r3, r3
 8004850:	4941      	ldr	r1, [pc, #260]	; (8004958 <HAL_GPIO_DeInit+0x210>)
 8004852:	4013      	ands	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004856:	4b40      	ldr	r3, [pc, #256]	; (8004958 <HAL_GPIO_DeInit+0x210>)
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	43db      	mvns	r3, r3
 800485e:	493e      	ldr	r1, [pc, #248]	; (8004958 <HAL_GPIO_DeInit+0x210>)
 8004860:	4013      	ands	r3, r2
 8004862:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	220f      	movs	r2, #15
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004874:	4a2d      	ldr	r2, [pc, #180]	; (800492c <HAL_GPIO_DeInit+0x1e4>)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	3302      	adds	r3, #2
 800487c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	43da      	mvns	r2, r3
 8004884:	4829      	ldr	r0, [pc, #164]	; (800492c <HAL_GPIO_DeInit+0x1e4>)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	400a      	ands	r2, r1
 800488c:	3302      	adds	r3, #2
 800488e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	2103      	movs	r1, #3
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	401a      	ands	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	08da      	lsrs	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3208      	adds	r2, #8
 80048b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	220f      	movs	r2, #15
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	08d2      	lsrs	r2, r2, #3
 80048c8:	4019      	ands	r1, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3208      	adds	r2, #8
 80048ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	2103      	movs	r1, #3
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	401a      	ands	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	2101      	movs	r1, #1
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	401a      	ands	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	2103      	movs	r1, #3
 8004906:	fa01 f303 	lsl.w	r3, r1, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	401a      	ands	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	3301      	adds	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b0f      	cmp	r3, #15
 800491c:	f67f af22 	bls.w	8004764 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40013800 	.word	0x40013800
 8004930:	40020000 	.word	0x40020000
 8004934:	40020400 	.word	0x40020400
 8004938:	40020800 	.word	0x40020800
 800493c:	40020c00 	.word	0x40020c00
 8004940:	40021000 	.word	0x40021000
 8004944:	40021400 	.word	0x40021400
 8004948:	40021800 	.word	0x40021800
 800494c:	40021c00 	.word	0x40021c00
 8004950:	40022000 	.word	0x40022000
 8004954:	40022400 	.word	0x40022400
 8004958:	40013c00 	.word	0x40013c00

0800495c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	887b      	ldrh	r3, [r7, #2]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e001      	b.n	800497e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	807b      	strh	r3, [r7, #2]
 8004998:	4613      	mov	r3, r2
 800499a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800499c:	787b      	ldrb	r3, [r7, #1]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a2:	887a      	ldrh	r2, [r7, #2]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049a8:	e003      	b.n	80049b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049aa:	887b      	ldrh	r3, [r7, #2]
 80049ac:	041a      	lsls	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e07f      	b.n	8004ad2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fd fbfa 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	; 0x24
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d107      	bne.n	8004a3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	e006      	b.n	8004a48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d104      	bne.n	8004a5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_I2C_Init+0x11c>)
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	ea42 0103 	orr.w	r1, r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69d9      	ldr	r1, [r3, #28]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1a      	ldr	r2, [r3, #32]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	02008000 	.word	0x02008000

08004ae0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e021      	b.n	8004b36 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2224      	movs	r2, #36	; 0x24
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0201 	bic.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd fbe0 	bl	80022d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	817b      	strh	r3, [r7, #10]
 8004b52:	460b      	mov	r3, r1
 8004b54:	813b      	strh	r3, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	f040 80f9 	bne.w	8004d5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_I2C_Mem_Write+0x34>
 8004b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0ed      	b.n	8004d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Mem_Write+0x4e>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0e6      	b.n	8004d5c <HAL_I2C_Mem_Write+0x21c>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b96:	f7fe fa6f 	bl	8003078 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2319      	movs	r3, #25
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fad1 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0d1      	b.n	8004d5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2221      	movs	r2, #33	; 0x21
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2240      	movs	r2, #64	; 0x40
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be0:	88f8      	ldrh	r0, [r7, #6]
 8004be2:	893a      	ldrh	r2, [r7, #8]
 8004be4:	8979      	ldrh	r1, [r7, #10]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4603      	mov	r3, r0
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f9e1 	bl	8004fb8 <I2C_RequestMemoryWrite>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0a9      	b.n	8004d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2bff      	cmp	r3, #255	; 0xff
 8004c10:	d90e      	bls.n	8004c30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	8979      	ldrh	r1, [r7, #10]
 8004c20:	2300      	movs	r3, #0
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fbb3 	bl	8005394 <I2C_TransferConfig>
 8004c2e:	e00f      	b.n	8004c50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	8979      	ldrh	r1, [r7, #10]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fba2 	bl	8005394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fabb 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e07b      	b.n	8004d5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d034      	beq.n	8004d08 <HAL_I2C_Mem_Write+0x1c8>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d130      	bne.n	8004d08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	2200      	movs	r2, #0
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fa4d 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e04d      	b.n	8004d5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2bff      	cmp	r3, #255	; 0xff
 8004cc8:	d90e      	bls.n	8004ce8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	22ff      	movs	r2, #255	; 0xff
 8004cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	8979      	ldrh	r1, [r7, #10]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fb57 	bl	8005394 <I2C_TransferConfig>
 8004ce6:	e00f      	b.n	8004d08 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	8979      	ldrh	r1, [r7, #10]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fb46 	bl	8005394 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d19e      	bne.n	8004c50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa9a 	bl	8005250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e01a      	b.n	8004d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <HAL_I2C_Mem_Write+0x224>)
 8004d3a:	400b      	ands	r3, r1
 8004d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	fe00e800 	.word	0xfe00e800

08004d68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	817b      	strh	r3, [r7, #10]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	813b      	strh	r3, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	f040 80fd 	bne.w	8004f8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_I2C_Mem_Read+0x34>
 8004d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d105      	bne.n	8004da8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0f1      	b.n	8004f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_I2C_Mem_Read+0x4e>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e0ea      	b.n	8004f8c <HAL_I2C_Mem_Read+0x224>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dbe:	f7fe f95b 	bl	8003078 <HAL_GetTick>
 8004dc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2319      	movs	r3, #25
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f9bd 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0d5      	b.n	8004f8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2222      	movs	r2, #34	; 0x22
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2240      	movs	r2, #64	; 0x40
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e08:	88f8      	ldrh	r0, [r7, #6]
 8004e0a:	893a      	ldrh	r2, [r7, #8]
 8004e0c:	8979      	ldrh	r1, [r7, #10]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	4603      	mov	r3, r0
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f921 	bl	8005060 <I2C_RequestMemoryRead>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0ad      	b.n	8004f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2bff      	cmp	r3, #255	; 0xff
 8004e38:	d90e      	bls.n	8004e58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	22ff      	movs	r2, #255	; 0xff
 8004e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	8979      	ldrh	r1, [r7, #10]
 8004e48:	4b52      	ldr	r3, [pc, #328]	; (8004f94 <HAL_I2C_Mem_Read+0x22c>)
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fa9f 	bl	8005394 <I2C_TransferConfig>
 8004e56:	e00f      	b.n	8004e78 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	8979      	ldrh	r1, [r7, #10]
 8004e6a:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <HAL_I2C_Mem_Read+0x22c>)
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 fa8e 	bl	8005394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2104      	movs	r1, #4
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f964 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e07c      	b.n	8004f8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d034      	beq.n	8004f38 <HAL_I2C_Mem_Read+0x1d0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d130      	bne.n	8004f38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	2200      	movs	r2, #0
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f935 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e04d      	b.n	8004f8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2bff      	cmp	r3, #255	; 0xff
 8004ef8:	d90e      	bls.n	8004f18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	22ff      	movs	r2, #255	; 0xff
 8004efe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	8979      	ldrh	r1, [r7, #10]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fa3f 	bl	8005394 <I2C_TransferConfig>
 8004f16:	e00f      	b.n	8004f38 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	8979      	ldrh	r1, [r7, #10]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fa2e 	bl	8005394 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d19a      	bne.n	8004e78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f982 	bl	8005250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e01a      	b.n	8004f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_I2C_Mem_Read+0x230>)
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e000      	b.n	8004f8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
  }
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	80002400 	.word	0x80002400
 8004f98:	fe00e800 	.word	0xfe00e800

08004f9c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004faa:	b2db      	uxtb	r3, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	817b      	strh	r3, [r7, #10]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	813b      	strh	r3, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	8979      	ldrh	r1, [r7, #10]
 8004fd8:	4b20      	ldr	r3, [pc, #128]	; (800505c <I2C_RequestMemoryWrite+0xa4>)
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f9d7 	bl	8005394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	69b9      	ldr	r1, [r7, #24]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f8f0 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e02c      	b.n	8005054 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d105      	bne.n	800500c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005000:	893b      	ldrh	r3, [r7, #8]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	629a      	str	r2, [r3, #40]	; 0x28
 800500a:	e015      	b.n	8005038 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800500c:	893b      	ldrh	r3, [r7, #8]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	b29b      	uxth	r3, r3
 8005012:	b2da      	uxtb	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	69b9      	ldr	r1, [r7, #24]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f8d6 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e012      	b.n	8005054 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800502e:	893b      	ldrh	r3, [r7, #8]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2200      	movs	r2, #0
 8005040:	2180      	movs	r1, #128	; 0x80
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f884 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	80002000 	.word	0x80002000

08005060 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	461a      	mov	r2, r3
 800506e:	4603      	mov	r3, r0
 8005070:	817b      	strh	r3, [r7, #10]
 8005072:	460b      	mov	r3, r1
 8005074:	813b      	strh	r3, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	8979      	ldrh	r1, [r7, #10]
 8005080:	4b20      	ldr	r3, [pc, #128]	; (8005104 <I2C_RequestMemoryRead+0xa4>)
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f984 	bl	8005394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	69b9      	ldr	r1, [r7, #24]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f89d 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e02c      	b.n	80050fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d105      	bne.n	80050b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a6:	893b      	ldrh	r3, [r7, #8]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28
 80050b0:	e015      	b.n	80050de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050b2:	893b      	ldrh	r3, [r7, #8]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	69b9      	ldr	r1, [r7, #24]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f883 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e012      	b.n	80050fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050d4:	893b      	ldrh	r3, [r7, #8]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	; 0x40
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f831 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	80002000 	.word	0x80002000

08005108 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d103      	bne.n	8005126 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b01      	cmp	r3, #1
 8005132:	d007      	beq.n	8005144 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	619a      	str	r2, [r3, #24]
  }
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005160:	e022      	b.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d01e      	beq.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fd ff85 	bl	8003078 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d113      	bne.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e00f      	b.n	80051c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d0cd      	beq.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051dc:	e02c      	b.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f870 	bl	80052c8 <I2C_IsAcknowledgeFailed>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e02a      	b.n	8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d01e      	beq.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fa:	f7fd ff3d 	bl	8003078 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	d302      	bcc.n	8005210 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d113      	bne.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e007      	b.n	8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b02      	cmp	r3, #2
 8005244:	d1cb      	bne.n	80051de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800525c:	e028      	b.n	80052b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f830 	bl	80052c8 <I2C_IsAcknowledgeFailed>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e026      	b.n	80052c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fd ff01 	bl	8003078 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d113      	bne.n	80052b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e007      	b.n	80052c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d1cf      	bne.n	800525e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d151      	bne.n	8005386 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052e2:	e022      	b.n	800532a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d01e      	beq.n	800532a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ec:	f7fd fec4 	bl	8003078 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <I2C_IsAcknowledgeFailed+0x3a>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d113      	bne.n	800532a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e02e      	b.n	8005388 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b20      	cmp	r3, #32
 8005336:	d1d5      	bne.n	80052e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2210      	movs	r2, #16
 800533e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2220      	movs	r2, #32
 8005346:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fedd 	bl	8005108 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <I2C_IsAcknowledgeFailed+0xc8>)
 800535a:	400b      	ands	r3, r1
 800535c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	fe00e800 	.word	0xfe00e800

08005394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	4613      	mov	r3, r2
 80053a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	0d5b      	lsrs	r3, r3, #21
 80053b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053b4:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <I2C_TransferConfig+0x58>)
 80053b6:	430b      	orrs	r3, r1
 80053b8:	43db      	mvns	r3, r3
 80053ba:	ea02 0103 	and.w	r1, r2, r3
 80053be:	897b      	ldrh	r3, [r7, #10]
 80053c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053c4:	7a7b      	ldrb	r3, [r7, #9]
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	431a      	orrs	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	03ff63ff 	.word	0x03ff63ff

080053f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b20      	cmp	r3, #32
 8005404:	d138      	bne.n	8005478 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005410:	2302      	movs	r3, #2
 8005412:	e032      	b.n	800547a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	; 0x24
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005442:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6819      	ldr	r1, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b20      	cmp	r3, #32
 800549a:	d139      	bne.n	8005510 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e033      	b.n	8005512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2224      	movs	r2, #36	; 0x24
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0bf      	b.n	80056b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fc fefe 	bl	8002348 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005562:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005578:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6899      	ldr	r1, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b4a      	ldr	r3, [pc, #296]	; (80056bc <HAL_LTDC_Init+0x19c>)
 8005594:	400b      	ands	r3, r1
 8005596:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6899      	ldr	r1, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68d9      	ldr	r1, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b3e      	ldr	r3, [pc, #248]	; (80056bc <HAL_LTDC_Init+0x19c>)
 80055c2:	400b      	ands	r3, r1
 80055c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68d9      	ldr	r1, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6919      	ldr	r1, [r3, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b33      	ldr	r3, [pc, #204]	; (80056bc <HAL_LTDC_Init+0x19c>)
 80055f0:	400b      	ands	r3, r1
 80055f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6919      	ldr	r1, [r3, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6959      	ldr	r1, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <HAL_LTDC_Init+0x19c>)
 800561e:	400b      	ands	r3, r1
 8005620:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6959      	ldr	r1, [r3, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005650:	041b      	lsls	r3, r3, #16
 8005652:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0206 	orr.w	r2, r2, #6
 800568e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	f000f800 	.word	0xf000f800

080056c0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d023      	beq.n	800572a <HAL_LTDC_IRQHandler+0x6a>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01e      	beq.n	800572a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0204 	bic.w	r2, r2, #4
 80056fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2204      	movs	r2, #4
 8005702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2204      	movs	r2, #4
 8005718:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f86f 	bl	8005808 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d023      	beq.n	800577c <HAL_LTDC_IRQHandler+0xbc>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01e      	beq.n	800577c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0202 	bic.w	r2, r2, #2
 800574c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2202      	movs	r2, #2
 8005754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800575c:	f043 0202 	orr.w	r2, r3, #2
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2204      	movs	r2, #4
 800576a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f846 	bl	8005808 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01b      	beq.n	80057be <HAL_LTDC_IRQHandler+0xfe>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d016      	beq.n	80057be <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0201 	bic.w	r2, r2, #1
 800579e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2201      	movs	r2, #1
 80057a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f011 fe87 	bl	80174cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01b      	beq.n	8005800 <HAL_LTDC_IRQHandler+0x140>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d016      	beq.n	8005800 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0208 	bic.w	r2, r2, #8
 80057e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2208      	movs	r2, #8
 80057e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f80e 	bl	800581c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005830:	b5b0      	push	{r4, r5, r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_LTDC_ConfigLayer+0x1a>
 8005846:	2302      	movs	r3, #2
 8005848:	e02c      	b.n	80058a4 <HAL_LTDC_ConfigLayer+0x74>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2134      	movs	r1, #52	; 0x34
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4614      	mov	r4, r2
 800586e:	461d      	mov	r5, r3
 8005870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800587a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f849 	bl	800591c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2201      	movs	r2, #1
 8005890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bdb0      	pop	{r4, r5, r7, pc}

080058ac <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_LTDC_ProgramLineEvent+0x18>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e023      	b.n	800590c <HAL_LTDC_ProgramLineEvent+0x60>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80058e4:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	40016800 	.word	0x40016800

0800591c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	0c1b      	lsrs	r3, r3, #16
 8005934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005938:	4413      	add	r3, r2
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	01db      	lsls	r3, r3, #7
 8005948:	4413      	add	r3, r2
 800594a:	3384      	adds	r3, #132	; 0x84
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	4611      	mov	r1, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	01d2      	lsls	r2, r2, #7
 8005958:	440a      	add	r2, r1
 800595a:	3284      	adds	r2, #132	; 0x84
 800595c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005960:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	0c1b      	lsrs	r3, r3, #16
 800596e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005972:	4413      	add	r3, r2
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4619      	mov	r1, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	01db      	lsls	r3, r3, #7
 8005980:	440b      	add	r3, r1
 8005982:	3384      	adds	r3, #132	; 0x84
 8005984:	4619      	mov	r1, r3
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800599a:	4413      	add	r3, r2
 800599c:	041b      	lsls	r3, r3, #16
 800599e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	01db      	lsls	r3, r3, #7
 80059aa:	4413      	add	r3, r2
 80059ac:	3384      	adds	r3, #132	; 0x84
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	4611      	mov	r1, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	01d2      	lsls	r2, r2, #7
 80059ba:	440a      	add	r2, r1
 80059bc:	3284      	adds	r2, #132	; 0x84
 80059be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80059c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059d2:	4413      	add	r3, r2
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	01db      	lsls	r3, r3, #7
 80059e0:	440b      	add	r3, r1
 80059e2:	3384      	adds	r3, #132	; 0x84
 80059e4:	4619      	mov	r1, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	01db      	lsls	r3, r3, #7
 80059f6:	4413      	add	r3, r2
 80059f8:	3384      	adds	r3, #132	; 0x84
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	4611      	mov	r1, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	01d2      	lsls	r2, r2, #7
 8005a06:	440a      	add	r2, r1
 8005a08:	3284      	adds	r2, #132	; 0x84
 8005a0a:	f023 0307 	bic.w	r3, r3, #7
 8005a0e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	01db      	lsls	r3, r3, #7
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3384      	adds	r3, #132	; 0x84
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	061b      	lsls	r3, r3, #24
 8005a40:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	01db      	lsls	r3, r3, #7
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3384      	adds	r3, #132	; 0x84
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	01db      	lsls	r3, r3, #7
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3384      	adds	r3, #132	; 0x84
 8005a60:	461a      	mov	r2, r3
 8005a62:	2300      	movs	r3, #0
 8005a64:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	431a      	orrs	r2, r3
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	431a      	orrs	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	01db      	lsls	r3, r3, #7
 8005a80:	440b      	add	r3, r1
 8005a82:	3384      	adds	r3, #132	; 0x84
 8005a84:	4619      	mov	r1, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	01db      	lsls	r3, r3, #7
 8005a96:	4413      	add	r3, r2
 8005a98:	3384      	adds	r3, #132	; 0x84
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	01d2      	lsls	r2, r2, #7
 8005aa6:	440a      	add	r2, r1
 8005aa8:	3284      	adds	r2, #132	; 0x84
 8005aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	01db      	lsls	r3, r3, #7
 8005aba:	4413      	add	r3, r2
 8005abc:	3384      	adds	r3, #132	; 0x84
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	01db      	lsls	r3, r3, #7
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3384      	adds	r3, #132	; 0x84
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4619      	mov	r1, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	01db      	lsls	r3, r3, #7
 8005ae0:	440b      	add	r3, r1
 8005ae2:	3384      	adds	r3, #132	; 0x84
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4b58      	ldr	r3, [pc, #352]	; (8005c48 <LTDC_SetConfig+0x32c>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	68f9      	ldr	r1, [r7, #12]
 8005af6:	6809      	ldr	r1, [r1, #0]
 8005af8:	4608      	mov	r0, r1
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	01c9      	lsls	r1, r1, #7
 8005afe:	4401      	add	r1, r0
 8005b00:	3184      	adds	r1, #132	; 0x84
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	01db      	lsls	r3, r3, #7
 8005b10:	4413      	add	r3, r2
 8005b12:	3384      	adds	r3, #132	; 0x84
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	01db      	lsls	r3, r3, #7
 8005b20:	4413      	add	r3, r2
 8005b22:	3384      	adds	r3, #132	; 0x84
 8005b24:	461a      	mov	r2, r3
 8005b26:	2300      	movs	r3, #0
 8005b28:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	01db      	lsls	r3, r3, #7
 8005b34:	4413      	add	r3, r2
 8005b36:	3384      	adds	r3, #132	; 0x84
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005b48:	2304      	movs	r3, #4
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	e01b      	b.n	8005b86 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005b56:	2303      	movs	r3, #3
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	e014      	b.n	8005b86 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d00b      	beq.n	8005b7c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d007      	beq.n	8005b7c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d003      	beq.n	8005b7c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b78:	2b07      	cmp	r3, #7
 8005b7a:	d102      	bne.n	8005b82 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	e001      	b.n	8005b86 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005b82:	2301      	movs	r3, #1
 8005b84:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	01db      	lsls	r3, r3, #7
 8005b90:	4413      	add	r3, r2
 8005b92:	3384      	adds	r3, #132	; 0x84
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	01d2      	lsls	r2, r2, #7
 8005ba0:	440a      	add	r2, r1
 8005ba2:	3284      	adds	r2, #132	; 0x84
 8005ba4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
 8005bb4:	041a      	lsls	r2, r3, #16
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	1acb      	subs	r3, r1, r3
 8005bc0:	69f9      	ldr	r1, [r7, #28]
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	3303      	adds	r3, #3
 8005bc8:	68f9      	ldr	r1, [r7, #12]
 8005bca:	6809      	ldr	r1, [r1, #0]
 8005bcc:	4608      	mov	r0, r1
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	01c9      	lsls	r1, r1, #7
 8005bd2:	4401      	add	r1, r0
 8005bd4:	3184      	adds	r1, #132	; 0x84
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	01db      	lsls	r3, r3, #7
 8005be4:	4413      	add	r3, r2
 8005be6:	3384      	adds	r3, #132	; 0x84
 8005be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	440b      	add	r3, r1
 8005bf6:	3384      	adds	r3, #132	; 0x84
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <LTDC_SetConfig+0x330>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	01db      	lsls	r3, r3, #7
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3384      	adds	r3, #132	; 0x84
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	01db      	lsls	r3, r3, #7
 8005c20:	4413      	add	r3, r2
 8005c22:	3384      	adds	r3, #132	; 0x84
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	01d2      	lsls	r2, r2, #7
 8005c30:	440a      	add	r2, r1
 8005c32:	3284      	adds	r2, #132	; 0x84
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	6013      	str	r3, [r2, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	3724      	adds	r7, #36	; 0x24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	fffff8f8 	.word	0xfffff8f8
 8005c4c:	fffff800 	.word	0xfffff800

08005c50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a04      	ldr	r2, [pc, #16]	; (8005c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5e:	6013      	str	r3, [r2, #0]
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40007000 	.word	0x40007000

08005c70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	4a22      	ldr	r2, [pc, #136]	; (8005d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6413      	str	r3, [r2, #64]	; 0x40
 8005c86:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c9e:	f7fd f9eb 	bl	8003078 <HAL_GetTick>
 8005ca2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ca4:	e009      	b.n	8005cba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ca6:	f7fd f9e7 	bl	8003078 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cb4:	d901      	bls.n	8005cba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e022      	b.n	8005d00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc6:	d1ee      	bne.n	8005ca6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005cc8:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a0f      	ldr	r2, [pc, #60]	; (8005d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cd4:	f7fd f9d0 	bl	8003078 <HAL_GetTick>
 8005cd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cda:	e009      	b.n	8005cf0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cdc:	f7fd f9cc 	bl	8003078 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cea:	d901      	bls.n	8005cf0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e007      	b.n	8005d00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cfc:	d1ee      	bne.n	8005cdc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	40007000 	.word	0x40007000

08005d10 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005d18:	f7fd f9ae 	bl	8003078 <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e067      	b.n	8005df8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fc fbcb 	bl	80024d8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005d42:	f241 3188 	movw	r1, #5000	; 0x1388
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f85e 	bl	8005e08 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	021a      	lsls	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2120      	movs	r1, #32
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f856 	bl	8005e24 <QSPI_WaitFlagStateUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005d7c:	7afb      	ldrb	r3, [r7, #11]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d135      	bne.n	8005dee <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <HAL_QSPI_Init+0xf0>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6852      	ldr	r2, [r2, #4]
 8005d90:	0611      	lsls	r1, r2, #24
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68d2      	ldr	r2, [r2, #12]
 8005d96:	4311      	orrs	r1, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	69d2      	ldr	r2, [r2, #28]
 8005d9c:	4311      	orrs	r1, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6a12      	ldr	r2, [r2, #32]
 8005da2:	4311      	orrs	r1, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	430b      	orrs	r3, r1
 8005daa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <HAL_QSPI_Init+0xf4>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6912      	ldr	r2, [r2, #16]
 8005dba:	0411      	lsls	r1, r2, #16
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6952      	ldr	r2, [r2, #20]
 8005dc0:	4311      	orrs	r1, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6992      	ldr	r2, [r2, #24]
 8005dc6:	4311      	orrs	r1, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005df6:	7afb      	ldrb	r3, [r7, #11]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	00ffff2f 	.word	0x00ffff2f
 8005e04:	ffe0f8fe 	.word	0xffe0f8fe

08005e08 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e34:	e01a      	b.n	8005e6c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d016      	beq.n	8005e6c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3e:	f7fd f91b 	bl	8003078 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2204      	movs	r2, #4
 8005e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	f043 0201 	orr.w	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e00e      	b.n	8005e8a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bf14      	ite	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d1d6      	bne.n	8005e36 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e291      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8087 	beq.w	8005fc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eb8:	4b96      	ldr	r3, [pc, #600]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 030c 	and.w	r3, r3, #12
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d00c      	beq.n	8005ede <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ec4:	4b93      	ldr	r3, [pc, #588]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 030c 	and.w	r3, r3, #12
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d112      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x62>
 8005ed0:	4b90      	ldr	r3, [pc, #576]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005edc:	d10b      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ede:	4b8d      	ldr	r3, [pc, #564]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d06c      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x130>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d168      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e26b      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efe:	d106      	bne.n	8005f0e <HAL_RCC_OscConfig+0x7a>
 8005f00:	4b84      	ldr	r3, [pc, #528]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a83      	ldr	r2, [pc, #524]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	e02e      	b.n	8005f6c <HAL_RCC_OscConfig+0xd8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10c      	bne.n	8005f30 <HAL_RCC_OscConfig+0x9c>
 8005f16:	4b7f      	ldr	r3, [pc, #508]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a7e      	ldr	r2, [pc, #504]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	4b7c      	ldr	r3, [pc, #496]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a7b      	ldr	r2, [pc, #492]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	e01d      	b.n	8005f6c <HAL_RCC_OscConfig+0xd8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f38:	d10c      	bne.n	8005f54 <HAL_RCC_OscConfig+0xc0>
 8005f3a:	4b76      	ldr	r3, [pc, #472]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a75      	ldr	r2, [pc, #468]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	4b73      	ldr	r3, [pc, #460]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a72      	ldr	r2, [pc, #456]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e00b      	b.n	8005f6c <HAL_RCC_OscConfig+0xd8>
 8005f54:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a6e      	ldr	r2, [pc, #440]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	4b6c      	ldr	r3, [pc, #432]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6b      	ldr	r2, [pc, #428]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d013      	beq.n	8005f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fd f880 	bl	8003078 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f7c:	f7fd f87c 	bl	8003078 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	; 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e21f      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f8e:	4b61      	ldr	r3, [pc, #388]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0f0      	beq.n	8005f7c <HAL_RCC_OscConfig+0xe8>
 8005f9a:	e014      	b.n	8005fc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fd f86c 	bl	8003078 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa4:	f7fd f868 	bl	8003078 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b64      	cmp	r3, #100	; 0x64
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e20b      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fb6:	4b57      	ldr	r3, [pc, #348]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f0      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x110>
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d069      	beq.n	80060a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fd2:	4b50      	ldr	r3, [pc, #320]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00b      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fde:	4b4d      	ldr	r3, [pc, #308]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d11c      	bne.n	8006024 <HAL_RCC_OscConfig+0x190>
 8005fea:	4b4a      	ldr	r3, [pc, #296]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d116      	bne.n	8006024 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ff6:	4b47      	ldr	r3, [pc, #284]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_RCC_OscConfig+0x17a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d001      	beq.n	800600e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e1df      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800600e:	4b41      	ldr	r3, [pc, #260]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	493d      	ldr	r1, [pc, #244]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 800601e:	4313      	orrs	r3, r2
 8006020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006022:	e040      	b.n	80060a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d023      	beq.n	8006074 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800602c:	4b39      	ldr	r3, [pc, #228]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a38      	ldr	r2, [pc, #224]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8006032:	f043 0301 	orr.w	r3, r3, #1
 8006036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fd f81e 	bl	8003078 <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006040:	f7fd f81a 	bl	8003078 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e1bd      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006052:	4b30      	ldr	r3, [pc, #192]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605e:	4b2d      	ldr	r3, [pc, #180]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4929      	ldr	r1, [pc, #164]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 800606e:	4313      	orrs	r3, r2
 8006070:	600b      	str	r3, [r1, #0]
 8006072:	e018      	b.n	80060a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006074:	4b27      	ldr	r3, [pc, #156]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a26      	ldr	r2, [pc, #152]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fc fffa 	bl	8003078 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006088:	f7fc fff6 	bl	8003078 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e199      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800609a:	4b1e      	ldr	r3, [pc, #120]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f0      	bne.n	8006088 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d038      	beq.n	8006124 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d019      	beq.n	80060ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ba:	4b16      	ldr	r3, [pc, #88]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 80060bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060be:	4a15      	ldr	r2, [pc, #84]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c6:	f7fc ffd7 	bl	8003078 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ce:	f7fc ffd3 	bl	8003078 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e176      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 80060e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x23a>
 80060ec:	e01a      	b.n	8006124 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ee:	4b09      	ldr	r3, [pc, #36]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 80060f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f2:	4a08      	ldr	r2, [pc, #32]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fa:	f7fc ffbd 	bl	8003078 <HAL_GetTick>
 80060fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006100:	e00a      	b.n	8006118 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006102:	f7fc ffb9 	bl	8003078 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d903      	bls.n	8006118 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e15c      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
 8006114:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006118:	4b91      	ldr	r3, [pc, #580]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 800611a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1ee      	bne.n	8006102 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80a4 	beq.w	800627a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006132:	4b8b      	ldr	r3, [pc, #556]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10d      	bne.n	800615a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800613e:	4b88      	ldr	r3, [pc, #544]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	4a87      	ldr	r2, [pc, #540]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006148:	6413      	str	r3, [r2, #64]	; 0x40
 800614a:	4b85      	ldr	r3, [pc, #532]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800615a:	4b82      	ldr	r3, [pc, #520]	; (8006364 <HAL_RCC_OscConfig+0x4d0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d118      	bne.n	8006198 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006166:	4b7f      	ldr	r3, [pc, #508]	; (8006364 <HAL_RCC_OscConfig+0x4d0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a7e      	ldr	r2, [pc, #504]	; (8006364 <HAL_RCC_OscConfig+0x4d0>)
 800616c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006172:	f7fc ff81 	bl	8003078 <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800617a:	f7fc ff7d 	bl	8003078 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b64      	cmp	r3, #100	; 0x64
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e120      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800618c:	4b75      	ldr	r3, [pc, #468]	; (8006364 <HAL_RCC_OscConfig+0x4d0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d106      	bne.n	80061ae <HAL_RCC_OscConfig+0x31a>
 80061a0:	4b6f      	ldr	r3, [pc, #444]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	4a6e      	ldr	r2, [pc, #440]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6713      	str	r3, [r2, #112]	; 0x70
 80061ac:	e02d      	b.n	800620a <HAL_RCC_OscConfig+0x376>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10c      	bne.n	80061d0 <HAL_RCC_OscConfig+0x33c>
 80061b6:	4b6a      	ldr	r3, [pc, #424]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ba:	4a69      	ldr	r2, [pc, #420]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061bc:	f023 0301 	bic.w	r3, r3, #1
 80061c0:	6713      	str	r3, [r2, #112]	; 0x70
 80061c2:	4b67      	ldr	r3, [pc, #412]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	4a66      	ldr	r2, [pc, #408]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061c8:	f023 0304 	bic.w	r3, r3, #4
 80061cc:	6713      	str	r3, [r2, #112]	; 0x70
 80061ce:	e01c      	b.n	800620a <HAL_RCC_OscConfig+0x376>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	d10c      	bne.n	80061f2 <HAL_RCC_OscConfig+0x35e>
 80061d8:	4b61      	ldr	r3, [pc, #388]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	4a60      	ldr	r2, [pc, #384]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061de:	f043 0304 	orr.w	r3, r3, #4
 80061e2:	6713      	str	r3, [r2, #112]	; 0x70
 80061e4:	4b5e      	ldr	r3, [pc, #376]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e8:	4a5d      	ldr	r2, [pc, #372]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	6713      	str	r3, [r2, #112]	; 0x70
 80061f0:	e00b      	b.n	800620a <HAL_RCC_OscConfig+0x376>
 80061f2:	4b5b      	ldr	r3, [pc, #364]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	4a5a      	ldr	r2, [pc, #360]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80061f8:	f023 0301 	bic.w	r3, r3, #1
 80061fc:	6713      	str	r3, [r2, #112]	; 0x70
 80061fe:	4b58      	ldr	r3, [pc, #352]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	4a57      	ldr	r2, [pc, #348]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006204:	f023 0304 	bic.w	r3, r3, #4
 8006208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d015      	beq.n	800623e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006212:	f7fc ff31 	bl	8003078 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006218:	e00a      	b.n	8006230 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621a:	f7fc ff2d 	bl	8003078 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f241 3288 	movw	r2, #5000	; 0x1388
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e0ce      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006230:	4b4b      	ldr	r3, [pc, #300]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0ee      	beq.n	800621a <HAL_RCC_OscConfig+0x386>
 800623c:	e014      	b.n	8006268 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623e:	f7fc ff1b 	bl	8003078 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006244:	e00a      	b.n	800625c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006246:	f7fc ff17 	bl	8003078 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	f241 3288 	movw	r2, #5000	; 0x1388
 8006254:	4293      	cmp	r3, r2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e0b8      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800625c:	4b40      	ldr	r3, [pc, #256]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1ee      	bne.n	8006246 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d105      	bne.n	800627a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800626e:	4b3c      	ldr	r3, [pc, #240]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	4a3b      	ldr	r2, [pc, #236]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80a4 	beq.w	80063cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006284:	4b36      	ldr	r3, [pc, #216]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 030c 	and.w	r3, r3, #12
 800628c:	2b08      	cmp	r3, #8
 800628e:	d06b      	beq.n	8006368 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d149      	bne.n	800632c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006298:	4b31      	ldr	r3, [pc, #196]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a30      	ldr	r2, [pc, #192]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 800629e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fc fee8 	bl	8003078 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ac:	f7fc fee4 	bl	8003078 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e087      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062be:	4b28      	ldr	r3, [pc, #160]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69da      	ldr	r2, [r3, #28]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	019b      	lsls	r3, r3, #6
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	3b01      	subs	r3, #1
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	061b      	lsls	r3, r3, #24
 80062ee:	4313      	orrs	r3, r2
 80062f0:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80062f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062f8:	4b19      	ldr	r3, [pc, #100]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 80062fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006304:	f7fc feb8 	bl	8003078 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800630c:	f7fc feb4 	bl	8003078 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e057      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631e:	4b10      	ldr	r3, [pc, #64]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCC_OscConfig+0x478>
 800632a:	e04f      	b.n	80063cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0b      	ldr	r2, [pc, #44]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fc fe9e 	bl	8003078 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006340:	f7fc fe9a 	bl	8003078 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e03d      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006352:	4b03      	ldr	r3, [pc, #12]	; (8006360 <HAL_RCC_OscConfig+0x4cc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x4ac>
 800635e:	e035      	b.n	80063cc <HAL_RCC_OscConfig+0x538>
 8006360:	40023800 	.word	0x40023800
 8006364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006368:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <HAL_RCC_OscConfig+0x544>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d028      	beq.n	80063c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006380:	429a      	cmp	r2, r3
 8006382:	d121      	bne.n	80063c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638e:	429a      	cmp	r2, r3
 8006390:	d11a      	bne.n	80063c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006398:	4013      	ands	r3, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800639e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d111      	bne.n	80063c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	3b01      	subs	r3, #1
 80063b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d107      	bne.n	80063c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40023800 	.word	0x40023800

080063dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0d0      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063f4:	4b6a      	ldr	r3, [pc, #424]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d910      	bls.n	8006424 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006402:	4b67      	ldr	r3, [pc, #412]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f023 020f 	bic.w	r2, r3, #15
 800640a:	4965      	ldr	r1, [pc, #404]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	4313      	orrs	r3, r2
 8006410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006412:	4b63      	ldr	r3, [pc, #396]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d001      	beq.n	8006424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0b8      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d020      	beq.n	8006472 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800643c:	4b59      	ldr	r3, [pc, #356]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4a58      	ldr	r2, [pc, #352]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006454:	4b53      	ldr	r3, [pc, #332]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	4a52      	ldr	r2, [pc, #328]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 800645a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800645e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006460:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	494d      	ldr	r1, [pc, #308]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 800646e:	4313      	orrs	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d040      	beq.n	8006500 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d107      	bne.n	8006496 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006486:	4b47      	ldr	r3, [pc, #284]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d115      	bne.n	80064be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e07f      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d107      	bne.n	80064ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649e:	4b41      	ldr	r3, [pc, #260]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e073      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ae:	4b3d      	ldr	r3, [pc, #244]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e06b      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064be:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f023 0203 	bic.w	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4936      	ldr	r1, [pc, #216]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d0:	f7fc fdd2 	bl	8003078 <HAL_GetTick>
 80064d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d6:	e00a      	b.n	80064ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d8:	f7fc fdce 	bl	8003078 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e053      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ee:	4b2d      	ldr	r3, [pc, #180]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 020c 	and.w	r2, r3, #12
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d1eb      	bne.n	80064d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006500:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d210      	bcs.n	8006530 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650e:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f023 020f 	bic.w	r2, r3, #15
 8006516:	4922      	ldr	r1, [pc, #136]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800651e:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d001      	beq.n	8006530 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e032      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800653c:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4916      	ldr	r1, [pc, #88]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 800654a:	4313      	orrs	r3, r2
 800654c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800655a:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	490e      	ldr	r1, [pc, #56]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 800656a:	4313      	orrs	r3, r2
 800656c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800656e:	f000 f821 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8006572:	4601      	mov	r1, r0
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	091b      	lsrs	r3, r3, #4
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <HAL_RCC_ClockConfig+0x1cc>)
 8006580:	5cd3      	ldrb	r3, [r2, r3]
 8006582:	fa21 f303 	lsr.w	r3, r1, r3
 8006586:	4a09      	ldr	r2, [pc, #36]	; (80065ac <HAL_RCC_ClockConfig+0x1d0>)
 8006588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800658a:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <HAL_RCC_ClockConfig+0x1d4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fc fbbc 	bl	8002d0c <HAL_InitTick>

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40023c00 	.word	0x40023c00
 80065a4:	40023800 	.word	0x40023800
 80065a8:	08029044 	.word	0x08029044
 80065ac:	2000002c 	.word	0x2000002c
 80065b0:	20000030 	.word	0x20000030

080065b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	2300      	movs	r3, #0
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065ca:	4b50      	ldr	r3, [pc, #320]	; (800670c <HAL_RCC_GetSysClockFreq+0x158>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d007      	beq.n	80065e6 <HAL_RCC_GetSysClockFreq+0x32>
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d008      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0x38>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 808d 	bne.w	80066fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065e0:	4b4b      	ldr	r3, [pc, #300]	; (8006710 <HAL_RCC_GetSysClockFreq+0x15c>)
 80065e2:	60bb      	str	r3, [r7, #8]
      break;
 80065e4:	e08c      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065e6:	4b4b      	ldr	r3, [pc, #300]	; (8006714 <HAL_RCC_GetSysClockFreq+0x160>)
 80065e8:	60bb      	str	r3, [r7, #8]
      break;
 80065ea:	e089      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065ec:	4b47      	ldr	r3, [pc, #284]	; (800670c <HAL_RCC_GetSysClockFreq+0x158>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80065f6:	4b45      	ldr	r3, [pc, #276]	; (800670c <HAL_RCC_GetSysClockFreq+0x158>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d023      	beq.n	800664a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006602:	4b42      	ldr	r3, [pc, #264]	; (800670c <HAL_RCC_GetSysClockFreq+0x158>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	099b      	lsrs	r3, r3, #6
 8006608:	f04f 0400 	mov.w	r4, #0
 800660c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	ea03 0501 	and.w	r5, r3, r1
 8006618:	ea04 0602 	and.w	r6, r4, r2
 800661c:	4a3d      	ldr	r2, [pc, #244]	; (8006714 <HAL_RCC_GetSysClockFreq+0x160>)
 800661e:	fb02 f106 	mul.w	r1, r2, r6
 8006622:	2200      	movs	r2, #0
 8006624:	fb02 f205 	mul.w	r2, r2, r5
 8006628:	440a      	add	r2, r1
 800662a:	493a      	ldr	r1, [pc, #232]	; (8006714 <HAL_RCC_GetSysClockFreq+0x160>)
 800662c:	fba5 0101 	umull	r0, r1, r5, r1
 8006630:	1853      	adds	r3, r2, r1
 8006632:	4619      	mov	r1, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f04f 0400 	mov.w	r4, #0
 800663a:	461a      	mov	r2, r3
 800663c:	4623      	mov	r3, r4
 800663e:	f7f9 fe37 	bl	80002b0 <__aeabi_uldivmod>
 8006642:	4603      	mov	r3, r0
 8006644:	460c      	mov	r4, r1
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e049      	b.n	80066de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800664a:	4b30      	ldr	r3, [pc, #192]	; (800670c <HAL_RCC_GetSysClockFreq+0x158>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	099b      	lsrs	r3, r3, #6
 8006650:	f04f 0400 	mov.w	r4, #0
 8006654:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	ea03 0501 	and.w	r5, r3, r1
 8006660:	ea04 0602 	and.w	r6, r4, r2
 8006664:	4629      	mov	r1, r5
 8006666:	4632      	mov	r2, r6
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	0154      	lsls	r4, r2, #5
 8006672:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006676:	014b      	lsls	r3, r1, #5
 8006678:	4619      	mov	r1, r3
 800667a:	4622      	mov	r2, r4
 800667c:	1b49      	subs	r1, r1, r5
 800667e:	eb62 0206 	sbc.w	r2, r2, r6
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	f04f 0400 	mov.w	r4, #0
 800668a:	0194      	lsls	r4, r2, #6
 800668c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006690:	018b      	lsls	r3, r1, #6
 8006692:	1a5b      	subs	r3, r3, r1
 8006694:	eb64 0402 	sbc.w	r4, r4, r2
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	00e2      	lsls	r2, r4, #3
 80066a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80066a6:	00d9      	lsls	r1, r3, #3
 80066a8:	460b      	mov	r3, r1
 80066aa:	4614      	mov	r4, r2
 80066ac:	195b      	adds	r3, r3, r5
 80066ae:	eb44 0406 	adc.w	r4, r4, r6
 80066b2:	f04f 0100 	mov.w	r1, #0
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	02a2      	lsls	r2, r4, #10
 80066bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80066c0:	0299      	lsls	r1, r3, #10
 80066c2:	460b      	mov	r3, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	4621      	mov	r1, r4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f04f 0400 	mov.w	r4, #0
 80066d0:	461a      	mov	r2, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	f7f9 fdec 	bl	80002b0 <__aeabi_uldivmod>
 80066d8:	4603      	mov	r3, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80066de:	4b0b      	ldr	r3, [pc, #44]	; (800670c <HAL_RCC_GetSysClockFreq+0x158>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	3301      	adds	r3, #1
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	60bb      	str	r3, [r7, #8]
      break;
 80066f8:	e002      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <HAL_RCC_GetSysClockFreq+0x15c>)
 80066fc:	60bb      	str	r3, [r7, #8]
      break;
 80066fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006700:	68bb      	ldr	r3, [r7, #8]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800670a:	bf00      	nop
 800670c:	40023800 	.word	0x40023800
 8006710:	00f42400 	.word	0x00f42400
 8006714:	017d7840 	.word	0x017d7840

08006718 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <HAL_RCC_GetHCLKFreq+0x14>)
 800671e:	681b      	ldr	r3, [r3, #0]
}
 8006720:	4618      	mov	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	2000002c 	.word	0x2000002c

08006730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006734:	f7ff fff0 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 8006738:	4601      	mov	r1, r0
 800673a:	4b05      	ldr	r3, [pc, #20]	; (8006750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	0a9b      	lsrs	r3, r3, #10
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	4a03      	ldr	r2, [pc, #12]	; (8006754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006746:	5cd3      	ldrb	r3, [r2, r3]
 8006748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800674c:	4618      	mov	r0, r3
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40023800 	.word	0x40023800
 8006754:	08029054 	.word	0x08029054

08006758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800675c:	f7ff ffdc 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 8006760:	4601      	mov	r1, r0
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	0b5b      	lsrs	r3, r3, #13
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	4a03      	ldr	r2, [pc, #12]	; (800677c <HAL_RCC_GetPCLK2Freq+0x24>)
 800676e:	5cd3      	ldrb	r3, [r2, r3]
 8006770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40023800 	.word	0x40023800
 800677c:	08029054 	.word	0x08029054

08006780 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	220f      	movs	r2, #15
 800678e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006790:	4b12      	ldr	r3, [pc, #72]	; (80067dc <HAL_RCC_GetClockConfig+0x5c>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0203 	and.w	r2, r3, #3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800679c:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <HAL_RCC_GetClockConfig+0x5c>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <HAL_RCC_GetClockConfig+0x5c>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80067b4:	4b09      	ldr	r3, [pc, #36]	; (80067dc <HAL_RCC_GetClockConfig+0x5c>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	08db      	lsrs	r3, r3, #3
 80067ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <HAL_RCC_GetClockConfig+0x60>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 020f 	and.w	r2, r3, #15
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	601a      	str	r2, [r3, #0]
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800
 80067e0:	40023c00 	.word	0x40023c00

080067e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d012      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800680c:	4b69      	ldr	r3, [pc, #420]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	4a68      	ldr	r2, [pc, #416]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006812:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006816:	6093      	str	r3, [r2, #8]
 8006818:	4b66      	ldr	r3, [pc, #408]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006820:	4964      	ldr	r1, [pc, #400]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006822:	4313      	orrs	r3, r2
 8006824:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800682e:	2301      	movs	r3, #1
 8006830:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d017      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800683e:	4b5d      	ldr	r3, [pc, #372]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006844:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	4959      	ldr	r1, [pc, #356]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800685c:	d101      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800685e:	2301      	movs	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800686a:	2301      	movs	r3, #1
 800686c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d017      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800687a:	4b4e      	ldr	r3, [pc, #312]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800687c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006880:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	494a      	ldr	r1, [pc, #296]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006898:	d101      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800689a:	2301      	movs	r3, #1
 800689c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80068a6:	2301      	movs	r3, #1
 80068a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80068b6:	2301      	movs	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 808b 	beq.w	80069de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068c8:	4b3a      	ldr	r3, [pc, #232]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	4a39      	ldr	r2, [pc, #228]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d2:	6413      	str	r3, [r2, #64]	; 0x40
 80068d4:	4b37      	ldr	r3, [pc, #220]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068e0:	4b35      	ldr	r3, [pc, #212]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a34      	ldr	r2, [pc, #208]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ec:	f7fc fbc4 	bl	8003078 <HAL_GetTick>
 80068f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f4:	f7fc fbc0 	bl	8003078 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b64      	cmp	r3, #100	; 0x64
 8006900:	d901      	bls.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e355      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006906:	4b2c      	ldr	r3, [pc, #176]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f0      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006912:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d035      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	429a      	cmp	r2, r3
 800692e:	d02e      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006930:	4b20      	ldr	r3, [pc, #128]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006938:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800693a:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800693c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693e:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006944:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006946:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	4a1a      	ldr	r2, [pc, #104]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800694c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006950:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006952:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006958:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b01      	cmp	r3, #1
 8006962:	d114      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fc fb88 	bl	8003078 <HAL_GetTick>
 8006968:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800696a:	e00a      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800696c:	f7fc fb84 	bl	8003078 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	f241 3288 	movw	r2, #5000	; 0x1388
 800697a:	4293      	cmp	r3, r2
 800697c:	d901      	bls.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e317      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006982:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0ee      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800699a:	d111      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069a8:	4b04      	ldr	r3, [pc, #16]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069aa:	400b      	ands	r3, r1
 80069ac:	4901      	ldr	r1, [pc, #4]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	608b      	str	r3, [r1, #8]
 80069b2:	e00b      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40007000 	.word	0x40007000
 80069bc:	0ffffcff 	.word	0x0ffffcff
 80069c0:	4bb0      	ldr	r3, [pc, #704]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	4aaf      	ldr	r2, [pc, #700]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069ca:	6093      	str	r3, [r2, #8]
 80069cc:	4bad      	ldr	r3, [pc, #692]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d8:	49aa      	ldr	r1, [pc, #680]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d010      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069ea:	4ba6      	ldr	r3, [pc, #664]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f0:	4aa4      	ldr	r2, [pc, #656]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80069fa:	4ba2      	ldr	r3, [pc, #648]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	499f      	ldr	r1, [pc, #636]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a18:	4b9a      	ldr	r3, [pc, #616]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a26:	4997      	ldr	r1, [pc, #604]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a3a:	4b92      	ldr	r3, [pc, #584]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a48:	498e      	ldr	r1, [pc, #568]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00a      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a5c:	4b89      	ldr	r3, [pc, #548]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6a:	4986      	ldr	r1, [pc, #536]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a7e:	4b81      	ldr	r3, [pc, #516]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8c:	497d      	ldr	r1, [pc, #500]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006aa0:	4b78      	ldr	r3, [pc, #480]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa6:	f023 0203 	bic.w	r2, r3, #3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	4975      	ldr	r1, [pc, #468]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ac2:	4b70      	ldr	r3, [pc, #448]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac8:	f023 020c 	bic.w	r2, r3, #12
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad0:	496c      	ldr	r1, [pc, #432]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ae4:	4b67      	ldr	r3, [pc, #412]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af2:	4964      	ldr	r1, [pc, #400]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b06:	4b5f      	ldr	r3, [pc, #380]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b14:	495b      	ldr	r1, [pc, #364]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b28:	4b56      	ldr	r3, [pc, #344]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b36:	4953      	ldr	r1, [pc, #332]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006b4a:	4b4e      	ldr	r3, [pc, #312]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b58:	494a      	ldr	r1, [pc, #296]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006b6c:	4b45      	ldr	r3, [pc, #276]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7a:	4942      	ldr	r1, [pc, #264]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006b8e:	4b3d      	ldr	r3, [pc, #244]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9c:	4939      	ldr	r1, [pc, #228]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bb0:	4b34      	ldr	r3, [pc, #208]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bbe:	4931      	ldr	r1, [pc, #196]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d011      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006bd2:	4b2c      	ldr	r3, [pc, #176]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be0:	4928      	ldr	r1, [pc, #160]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bf0:	d101      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0308 	and.w	r3, r3, #8
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c02:	2301      	movs	r3, #1
 8006c04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c12:	4b1c      	ldr	r3, [pc, #112]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c20:	4918      	ldr	r1, [pc, #96]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c34:	4b13      	ldr	r3, [pc, #76]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c44:	490f      	ldr	r1, [pc, #60]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d005      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c5a:	f040 80d8 	bne.w	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c6a:	f7fc fa05 	bl	8003078 <HAL_GetTick>
 8006c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c72:	f7fc fa01 	bl	8003078 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b64      	cmp	r3, #100	; 0x64
 8006c7e:	d903      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e196      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006c84:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c88:	4b6c      	ldr	r3, [pc, #432]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1ee      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d021      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11d      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ca8:	4b64      	ldr	r3, [pc, #400]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cae:	0c1b      	lsrs	r3, r3, #16
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006cb6:	4b61      	ldr	r3, [pc, #388]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cbc:	0e1b      	lsrs	r3, r3, #24
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	019a      	lsls	r2, r3, #6
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	041b      	lsls	r3, r3, #16
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	061b      	lsls	r3, r3, #24
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	071b      	lsls	r3, r3, #28
 8006cdc:	4957      	ldr	r1, [pc, #348]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf8:	d00a      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d02e      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d0e:	d129      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d10:	4b4a      	ldr	r3, [pc, #296]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d1e:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d24:	0f1b      	lsrs	r3, r3, #28
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	019a      	lsls	r2, r3, #6
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	061b      	lsls	r3, r3, #24
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	071b      	lsls	r3, r3, #28
 8006d44:	493d      	ldr	r1, [pc, #244]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006d4c:	4b3b      	ldr	r3, [pc, #236]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d52:	f023 021f 	bic.w	r2, r3, #31
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	4937      	ldr	r1, [pc, #220]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01d      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d70:	4b32      	ldr	r3, [pc, #200]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d76:	0e1b      	lsrs	r3, r3, #24
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d84:	0f1b      	lsrs	r3, r3, #28
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	019a      	lsls	r2, r3, #6
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	071b      	lsls	r3, r3, #28
 8006da4:	4925      	ldr	r1, [pc, #148]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d011      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	019a      	lsls	r2, r3, #6
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	041b      	lsls	r3, r3, #16
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	061b      	lsls	r3, r3, #24
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	071b      	lsls	r3, r3, #28
 8006dd4:	4919      	ldr	r1, [pc, #100]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a16      	ldr	r2, [pc, #88]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006de2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de8:	f7fc f946 	bl	8003078 <HAL_GetTick>
 8006dec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006df0:	f7fc f942 	bl	8003078 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b64      	cmp	r3, #100	; 0x64
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e0d7      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f0      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f040 80cd 	bne.w	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a08      	ldr	r2, [pc, #32]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e22:	f7fc f929 	bl	8003078 <HAL_GetTick>
 8006e26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e28:	e00a      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e2a:	f7fc f925 	bl	8003078 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b64      	cmp	r3, #100	; 0x64
 8006e36:	d903      	bls.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e0ba      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006e3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e40:	4b5e      	ldr	r3, [pc, #376]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e4c:	d0ed      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d02e      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d12a      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e76:	4b51      	ldr	r3, [pc, #324]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e84:	4b4d      	ldr	r3, [pc, #308]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8a:	0f1b      	lsrs	r3, r3, #28
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	019a      	lsls	r2, r3, #6
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	061b      	lsls	r3, r3, #24
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	071b      	lsls	r3, r3, #28
 8006eaa:	4944      	ldr	r1, [pc, #272]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006eb2:	4b42      	ldr	r3, [pc, #264]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	493d      	ldr	r1, [pc, #244]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d022      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ee0:	d11d      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ee2:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee8:	0e1b      	lsrs	r3, r3, #24
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ef0:	4b32      	ldr	r3, [pc, #200]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef6:	0f1b      	lsrs	r3, r3, #28
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	019a      	lsls	r2, r3, #6
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	041b      	lsls	r3, r3, #16
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	061b      	lsls	r3, r3, #24
 8006f10:	431a      	orrs	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	071b      	lsls	r3, r3, #28
 8006f16:	4929      	ldr	r1, [pc, #164]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d028      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f30:	0e1b      	lsrs	r3, r3, #24
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f38:	4b20      	ldr	r3, [pc, #128]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3e:	0c1b      	lsrs	r3, r3, #16
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	019a      	lsls	r2, r3, #6
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	041b      	lsls	r3, r3, #16
 8006f50:	431a      	orrs	r2, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	061b      	lsls	r3, r3, #24
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	071b      	lsls	r3, r3, #28
 8006f5e:	4917      	ldr	r1, [pc, #92]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006f66:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	4911      	ldr	r1, [pc, #68]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0e      	ldr	r2, [pc, #56]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f88:	f7fc f876 	bl	8003078 <HAL_GetTick>
 8006f8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f90:	f7fc f872 	bl	8003078 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b64      	cmp	r3, #100	; 0x64
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e007      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fae:	d1ef      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	40023800 	.word	0x40023800

08006fc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fde:	f040 8086 	bne.w	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006fe2:	4b8d      	ldr	r3, [pc, #564]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ff0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff8:	d03e      	beq.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ffe:	d073      	beq.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d000      	beq.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007004:	e074      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007006:	4b84      	ldr	r3, [pc, #528]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d108      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007012:	4b81      	ldr	r3, [pc, #516]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800701a:	4a80      	ldr	r2, [pc, #512]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800701c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	e007      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007024:	4b7c      	ldr	r3, [pc, #496]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800702c:	4a7c      	ldr	r2, [pc, #496]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800702e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007032:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007034:	4b78      	ldr	r3, [pc, #480]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703a:	0e1b      	lsrs	r3, r3, #24
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007042:	4b75      	ldr	r3, [pc, #468]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007048:	099b      	lsrs	r3, r3, #6
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	fb02 f203 	mul.w	r2, r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	fbb2 f3f3 	udiv	r3, r2, r3
 800705a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800705c:	4b6e      	ldr	r3, [pc, #440]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800705e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007062:	0a1b      	lsrs	r3, r3, #8
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]
        break;
 8007076:	e03b      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007078:	4b67      	ldr	r3, [pc, #412]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d108      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007084:	4b64      	ldr	r3, [pc, #400]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708c:	4a63      	ldr	r2, [pc, #396]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	613b      	str	r3, [r7, #16]
 8007094:	e007      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007096:	4b60      	ldr	r3, [pc, #384]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800709e:	4a60      	ldr	r2, [pc, #384]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80070a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80070a6:	4b5c      	ldr	r3, [pc, #368]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ac:	0e1b      	lsrs	r3, r3, #24
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80070b4:	4b58      	ldr	r3, [pc, #352]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ba:	099b      	lsrs	r3, r3, #6
 80070bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	fb02 f203 	mul.w	r2, r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80070ce:	4b52      	ldr	r3, [pc, #328]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e4:	617b      	str	r3, [r7, #20]
        break;
 80070e6:	e003      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80070e8:	4b4e      	ldr	r3, [pc, #312]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80070ea:	617b      	str	r3, [r7, #20]
        break;
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80070ee:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070f6:	f040 8086 	bne.w	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80070fa:	4b47      	ldr	r3, [pc, #284]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007100:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007108:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007110:	d03e      	beq.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007112:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007116:	d073      	beq.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007118:	2b00      	cmp	r3, #0
 800711a:	d000      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800711c:	e074      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800711e:	4b3e      	ldr	r3, [pc, #248]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d108      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800712a:	4b3b      	ldr	r3, [pc, #236]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007132:	4a3a      	ldr	r2, [pc, #232]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	e007      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800713c:	4b36      	ldr	r3, [pc, #216]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007144:	4a36      	ldr	r2, [pc, #216]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007146:	fbb2 f3f3 	udiv	r3, r2, r3
 800714a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800714c:	4b32      	ldr	r3, [pc, #200]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800714e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007152:	0e1b      	lsrs	r3, r3, #24
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800715a:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800715c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007160:	099b      	lsrs	r3, r3, #6
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	fb02 f203 	mul.w	r2, r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007172:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007174:	4b28      	ldr	r3, [pc, #160]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	3301      	adds	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
 800718c:	617b      	str	r3, [r7, #20]
        break;
 800718e:	e03b      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007190:	4b21      	ldr	r3, [pc, #132]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d108      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800719c:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071a4:	4a1d      	ldr	r2, [pc, #116]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80071a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071aa:	613b      	str	r3, [r7, #16]
 80071ac:	e007      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80071ae:	4b1a      	ldr	r3, [pc, #104]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071b6:	4a1a      	ldr	r2, [pc, #104]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80071b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071bc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80071be:	4b16      	ldr	r3, [pc, #88]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c4:	0e1b      	lsrs	r3, r3, #24
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80071cc:	4b12      	ldr	r3, [pc, #72]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d2:	099b      	lsrs	r3, r3, #6
 80071d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	fb02 f203 	mul.w	r2, r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	3301      	adds	r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	617b      	str	r3, [r7, #20]
        break;
 80071fe:	e003      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007202:	617b      	str	r3, [r7, #20]
        break;
 8007204:	e000      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007206:	bf00      	nop

  return frequency;
 8007208:	697b      	ldr	r3, [r7, #20]
}
 800720a:	4618      	mov	r0, r3
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800
 800721c:	00f42400 	.word	0x00f42400
 8007220:	017d7840 	.word	0x017d7840
 8007224:	00bb8000 	.word	0x00bb8000

08007228 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e06b      	b.n	8007312 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	7f5b      	ldrb	r3, [r3, #29]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d105      	bne.n	8007250 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fb f9d4 	bl	80025f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	22ca      	movs	r2, #202	; 0xca
 800725c:	625a      	str	r2, [r3, #36]	; 0x24
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2253      	movs	r2, #83	; 0x53
 8007264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fb00 	bl	800786c <RTC_EnterInitMode>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d008      	beq.n	8007284 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	22ff      	movs	r2, #255	; 0xff
 8007278:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e046      	b.n	8007312 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6899      	ldr	r1, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4b23      	ldr	r3, [pc, #140]	; (800731c <HAL_RTC_Init+0xf4>)
 8007290:	400b      	ands	r3, r1
 8007292:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6899      	ldr	r1, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	68d2      	ldr	r2, [r2, #12]
 80072ba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6919      	ldr	r1, [r3, #16]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	041a      	lsls	r2, r3, #16
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072de:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0208 	bic.w	r2, r2, #8
 80072ee:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	22ff      	movs	r2, #255	; 0xff
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007310:	2300      	movs	r3, #0
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	ff8fffbf 	.word	0xff8fffbf

08007320 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007320:	b590      	push	{r4, r7, lr}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	7f1b      	ldrb	r3, [r3, #28]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_RTC_SetTime+0x1c>
 8007338:	2302      	movs	r3, #2
 800733a:	e0a8      	b.n	800748e <HAL_RTC_SetTime+0x16e>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2202      	movs	r2, #2
 8007346:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d126      	bne.n	800739c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 faac 	bl	80078c4 <RTC_ByteToBcd2>
 800736c:	4603      	mov	r3, r0
 800736e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 faa5 	bl	80078c4 <RTC_ByteToBcd2>
 800737a:	4603      	mov	r3, r0
 800737c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800737e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	789b      	ldrb	r3, [r3, #2]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fa9d 	bl	80078c4 <RTC_ByteToBcd2>
 800738a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800738c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	7b1b      	ldrb	r3, [r3, #12]
 8007394:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	e018      	b.n	80073ce <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2200      	movs	r2, #0
 80073ae:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	785b      	ldrb	r3, [r3, #1]
 80073ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80073bc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80073c2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	7b1b      	ldrb	r3, [r3, #12]
 80073c8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	22ca      	movs	r2, #202	; 0xca
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2253      	movs	r2, #83	; 0x53
 80073dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 fa44 	bl	800786c <RTC_EnterInitMode>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	22ff      	movs	r2, #255	; 0xff
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2204      	movs	r2, #4
 80073f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e045      	b.n	800748e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	6979      	ldr	r1, [r7, #20]
 8007408:	4b23      	ldr	r3, [pc, #140]	; (8007498 <HAL_RTC_SetTime+0x178>)
 800740a:	400b      	ands	r3, r1
 800740c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800741c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6899      	ldr	r1, [r3, #8]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007444:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b00      	cmp	r3, #0
 8007452:	d111      	bne.n	8007478 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f9e1 	bl	800781c <HAL_RTC_WaitForSynchro>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	22ff      	movs	r2, #255	; 0xff
 8007466:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2204      	movs	r2, #4
 800746c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e00a      	b.n	800748e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	22ff      	movs	r2, #255	; 0xff
 800747e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800748c:	2300      	movs	r3, #0
  }
}
 800748e:	4618      	mov	r0, r3
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	bd90      	pop	{r4, r7, pc}
 8007496:	bf00      	nop
 8007498:	007f7f7f 	.word	0x007f7f7f

0800749c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800749c:	b590      	push	{r4, r7, lr}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	7f1b      	ldrb	r3, [r3, #28]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_RTC_SetDate+0x1c>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e092      	b.n	80075de <HAL_RTC_SetDate+0x142>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2201      	movs	r2, #1
 80074bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2202      	movs	r2, #2
 80074c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10e      	bne.n	80074e8 <HAL_RTC_SetDate+0x4c>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d008      	beq.n	80074e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	f023 0310 	bic.w	r3, r3, #16
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	330a      	adds	r3, #10
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d11c      	bne.n	8007528 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	78db      	ldrb	r3, [r3, #3]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f9e6 	bl	80078c4 <RTC_ByteToBcd2>
 80074f8:	4603      	mov	r3, r0
 80074fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 f9df 	bl	80078c4 <RTC_ByteToBcd2>
 8007506:	4603      	mov	r3, r0
 8007508:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800750a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	789b      	ldrb	r3, [r3, #2]
 8007510:	4618      	mov	r0, r3
 8007512:	f000 f9d7 	bl	80078c4 <RTC_ByteToBcd2>
 8007516:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007518:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007522:	4313      	orrs	r3, r2
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	e00e      	b.n	8007546 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	78db      	ldrb	r3, [r3, #3]
 800752c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	785b      	ldrb	r3, [r3, #1]
 8007532:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007534:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800753a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	22ca      	movs	r2, #202	; 0xca
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2253      	movs	r2, #83	; 0x53
 8007554:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f988 	bl	800786c <RTC_EnterInitMode>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	22ff      	movs	r2, #255	; 0xff
 8007568:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2204      	movs	r2, #4
 800756e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e031      	b.n	80075de <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	6979      	ldr	r1, [r7, #20]
 8007580:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <HAL_RTC_SetDate+0x14c>)
 8007582:	400b      	ands	r3, r1
 8007584:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007594:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d111      	bne.n	80075c8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f939 	bl	800781c <HAL_RTC_WaitForSynchro>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	22ff      	movs	r2, #255	; 0xff
 80075b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2204      	movs	r2, #4
 80075bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e00a      	b.n	80075de <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	22ff      	movs	r2, #255	; 0xff
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80075dc:	2300      	movs	r3, #0
  }
}
 80075de:	4618      	mov	r0, r3
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd90      	pop	{r4, r7, pc}
 80075e6:	bf00      	nop
 80075e8:	00ffff3f 	.word	0x00ffff3f

080075ec <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	2300      	movs	r3, #0
 8007602:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	7f1b      	ldrb	r3, [r3, #28]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_RTC_SetAlarm+0x24>
 800760c:	2302      	movs	r3, #2
 800760e:	e101      	b.n	8007814 <HAL_RTC_SetAlarm+0x228>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2202      	movs	r2, #2
 800761a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d137      	bne.n	8007692 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f942 	bl	80078c4 <RTC_ByteToBcd2>
 8007640:	4603      	mov	r3, r0
 8007642:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	4618      	mov	r0, r3
 800764a:	f000 f93b 	bl	80078c4 <RTC_ByteToBcd2>
 800764e:	4603      	mov	r3, r0
 8007650:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007652:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	789b      	ldrb	r3, [r3, #2]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 f933 	bl	80078c4 <RTC_ByteToBcd2>
 800765e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007660:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	7b1b      	ldrb	r3, [r3, #12]
 8007668:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800766a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f925 	bl	80078c4 <RTC_ByteToBcd2>
 800767a:	4603      	mov	r3, r0
 800767c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800767e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007686:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800768c:	4313      	orrs	r3, r2
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	e023      	b.n	80076da <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80076b2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80076b8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	7b1b      	ldrb	r3, [r3, #12]
 80076be:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80076c0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076c8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80076ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80076d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80076d6:	4313      	orrs	r3, r2
 80076d8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	22ca      	movs	r2, #202	; 0xca
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2253      	movs	r2, #83	; 0x53
 80076f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fe:	d13f      	bne.n	8007780 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800770e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800771e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007720:	f7fb fcaa 	bl	8003078 <HAL_GetTick>
 8007724:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007726:	e013      	b.n	8007750 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007728:	f7fb fca6 	bl	8003078 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007736:	d90b      	bls.n	8007750 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	22ff      	movs	r2, #255	; 0xff
 800773e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2203      	movs	r2, #3
 8007744:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e061      	b.n	8007814 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0e4      	beq.n	8007728 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800777c:	609a      	str	r2, [r3, #8]
 800777e:	e03e      	b.n	80077fe <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800778e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800779e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077a0:	f7fb fc6a 	bl	8003078 <HAL_GetTick>
 80077a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80077a6:	e013      	b.n	80077d0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80077a8:	f7fb fc66 	bl	8003078 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077b6:	d90b      	bls.n	80077d0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	22ff      	movs	r2, #255	; 0xff
 80077be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2203      	movs	r2, #3
 80077c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e021      	b.n	8007814 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0e4      	beq.n	80077a8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	22ff      	movs	r2, #255	; 0xff
 8007804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3724      	adds	r7, #36	; 0x24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd90      	pop	{r4, r7, pc}

0800781c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007836:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007838:	f7fb fc1e 	bl	8003078 <HAL_GetTick>
 800783c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800783e:	e009      	b.n	8007854 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007840:	f7fb fc1a 	bl	8003078 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800784e:	d901      	bls.n	8007854 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e007      	b.n	8007864 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0ee      	beq.n	8007840 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d119      	bne.n	80078ba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f04f 32ff 	mov.w	r2, #4294967295
 800788e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007890:	f7fb fbf2 	bl	8003078 <HAL_GetTick>
 8007894:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007896:	e009      	b.n	80078ac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007898:	f7fb fbee 	bl	8003078 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078a6:	d901      	bls.n	80078ac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e007      	b.n	80078bc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0ee      	beq.n	8007898 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80078d2:	e005      	b.n	80078e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3301      	adds	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	3b0a      	subs	r3, #10
 80078de:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	2b09      	cmp	r3, #9
 80078e4:	d8f6      	bhi.n	80078d4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	b2db      	uxtb	r3, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	7f1b      	ldrb	r3, [r3, #28]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_RTCEx_SetTimeStamp+0x1c>
 8007918:	2302      	movs	r3, #2
 800791a:	e03e      	b.n	800799a <HAL_RTCEx_SetTimeStamp+0x9a>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007930:	4013      	ands	r3, r2
 8007932:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4313      	orrs	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	22ca      	movs	r2, #202	; 0xca
 8007942:	625a      	str	r2, [r3, #36]	; 0x24
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2253      	movs	r2, #83	; 0x53
 800794a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0206 	bic.w	r2, r2, #6
 800795a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	430a      	orrs	r2, r1
 800796a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007982:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	22ff      	movs	r2, #255	; 0xff
 800798a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	fffff7f7 	.word	0xfffff7f7

080079ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e149      	b.n	8007c5e <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d106      	bne.n	80079e4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fb f92a 	bl	8002c38 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f94f 	bl	8007c90 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d007      	beq.n	8007a0a <HAL_SAI_Init+0x5e>
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d302      	bcc.n	8007a04 <HAL_SAI_Init+0x58>
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d006      	beq.n	8007a10 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007a02:	e008      	b.n	8007a16 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]
      break;
 8007a08:	e005      	b.n	8007a16 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007a0a:	2310      	movs	r3, #16
 8007a0c:	61fb      	str	r3, [r7, #28]
      break;
 8007a0e:	e002      	b.n	8007a16 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007a10:	2320      	movs	r3, #32
 8007a12:	61fb      	str	r3, [r7, #28]
      break;
 8007a14:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d81d      	bhi.n	8007a5a <HAL_SAI_Init+0xae>
 8007a1e:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <HAL_SAI_Init+0x78>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a3b 	.word	0x08007a3b
 8007a2c:	08007a43 	.word	0x08007a43
 8007a30:	08007a4b 	.word	0x08007a4b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]
      }
      break;
 8007a38:	e010      	b.n	8007a5c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007a40:	e00c      	b.n	8007a5c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a46:	617b      	str	r3, [r7, #20]
      }
      break;
 8007a48:	e008      	b.n	8007a5c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a4e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007a58:	e000      	b.n	8007a5c <HAL_SAI_Init+0xb0>
  default:
    break;
 8007a5a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a81      	ldr	r2, [pc, #516]	; (8007c68 <HAL_SAI_Init+0x2bc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d004      	beq.n	8007a70 <HAL_SAI_Init+0xc4>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a80      	ldr	r2, [pc, #512]	; (8007c6c <HAL_SAI_Init+0x2c0>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d103      	bne.n	8007a78 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007a70:	4a7f      	ldr	r2, [pc, #508]	; (8007c70 <HAL_SAI_Init+0x2c4>)
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	e002      	b.n	8007a7e <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007a78:	4a7e      	ldr	r2, [pc, #504]	; (8007c74 <HAL_SAI_Init+0x2c8>)
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d043      	beq.n	8007b0e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a76      	ldr	r2, [pc, #472]	; (8007c68 <HAL_SAI_Init+0x2bc>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d004      	beq.n	8007a9e <HAL_SAI_Init+0xf2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a74      	ldr	r2, [pc, #464]	; (8007c6c <HAL_SAI_Init+0x2c0>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d104      	bne.n	8007aa8 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007a9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007aa2:	f7ff fa8d 	bl	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007aa6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a72      	ldr	r2, [pc, #456]	; (8007c78 <HAL_SAI_Init+0x2cc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d004      	beq.n	8007abc <HAL_SAI_Init+0x110>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a71      	ldr	r2, [pc, #452]	; (8007c7c <HAL_SAI_Init+0x2d0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d104      	bne.n	8007ac6 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007abc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007ac0:	f7ff fa7e 	bl	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ac4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	025b      	lsls	r3, r3, #9
 8007ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007adc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4a67      	ldr	r2, [pc, #412]	; (8007c80 <HAL_SAI_Init+0x2d4>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	08da      	lsrs	r2, r3, #3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	4b64      	ldr	r3, [pc, #400]	; (8007c80 <HAL_SAI_Init+0x2d4>)
 8007af0:	fba3 2301 	umull	r2, r3, r3, r1
 8007af4:	08da      	lsrs	r2, r3, #3
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	1aca      	subs	r2, r1, r3
 8007b00:	2a08      	cmp	r2, #8
 8007b02:	d904      	bls.n	8007b0e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_SAI_Init+0x172>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d109      	bne.n	8007b32 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <HAL_SAI_Init+0x17e>
 8007b26:	2300      	movs	r3, #0
 8007b28:	e001      	b.n	8007b2e <HAL_SAI_Init+0x182>
 8007b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	e008      	b.n	8007b44 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d102      	bne.n	8007b40 <HAL_SAI_Init+0x194>
 8007b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b3e:	e000      	b.n	8007b42 <HAL_SAI_Init+0x196>
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6819      	ldr	r1, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b4d      	ldr	r3, [pc, #308]	; (8007c84 <HAL_SAI_Init+0x2d8>)
 8007b50:	400b      	ands	r3, r1
 8007b52:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6819      	ldr	r1, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b68:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007b7c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b88:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	051b      	lsls	r3, r3, #20
 8007b90:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6859      	ldr	r1, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	4b38      	ldr	r3, [pc, #224]	; (8007c88 <HAL_SAI_Init+0x2dc>)
 8007ba6:	400b      	ands	r3, r1
 8007ba8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6859      	ldr	r1, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6899      	ldr	r1, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b2e      	ldr	r3, [pc, #184]	; (8007c8c <HAL_SAI_Init+0x2e0>)
 8007bd4:	400b      	ands	r3, r1
 8007bd6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6899      	ldr	r1, [r3, #8]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007be8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007bee:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007bf4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007bfe:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68d9      	ldr	r1, [r3, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007c16:	400b      	ands	r3, r1
 8007c18:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68d9      	ldr	r1, [r3, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c28:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c36:	3b01      	subs	r3, #1
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3720      	adds	r7, #32
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	40015804 	.word	0x40015804
 8007c6c:	40015824 	.word	0x40015824
 8007c70:	40015800 	.word	0x40015800
 8007c74:	40015c00 	.word	0x40015c00
 8007c78:	40015c04 	.word	0x40015c04
 8007c7c:	40015c24 	.word	0x40015c24
 8007c80:	cccccccd 	.word	0xcccccccd
 8007c84:	ff05c010 	.word	0xff05c010
 8007c88:	ffff1ff0 	.word	0xffff1ff0
 8007c8c:	fff88000 	.word	0xfff88000

08007c90 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007c90:	b490      	push	{r4, r7}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007c98:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <SAI_Disable+0x64>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <SAI_Disable+0x68>)
 8007c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca2:	0b1b      	lsrs	r3, r3, #12
 8007ca4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007cb8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007cba:	4623      	mov	r3, r4
 8007cbc:	1e5c      	subs	r4, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd6:	e006      	b.n	8007ce6 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e9      	bne.n	8007cba <SAI_Disable+0x2a>

  return status;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc90      	pop	{r4, r7}
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	2000002c 	.word	0x2000002c
 8007cf8:	95cbec1b 	.word	0x95cbec1b

08007cfc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e022      	b.n	8007d54 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d105      	bne.n	8007d26 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fa fc83 	bl	800262c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2203      	movs	r2, #3
 8007d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f814 	bl	8007d5c <HAL_SD_InitCard>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e00a      	b.n	8007d54 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d5c:	b5b0      	push	{r4, r5, r7, lr}
 8007d5e:	b08e      	sub	sp, #56	; 0x38
 8007d60:	af04      	add	r7, sp, #16
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007d78:	2376      	movs	r3, #118	; 0x76
 8007d7a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681d      	ldr	r5, [r3, #0]
 8007d80:	466c      	mov	r4, sp
 8007d82:	f107 0314 	add.w	r3, r7, #20
 8007d86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d8e:	f107 0308 	add.w	r3, r7, #8
 8007d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d94:	4628      	mov	r0, r5
 8007d96:	f002 fed3 	bl	800ab40 <SDMMC_Init>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e03b      	b.n	8007e24 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dba:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f002 fef6 	bl	800abb2 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dd4:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fde6 	bl	80089a8 <SD_PowerON>
 8007ddc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e013      	b.n	8007e24 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fd05 	bl	800880c <SD_InitCard>
 8007e02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00b      	beq.n	8007e22 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3728      	adds	r7, #40	; 0x28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bdb0      	pop	{r4, r5, r7, pc}

08007e2c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08c      	sub	sp, #48	; 0x30
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d107      	bne.n	8007e54 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0cc      	b.n	8007fee <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f040 80c5 	bne.w	8007fec <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d907      	bls.n	8007e86 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e0b3      	b.n	8007fee <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2203      	movs	r2, #3
 8007e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	4a53      	ldr	r2, [pc, #332]	; (8007ff8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007eac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	4a52      	ldr	r2, [pc, #328]	; (8007ffc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007eb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	2200      	movs	r2, #0
 8007ebc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3380      	adds	r3, #128	; 0x80
 8007ec8:	4619      	mov	r1, r3
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	025b      	lsls	r3, r3, #9
 8007ed0:	089b      	lsrs	r3, r3, #2
 8007ed2:	f7fb fdfd 	bl	8003ad0 <HAL_DMA_Start_IT>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d017      	beq.n	8007f0c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007eea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a43      	ldr	r2, [pc, #268]	; (8008000 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007ef2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e070      	b.n	8007fee <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0208 	orr.w	r2, r2, #8
 8007f1a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d002      	beq.n	8007f2a <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	025b      	lsls	r3, r3, #9
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f32:	4618      	mov	r0, r3
 8007f34:	f002 fed0 	bl	800acd8 <SDMMC_CmdBlockLength>
 8007f38:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00f      	beq.n	8007f60 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a2e      	ldr	r2, [pc, #184]	; (8008000 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e046      	b.n	8007fee <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295
 8007f64:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	025b      	lsls	r3, r3, #9
 8007f6a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f6c:	2390      	movs	r3, #144	; 0x90
 8007f6e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f70:	2302      	movs	r3, #2
 8007f72:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f107 0210 	add.w	r2, r7, #16
 8007f84:	4611      	mov	r1, r2
 8007f86:	4618      	mov	r0, r3
 8007f88:	f002 fe7a 	bl	800ac80 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d90a      	bls.n	8007fa8 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2282      	movs	r2, #130	; 0x82
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f002 fede 	bl	800ad60 <SDMMC_CmdReadMultiBlock>
 8007fa4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007fa6:	e009      	b.n	8007fbc <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2281      	movs	r2, #129	; 0x81
 8007fac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f002 feb1 	bl	800ad1c <SDMMC_CmdReadSingleBlock>
 8007fba:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d012      	beq.n	8007fe8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a0e      	ldr	r2, [pc, #56]	; (8008000 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e002      	b.n	8007fee <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e000      	b.n	8007fee <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8007fec:	2302      	movs	r3, #2
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3730      	adds	r7, #48	; 0x30
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	080086f7 	.word	0x080086f7
 8007ffc:	08008769 	.word	0x08008769
 8008000:	004005ff 	.word	0x004005ff

08008004 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08c      	sub	sp, #48	; 0x30
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d107      	bne.n	800802c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e0cf      	b.n	80081cc <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	f040 80c8 	bne.w	80081ca <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	441a      	add	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804a:	429a      	cmp	r2, r3
 800804c:	d907      	bls.n	800805e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e0b6      	b.n	80081cc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2203      	movs	r2, #3
 8008062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 021a 	orr.w	r2, r2, #26
 800807c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008082:	4a54      	ldr	r2, [pc, #336]	; (80081d4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808a:	4a53      	ldr	r2, [pc, #332]	; (80081d8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800808c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008092:	2200      	movs	r2, #0
 8008094:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	2b01      	cmp	r3, #1
 800809c:	d002      	beq.n	80080a4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	025b      	lsls	r3, r3, #9
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80080ac:	4618      	mov	r0, r3
 80080ae:	f002 fe13 	bl	800acd8 <SDMMC_CmdBlockLength>
 80080b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00f      	beq.n	80080da <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a47      	ldr	r2, [pc, #284]	; (80081dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	431a      	orrs	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e078      	b.n	80081cc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d90a      	bls.n	80080f6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	22a0      	movs	r2, #160	; 0xa0
 80080e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ec:	4618      	mov	r0, r3
 80080ee:	f002 fe7b 	bl	800ade8 <SDMMC_CmdWriteMultiBlock>
 80080f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080f4:	e009      	b.n	800810a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2290      	movs	r2, #144	; 0x90
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008102:	4618      	mov	r0, r3
 8008104:	f002 fe4e 	bl	800ada4 <SDMMC_CmdWriteSingleBlock>
 8008108:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d012      	beq.n	8008136 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a31      	ldr	r2, [pc, #196]	; (80081dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	431a      	orrs	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e04a      	b.n	80081cc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0208 	orr.w	r2, r2, #8
 8008144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3380      	adds	r3, #128	; 0x80
 8008152:	461a      	mov	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	025b      	lsls	r3, r3, #9
 8008158:	089b      	lsrs	r3, r3, #2
 800815a:	f7fb fcb9 	bl	8003ad0 <HAL_DMA_Start_IT>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01a      	beq.n	800819a <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 021a 	bic.w	r2, r2, #26
 8008172:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a18      	ldr	r2, [pc, #96]	; (80081dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800817a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e018      	b.n	80081cc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	025b      	lsls	r3, r3, #9
 80081a4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081a6:	2390      	movs	r3, #144	; 0x90
 80081a8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80081b2:	2301      	movs	r3, #1
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f107 0210 	add.w	r2, r7, #16
 80081be:	4611      	mov	r1, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 fd5d 	bl	800ac80 <SDMMC_ConfigData>

      return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3730      	adds	r7, #48	; 0x30
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	080086cd 	.word	0x080086cd
 80081d8:	08008769 	.word	0x08008769
 80081dc:	004005ff 	.word	0x004005ff

080081e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008202:	0f9b      	lsrs	r3, r3, #30
 8008204:	b2da      	uxtb	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800820e:	0e9b      	lsrs	r3, r3, #26
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	b2da      	uxtb	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008220:	0e1b      	lsrs	r3, r3, #24
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0303 	and.w	r3, r3, #3
 8008228:	b2da      	uxtb	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008232:	0c1b      	lsrs	r3, r3, #16
 8008234:	b2da      	uxtb	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b2da      	uxtb	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008254:	0d1b      	lsrs	r3, r3, #20
 8008256:	b29a      	uxth	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008260:	0c1b      	lsrs	r3, r3, #16
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008272:	0bdb      	lsrs	r3, r3, #15
 8008274:	b2db      	uxtb	r3, r3
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	b2da      	uxtb	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008284:	0b9b      	lsrs	r3, r3, #14
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	b2da      	uxtb	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008296:	0b5b      	lsrs	r3, r3, #13
 8008298:	b2db      	uxtb	r3, r3
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082a8:	0b1b      	lsrs	r3, r3, #12
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2200      	movs	r2, #0
 80082ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d163      	bne.n	800838c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082c8:	009a      	lsls	r2, r3, #2
 80082ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 80082ce:	4013      	ands	r3, r2
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80082d4:	0f92      	lsrs	r2, r2, #30
 80082d6:	431a      	orrs	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082e0:	0edb      	lsrs	r3, r3, #27
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f2:	0e1b      	lsrs	r3, r3, #24
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008304:	0d5b      	lsrs	r3, r3, #21
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	b2da      	uxtb	r2, r3
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008316:	0c9b      	lsrs	r3, r3, #18
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	b2da      	uxtb	r2, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008328:	0bdb      	lsrs	r3, r3, #15
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	b2da      	uxtb	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	7e1b      	ldrb	r3, [r3, #24]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	3302      	adds	r3, #2
 800834c:	2201      	movs	r2, #1
 800834e:	fa02 f303 	lsl.w	r3, r2, r3
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008356:	fb02 f203 	mul.w	r2, r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	7a1b      	ldrb	r3, [r3, #8]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	2201      	movs	r2, #1
 800836a:	409a      	lsls	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008378:	0a52      	lsrs	r2, r2, #9
 800837a:	fb02 f203 	mul.w	r2, r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008388:	661a      	str	r2, [r3, #96]	; 0x60
 800838a:	e031      	b.n	80083f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008390:	2b01      	cmp	r3, #1
 8008392:	d11d      	bne.n	80083d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a2:	0c1b      	lsrs	r3, r3, #16
 80083a4:	431a      	orrs	r2, r3
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	3301      	adds	r3, #1
 80083b0:	029a      	lsls	r2, r3, #10
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	661a      	str	r2, [r3, #96]	; 0x60
 80083ce:	e00f      	b.n	80083f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a58      	ldr	r2, [pc, #352]	; (8008538 <HAL_SD_GetCardCSD+0x344>)
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e09d      	b.n	800852c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f4:	0b9b      	lsrs	r3, r3, #14
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008406:	09db      	lsrs	r3, r3, #7
 8008408:	b2db      	uxtb	r3, r3
 800840a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840e:	b2da      	uxtb	r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	b2da      	uxtb	r2, r3
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008428:	0fdb      	lsrs	r3, r3, #31
 800842a:	b2da      	uxtb	r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008434:	0f5b      	lsrs	r3, r3, #29
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 0303 	and.w	r3, r3, #3
 800843c:	b2da      	uxtb	r2, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008446:	0e9b      	lsrs	r3, r3, #26
 8008448:	b2db      	uxtb	r3, r3
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	b2da      	uxtb	r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008458:	0d9b      	lsrs	r3, r3, #22
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	b2da      	uxtb	r2, r3
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846a:	0d5b      	lsrs	r3, r3, #21
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	b2da      	uxtb	r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008486:	0c1b      	lsrs	r3, r3, #16
 8008488:	b2db      	uxtb	r3, r3
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	b2da      	uxtb	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849a:	0bdb      	lsrs	r3, r3, #15
 800849c:	b2db      	uxtb	r3, r3
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ae:	0b9b      	lsrs	r3, r3, #14
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	0b5b      	lsrs	r3, r3, #13
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	0b1b      	lsrs	r3, r3, #12
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	0a9b      	lsrs	r3, r3, #10
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fe:	0a1b      	lsrs	r3, r3, #8
 8008500:	b2db      	uxtb	r3, r3
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	b2da      	uxtb	r2, r3
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851a:	b2da      	uxtb	r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	004005ff 	.word	0x004005ff

0800853c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008594:	b5b0      	push	{r4, r5, r7, lr}
 8008596:	b08e      	sub	sp, #56	; 0x38
 8008598:	af04      	add	r7, sp, #16
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2203      	movs	r2, #3
 80085a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d02e      	beq.n	800860c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b4:	d106      	bne.n	80085c4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
 80085c2:	e029      	b.n	8008618 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ca:	d10a      	bne.n	80085e2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 faa1 	bl	8008b14 <SD_WideBus_Enable>
 80085d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	639a      	str	r2, [r3, #56]	; 0x38
 80085e0:	e01a      	b.n	8008618 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fade 	bl	8008baa <SD_WideBus_Disable>
 80085ee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
 80085fc:	e00c      	b.n	8008618 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	639a      	str	r2, [r3, #56]	; 0x38
 800860a:	e005      	b.n	8008618 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	2b00      	cmp	r3, #0
 800861e:	d009      	beq.n	8008634 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a18      	ldr	r2, [pc, #96]	; (8008688 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e024      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681d      	ldr	r5, [r3, #0]
 800865a:	466c      	mov	r4, sp
 800865c:	f107 0318 	add.w	r3, r7, #24
 8008660:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800866e:	4628      	mov	r0, r5
 8008670:	f002 fa66 	bl	800ab40 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3728      	adds	r7, #40	; 0x28
 8008682:	46bd      	mov	sp, r7
 8008684:	bdb0      	pop	{r4, r5, r7, pc}
 8008686:	bf00      	nop
 8008688:	004005ff 	.word	0x004005ff

0800868c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008698:	f107 030c 	add.w	r3, r7, #12
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa10 	bl	8008ac4 <SD_SendStatus>
 80086a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	0a5b      	lsrs	r3, r3, #9
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80086c2:	693b      	ldr	r3, [r7, #16]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b084      	sub	sp, #16
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008708:	2b82      	cmp	r3, #130	; 0x82
 800870a:	d111      	bne.n	8008730 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f002 fb8b 	bl	800ae2c <SDMMC_CmdStopTransfer>
 8008716:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d008      	beq.n	8008730 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fd58 	bl	80081e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0208 	bic.w	r2, r2, #8
 800873e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f240 523a 	movw	r2, #1338	; 0x53a
 8008748:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f002 ffd1 	bl	800b700 <HAL_SD_RxCpltCallback>
#endif
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7fb fa0a 	bl	8003b90 <HAL_DMA_GetError>
 800877c:	4603      	mov	r3, r0
 800877e:	2b02      	cmp	r3, #2
 8008780:	d03e      	beq.n	8008800 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008788:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008790:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d002      	beq.n	800879e <SD_DMAError+0x36>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d12d      	bne.n	80087fa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a19      	ldr	r2, [pc, #100]	; (8008808 <SD_DMAError+0xa0>)
 80087a4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80087b4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80087c2:	6978      	ldr	r0, [r7, #20]
 80087c4:	f7ff ff62 	bl	800868c <HAL_SD_GetCardState>
 80087c8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b06      	cmp	r3, #6
 80087ce:	d002      	beq.n	80087d6 <SD_DMAError+0x6e>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	d10a      	bne.n	80087ec <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 fb26 	bl	800ae2c <SDMMC_CmdStopTransfer>
 80087e0:	4602      	mov	r2, r0
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	431a      	orrs	r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2200      	movs	r2, #0
 80087f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80087fa:	6978      	ldr	r0, [r7, #20]
 80087fc:	f7ff fcf0 	bl	80081e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008800:	bf00      	nop
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	004005ff 	.word	0x004005ff

0800880c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800880c:	b5b0      	push	{r4, r5, r7, lr}
 800880e:	b094      	sub	sp, #80	; 0x50
 8008810:	af04      	add	r7, sp, #16
 8008812:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008814:	2301      	movs	r3, #1
 8008816:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f002 f9d7 	bl	800abd0 <SDMMC_GetPowerState>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d102      	bne.n	800882e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008828:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800882c:	e0b7      	b.n	800899e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	2b03      	cmp	r3, #3
 8008834:	d02f      	beq.n	8008896 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f002 fc01 	bl	800b042 <SDMMC_CmdSendCID>
 8008840:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <SD_InitCard+0x40>
    {
      return errorstate;
 8008848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884a:	e0a8      	b.n	800899e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f002 fa01 	bl	800ac5a <SDMMC_GetResponse>
 8008858:	4602      	mov	r2, r0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2104      	movs	r1, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f002 f9f8 	bl	800ac5a <SDMMC_GetResponse>
 800886a:	4602      	mov	r2, r0
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2108      	movs	r1, #8
 8008876:	4618      	mov	r0, r3
 8008878:	f002 f9ef 	bl	800ac5a <SDMMC_GetResponse>
 800887c:	4602      	mov	r2, r0
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	210c      	movs	r1, #12
 8008888:	4618      	mov	r0, r3
 800888a:	f002 f9e6 	bl	800ac5a <SDMMC_GetResponse>
 800888e:	4602      	mov	r2, r0
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889a:	2b03      	cmp	r3, #3
 800889c:	d00d      	beq.n	80088ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f107 020e 	add.w	r2, r7, #14
 80088a6:	4611      	mov	r1, r2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f002 fc07 	bl	800b0bc <SDMMC_CmdSetRelAdd>
 80088ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <SD_InitCard+0xae>
    {
      return errorstate;
 80088b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b8:	e071      	b.n	800899e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d036      	beq.n	8008930 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80088c2:	89fb      	ldrh	r3, [r7, #14]
 80088c4:	461a      	mov	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d2:	041b      	lsls	r3, r3, #16
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f002 fbd1 	bl	800b07e <SDMMC_CmdSendCSD>
 80088dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80088e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e6:	e05a      	b.n	800899e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2100      	movs	r1, #0
 80088ee:	4618      	mov	r0, r3
 80088f0:	f002 f9b3 	bl	800ac5a <SDMMC_GetResponse>
 80088f4:	4602      	mov	r2, r0
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2104      	movs	r1, #4
 8008900:	4618      	mov	r0, r3
 8008902:	f002 f9aa 	bl	800ac5a <SDMMC_GetResponse>
 8008906:	4602      	mov	r2, r0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2108      	movs	r1, #8
 8008912:	4618      	mov	r0, r3
 8008914:	f002 f9a1 	bl	800ac5a <SDMMC_GetResponse>
 8008918:	4602      	mov	r2, r0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	210c      	movs	r1, #12
 8008924:	4618      	mov	r0, r3
 8008926:	f002 f998 	bl	800ac5a <SDMMC_GetResponse>
 800892a:	4602      	mov	r2, r0
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2104      	movs	r1, #4
 8008936:	4618      	mov	r0, r3
 8008938:	f002 f98f 	bl	800ac5a <SDMMC_GetResponse>
 800893c:	4603      	mov	r3, r0
 800893e:	0d1a      	lsrs	r2, r3, #20
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008944:	f107 0310 	add.w	r3, r7, #16
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fc52 	bl	80081f4 <HAL_SD_GetCardCSD>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800895a:	e020      	b.n	800899e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6819      	ldr	r1, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008964:	041b      	lsls	r3, r3, #16
 8008966:	f04f 0400 	mov.w	r4, #0
 800896a:	461a      	mov	r2, r3
 800896c:	4623      	mov	r3, r4
 800896e:	4608      	mov	r0, r1
 8008970:	f002 fa7e 	bl	800ae70 <SDMMC_CmdSelDesel>
 8008974:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <SD_InitCard+0x174>
  {
    return errorstate;
 800897c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897e:	e00e      	b.n	800899e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681d      	ldr	r5, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	466c      	mov	r4, sp
 8008988:	f103 0210 	add.w	r2, r3, #16
 800898c:	ca07      	ldmia	r2, {r0, r1, r2}
 800898e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008992:	3304      	adds	r3, #4
 8008994:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008996:	4628      	mov	r0, r5
 8008998:	f002 f8d2 	bl	800ab40 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3740      	adds	r7, #64	; 0x40
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080089a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	2300      	movs	r3, #0
 80089ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f002 fa78 	bl	800aeb6 <SDMMC_CmdGoIdleState>
 80089c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	e072      	b.n	8008ab8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f002 fa8b 	bl	800aef2 <SDMMC_CmdOperCond>
 80089dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00d      	beq.n	8008a00 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f002 fa61 	bl	800aeb6 <SDMMC_CmdGoIdleState>
 80089f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <SD_PowerON+0x5e>
    {
      return errorstate;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	e05b      	b.n	8008ab8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d137      	bne.n	8008a7e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2100      	movs	r1, #0
 8008a14:	4618      	mov	r0, r3
 8008a16:	f002 fa8b 	bl	800af30 <SDMMC_CmdAppCommand>
 8008a1a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d02d      	beq.n	8008a7e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a26:	e047      	b.n	8008ab8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f002 fa7e 	bl	800af30 <SDMMC_CmdAppCommand>
 8008a34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <SD_PowerON+0x98>
    {
      return errorstate;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	e03b      	b.n	8008ab8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	491e      	ldr	r1, [pc, #120]	; (8008ac0 <SD_PowerON+0x118>)
 8008a46:	4618      	mov	r0, r3
 8008a48:	f002 fa94 	bl	800af74 <SDMMC_CmdAppOperCommand>
 8008a4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a58:	e02e      	b.n	8008ab8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f002 f8fa 	bl	800ac5a <SDMMC_GetResponse>
 8008a66:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	0fdb      	lsrs	r3, r3, #31
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <SD_PowerON+0xcc>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <SD_PowerON+0xce>
 8008a74:	2300      	movs	r3, #0
 8008a76:	613b      	str	r3, [r7, #16]

    count++;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d802      	bhi.n	8008a8e <SD_PowerON+0xe6>
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0cc      	beq.n	8008a28 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d902      	bls.n	8008a9e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a9c:	e00c      	b.n	8008ab8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	645a      	str	r2, [r3, #68]	; 0x44
 8008aae:	e002      	b.n	8008ab6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	c1100000 	.word	0xc1100000

08008ac4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008ad4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ad8:	e018      	b.n	8008b0c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae2:	041b      	lsls	r3, r3, #16
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f002 fb09 	bl	800b0fe <SDMMC_CmdSendStatus>
 8008aec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	e009      	b.n	8008b0c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f002 f8ab 	bl	800ac5a <SDMMC_GetResponse>
 8008b04:	4602      	mov	r2, r0
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	2300      	movs	r3, #0
 8008b22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 f895 	bl	800ac5a <SDMMC_GetResponse>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b3a:	d102      	bne.n	8008b42 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b40:	e02f      	b.n	8008ba2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b42:	f107 030c 	add.w	r3, r7, #12
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f879 	bl	8008c40 <SD_FindSCR>
 8008b4e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	e023      	b.n	8008ba2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01c      	beq.n	8008b9e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6c:	041b      	lsls	r3, r3, #16
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4610      	mov	r0, r2
 8008b72:	f002 f9dd 	bl	800af30 <SDMMC_CmdAppCommand>
 8008b76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	e00f      	b.n	8008ba2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2102      	movs	r1, #2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f002 fa17 	bl	800afbc <SDMMC_CmdBusWidth>
 8008b8e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	e003      	b.n	8008ba2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e001      	b.n	8008ba2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f002 f84a 	bl	800ac5a <SDMMC_GetResponse>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bd0:	d102      	bne.n	8008bd8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bd6:	e02f      	b.n	8008c38 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008bd8:	f107 030c 	add.w	r3, r7, #12
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f82e 	bl	8008c40 <SD_FindSCR>
 8008be4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	e023      	b.n	8008c38 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01c      	beq.n	8008c34 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f002 f992 	bl	800af30 <SDMMC_CmdAppCommand>
 8008c0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	e00f      	b.n	8008c38 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f002 f9cc 	bl	800afbc <SDMMC_CmdBusWidth>
 8008c24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	e003      	b.n	8008c38 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c30:	2300      	movs	r3, #0
 8008c32:	e001      	b.n	8008c38 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c40:	b590      	push	{r4, r7, lr}
 8008c42:	b08f      	sub	sp, #60	; 0x3c
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c4a:	f7fa fa15 	bl	8003078 <HAL_GetTick>
 8008c4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008c54:	2300      	movs	r3, #0
 8008c56:	60bb      	str	r3, [r7, #8]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2108      	movs	r1, #8
 8008c66:	4618      	mov	r0, r3
 8008c68:	f002 f836 	bl	800acd8 <SDMMC_CmdBlockLength>
 8008c6c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	e0a9      	b.n	8008dcc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c80:	041b      	lsls	r3, r3, #16
 8008c82:	4619      	mov	r1, r3
 8008c84:	4610      	mov	r0, r2
 8008c86:	f002 f953 	bl	800af30 <SDMMC_CmdAppCommand>
 8008c8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	e09a      	b.n	8008dcc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008ca0:	2330      	movs	r3, #48	; 0x30
 8008ca2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f107 0210 	add.w	r2, r7, #16
 8008cb8:	4611      	mov	r1, r2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 ffe0 	bl	800ac80 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f002 f99b 	bl	800b000 <SDMMC_CmdSendSCR>
 8008cca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d022      	beq.n	8008d18 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	e07a      	b.n	8008dcc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00e      	beq.n	8008d02 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6819      	ldr	r1, [r3, #0]
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	f107 0208 	add.w	r2, r7, #8
 8008cf0:	18d4      	adds	r4, r2, r3
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	f001 ff50 	bl	800ab98 <SDMMC_ReadFIFO>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	6023      	str	r3, [r4, #0]
      index++;
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfe:	3301      	adds	r3, #1
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d02:	f7fa f9b9 	bl	8003078 <HAL_GetTick>
 8008d06:	4602      	mov	r2, r0
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d10:	d102      	bne.n	8008d18 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d16:	e059      	b.n	8008dcc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d1e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008d22:	4013      	ands	r3, r2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0d6      	beq.n	8008cd6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2e:	f003 0308 	and.w	r3, r3, #8
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2208      	movs	r2, #8
 8008d3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	e044      	b.n	8008dcc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2202      	movs	r2, #2
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e037      	b.n	8008dcc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d72:	2320      	movs	r3, #32
 8008d74:	e02a      	b.n	8008dcc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d7e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	061a      	lsls	r2, r3, #24
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d96:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	0e1b      	lsrs	r3, r3, #24
 8008d9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	601a      	str	r2, [r3, #0]
    scr++;
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	3304      	adds	r3, #4
 8008da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	061a      	lsls	r2, r3, #24
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008db4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	0a1b      	lsrs	r3, r3, #8
 8008dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008dbe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	0e1b      	lsrs	r3, r3, #24
 8008dc4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	373c      	adds	r7, #60	; 0x3c
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd90      	pop	{r4, r7, pc}

08008dd4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e025      	b.n	8008e34 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d106      	bne.n	8008e02 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7f9 ff11 	bl	8002c24 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4619      	mov	r1, r3
 8008e14:	4610      	mov	r0, r2
 8008e16:	f001 fd6d 	bl	800a8f4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	461a      	mov	r2, r3
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	f001 fdd7 	bl	800a9d8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d101      	bne.n	8008e58 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008e54:	2302      	movs	r3, #2
 8008e56:	e018      	b.n	8008e8a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 fe35 	bl	800aad8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d104      	bne.n	8008e80 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2205      	movs	r2, #5
 8008e7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008e7e:	e003      	b.n	8008e88 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d101      	bne.n	8008eac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	e00e      	b.n	8008eca <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f001 fe2d 	bl	800ab1a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e04c      	b.n	8008f80 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7f9 fbf8 	bl	80026f0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2202      	movs	r2, #2
 8008f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0203 	bic.w	r2, r2, #3
 8008f16:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <HAL_SPDIFRX_Init+0xb4>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008f30:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008f36:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008f3c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008f42:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008f48:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008f4e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008f54:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008f5a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008f60:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	fff88407 	.word	0xfff88407

08008f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e084      	b.n	80090a8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d106      	bne.n	8008fbe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7f9 fbdb 	bl	8002774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fde:	d902      	bls.n	8008fe6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	e002      	b.n	8008fec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008ff4:	d007      	beq.n	8009006 <HAL_SPI_Init+0x7a>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ffe:	d002      	beq.n	8009006 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009016:	d903      	bls.n	8009020 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	631a      	str	r2, [r3, #48]	; 0x30
 800901e:	e002      	b.n	8009026 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	431a      	orrs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	ea42 0103 	orr.w	r1, r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	0c1b      	lsrs	r3, r3, #16
 8009066:	f003 0204 	and.w	r2, r3, #4
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	431a      	orrs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	ea42 0103 	orr.w	r1, r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	430a      	orrs	r2, r1
 8009086:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	69da      	ldr	r2, [r3, #28]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009096:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e01d      	b.n	80090fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d106      	bne.n	80090dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7f9 fbae 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f000 fb78 	bl	80097e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0201 	orr.w	r2, r2, #1
 800911e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689a      	ldr	r2, [r3, #8]
 8009126:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <HAL_TIM_Base_Start_IT+0x50>)
 8009128:	4013      	ands	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b06      	cmp	r3, #6
 8009130:	d00b      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x42>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009138:	d007      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0201 	orr.w	r2, r2, #1
 8009148:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	00010007 	.word	0x00010007

0800915c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e01d      	b.n	80091aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f9 fbb2 	bl	80028ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f000 fb22 	bl	80097e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d122      	bne.n	800920e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d11b      	bne.n	800920e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f06f 0202 	mvn.w	r2, #2
 80091de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f003 0303 	and.w	r3, r3, #3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fad7 	bl	80097a8 <HAL_TIM_IC_CaptureCallback>
 80091fa:	e005      	b.n	8009208 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fac9 	bl	8009794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fada 	bl	80097bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b04      	cmp	r3, #4
 800921a:	d122      	bne.n	8009262 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b04      	cmp	r3, #4
 8009228:	d11b      	bne.n	8009262 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f06f 0204 	mvn.w	r2, #4
 8009232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 faad 	bl	80097a8 <HAL_TIM_IC_CaptureCallback>
 800924e:	e005      	b.n	800925c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fa9f 	bl	8009794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fab0 	bl	80097bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	2b08      	cmp	r3, #8
 800926e:	d122      	bne.n	80092b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	f003 0308 	and.w	r3, r3, #8
 800927a:	2b08      	cmp	r3, #8
 800927c:	d11b      	bne.n	80092b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f06f 0208 	mvn.w	r2, #8
 8009286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2204      	movs	r2, #4
 800928c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fa83 	bl	80097a8 <HAL_TIM_IC_CaptureCallback>
 80092a2:	e005      	b.n	80092b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fa75 	bl	8009794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa86 	bl	80097bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d122      	bne.n	800930a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f003 0310 	and.w	r3, r3, #16
 80092ce:	2b10      	cmp	r3, #16
 80092d0:	d11b      	bne.n	800930a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f06f 0210 	mvn.w	r2, #16
 80092da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2208      	movs	r2, #8
 80092e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d003      	beq.n	80092f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fa59 	bl	80097a8 <HAL_TIM_IC_CaptureCallback>
 80092f6:	e005      	b.n	8009304 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa4b 	bl	8009794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa5c 	bl	80097bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b01      	cmp	r3, #1
 8009316:	d10e      	bne.n	8009336 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b01      	cmp	r3, #1
 8009324:	d107      	bne.n	8009336 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f06f 0201 	mvn.w	r2, #1
 800932e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7f8 fd9b 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009340:	2b80      	cmp	r3, #128	; 0x80
 8009342:	d10e      	bne.n	8009362 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934e:	2b80      	cmp	r3, #128	; 0x80
 8009350:	d107      	bne.n	8009362 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800935a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fe71 	bl	800a044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009370:	d10e      	bne.n	8009390 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800937c:	2b80      	cmp	r3, #128	; 0x80
 800937e:	d107      	bne.n	8009390 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fe64 	bl	800a058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d10e      	bne.n	80093bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a8:	2b40      	cmp	r3, #64	; 0x40
 80093aa:	d107      	bne.n	80093bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa0a 	bl	80097d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d10e      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	d107      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f06f 0220 	mvn.w	r2, #32
 80093e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fe24 	bl	800a030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009402:	2b01      	cmp	r3, #1
 8009404:	d101      	bne.n	800940a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009406:	2302      	movs	r3, #2
 8009408:	e105      	b.n	8009616 <HAL_TIM_PWM_ConfigChannel+0x226>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2202      	movs	r2, #2
 8009416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b14      	cmp	r3, #20
 800941e:	f200 80f0 	bhi.w	8009602 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009422:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	0800947d 	.word	0x0800947d
 800942c:	08009603 	.word	0x08009603
 8009430:	08009603 	.word	0x08009603
 8009434:	08009603 	.word	0x08009603
 8009438:	080094bd 	.word	0x080094bd
 800943c:	08009603 	.word	0x08009603
 8009440:	08009603 	.word	0x08009603
 8009444:	08009603 	.word	0x08009603
 8009448:	080094ff 	.word	0x080094ff
 800944c:	08009603 	.word	0x08009603
 8009450:	08009603 	.word	0x08009603
 8009454:	08009603 	.word	0x08009603
 8009458:	0800953f 	.word	0x0800953f
 800945c:	08009603 	.word	0x08009603
 8009460:	08009603 	.word	0x08009603
 8009464:	08009603 	.word	0x08009603
 8009468:	08009581 	.word	0x08009581
 800946c:	08009603 	.word	0x08009603
 8009470:	08009603 	.word	0x08009603
 8009474:	08009603 	.word	0x08009603
 8009478:	080095c1 	.word	0x080095c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fa4e 	bl	8009924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	699a      	ldr	r2, [r3, #24]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0208 	orr.w	r2, r2, #8
 8009496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699a      	ldr	r2, [r3, #24]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0204 	bic.w	r2, r2, #4
 80094a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6999      	ldr	r1, [r3, #24]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	691a      	ldr	r2, [r3, #16]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	619a      	str	r2, [r3, #24]
      break;
 80094ba:	e0a3      	b.n	8009604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 faa0 	bl	8009a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699a      	ldr	r2, [r3, #24]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	699a      	ldr	r2, [r3, #24]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6999      	ldr	r1, [r3, #24]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	021a      	lsls	r2, r3, #8
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	619a      	str	r2, [r3, #24]
      break;
 80094fc:	e082      	b.n	8009604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	4618      	mov	r0, r3
 8009506:	f000 faf7 	bl	8009af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69da      	ldr	r2, [r3, #28]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f042 0208 	orr.w	r2, r2, #8
 8009518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69da      	ldr	r2, [r3, #28]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 0204 	bic.w	r2, r2, #4
 8009528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69d9      	ldr	r1, [r3, #28]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	61da      	str	r2, [r3, #28]
      break;
 800953c:	e062      	b.n	8009604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	4618      	mov	r0, r3
 8009546:	f000 fb4d 	bl	8009be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	69da      	ldr	r2, [r3, #28]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69da      	ldr	r2, [r3, #28]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69d9      	ldr	r1, [r3, #28]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	021a      	lsls	r2, r3, #8
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	61da      	str	r2, [r3, #28]
      break;
 800957e:	e041      	b.n	8009604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fb84 	bl	8009c94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0208 	orr.w	r2, r2, #8
 800959a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 0204 	bic.w	r2, r2, #4
 80095aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	691a      	ldr	r2, [r3, #16]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80095be:	e021      	b.n	8009604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68b9      	ldr	r1, [r7, #8]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fbb6 	bl	8009d38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	021a      	lsls	r2, r3, #8
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	430a      	orrs	r2, r1
 80095fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009600:	e000      	b.n	8009604 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009602:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop

08009620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_TIM_ConfigClockSource+0x18>
 8009634:	2302      	movs	r3, #2
 8009636:	e0a6      	b.n	8009786 <HAL_TIM_ConfigClockSource+0x166>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	4b4f      	ldr	r3, [pc, #316]	; (8009790 <HAL_TIM_ConfigClockSource+0x170>)
 8009654:	4013      	ands	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800965e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b40      	cmp	r3, #64	; 0x40
 800966e:	d067      	beq.n	8009740 <HAL_TIM_ConfigClockSource+0x120>
 8009670:	2b40      	cmp	r3, #64	; 0x40
 8009672:	d80b      	bhi.n	800968c <HAL_TIM_ConfigClockSource+0x6c>
 8009674:	2b10      	cmp	r3, #16
 8009676:	d073      	beq.n	8009760 <HAL_TIM_ConfigClockSource+0x140>
 8009678:	2b10      	cmp	r3, #16
 800967a:	d802      	bhi.n	8009682 <HAL_TIM_ConfigClockSource+0x62>
 800967c:	2b00      	cmp	r3, #0
 800967e:	d06f      	beq.n	8009760 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009680:	e078      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009682:	2b20      	cmp	r3, #32
 8009684:	d06c      	beq.n	8009760 <HAL_TIM_ConfigClockSource+0x140>
 8009686:	2b30      	cmp	r3, #48	; 0x30
 8009688:	d06a      	beq.n	8009760 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800968a:	e073      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800968c:	2b70      	cmp	r3, #112	; 0x70
 800968e:	d00d      	beq.n	80096ac <HAL_TIM_ConfigClockSource+0x8c>
 8009690:	2b70      	cmp	r3, #112	; 0x70
 8009692:	d804      	bhi.n	800969e <HAL_TIM_ConfigClockSource+0x7e>
 8009694:	2b50      	cmp	r3, #80	; 0x50
 8009696:	d033      	beq.n	8009700 <HAL_TIM_ConfigClockSource+0xe0>
 8009698:	2b60      	cmp	r3, #96	; 0x60
 800969a:	d041      	beq.n	8009720 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800969c:	e06a      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800969e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a2:	d066      	beq.n	8009772 <HAL_TIM_ConfigClockSource+0x152>
 80096a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a8:	d017      	beq.n	80096da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80096aa:	e063      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	6899      	ldr	r1, [r3, #8]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	f000 fc0a 	bl	8009ed4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	609a      	str	r2, [r3, #8]
      break;
 80096d8:	e04c      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	6899      	ldr	r1, [r3, #8]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	f000 fbf3 	bl	8009ed4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096fc:	609a      	str	r2, [r3, #8]
      break;
 80096fe:	e039      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	6859      	ldr	r1, [r3, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	461a      	mov	r2, r3
 800970e:	f000 fb67 	bl	8009de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2150      	movs	r1, #80	; 0x50
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fbc0 	bl	8009e9e <TIM_ITRx_SetConfig>
      break;
 800971e:	e029      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	6859      	ldr	r1, [r3, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	461a      	mov	r2, r3
 800972e:	f000 fb86 	bl	8009e3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2160      	movs	r1, #96	; 0x60
 8009738:	4618      	mov	r0, r3
 800973a:	f000 fbb0 	bl	8009e9e <TIM_ITRx_SetConfig>
      break;
 800973e:	e019      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	6859      	ldr	r1, [r3, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	461a      	mov	r2, r3
 800974e:	f000 fb47 	bl	8009de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2140      	movs	r1, #64	; 0x40
 8009758:	4618      	mov	r0, r3
 800975a:	f000 fba0 	bl	8009e9e <TIM_ITRx_SetConfig>
      break;
 800975e:	e009      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f000 fb97 	bl	8009e9e <TIM_ITRx_SetConfig>
      break;
 8009770:	e000      	b.n	8009774 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	fffeff88 	.word	0xfffeff88

08009794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a40      	ldr	r2, [pc, #256]	; (80098f8 <TIM_Base_SetConfig+0x114>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d013      	beq.n	8009824 <TIM_Base_SetConfig+0x40>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009802:	d00f      	beq.n	8009824 <TIM_Base_SetConfig+0x40>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a3d      	ldr	r2, [pc, #244]	; (80098fc <TIM_Base_SetConfig+0x118>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d00b      	beq.n	8009824 <TIM_Base_SetConfig+0x40>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a3c      	ldr	r2, [pc, #240]	; (8009900 <TIM_Base_SetConfig+0x11c>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d007      	beq.n	8009824 <TIM_Base_SetConfig+0x40>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a3b      	ldr	r2, [pc, #236]	; (8009904 <TIM_Base_SetConfig+0x120>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d003      	beq.n	8009824 <TIM_Base_SetConfig+0x40>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a3a      	ldr	r2, [pc, #232]	; (8009908 <TIM_Base_SetConfig+0x124>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d108      	bne.n	8009836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a2f      	ldr	r2, [pc, #188]	; (80098f8 <TIM_Base_SetConfig+0x114>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d02b      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009844:	d027      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a2c      	ldr	r2, [pc, #176]	; (80098fc <TIM_Base_SetConfig+0x118>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d023      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a2b      	ldr	r2, [pc, #172]	; (8009900 <TIM_Base_SetConfig+0x11c>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d01f      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a2a      	ldr	r2, [pc, #168]	; (8009904 <TIM_Base_SetConfig+0x120>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d01b      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a29      	ldr	r2, [pc, #164]	; (8009908 <TIM_Base_SetConfig+0x124>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d017      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a28      	ldr	r2, [pc, #160]	; (800990c <TIM_Base_SetConfig+0x128>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d013      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a27      	ldr	r2, [pc, #156]	; (8009910 <TIM_Base_SetConfig+0x12c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d00f      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a26      	ldr	r2, [pc, #152]	; (8009914 <TIM_Base_SetConfig+0x130>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d00b      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a25      	ldr	r2, [pc, #148]	; (8009918 <TIM_Base_SetConfig+0x134>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d007      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a24      	ldr	r2, [pc, #144]	; (800991c <TIM_Base_SetConfig+0x138>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d003      	beq.n	8009896 <TIM_Base_SetConfig+0xb2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a23      	ldr	r2, [pc, #140]	; (8009920 <TIM_Base_SetConfig+0x13c>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d108      	bne.n	80098a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800989c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a0a      	ldr	r2, [pc, #40]	; (80098f8 <TIM_Base_SetConfig+0x114>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d003      	beq.n	80098dc <TIM_Base_SetConfig+0xf8>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a0c      	ldr	r2, [pc, #48]	; (8009908 <TIM_Base_SetConfig+0x124>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d103      	bne.n	80098e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	691a      	ldr	r2, [r3, #16]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	615a      	str	r2, [r3, #20]
}
 80098ea:	bf00      	nop
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	40010000 	.word	0x40010000
 80098fc:	40000400 	.word	0x40000400
 8009900:	40000800 	.word	0x40000800
 8009904:	40000c00 	.word	0x40000c00
 8009908:	40010400 	.word	0x40010400
 800990c:	40014000 	.word	0x40014000
 8009910:	40014400 	.word	0x40014400
 8009914:	40014800 	.word	0x40014800
 8009918:	40001800 	.word	0x40001800
 800991c:	40001c00 	.word	0x40001c00
 8009920:	40002000 	.word	0x40002000

08009924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	f023 0201 	bic.w	r2, r3, #1
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4b2b      	ldr	r3, [pc, #172]	; (80099fc <TIM_OC1_SetConfig+0xd8>)
 8009950:	4013      	ands	r3, r2
 8009952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0303 	bic.w	r3, r3, #3
 800995a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	4313      	orrs	r3, r2
 8009964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f023 0302 	bic.w	r3, r3, #2
 800996c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	4313      	orrs	r3, r2
 8009976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a21      	ldr	r2, [pc, #132]	; (8009a00 <TIM_OC1_SetConfig+0xdc>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d003      	beq.n	8009988 <TIM_OC1_SetConfig+0x64>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a20      	ldr	r2, [pc, #128]	; (8009a04 <TIM_OC1_SetConfig+0xe0>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d10c      	bne.n	80099a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f023 0308 	bic.w	r3, r3, #8
 800998e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f023 0304 	bic.w	r3, r3, #4
 80099a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a16      	ldr	r2, [pc, #88]	; (8009a00 <TIM_OC1_SetConfig+0xdc>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d003      	beq.n	80099b2 <TIM_OC1_SetConfig+0x8e>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a15      	ldr	r2, [pc, #84]	; (8009a04 <TIM_OC1_SetConfig+0xe0>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d111      	bne.n	80099d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	621a      	str	r2, [r3, #32]
}
 80099f0:	bf00      	nop
 80099f2:	371c      	adds	r7, #28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	fffeff8f 	.word	0xfffeff8f
 8009a00:	40010000 	.word	0x40010000
 8009a04:	40010400 	.word	0x40010400

08009a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	f023 0210 	bic.w	r2, r3, #16
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	4b2e      	ldr	r3, [pc, #184]	; (8009aec <TIM_OC2_SetConfig+0xe4>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f023 0320 	bic.w	r3, r3, #32
 8009a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a23      	ldr	r2, [pc, #140]	; (8009af0 <TIM_OC2_SetConfig+0xe8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d003      	beq.n	8009a70 <TIM_OC2_SetConfig+0x68>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a22      	ldr	r2, [pc, #136]	; (8009af4 <TIM_OC2_SetConfig+0xec>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d10d      	bne.n	8009a8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	011b      	lsls	r3, r3, #4
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a18      	ldr	r2, [pc, #96]	; (8009af0 <TIM_OC2_SetConfig+0xe8>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d003      	beq.n	8009a9c <TIM_OC2_SetConfig+0x94>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a17      	ldr	r2, [pc, #92]	; (8009af4 <TIM_OC2_SetConfig+0xec>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d113      	bne.n	8009ac4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	621a      	str	r2, [r3, #32]
}
 8009ade:	bf00      	nop
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	feff8fff 	.word	0xfeff8fff
 8009af0:	40010000 	.word	0x40010000
 8009af4:	40010400 	.word	0x40010400

08009af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	4b2d      	ldr	r3, [pc, #180]	; (8009bd8 <TIM_OC3_SetConfig+0xe0>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a22      	ldr	r2, [pc, #136]	; (8009bdc <TIM_OC3_SetConfig+0xe4>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d003      	beq.n	8009b5e <TIM_OC3_SetConfig+0x66>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a21      	ldr	r2, [pc, #132]	; (8009be0 <TIM_OC3_SetConfig+0xe8>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d10d      	bne.n	8009b7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	021b      	lsls	r3, r3, #8
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a17      	ldr	r2, [pc, #92]	; (8009bdc <TIM_OC3_SetConfig+0xe4>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d003      	beq.n	8009b8a <TIM_OC3_SetConfig+0x92>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a16      	ldr	r2, [pc, #88]	; (8009be0 <TIM_OC3_SetConfig+0xe8>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d113      	bne.n	8009bb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	011b      	lsls	r3, r3, #4
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	011b      	lsls	r3, r3, #4
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	621a      	str	r2, [r3, #32]
}
 8009bcc:	bf00      	nop
 8009bce:	371c      	adds	r7, #28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	fffeff8f 	.word	0xfffeff8f
 8009bdc:	40010000 	.word	0x40010000
 8009be0:	40010400 	.word	0x40010400

08009be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4b1e      	ldr	r3, [pc, #120]	; (8009c88 <TIM_OC4_SetConfig+0xa4>)
 8009c10:	4013      	ands	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	031b      	lsls	r3, r3, #12
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a13      	ldr	r2, [pc, #76]	; (8009c8c <TIM_OC4_SetConfig+0xa8>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d003      	beq.n	8009c4c <TIM_OC4_SetConfig+0x68>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a12      	ldr	r2, [pc, #72]	; (8009c90 <TIM_OC4_SetConfig+0xac>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d109      	bne.n	8009c60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	019b      	lsls	r3, r3, #6
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	621a      	str	r2, [r3, #32]
}
 8009c7a:	bf00      	nop
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	feff8fff 	.word	0xfeff8fff
 8009c8c:	40010000 	.word	0x40010000
 8009c90:	40010400 	.word	0x40010400

08009c94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	4b1b      	ldr	r3, [pc, #108]	; (8009d2c <TIM_OC5_SetConfig+0x98>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a12      	ldr	r2, [pc, #72]	; (8009d30 <TIM_OC5_SetConfig+0x9c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d003      	beq.n	8009cf2 <TIM_OC5_SetConfig+0x5e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a11      	ldr	r2, [pc, #68]	; (8009d34 <TIM_OC5_SetConfig+0xa0>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d109      	bne.n	8009d06 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	021b      	lsls	r3, r3, #8
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	621a      	str	r2, [r3, #32]
}
 8009d20:	bf00      	nop
 8009d22:	371c      	adds	r7, #28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	fffeff8f 	.word	0xfffeff8f
 8009d30:	40010000 	.word	0x40010000
 8009d34:	40010400 	.word	0x40010400

08009d38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b087      	sub	sp, #28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <TIM_OC6_SetConfig+0x9c>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	051b      	lsls	r3, r3, #20
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a13      	ldr	r2, [pc, #76]	; (8009dd8 <TIM_OC6_SetConfig+0xa0>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d003      	beq.n	8009d98 <TIM_OC6_SetConfig+0x60>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a12      	ldr	r2, [pc, #72]	; (8009ddc <TIM_OC6_SetConfig+0xa4>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d109      	bne.n	8009dac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	029b      	lsls	r3, r3, #10
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	621a      	str	r2, [r3, #32]
}
 8009dc6:	bf00      	nop
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	feff8fff 	.word	0xfeff8fff
 8009dd8:	40010000 	.word	0x40010000
 8009ddc:	40010400 	.word	0x40010400

08009de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f023 0201 	bic.w	r2, r3, #1
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f023 030a 	bic.w	r3, r3, #10
 8009e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	621a      	str	r2, [r3, #32]
}
 8009e32:	bf00      	nop
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b087      	sub	sp, #28
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	f023 0210 	bic.w	r2, r3, #16
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	031b      	lsls	r3, r3, #12
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	621a      	str	r2, [r3, #32]
}
 8009e92:	bf00      	nop
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	f043 0307 	orr.w	r3, r3, #7
 8009ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	609a      	str	r2, [r3, #8]
}
 8009ec8:	bf00      	nop
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	021a      	lsls	r2, r3, #8
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	609a      	str	r2, [r3, #8]
}
 8009f08:	bf00      	nop
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d101      	bne.n	8009f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f28:	2302      	movs	r3, #2
 8009f2a:	e06d      	b.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2202      	movs	r2, #2
 8009f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a30      	ldr	r2, [pc, #192]	; (800a014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d004      	beq.n	8009f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a2f      	ldr	r2, [pc, #188]	; (800a018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d108      	bne.n	8009f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a20      	ldr	r2, [pc, #128]	; (800a014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d022      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9e:	d01d      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a1d      	ldr	r2, [pc, #116]	; (800a01c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d018      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a1c      	ldr	r2, [pc, #112]	; (800a020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d013      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a1a      	ldr	r2, [pc, #104]	; (800a024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00e      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a15      	ldr	r2, [pc, #84]	; (800a018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d009      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a16      	ldr	r2, [pc, #88]	; (800a028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a15      	ldr	r2, [pc, #84]	; (800a02c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d10c      	bne.n	8009ff6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	40010000 	.word	0x40010000
 800a018:	40010400 	.word	0x40010400
 800a01c:	40000400 	.word	0x40000400
 800a020:	40000800 	.word	0x40000800
 800a024:	40000c00 	.word	0x40000c00
 800a028:	40014000 	.word	0x40014000
 800a02c:	40001800 	.word	0x40001800

0800a030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e040      	b.n	800a100 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a082:	2b00      	cmp	r3, #0
 800a084:	d106      	bne.n	800a094 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7f8 fcf4 	bl	8002a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2224      	movs	r2, #36	; 0x24
 800a098:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0201 	bic.w	r2, r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f82c 	bl	800a108 <UART_SetConfig>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d101      	bne.n	800a0ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e022      	b.n	800a100 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d002      	beq.n	800a0c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 faca 	bl	800a65c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0201 	orr.w	r2, r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fb51 	bl	800a7a0 <UART_CheckIdleState>
 800a0fe:	4603      	mov	r3, r0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a110:	2300      	movs	r3, #0
 800a112:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	689a      	ldr	r2, [r3, #8]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	431a      	orrs	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	431a      	orrs	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4bb1      	ldr	r3, [pc, #708]	; (800a3fc <UART_SetConfig+0x2f4>)
 800a138:	4013      	ands	r3, r2
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	6812      	ldr	r2, [r2, #0]
 800a13e:	6939      	ldr	r1, [r7, #16]
 800a140:	430b      	orrs	r3, r1
 800a142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a1b      	ldr	r3, [r3, #32]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	4313      	orrs	r3, r2
 800a168:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a9f      	ldr	r2, [pc, #636]	; (800a400 <UART_SetConfig+0x2f8>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d121      	bne.n	800a1cc <UART_SetConfig+0xc4>
 800a188:	4b9e      	ldr	r3, [pc, #632]	; (800a404 <UART_SetConfig+0x2fc>)
 800a18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	2b03      	cmp	r3, #3
 800a194:	d816      	bhi.n	800a1c4 <UART_SetConfig+0xbc>
 800a196:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <UART_SetConfig+0x94>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a1ad 	.word	0x0800a1ad
 800a1a0:	0800a1b9 	.word	0x0800a1b9
 800a1a4:	0800a1b3 	.word	0x0800a1b3
 800a1a8:	0800a1bf 	.word	0x0800a1bf
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	77fb      	strb	r3, [r7, #31]
 800a1b0:	e151      	b.n	800a456 <UART_SetConfig+0x34e>
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	77fb      	strb	r3, [r7, #31]
 800a1b6:	e14e      	b.n	800a456 <UART_SetConfig+0x34e>
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	77fb      	strb	r3, [r7, #31]
 800a1bc:	e14b      	b.n	800a456 <UART_SetConfig+0x34e>
 800a1be:	2308      	movs	r3, #8
 800a1c0:	77fb      	strb	r3, [r7, #31]
 800a1c2:	e148      	b.n	800a456 <UART_SetConfig+0x34e>
 800a1c4:	2310      	movs	r3, #16
 800a1c6:	77fb      	strb	r3, [r7, #31]
 800a1c8:	bf00      	nop
 800a1ca:	e144      	b.n	800a456 <UART_SetConfig+0x34e>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a8d      	ldr	r2, [pc, #564]	; (800a408 <UART_SetConfig+0x300>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d134      	bne.n	800a240 <UART_SetConfig+0x138>
 800a1d6:	4b8b      	ldr	r3, [pc, #556]	; (800a404 <UART_SetConfig+0x2fc>)
 800a1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1dc:	f003 030c 	and.w	r3, r3, #12
 800a1e0:	2b0c      	cmp	r3, #12
 800a1e2:	d829      	bhi.n	800a238 <UART_SetConfig+0x130>
 800a1e4:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <UART_SetConfig+0xe4>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a221 	.word	0x0800a221
 800a1f0:	0800a239 	.word	0x0800a239
 800a1f4:	0800a239 	.word	0x0800a239
 800a1f8:	0800a239 	.word	0x0800a239
 800a1fc:	0800a22d 	.word	0x0800a22d
 800a200:	0800a239 	.word	0x0800a239
 800a204:	0800a239 	.word	0x0800a239
 800a208:	0800a239 	.word	0x0800a239
 800a20c:	0800a227 	.word	0x0800a227
 800a210:	0800a239 	.word	0x0800a239
 800a214:	0800a239 	.word	0x0800a239
 800a218:	0800a239 	.word	0x0800a239
 800a21c:	0800a233 	.word	0x0800a233
 800a220:	2300      	movs	r3, #0
 800a222:	77fb      	strb	r3, [r7, #31]
 800a224:	e117      	b.n	800a456 <UART_SetConfig+0x34e>
 800a226:	2302      	movs	r3, #2
 800a228:	77fb      	strb	r3, [r7, #31]
 800a22a:	e114      	b.n	800a456 <UART_SetConfig+0x34e>
 800a22c:	2304      	movs	r3, #4
 800a22e:	77fb      	strb	r3, [r7, #31]
 800a230:	e111      	b.n	800a456 <UART_SetConfig+0x34e>
 800a232:	2308      	movs	r3, #8
 800a234:	77fb      	strb	r3, [r7, #31]
 800a236:	e10e      	b.n	800a456 <UART_SetConfig+0x34e>
 800a238:	2310      	movs	r3, #16
 800a23a:	77fb      	strb	r3, [r7, #31]
 800a23c:	bf00      	nop
 800a23e:	e10a      	b.n	800a456 <UART_SetConfig+0x34e>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a71      	ldr	r2, [pc, #452]	; (800a40c <UART_SetConfig+0x304>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d120      	bne.n	800a28c <UART_SetConfig+0x184>
 800a24a:	4b6e      	ldr	r3, [pc, #440]	; (800a404 <UART_SetConfig+0x2fc>)
 800a24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a250:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a254:	2b10      	cmp	r3, #16
 800a256:	d00f      	beq.n	800a278 <UART_SetConfig+0x170>
 800a258:	2b10      	cmp	r3, #16
 800a25a:	d802      	bhi.n	800a262 <UART_SetConfig+0x15a>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d005      	beq.n	800a26c <UART_SetConfig+0x164>
 800a260:	e010      	b.n	800a284 <UART_SetConfig+0x17c>
 800a262:	2b20      	cmp	r3, #32
 800a264:	d005      	beq.n	800a272 <UART_SetConfig+0x16a>
 800a266:	2b30      	cmp	r3, #48	; 0x30
 800a268:	d009      	beq.n	800a27e <UART_SetConfig+0x176>
 800a26a:	e00b      	b.n	800a284 <UART_SetConfig+0x17c>
 800a26c:	2300      	movs	r3, #0
 800a26e:	77fb      	strb	r3, [r7, #31]
 800a270:	e0f1      	b.n	800a456 <UART_SetConfig+0x34e>
 800a272:	2302      	movs	r3, #2
 800a274:	77fb      	strb	r3, [r7, #31]
 800a276:	e0ee      	b.n	800a456 <UART_SetConfig+0x34e>
 800a278:	2304      	movs	r3, #4
 800a27a:	77fb      	strb	r3, [r7, #31]
 800a27c:	e0eb      	b.n	800a456 <UART_SetConfig+0x34e>
 800a27e:	2308      	movs	r3, #8
 800a280:	77fb      	strb	r3, [r7, #31]
 800a282:	e0e8      	b.n	800a456 <UART_SetConfig+0x34e>
 800a284:	2310      	movs	r3, #16
 800a286:	77fb      	strb	r3, [r7, #31]
 800a288:	bf00      	nop
 800a28a:	e0e4      	b.n	800a456 <UART_SetConfig+0x34e>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a5f      	ldr	r2, [pc, #380]	; (800a410 <UART_SetConfig+0x308>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d120      	bne.n	800a2d8 <UART_SetConfig+0x1d0>
 800a296:	4b5b      	ldr	r3, [pc, #364]	; (800a404 <UART_SetConfig+0x2fc>)
 800a298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a29c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2a0:	2b40      	cmp	r3, #64	; 0x40
 800a2a2:	d00f      	beq.n	800a2c4 <UART_SetConfig+0x1bc>
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d802      	bhi.n	800a2ae <UART_SetConfig+0x1a6>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <UART_SetConfig+0x1b0>
 800a2ac:	e010      	b.n	800a2d0 <UART_SetConfig+0x1c8>
 800a2ae:	2b80      	cmp	r3, #128	; 0x80
 800a2b0:	d005      	beq.n	800a2be <UART_SetConfig+0x1b6>
 800a2b2:	2bc0      	cmp	r3, #192	; 0xc0
 800a2b4:	d009      	beq.n	800a2ca <UART_SetConfig+0x1c2>
 800a2b6:	e00b      	b.n	800a2d0 <UART_SetConfig+0x1c8>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	77fb      	strb	r3, [r7, #31]
 800a2bc:	e0cb      	b.n	800a456 <UART_SetConfig+0x34e>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	77fb      	strb	r3, [r7, #31]
 800a2c2:	e0c8      	b.n	800a456 <UART_SetConfig+0x34e>
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	77fb      	strb	r3, [r7, #31]
 800a2c8:	e0c5      	b.n	800a456 <UART_SetConfig+0x34e>
 800a2ca:	2308      	movs	r3, #8
 800a2cc:	77fb      	strb	r3, [r7, #31]
 800a2ce:	e0c2      	b.n	800a456 <UART_SetConfig+0x34e>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	77fb      	strb	r3, [r7, #31]
 800a2d4:	bf00      	nop
 800a2d6:	e0be      	b.n	800a456 <UART_SetConfig+0x34e>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a4d      	ldr	r2, [pc, #308]	; (800a414 <UART_SetConfig+0x30c>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d124      	bne.n	800a32c <UART_SetConfig+0x224>
 800a2e2:	4b48      	ldr	r3, [pc, #288]	; (800a404 <UART_SetConfig+0x2fc>)
 800a2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f0:	d012      	beq.n	800a318 <UART_SetConfig+0x210>
 800a2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f6:	d802      	bhi.n	800a2fe <UART_SetConfig+0x1f6>
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d007      	beq.n	800a30c <UART_SetConfig+0x204>
 800a2fc:	e012      	b.n	800a324 <UART_SetConfig+0x21c>
 800a2fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a302:	d006      	beq.n	800a312 <UART_SetConfig+0x20a>
 800a304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a308:	d009      	beq.n	800a31e <UART_SetConfig+0x216>
 800a30a:	e00b      	b.n	800a324 <UART_SetConfig+0x21c>
 800a30c:	2300      	movs	r3, #0
 800a30e:	77fb      	strb	r3, [r7, #31]
 800a310:	e0a1      	b.n	800a456 <UART_SetConfig+0x34e>
 800a312:	2302      	movs	r3, #2
 800a314:	77fb      	strb	r3, [r7, #31]
 800a316:	e09e      	b.n	800a456 <UART_SetConfig+0x34e>
 800a318:	2304      	movs	r3, #4
 800a31a:	77fb      	strb	r3, [r7, #31]
 800a31c:	e09b      	b.n	800a456 <UART_SetConfig+0x34e>
 800a31e:	2308      	movs	r3, #8
 800a320:	77fb      	strb	r3, [r7, #31]
 800a322:	e098      	b.n	800a456 <UART_SetConfig+0x34e>
 800a324:	2310      	movs	r3, #16
 800a326:	77fb      	strb	r3, [r7, #31]
 800a328:	bf00      	nop
 800a32a:	e094      	b.n	800a456 <UART_SetConfig+0x34e>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a39      	ldr	r2, [pc, #228]	; (800a418 <UART_SetConfig+0x310>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d124      	bne.n	800a380 <UART_SetConfig+0x278>
 800a336:	4b33      	ldr	r3, [pc, #204]	; (800a404 <UART_SetConfig+0x2fc>)
 800a338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a344:	d012      	beq.n	800a36c <UART_SetConfig+0x264>
 800a346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a34a:	d802      	bhi.n	800a352 <UART_SetConfig+0x24a>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d007      	beq.n	800a360 <UART_SetConfig+0x258>
 800a350:	e012      	b.n	800a378 <UART_SetConfig+0x270>
 800a352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a356:	d006      	beq.n	800a366 <UART_SetConfig+0x25e>
 800a358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a35c:	d009      	beq.n	800a372 <UART_SetConfig+0x26a>
 800a35e:	e00b      	b.n	800a378 <UART_SetConfig+0x270>
 800a360:	2301      	movs	r3, #1
 800a362:	77fb      	strb	r3, [r7, #31]
 800a364:	e077      	b.n	800a456 <UART_SetConfig+0x34e>
 800a366:	2302      	movs	r3, #2
 800a368:	77fb      	strb	r3, [r7, #31]
 800a36a:	e074      	b.n	800a456 <UART_SetConfig+0x34e>
 800a36c:	2304      	movs	r3, #4
 800a36e:	77fb      	strb	r3, [r7, #31]
 800a370:	e071      	b.n	800a456 <UART_SetConfig+0x34e>
 800a372:	2308      	movs	r3, #8
 800a374:	77fb      	strb	r3, [r7, #31]
 800a376:	e06e      	b.n	800a456 <UART_SetConfig+0x34e>
 800a378:	2310      	movs	r3, #16
 800a37a:	77fb      	strb	r3, [r7, #31]
 800a37c:	bf00      	nop
 800a37e:	e06a      	b.n	800a456 <UART_SetConfig+0x34e>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a25      	ldr	r2, [pc, #148]	; (800a41c <UART_SetConfig+0x314>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d124      	bne.n	800a3d4 <UART_SetConfig+0x2cc>
 800a38a:	4b1e      	ldr	r3, [pc, #120]	; (800a404 <UART_SetConfig+0x2fc>)
 800a38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a390:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a398:	d012      	beq.n	800a3c0 <UART_SetConfig+0x2b8>
 800a39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a39e:	d802      	bhi.n	800a3a6 <UART_SetConfig+0x29e>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d007      	beq.n	800a3b4 <UART_SetConfig+0x2ac>
 800a3a4:	e012      	b.n	800a3cc <UART_SetConfig+0x2c4>
 800a3a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3aa:	d006      	beq.n	800a3ba <UART_SetConfig+0x2b2>
 800a3ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3b0:	d009      	beq.n	800a3c6 <UART_SetConfig+0x2be>
 800a3b2:	e00b      	b.n	800a3cc <UART_SetConfig+0x2c4>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	77fb      	strb	r3, [r7, #31]
 800a3b8:	e04d      	b.n	800a456 <UART_SetConfig+0x34e>
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	77fb      	strb	r3, [r7, #31]
 800a3be:	e04a      	b.n	800a456 <UART_SetConfig+0x34e>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	77fb      	strb	r3, [r7, #31]
 800a3c4:	e047      	b.n	800a456 <UART_SetConfig+0x34e>
 800a3c6:	2308      	movs	r3, #8
 800a3c8:	77fb      	strb	r3, [r7, #31]
 800a3ca:	e044      	b.n	800a456 <UART_SetConfig+0x34e>
 800a3cc:	2310      	movs	r3, #16
 800a3ce:	77fb      	strb	r3, [r7, #31]
 800a3d0:	bf00      	nop
 800a3d2:	e040      	b.n	800a456 <UART_SetConfig+0x34e>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a11      	ldr	r2, [pc, #68]	; (800a420 <UART_SetConfig+0x318>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d139      	bne.n	800a452 <UART_SetConfig+0x34a>
 800a3de:	4b09      	ldr	r3, [pc, #36]	; (800a404 <UART_SetConfig+0x2fc>)
 800a3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ec:	d027      	beq.n	800a43e <UART_SetConfig+0x336>
 800a3ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3f2:	d817      	bhi.n	800a424 <UART_SetConfig+0x31c>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01c      	beq.n	800a432 <UART_SetConfig+0x32a>
 800a3f8:	e027      	b.n	800a44a <UART_SetConfig+0x342>
 800a3fa:	bf00      	nop
 800a3fc:	efff69f3 	.word	0xefff69f3
 800a400:	40011000 	.word	0x40011000
 800a404:	40023800 	.word	0x40023800
 800a408:	40004400 	.word	0x40004400
 800a40c:	40004800 	.word	0x40004800
 800a410:	40004c00 	.word	0x40004c00
 800a414:	40005000 	.word	0x40005000
 800a418:	40011400 	.word	0x40011400
 800a41c:	40007800 	.word	0x40007800
 800a420:	40007c00 	.word	0x40007c00
 800a424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a428:	d006      	beq.n	800a438 <UART_SetConfig+0x330>
 800a42a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a42e:	d009      	beq.n	800a444 <UART_SetConfig+0x33c>
 800a430:	e00b      	b.n	800a44a <UART_SetConfig+0x342>
 800a432:	2300      	movs	r3, #0
 800a434:	77fb      	strb	r3, [r7, #31]
 800a436:	e00e      	b.n	800a456 <UART_SetConfig+0x34e>
 800a438:	2302      	movs	r3, #2
 800a43a:	77fb      	strb	r3, [r7, #31]
 800a43c:	e00b      	b.n	800a456 <UART_SetConfig+0x34e>
 800a43e:	2304      	movs	r3, #4
 800a440:	77fb      	strb	r3, [r7, #31]
 800a442:	e008      	b.n	800a456 <UART_SetConfig+0x34e>
 800a444:	2308      	movs	r3, #8
 800a446:	77fb      	strb	r3, [r7, #31]
 800a448:	e005      	b.n	800a456 <UART_SetConfig+0x34e>
 800a44a:	2310      	movs	r3, #16
 800a44c:	77fb      	strb	r3, [r7, #31]
 800a44e:	bf00      	nop
 800a450:	e001      	b.n	800a456 <UART_SetConfig+0x34e>
 800a452:	2310      	movs	r3, #16
 800a454:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a45e:	d17f      	bne.n	800a560 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a460:	7ffb      	ldrb	r3, [r7, #31]
 800a462:	2b08      	cmp	r3, #8
 800a464:	d85c      	bhi.n	800a520 <UART_SetConfig+0x418>
 800a466:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <UART_SetConfig+0x364>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a491 	.word	0x0800a491
 800a470:	0800a4b1 	.word	0x0800a4b1
 800a474:	0800a4d1 	.word	0x0800a4d1
 800a478:	0800a521 	.word	0x0800a521
 800a47c:	0800a4e9 	.word	0x0800a4e9
 800a480:	0800a521 	.word	0x0800a521
 800a484:	0800a521 	.word	0x0800a521
 800a488:	0800a521 	.word	0x0800a521
 800a48c:	0800a509 	.word	0x0800a509
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a490:	f7fc f94e 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 800a494:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	005a      	lsls	r2, r3, #1
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	085b      	lsrs	r3, r3, #1
 800a4a0:	441a      	add	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	61bb      	str	r3, [r7, #24]
        break;
 800a4ae:	e03a      	b.n	800a526 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4b0:	f7fc f952 	bl	8006758 <HAL_RCC_GetPCLK2Freq>
 800a4b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	005a      	lsls	r2, r3, #1
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	085b      	lsrs	r3, r3, #1
 800a4c0:	441a      	add	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	61bb      	str	r3, [r7, #24]
        break;
 800a4ce:	e02a      	b.n	800a526 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	085a      	lsrs	r2, r3, #1
 800a4d6:	4b5f      	ldr	r3, [pc, #380]	; (800a654 <UART_SetConfig+0x54c>)
 800a4d8:	4413      	add	r3, r2
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6852      	ldr	r2, [r2, #4]
 800a4de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	61bb      	str	r3, [r7, #24]
        break;
 800a4e6:	e01e      	b.n	800a526 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4e8:	f7fc f864 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 800a4ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	005a      	lsls	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	085b      	lsrs	r3, r3, #1
 800a4f8:	441a      	add	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a502:	b29b      	uxth	r3, r3
 800a504:	61bb      	str	r3, [r7, #24]
        break;
 800a506:	e00e      	b.n	800a526 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	085b      	lsrs	r3, r3, #1
 800a50e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	fbb2 f3f3 	udiv	r3, r2, r3
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	61bb      	str	r3, [r7, #24]
        break;
 800a51e:	e002      	b.n	800a526 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	75fb      	strb	r3, [r7, #23]
        break;
 800a524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	2b0f      	cmp	r3, #15
 800a52a:	d916      	bls.n	800a55a <UART_SetConfig+0x452>
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a532:	d212      	bcs.n	800a55a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	b29b      	uxth	r3, r3
 800a538:	f023 030f 	bic.w	r3, r3, #15
 800a53c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	085b      	lsrs	r3, r3, #1
 800a542:	b29b      	uxth	r3, r3
 800a544:	f003 0307 	and.w	r3, r3, #7
 800a548:	b29a      	uxth	r2, r3
 800a54a:	897b      	ldrh	r3, [r7, #10]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	897a      	ldrh	r2, [r7, #10]
 800a556:	60da      	str	r2, [r3, #12]
 800a558:	e070      	b.n	800a63c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	75fb      	strb	r3, [r7, #23]
 800a55e:	e06d      	b.n	800a63c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a560:	7ffb      	ldrb	r3, [r7, #31]
 800a562:	2b08      	cmp	r3, #8
 800a564:	d859      	bhi.n	800a61a <UART_SetConfig+0x512>
 800a566:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <UART_SetConfig+0x464>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a591 	.word	0x0800a591
 800a570:	0800a5af 	.word	0x0800a5af
 800a574:	0800a5cd 	.word	0x0800a5cd
 800a578:	0800a61b 	.word	0x0800a61b
 800a57c:	0800a5e5 	.word	0x0800a5e5
 800a580:	0800a61b 	.word	0x0800a61b
 800a584:	0800a61b 	.word	0x0800a61b
 800a588:	0800a61b 	.word	0x0800a61b
 800a58c:	0800a603 	.word	0x0800a603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a590:	f7fc f8ce 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 800a594:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	085a      	lsrs	r2, r3, #1
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	441a      	add	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	61bb      	str	r3, [r7, #24]
        break;
 800a5ac:	e038      	b.n	800a620 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5ae:	f7fc f8d3 	bl	8006758 <HAL_RCC_GetPCLK2Freq>
 800a5b2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	085a      	lsrs	r2, r3, #1
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	441a      	add	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	61bb      	str	r3, [r7, #24]
        break;
 800a5ca:	e029      	b.n	800a620 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	085a      	lsrs	r2, r3, #1
 800a5d2:	4b21      	ldr	r3, [pc, #132]	; (800a658 <UART_SetConfig+0x550>)
 800a5d4:	4413      	add	r3, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6852      	ldr	r2, [r2, #4]
 800a5da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	61bb      	str	r3, [r7, #24]
        break;
 800a5e2:	e01d      	b.n	800a620 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5e4:	f7fb ffe6 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 800a5e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	085a      	lsrs	r2, r3, #1
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	441a      	add	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	61bb      	str	r3, [r7, #24]
        break;
 800a600:	e00e      	b.n	800a620 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	085b      	lsrs	r3, r3, #1
 800a608:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	fbb2 f3f3 	udiv	r3, r2, r3
 800a614:	b29b      	uxth	r3, r3
 800a616:	61bb      	str	r3, [r7, #24]
        break;
 800a618:	e002      	b.n	800a620 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	75fb      	strb	r3, [r7, #23]
        break;
 800a61e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	2b0f      	cmp	r3, #15
 800a624:	d908      	bls.n	800a638 <UART_SetConfig+0x530>
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a62c:	d204      	bcs.n	800a638 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	60da      	str	r2, [r3, #12]
 800a636:	e001      	b.n	800a63c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a648:	7dfb      	ldrb	r3, [r7, #23]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	01e84800 	.word	0x01e84800
 800a658:	00f42400 	.word	0x00f42400

0800a65c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00a      	beq.n	800a686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00a      	beq.n	800a6a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00a      	beq.n	800a6ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	f003 0308 	and.w	r3, r3, #8
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00a      	beq.n	800a70e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	430a      	orrs	r2, r1
 800a70c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a712:	f003 0320 	and.w	r3, r3, #32
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	430a      	orrs	r2, r1
 800a72e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d01a      	beq.n	800a772 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a75a:	d10a      	bne.n	800a772 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	430a      	orrs	r2, r1
 800a770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00a      	beq.n	800a794 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	430a      	orrs	r2, r1
 800a792:	605a      	str	r2, [r3, #4]
  }
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a7ae:	f7f8 fc63 	bl	8003078 <HAL_GetTick>
 800a7b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0308 	and.w	r3, r3, #8
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d10e      	bne.n	800a7e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f814 	bl	800a7fe <UART_WaitOnFlagUntilTimeout>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e00a      	b.n	800a7f6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	603b      	str	r3, [r7, #0]
 800a80a:	4613      	mov	r3, r2
 800a80c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a80e:	e05d      	b.n	800a8cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a816:	d059      	beq.n	800a8cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a818:	f7f8 fc2e 	bl	8003078 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	429a      	cmp	r2, r3
 800a826:	d302      	bcc.n	800a82e <UART_WaitOnFlagUntilTimeout+0x30>
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d11b      	bne.n	800a866 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a83c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 0201 	bic.w	r2, r2, #1
 800a84c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2220      	movs	r2, #32
 800a852:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2220      	movs	r2, #32
 800a858:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e042      	b.n	800a8ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0304 	and.w	r3, r3, #4
 800a870:	2b00      	cmp	r3, #0
 800a872:	d02b      	beq.n	800a8cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a87e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a882:	d123      	bne.n	800a8cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a88c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a89c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0201 	bic.w	r2, r2, #1
 800a8ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e00f      	b.n	800a8ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	69da      	ldr	r2, [r3, #28]
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	bf0c      	ite	eq
 800a8dc:	2301      	moveq	r3, #1
 800a8de:	2300      	movne	r3, #0
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	79fb      	ldrb	r3, [r7, #7]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d092      	beq.n	800a810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d027      	beq.n	800a95e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4b2f      	ldr	r3, [pc, #188]	; (800a9d4 <FMC_SDRAM_Init+0xe0>)
 800a918:	4013      	ands	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a924:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a92a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a930:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a936:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a93c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a942:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a948:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a94e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	4313      	orrs	r3, r2
 800a954:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	601a      	str	r2, [r3, #0]
 800a95c:	e032      	b.n	800a9c4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a96a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a974:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a97a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4313      	orrs	r3, r2
 800a980:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	4b12      	ldr	r3, [pc, #72]	; (800a9d4 <FMC_SDRAM_Init+0xe0>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a998:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a99e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a9a4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a9aa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a9b0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	ffff8000 	.word	0xffff8000

0800a9d8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d02e      	beq.n	800aa50 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9fe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa0e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800aa18:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800aa22:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800aa2c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800aa36:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa40:	4313      	orrs	r3, r2
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	609a      	str	r2, [r3, #8]
 800aa4e:	e039      	b.n	800aac4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	4b1e      	ldr	r3, [pc, #120]	; (800aad4 <FMC_SDRAM_Timing_Init+0xfc>)
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa82:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa92:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aa9c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aaa6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aab0:	4313      	orrs	r3, r2
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	371c      	adds	r7, #28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	ff0f0fff 	.word	0xff0f0fff

0800aad8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aaf0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aafa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695a      	ldr	r2, [r3, #20]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ab40:	b084      	sub	sp, #16
 800ab42:	b480      	push	{r7}
 800ab44:	b085      	sub	sp, #20
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	f107 001c 	add.w	r0, r7, #28
 800ab4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ab56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ab58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ab5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ab5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ab62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ab66:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ab6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <SDMMC_Init+0x54>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	b004      	add	sp, #16
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	ffff8100 	.word	0xffff8100

0800ab98 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b082      	sub	sp, #8
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2203      	movs	r2, #3
 800abbe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800abc0:	2002      	movs	r0, #2
 800abc2:	f7f8 fa65 	bl	8003090 <HAL_Delay>
  
  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0303 	and.w	r3, r3, #3
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac0a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ac10:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ac16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <SDMMC_SendCommand+0x50>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	fffff000 	.word	0xfffff000

0800ac40 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	b2db      	uxtb	r3, r3
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3314      	adds	r3, #20
 800ac68:	461a      	mov	r2, r3
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
}  
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aca6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800acac:	431a      	orrs	r2, r3
                       Data->DPSM);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800acb2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	431a      	orrs	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800acca:	2300      	movs	r3, #0

}
 800accc:	4618      	mov	r0, r3
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ace6:	2310      	movs	r3, #16
 800ace8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acea:	2340      	movs	r3, #64	; 0x40
 800acec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acee:	2300      	movs	r3, #0
 800acf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acf8:	f107 0308 	add.w	r3, r7, #8
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff ff74 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ad04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad08:	2110      	movs	r1, #16
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa42 	bl	800b194 <SDMMC_GetCmdResp1>
 800ad10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad12:	69fb      	ldr	r3, [r7, #28]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3720      	adds	r7, #32
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b088      	sub	sp, #32
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad2a:	2311      	movs	r3, #17
 800ad2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad2e:	2340      	movs	r3, #64	; 0x40
 800ad30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad32:	2300      	movs	r3, #0
 800ad34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad3c:	f107 0308 	add.w	r3, r7, #8
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ff52 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad4c:	2111      	movs	r1, #17
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fa20 	bl	800b194 <SDMMC_GetCmdResp1>
 800ad54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad56:	69fb      	ldr	r3, [r7, #28]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3720      	adds	r7, #32
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad6e:	2312      	movs	r3, #18
 800ad70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad72:	2340      	movs	r3, #64	; 0x40
 800ad74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad76:	2300      	movs	r3, #0
 800ad78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad80:	f107 0308 	add.w	r3, r7, #8
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff ff30 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad90:	2112      	movs	r1, #18
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f9fe 	bl	800b194 <SDMMC_GetCmdResp1>
 800ad98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad9a:	69fb      	ldr	r3, [r7, #28]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3720      	adds	r7, #32
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800adb2:	2318      	movs	r3, #24
 800adb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adc4:	f107 0308 	add.w	r3, r7, #8
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff ff0e 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800add0:	f241 3288 	movw	r2, #5000	; 0x1388
 800add4:	2118      	movs	r1, #24
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f9dc 	bl	800b194 <SDMMC_GetCmdResp1>
 800addc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adde:	69fb      	ldr	r3, [r7, #28]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3720      	adds	r7, #32
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800adf6:	2319      	movs	r3, #25
 800adf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adfa:	2340      	movs	r3, #64	; 0x40
 800adfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adfe:	2300      	movs	r3, #0
 800ae00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae08:	f107 0308 	add.w	r3, r7, #8
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff feec 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae18:	2119      	movs	r1, #25
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f9ba 	bl	800b194 <SDMMC_GetCmdResp1>
 800ae20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae22:	69fb      	ldr	r3, [r7, #28]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3720      	adds	r7, #32
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ae38:	230c      	movs	r3, #12
 800ae3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae3c:	2340      	movs	r3, #64	; 0x40
 800ae3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae40:	2300      	movs	r3, #0
 800ae42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae4a:	f107 0308 	add.w	r3, r7, #8
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff fecb 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ae56:	4a05      	ldr	r2, [pc, #20]	; (800ae6c <SDMMC_CmdStopTransfer+0x40>)
 800ae58:	210c      	movs	r1, #12
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f99a 	bl	800b194 <SDMMC_GetCmdResp1>
 800ae60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae62:	69fb      	ldr	r3, [r7, #28]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	05f5e100 	.word	0x05f5e100

0800ae70 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08a      	sub	sp, #40	; 0x28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae80:	2307      	movs	r3, #7
 800ae82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae84:	2340      	movs	r3, #64	; 0x40
 800ae86:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae90:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae92:	f107 0310 	add.w	r3, r7, #16
 800ae96:	4619      	mov	r1, r3
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f7ff fea7 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea2:	2107      	movs	r1, #7
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f000 f975 	bl	800b194 <SDMMC_GetCmdResp1>
 800aeaa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3728      	adds	r7, #40	; 0x28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b088      	sub	sp, #32
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aec6:	2300      	movs	r3, #0
 800aec8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aed2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aed4:	f107 0308 	add.w	r3, r7, #8
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7ff fe86 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f92f 	bl	800b144 <SDMMC_GetCmdError>
 800aee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aee8:	69fb      	ldr	r3, [r7, #28]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3720      	adds	r7, #32
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b088      	sub	sp, #32
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aefa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aefe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af00:	2308      	movs	r3, #8
 800af02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af04:	2340      	movs	r3, #64	; 0x40
 800af06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af08:	2300      	movs	r3, #0
 800af0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af12:	f107 0308 	add.w	r3, r7, #8
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7ff fe67 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fb18 	bl	800b554 <SDMMC_GetCmdResp7>
 800af24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af26:	69fb      	ldr	r3, [r7, #28]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3720      	adds	r7, #32
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af3e:	2337      	movs	r3, #55	; 0x37
 800af40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af42:	2340      	movs	r3, #64	; 0x40
 800af44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af46:	2300      	movs	r3, #0
 800af48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff fe48 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af60:	2137      	movs	r1, #55	; 0x37
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f916 	bl	800b194 <SDMMC_GetCmdResp1>
 800af68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af6a:	69fb      	ldr	r3, [r7, #28]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3720      	adds	r7, #32
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	4b0d      	ldr	r3, [pc, #52]	; (800afb8 <SDMMC_CmdAppOperCommand+0x44>)
 800af82:	4313      	orrs	r3, r2
 800af84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af86:	2329      	movs	r3, #41	; 0x29
 800af88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af8a:	2340      	movs	r3, #64	; 0x40
 800af8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af8e:	2300      	movs	r3, #0
 800af90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af98:	f107 0308 	add.w	r3, r7, #8
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff fe24 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fa27 	bl	800b3f8 <SDMMC_GetCmdResp3>
 800afaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afac:	69fb      	ldr	r3, [r7, #28]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3720      	adds	r7, #32
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	80100000 	.word	0x80100000

0800afbc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800afca:	2306      	movs	r3, #6
 800afcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afce:	2340      	movs	r3, #64	; 0x40
 800afd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff fe02 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800afe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afec:	2106      	movs	r1, #6
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f8d0 	bl	800b194 <SDMMC_GetCmdResp1>
 800aff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aff6:	69fb      	ldr	r3, [r7, #28]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b008:	2300      	movs	r3, #0
 800b00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b00c:	2333      	movs	r3, #51	; 0x33
 800b00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b010:	2340      	movs	r3, #64	; 0x40
 800b012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b014:	2300      	movs	r3, #0
 800b016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b01c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b01e:	f107 0308 	add.w	r3, r7, #8
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff fde1 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b02a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b02e:	2133      	movs	r1, #51	; 0x33
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f8af 	bl	800b194 <SDMMC_GetCmdResp1>
 800b036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b038:	69fb      	ldr	r3, [r7, #28]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3720      	adds	r7, #32
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b088      	sub	sp, #32
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b04e:	2302      	movs	r3, #2
 800b050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b052:	23c0      	movs	r3, #192	; 0xc0
 800b054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b056:	2300      	movs	r3, #0
 800b058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b05e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b060:	f107 0308 	add.w	r3, r7, #8
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff fdc0 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f97d 	bl	800b36c <SDMMC_GetCmdResp2>
 800b072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b074:	69fb      	ldr	r3, [r7, #28]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3720      	adds	r7, #32
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b088      	sub	sp, #32
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b08c:	2309      	movs	r3, #9
 800b08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b090:	23c0      	movs	r3, #192	; 0xc0
 800b092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b094:	2300      	movs	r3, #0
 800b096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b09c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b09e:	f107 0308 	add.w	r3, r7, #8
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7ff fda1 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f95e 	bl	800b36c <SDMMC_GetCmdResp2>
 800b0b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0b2:	69fb      	ldr	r3, [r7, #28]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3720      	adds	r7, #32
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b088      	sub	sp, #32
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0ce:	2340      	movs	r3, #64	; 0x40
 800b0d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0dc:	f107 0308 	add.w	r3, r7, #8
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff fd82 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	2103      	movs	r1, #3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f9bd 	bl	800b46c <SDMMC_GetCmdResp6>
 800b0f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0f4:	69fb      	ldr	r3, [r7, #28]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3720      	adds	r7, #32
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b088      	sub	sp, #32
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b10c:	230d      	movs	r3, #13
 800b10e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b110:	2340      	movs	r3, #64	; 0x40
 800b112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b114:	2300      	movs	r3, #0
 800b116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b11c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b11e:	f107 0308 	add.w	r3, r7, #8
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7ff fd61 	bl	800abec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b12a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b12e:	210d      	movs	r1, #13
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f82f 	bl	800b194 <SDMMC_GetCmdResp1>
 800b136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b138:	69fb      	ldr	r3, [r7, #28]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3720      	adds	r7, #32
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
	...

0800b144 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b144:	b490      	push	{r4, r7}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b14c:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <SDMMC_GetCmdError+0x48>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a0f      	ldr	r2, [pc, #60]	; (800b190 <SDMMC_GetCmdError+0x4c>)
 800b152:	fba2 2303 	umull	r2, r3, r2, r3
 800b156:	0a5b      	lsrs	r3, r3, #9
 800b158:	f241 3288 	movw	r2, #5000	; 0x1388
 800b15c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b160:	4623      	mov	r3, r4
 800b162:	1e5c      	subs	r4, r3, #1
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b168:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b16c:	e009      	b.n	800b182 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0f2      	beq.n	800b160 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	22c5      	movs	r2, #197	; 0xc5
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bc90      	pop	{r4, r7}
 800b18a:	4770      	bx	lr
 800b18c:	2000002c 	.word	0x2000002c
 800b190:	10624dd3 	.word	0x10624dd3

0800b194 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b087      	sub	sp, #28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	460b      	mov	r3, r1
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b1a2:	4b6f      	ldr	r3, [pc, #444]	; (800b360 <SDMMC_GetCmdResp1+0x1cc>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a6f      	ldr	r2, [pc, #444]	; (800b364 <SDMMC_GetCmdResp1+0x1d0>)
 800b1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ac:	0a5b      	lsrs	r3, r3, #9
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b1b4:	4623      	mov	r3, r4
 800b1b6:	1e5c      	subs	r4, r3, #1
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d102      	bne.n	800b1c2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1c0:	e0c9      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0f0      	beq.n	800b1b4 <SDMMC_GetCmdResp1+0x20>
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1eb      	bne.n	800b1b4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d004      	beq.n	800b1f2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1ee:	2304      	movs	r3, #4
 800b1f0:	e0b1      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d004      	beq.n	800b208 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2201      	movs	r2, #1
 800b202:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b204:	2301      	movs	r3, #1
 800b206:	e0a6      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	22c5      	movs	r2, #197	; 0xc5
 800b20c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7ff fd16 	bl	800ac40 <SDMMC_GetCommandResponse>
 800b214:	4603      	mov	r3, r0
 800b216:	461a      	mov	r2, r3
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d001      	beq.n	800b222 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b21e:	2301      	movs	r3, #1
 800b220:	e099      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b222:	2100      	movs	r1, #0
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7ff fd18 	bl	800ac5a <SDMMC_GetResponse>
 800b22a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	4b4e      	ldr	r3, [pc, #312]	; (800b368 <SDMMC_GetCmdResp1+0x1d4>)
 800b230:	4013      	ands	r3, r2
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b236:	2300      	movs	r3, #0
 800b238:	e08d      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da02      	bge.n	800b246 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b244:	e087      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b250:	2340      	movs	r3, #64	; 0x40
 800b252:	e080      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b25e:	2380      	movs	r3, #128	; 0x80
 800b260:	e079      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b26c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b270:	e071      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b27c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b280:	e069      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b290:	e061      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b29c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2a0:	e059      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b0:	e051      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2c0:	e049      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2d0:	e041      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2e0:	e039      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2f0:	e031      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b2fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b300:	e029      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b30c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b310:	e021      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b31c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b320:	e019      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d002      	beq.n	800b332 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b32c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b330:	e011      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b33c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b340:	e009      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b34c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b350:	e001      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b356:	4618      	mov	r0, r3
 800b358:	371c      	adds	r7, #28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd90      	pop	{r4, r7, pc}
 800b35e:	bf00      	nop
 800b360:	2000002c 	.word	0x2000002c
 800b364:	10624dd3 	.word	0x10624dd3
 800b368:	fdffe008 	.word	0xfdffe008

0800b36c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b36c:	b490      	push	{r4, r7}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b374:	4b1e      	ldr	r3, [pc, #120]	; (800b3f0 <SDMMC_GetCmdResp2+0x84>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a1e      	ldr	r2, [pc, #120]	; (800b3f4 <SDMMC_GetCmdResp2+0x88>)
 800b37a:	fba2 2303 	umull	r2, r3, r2, r3
 800b37e:	0a5b      	lsrs	r3, r3, #9
 800b380:	f241 3288 	movw	r2, #5000	; 0x1388
 800b384:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b388:	4623      	mov	r3, r4
 800b38a:	1e5c      	subs	r4, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b394:	e026      	b.n	800b3e4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b39a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0f0      	beq.n	800b388 <SDMMC_GetCmdResp2+0x1c>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1eb      	bne.n	800b388 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b4:	f003 0304 	and.w	r3, r3, #4
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d004      	beq.n	800b3c6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2204      	movs	r2, #4
 800b3c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3c2:	2304      	movs	r3, #4
 800b3c4:	e00e      	b.n	800b3e4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d004      	beq.n	800b3dc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e003      	b.n	800b3e4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	22c5      	movs	r2, #197	; 0xc5
 800b3e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bc90      	pop	{r4, r7}
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	2000002c 	.word	0x2000002c
 800b3f4:	10624dd3 	.word	0x10624dd3

0800b3f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b3f8:	b490      	push	{r4, r7}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b400:	4b18      	ldr	r3, [pc, #96]	; (800b464 <SDMMC_GetCmdResp3+0x6c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a18      	ldr	r2, [pc, #96]	; (800b468 <SDMMC_GetCmdResp3+0x70>)
 800b406:	fba2 2303 	umull	r2, r3, r2, r3
 800b40a:	0a5b      	lsrs	r3, r3, #9
 800b40c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b410:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b414:	4623      	mov	r3, r4
 800b416:	1e5c      	subs	r4, r3, #1
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d102      	bne.n	800b422 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b41c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b420:	e01b      	b.n	800b45a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b426:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0f0      	beq.n	800b414 <SDMMC_GetCmdResp3+0x1c>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1eb      	bne.n	800b414 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	2b00      	cmp	r3, #0
 800b446:	d004      	beq.n	800b452 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2204      	movs	r2, #4
 800b44c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b44e:	2304      	movs	r3, #4
 800b450:	e003      	b.n	800b45a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	22c5      	movs	r2, #197	; 0xc5
 800b456:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bc90      	pop	{r4, r7}
 800b462:	4770      	bx	lr
 800b464:	2000002c 	.word	0x2000002c
 800b468:	10624dd3 	.word	0x10624dd3

0800b46c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b46c:	b590      	push	{r4, r7, lr}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	460b      	mov	r3, r1
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b47a:	4b34      	ldr	r3, [pc, #208]	; (800b54c <SDMMC_GetCmdResp6+0xe0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a34      	ldr	r2, [pc, #208]	; (800b550 <SDMMC_GetCmdResp6+0xe4>)
 800b480:	fba2 2303 	umull	r2, r3, r2, r3
 800b484:	0a5b      	lsrs	r3, r3, #9
 800b486:	f241 3288 	movw	r2, #5000	; 0x1388
 800b48a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b48e:	4623      	mov	r3, r4
 800b490:	1e5c      	subs	r4, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b496:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b49a:	e052      	b.n	800b542 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d0f0      	beq.n	800b48e <SDMMC_GetCmdResp6+0x22>
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1eb      	bne.n	800b48e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ba:	f003 0304 	and.w	r3, r3, #4
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d004      	beq.n	800b4cc <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4c8:	2304      	movs	r3, #4
 800b4ca:	e03a      	b.n	800b542 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d0:	f003 0301 	and.w	r3, r3, #1
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d004      	beq.n	800b4e2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e02f      	b.n	800b542 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f7ff fbac 	bl	800ac40 <SDMMC_GetCommandResponse>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	7afb      	ldrb	r3, [r7, #11]
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d001      	beq.n	800b4f6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e025      	b.n	800b542 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	22c5      	movs	r2, #197	; 0xc5
 800b4fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff fbab 	bl	800ac5a <SDMMC_GetResponse>
 800b504:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d106      	bne.n	800b51e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	0c1b      	lsrs	r3, r3, #16
 800b514:	b29a      	uxth	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b51a:	2300      	movs	r3, #0
 800b51c:	e011      	b.n	800b542 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b52c:	e009      	b.n	800b542 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b53c:	e001      	b.n	800b542 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b53e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b542:	4618      	mov	r0, r3
 800b544:	371c      	adds	r7, #28
 800b546:	46bd      	mov	sp, r7
 800b548:	bd90      	pop	{r4, r7, pc}
 800b54a:	bf00      	nop
 800b54c:	2000002c 	.word	0x2000002c
 800b550:	10624dd3 	.word	0x10624dd3

0800b554 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b554:	b490      	push	{r4, r7}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b55c:	4b21      	ldr	r3, [pc, #132]	; (800b5e4 <SDMMC_GetCmdResp7+0x90>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a21      	ldr	r2, [pc, #132]	; (800b5e8 <SDMMC_GetCmdResp7+0x94>)
 800b562:	fba2 2303 	umull	r2, r3, r2, r3
 800b566:	0a5b      	lsrs	r3, r3, #9
 800b568:	f241 3288 	movw	r2, #5000	; 0x1388
 800b56c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b570:	4623      	mov	r3, r4
 800b572:	1e5c      	subs	r4, r3, #1
 800b574:	2b00      	cmp	r3, #0
 800b576:	d102      	bne.n	800b57e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b57c:	e02c      	b.n	800b5d8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b582:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0f0      	beq.n	800b570 <SDMMC_GetCmdResp7+0x1c>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1eb      	bne.n	800b570 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59c:	f003 0304 	and.w	r3, r3, #4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d004      	beq.n	800b5ae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2204      	movs	r2, #4
 800b5a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5aa:	2304      	movs	r3, #4
 800b5ac:	e014      	b.n	800b5d8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e009      	b.n	800b5d8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2240      	movs	r2, #64	; 0x40
 800b5d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b5d6:	2300      	movs	r3, #0
  
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bc90      	pop	{r4, r7}
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	2000002c 	.word	0x2000002c
 800b5e8:	10624dd3 	.word	0x10624dd3

0800b5ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b5f0:	4904      	ldr	r1, [pc, #16]	; (800b604 <MX_FATFS_Init+0x18>)
 800b5f2:	4805      	ldr	r0, [pc, #20]	; (800b608 <MX_FATFS_Init+0x1c>)
 800b5f4:	f000 fa96 	bl	800bb24 <FATFS_LinkDriver>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4b03      	ldr	r3, [pc, #12]	; (800b60c <MX_FATFS_Init+0x20>)
 800b5fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b600:	bf00      	nop
 800b602:	bd80      	pop	{r7, pc}
 800b604:	2000c260 	.word	0x2000c260
 800b608:	0802905c 	.word	0x0802905c
 800b60c:	2000bdf8 	.word	0x2000bdf8

0800b610 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b61a:	f000 f87b 	bl	800b714 <BSP_SD_IsDetected>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b01      	cmp	r3, #1
 800b622:	d001      	beq.n	800b628 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b624:	2302      	movs	r3, #2
 800b626:	e012      	b.n	800b64e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b628:	480b      	ldr	r0, [pc, #44]	; (800b658 <BSP_SD_Init+0x48>)
 800b62a:	f7fc fb67 	bl	8007cfc <HAL_SD_Init>
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d109      	bne.n	800b64c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b63c:	4806      	ldr	r0, [pc, #24]	; (800b658 <BSP_SD_Init+0x48>)
 800b63e:	f7fc ffa9 	bl	8008594 <HAL_SD_ConfigWideBusOperation>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b64c:	79fb      	ldrb	r3, [r7, #7]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	2000b9a0 	.word	0x2000b9a0

0800b65c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	68f9      	ldr	r1, [r7, #12]
 800b672:	4806      	ldr	r0, [pc, #24]	; (800b68c <BSP_SD_ReadBlocks_DMA+0x30>)
 800b674:	f7fc fbda 	bl	8007e2c <HAL_SD_ReadBlocks_DMA>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b682:	7dfb      	ldrb	r3, [r7, #23]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	2000b9a0 	.word	0x2000b9a0

0800b690 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	68f9      	ldr	r1, [r7, #12]
 800b6a6:	4806      	ldr	r0, [pc, #24]	; (800b6c0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b6a8:	f7fc fcac 	bl	8008004 <HAL_SD_WriteBlocks_DMA>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	2000b9a0 	.word	0x2000b9a0

0800b6c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b6c8:	4805      	ldr	r0, [pc, #20]	; (800b6e0 <BSP_SD_GetCardState+0x1c>)
 800b6ca:	f7fc ffdf 	bl	800868c <HAL_SD_GetCardState>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b04      	cmp	r3, #4
 800b6d2:	bf14      	ite	ne
 800b6d4:	2301      	movne	r3, #1
 800b6d6:	2300      	moveq	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	2000b9a0 	.word	0x2000b9a0

0800b6e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	4803      	ldr	r0, [pc, #12]	; (800b6fc <BSP_SD_GetCardInfo+0x18>)
 800b6f0:	f7fc ff24 	bl	800853c <HAL_SD_GetCardInfo>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	2000b9a0 	.word	0x2000b9a0

0800b700 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b708:	f000 f9b2 	bl	800ba70 <BSP_SD_ReadCpltCallback>
}
 800b70c:	bf00      	nop
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b71a:	2301      	movs	r3, #1
 800b71c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b71e:	f000 f80b 	bl	800b738 <BSP_PlatformIsDetected>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b728:	2300      	movs	r3, #0
 800b72a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	b2db      	uxtb	r3, r3
}
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b73e:	2301      	movs	r3, #1
 800b740:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b742:	2110      	movs	r1, #16
 800b744:	4806      	ldr	r0, [pc, #24]	; (800b760 <BSP_PlatformIsDetected+0x28>)
 800b746:	f7f9 f909 	bl	800495c <HAL_GPIO_ReadPin>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b750:	2300      	movs	r3, #0
 800b752:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b754:	79fb      	ldrb	r3, [r7, #7]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	40020c00 	.word	0x40020c00

0800b764 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b76c:	f000 fa26 	bl	800bbbc <osKernelSysTick>
 800b770:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b772:	e006      	b.n	800b782 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b774:	f7ff ffa6 	bl	800b6c4 <BSP_SD_GetCardState>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	e009      	b.n	800b796 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b782:	f000 fa1b 	bl	800bbbc <osKernelSysTick>
 800b786:	4602      	mov	r2, r0
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	1ad3      	subs	r3, r2, r3
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d8f0      	bhi.n	800b774 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b792:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
	...

0800b7a0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <SD_CheckStatus+0x38>)
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b7b0:	f7ff ff88 	bl	800b6c4 <BSP_SD_GetCardState>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d107      	bne.n	800b7ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b7ba:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <SD_CheckStatus+0x38>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	f023 0301 	bic.w	r3, r3, #1
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <SD_CheckStatus+0x38>)
 800b7c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b7ca:	4b03      	ldr	r3, [pc, #12]	; (800b7d8 <SD_CheckStatus+0x38>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	b2db      	uxtb	r3, r3
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20000035 	.word	0x20000035

0800b7dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b7dc:	b590      	push	{r4, r7, lr}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b7e6:	4b20      	ldr	r3, [pc, #128]	; (800b868 <SD_initialize+0x8c>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b7ec:	f000 f9da 	bl	800bba4 <osKernelRunning>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d030      	beq.n	800b858 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b7f6:	f7ff ff0b 	bl	800b610 <BSP_SD_Init>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d107      	bne.n	800b810 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b800:	79fb      	ldrb	r3, [r7, #7]
 800b802:	4618      	mov	r0, r3
 800b804:	f7ff ffcc 	bl	800b7a0 <SD_CheckStatus>
 800b808:	4603      	mov	r3, r0
 800b80a:	461a      	mov	r2, r3
 800b80c:	4b16      	ldr	r3, [pc, #88]	; (800b868 <SD_initialize+0x8c>)
 800b80e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b810:	4b15      	ldr	r3, [pc, #84]	; (800b868 <SD_initialize+0x8c>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b01      	cmp	r3, #1
 800b818:	d01e      	beq.n	800b858 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b81a:	4b14      	ldr	r3, [pc, #80]	; (800b86c <SD_initialize+0x90>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10e      	bne.n	800b840 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b822:	4b13      	ldr	r3, [pc, #76]	; (800b870 <SD_initialize+0x94>)
 800b824:	f107 0408 	add.w	r4, r7, #8
 800b828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b82a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b82e:	f107 0308 	add.w	r3, r7, #8
 800b832:	2100      	movs	r1, #0
 800b834:	4618      	mov	r0, r3
 800b836:	f000 faf5 	bl	800be24 <osMessageCreate>
 800b83a:	4602      	mov	r2, r0
 800b83c:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <SD_initialize+0x90>)
 800b83e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b840:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <SD_initialize+0x90>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d107      	bne.n	800b858 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b848:	4b07      	ldr	r3, [pc, #28]	; (800b868 <SD_initialize+0x8c>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	b2da      	uxtb	r2, r3
 800b854:	4b04      	ldr	r3, [pc, #16]	; (800b868 <SD_initialize+0x8c>)
 800b856:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b858:	4b03      	ldr	r3, [pc, #12]	; (800b868 <SD_initialize+0x8c>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	b2db      	uxtb	r3, r3
}
 800b85e:	4618      	mov	r0, r3
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	bd90      	pop	{r4, r7, pc}
 800b866:	bf00      	nop
 800b868:	20000035 	.word	0x20000035
 800b86c:	20000394 	.word	0x20000394
 800b870:	08028760 	.word	0x08028760

0800b874 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b87e:	79fb      	ldrb	r3, [r7, #7]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff ff8d 	bl	800b7a0 <SD_CheckStatus>
 800b886:	4603      	mov	r3, r0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b08a      	sub	sp, #40	; 0x28
 800b894:	af00      	add	r7, sp, #0
 800b896:	60b9      	str	r1, [r7, #8]
 800b898:	607a      	str	r2, [r7, #4]
 800b89a:	603b      	str	r3, [r7, #0]
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b8a6:	f247 5030 	movw	r0, #30000	; 0x7530
 800b8aa:	f7ff ff5b 	bl	800b764 <SD_CheckStatusWithTimeout>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	da02      	bge.n	800b8ba <SD_read+0x2a>
  {
    return res;
 800b8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b8:	e032      	b.n	800b920 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	6879      	ldr	r1, [r7, #4]
 800b8be:	68b8      	ldr	r0, [r7, #8]
 800b8c0:	f7ff fecc 	bl	800b65c <BSP_SD_ReadBlocks_DMA>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b8ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d124      	bne.n	800b91c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b8d2:	4b15      	ldr	r3, [pc, #84]	; (800b928 <SD_read+0x98>)
 800b8d4:	6819      	ldr	r1, [r3, #0]
 800b8d6:	f107 0314 	add.w	r3, r7, #20
 800b8da:	f247 5230 	movw	r2, #30000	; 0x7530
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 fb0a 	bl	800bef8 <osMessageGet>

    if (event.status == osEventMessage)
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	2b10      	cmp	r3, #16
 800b8e8:	d118      	bne.n	800b91c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d115      	bne.n	800b91c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b8f0:	f000 f964 	bl	800bbbc <osKernelSysTick>
 800b8f4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b8f6:	e008      	b.n	800b90a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b8f8:	f7ff fee4 	bl	800b6c4 <BSP_SD_GetCardState>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d103      	bne.n	800b90a <SD_read+0x7a>
              {
                res = RES_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b908:	e008      	b.n	800b91c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b90a:	f000 f957 	bl	800bbbc <osKernelSysTick>
 800b90e:	4602      	mov	r2, r0
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	f247 522f 	movw	r2, #29999	; 0x752f
 800b918:	4293      	cmp	r3, r2
 800b91a:	d9ed      	bls.n	800b8f8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b920:	4618      	mov	r0, r3
 800b922:	3728      	adds	r7, #40	; 0x28
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000394 	.word	0x20000394

0800b92c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08a      	sub	sp, #40	; 0x28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	607a      	str	r2, [r7, #4]
 800b936:	603b      	str	r3, [r7, #0]
 800b938:	4603      	mov	r3, r0
 800b93a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b942:	f247 5030 	movw	r0, #30000	; 0x7530
 800b946:	f7ff ff0d 	bl	800b764 <SD_CheckStatusWithTimeout>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	da02      	bge.n	800b956 <SD_write+0x2a>
  {
    return res;
 800b950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b954:	e02e      	b.n	800b9b4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	6879      	ldr	r1, [r7, #4]
 800b95a:	68b8      	ldr	r0, [r7, #8]
 800b95c:	f7ff fe98 	bl	800b690 <BSP_SD_WriteBlocks_DMA>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d124      	bne.n	800b9b0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b966:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <SD_write+0x90>)
 800b968:	6819      	ldr	r1, [r3, #0]
 800b96a:	f107 0314 	add.w	r3, r7, #20
 800b96e:	f247 5230 	movw	r2, #30000	; 0x7530
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fac0 	bl	800bef8 <osMessageGet>

    if (event.status == osEventMessage)
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2b10      	cmp	r3, #16
 800b97c:	d118      	bne.n	800b9b0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	2b02      	cmp	r3, #2
 800b982:	d115      	bne.n	800b9b0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b984:	f000 f91a 	bl	800bbbc <osKernelSysTick>
 800b988:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b98a:	e008      	b.n	800b99e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b98c:	f7ff fe9a 	bl	800b6c4 <BSP_SD_GetCardState>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d103      	bne.n	800b99e <SD_write+0x72>
          {
            res = RES_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b99c:	e008      	b.n	800b9b0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b99e:	f000 f90d 	bl	800bbbc <osKernelSysTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d9ed      	bls.n	800b98c <SD_write+0x60>
    }

  }
#endif

  return res;
 800b9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3728      	adds	r7, #40	; 0x28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20000394 	.word	0x20000394

0800b9c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08c      	sub	sp, #48	; 0x30
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	603a      	str	r2, [r7, #0]
 800b9ca:	71fb      	strb	r3, [r7, #7]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b9d6:	4b25      	ldr	r3, [pc, #148]	; (800ba6c <SD_ioctl+0xac>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <SD_ioctl+0x28>
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e03c      	b.n	800ba62 <SD_ioctl+0xa2>

  switch (cmd)
 800b9e8:	79bb      	ldrb	r3, [r7, #6]
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d834      	bhi.n	800ba58 <SD_ioctl+0x98>
 800b9ee:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <SD_ioctl+0x34>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba05 	.word	0x0800ba05
 800b9f8:	0800ba0d 	.word	0x0800ba0d
 800b9fc:	0800ba25 	.word	0x0800ba25
 800ba00:	0800ba3f 	.word	0x0800ba3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba0a:	e028      	b.n	800ba5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba0c:	f107 030c 	add.w	r3, r7, #12
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff fe67 	bl	800b6e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ba16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba22:	e01c      	b.n	800ba5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba24:	f107 030c 	add.w	r3, r7, #12
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff fe5b 	bl	800b6e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba3c:	e00f      	b.n	800ba5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba3e:	f107 030c 	add.w	r3, r7, #12
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff fe4e 	bl	800b6e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	0a5a      	lsrs	r2, r3, #9
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba56:	e002      	b.n	800ba5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ba58:	2304      	movs	r3, #4
 800ba5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ba5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3730      	adds	r7, #48	; 0x30
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000035 	.word	0x20000035

0800ba70 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ba74:	4b04      	ldr	r3, [pc, #16]	; (800ba88 <BSP_SD_ReadCpltCallback+0x18>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	2101      	movs	r1, #1
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f9fb 	bl	800be78 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800ba82:	bf00      	nop
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20000394 	.word	0x20000394

0800ba8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	4613      	mov	r3, r2
 800ba98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800baa2:	4b1f      	ldr	r3, [pc, #124]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800baa4:	7a5b      	ldrb	r3, [r3, #9]
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d131      	bne.n	800bb10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800baac:	4b1c      	ldr	r3, [pc, #112]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800baae:	7a5b      	ldrb	r3, [r3, #9]
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	461a      	mov	r2, r3
 800bab4:	4b1a      	ldr	r3, [pc, #104]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800bab6:	2100      	movs	r1, #0
 800bab8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800baba:	4b19      	ldr	r3, [pc, #100]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800babc:	7a5b      	ldrb	r3, [r3, #9]
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	4a17      	ldr	r2, [pc, #92]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800baca:	4b15      	ldr	r3, [pc, #84]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800bacc:	7a5b      	ldrb	r3, [r3, #9]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	461a      	mov	r2, r3
 800bad2:	4b13      	ldr	r3, [pc, #76]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800bad4:	4413      	add	r3, r2
 800bad6:	79fa      	ldrb	r2, [r7, #7]
 800bad8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bada:	4b11      	ldr	r3, [pc, #68]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800badc:	7a5b      	ldrb	r3, [r3, #9]
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	b2d1      	uxtb	r1, r2
 800bae4:	4a0e      	ldr	r2, [pc, #56]	; (800bb20 <FATFS_LinkDriverEx+0x94>)
 800bae6:	7251      	strb	r1, [r2, #9]
 800bae8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800baea:	7dbb      	ldrb	r3, [r7, #22]
 800baec:	3330      	adds	r3, #48	; 0x30
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	3301      	adds	r3, #1
 800baf8:	223a      	movs	r2, #58	; 0x3a
 800bafa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	3302      	adds	r3, #2
 800bb00:	222f      	movs	r2, #47	; 0x2f
 800bb02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	3303      	adds	r3, #3
 800bb08:	2200      	movs	r2, #0
 800bb0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	371c      	adds	r7, #28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	20000398 	.word	0x20000398

0800bb24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb2e:	2200      	movs	r2, #0
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7ff ffaa 	bl	800ba8c <FATFS_LinkDriverEx>
 800bb38:	4603      	mov	r3, r0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	4603      	mov	r3, r0
 800bb4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bb50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb54:	2b84      	cmp	r3, #132	; 0x84
 800bb56:	d005      	beq.n	800bb64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bb58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	3303      	adds	r3, #3
 800bb62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bb64:	68fb      	ldr	r3, [r7, #12]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b083      	sub	sp, #12
 800bb76:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb78:	f3ef 8305 	mrs	r3, IPSR
 800bb7c:	607b      	str	r3, [r7, #4]
  return(result);
 800bb7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	bf14      	ite	ne
 800bb84:	2301      	movne	r3, #1
 800bb86:	2300      	moveq	r3, #0
 800bb88:	b2db      	uxtb	r3, r3
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bb9a:	f001 fc31 	bl	800d400 <vTaskStartScheduler>
  
  return osOK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bba8:	f002 f87c 	bl	800dca4 <xTaskGetSchedulerState>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d101      	bne.n	800bbb6 <osKernelRunning+0x12>
    return 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e000      	b.n	800bbb8 <osKernelRunning+0x14>
  else
    return 1;
 800bbb6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bbc0:	f7ff ffd7 	bl	800bb72 <inHandlerMode>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bbca:	f001 fd37 	bl	800d63c <xTaskGetTickCountFromISR>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	e002      	b.n	800bbd8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bbd2:	f001 fd23 	bl	800d61c <xTaskGetTickCount>
 800bbd6:	4603      	mov	r3, r0
  }
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbde:	b089      	sub	sp, #36	; 0x24
 800bbe0:	af04      	add	r7, sp, #16
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d020      	beq.n	800bc30 <osThreadCreate+0x54>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d01c      	beq.n	800bc30 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	685c      	ldr	r4, [r3, #4]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681d      	ldr	r5, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691e      	ldr	r6, [r3, #16]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff ff9a 	bl	800bb42 <makeFreeRtosPriority>
 800bc0e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc18:	9202      	str	r2, [sp, #8]
 800bc1a:	9301      	str	r3, [sp, #4]
 800bc1c:	9100      	str	r1, [sp, #0]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	4632      	mov	r2, r6
 800bc22:	4629      	mov	r1, r5
 800bc24:	4620      	mov	r0, r4
 800bc26:	f001 fa12 	bl	800d04e <xTaskCreateStatic>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	60fb      	str	r3, [r7, #12]
 800bc2e:	e01c      	b.n	800bc6a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685c      	ldr	r4, [r3, #4]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc3c:	b29e      	uxth	r6, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff ff7c 	bl	800bb42 <makeFreeRtosPriority>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	f107 030c 	add.w	r3, r7, #12
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	9200      	str	r2, [sp, #0]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	4632      	mov	r2, r6
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f001 fa57 	bl	800d10e <xTaskCreate>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d001      	beq.n	800bc6a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bc66:	2300      	movs	r3, #0
 800bc68:	e000      	b.n	800bc6c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <osDelay+0x16>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	e000      	b.n	800bc8c <osDelay+0x18>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 fb81 	bl	800d394 <vTaskDelay>
  
  return osOK;
 800bc92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d017      	beq.n	800bcde <osSemaphoreCreate+0x42>
    if (count == 1) {
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d10b      	bne.n	800bccc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	2303      	movs	r3, #3
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	f000 faaa 	bl	800c21c <xQueueGenericCreateStatic>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	e023      	b.n	800bd14 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800bccc:	6838      	ldr	r0, [r7, #0]
 800bcce:	6839      	ldr	r1, [r7, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	f000 fb7e 	bl	800c3d6 <xQueueCreateCountingSemaphoreStatic>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	e01a      	b.n	800bd14 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d110      	bne.n	800bd06 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800bce4:	2203      	movs	r2, #3
 800bce6:	2100      	movs	r1, #0
 800bce8:	2001      	movs	r0, #1
 800bcea:	f000 fb14 	bl	800c316 <xQueueGenericCreate>
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d005      	beq.n	800bd02 <osSemaphoreCreate+0x66>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 fbd9 	bl	800c4b4 <xQueueGenericSend>
      return sema;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	e006      	b.n	800bd14 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 fb9b 	bl	800c448 <xQueueCreateCountingSemaphore>
 800bd12:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd26:	2300      	movs	r3, #0
 800bd28:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bd30:	2380      	movs	r3, #128	; 0x80
 800bd32:	e03a      	b.n	800bdaa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3e:	d103      	bne.n	800bd48 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bd40:	f04f 33ff 	mov.w	r3, #4294967295
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e009      	b.n	800bd5c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d006      	beq.n	800bd5c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <osSemaphoreWait+0x40>
      ticks = 1;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bd5c:	f7ff ff09 	bl	800bb72 <inHandlerMode>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d017      	beq.n	800bd96 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 ffc2 	bl	800ccf8 <xQueueReceiveFromISR>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d001      	beq.n	800bd7e <osSemaphoreWait+0x62>
      return osErrorOS;
 800bd7a:	23ff      	movs	r3, #255	; 0xff
 800bd7c:	e015      	b.n	800bdaa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d011      	beq.n	800bda8 <osSemaphoreWait+0x8c>
 800bd84:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <osSemaphoreWait+0x98>)
 800bd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	e008      	b.n	800bda8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bd96:	68f9      	ldr	r1, [r7, #12]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fe9d 	bl	800cad8 <xQueueSemaphoreTake>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d001      	beq.n	800bda8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bda4:	23ff      	movs	r3, #255	; 0xff
 800bda6:	e000      	b.n	800bdaa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	e000ed04 	.word	0xe000ed04

0800bdb8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bdc8:	f7ff fed3 	bl	800bb72 <inHandlerMode>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d016      	beq.n	800be00 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bdd2:	f107 0308 	add.w	r3, r7, #8
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fd09 	bl	800c7f0 <xQueueGiveFromISR>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d001      	beq.n	800bde8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bde4:	23ff      	movs	r3, #255	; 0xff
 800bde6:	e017      	b.n	800be18 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d013      	beq.n	800be16 <osSemaphoreRelease+0x5e>
 800bdee:	4b0c      	ldr	r3, [pc, #48]	; (800be20 <osSemaphoreRelease+0x68>)
 800bdf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf4:	601a      	str	r2, [r3, #0]
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	e00a      	b.n	800be16 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800be00:	2300      	movs	r3, #0
 800be02:	2200      	movs	r2, #0
 800be04:	2100      	movs	r1, #0
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fb54 	bl	800c4b4 <xQueueGenericSend>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d001      	beq.n	800be16 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800be12:	23ff      	movs	r3, #255	; 0xff
 800be14:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800be16:	68fb      	ldr	r3, [r7, #12]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	e000ed04 	.word	0xe000ed04

0800be24 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b085      	sub	sp, #20
 800be28:	af02      	add	r7, sp, #8
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d012      	beq.n	800be5c <osMessageCreate+0x38>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00e      	beq.n	800be5c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6859      	ldr	r1, [r3, #4]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68dc      	ldr	r4, [r3, #12]
 800be4e:	2300      	movs	r3, #0
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	4623      	mov	r3, r4
 800be54:	f000 f9e2 	bl	800c21c <xQueueGenericCreateStatic>
 800be58:	4603      	mov	r3, r0
 800be5a:	e008      	b.n	800be6e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6818      	ldr	r0, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	4619      	mov	r1, r3
 800be68:	f000 fa55 	bl	800c316 <xQueueGenericCreate>
 800be6c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800be6e:	4618      	mov	r0, r3
 800be70:	370c      	adds	r7, #12
 800be72:	46bd      	mov	sp, r7
 800be74:	bd90      	pop	{r4, r7, pc}
	...

0800be78 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800be84:	2300      	movs	r3, #0
 800be86:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <osMessagePut+0x1e>
    ticks = 1;
 800be92:	2301      	movs	r3, #1
 800be94:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800be96:	f7ff fe6c 	bl	800bb72 <inHandlerMode>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d018      	beq.n	800bed2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bea0:	f107 0210 	add.w	r2, r7, #16
 800bea4:	f107 0108 	add.w	r1, r7, #8
 800bea8:	2300      	movs	r3, #0
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f000 fc04 	bl	800c6b8 <xQueueGenericSendFromISR>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d001      	beq.n	800beba <osMessagePut+0x42>
      return osErrorOS;
 800beb6:	23ff      	movs	r3, #255	; 0xff
 800beb8:	e018      	b.n	800beec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d014      	beq.n	800beea <osMessagePut+0x72>
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <osMessagePut+0x7c>)
 800bec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	e00b      	b.n	800beea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bed2:	f107 0108 	add.w	r1, r7, #8
 800bed6:	2300      	movs	r3, #0
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 faea 	bl	800c4b4 <xQueueGenericSend>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d001      	beq.n	800beea <osMessagePut+0x72>
      return osErrorOS;
 800bee6:	23ff      	movs	r3, #255	; 0xff
 800bee8:	e000      	b.n	800beec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bef8:	b590      	push	{r4, r7, lr}
 800befa:	b08b      	sub	sp, #44	; 0x2c
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10a      	bne.n	800bf28 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bf12:	2380      	movs	r3, #128	; 0x80
 800bf14:	617b      	str	r3, [r7, #20]
    return event;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	461c      	mov	r4, r3
 800bf1a:	f107 0314 	add.w	r3, r7, #20
 800bf1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf26:	e054      	b.n	800bfd2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf36:	d103      	bne.n	800bf40 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bf38:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf3e:	e009      	b.n	800bf54 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d006      	beq.n	800bf54 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <osMessageGet+0x5c>
      ticks = 1;
 800bf50:	2301      	movs	r3, #1
 800bf52:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bf54:	f7ff fe0d 	bl	800bb72 <inHandlerMode>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d01c      	beq.n	800bf98 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bf5e:	f107 0220 	add.w	r2, r7, #32
 800bf62:	f107 0314 	add.w	r3, r7, #20
 800bf66:	3304      	adds	r3, #4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	68b8      	ldr	r0, [r7, #8]
 800bf6c:	f000 fec4 	bl	800ccf8 <xQueueReceiveFromISR>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d102      	bne.n	800bf7c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bf76:	2310      	movs	r3, #16
 800bf78:	617b      	str	r3, [r7, #20]
 800bf7a:	e001      	b.n	800bf80 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d01d      	beq.n	800bfc2 <osMessageGet+0xca>
 800bf86:	4b15      	ldr	r3, [pc, #84]	; (800bfdc <osMessageGet+0xe4>)
 800bf88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	e014      	b.n	800bfc2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bf98:	f107 0314 	add.w	r3, r7, #20
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	68b8      	ldr	r0, [r7, #8]
 800bfa4:	f000 fcb6 	bl	800c914 <xQueueReceive>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d102      	bne.n	800bfb4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bfae:	2310      	movs	r3, #16
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	e006      	b.n	800bfc2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <osMessageGet+0xc6>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	e000      	b.n	800bfc0 <osMessageGet+0xc8>
 800bfbe:	2340      	movs	r3, #64	; 0x40
 800bfc0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	461c      	mov	r4, r3
 800bfc6:	f107 0314 	add.w	r3, r7, #20
 800bfca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	372c      	adds	r7, #44	; 0x2c
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd90      	pop	{r4, r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	e000ed04 	.word	0xe000ed04

0800bfe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f103 0208 	add.w	r2, r3, #8
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f04f 32ff 	mov.w	r2, #4294967295
 800bff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f103 0208 	add.w	r2, r3, #8
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f103 0208 	add.w	r2, r3, #8
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c02e:	bf00      	nop
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	689a      	ldr	r2, [r3, #8]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	601a      	str	r2, [r3, #0]
}
 800c076:	bf00      	nop
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c082:	b480      	push	{r7}
 800c084:	b085      	sub	sp, #20
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c098:	d103      	bne.n	800c0a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	e00c      	b.n	800c0bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3308      	adds	r3, #8
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	e002      	b.n	800c0b0 <vListInsert+0x2e>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d2f6      	bcs.n	800c0aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	601a      	str	r2, [r3, #0]
}
 800c0e8:	bf00      	nop
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	6892      	ldr	r2, [r2, #8]
 800c10a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	6852      	ldr	r2, [r2, #4]
 800c114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d103      	bne.n	800c128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689a      	ldr	r2, [r3, #8]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	1e5a      	subs	r2, r3, #1
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10b      	bne.n	800c174 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c160:	b672      	cpsid	i
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	b662      	cpsie	i
 800c170:	60bb      	str	r3, [r7, #8]
 800c172:	e7fe      	b.n	800c172 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c174:	f002 f8d8 	bl	800e328 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c180:	68f9      	ldr	r1, [r7, #12]
 800c182:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c184:	fb01 f303 	mul.w	r3, r1, r3
 800c188:	441a      	add	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	68f9      	ldr	r1, [r7, #12]
 800c1a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1aa:	fb01 f303 	mul.w	r3, r1, r3
 800c1ae:	441a      	add	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	22ff      	movs	r2, #255	; 0xff
 800c1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	22ff      	movs	r2, #255	; 0xff
 800c1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d114      	bne.n	800c1f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d01a      	beq.n	800c208 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3310      	adds	r3, #16
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f001 fba4 	bl	800d924 <xTaskRemoveFromEventList>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d012      	beq.n	800c208 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1e2:	4b0d      	ldr	r3, [pc, #52]	; (800c218 <xQueueGenericReset+0xd0>)
 800c1e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e8:	601a      	str	r2, [r3, #0]
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	e009      	b.n	800c208 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	3310      	adds	r3, #16
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7ff fef1 	bl	800bfe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3324      	adds	r3, #36	; 0x24
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff feec 	bl	800bfe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c208:	f002 f8c0 	bl	800e38c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c20c:	2301      	movs	r3, #1
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08e      	sub	sp, #56	; 0x38
 800c220:	af02      	add	r7, sp, #8
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10b      	bne.n	800c248 <xQueueGenericCreateStatic+0x2c>
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	b672      	cpsid	i
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	b662      	cpsie	i
 800c244:	62bb      	str	r3, [r7, #40]	; 0x28
 800c246:	e7fe      	b.n	800c246 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10b      	bne.n	800c266 <xQueueGenericCreateStatic+0x4a>
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	b672      	cpsid	i
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	b662      	cpsie	i
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
 800c264:	e7fe      	b.n	800c264 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <xQueueGenericCreateStatic+0x56>
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <xQueueGenericCreateStatic+0x5a>
 800c272:	2301      	movs	r3, #1
 800c274:	e000      	b.n	800c278 <xQueueGenericCreateStatic+0x5c>
 800c276:	2300      	movs	r3, #0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10b      	bne.n	800c294 <xQueueGenericCreateStatic+0x78>
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	b672      	cpsid	i
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	b662      	cpsie	i
 800c290:	623b      	str	r3, [r7, #32]
 800c292:	e7fe      	b.n	800c292 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d102      	bne.n	800c2a0 <xQueueGenericCreateStatic+0x84>
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <xQueueGenericCreateStatic+0x88>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <xQueueGenericCreateStatic+0x8a>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10b      	bne.n	800c2c2 <xQueueGenericCreateStatic+0xa6>
 800c2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ae:	b672      	cpsid	i
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	b662      	cpsie	i
 800c2be:	61fb      	str	r3, [r7, #28]
 800c2c0:	e7fe      	b.n	800c2c0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c2c2:	2348      	movs	r3, #72	; 0x48
 800c2c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b48      	cmp	r3, #72	; 0x48
 800c2ca:	d00b      	beq.n	800c2e4 <xQueueGenericCreateStatic+0xc8>
 800c2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d0:	b672      	cpsid	i
 800c2d2:	f383 8811 	msr	BASEPRI, r3
 800c2d6:	f3bf 8f6f 	isb	sy
 800c2da:	f3bf 8f4f 	dsb	sy
 800c2de:	b662      	cpsie	i
 800c2e0:	61bb      	str	r3, [r7, #24]
 800c2e2:	e7fe      	b.n	800c2e2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c2e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00d      	beq.n	800c30c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	4613      	mov	r3, r2
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f000 f846 	bl	800c398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c30e:	4618      	mov	r0, r3
 800c310:	3730      	adds	r7, #48	; 0x30
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c316:	b580      	push	{r7, lr}
 800c318:	b08a      	sub	sp, #40	; 0x28
 800c31a:	af02      	add	r7, sp, #8
 800c31c:	60f8      	str	r0, [r7, #12]
 800c31e:	60b9      	str	r1, [r7, #8]
 800c320:	4613      	mov	r3, r2
 800c322:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10b      	bne.n	800c342 <xQueueGenericCreate+0x2c>
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	b672      	cpsid	i
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	b662      	cpsie	i
 800c33e:	613b      	str	r3, [r7, #16]
 800c340:	e7fe      	b.n	800c340 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	61fb      	str	r3, [r7, #28]
 800c34c:	e004      	b.n	800c358 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	fb02 f303 	mul.w	r3, r2, r3
 800c356:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	3348      	adds	r3, #72	; 0x48
 800c35c:	4618      	mov	r0, r3
 800c35e:	f002 f905 	bl	800e56c <pvPortMalloc>
 800c362:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d011      	beq.n	800c38e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	3348      	adds	r3, #72	; 0x48
 800c372:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2200      	movs	r2, #0
 800c378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c37c:	79fa      	ldrb	r2, [r7, #7]
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	4613      	mov	r3, r2
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f000 f805 	bl	800c398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c38e:	69bb      	ldr	r3, [r7, #24]
	}
 800c390:	4618      	mov	r0, r3
 800c392:	3720      	adds	r7, #32
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d103      	bne.n	800c3b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	69ba      	ldr	r2, [r7, #24]
 800c3b0:	601a      	str	r2, [r3, #0]
 800c3b2:	e002      	b.n	800c3ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3c6:	2101      	movs	r1, #1
 800c3c8:	69b8      	ldr	r0, [r7, #24]
 800c3ca:	f7ff febd 	bl	800c148 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3ce:	bf00      	nop
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b08a      	sub	sp, #40	; 0x28
 800c3da:	af02      	add	r7, sp, #8
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10b      	bne.n	800c400 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800c3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ec:	b672      	cpsid	i
 800c3ee:	f383 8811 	msr	BASEPRI, r3
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	b662      	cpsie	i
 800c3fc:	61bb      	str	r3, [r7, #24]
 800c3fe:	e7fe      	b.n	800c3fe <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	429a      	cmp	r2, r3
 800c406:	d90b      	bls.n	800c420 <xQueueCreateCountingSemaphoreStatic+0x4a>
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	b672      	cpsid	i
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	b662      	cpsie	i
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	e7fe      	b.n	800c41e <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c420:	2302      	movs	r3, #2
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	2100      	movs	r1, #0
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f7ff fef6 	bl	800c21c <xQueueGenericCreateStatic>
 800c430:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c43e:	69fb      	ldr	r3, [r7, #28]
	}
 800c440:	4618      	mov	r0, r3
 800c442:	3720      	adds	r7, #32
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d10b      	bne.n	800c470 <xQueueCreateCountingSemaphore+0x28>
 800c458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45c:	b672      	cpsid	i
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	b662      	cpsie	i
 800c46c:	613b      	str	r3, [r7, #16]
 800c46e:	e7fe      	b.n	800c46e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	429a      	cmp	r2, r3
 800c476:	d90b      	bls.n	800c490 <xQueueCreateCountingSemaphore+0x48>
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	b672      	cpsid	i
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	b662      	cpsie	i
 800c48c:	60fb      	str	r3, [r7, #12]
 800c48e:	e7fe      	b.n	800c48e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c490:	2202      	movs	r2, #2
 800c492:	2100      	movs	r1, #0
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff ff3e 	bl	800c316 <xQueueGenericCreate>
 800c49a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c4a8:	697b      	ldr	r3, [r7, #20]
	}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
	...

0800c4b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b08e      	sub	sp, #56	; 0x38
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10b      	bne.n	800c4e8 <xQueueGenericSend+0x34>
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	b672      	cpsid	i
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	b662      	cpsie	i
 800c4e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4e6:	e7fe      	b.n	800c4e6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d103      	bne.n	800c4f6 <xQueueGenericSend+0x42>
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <xQueueGenericSend+0x46>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <xQueueGenericSend+0x48>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10b      	bne.n	800c518 <xQueueGenericSend+0x64>
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	b672      	cpsid	i
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	b662      	cpsie	i
 800c514:	627b      	str	r3, [r7, #36]	; 0x24
 800c516:	e7fe      	b.n	800c516 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d103      	bne.n	800c526 <xQueueGenericSend+0x72>
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c522:	2b01      	cmp	r3, #1
 800c524:	d101      	bne.n	800c52a <xQueueGenericSend+0x76>
 800c526:	2301      	movs	r3, #1
 800c528:	e000      	b.n	800c52c <xQueueGenericSend+0x78>
 800c52a:	2300      	movs	r3, #0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10b      	bne.n	800c548 <xQueueGenericSend+0x94>
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	b672      	cpsid	i
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	b662      	cpsie	i
 800c544:	623b      	str	r3, [r7, #32]
 800c546:	e7fe      	b.n	800c546 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c548:	f001 fbac 	bl	800dca4 <xTaskGetSchedulerState>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d102      	bne.n	800c558 <xQueueGenericSend+0xa4>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d101      	bne.n	800c55c <xQueueGenericSend+0xa8>
 800c558:	2301      	movs	r3, #1
 800c55a:	e000      	b.n	800c55e <xQueueGenericSend+0xaa>
 800c55c:	2300      	movs	r3, #0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10b      	bne.n	800c57a <xQueueGenericSend+0xc6>
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	b672      	cpsid	i
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	b662      	cpsie	i
 800c576:	61fb      	str	r3, [r7, #28]
 800c578:	e7fe      	b.n	800c578 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c57a:	f001 fed5 	bl	800e328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c586:	429a      	cmp	r2, r3
 800c588:	d302      	bcc.n	800c590 <xQueueGenericSend+0xdc>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d129      	bne.n	800c5e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c596:	f000 fc4a 	bl	800ce2e <prvCopyDataToQueue>
 800c59a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d010      	beq.n	800c5c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	3324      	adds	r3, #36	; 0x24
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f001 f9bb 	bl	800d924 <xTaskRemoveFromEventList>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d013      	beq.n	800c5dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c5b4:	4b3f      	ldr	r3, [pc, #252]	; (800c6b4 <xQueueGenericSend+0x200>)
 800c5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ba:	601a      	str	r2, [r3, #0]
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	e00a      	b.n	800c5dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d007      	beq.n	800c5dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c5cc:	4b39      	ldr	r3, [pc, #228]	; (800c6b4 <xQueueGenericSend+0x200>)
 800c5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c5dc:	f001 fed6 	bl	800e38c <vPortExitCritical>
				return pdPASS;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e063      	b.n	800c6ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d103      	bne.n	800c5f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5ea:	f001 fecf 	bl	800e38c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e05c      	b.n	800c6ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d106      	bne.n	800c606 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5f8:	f107 0314 	add.w	r3, r7, #20
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f001 f9f5 	bl	800d9ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c602:	2301      	movs	r3, #1
 800c604:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c606:	f001 fec1 	bl	800e38c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c60a:	f000 ff5b 	bl	800d4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c60e:	f001 fe8b 	bl	800e328 <vPortEnterCritical>
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c618:	b25b      	sxtb	r3, r3
 800c61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61e:	d103      	bne.n	800c628 <xQueueGenericSend+0x174>
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	2200      	movs	r2, #0
 800c624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c62e:	b25b      	sxtb	r3, r3
 800c630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c634:	d103      	bne.n	800c63e <xQueueGenericSend+0x18a>
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c63e:	f001 fea5 	bl	800e38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c642:	1d3a      	adds	r2, r7, #4
 800c644:	f107 0314 	add.w	r3, r7, #20
 800c648:	4611      	mov	r1, r2
 800c64a:	4618      	mov	r0, r3
 800c64c:	f001 f9e4 	bl	800da18 <xTaskCheckForTimeOut>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d124      	bne.n	800c6a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c658:	f000 fce1 	bl	800d01e <prvIsQueueFull>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d018      	beq.n	800c694 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	3310      	adds	r3, #16
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	4611      	mov	r1, r2
 800c66a:	4618      	mov	r0, r3
 800c66c:	f001 f934 	bl	800d8d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c672:	f000 fc6c 	bl	800cf4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c676:	f000 ff33 	bl	800d4e0 <xTaskResumeAll>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f47f af7c 	bne.w	800c57a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c682:	4b0c      	ldr	r3, [pc, #48]	; (800c6b4 <xQueueGenericSend+0x200>)
 800c684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	e772      	b.n	800c57a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c696:	f000 fc5a 	bl	800cf4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c69a:	f000 ff21 	bl	800d4e0 <xTaskResumeAll>
 800c69e:	e76c      	b.n	800c57a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c6a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6a2:	f000 fc54 	bl	800cf4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6a6:	f000 ff1b 	bl	800d4e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c6aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3738      	adds	r7, #56	; 0x38
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	e000ed04 	.word	0xe000ed04

0800c6b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b08e      	sub	sp, #56	; 0x38
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10b      	bne.n	800c6e8 <xQueueGenericSendFromISR+0x30>
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	b672      	cpsid	i
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	b662      	cpsie	i
 800c6e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c6e6:	e7fe      	b.n	800c6e6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d103      	bne.n	800c6f6 <xQueueGenericSendFromISR+0x3e>
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d101      	bne.n	800c6fa <xQueueGenericSendFromISR+0x42>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e000      	b.n	800c6fc <xQueueGenericSendFromISR+0x44>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10b      	bne.n	800c718 <xQueueGenericSendFromISR+0x60>
 800c700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c704:	b672      	cpsid	i
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	b662      	cpsie	i
 800c714:	623b      	str	r3, [r7, #32]
 800c716:	e7fe      	b.n	800c716 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d103      	bne.n	800c726 <xQueueGenericSendFromISR+0x6e>
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c722:	2b01      	cmp	r3, #1
 800c724:	d101      	bne.n	800c72a <xQueueGenericSendFromISR+0x72>
 800c726:	2301      	movs	r3, #1
 800c728:	e000      	b.n	800c72c <xQueueGenericSendFromISR+0x74>
 800c72a:	2300      	movs	r3, #0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10b      	bne.n	800c748 <xQueueGenericSendFromISR+0x90>
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	b672      	cpsid	i
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	b662      	cpsie	i
 800c744:	61fb      	str	r3, [r7, #28]
 800c746:	e7fe      	b.n	800c746 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c748:	f001 fece 	bl	800e4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c74c:	f3ef 8211 	mrs	r2, BASEPRI
 800c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c754:	b672      	cpsid	i
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	b662      	cpsie	i
 800c764:	61ba      	str	r2, [r7, #24]
 800c766:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c768:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c76a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c774:	429a      	cmp	r2, r3
 800c776:	d302      	bcc.n	800c77e <xQueueGenericSendFromISR+0xc6>
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d12c      	bne.n	800c7d8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c78e:	f000 fb4e 	bl	800ce2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c792:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79a:	d112      	bne.n	800c7c2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d016      	beq.n	800c7d2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	3324      	adds	r3, #36	; 0x24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f001 f8bb 	bl	800d924 <xTaskRemoveFromEventList>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00e      	beq.n	800c7d2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00b      	beq.n	800c7d2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	e007      	b.n	800c7d2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	b25a      	sxtb	r2, r3
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c7d6:	e001      	b.n	800c7dc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	637b      	str	r3, [r7, #52]	; 0x34
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3738      	adds	r7, #56	; 0x38
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b08e      	sub	sp, #56	; 0x38
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10b      	bne.n	800c81c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	b672      	cpsid	i
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	b662      	cpsie	i
 800c818:	623b      	str	r3, [r7, #32]
 800c81a:	e7fe      	b.n	800c81a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00b      	beq.n	800c83c <xQueueGiveFromISR+0x4c>
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	b672      	cpsid	i
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	b662      	cpsie	i
 800c838:	61fb      	str	r3, [r7, #28]
 800c83a:	e7fe      	b.n	800c83a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d103      	bne.n	800c84c <xQueueGiveFromISR+0x5c>
 800c844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <xQueueGiveFromISR+0x60>
 800c84c:	2301      	movs	r3, #1
 800c84e:	e000      	b.n	800c852 <xQueueGiveFromISR+0x62>
 800c850:	2300      	movs	r3, #0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10b      	bne.n	800c86e <xQueueGiveFromISR+0x7e>
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	b672      	cpsid	i
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	b662      	cpsie	i
 800c86a:	61bb      	str	r3, [r7, #24]
 800c86c:	e7fe      	b.n	800c86c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c86e:	f001 fe3b 	bl	800e4e8 <vPortValidateInterruptPriority>
	__asm volatile
 800c872:	f3ef 8211 	mrs	r2, BASEPRI
 800c876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87a:	b672      	cpsid	i
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	b662      	cpsie	i
 800c88a:	617a      	str	r2, [r7, #20]
 800c88c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c88e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c890:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c896:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d22b      	bcs.n	800c8fa <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	1c5a      	adds	r2, r3, #1
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8bc:	d112      	bne.n	800c8e4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d016      	beq.n	800c8f4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	3324      	adds	r3, #36	; 0x24
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f001 f82a 	bl	800d924 <xTaskRemoveFromEventList>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00e      	beq.n	800c8f4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00b      	beq.n	800c8f4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	e007      	b.n	800c8f4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	b25a      	sxtb	r2, r3
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8f8:	e001      	b.n	800c8fe <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3738      	adds	r7, #56	; 0x38
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
	...

0800c914 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b08c      	sub	sp, #48	; 0x30
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c920:	2300      	movs	r3, #0
 800c922:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10b      	bne.n	800c946 <xQueueReceive+0x32>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	b672      	cpsid	i
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	b662      	cpsie	i
 800c942:	623b      	str	r3, [r7, #32]
 800c944:	e7fe      	b.n	800c944 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d103      	bne.n	800c954 <xQueueReceive+0x40>
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c950:	2b00      	cmp	r3, #0
 800c952:	d101      	bne.n	800c958 <xQueueReceive+0x44>
 800c954:	2301      	movs	r3, #1
 800c956:	e000      	b.n	800c95a <xQueueReceive+0x46>
 800c958:	2300      	movs	r3, #0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10b      	bne.n	800c976 <xQueueReceive+0x62>
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	b672      	cpsid	i
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	b662      	cpsie	i
 800c972:	61fb      	str	r3, [r7, #28]
 800c974:	e7fe      	b.n	800c974 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c976:	f001 f995 	bl	800dca4 <xTaskGetSchedulerState>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <xQueueReceive+0x72>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <xQueueReceive+0x76>
 800c986:	2301      	movs	r3, #1
 800c988:	e000      	b.n	800c98c <xQueueReceive+0x78>
 800c98a:	2300      	movs	r3, #0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10b      	bne.n	800c9a8 <xQueueReceive+0x94>
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	b672      	cpsid	i
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	b662      	cpsie	i
 800c9a4:	61bb      	str	r3, [r7, #24]
 800c9a6:	e7fe      	b.n	800c9a6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9a8:	f001 fcbe 	bl	800e328 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01f      	beq.n	800c9f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9b8:	68b9      	ldr	r1, [r7, #8]
 800c9ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9bc:	f000 faa1 	bl	800cf02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	1e5a      	subs	r2, r3, #1
 800c9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	691b      	ldr	r3, [r3, #16]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00f      	beq.n	800c9f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	3310      	adds	r3, #16
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 ffa5 	bl	800d924 <xTaskRemoveFromEventList>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d007      	beq.n	800c9f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9e0:	4b3c      	ldr	r3, [pc, #240]	; (800cad4 <xQueueReceive+0x1c0>)
 800c9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e6:	601a      	str	r2, [r3, #0]
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c9f0:	f001 fccc 	bl	800e38c <vPortExitCritical>
				return pdPASS;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e069      	b.n	800cacc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d103      	bne.n	800ca06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9fe:	f001 fcc5 	bl	800e38c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca02:	2300      	movs	r3, #0
 800ca04:	e062      	b.n	800cacc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d106      	bne.n	800ca1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca0c:	f107 0310 	add.w	r3, r7, #16
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 ffeb 	bl	800d9ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca16:	2301      	movs	r3, #1
 800ca18:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca1a:	f001 fcb7 	bl	800e38c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca1e:	f000 fd51 	bl	800d4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca22:	f001 fc81 	bl	800e328 <vPortEnterCritical>
 800ca26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca2c:	b25b      	sxtb	r3, r3
 800ca2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca32:	d103      	bne.n	800ca3c <xQueueReceive+0x128>
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	2200      	movs	r2, #0
 800ca38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca42:	b25b      	sxtb	r3, r3
 800ca44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca48:	d103      	bne.n	800ca52 <xQueueReceive+0x13e>
 800ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca52:	f001 fc9b 	bl	800e38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca56:	1d3a      	adds	r2, r7, #4
 800ca58:	f107 0310 	add.w	r3, r7, #16
 800ca5c:	4611      	mov	r1, r2
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 ffda 	bl	800da18 <xTaskCheckForTimeOut>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d123      	bne.n	800cab2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca6c:	f000 fac1 	bl	800cff2 <prvIsQueueEmpty>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d017      	beq.n	800caa6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca78:	3324      	adds	r3, #36	; 0x24
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 ff2a 	bl	800d8d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca86:	f000 fa62 	bl	800cf4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca8a:	f000 fd29 	bl	800d4e0 <xTaskResumeAll>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d189      	bne.n	800c9a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ca94:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <xQueueReceive+0x1c0>)
 800ca96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	e780      	b.n	800c9a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800caa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa8:	f000 fa51 	bl	800cf4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800caac:	f000 fd18 	bl	800d4e0 <xTaskResumeAll>
 800cab0:	e77a      	b.n	800c9a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cab4:	f000 fa4b 	bl	800cf4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cab8:	f000 fd12 	bl	800d4e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cabc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cabe:	f000 fa98 	bl	800cff2 <prvIsQueueEmpty>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f43f af6f 	beq.w	800c9a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800caca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3730      	adds	r7, #48	; 0x30
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	e000ed04 	.word	0xe000ed04

0800cad8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08e      	sub	sp, #56	; 0x38
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cae2:	2300      	movs	r3, #0
 800cae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800caea:	2300      	movs	r3, #0
 800caec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800caee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10b      	bne.n	800cb0c <xQueueSemaphoreTake+0x34>
 800caf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf8:	b672      	cpsid	i
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	b662      	cpsie	i
 800cb08:	623b      	str	r3, [r7, #32]
 800cb0a:	e7fe      	b.n	800cb0a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00b      	beq.n	800cb2c <xQueueSemaphoreTake+0x54>
 800cb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb18:	b672      	cpsid	i
 800cb1a:	f383 8811 	msr	BASEPRI, r3
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f3bf 8f4f 	dsb	sy
 800cb26:	b662      	cpsie	i
 800cb28:	61fb      	str	r3, [r7, #28]
 800cb2a:	e7fe      	b.n	800cb2a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb2c:	f001 f8ba 	bl	800dca4 <xTaskGetSchedulerState>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d102      	bne.n	800cb3c <xQueueSemaphoreTake+0x64>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <xQueueSemaphoreTake+0x68>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e000      	b.n	800cb42 <xQueueSemaphoreTake+0x6a>
 800cb40:	2300      	movs	r3, #0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10b      	bne.n	800cb5e <xQueueSemaphoreTake+0x86>
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	b672      	cpsid	i
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	b662      	cpsie	i
 800cb5a:	61bb      	str	r3, [r7, #24]
 800cb5c:	e7fe      	b.n	800cb5c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb5e:	f001 fbe3 	bl	800e328 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb66:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d024      	beq.n	800cbb8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	1e5a      	subs	r2, r3, #1
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d104      	bne.n	800cb88 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb7e:	f001 fa53 	bl	800e028 <pvTaskIncrementMutexHeldCount>
 800cb82:	4602      	mov	r2, r0
 800cb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00f      	beq.n	800cbb0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	3310      	adds	r3, #16
 800cb94:	4618      	mov	r0, r3
 800cb96:	f000 fec5 	bl	800d924 <xTaskRemoveFromEventList>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d007      	beq.n	800cbb0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cba0:	4b54      	ldr	r3, [pc, #336]	; (800ccf4 <xQueueSemaphoreTake+0x21c>)
 800cba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba6:	601a      	str	r2, [r3, #0]
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbb0:	f001 fbec 	bl	800e38c <vPortExitCritical>
				return pdPASS;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e098      	b.n	800ccea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d112      	bne.n	800cbe4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00b      	beq.n	800cbdc <xQueueSemaphoreTake+0x104>
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	b672      	cpsid	i
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	b662      	cpsie	i
 800cbd8:	617b      	str	r3, [r7, #20]
 800cbda:	e7fe      	b.n	800cbda <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cbdc:	f001 fbd6 	bl	800e38c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	e082      	b.n	800ccea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d106      	bne.n	800cbf8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbea:	f107 030c 	add.w	r3, r7, #12
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 fefc 	bl	800d9ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbf8:	f001 fbc8 	bl	800e38c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbfc:	f000 fc62 	bl	800d4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc00:	f001 fb92 	bl	800e328 <vPortEnterCritical>
 800cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc0a:	b25b      	sxtb	r3, r3
 800cc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc10:	d103      	bne.n	800cc1a <xQueueSemaphoreTake+0x142>
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc20:	b25b      	sxtb	r3, r3
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc26:	d103      	bne.n	800cc30 <xQueueSemaphoreTake+0x158>
 800cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc30:	f001 fbac 	bl	800e38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc34:	463a      	mov	r2, r7
 800cc36:	f107 030c 	add.w	r3, r7, #12
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 feeb 	bl	800da18 <xTaskCheckForTimeOut>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d132      	bne.n	800ccae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc4a:	f000 f9d2 	bl	800cff2 <prvIsQueueEmpty>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d026      	beq.n	800cca2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d109      	bne.n	800cc70 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cc5c:	f001 fb64 	bl	800e328 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f001 f83b 	bl	800dce0 <xTaskPriorityInherit>
 800cc6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cc6c:	f001 fb8e 	bl	800e38c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	3324      	adds	r3, #36	; 0x24
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	4611      	mov	r1, r2
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 fe2d 	bl	800d8d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc80:	f000 f965 	bl	800cf4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc84:	f000 fc2c 	bl	800d4e0 <xTaskResumeAll>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f47f af67 	bne.w	800cb5e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cc90:	4b18      	ldr	r3, [pc, #96]	; (800ccf4 <xQueueSemaphoreTake+0x21c>)
 800cc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	e75d      	b.n	800cb5e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cca4:	f000 f953 	bl	800cf4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cca8:	f000 fc1a 	bl	800d4e0 <xTaskResumeAll>
 800ccac:	e757      	b.n	800cb5e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ccae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccb0:	f000 f94d 	bl	800cf4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccb4:	f000 fc14 	bl	800d4e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccba:	f000 f99a 	bl	800cff2 <prvIsQueueEmpty>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f43f af4c 	beq.w	800cb5e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00d      	beq.n	800cce8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cccc:	f001 fb2c 	bl	800e328 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ccd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccd2:	f000 f894 	bl	800cdfe <prvGetDisinheritPriorityAfterTimeout>
 800ccd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 f906 	bl	800def0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cce4:	f001 fb52 	bl	800e38c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3738      	adds	r7, #56	; 0x38
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	e000ed04 	.word	0xe000ed04

0800ccf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08e      	sub	sp, #56	; 0x38
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10b      	bne.n	800cd26 <xQueueReceiveFromISR+0x2e>
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	b672      	cpsid	i
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	b662      	cpsie	i
 800cd22:	623b      	str	r3, [r7, #32]
 800cd24:	e7fe      	b.n	800cd24 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d103      	bne.n	800cd34 <xQueueReceiveFromISR+0x3c>
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d101      	bne.n	800cd38 <xQueueReceiveFromISR+0x40>
 800cd34:	2301      	movs	r3, #1
 800cd36:	e000      	b.n	800cd3a <xQueueReceiveFromISR+0x42>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10b      	bne.n	800cd56 <xQueueReceiveFromISR+0x5e>
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	b672      	cpsid	i
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	b662      	cpsie	i
 800cd52:	61fb      	str	r3, [r7, #28]
 800cd54:	e7fe      	b.n	800cd54 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd56:	f001 fbc7 	bl	800e4e8 <vPortValidateInterruptPriority>
	__asm volatile
 800cd5a:	f3ef 8211 	mrs	r2, BASEPRI
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	b672      	cpsid	i
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	b662      	cpsie	i
 800cd72:	61ba      	str	r2, [r7, #24]
 800cd74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cd76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d02f      	beq.n	800cde6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd90:	68b9      	ldr	r1, [r7, #8]
 800cd92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd94:	f000 f8b5 	bl	800cf02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	1e5a      	subs	r2, r3, #1
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cda0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda8:	d112      	bne.n	800cdd0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d016      	beq.n	800cde0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	3310      	adds	r3, #16
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 fdb4 	bl	800d924 <xTaskRemoveFromEventList>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00e      	beq.n	800cde0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00b      	beq.n	800cde0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	601a      	str	r2, [r3, #0]
 800cdce:	e007      	b.n	800cde0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cdd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	b25a      	sxtb	r2, r3
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cde0:	2301      	movs	r3, #1
 800cde2:	637b      	str	r3, [r7, #52]	; 0x34
 800cde4:	e001      	b.n	800cdea <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3738      	adds	r7, #56	; 0x38
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cdfe:	b480      	push	{r7}
 800ce00:	b085      	sub	sp, #20
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d006      	beq.n	800ce1c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f1c3 0307 	rsb	r3, r3, #7
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	e001      	b.n	800ce20 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce20:	68fb      	ldr	r3, [r7, #12]
	}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b086      	sub	sp, #24
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	60f8      	str	r0, [r7, #12]
 800ce36:	60b9      	str	r1, [r7, #8]
 800ce38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10d      	bne.n	800ce68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d14d      	bne.n	800cef0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 ffc1 	bl	800dde0 <xTaskPriorityDisinherit>
 800ce5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	609a      	str	r2, [r3, #8]
 800ce66:	e043      	b.n	800cef0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d119      	bne.n	800cea2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6858      	ldr	r0, [r3, #4]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce76:	461a      	mov	r2, r3
 800ce78:	68b9      	ldr	r1, [r7, #8]
 800ce7a:	f01a fcc9 	bl	8027810 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce86:	441a      	add	r2, r3
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	685a      	ldr	r2, [r3, #4]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d32b      	bcc.n	800cef0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	605a      	str	r2, [r3, #4]
 800cea0:	e026      	b.n	800cef0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	68d8      	ldr	r0, [r3, #12]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceaa:	461a      	mov	r2, r3
 800ceac:	68b9      	ldr	r1, [r7, #8]
 800ceae:	f01a fcaf 	bl	8027810 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	68da      	ldr	r2, [r3, #12]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceba:	425b      	negs	r3, r3
 800cebc:	441a      	add	r2, r3
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	68da      	ldr	r2, [r3, #12]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d207      	bcs.n	800cede <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	689a      	ldr	r2, [r3, #8]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced6:	425b      	negs	r3, r3
 800ced8:	441a      	add	r2, r3
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d105      	bne.n	800cef0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d002      	beq.n	800cef0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	1c5a      	adds	r2, r3, #1
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b082      	sub	sp, #8
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d018      	beq.n	800cf46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	68da      	ldr	r2, [r3, #12]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1c:	441a      	add	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	68da      	ldr	r2, [r3, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d303      	bcc.n	800cf36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68d9      	ldr	r1, [r3, #12]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	461a      	mov	r2, r3
 800cf40:	6838      	ldr	r0, [r7, #0]
 800cf42:	f01a fc65 	bl	8027810 <memcpy>
	}
}
 800cf46:	bf00      	nop
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf56:	f001 f9e7 	bl	800e328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf62:	e011      	b.n	800cf88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d012      	beq.n	800cf92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3324      	adds	r3, #36	; 0x24
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 fcd7 	bl	800d924 <xTaskRemoveFromEventList>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cf7c:	f000 fdb0 	bl	800dae0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	3b01      	subs	r3, #1
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	dce9      	bgt.n	800cf64 <prvUnlockQueue+0x16>
 800cf90:	e000      	b.n	800cf94 <prvUnlockQueue+0x46>
					break;
 800cf92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	22ff      	movs	r2, #255	; 0xff
 800cf98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cf9c:	f001 f9f6 	bl	800e38c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfa0:	f001 f9c2 	bl	800e328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfaa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfac:	e011      	b.n	800cfd2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d012      	beq.n	800cfdc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3310      	adds	r3, #16
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f000 fcb2 	bl	800d924 <xTaskRemoveFromEventList>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cfc6:	f000 fd8b 	bl	800dae0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	dce9      	bgt.n	800cfae <prvUnlockQueue+0x60>
 800cfda:	e000      	b.n	800cfde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cfdc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	22ff      	movs	r2, #255	; 0xff
 800cfe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cfe6:	f001 f9d1 	bl	800e38c <vPortExitCritical>
}
 800cfea:	bf00      	nop
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cffa:	f001 f995 	bl	800e328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d002:	2b00      	cmp	r3, #0
 800d004:	d102      	bne.n	800d00c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d006:	2301      	movs	r3, #1
 800d008:	60fb      	str	r3, [r7, #12]
 800d00a:	e001      	b.n	800d010 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d00c:	2300      	movs	r3, #0
 800d00e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d010:	f001 f9bc 	bl	800e38c <vPortExitCritical>

	return xReturn;
 800d014:	68fb      	ldr	r3, [r7, #12]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b084      	sub	sp, #16
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d026:	f001 f97f 	bl	800e328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d032:	429a      	cmp	r2, r3
 800d034:	d102      	bne.n	800d03c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d036:	2301      	movs	r3, #1
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	e001      	b.n	800d040 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d040:	f001 f9a4 	bl	800e38c <vPortExitCritical>

	return xReturn;
 800d044:	68fb      	ldr	r3, [r7, #12]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b08e      	sub	sp, #56	; 0x38
 800d052:	af04      	add	r7, sp, #16
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10b      	bne.n	800d07a <xTaskCreateStatic+0x2c>
	__asm volatile
 800d062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d066:	b672      	cpsid	i
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	b662      	cpsie	i
 800d076:	623b      	str	r3, [r7, #32]
 800d078:	e7fe      	b.n	800d078 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10b      	bne.n	800d098 <xTaskCreateStatic+0x4a>
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	b672      	cpsid	i
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	b662      	cpsie	i
 800d094:	61fb      	str	r3, [r7, #28]
 800d096:	e7fe      	b.n	800d096 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d098:	2358      	movs	r3, #88	; 0x58
 800d09a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	2b58      	cmp	r3, #88	; 0x58
 800d0a0:	d00b      	beq.n	800d0ba <xTaskCreateStatic+0x6c>
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	b672      	cpsid	i
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	b662      	cpsie	i
 800d0b6:	61bb      	str	r3, [r7, #24]
 800d0b8:	e7fe      	b.n	800d0b8 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d01e      	beq.n	800d100 <xTaskCreateStatic+0xb2>
 800d0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d01b      	beq.n	800d100 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	2202      	movs	r2, #2
 800d0d6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0da:	2300      	movs	r3, #0
 800d0dc:	9303      	str	r3, [sp, #12]
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	9302      	str	r3, [sp, #8]
 800d0e2:	f107 0314 	add.w	r3, r7, #20
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f000 f850 	bl	800d198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0fa:	f000 f8e1 	bl	800d2c0 <prvAddNewTaskToReadyList>
 800d0fe:	e001      	b.n	800d104 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d100:	2300      	movs	r3, #0
 800d102:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d104:	697b      	ldr	r3, [r7, #20]
	}
 800d106:	4618      	mov	r0, r3
 800d108:	3728      	adds	r7, #40	; 0x28
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b08c      	sub	sp, #48	; 0x30
 800d112:	af04      	add	r7, sp, #16
 800d114:	60f8      	str	r0, [r7, #12]
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	603b      	str	r3, [r7, #0]
 800d11a:	4613      	mov	r3, r2
 800d11c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d11e:	88fb      	ldrh	r3, [r7, #6]
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	4618      	mov	r0, r3
 800d124:	f001 fa22 	bl	800e56c <pvPortMalloc>
 800d128:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00e      	beq.n	800d14e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d130:	2058      	movs	r0, #88	; 0x58
 800d132:	f001 fa1b 	bl	800e56c <pvPortMalloc>
 800d136:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	631a      	str	r2, [r3, #48]	; 0x30
 800d144:	e005      	b.n	800d152 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d146:	6978      	ldr	r0, [r7, #20]
 800d148:	f001 fadc 	bl	800e704 <vPortFree>
 800d14c:	e001      	b.n	800d152 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d14e:	2300      	movs	r3, #0
 800d150:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d017      	beq.n	800d188 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d160:	88fa      	ldrh	r2, [r7, #6]
 800d162:	2300      	movs	r3, #0
 800d164:	9303      	str	r3, [sp, #12]
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	9302      	str	r3, [sp, #8]
 800d16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	68b9      	ldr	r1, [r7, #8]
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f000 f80e 	bl	800d198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d17c:	69f8      	ldr	r0, [r7, #28]
 800d17e:	f000 f89f 	bl	800d2c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d182:	2301      	movs	r3, #1
 800d184:	61bb      	str	r3, [r7, #24]
 800d186:	e002      	b.n	800d18e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d188:	f04f 33ff 	mov.w	r3, #4294967295
 800d18c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d18e:	69bb      	ldr	r3, [r7, #24]
	}
 800d190:	4618      	mov	r0, r3
 800d192:	3720      	adds	r7, #32
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	21a5      	movs	r1, #165	; 0xa5
 800d1b2:	f01a fb38 	bl	8027826 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d1c0:	440b      	add	r3, r1
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	4413      	add	r3, r2
 800d1c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	f023 0307 	bic.w	r3, r3, #7
 800d1ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	f003 0307 	and.w	r3, r3, #7
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00b      	beq.n	800d1f2 <prvInitialiseNewTask+0x5a>
 800d1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1de:	b672      	cpsid	i
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	b662      	cpsie	i
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	e7fe      	b.n	800d1f0 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d01f      	beq.n	800d238 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	61fb      	str	r3, [r7, #28]
 800d1fc:	e012      	b.n	800d224 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	4413      	add	r3, r2
 800d204:	7819      	ldrb	r1, [r3, #0]
 800d206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	4413      	add	r3, r2
 800d20c:	3334      	adds	r3, #52	; 0x34
 800d20e:	460a      	mov	r2, r1
 800d210:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d212:	68ba      	ldr	r2, [r7, #8]
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	4413      	add	r3, r2
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d006      	beq.n	800d22c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	3301      	adds	r3, #1
 800d222:	61fb      	str	r3, [r7, #28]
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	2b0f      	cmp	r3, #15
 800d228:	d9e9      	bls.n	800d1fe <prvInitialiseNewTask+0x66>
 800d22a:	e000      	b.n	800d22e <prvInitialiseNewTask+0x96>
			{
				break;
 800d22c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d236:	e003      	b.n	800d240 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d242:	2b06      	cmp	r3, #6
 800d244:	d901      	bls.n	800d24a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d246:	2306      	movs	r3, #6
 800d248:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d24e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d254:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	2200      	movs	r2, #0
 800d25a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	3304      	adds	r3, #4
 800d260:	4618      	mov	r0, r3
 800d262:	f7fe fedd 	bl	800c020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d268:	3318      	adds	r3, #24
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fe fed8 	bl	800c020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d274:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d278:	f1c3 0207 	rsb	r2, r3, #7
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d284:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d288:	2200      	movs	r2, #0
 800d28a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28e:	2200      	movs	r2, #0
 800d290:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	68f9      	ldr	r1, [r7, #12]
 800d29e:	69b8      	ldr	r0, [r7, #24]
 800d2a0:	f000 ff3c 	bl	800e11c <pxPortInitialiseStack>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2b6:	bf00      	nop
 800d2b8:	3720      	adds	r7, #32
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
	...

0800d2c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d2c8:	f001 f82e 	bl	800e328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d2cc:	4b2a      	ldr	r3, [pc, #168]	; (800d378 <prvAddNewTaskToReadyList+0xb8>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	4a29      	ldr	r2, [pc, #164]	; (800d378 <prvAddNewTaskToReadyList+0xb8>)
 800d2d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d2d6:	4b29      	ldr	r3, [pc, #164]	; (800d37c <prvAddNewTaskToReadyList+0xbc>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d109      	bne.n	800d2f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d2de:	4a27      	ldr	r2, [pc, #156]	; (800d37c <prvAddNewTaskToReadyList+0xbc>)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2e4:	4b24      	ldr	r3, [pc, #144]	; (800d378 <prvAddNewTaskToReadyList+0xb8>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d110      	bne.n	800d30e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d2ec:	f000 fc1e 	bl	800db2c <prvInitialiseTaskLists>
 800d2f0:	e00d      	b.n	800d30e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d2f2:	4b23      	ldr	r3, [pc, #140]	; (800d380 <prvAddNewTaskToReadyList+0xc0>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d109      	bne.n	800d30e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2fa:	4b20      	ldr	r3, [pc, #128]	; (800d37c <prvAddNewTaskToReadyList+0xbc>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	429a      	cmp	r2, r3
 800d306:	d802      	bhi.n	800d30e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d308:	4a1c      	ldr	r2, [pc, #112]	; (800d37c <prvAddNewTaskToReadyList+0xbc>)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d30e:	4b1d      	ldr	r3, [pc, #116]	; (800d384 <prvAddNewTaskToReadyList+0xc4>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	3301      	adds	r3, #1
 800d314:	4a1b      	ldr	r2, [pc, #108]	; (800d384 <prvAddNewTaskToReadyList+0xc4>)
 800d316:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31c:	2201      	movs	r2, #1
 800d31e:	409a      	lsls	r2, r3
 800d320:	4b19      	ldr	r3, [pc, #100]	; (800d388 <prvAddNewTaskToReadyList+0xc8>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4313      	orrs	r3, r2
 800d326:	4a18      	ldr	r2, [pc, #96]	; (800d388 <prvAddNewTaskToReadyList+0xc8>)
 800d328:	6013      	str	r3, [r2, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32e:	4613      	mov	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4a15      	ldr	r2, [pc, #84]	; (800d38c <prvAddNewTaskToReadyList+0xcc>)
 800d338:	441a      	add	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3304      	adds	r3, #4
 800d33e:	4619      	mov	r1, r3
 800d340:	4610      	mov	r0, r2
 800d342:	f7fe fe7a 	bl	800c03a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d346:	f001 f821 	bl	800e38c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d34a:	4b0d      	ldr	r3, [pc, #52]	; (800d380 <prvAddNewTaskToReadyList+0xc0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00e      	beq.n	800d370 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d352:	4b0a      	ldr	r3, [pc, #40]	; (800d37c <prvAddNewTaskToReadyList+0xbc>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d207      	bcs.n	800d370 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d360:	4b0b      	ldr	r3, [pc, #44]	; (800d390 <prvAddNewTaskToReadyList+0xd0>)
 800d362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d366:	601a      	str	r2, [r3, #0]
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d370:	bf00      	nop
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	200004a4 	.word	0x200004a4
 800d37c:	200003a4 	.word	0x200003a4
 800d380:	200004b0 	.word	0x200004b0
 800d384:	200004c0 	.word	0x200004c0
 800d388:	200004ac 	.word	0x200004ac
 800d38c:	200003a8 	.word	0x200003a8
 800d390:	e000ed04 	.word	0xe000ed04

0800d394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d39c:	2300      	movs	r3, #0
 800d39e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d018      	beq.n	800d3d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d3a6:	4b14      	ldr	r3, [pc, #80]	; (800d3f8 <vTaskDelay+0x64>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00b      	beq.n	800d3c6 <vTaskDelay+0x32>
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	b672      	cpsid	i
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	b662      	cpsie	i
 800d3c2:	60bb      	str	r3, [r7, #8]
 800d3c4:	e7fe      	b.n	800d3c4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d3c6:	f000 f87d 	bl	800d4c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fe3f 	bl	800e050 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d3d2:	f000 f885 	bl	800d4e0 <xTaskResumeAll>
 800d3d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d107      	bne.n	800d3ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d3de:	4b07      	ldr	r3, [pc, #28]	; (800d3fc <vTaskDelay+0x68>)
 800d3e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e4:	601a      	str	r2, [r3, #0]
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3ee:	bf00      	nop
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	200004cc 	.word	0x200004cc
 800d3fc:	e000ed04 	.word	0xe000ed04

0800d400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08a      	sub	sp, #40	; 0x28
 800d404:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d406:	2300      	movs	r3, #0
 800d408:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d40e:	463a      	mov	r2, r7
 800d410:	1d39      	adds	r1, r7, #4
 800d412:	f107 0308 	add.w	r3, r7, #8
 800d416:	4618      	mov	r0, r3
 800d418:	f7f3 fac0 	bl	800099c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d41c:	6839      	ldr	r1, [r7, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	9202      	str	r2, [sp, #8]
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	2300      	movs	r3, #0
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	2300      	movs	r3, #0
 800d42c:	460a      	mov	r2, r1
 800d42e:	491f      	ldr	r1, [pc, #124]	; (800d4ac <vTaskStartScheduler+0xac>)
 800d430:	481f      	ldr	r0, [pc, #124]	; (800d4b0 <vTaskStartScheduler+0xb0>)
 800d432:	f7ff fe0c 	bl	800d04e <xTaskCreateStatic>
 800d436:	4602      	mov	r2, r0
 800d438:	4b1e      	ldr	r3, [pc, #120]	; (800d4b4 <vTaskStartScheduler+0xb4>)
 800d43a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d43c:	4b1d      	ldr	r3, [pc, #116]	; (800d4b4 <vTaskStartScheduler+0xb4>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d444:	2301      	movs	r3, #1
 800d446:	617b      	str	r3, [r7, #20]
 800d448:	e001      	b.n	800d44e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d44a:	2300      	movs	r3, #0
 800d44c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d117      	bne.n	800d484 <vTaskStartScheduler+0x84>
 800d454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d458:	b672      	cpsid	i
 800d45a:	f383 8811 	msr	BASEPRI, r3
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	b662      	cpsie	i
 800d468:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d46a:	4b13      	ldr	r3, [pc, #76]	; (800d4b8 <vTaskStartScheduler+0xb8>)
 800d46c:	f04f 32ff 	mov.w	r2, #4294967295
 800d470:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d472:	4b12      	ldr	r3, [pc, #72]	; (800d4bc <vTaskStartScheduler+0xbc>)
 800d474:	2201      	movs	r2, #1
 800d476:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d478:	4b11      	ldr	r3, [pc, #68]	; (800d4c0 <vTaskStartScheduler+0xc0>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d47e:	f000 fed7 	bl	800e230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d482:	e00f      	b.n	800d4a4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48a:	d10b      	bne.n	800d4a4 <vTaskStartScheduler+0xa4>
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	b672      	cpsid	i
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	b662      	cpsie	i
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	e7fe      	b.n	800d4a2 <vTaskStartScheduler+0xa2>
}
 800d4a4:	bf00      	nop
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	08028770 	.word	0x08028770
 800d4b0:	0800daf9 	.word	0x0800daf9
 800d4b4:	200004c8 	.word	0x200004c8
 800d4b8:	200004c4 	.word	0x200004c4
 800d4bc:	200004b0 	.word	0x200004b0
 800d4c0:	200004a8 	.word	0x200004a8

0800d4c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d4c8:	4b04      	ldr	r3, [pc, #16]	; (800d4dc <vTaskSuspendAll+0x18>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	4a03      	ldr	r2, [pc, #12]	; (800d4dc <vTaskSuspendAll+0x18>)
 800d4d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d4d2:	bf00      	nop
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	200004cc 	.word	0x200004cc

0800d4e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4ee:	4b42      	ldr	r3, [pc, #264]	; (800d5f8 <xTaskResumeAll+0x118>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10b      	bne.n	800d50e <xTaskResumeAll+0x2e>
 800d4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fa:	b672      	cpsid	i
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	b662      	cpsie	i
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	e7fe      	b.n	800d50c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d50e:	f000 ff0b 	bl	800e328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d512:	4b39      	ldr	r3, [pc, #228]	; (800d5f8 <xTaskResumeAll+0x118>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	3b01      	subs	r3, #1
 800d518:	4a37      	ldr	r2, [pc, #220]	; (800d5f8 <xTaskResumeAll+0x118>)
 800d51a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d51c:	4b36      	ldr	r3, [pc, #216]	; (800d5f8 <xTaskResumeAll+0x118>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d161      	bne.n	800d5e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d524:	4b35      	ldr	r3, [pc, #212]	; (800d5fc <xTaskResumeAll+0x11c>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d05d      	beq.n	800d5e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d52c:	e02e      	b.n	800d58c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52e:	4b34      	ldr	r3, [pc, #208]	; (800d600 <xTaskResumeAll+0x120>)
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3318      	adds	r3, #24
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe fdda 	bl	800c0f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	3304      	adds	r3, #4
 800d544:	4618      	mov	r0, r3
 800d546:	f7fe fdd5 	bl	800c0f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54e:	2201      	movs	r2, #1
 800d550:	409a      	lsls	r2, r3
 800d552:	4b2c      	ldr	r3, [pc, #176]	; (800d604 <xTaskResumeAll+0x124>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4313      	orrs	r3, r2
 800d558:	4a2a      	ldr	r2, [pc, #168]	; (800d604 <xTaskResumeAll+0x124>)
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4a27      	ldr	r2, [pc, #156]	; (800d608 <xTaskResumeAll+0x128>)
 800d56a:	441a      	add	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3304      	adds	r3, #4
 800d570:	4619      	mov	r1, r3
 800d572:	4610      	mov	r0, r2
 800d574:	f7fe fd61 	bl	800c03a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57c:	4b23      	ldr	r3, [pc, #140]	; (800d60c <xTaskResumeAll+0x12c>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d582:	429a      	cmp	r2, r3
 800d584:	d302      	bcc.n	800d58c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d586:	4b22      	ldr	r3, [pc, #136]	; (800d610 <xTaskResumeAll+0x130>)
 800d588:	2201      	movs	r2, #1
 800d58a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d58c:	4b1c      	ldr	r3, [pc, #112]	; (800d600 <xTaskResumeAll+0x120>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1cc      	bne.n	800d52e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d59a:	f000 fb63 	bl	800dc64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d59e:	4b1d      	ldr	r3, [pc, #116]	; (800d614 <xTaskResumeAll+0x134>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d010      	beq.n	800d5cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d5aa:	f000 f859 	bl	800d660 <xTaskIncrementTick>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d002      	beq.n	800d5ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d5b4:	4b16      	ldr	r3, [pc, #88]	; (800d610 <xTaskResumeAll+0x130>)
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1f1      	bne.n	800d5aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d5c6:	4b13      	ldr	r3, [pc, #76]	; (800d614 <xTaskResumeAll+0x134>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d5cc:	4b10      	ldr	r3, [pc, #64]	; (800d610 <xTaskResumeAll+0x130>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d009      	beq.n	800d5e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5d8:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <xTaskResumeAll+0x138>)
 800d5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5de:	601a      	str	r2, [r3, #0]
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5e8:	f000 fed0 	bl	800e38c <vPortExitCritical>

	return xAlreadyYielded;
 800d5ec:	68bb      	ldr	r3, [r7, #8]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	200004cc 	.word	0x200004cc
 800d5fc:	200004a4 	.word	0x200004a4
 800d600:	20000464 	.word	0x20000464
 800d604:	200004ac 	.word	0x200004ac
 800d608:	200003a8 	.word	0x200003a8
 800d60c:	200003a4 	.word	0x200003a4
 800d610:	200004b8 	.word	0x200004b8
 800d614:	200004b4 	.word	0x200004b4
 800d618:	e000ed04 	.word	0xe000ed04

0800d61c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d622:	4b05      	ldr	r3, [pc, #20]	; (800d638 <xTaskGetTickCount+0x1c>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d628:	687b      	ldr	r3, [r7, #4]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	370c      	adds	r7, #12
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	200004a8 	.word	0x200004a8

0800d63c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d642:	f000 ff51 	bl	800e4e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d646:	2300      	movs	r3, #0
 800d648:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d64a:	4b04      	ldr	r3, [pc, #16]	; (800d65c <xTaskGetTickCountFromISR+0x20>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d650:	683b      	ldr	r3, [r7, #0]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	200004a8 	.word	0x200004a8

0800d660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d666:	2300      	movs	r3, #0
 800d668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d66a:	4b4f      	ldr	r3, [pc, #316]	; (800d7a8 <xTaskIncrementTick+0x148>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f040 8089 	bne.w	800d786 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d674:	4b4d      	ldr	r3, [pc, #308]	; (800d7ac <xTaskIncrementTick+0x14c>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	3301      	adds	r3, #1
 800d67a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d67c:	4a4b      	ldr	r2, [pc, #300]	; (800d7ac <xTaskIncrementTick+0x14c>)
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d121      	bne.n	800d6cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d688:	4b49      	ldr	r3, [pc, #292]	; (800d7b0 <xTaskIncrementTick+0x150>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00b      	beq.n	800d6aa <xTaskIncrementTick+0x4a>
 800d692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d696:	b672      	cpsid	i
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	b662      	cpsie	i
 800d6a6:	603b      	str	r3, [r7, #0]
 800d6a8:	e7fe      	b.n	800d6a8 <xTaskIncrementTick+0x48>
 800d6aa:	4b41      	ldr	r3, [pc, #260]	; (800d7b0 <xTaskIncrementTick+0x150>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	60fb      	str	r3, [r7, #12]
 800d6b0:	4b40      	ldr	r3, [pc, #256]	; (800d7b4 <xTaskIncrementTick+0x154>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a3e      	ldr	r2, [pc, #248]	; (800d7b0 <xTaskIncrementTick+0x150>)
 800d6b6:	6013      	str	r3, [r2, #0]
 800d6b8:	4a3e      	ldr	r2, [pc, #248]	; (800d7b4 <xTaskIncrementTick+0x154>)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	4b3e      	ldr	r3, [pc, #248]	; (800d7b8 <xTaskIncrementTick+0x158>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	4a3c      	ldr	r2, [pc, #240]	; (800d7b8 <xTaskIncrementTick+0x158>)
 800d6c6:	6013      	str	r3, [r2, #0]
 800d6c8:	f000 facc 	bl	800dc64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6cc:	4b3b      	ldr	r3, [pc, #236]	; (800d7bc <xTaskIncrementTick+0x15c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d348      	bcc.n	800d768 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6d6:	4b36      	ldr	r3, [pc, #216]	; (800d7b0 <xTaskIncrementTick+0x150>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d104      	bne.n	800d6ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6e0:	4b36      	ldr	r3, [pc, #216]	; (800d7bc <xTaskIncrementTick+0x15c>)
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	601a      	str	r2, [r3, #0]
					break;
 800d6e8:	e03e      	b.n	800d768 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	4b31      	ldr	r3, [pc, #196]	; (800d7b0 <xTaskIncrementTick+0x150>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d203      	bcs.n	800d70a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d702:	4a2e      	ldr	r2, [pc, #184]	; (800d7bc <xTaskIncrementTick+0x15c>)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d708:	e02e      	b.n	800d768 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	3304      	adds	r3, #4
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fcf0 	bl	800c0f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d004      	beq.n	800d726 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	3318      	adds	r3, #24
 800d720:	4618      	mov	r0, r3
 800d722:	f7fe fce7 	bl	800c0f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72a:	2201      	movs	r2, #1
 800d72c:	409a      	lsls	r2, r3
 800d72e:	4b24      	ldr	r3, [pc, #144]	; (800d7c0 <xTaskIncrementTick+0x160>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4313      	orrs	r3, r2
 800d734:	4a22      	ldr	r2, [pc, #136]	; (800d7c0 <xTaskIncrementTick+0x160>)
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73c:	4613      	mov	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4413      	add	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4a1f      	ldr	r2, [pc, #124]	; (800d7c4 <xTaskIncrementTick+0x164>)
 800d746:	441a      	add	r2, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	3304      	adds	r3, #4
 800d74c:	4619      	mov	r1, r3
 800d74e:	4610      	mov	r0, r2
 800d750:	f7fe fc73 	bl	800c03a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d758:	4b1b      	ldr	r3, [pc, #108]	; (800d7c8 <xTaskIncrementTick+0x168>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75e:	429a      	cmp	r2, r3
 800d760:	d3b9      	bcc.n	800d6d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d762:	2301      	movs	r3, #1
 800d764:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d766:	e7b6      	b.n	800d6d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d768:	4b17      	ldr	r3, [pc, #92]	; (800d7c8 <xTaskIncrementTick+0x168>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d76e:	4915      	ldr	r1, [pc, #84]	; (800d7c4 <xTaskIncrementTick+0x164>)
 800d770:	4613      	mov	r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	4413      	add	r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	440b      	add	r3, r1
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d907      	bls.n	800d790 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800d780:	2301      	movs	r3, #1
 800d782:	617b      	str	r3, [r7, #20]
 800d784:	e004      	b.n	800d790 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d786:	4b11      	ldr	r3, [pc, #68]	; (800d7cc <xTaskIncrementTick+0x16c>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3301      	adds	r3, #1
 800d78c:	4a0f      	ldr	r2, [pc, #60]	; (800d7cc <xTaskIncrementTick+0x16c>)
 800d78e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d790:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <xTaskIncrementTick+0x170>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800d798:	2301      	movs	r3, #1
 800d79a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d79c:	697b      	ldr	r3, [r7, #20]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	200004cc 	.word	0x200004cc
 800d7ac:	200004a8 	.word	0x200004a8
 800d7b0:	2000045c 	.word	0x2000045c
 800d7b4:	20000460 	.word	0x20000460
 800d7b8:	200004bc 	.word	0x200004bc
 800d7bc:	200004c4 	.word	0x200004c4
 800d7c0:	200004ac 	.word	0x200004ac
 800d7c4:	200003a8 	.word	0x200003a8
 800d7c8:	200003a4 	.word	0x200003a4
 800d7cc:	200004b4 	.word	0x200004b4
 800d7d0:	200004b8 	.word	0x200004b8

0800d7d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b088      	sub	sp, #32
 800d7d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d7da:	4b3a      	ldr	r3, [pc, #232]	; (800d8c4 <vTaskSwitchContext+0xf0>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d7e2:	4b39      	ldr	r3, [pc, #228]	; (800d8c8 <vTaskSwitchContext+0xf4>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7e8:	e067      	b.n	800d8ba <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d7ea:	4b37      	ldr	r3, [pc, #220]	; (800d8c8 <vTaskSwitchContext+0xf4>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d7f0:	4b36      	ldr	r3, [pc, #216]	; (800d8cc <vTaskSwitchContext+0xf8>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f6:	61fb      	str	r3, [r7, #28]
 800d7f8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d7fc:	61bb      	str	r3, [r7, #24]
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	69ba      	ldr	r2, [r7, #24]
 800d804:	429a      	cmp	r2, r3
 800d806:	d111      	bne.n	800d82c <vTaskSwitchContext+0x58>
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	3304      	adds	r3, #4
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	69ba      	ldr	r2, [r7, #24]
 800d810:	429a      	cmp	r2, r3
 800d812:	d10b      	bne.n	800d82c <vTaskSwitchContext+0x58>
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	3308      	adds	r3, #8
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	69ba      	ldr	r2, [r7, #24]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d105      	bne.n	800d82c <vTaskSwitchContext+0x58>
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	330c      	adds	r3, #12
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	69ba      	ldr	r2, [r7, #24]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d008      	beq.n	800d83e <vTaskSwitchContext+0x6a>
 800d82c:	4b27      	ldr	r3, [pc, #156]	; (800d8cc <vTaskSwitchContext+0xf8>)
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	4b26      	ldr	r3, [pc, #152]	; (800d8cc <vTaskSwitchContext+0xf8>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	3334      	adds	r3, #52	; 0x34
 800d836:	4619      	mov	r1, r3
 800d838:	4610      	mov	r0, r2
 800d83a:	f7f3 f89c 	bl	8000976 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d83e:	4b24      	ldr	r3, [pc, #144]	; (800d8d0 <vTaskSwitchContext+0xfc>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	fab3 f383 	clz	r3, r3
 800d84a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d84c:	7afb      	ldrb	r3, [r7, #11]
 800d84e:	f1c3 031f 	rsb	r3, r3, #31
 800d852:	617b      	str	r3, [r7, #20]
 800d854:	491f      	ldr	r1, [pc, #124]	; (800d8d4 <vTaskSwitchContext+0x100>)
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	4613      	mov	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4413      	add	r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	440b      	add	r3, r1
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10b      	bne.n	800d880 <vTaskSwitchContext+0xac>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86c:	b672      	cpsid	i
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	b662      	cpsie	i
 800d87c:	607b      	str	r3, [r7, #4]
 800d87e:	e7fe      	b.n	800d87e <vTaskSwitchContext+0xaa>
 800d880:	697a      	ldr	r2, [r7, #20]
 800d882:	4613      	mov	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4413      	add	r3, r2
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	4a12      	ldr	r2, [pc, #72]	; (800d8d4 <vTaskSwitchContext+0x100>)
 800d88c:	4413      	add	r3, r2
 800d88e:	613b      	str	r3, [r7, #16]
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	605a      	str	r2, [r3, #4]
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	685a      	ldr	r2, [r3, #4]
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	3308      	adds	r3, #8
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d104      	bne.n	800d8b0 <vTaskSwitchContext+0xdc>
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	605a      	str	r2, [r3, #4]
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	4a05      	ldr	r2, [pc, #20]	; (800d8cc <vTaskSwitchContext+0xf8>)
 800d8b8:	6013      	str	r3, [r2, #0]
}
 800d8ba:	bf00      	nop
 800d8bc:	3720      	adds	r7, #32
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	200004cc 	.word	0x200004cc
 800d8c8:	200004b8 	.word	0x200004b8
 800d8cc:	200003a4 	.word	0x200003a4
 800d8d0:	200004ac 	.word	0x200004ac
 800d8d4:	200003a8 	.word	0x200003a8

0800d8d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10b      	bne.n	800d900 <vTaskPlaceOnEventList+0x28>
 800d8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ec:	b672      	cpsid	i
 800d8ee:	f383 8811 	msr	BASEPRI, r3
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	f3bf 8f4f 	dsb	sy
 800d8fa:	b662      	cpsie	i
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	e7fe      	b.n	800d8fe <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d900:	4b07      	ldr	r3, [pc, #28]	; (800d920 <vTaskPlaceOnEventList+0x48>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3318      	adds	r3, #24
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7fe fbba 	bl	800c082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d90e:	2101      	movs	r1, #1
 800d910:	6838      	ldr	r0, [r7, #0]
 800d912:	f000 fb9d 	bl	800e050 <prvAddCurrentTaskToDelayedList>
}
 800d916:	bf00      	nop
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	200003a4 	.word	0x200003a4

0800d924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10b      	bne.n	800d952 <xTaskRemoveFromEventList+0x2e>
 800d93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93e:	b672      	cpsid	i
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	b662      	cpsie	i
 800d94e:	60fb      	str	r3, [r7, #12]
 800d950:	e7fe      	b.n	800d950 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	3318      	adds	r3, #24
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe fbcc 	bl	800c0f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d95c:	4b1d      	ldr	r3, [pc, #116]	; (800d9d4 <xTaskRemoveFromEventList+0xb0>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d11c      	bne.n	800d99e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	3304      	adds	r3, #4
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe fbc3 	bl	800c0f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d972:	2201      	movs	r2, #1
 800d974:	409a      	lsls	r2, r3
 800d976:	4b18      	ldr	r3, [pc, #96]	; (800d9d8 <xTaskRemoveFromEventList+0xb4>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	4a16      	ldr	r2, [pc, #88]	; (800d9d8 <xTaskRemoveFromEventList+0xb4>)
 800d97e:	6013      	str	r3, [r2, #0]
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d984:	4613      	mov	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4413      	add	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4a13      	ldr	r2, [pc, #76]	; (800d9dc <xTaskRemoveFromEventList+0xb8>)
 800d98e:	441a      	add	r2, r3
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	3304      	adds	r3, #4
 800d994:	4619      	mov	r1, r3
 800d996:	4610      	mov	r0, r2
 800d998:	f7fe fb4f 	bl	800c03a <vListInsertEnd>
 800d99c:	e005      	b.n	800d9aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	3318      	adds	r3, #24
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	480e      	ldr	r0, [pc, #56]	; (800d9e0 <xTaskRemoveFromEventList+0xbc>)
 800d9a6:	f7fe fb48 	bl	800c03a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ae:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <xTaskRemoveFromEventList+0xc0>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d905      	bls.n	800d9c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d9bc:	4b0a      	ldr	r3, [pc, #40]	; (800d9e8 <xTaskRemoveFromEventList+0xc4>)
 800d9be:	2201      	movs	r2, #1
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	e001      	b.n	800d9c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d9c8:	697b      	ldr	r3, [r7, #20]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	200004cc 	.word	0x200004cc
 800d9d8:	200004ac 	.word	0x200004ac
 800d9dc:	200003a8 	.word	0x200003a8
 800d9e0:	20000464 	.word	0x20000464
 800d9e4:	200003a4 	.word	0x200003a4
 800d9e8:	200004b8 	.word	0x200004b8

0800d9ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9f4:	4b06      	ldr	r3, [pc, #24]	; (800da10 <vTaskInternalSetTimeOutState+0x24>)
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9fc:	4b05      	ldr	r3, [pc, #20]	; (800da14 <vTaskInternalSetTimeOutState+0x28>)
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	605a      	str	r2, [r3, #4]
}
 800da04:	bf00      	nop
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr
 800da10:	200004bc 	.word	0x200004bc
 800da14:	200004a8 	.word	0x200004a8

0800da18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b088      	sub	sp, #32
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d10b      	bne.n	800da40 <xTaskCheckForTimeOut+0x28>
 800da28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2c:	b672      	cpsid	i
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	b662      	cpsie	i
 800da3c:	613b      	str	r3, [r7, #16]
 800da3e:	e7fe      	b.n	800da3e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10b      	bne.n	800da5e <xTaskCheckForTimeOut+0x46>
 800da46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4a:	b672      	cpsid	i
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	b662      	cpsie	i
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	e7fe      	b.n	800da5c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800da5e:	f000 fc63 	bl	800e328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da62:	4b1d      	ldr	r3, [pc, #116]	; (800dad8 <xTaskCheckForTimeOut+0xc0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	69ba      	ldr	r2, [r7, #24]
 800da6e:	1ad3      	subs	r3, r2, r3
 800da70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7a:	d102      	bne.n	800da82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da7c:	2300      	movs	r3, #0
 800da7e:	61fb      	str	r3, [r7, #28]
 800da80:	e023      	b.n	800daca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	4b15      	ldr	r3, [pc, #84]	; (800dadc <xTaskCheckForTimeOut+0xc4>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d007      	beq.n	800da9e <xTaskCheckForTimeOut+0x86>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	69ba      	ldr	r2, [r7, #24]
 800da94:	429a      	cmp	r2, r3
 800da96:	d302      	bcc.n	800da9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da98:	2301      	movs	r3, #1
 800da9a:	61fb      	str	r3, [r7, #28]
 800da9c:	e015      	b.n	800daca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d20b      	bcs.n	800dac0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	1ad2      	subs	r2, r2, r3
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7ff ff99 	bl	800d9ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800daba:	2300      	movs	r3, #0
 800dabc:	61fb      	str	r3, [r7, #28]
 800dabe:	e004      	b.n	800daca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	2200      	movs	r2, #0
 800dac4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dac6:	2301      	movs	r3, #1
 800dac8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800daca:	f000 fc5f 	bl	800e38c <vPortExitCritical>

	return xReturn;
 800dace:	69fb      	ldr	r3, [r7, #28]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3720      	adds	r7, #32
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	200004a8 	.word	0x200004a8
 800dadc:	200004bc 	.word	0x200004bc

0800dae0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dae0:	b480      	push	{r7}
 800dae2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dae4:	4b03      	ldr	r3, [pc, #12]	; (800daf4 <vTaskMissedYield+0x14>)
 800dae6:	2201      	movs	r2, #1
 800dae8:	601a      	str	r2, [r3, #0]
}
 800daea:	bf00      	nop
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr
 800daf4:	200004b8 	.word	0x200004b8

0800daf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800db00:	f000 f854 	bl	800dbac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800db04:	4b07      	ldr	r3, [pc, #28]	; (800db24 <prvIdleTask+0x2c>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d907      	bls.n	800db1c <prvIdleTask+0x24>
			{
				taskYIELD();
 800db0c:	4b06      	ldr	r3, [pc, #24]	; (800db28 <prvIdleTask+0x30>)
 800db0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800db1c:	f7f2 ff24 	bl	8000968 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800db20:	e7ee      	b.n	800db00 <prvIdleTask+0x8>
 800db22:	bf00      	nop
 800db24:	200003a8 	.word	0x200003a8
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db32:	2300      	movs	r3, #0
 800db34:	607b      	str	r3, [r7, #4]
 800db36:	e00c      	b.n	800db52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	4613      	mov	r3, r2
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	4413      	add	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4a12      	ldr	r2, [pc, #72]	; (800db8c <prvInitialiseTaskLists+0x60>)
 800db44:	4413      	add	r3, r2
 800db46:	4618      	mov	r0, r3
 800db48:	f7fe fa4a 	bl	800bfe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	3301      	adds	r3, #1
 800db50:	607b      	str	r3, [r7, #4]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b06      	cmp	r3, #6
 800db56:	d9ef      	bls.n	800db38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db58:	480d      	ldr	r0, [pc, #52]	; (800db90 <prvInitialiseTaskLists+0x64>)
 800db5a:	f7fe fa41 	bl	800bfe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db5e:	480d      	ldr	r0, [pc, #52]	; (800db94 <prvInitialiseTaskLists+0x68>)
 800db60:	f7fe fa3e 	bl	800bfe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db64:	480c      	ldr	r0, [pc, #48]	; (800db98 <prvInitialiseTaskLists+0x6c>)
 800db66:	f7fe fa3b 	bl	800bfe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db6a:	480c      	ldr	r0, [pc, #48]	; (800db9c <prvInitialiseTaskLists+0x70>)
 800db6c:	f7fe fa38 	bl	800bfe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db70:	480b      	ldr	r0, [pc, #44]	; (800dba0 <prvInitialiseTaskLists+0x74>)
 800db72:	f7fe fa35 	bl	800bfe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db76:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <prvInitialiseTaskLists+0x78>)
 800db78:	4a05      	ldr	r2, [pc, #20]	; (800db90 <prvInitialiseTaskLists+0x64>)
 800db7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db7c:	4b0a      	ldr	r3, [pc, #40]	; (800dba8 <prvInitialiseTaskLists+0x7c>)
 800db7e:	4a05      	ldr	r2, [pc, #20]	; (800db94 <prvInitialiseTaskLists+0x68>)
 800db80:	601a      	str	r2, [r3, #0]
}
 800db82:	bf00      	nop
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	200003a8 	.word	0x200003a8
 800db90:	20000434 	.word	0x20000434
 800db94:	20000448 	.word	0x20000448
 800db98:	20000464 	.word	0x20000464
 800db9c:	20000478 	.word	0x20000478
 800dba0:	20000490 	.word	0x20000490
 800dba4:	2000045c 	.word	0x2000045c
 800dba8:	20000460 	.word	0x20000460

0800dbac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbb2:	e019      	b.n	800dbe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dbb4:	f000 fbb8 	bl	800e328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbb8:	4b0f      	ldr	r3, [pc, #60]	; (800dbf8 <prvCheckTasksWaitingTermination+0x4c>)
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe fa95 	bl	800c0f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dbca:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <prvCheckTasksWaitingTermination+0x50>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	4a0a      	ldr	r2, [pc, #40]	; (800dbfc <prvCheckTasksWaitingTermination+0x50>)
 800dbd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dbd4:	4b0a      	ldr	r3, [pc, #40]	; (800dc00 <prvCheckTasksWaitingTermination+0x54>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	4a09      	ldr	r2, [pc, #36]	; (800dc00 <prvCheckTasksWaitingTermination+0x54>)
 800dbdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dbde:	f000 fbd5 	bl	800e38c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f80e 	bl	800dc04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbe8:	4b05      	ldr	r3, [pc, #20]	; (800dc00 <prvCheckTasksWaitingTermination+0x54>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d1e1      	bne.n	800dbb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20000478 	.word	0x20000478
 800dbfc:	200004a4 	.word	0x200004a4
 800dc00:	2000048c 	.word	0x2000048c

0800dc04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d108      	bne.n	800dc28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f000 fd72 	bl	800e704 <vPortFree>
				vPortFree( pxTCB );
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fd6f 	bl	800e704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dc26:	e019      	b.n	800dc5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d103      	bne.n	800dc3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fd66 	bl	800e704 <vPortFree>
	}
 800dc38:	e010      	b.n	800dc5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d00b      	beq.n	800dc5c <prvDeleteTCB+0x58>
 800dc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc48:	b672      	cpsid	i
 800dc4a:	f383 8811 	msr	BASEPRI, r3
 800dc4e:	f3bf 8f6f 	isb	sy
 800dc52:	f3bf 8f4f 	dsb	sy
 800dc56:	b662      	cpsie	i
 800dc58:	60fb      	str	r3, [r7, #12]
 800dc5a:	e7fe      	b.n	800dc5a <prvDeleteTCB+0x56>
	}
 800dc5c:	bf00      	nop
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc6a:	4b0c      	ldr	r3, [pc, #48]	; (800dc9c <prvResetNextTaskUnblockTime+0x38>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d104      	bne.n	800dc7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc74:	4b0a      	ldr	r3, [pc, #40]	; (800dca0 <prvResetNextTaskUnblockTime+0x3c>)
 800dc76:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc7c:	e008      	b.n	800dc90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc7e:	4b07      	ldr	r3, [pc, #28]	; (800dc9c <prvResetNextTaskUnblockTime+0x38>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	4a04      	ldr	r2, [pc, #16]	; (800dca0 <prvResetNextTaskUnblockTime+0x3c>)
 800dc8e:	6013      	str	r3, [r2, #0]
}
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	2000045c 	.word	0x2000045c
 800dca0:	200004c4 	.word	0x200004c4

0800dca4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dcaa:	4b0b      	ldr	r3, [pc, #44]	; (800dcd8 <xTaskGetSchedulerState+0x34>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d102      	bne.n	800dcb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	607b      	str	r3, [r7, #4]
 800dcb6:	e008      	b.n	800dcca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcb8:	4b08      	ldr	r3, [pc, #32]	; (800dcdc <xTaskGetSchedulerState+0x38>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d102      	bne.n	800dcc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	607b      	str	r3, [r7, #4]
 800dcc4:	e001      	b.n	800dcca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dcca:	687b      	ldr	r3, [r7, #4]
	}
 800dccc:	4618      	mov	r0, r3
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	200004b0 	.word	0x200004b0
 800dcdc:	200004cc 	.word	0x200004cc

0800dce0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dcec:	2300      	movs	r3, #0
 800dcee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d069      	beq.n	800ddca <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcfa:	4b36      	ldr	r3, [pc, #216]	; (800ddd4 <xTaskPriorityInherit+0xf4>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d259      	bcs.n	800ddb8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	699b      	ldr	r3, [r3, #24]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	db06      	blt.n	800dd1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd0c:	4b31      	ldr	r3, [pc, #196]	; (800ddd4 <xTaskPriorityInherit+0xf4>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd12:	f1c3 0207 	rsb	r2, r3, #7
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	6959      	ldr	r1, [r3, #20]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd22:	4613      	mov	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	4a2b      	ldr	r2, [pc, #172]	; (800ddd8 <xTaskPriorityInherit+0xf8>)
 800dd2c:	4413      	add	r3, r2
 800dd2e:	4299      	cmp	r1, r3
 800dd30:	d13a      	bne.n	800dda8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	3304      	adds	r3, #4
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fe f9dc 	bl	800c0f4 <uxListRemove>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d115      	bne.n	800dd6e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd46:	4924      	ldr	r1, [pc, #144]	; (800ddd8 <xTaskPriorityInherit+0xf8>)
 800dd48:	4613      	mov	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	440b      	add	r3, r1
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10a      	bne.n	800dd6e <xTaskPriorityInherit+0x8e>
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd62:	43da      	mvns	r2, r3
 800dd64:	4b1d      	ldr	r3, [pc, #116]	; (800dddc <xTaskPriorityInherit+0xfc>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4013      	ands	r3, r2
 800dd6a:	4a1c      	ldr	r2, [pc, #112]	; (800dddc <xTaskPriorityInherit+0xfc>)
 800dd6c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd6e:	4b19      	ldr	r3, [pc, #100]	; (800ddd4 <xTaskPriorityInherit+0xf4>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	409a      	lsls	r2, r3
 800dd80:	4b16      	ldr	r3, [pc, #88]	; (800dddc <xTaskPriorityInherit+0xfc>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	4a15      	ldr	r2, [pc, #84]	; (800dddc <xTaskPriorityInherit+0xfc>)
 800dd88:	6013      	str	r3, [r2, #0]
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8e:	4613      	mov	r3, r2
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	4413      	add	r3, r2
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4a10      	ldr	r2, [pc, #64]	; (800ddd8 <xTaskPriorityInherit+0xf8>)
 800dd98:	441a      	add	r2, r3
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4610      	mov	r0, r2
 800dda2:	f7fe f94a 	bl	800c03a <vListInsertEnd>
 800dda6:	e004      	b.n	800ddb2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dda8:	4b0a      	ldr	r3, [pc, #40]	; (800ddd4 <xTaskPriorityInherit+0xf4>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	60fb      	str	r3, [r7, #12]
 800ddb6:	e008      	b.n	800ddca <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddbc:	4b05      	ldr	r3, [pc, #20]	; (800ddd4 <xTaskPriorityInherit+0xf4>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d201      	bcs.n	800ddca <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ddca:	68fb      	ldr	r3, [r7, #12]
	}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	200003a4 	.word	0x200003a4
 800ddd8:	200003a8 	.word	0x200003a8
 800dddc:	200004ac 	.word	0x200004ac

0800dde0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ddec:	2300      	movs	r3, #0
 800ddee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d070      	beq.n	800ded8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ddf6:	4b3b      	ldr	r3, [pc, #236]	; (800dee4 <xTaskPriorityDisinherit+0x104>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	693a      	ldr	r2, [r7, #16]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d00b      	beq.n	800de18 <xTaskPriorityDisinherit+0x38>
 800de00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de04:	b672      	cpsid	i
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	b662      	cpsie	i
 800de14:	60fb      	str	r3, [r7, #12]
 800de16:	e7fe      	b.n	800de16 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d10b      	bne.n	800de38 <xTaskPriorityDisinherit+0x58>
 800de20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de24:	b672      	cpsid	i
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	b662      	cpsie	i
 800de34:	60bb      	str	r3, [r7, #8]
 800de36:	e7fe      	b.n	800de36 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de3c:	1e5a      	subs	r2, r3, #1
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d044      	beq.n	800ded8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de52:	2b00      	cmp	r3, #0
 800de54:	d140      	bne.n	800ded8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	3304      	adds	r3, #4
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe f94a 	bl	800c0f4 <uxListRemove>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d115      	bne.n	800de92 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6a:	491f      	ldr	r1, [pc, #124]	; (800dee8 <xTaskPriorityDisinherit+0x108>)
 800de6c:	4613      	mov	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	440b      	add	r3, r1
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10a      	bne.n	800de92 <xTaskPriorityDisinherit+0xb2>
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de80:	2201      	movs	r2, #1
 800de82:	fa02 f303 	lsl.w	r3, r2, r3
 800de86:	43da      	mvns	r2, r3
 800de88:	4b18      	ldr	r3, [pc, #96]	; (800deec <xTaskPriorityDisinherit+0x10c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4013      	ands	r3, r2
 800de8e:	4a17      	ldr	r2, [pc, #92]	; (800deec <xTaskPriorityDisinherit+0x10c>)
 800de90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9e:	f1c3 0207 	rsb	r2, r3, #7
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deaa:	2201      	movs	r2, #1
 800deac:	409a      	lsls	r2, r3
 800deae:	4b0f      	ldr	r3, [pc, #60]	; (800deec <xTaskPriorityDisinherit+0x10c>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	4a0d      	ldr	r2, [pc, #52]	; (800deec <xTaskPriorityDisinherit+0x10c>)
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800debc:	4613      	mov	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4413      	add	r3, r2
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	4a08      	ldr	r2, [pc, #32]	; (800dee8 <xTaskPriorityDisinherit+0x108>)
 800dec6:	441a      	add	r2, r3
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	3304      	adds	r3, #4
 800decc:	4619      	mov	r1, r3
 800dece:	4610      	mov	r0, r2
 800ded0:	f7fe f8b3 	bl	800c03a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ded4:	2301      	movs	r3, #1
 800ded6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ded8:	697b      	ldr	r3, [r7, #20]
	}
 800deda:	4618      	mov	r0, r3
 800dedc:	3718      	adds	r7, #24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	200003a4 	.word	0x200003a4
 800dee8:	200003a8 	.word	0x200003a8
 800deec:	200004ac 	.word	0x200004ac

0800def0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800def0:	b580      	push	{r7, lr}
 800def2:	b088      	sub	sp, #32
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800defe:	2301      	movs	r3, #1
 800df00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 8085 	beq.w	800e014 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10b      	bne.n	800df2a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800df12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df16:	b672      	cpsid	i
 800df18:	f383 8811 	msr	BASEPRI, r3
 800df1c:	f3bf 8f6f 	isb	sy
 800df20:	f3bf 8f4f 	dsb	sy
 800df24:	b662      	cpsie	i
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	e7fe      	b.n	800df28 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d902      	bls.n	800df3a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	61fb      	str	r3, [r7, #28]
 800df38:	e002      	b.n	800df40 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df44:	69fa      	ldr	r2, [r7, #28]
 800df46:	429a      	cmp	r2, r3
 800df48:	d064      	beq.n	800e014 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df4e:	697a      	ldr	r2, [r7, #20]
 800df50:	429a      	cmp	r2, r3
 800df52:	d15f      	bne.n	800e014 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800df54:	4b31      	ldr	r3, [pc, #196]	; (800e01c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	69ba      	ldr	r2, [r7, #24]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d10b      	bne.n	800df76 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800df5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df62:	b672      	cpsid	i
 800df64:	f383 8811 	msr	BASEPRI, r3
 800df68:	f3bf 8f6f 	isb	sy
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	b662      	cpsie	i
 800df72:	60bb      	str	r3, [r7, #8]
 800df74:	e7fe      	b.n	800df74 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	69fa      	ldr	r2, [r7, #28]
 800df80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	699b      	ldr	r3, [r3, #24]
 800df86:	2b00      	cmp	r3, #0
 800df88:	db04      	blt.n	800df94 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	f1c3 0207 	rsb	r2, r3, #7
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	6959      	ldr	r1, [r3, #20]
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	4a1f      	ldr	r2, [pc, #124]	; (800e020 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dfa4:	4413      	add	r3, r2
 800dfa6:	4299      	cmp	r1, r3
 800dfa8:	d134      	bne.n	800e014 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	3304      	adds	r3, #4
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe f8a0 	bl	800c0f4 <uxListRemove>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d115      	bne.n	800dfe6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbe:	4918      	ldr	r1, [pc, #96]	; (800e020 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	4413      	add	r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	440b      	add	r3, r1
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10a      	bne.n	800dfe6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	fa02 f303 	lsl.w	r3, r2, r3
 800dfda:	43da      	mvns	r2, r3
 800dfdc:	4b11      	ldr	r3, [pc, #68]	; (800e024 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	4a10      	ldr	r2, [pc, #64]	; (800e024 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dfe4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfea:	2201      	movs	r2, #1
 800dfec:	409a      	lsls	r2, r3
 800dfee:	4b0d      	ldr	r3, [pc, #52]	; (800e024 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	4a0b      	ldr	r2, [pc, #44]	; (800e024 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dff6:	6013      	str	r3, [r2, #0]
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffc:	4613      	mov	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4a06      	ldr	r2, [pc, #24]	; (800e020 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e006:	441a      	add	r2, r3
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	3304      	adds	r3, #4
 800e00c:	4619      	mov	r1, r3
 800e00e:	4610      	mov	r0, r2
 800e010:	f7fe f813 	bl	800c03a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e014:	bf00      	nop
 800e016:	3720      	adds	r7, #32
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	200003a4 	.word	0x200003a4
 800e020:	200003a8 	.word	0x200003a8
 800e024:	200004ac 	.word	0x200004ac

0800e028 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e028:	b480      	push	{r7}
 800e02a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e02c:	4b07      	ldr	r3, [pc, #28]	; (800e04c <pvTaskIncrementMutexHeldCount+0x24>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d004      	beq.n	800e03e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e034:	4b05      	ldr	r3, [pc, #20]	; (800e04c <pvTaskIncrementMutexHeldCount+0x24>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e03a:	3201      	adds	r2, #1
 800e03c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e03e:	4b03      	ldr	r3, [pc, #12]	; (800e04c <pvTaskIncrementMutexHeldCount+0x24>)
 800e040:	681b      	ldr	r3, [r3, #0]
	}
 800e042:	4618      	mov	r0, r3
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr
 800e04c:	200003a4 	.word	0x200003a4

0800e050 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e05a:	4b29      	ldr	r3, [pc, #164]	; (800e100 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e060:	4b28      	ldr	r3, [pc, #160]	; (800e104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3304      	adds	r3, #4
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe f844 	bl	800c0f4 <uxListRemove>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10b      	bne.n	800e08a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e072:	4b24      	ldr	r3, [pc, #144]	; (800e104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e078:	2201      	movs	r2, #1
 800e07a:	fa02 f303 	lsl.w	r3, r2, r3
 800e07e:	43da      	mvns	r2, r3
 800e080:	4b21      	ldr	r3, [pc, #132]	; (800e108 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4013      	ands	r3, r2
 800e086:	4a20      	ldr	r2, [pc, #128]	; (800e108 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e088:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e090:	d10a      	bne.n	800e0a8 <prvAddCurrentTaskToDelayedList+0x58>
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d007      	beq.n	800e0a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e098:	4b1a      	ldr	r3, [pc, #104]	; (800e104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3304      	adds	r3, #4
 800e09e:	4619      	mov	r1, r3
 800e0a0:	481a      	ldr	r0, [pc, #104]	; (800e10c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e0a2:	f7fd ffca 	bl	800c03a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e0a6:	e026      	b.n	800e0f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e0b0:	4b14      	ldr	r3, [pc, #80]	; (800e104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e0b8:	68ba      	ldr	r2, [r7, #8]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d209      	bcs.n	800e0d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0c0:	4b13      	ldr	r3, [pc, #76]	; (800e110 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	4b0f      	ldr	r3, [pc, #60]	; (800e104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	f7fd ffd8 	bl	800c082 <vListInsert>
}
 800e0d2:	e010      	b.n	800e0f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0d4:	4b0f      	ldr	r3, [pc, #60]	; (800e114 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	4b0a      	ldr	r3, [pc, #40]	; (800e104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	4619      	mov	r1, r3
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	f7fd ffce 	bl	800c082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e0e6:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d202      	bcs.n	800e0f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e0f0:	4a09      	ldr	r2, [pc, #36]	; (800e118 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	6013      	str	r3, [r2, #0]
}
 800e0f6:	bf00      	nop
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	200004a8 	.word	0x200004a8
 800e104:	200003a4 	.word	0x200003a4
 800e108:	200004ac 	.word	0x200004ac
 800e10c:	20000490 	.word	0x20000490
 800e110:	20000460 	.word	0x20000460
 800e114:	2000045c 	.word	0x2000045c
 800e118:	200004c4 	.word	0x200004c4

0800e11c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3b04      	subs	r3, #4
 800e12c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3b04      	subs	r3, #4
 800e13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	f023 0201 	bic.w	r2, r3, #1
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3b04      	subs	r3, #4
 800e14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e14c:	4a0c      	ldr	r2, [pc, #48]	; (800e180 <pxPortInitialiseStack+0x64>)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3b14      	subs	r3, #20
 800e156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	3b04      	subs	r3, #4
 800e162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f06f 0202 	mvn.w	r2, #2
 800e16a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	3b20      	subs	r3, #32
 800e170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e172:	68fb      	ldr	r3, [r7, #12]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3714      	adds	r7, #20
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr
 800e180:	0800e185 	.word	0x0800e185

0800e184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e18e:	4b13      	ldr	r3, [pc, #76]	; (800e1dc <prvTaskExitError+0x58>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e196:	d00b      	beq.n	800e1b0 <prvTaskExitError+0x2c>
 800e198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19c:	b672      	cpsid	i
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
 800e1aa:	b662      	cpsie	i
 800e1ac:	60fb      	str	r3, [r7, #12]
 800e1ae:	e7fe      	b.n	800e1ae <prvTaskExitError+0x2a>
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	b672      	cpsid	i
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	b662      	cpsie	i
 800e1c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e1c6:	bf00      	nop
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d0fc      	beq.n	800e1c8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e1ce:	bf00      	nop
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	20000038 	.word	0x20000038

0800e1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1e0:	4b07      	ldr	r3, [pc, #28]	; (800e200 <pxCurrentTCBConst2>)
 800e1e2:	6819      	ldr	r1, [r3, #0]
 800e1e4:	6808      	ldr	r0, [r1, #0]
 800e1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ea:	f380 8809 	msr	PSP, r0
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f04f 0000 	mov.w	r0, #0
 800e1f6:	f380 8811 	msr	BASEPRI, r0
 800e1fa:	4770      	bx	lr
 800e1fc:	f3af 8000 	nop.w

0800e200 <pxCurrentTCBConst2>:
 800e200:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop

0800e208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e208:	4808      	ldr	r0, [pc, #32]	; (800e22c <prvPortStartFirstTask+0x24>)
 800e20a:	6800      	ldr	r0, [r0, #0]
 800e20c:	6800      	ldr	r0, [r0, #0]
 800e20e:	f380 8808 	msr	MSP, r0
 800e212:	f04f 0000 	mov.w	r0, #0
 800e216:	f380 8814 	msr	CONTROL, r0
 800e21a:	b662      	cpsie	i
 800e21c:	b661      	cpsie	f
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	df00      	svc	0
 800e228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e22a:	bf00      	nop
 800e22c:	e000ed08 	.word	0xe000ed08

0800e230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e236:	4b36      	ldr	r3, [pc, #216]	; (800e310 <xPortStartScheduler+0xe0>)
 800e238:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	22ff      	movs	r2, #255	; 0xff
 800e246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e250:	78fb      	ldrb	r3, [r7, #3]
 800e252:	b2db      	uxtb	r3, r3
 800e254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	4b2e      	ldr	r3, [pc, #184]	; (800e314 <xPortStartScheduler+0xe4>)
 800e25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e25e:	4b2e      	ldr	r3, [pc, #184]	; (800e318 <xPortStartScheduler+0xe8>)
 800e260:	2207      	movs	r2, #7
 800e262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e264:	e009      	b.n	800e27a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e266:	4b2c      	ldr	r3, [pc, #176]	; (800e318 <xPortStartScheduler+0xe8>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3b01      	subs	r3, #1
 800e26c:	4a2a      	ldr	r2, [pc, #168]	; (800e318 <xPortStartScheduler+0xe8>)
 800e26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	b2db      	uxtb	r3, r3
 800e278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e27a:	78fb      	ldrb	r3, [r7, #3]
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e282:	2b80      	cmp	r3, #128	; 0x80
 800e284:	d0ef      	beq.n	800e266 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e286:	4b24      	ldr	r3, [pc, #144]	; (800e318 <xPortStartScheduler+0xe8>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f1c3 0307 	rsb	r3, r3, #7
 800e28e:	2b04      	cmp	r3, #4
 800e290:	d00b      	beq.n	800e2aa <xPortStartScheduler+0x7a>
 800e292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e296:	b672      	cpsid	i
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	b662      	cpsie	i
 800e2a6:	60bb      	str	r3, [r7, #8]
 800e2a8:	e7fe      	b.n	800e2a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2aa:	4b1b      	ldr	r3, [pc, #108]	; (800e318 <xPortStartScheduler+0xe8>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	021b      	lsls	r3, r3, #8
 800e2b0:	4a19      	ldr	r2, [pc, #100]	; (800e318 <xPortStartScheduler+0xe8>)
 800e2b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2b4:	4b18      	ldr	r3, [pc, #96]	; (800e318 <xPortStartScheduler+0xe8>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2bc:	4a16      	ldr	r2, [pc, #88]	; (800e318 <xPortStartScheduler+0xe8>)
 800e2be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2c8:	4b14      	ldr	r3, [pc, #80]	; (800e31c <xPortStartScheduler+0xec>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a13      	ldr	r2, [pc, #76]	; (800e31c <xPortStartScheduler+0xec>)
 800e2ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2d4:	4b11      	ldr	r3, [pc, #68]	; (800e31c <xPortStartScheduler+0xec>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a10      	ldr	r2, [pc, #64]	; (800e31c <xPortStartScheduler+0xec>)
 800e2da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2e0:	f000 f8d4 	bl	800e48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2e4:	4b0e      	ldr	r3, [pc, #56]	; (800e320 <xPortStartScheduler+0xf0>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2ea:	f000 f8f3 	bl	800e4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2ee:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <xPortStartScheduler+0xf4>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a0c      	ldr	r2, [pc, #48]	; (800e324 <xPortStartScheduler+0xf4>)
 800e2f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e2f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2fa:	f7ff ff85 	bl	800e208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e2fe:	f7ff fa69 	bl	800d7d4 <vTaskSwitchContext>
	prvTaskExitError();
 800e302:	f7ff ff3f 	bl	800e184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	e000e400 	.word	0xe000e400
 800e314:	200004d0 	.word	0x200004d0
 800e318:	200004d4 	.word	0x200004d4
 800e31c:	e000ed20 	.word	0xe000ed20
 800e320:	20000038 	.word	0x20000038
 800e324:	e000ef34 	.word	0xe000ef34

0800e328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	b672      	cpsid	i
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	b662      	cpsie	i
 800e342:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e344:	4b0f      	ldr	r3, [pc, #60]	; (800e384 <vPortEnterCritical+0x5c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3301      	adds	r3, #1
 800e34a:	4a0e      	ldr	r2, [pc, #56]	; (800e384 <vPortEnterCritical+0x5c>)
 800e34c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e34e:	4b0d      	ldr	r3, [pc, #52]	; (800e384 <vPortEnterCritical+0x5c>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d110      	bne.n	800e378 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e356:	4b0c      	ldr	r3, [pc, #48]	; (800e388 <vPortEnterCritical+0x60>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00b      	beq.n	800e378 <vPortEnterCritical+0x50>
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	b672      	cpsid	i
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	b662      	cpsie	i
 800e374:	603b      	str	r3, [r7, #0]
 800e376:	e7fe      	b.n	800e376 <vPortEnterCritical+0x4e>
	}
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	20000038 	.word	0x20000038
 800e388:	e000ed04 	.word	0xe000ed04

0800e38c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e392:	4b12      	ldr	r3, [pc, #72]	; (800e3dc <vPortExitCritical+0x50>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10b      	bne.n	800e3b2 <vPortExitCritical+0x26>
 800e39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39e:	b672      	cpsid	i
 800e3a0:	f383 8811 	msr	BASEPRI, r3
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	b662      	cpsie	i
 800e3ae:	607b      	str	r3, [r7, #4]
 800e3b0:	e7fe      	b.n	800e3b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e3b2:	4b0a      	ldr	r3, [pc, #40]	; (800e3dc <vPortExitCritical+0x50>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	4a08      	ldr	r2, [pc, #32]	; (800e3dc <vPortExitCritical+0x50>)
 800e3ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3bc:	4b07      	ldr	r3, [pc, #28]	; (800e3dc <vPortExitCritical+0x50>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d104      	bne.n	800e3ce <vPortExitCritical+0x42>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3ce:	bf00      	nop
 800e3d0:	370c      	adds	r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	20000038 	.word	0x20000038

0800e3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3e0:	f3ef 8009 	mrs	r0, PSP
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	4b15      	ldr	r3, [pc, #84]	; (800e440 <pxCurrentTCBConst>)
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	f01e 0f10 	tst.w	lr, #16
 800e3f0:	bf08      	it	eq
 800e3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fa:	6010      	str	r0, [r2, #0]
 800e3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e404:	b672      	cpsid	i
 800e406:	f380 8811 	msr	BASEPRI, r0
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	b662      	cpsie	i
 800e414:	f7ff f9de 	bl	800d7d4 <vTaskSwitchContext>
 800e418:	f04f 0000 	mov.w	r0, #0
 800e41c:	f380 8811 	msr	BASEPRI, r0
 800e420:	bc09      	pop	{r0, r3}
 800e422:	6819      	ldr	r1, [r3, #0]
 800e424:	6808      	ldr	r0, [r1, #0]
 800e426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42a:	f01e 0f10 	tst.w	lr, #16
 800e42e:	bf08      	it	eq
 800e430:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e434:	f380 8809 	msr	PSP, r0
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop

0800e440 <pxCurrentTCBConst>:
 800e440:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e444:	bf00      	nop
 800e446:	bf00      	nop

0800e448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	b672      	cpsid	i
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	b662      	cpsie	i
 800e462:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e464:	f7ff f8fc 	bl	800d660 <xTaskIncrementTick>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e46e:	4b06      	ldr	r3, [pc, #24]	; (800e488 <SysTick_Handler+0x40>)
 800e470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	2300      	movs	r3, #0
 800e478:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	e000ed04 	.word	0xe000ed04

0800e48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e48c:	b480      	push	{r7}
 800e48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e490:	4b0b      	ldr	r3, [pc, #44]	; (800e4c0 <vPortSetupTimerInterrupt+0x34>)
 800e492:	2200      	movs	r2, #0
 800e494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e496:	4b0b      	ldr	r3, [pc, #44]	; (800e4c4 <vPortSetupTimerInterrupt+0x38>)
 800e498:	2200      	movs	r2, #0
 800e49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e49c:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <vPortSetupTimerInterrupt+0x3c>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a0a      	ldr	r2, [pc, #40]	; (800e4cc <vPortSetupTimerInterrupt+0x40>)
 800e4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4a6:	099b      	lsrs	r3, r3, #6
 800e4a8:	4a09      	ldr	r2, [pc, #36]	; (800e4d0 <vPortSetupTimerInterrupt+0x44>)
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4ae:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <vPortSetupTimerInterrupt+0x34>)
 800e4b0:	2207      	movs	r2, #7
 800e4b2:	601a      	str	r2, [r3, #0]
}
 800e4b4:	bf00      	nop
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	e000e010 	.word	0xe000e010
 800e4c4:	e000e018 	.word	0xe000e018
 800e4c8:	2000002c 	.word	0x2000002c
 800e4cc:	10624dd3 	.word	0x10624dd3
 800e4d0:	e000e014 	.word	0xe000e014

0800e4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e4e4 <vPortEnableVFP+0x10>
 800e4d8:	6801      	ldr	r1, [r0, #0]
 800e4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4de:	6001      	str	r1, [r0, #0]
 800e4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4e2:	bf00      	nop
 800e4e4:	e000ed88 	.word	0xe000ed88

0800e4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4ee:	f3ef 8305 	mrs	r3, IPSR
 800e4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2b0f      	cmp	r3, #15
 800e4f8:	d915      	bls.n	800e526 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e4fa:	4a18      	ldr	r2, [pc, #96]	; (800e55c <vPortValidateInterruptPriority+0x74>)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4413      	add	r3, r2
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e504:	4b16      	ldr	r3, [pc, #88]	; (800e560 <vPortValidateInterruptPriority+0x78>)
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	7afa      	ldrb	r2, [r7, #11]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d20b      	bcs.n	800e526 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e512:	b672      	cpsid	i
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	b662      	cpsie	i
 800e522:	607b      	str	r3, [r7, #4]
 800e524:	e7fe      	b.n	800e524 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e526:	4b0f      	ldr	r3, [pc, #60]	; (800e564 <vPortValidateInterruptPriority+0x7c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e52e:	4b0e      	ldr	r3, [pc, #56]	; (800e568 <vPortValidateInterruptPriority+0x80>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	429a      	cmp	r2, r3
 800e534:	d90b      	bls.n	800e54e <vPortValidateInterruptPriority+0x66>
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	b672      	cpsid	i
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	b662      	cpsie	i
 800e54a:	603b      	str	r3, [r7, #0]
 800e54c:	e7fe      	b.n	800e54c <vPortValidateInterruptPriority+0x64>
	}
 800e54e:	bf00      	nop
 800e550:	3714      	adds	r7, #20
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop
 800e55c:	e000e3f0 	.word	0xe000e3f0
 800e560:	200004d0 	.word	0x200004d0
 800e564:	e000ed0c 	.word	0xe000ed0c
 800e568:	200004d4 	.word	0x200004d4

0800e56c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b08a      	sub	sp, #40	; 0x28
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e574:	2300      	movs	r3, #0
 800e576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e578:	f7fe ffa4 	bl	800d4c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e57c:	4b5c      	ldr	r3, [pc, #368]	; (800e6f0 <pvPortMalloc+0x184>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d101      	bne.n	800e588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e584:	f000 f91a 	bl	800e7bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e588:	4b5a      	ldr	r3, [pc, #360]	; (800e6f4 <pvPortMalloc+0x188>)
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4013      	ands	r3, r2
 800e590:	2b00      	cmp	r3, #0
 800e592:	f040 8090 	bne.w	800e6b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d01e      	beq.n	800e5da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e59c:	2208      	movs	r2, #8
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f003 0307 	and.w	r3, r3, #7
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d015      	beq.n	800e5da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f023 0307 	bic.w	r3, r3, #7
 800e5b4:	3308      	adds	r3, #8
 800e5b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f003 0307 	and.w	r3, r3, #7
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00b      	beq.n	800e5da <pvPortMalloc+0x6e>
 800e5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c6:	b672      	cpsid	i
 800e5c8:	f383 8811 	msr	BASEPRI, r3
 800e5cc:	f3bf 8f6f 	isb	sy
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	b662      	cpsie	i
 800e5d6:	617b      	str	r3, [r7, #20]
 800e5d8:	e7fe      	b.n	800e5d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d06a      	beq.n	800e6b6 <pvPortMalloc+0x14a>
 800e5e0:	4b45      	ldr	r3, [pc, #276]	; (800e6f8 <pvPortMalloc+0x18c>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d865      	bhi.n	800e6b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5ea:	4b44      	ldr	r3, [pc, #272]	; (800e6fc <pvPortMalloc+0x190>)
 800e5ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e5ee:	4b43      	ldr	r3, [pc, #268]	; (800e6fc <pvPortMalloc+0x190>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5f4:	e004      	b.n	800e600 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	429a      	cmp	r2, r3
 800e608:	d903      	bls.n	800e612 <pvPortMalloc+0xa6>
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1f1      	bne.n	800e5f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e612:	4b37      	ldr	r3, [pc, #220]	; (800e6f0 <pvPortMalloc+0x184>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e618:	429a      	cmp	r2, r3
 800e61a:	d04c      	beq.n	800e6b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2208      	movs	r2, #8
 800e622:	4413      	add	r3, r2
 800e624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	1ad2      	subs	r2, r2, r3
 800e636:	2308      	movs	r3, #8
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d920      	bls.n	800e680 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4413      	add	r3, r2
 800e644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	f003 0307 	and.w	r3, r3, #7
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00b      	beq.n	800e668 <pvPortMalloc+0xfc>
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	b672      	cpsid	i
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	b662      	cpsie	i
 800e664:	613b      	str	r3, [r7, #16]
 800e666:	e7fe      	b.n	800e666 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66a:	685a      	ldr	r2, [r3, #4]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	1ad2      	subs	r2, r2, r3
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e67a:	69b8      	ldr	r0, [r7, #24]
 800e67c:	f000 f900 	bl	800e880 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e680:	4b1d      	ldr	r3, [pc, #116]	; (800e6f8 <pvPortMalloc+0x18c>)
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	4a1b      	ldr	r2, [pc, #108]	; (800e6f8 <pvPortMalloc+0x18c>)
 800e68c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e68e:	4b1a      	ldr	r3, [pc, #104]	; (800e6f8 <pvPortMalloc+0x18c>)
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	4b1b      	ldr	r3, [pc, #108]	; (800e700 <pvPortMalloc+0x194>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	429a      	cmp	r2, r3
 800e698:	d203      	bcs.n	800e6a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e69a:	4b17      	ldr	r3, [pc, #92]	; (800e6f8 <pvPortMalloc+0x18c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a18      	ldr	r2, [pc, #96]	; (800e700 <pvPortMalloc+0x194>)
 800e6a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	685a      	ldr	r2, [r3, #4]
 800e6a6:	4b13      	ldr	r3, [pc, #76]	; (800e6f4 <pvPortMalloc+0x188>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	431a      	orrs	r2, r3
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e6b6:	f7fe ff13 	bl	800d4e0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e6c0:	f7f2 f964 	bl	800098c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	f003 0307 	and.w	r3, r3, #7
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00b      	beq.n	800e6e6 <pvPortMalloc+0x17a>
 800e6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d2:	b672      	cpsid	i
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	b662      	cpsie	i
 800e6e2:	60fb      	str	r3, [r7, #12]
 800e6e4:	e7fe      	b.n	800e6e4 <pvPortMalloc+0x178>
	return pvReturn;
 800e6e6:	69fb      	ldr	r3, [r7, #28]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3728      	adds	r7, #40	; 0x28
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	200084e0 	.word	0x200084e0
 800e6f4:	200084ec 	.word	0x200084ec
 800e6f8:	200084e4 	.word	0x200084e4
 800e6fc:	200084d8 	.word	0x200084d8
 800e700:	200084e8 	.word	0x200084e8

0800e704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d04a      	beq.n	800e7ac <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e716:	2308      	movs	r3, #8
 800e718:	425b      	negs	r3, r3
 800e71a:	697a      	ldr	r2, [r7, #20]
 800e71c:	4413      	add	r3, r2
 800e71e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	4b22      	ldr	r3, [pc, #136]	; (800e7b4 <vPortFree+0xb0>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4013      	ands	r3, r2
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10b      	bne.n	800e74a <vPortFree+0x46>
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	b672      	cpsid	i
 800e738:	f383 8811 	msr	BASEPRI, r3
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	f3bf 8f4f 	dsb	sy
 800e744:	b662      	cpsie	i
 800e746:	60fb      	str	r3, [r7, #12]
 800e748:	e7fe      	b.n	800e748 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00b      	beq.n	800e76a <vPortFree+0x66>
 800e752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e756:	b672      	cpsid	i
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	b662      	cpsie	i
 800e766:	60bb      	str	r3, [r7, #8]
 800e768:	e7fe      	b.n	800e768 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	4b11      	ldr	r3, [pc, #68]	; (800e7b4 <vPortFree+0xb0>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4013      	ands	r3, r2
 800e774:	2b00      	cmp	r3, #0
 800e776:	d019      	beq.n	800e7ac <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d115      	bne.n	800e7ac <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	4b0b      	ldr	r3, [pc, #44]	; (800e7b4 <vPortFree+0xb0>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	43db      	mvns	r3, r3
 800e78a:	401a      	ands	r2, r3
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e790:	f7fe fe98 	bl	800d4c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	4b07      	ldr	r3, [pc, #28]	; (800e7b8 <vPortFree+0xb4>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4413      	add	r3, r2
 800e79e:	4a06      	ldr	r2, [pc, #24]	; (800e7b8 <vPortFree+0xb4>)
 800e7a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7a2:	6938      	ldr	r0, [r7, #16]
 800e7a4:	f000 f86c 	bl	800e880 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e7a8:	f7fe fe9a 	bl	800d4e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7ac:	bf00      	nop
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	200084ec 	.word	0x200084ec
 800e7b8:	200084e4 	.word	0x200084e4

0800e7bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7c8:	4b27      	ldr	r3, [pc, #156]	; (800e868 <prvHeapInit+0xac>)
 800e7ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f003 0307 	and.w	r3, r3, #7
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00c      	beq.n	800e7f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3307      	adds	r3, #7
 800e7da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f023 0307 	bic.w	r3, r3, #7
 800e7e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	4a1f      	ldr	r2, [pc, #124]	; (800e868 <prvHeapInit+0xac>)
 800e7ec:	4413      	add	r3, r2
 800e7ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e7f4:	4a1d      	ldr	r2, [pc, #116]	; (800e86c <prvHeapInit+0xb0>)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e7fa:	4b1c      	ldr	r3, [pc, #112]	; (800e86c <prvHeapInit+0xb0>)
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	68ba      	ldr	r2, [r7, #8]
 800e804:	4413      	add	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e808:	2208      	movs	r2, #8
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	1a9b      	subs	r3, r3, r2
 800e80e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f023 0307 	bic.w	r3, r3, #7
 800e816:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	4a15      	ldr	r2, [pc, #84]	; (800e870 <prvHeapInit+0xb4>)
 800e81c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e81e:	4b14      	ldr	r3, [pc, #80]	; (800e870 <prvHeapInit+0xb4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2200      	movs	r2, #0
 800e824:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e826:	4b12      	ldr	r3, [pc, #72]	; (800e870 <prvHeapInit+0xb4>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	1ad2      	subs	r2, r2, r3
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e83c:	4b0c      	ldr	r3, [pc, #48]	; (800e870 <prvHeapInit+0xb4>)
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	4a0a      	ldr	r2, [pc, #40]	; (800e874 <prvHeapInit+0xb8>)
 800e84a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	4a09      	ldr	r2, [pc, #36]	; (800e878 <prvHeapInit+0xbc>)
 800e852:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e854:	4b09      	ldr	r3, [pc, #36]	; (800e87c <prvHeapInit+0xc0>)
 800e856:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e85a:	601a      	str	r2, [r3, #0]
}
 800e85c:	bf00      	nop
 800e85e:	3714      	adds	r7, #20
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr
 800e868:	200004d8 	.word	0x200004d8
 800e86c:	200084d8 	.word	0x200084d8
 800e870:	200084e0 	.word	0x200084e0
 800e874:	200084e8 	.word	0x200084e8
 800e878:	200084e4 	.word	0x200084e4
 800e87c:	200084ec 	.word	0x200084ec

0800e880 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e880:	b480      	push	{r7}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e888:	4b28      	ldr	r3, [pc, #160]	; (800e92c <prvInsertBlockIntoFreeList+0xac>)
 800e88a:	60fb      	str	r3, [r7, #12]
 800e88c:	e002      	b.n	800e894 <prvInsertBlockIntoFreeList+0x14>
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	60fb      	str	r3, [r7, #12]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d8f7      	bhi.n	800e88e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d108      	bne.n	800e8c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	685a      	ldr	r2, [r3, #4]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	441a      	add	r2, r3
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	68ba      	ldr	r2, [r7, #8]
 800e8cc:	441a      	add	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d118      	bne.n	800e908 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	4b15      	ldr	r3, [pc, #84]	; (800e930 <prvInsertBlockIntoFreeList+0xb0>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d00d      	beq.n	800e8fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	441a      	add	r2, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	e008      	b.n	800e910 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e8fe:	4b0c      	ldr	r3, [pc, #48]	; (800e930 <prvInsertBlockIntoFreeList+0xb0>)
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	e003      	b.n	800e910 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	429a      	cmp	r2, r3
 800e916:	d002      	beq.n	800e91e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e91e:	bf00      	nop
 800e920:	3714      	adds	r7, #20
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	200084d8 	.word	0x200084d8
 800e930:	200084e0 	.word	0x200084e0

0800e934 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08c      	sub	sp, #48	; 0x30
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4a51      	ldr	r2, [pc, #324]	; (800ea84 <I2Cx_MspInit+0x150>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d14d      	bne.n	800e9e0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800e944:	4b50      	ldr	r3, [pc, #320]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e948:	4a4f      	ldr	r2, [pc, #316]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e94a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e94e:	6313      	str	r3, [r2, #48]	; 0x30
 800e950:	4b4d      	ldr	r3, [pc, #308]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e958:	61bb      	str	r3, [r7, #24]
 800e95a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800e95c:	2380      	movs	r3, #128	; 0x80
 800e95e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800e960:	2312      	movs	r3, #18
 800e962:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800e964:	2300      	movs	r3, #0
 800e966:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800e968:	2302      	movs	r3, #2
 800e96a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800e96c:	2304      	movs	r3, #4
 800e96e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800e970:	f107 031c 	add.w	r3, r7, #28
 800e974:	4619      	mov	r1, r3
 800e976:	4845      	ldr	r0, [pc, #276]	; (800ea8c <I2Cx_MspInit+0x158>)
 800e978:	f7f5 fd3c 	bl	80043f4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800e97c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800e982:	f107 031c 	add.w	r3, r7, #28
 800e986:	4619      	mov	r1, r3
 800e988:	4840      	ldr	r0, [pc, #256]	; (800ea8c <I2Cx_MspInit+0x158>)
 800e98a:	f7f5 fd33 	bl	80043f4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800e98e:	4b3e      	ldr	r3, [pc, #248]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e992:	4a3d      	ldr	r2, [pc, #244]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e994:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e998:	6413      	str	r3, [r2, #64]	; 0x40
 800e99a:	4b3b      	ldr	r3, [pc, #236]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e99e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9a2:	617b      	str	r3, [r7, #20]
 800e9a4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800e9a6:	4b38      	ldr	r3, [pc, #224]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e9a8:	6a1b      	ldr	r3, [r3, #32]
 800e9aa:	4a37      	ldr	r2, [pc, #220]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e9ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e9b0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800e9b2:	4b35      	ldr	r3, [pc, #212]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e9b4:	6a1b      	ldr	r3, [r3, #32]
 800e9b6:	4a34      	ldr	r2, [pc, #208]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e9b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e9bc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800e9be:	2200      	movs	r2, #0
 800e9c0:	210f      	movs	r1, #15
 800e9c2:	2048      	movs	r0, #72	; 0x48
 800e9c4:	f7f4 fee8 	bl	8003798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800e9c8:	2048      	movs	r0, #72	; 0x48
 800e9ca:	f7f4 ff01 	bl	80037d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	210f      	movs	r1, #15
 800e9d2:	2049      	movs	r0, #73	; 0x49
 800e9d4:	f7f4 fee0 	bl	8003798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800e9d8:	2049      	movs	r0, #73	; 0x49
 800e9da:	f7f4 fef9 	bl	80037d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800e9de:	e04d      	b.n	800ea7c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800e9e0:	4b29      	ldr	r3, [pc, #164]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e4:	4a28      	ldr	r2, [pc, #160]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e9e6:	f043 0302 	orr.w	r3, r3, #2
 800e9ea:	6313      	str	r3, [r2, #48]	; 0x30
 800e9ec:	4b26      	ldr	r3, [pc, #152]	; (800ea88 <I2Cx_MspInit+0x154>)
 800e9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9f0:	f003 0302 	and.w	r3, r3, #2
 800e9f4:	613b      	str	r3, [r7, #16]
 800e9f6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800e9f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9fc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800e9fe:	2312      	movs	r3, #18
 800ea00:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800ea06:	2302      	movs	r3, #2
 800ea08:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800ea0a:	2304      	movs	r3, #4
 800ea0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ea0e:	f107 031c 	add.w	r3, r7, #28
 800ea12:	4619      	mov	r1, r3
 800ea14:	481e      	ldr	r0, [pc, #120]	; (800ea90 <I2Cx_MspInit+0x15c>)
 800ea16:	f7f5 fced 	bl	80043f4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800ea1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ea20:	f107 031c 	add.w	r3, r7, #28
 800ea24:	4619      	mov	r1, r3
 800ea26:	481a      	ldr	r0, [pc, #104]	; (800ea90 <I2Cx_MspInit+0x15c>)
 800ea28:	f7f5 fce4 	bl	80043f4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800ea2c:	4b16      	ldr	r3, [pc, #88]	; (800ea88 <I2Cx_MspInit+0x154>)
 800ea2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea30:	4a15      	ldr	r2, [pc, #84]	; (800ea88 <I2Cx_MspInit+0x154>)
 800ea32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ea36:	6413      	str	r3, [r2, #64]	; 0x40
 800ea38:	4b13      	ldr	r3, [pc, #76]	; (800ea88 <I2Cx_MspInit+0x154>)
 800ea3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ea40:	60fb      	str	r3, [r7, #12]
 800ea42:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800ea44:	4b10      	ldr	r3, [pc, #64]	; (800ea88 <I2Cx_MspInit+0x154>)
 800ea46:	6a1b      	ldr	r3, [r3, #32]
 800ea48:	4a0f      	ldr	r2, [pc, #60]	; (800ea88 <I2Cx_MspInit+0x154>)
 800ea4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ea4e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800ea50:	4b0d      	ldr	r3, [pc, #52]	; (800ea88 <I2Cx_MspInit+0x154>)
 800ea52:	6a1b      	ldr	r3, [r3, #32]
 800ea54:	4a0c      	ldr	r2, [pc, #48]	; (800ea88 <I2Cx_MspInit+0x154>)
 800ea56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea5a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	210f      	movs	r1, #15
 800ea60:	201f      	movs	r0, #31
 800ea62:	f7f4 fe99 	bl	8003798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800ea66:	201f      	movs	r0, #31
 800ea68:	f7f4 feb2 	bl	80037d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	210f      	movs	r1, #15
 800ea70:	2020      	movs	r0, #32
 800ea72:	f7f4 fe91 	bl	8003798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800ea76:	2020      	movs	r0, #32
 800ea78:	f7f4 feaa 	bl	80037d0 <HAL_NVIC_EnableIRQ>
}
 800ea7c:	bf00      	nop
 800ea7e:	3730      	adds	r7, #48	; 0x30
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	200084f0 	.word	0x200084f0
 800ea88:	40023800 	.word	0x40023800
 800ea8c:	40021c00 	.word	0x40021c00
 800ea90:	40020400 	.word	0x40020400

0800ea94 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7f6 fa7d 	bl	8004f9c <HAL_I2C_GetState>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d125      	bne.n	800eaf4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4a14      	ldr	r2, [pc, #80]	; (800eafc <I2Cx_Init+0x68>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d103      	bne.n	800eab8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4a13      	ldr	r2, [pc, #76]	; (800eb00 <I2Cx_Init+0x6c>)
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	e002      	b.n	800eabe <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4a12      	ldr	r2, [pc, #72]	; (800eb04 <I2Cx_Init+0x70>)
 800eabc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a11      	ldr	r2, [pc, #68]	; (800eb08 <I2Cx_Init+0x74>)
 800eac2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2200      	movs	r2, #0
 800eae6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff ff23 	bl	800e934 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7f5 ff66 	bl	80049c0 <HAL_I2C_Init>
  }
}
 800eaf4:	bf00      	nop
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	200084f0 	.word	0x200084f0
 800eb00:	40005c00 	.word	0x40005c00
 800eb04:	40005400 	.word	0x40005400
 800eb08:	40912732 	.word	0x40912732

0800eb0c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	; 0x28
 800eb10:	af04      	add	r7, sp, #16
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	4608      	mov	r0, r1
 800eb16:	4611      	mov	r1, r2
 800eb18:	461a      	mov	r2, r3
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	72fb      	strb	r3, [r7, #11]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	813b      	strh	r3, [r7, #8]
 800eb22:	4613      	mov	r3, r2
 800eb24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800eb2a:	7afb      	ldrb	r3, [r7, #11]
 800eb2c:	b299      	uxth	r1, r3
 800eb2e:	88f8      	ldrh	r0, [r7, #6]
 800eb30:	893a      	ldrh	r2, [r7, #8]
 800eb32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb36:	9302      	str	r3, [sp, #8]
 800eb38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb3a:	9301      	str	r3, [sp, #4]
 800eb3c:	6a3b      	ldr	r3, [r7, #32]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	4603      	mov	r3, r0
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f7f6 f910 	bl	8004d68 <HAL_I2C_Mem_Read>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800eb4c:	7dfb      	ldrb	r3, [r7, #23]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d004      	beq.n	800eb5c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800eb52:	7afb      	ldrb	r3, [r7, #11]
 800eb54:	4619      	mov	r1, r3
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f000 f832 	bl	800ebc0 <I2Cx_Error>
  }
  return status;    
 800eb5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3718      	adds	r7, #24
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b08a      	sub	sp, #40	; 0x28
 800eb6a:	af04      	add	r7, sp, #16
 800eb6c:	60f8      	str	r0, [r7, #12]
 800eb6e:	4608      	mov	r0, r1
 800eb70:	4611      	mov	r1, r2
 800eb72:	461a      	mov	r2, r3
 800eb74:	4603      	mov	r3, r0
 800eb76:	72fb      	strb	r3, [r7, #11]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	813b      	strh	r3, [r7, #8]
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800eb80:	2300      	movs	r3, #0
 800eb82:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800eb84:	7afb      	ldrb	r3, [r7, #11]
 800eb86:	b299      	uxth	r1, r3
 800eb88:	88f8      	ldrh	r0, [r7, #6]
 800eb8a:	893a      	ldrh	r2, [r7, #8]
 800eb8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb90:	9302      	str	r3, [sp, #8]
 800eb92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	6a3b      	ldr	r3, [r7, #32]
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f7f5 ffcf 	bl	8004b40 <HAL_I2C_Mem_Write>
 800eba2:	4603      	mov	r3, r0
 800eba4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d004      	beq.n	800ebb6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800ebac:	7afb      	ldrb	r3, [r7, #11]
 800ebae:	4619      	mov	r1, r3
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f000 f805 	bl	800ebc0 <I2Cx_Error>
  }
  return status;
 800ebb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3718      	adds	r7, #24
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7f5 ff87 	bl	8004ae0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7ff ff5e 	bl	800ea94 <I2Cx_Init>
}
 800ebd8:	bf00      	nop
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ebe4:	4802      	ldr	r0, [pc, #8]	; (800ebf0 <TS_IO_Init+0x10>)
 800ebe6:	f7ff ff55 	bl	800ea94 <I2Cx_Init>
}
 800ebea:	bf00      	nop
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	200084f0 	.word	0x200084f0

0800ebf4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af02      	add	r7, sp, #8
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	71fb      	strb	r3, [r7, #7]
 800ebfe:	460b      	mov	r3, r1
 800ec00:	71bb      	strb	r3, [r7, #6]
 800ec02:	4613      	mov	r3, r2
 800ec04:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800ec06:	79bb      	ldrb	r3, [r7, #6]
 800ec08:	b29a      	uxth	r2, r3
 800ec0a:	79f9      	ldrb	r1, [r7, #7]
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	9301      	str	r3, [sp, #4]
 800ec10:	1d7b      	adds	r3, r7, #5
 800ec12:	9300      	str	r3, [sp, #0]
 800ec14:	2301      	movs	r3, #1
 800ec16:	4803      	ldr	r0, [pc, #12]	; (800ec24 <TS_IO_Write+0x30>)
 800ec18:	f7ff ffa5 	bl	800eb66 <I2Cx_WriteMultiple>
}
 800ec1c:	bf00      	nop
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	200084f0 	.word	0x200084f0

0800ec28 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af02      	add	r7, sp, #8
 800ec2e:	4603      	mov	r3, r0
 800ec30:	460a      	mov	r2, r1
 800ec32:	71fb      	strb	r3, [r7, #7]
 800ec34:	4613      	mov	r3, r2
 800ec36:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800ec3c:	79bb      	ldrb	r3, [r7, #6]
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	79f9      	ldrb	r1, [r7, #7]
 800ec42:	2301      	movs	r3, #1
 800ec44:	9301      	str	r3, [sp, #4]
 800ec46:	f107 030f 	add.w	r3, r7, #15
 800ec4a:	9300      	str	r3, [sp, #0]
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	4804      	ldr	r0, [pc, #16]	; (800ec60 <TS_IO_Read+0x38>)
 800ec50:	f7ff ff5c 	bl	800eb0c <I2Cx_ReadMultiple>

  return read_value;
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	200084f0 	.word	0x200084f0

0800ec64 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7f4 fa0f 	bl	8003090 <HAL_Delay>
}
 800ec72:	bf00      	nop
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}

0800ec7a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800ec7e:	f008 f84f 	bl	8016d20 <touchgfx_init>
}
 800ec82:	bf00      	nop
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800ec8a:	f008 f873 	bl	8016d74 <touchgfx_taskEntry>
}
 800ec8e:	bf00      	nop
 800ec90:	bd80      	pop	{r7, pc}
	...

0800ec94 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
    {
 800ec9c:	4a04      	ldr	r2, [pc, #16]	; (800ecb0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	601a      	str	r2, [r3, #0]
    }
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr
 800ecb0:	0802908c 	.word	0x0802908c

0800ecb4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
    }
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7ff ffe9 	bl	800ec94 <_ZN8touchgfx12FontProviderD1Ev>
 800ecc2:	2104      	movs	r1, #4
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f018 fcf9 	bl	80276bc <_ZdlPvj>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4618      	mov	r0, r3
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ece0:	887b      	ldrh	r3, [r7, #2]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d008      	beq.n	800ecf8 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d00b      	beq.n	800ed02 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d10e      	bne.n	800ed0c <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ecee:	f005 ff43 	bl	8014b78 <_ZN17TypedTextDatabase8getFontsEv>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	e00a      	b.n	800ed0e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ecf8:	f005 ff3e 	bl	8014b78 <_ZN17TypedTextDatabase8getFontsEv>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	e005      	b.n	800ed0e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ed02:	f005 ff39 	bl	8014b78 <_ZN17TypedTextDatabase8getFontsEv>
 800ed06:	4603      	mov	r3, r0
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	e000      	b.n	800ed0e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800ed0c:	2300      	movs	r3, #0
    }
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
	...

0800ed18 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	4a05      	ldr	r2, [pc, #20]	; (800ed38 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7ff ffb3 	bl	800ec94 <_ZN8touchgfx12FontProviderD1Ev>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4618      	mov	r0, r3
 800ed32:	3708      	adds	r7, #8
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	08029078 	.word	0x08029078

0800ed3c <_ZN23ApplicationFontProviderD0Ev>:
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff ffe7 	bl	800ed18 <_ZN23ApplicationFontProviderD1Ev>
 800ed4a:	2104      	movs	r1, #4
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f018 fcb5 	bl	80276bc <_ZdlPvj>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
    {
 800ed64:	4a04      	ldr	r2, [pc, #16]	; (800ed78 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	601a      	str	r2, [r3, #0]
    }
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr
 800ed78:	08029df4 	.word	0x08029df4

0800ed7c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
    }
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff ffe9 	bl	800ed5c <_ZN8touchgfx4FontD1Ev>
 800ed8a:	2110      	movs	r1, #16
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f018 fc95 	bl	80276bc <_ZdlPvj>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800ed9c:	b590      	push	{r4, r7, lr}
 800ed9e:	b087      	sub	sp, #28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	460b      	mov	r3, r1
 800eda6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800eda8:	887b      	ldrh	r3, [r7, #2]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d101      	bne.n	800edb2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800edae:	2300      	movs	r3, #0
 800edb0:	e010      	b.n	800edd4 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800edb2:	2300      	movs	r3, #0
 800edb4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800edb6:	2300      	movs	r3, #0
 800edb8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	3308      	adds	r3, #8
 800edc0:	681c      	ldr	r4, [r3, #0]
 800edc2:	f107 030f 	add.w	r3, r7, #15
 800edc6:	f107 0210 	add.w	r2, r7, #16
 800edca:	8879      	ldrh	r1, [r7, #2]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	47a0      	blx	r4
 800edd0:	6178      	str	r0, [r7, #20]
        return glyph;
 800edd2:	697b      	ldr	r3, [r7, #20]
    }
 800edd4:	4618      	mov	r0, r3
 800edd6:	371c      	adds	r7, #28
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd90      	pop	{r4, r7, pc}

0800eddc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	895b      	ldrh	r3, [r3, #10]
    }
 800ede8:	4618      	mov	r0, r3
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	899b      	ldrh	r3, [r3, #12]
    }
 800ee00:	4618      	mov	r0, r3
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	889b      	ldrh	r3, [r3, #4]
    }
 800ee18:	4618      	mov	r0, r3
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	889a      	ldrh	r2, [r3, #4]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	799b      	ldrb	r3, [r3, #6]
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	4413      	add	r3, r2
 800ee38:	b29b      	uxth	r3, r3
    }
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	370c      	adds	r7, #12
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800ee46:	b480      	push	{r7}
 800ee48:	b083      	sub	sp, #12
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	79db      	ldrb	r3, [r3, #7]
 800ee52:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800ee56:	b2db      	uxtb	r3, r3
    }
 800ee58:	4618      	mov	r0, r3
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	79db      	ldrb	r3, [r3, #7]
 800ee70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ee74:	b2db      	uxtb	r3, r3
    }
 800ee76:	4618      	mov	r0, r3
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
	...

0800ee84 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	4a05      	ldr	r2, [pc, #20]	; (800eea4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7ff ff61 	bl	800ed5c <_ZN8touchgfx4FontD1Ev>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	0802c230 	.word	0x0802c230

0800eea8 <_ZN8touchgfx9ConstFontD0Ev>:
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff ffe7 	bl	800ee84 <_ZN8touchgfx9ConstFontD1Ev>
 800eeb6:	2118      	movs	r1, #24
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f018 fbff 	bl	80276bc <_ZdlPvj>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4618      	mov	r0, r3
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	4a05      	ldr	r2, [pc, #20]	; (800eee8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7ff ffd3 	bl	800ee84 <_ZN8touchgfx9ConstFontD1Ev>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	080290b0 	.word	0x080290b0

0800eeec <_ZN8touchgfx13GeneratedFontD0Ev>:
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff ffe7 	bl	800eec8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800eefa:	2124      	movs	r1, #36	; 0x24
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f018 fbdd 	bl	80276bc <_ZdlPvj>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4618      	mov	r0, r3
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
    {
 800ef14:	4a04      	ldr	r2, [pc, #16]	; (800ef28 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	601a      	str	r2, [r3, #0]
    }
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	080290a0 	.word	0x080290a0

0800ef2c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
    }
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7ff ffe9 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
 800ef3a:	2108      	movs	r1, #8
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f018 fbbd 	bl	80276bc <_ZdlPvj>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4618      	mov	r0, r3
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6a1b      	ldr	r3, [r3, #32]
    }
 800ef58:	4618      	mov	r0, r3
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b08c      	sub	sp, #48	; 0x30
 800ef68:	af08      	add	r7, sp, #32
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	4611      	mov	r1, r2
 800ef70:	461a      	mov	r2, r3
 800ef72:	460b      	mov	r3, r1
 800ef74:	80fb      	strh	r3, [r7, #6]
 800ef76:	4613      	mov	r3, r2
 800ef78:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	88b9      	ldrh	r1, [r7, #4]
 800ef7e:	88fa      	ldrh	r2, [r7, #6]
 800ef80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef82:	9306      	str	r3, [sp, #24]
 800ef84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ef86:	9305      	str	r3, [sp, #20]
 800ef88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef8c:	9304      	str	r3, [sp, #16]
 800ef8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ef92:	9303      	str	r3, [sp, #12]
 800ef94:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef98:	9302      	str	r3, [sp, #8]
 800ef9a:	7f3b      	ldrb	r3, [r7, #28]
 800ef9c:	9301      	str	r3, [sp, #4]
 800ef9e:	7e3b      	ldrb	r3, [r7, #24]
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	460b      	mov	r3, r1
 800efa4:	68b9      	ldr	r1, [r7, #8]
 800efa6:	f00d fa93 	bl	801c4d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800efaa:	4a08      	ldr	r2, [pc, #32]	; (800efcc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	601a      	str	r2, [r3, #0]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efb4:	619a      	str	r2, [r3, #24]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efba:	61da      	str	r2, [r3, #28]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efc0:	621a      	str	r2, [r3, #32]
{
}
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4618      	mov	r0, r3
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	080290b0 	.word	0x080290b0

0800efd0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	699b      	ldr	r3, [r3, #24]
 800efde:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	889b      	ldrh	r3, [r3, #4]
 800efe4:	0adb      	lsrs	r3, r3, #11
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	4413      	add	r3, r2
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4413      	add	r3, r2
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr

0800f002 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f002:	b480      	push	{r7}
 800f004:	b089      	sub	sp, #36	; 0x24
 800f006:	af00      	add	r7, sp, #0
 800f008:	60f8      	str	r0, [r7, #12]
 800f00a:	460b      	mov	r3, r1
 800f00c:	607a      	str	r2, [r7, #4]
 800f00e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d003      	beq.n	800f01e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	7b1b      	ldrb	r3, [r3, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d101      	bne.n	800f022 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	e030      	b.n	800f084 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	69da      	ldr	r2, [r3, #28]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	7b5b      	ldrb	r3, [r3, #13]
 800f02e:	021b      	lsls	r3, r3, #8
 800f030:	b21b      	sxth	r3, r3
 800f032:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f036:	b219      	sxth	r1, r3
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	7adb      	ldrb	r3, [r3, #11]
 800f03c:	b21b      	sxth	r3, r3
 800f03e:	430b      	orrs	r3, r1
 800f040:	b21b      	sxth	r3, r3
 800f042:	b29b      	uxth	r3, r3
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	7b1b      	ldrb	r3, [r3, #12]
 800f04e:	837b      	strh	r3, [r7, #26]
 800f050:	8b7b      	ldrh	r3, [r7, #26]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d015      	beq.n	800f082 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	897a      	ldrh	r2, [r7, #10]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d103      	bne.n	800f068 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f066:	e00d      	b.n	800f084 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	881b      	ldrh	r3, [r3, #0]
 800f06c:	897a      	ldrh	r2, [r7, #10]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d306      	bcc.n	800f080 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f072:	8b7b      	ldrh	r3, [r7, #26]
 800f074:	3b01      	subs	r3, #1
 800f076:	837b      	strh	r3, [r7, #26]
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	3304      	adds	r3, #4
 800f07c:	61fb      	str	r3, [r7, #28]
 800f07e:	e7e7      	b.n	800f050 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800f080:	bf00      	nop
        }
    }
    return 0;
 800f082:	2300      	movs	r3, #0
}
 800f084:	4618      	mov	r0, r3
 800f086:	3724      	adds	r7, #36	; 0x24
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800f090:	b580      	push	{r7, lr}
 800f092:	af00      	add	r7, sp, #0
 800f094:	4801      	ldr	r0, [pc, #4]	; (800f09c <__tcf_0+0xc>)
 800f096:	f7ff ff17 	bl	800eec8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	2000853c 	.word	0x2000853c

0800f0a0 <_Z23getFont_verdana_10_4bppv>:
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b08a      	sub	sp, #40	; 0x28
 800f0a4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800f0a6:	4b15      	ldr	r3, [pc, #84]	; (800f0fc <_Z23getFont_verdana_10_4bppv+0x5c>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d11f      	bne.n	800f0f2 <_Z23getFont_verdana_10_4bppv+0x52>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	9308      	str	r3, [sp, #32]
 800f0ba:	233f      	movs	r3, #63	; 0x3f
 800f0bc:	9307      	str	r3, [sp, #28]
 800f0be:	4b10      	ldr	r3, [pc, #64]	; (800f100 <_Z23getFont_verdana_10_4bppv+0x60>)
 800f0c0:	9306      	str	r3, [sp, #24]
 800f0c2:	4b10      	ldr	r3, [pc, #64]	; (800f104 <_Z23getFont_verdana_10_4bppv+0x64>)
 800f0c4:	9305      	str	r3, [sp, #20]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9304      	str	r3, [sp, #16]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	9303      	str	r3, [sp, #12]
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	9302      	str	r3, [sp, #8]
 800f0d2:	2304      	movs	r3, #4
 800f0d4:	9301      	str	r3, [sp, #4]
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	230a      	movs	r3, #10
 800f0dc:	2201      	movs	r2, #1
 800f0de:	490a      	ldr	r1, [pc, #40]	; (800f108 <_Z23getFont_verdana_10_4bppv+0x68>)
 800f0e0:	480a      	ldr	r0, [pc, #40]	; (800f10c <_Z23getFont_verdana_10_4bppv+0x6c>)
 800f0e2:	f7ff ff3f 	bl	800ef64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f0e6:	4b05      	ldr	r3, [pc, #20]	; (800f0fc <_Z23getFont_verdana_10_4bppv+0x5c>)
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	601a      	str	r2, [r3, #0]
 800f0ec:	4808      	ldr	r0, [pc, #32]	; (800f110 <_Z23getFont_verdana_10_4bppv+0x70>)
 800f0ee:	f018 fb2f 	bl	8027750 <atexit>
    return verdana_10_4bpp;
 800f0f2:	4b06      	ldr	r3, [pc, #24]	; (800f10c <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	20008560 	.word	0x20008560
 800f100:	0802eec4 	.word	0x0802eec4
 800f104:	080290fc 	.word	0x080290fc
 800f108:	0802ef30 	.word	0x0802ef30
 800f10c:	2000853c 	.word	0x2000853c
 800f110:	0800f091 	.word	0x0800f091

0800f114 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800f114:	b580      	push	{r7, lr}
 800f116:	af00      	add	r7, sp, #0
 800f118:	4801      	ldr	r0, [pc, #4]	; (800f120 <__tcf_0+0xc>)
 800f11a:	f7ff fed5 	bl	800eec8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	20008564 	.word	0x20008564

0800f124 <_Z23getFont_verdana_20_4bppv>:
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b08a      	sub	sp, #40	; 0x28
 800f128:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800f12a:	4b15      	ldr	r3, [pc, #84]	; (800f180 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f003 0301 	and.w	r3, r3, #1
 800f132:	2b00      	cmp	r3, #0
 800f134:	d11f      	bne.n	800f176 <_Z23getFont_verdana_20_4bppv+0x52>
 800f136:	2300      	movs	r3, #0
 800f138:	9309      	str	r3, [sp, #36]	; 0x24
 800f13a:	2300      	movs	r3, #0
 800f13c:	9308      	str	r3, [sp, #32]
 800f13e:	233f      	movs	r3, #63	; 0x3f
 800f140:	9307      	str	r3, [sp, #28]
 800f142:	4b10      	ldr	r3, [pc, #64]	; (800f184 <_Z23getFont_verdana_20_4bppv+0x60>)
 800f144:	9306      	str	r3, [sp, #24]
 800f146:	4b10      	ldr	r3, [pc, #64]	; (800f188 <_Z23getFont_verdana_20_4bppv+0x64>)
 800f148:	9305      	str	r3, [sp, #20]
 800f14a:	2301      	movs	r3, #1
 800f14c:	9304      	str	r3, [sp, #16]
 800f14e:	2300      	movs	r3, #0
 800f150:	9303      	str	r3, [sp, #12]
 800f152:	2301      	movs	r3, #1
 800f154:	9302      	str	r3, [sp, #8]
 800f156:	2304      	movs	r3, #4
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	2300      	movs	r3, #0
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	2314      	movs	r3, #20
 800f160:	2215      	movs	r2, #21
 800f162:	490a      	ldr	r1, [pc, #40]	; (800f18c <_Z23getFont_verdana_20_4bppv+0x68>)
 800f164:	480a      	ldr	r0, [pc, #40]	; (800f190 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800f166:	f7ff fefd 	bl	800ef64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f16a:	4b05      	ldr	r3, [pc, #20]	; (800f180 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800f16c:	2201      	movs	r2, #1
 800f16e:	601a      	str	r2, [r3, #0]
 800f170:	4808      	ldr	r0, [pc, #32]	; (800f194 <_Z23getFont_verdana_20_4bppv+0x70>)
 800f172:	f018 faed 	bl	8027750 <atexit>
    return verdana_20_4bpp;
 800f176:	4b06      	ldr	r3, [pc, #24]	; (800f190 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800f178:	4618      	mov	r0, r3
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	20008588 	.word	0x20008588
 800f184:	0802eec8 	.word	0x0802eec8
 800f188:	08029100 	.word	0x08029100
 800f18c:	0802ef40 	.word	0x0802ef40
 800f190:	20008564 	.word	0x20008564
 800f194:	0800f115 	.word	0x0800f115

0800f198 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800f198:	b580      	push	{r7, lr}
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	4801      	ldr	r0, [pc, #4]	; (800f1a4 <__tcf_0+0xc>)
 800f19e:	f7ff fe93 	bl	800eec8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	2000858c 	.word	0x2000858c

0800f1a8 <_Z23getFont_verdana_40_4bppv>:
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08a      	sub	sp, #40	; 0x28
 800f1ac:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800f1ae:	4b15      	ldr	r3, [pc, #84]	; (800f204 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f003 0301 	and.w	r3, r3, #1
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d11f      	bne.n	800f1fa <_Z23getFont_verdana_40_4bppv+0x52>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f1be:	2300      	movs	r3, #0
 800f1c0:	9308      	str	r3, [sp, #32]
 800f1c2:	233f      	movs	r3, #63	; 0x3f
 800f1c4:	9307      	str	r3, [sp, #28]
 800f1c6:	4b10      	ldr	r3, [pc, #64]	; (800f208 <_Z23getFont_verdana_40_4bppv+0x60>)
 800f1c8:	9306      	str	r3, [sp, #24]
 800f1ca:	4b10      	ldr	r3, [pc, #64]	; (800f20c <_Z23getFont_verdana_40_4bppv+0x64>)
 800f1cc:	9305      	str	r3, [sp, #20]
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	9304      	str	r3, [sp, #16]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	9303      	str	r3, [sp, #12]
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	9302      	str	r3, [sp, #8]
 800f1da:	2304      	movs	r3, #4
 800f1dc:	9301      	str	r3, [sp, #4]
 800f1de:	2308      	movs	r3, #8
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	2328      	movs	r3, #40	; 0x28
 800f1e4:	2212      	movs	r2, #18
 800f1e6:	490a      	ldr	r1, [pc, #40]	; (800f210 <_Z23getFont_verdana_40_4bppv+0x68>)
 800f1e8:	480a      	ldr	r0, [pc, #40]	; (800f214 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800f1ea:	f7ff febb 	bl	800ef64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f1ee:	4b05      	ldr	r3, [pc, #20]	; (800f204 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	4808      	ldr	r0, [pc, #32]	; (800f218 <_Z23getFont_verdana_40_4bppv+0x70>)
 800f1f6:	f018 faab 	bl	8027750 <atexit>
    return verdana_40_4bpp;
 800f1fa:	4b06      	ldr	r3, [pc, #24]	; (800f214 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	200085b0 	.word	0x200085b0
 800f208:	0802eef0 	.word	0x0802eef0
 800f20c:	08029104 	.word	0x08029104
 800f210:	0802f068 	.word	0x0802f068
 800f214:	2000858c 	.word	0x2000858c
 800f218:	0800f199 	.word	0x0800f199

0800f21c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	4618      	mov	r0, r3
 800f22a:	370c      	adds	r7, #12
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	80da      	strh	r2, [r3, #6]
    }
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4618      	mov	r0, r3
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800f262:	b480      	push	{r7}
 800f264:	b085      	sub	sp, #20
 800f266:	af00      	add	r7, sp, #0
 800f268:	60f8      	str	r0, [r7, #12]
 800f26a:	4608      	mov	r0, r1
 800f26c:	4611      	mov	r1, r2
 800f26e:	461a      	mov	r2, r3
 800f270:	4603      	mov	r3, r0
 800f272:	817b      	strh	r3, [r7, #10]
 800f274:	460b      	mov	r3, r1
 800f276:	813b      	strh	r3, [r7, #8]
 800f278:	4613      	mov	r3, r2
 800f27a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	897a      	ldrh	r2, [r7, #10]
 800f280:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	893a      	ldrh	r2, [r7, #8]
 800f286:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	88fa      	ldrh	r2, [r7, #6]
 800f28c:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	8b3a      	ldrh	r2, [r7, #24]
 800f292:	80da      	strh	r2, [r3, #6]
    }
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	4618      	mov	r0, r3
 800f298:	3714      	adds	r7, #20
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr

0800f2a2 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f2a2:	b480      	push	{r7}
 800f2a4:	b083      	sub	sp, #12
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
 800f2aa:	6039      	str	r1, [r7, #0]
    {
    }
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
    {
    }
 800f2c2:	bf00      	nop
 800f2c4:	370c      	adds	r7, #12
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr

0800f2ce <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f2ce:	b480      	push	{r7}
 800f2d0:	b083      	sub	sp, #12
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
 800f2d6:	6039      	str	r1, [r7, #0]
    {
    }
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
    {
    }
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
    {
    }
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
    {
 800f32c:	4a04      	ldr	r2, [pc, #16]	; (800f340 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	601a      	str	r2, [r3, #0]
    }
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4618      	mov	r0, r3
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr
 800f340:	08029370 	.word	0x08029370

0800f344 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
    }
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7ff ffe9 	bl	800f324 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f352:	2104      	movs	r1, #4
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f018 f9b1 	bl	80276bc <_ZdlPvj>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4618      	mov	r0, r3
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800f36c:	4a07      	ldr	r2, [pc, #28]	; (800f38c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	605a      	str	r2, [r3, #4]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	721a      	strb	r2, [r3, #8]
    {
    }
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4618      	mov	r0, r3
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr
 800f38c:	08029350 	.word	0x08029350

0800f390 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
    {
 800f398:	4a04      	ldr	r2, [pc, #16]	; (800f3ac <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	601a      	str	r2, [r3, #0]
    }
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr
 800f3ac:	08029350 	.word	0x08029350

0800f3b0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
    }
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f7ff ffe9 	bl	800f390 <_ZN8touchgfx10TransitionD1Ev>
 800f3be:	210c      	movs	r1, #12
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f018 f97b 	bl	80276bc <_ZdlPvj>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
    {
    }
 800f3d8:	bf00      	nop
 800f3da:	370c      	adds	r7, #12
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr

0800f3e4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
    {
    }
 800f3ec:	bf00      	nop
 800f3ee:	370c      	adds	r7, #12
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr

0800f3f8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
    {
    }
 800f400:	bf00      	nop
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	683a      	ldr	r2, [r7, #0]
 800f41a:	605a      	str	r2, [r3, #4]
    }
 800f41c:	bf00      	nop
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	460b      	mov	r3, r1
 800f432:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	683a      	ldr	r2, [r7, #0]
 800f44e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800f452:	6810      	ldr	r0, [r2, #0]
 800f454:	6851      	ldr	r1, [r2, #4]
 800f456:	c303      	stmia	r3!, {r0, r1}
    };
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
    {
 800f46c:	4a04      	ldr	r2, [pc, #16]	; (800f480 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	601a      	str	r2, [r3, #0]
    }
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	370c      	adds	r7, #12
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr
 800f480:	08029338 	.word	0x08029338

0800f484 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
    }
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff ffe9 	bl	800f464 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f492:	2104      	movs	r1, #4
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f018 f911 	bl	80276bc <_ZdlPvj>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af02      	add	r7, sp, #8
 800f4aa:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800f4ac:	4a13      	ldr	r2, [pc, #76]	; (800f4fc <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	601a      	str	r2, [r3, #0]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	1d18      	adds	r0, r3, #4
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	2200      	movs	r2, #0
 800f4be:	2100      	movs	r1, #0
 800f4c0:	f7ff fecf 	bl	800f262 <_ZN8touchgfx4RectC1Essss>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	330c      	adds	r3, #12
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7ff feb3 	bl	800f234 <_ZN8touchgfx4RectC1Ev>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	615a      	str	r2, [r3, #20]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	619a      	str	r2, [r3, #24]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	61da      	str	r2, [r3, #28]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	0802c1c8 	.word	0x0802c1c8

0800f500 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
    {
 800f508:	4a04      	ldr	r2, [pc, #16]	; (800f51c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	601a      	str	r2, [r3, #0]
    }
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4618      	mov	r0, r3
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	0802c1c8 	.word	0x0802c1c8

0800f520 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
    }
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f7ff ffe9 	bl	800f500 <_ZN8touchgfx8DrawableD1Ev>
 800f52e:	2128      	movs	r1, #40	; 0x28
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f018 f8c3 	bl	80276bc <_ZdlPvj>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4618      	mov	r0, r3
 800f53a:	3708      	adds	r7, #8
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	4608      	mov	r0, r1
 800f54a:	4611      	mov	r1, r2
 800f54c:	461a      	mov	r2, r3
 800f54e:	4603      	mov	r3, r0
 800f550:	817b      	strh	r3, [r7, #10]
 800f552:	460b      	mov	r3, r1
 800f554:	813b      	strh	r3, [r7, #8]
 800f556:	4613      	mov	r3, r2
 800f558:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	3334      	adds	r3, #52	; 0x34
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f566:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	4798      	blx	r3
        setWidth(width);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3338      	adds	r3, #56	; 0x38
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f57a:	4611      	mov	r1, r2
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	4798      	blx	r3
        setHeight(height);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	333c      	adds	r3, #60	; 0x3c
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f58c:	4611      	mov	r1, r2
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	4798      	blx	r3
    }
 800f592:	bf00      	nop
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	370c      	adds	r7, #12
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800f5ce:	b480      	push	{r7}
 800f5d0:	b083      	sub	sp, #12
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	887a      	ldrh	r2, [r7, #2]
 800f5de:	809a      	strh	r2, [r3, #4]
    }
 800f5e0:	bf00      	nop
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	887a      	ldrh	r2, [r7, #2]
 800f5fc:	80da      	strh	r2, [r3, #6]
    }
 800f5fe:	bf00      	nop
 800f600:	370c      	adds	r7, #12
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b082      	sub	sp, #8
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	460b      	mov	r3, r1
 800f614:	807b      	strh	r3, [r7, #2]
 800f616:	4613      	mov	r3, r2
 800f618:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	332c      	adds	r3, #44	; 0x2c
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f626:	4611      	mov	r1, r2
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	4798      	blx	r3
        setY(y);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	3330      	adds	r3, #48	; 0x30
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f638:	4611      	mov	r1, r2
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	4798      	blx	r3
    }
 800f63e:	bf00      	nop
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800f646:	b480      	push	{r7}
 800f648:	b083      	sub	sp, #12
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
 800f64e:	460b      	mov	r3, r1
 800f650:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	887a      	ldrh	r2, [r7, #2]
 800f656:	811a      	strh	r2, [r3, #8]
    }
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	460b      	mov	r3, r1
 800f66e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	887a      	ldrh	r2, [r7, #2]
 800f674:	815a      	strh	r2, [r3, #10]
    }
 800f676:	bf00      	nop
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800f682:	b480      	push	{r7}
 800f684:	b083      	sub	sp, #12
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
    {
    }
 800f68a:	bf00      	nop
 800f68c:	370c      	adds	r7, #12
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr

0800f696 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800f696:	b480      	push	{r7}
 800f698:	b083      	sub	sp, #12
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
 800f69e:	6039      	str	r1, [r7, #0]
    {
    }
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
    {
    }
 800f6b6:	bf00      	nop
 800f6b8:	370c      	adds	r7, #12
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800f6c2:	b480      	push	{r7}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
 800f6ca:	6039      	str	r1, [r7, #0]
    {
    }
 800f6cc:	bf00      	nop
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
    {
    }
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800f706:	b480      	push	{r7}
 800f708:	b083      	sub	sp, #12
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	807b      	strh	r3, [r7, #2]
 800f72c:	4613      	mov	r3, r2
 800f72e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	3354      	adds	r3, #84	; 0x54
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	8879      	ldrh	r1, [r7, #2]
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f740:	b292      	uxth	r2, r2
 800f742:	1a8a      	subs	r2, r1, r2
 800f744:	b292      	uxth	r2, r2
 800f746:	b210      	sxth	r0, r2
 800f748:	8839      	ldrh	r1, [r7, #0]
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f750:	b292      	uxth	r2, r2
 800f752:	1a8a      	subs	r2, r1, r2
 800f754:	b292      	uxth	r2, r2
 800f756:	b212      	sxth	r2, r2
 800f758:	4601      	mov	r1, r0
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	4798      	blx	r3
    }
 800f75e:	bf00      	nop
 800f760:	3708      	adds	r7, #8
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f774:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f77c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f784:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f786:	bf00      	nop
 800f788:	370c      	adds	r7, #12
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f792:	b580      	push	{r7, lr}
 800f794:	b084      	sub	sp, #16
 800f796:	af00      	add	r7, sp, #0
 800f798:	60f8      	str	r0, [r7, #12]
 800f79a:	60b9      	str	r1, [r7, #8]
 800f79c:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f7ff ffe1 	bl	800f766 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	601a      	str	r2, [r3, #0]
    }
 800f7b2:	bf00      	nop
 800f7b4:	3710      	adds	r7, #16
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
	...

0800f7bc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f7bc:	b480      	push	{r7}
 800f7be:	af00      	add	r7, sp, #0
    {
        return instance;
 800f7c0:	4b03      	ldr	r3, [pc, #12]	; (800f7d0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
    }
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	2000b41c 	.word	0x2000b41c

0800f7d4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f7d4:	b480      	push	{r7}
 800f7d6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f7d8:	4b0b      	ldr	r3, [pc, #44]	; (800f808 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d008      	beq.n	800f7f6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f7e4:	4b08      	ldr	r3, [pc, #32]	; (800f808 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d003      	beq.n	800f7f6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f7ee:	4b06      	ldr	r3, [pc, #24]	; (800f808 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7f4:	e002      	b.n	800f7fc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f7f6:	4b04      	ldr	r3, [pc, #16]	; (800f808 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	2000b41c 	.word	0x2000b41c

0800f80c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	4a05      	ldr	r2, [pc, #20]	; (800f82c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	601a      	str	r2, [r3, #0]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7ff fd81 	bl	800f324 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4618      	mov	r0, r3
 800f826:	3708      	adds	r7, #8
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	0802c0d8 	.word	0x0802c0d8

0800f830 <_ZN8touchgfx11ApplicationD0Ev>:
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7ff ffe7 	bl	800f80c <_ZN8touchgfx11ApplicationD1Ev>
 800f83e:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f017 ff3a 	bl	80276bc <_ZdlPvj>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4618      	mov	r0, r3
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
	...

0800f854 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4618      	mov	r0, r3
 800f860:	f00c f990 	bl	801bb84 <_ZN8touchgfx11ApplicationC1Ev>
 800f864:	4a09      	ldr	r2, [pc, #36]	; (800f88c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	601a      	str	r2, [r3, #0]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2200      	movs	r2, #0
 800f876:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a04      	ldr	r2, [pc, #16]	; (800f890 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f87e:	6013      	str	r3, [r2, #0]
    }
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	080292f4 	.word	0x080292f4
 800f890:	2000b4a8 	.word	0x2000b4a8

0800f894 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 f804 	bl	800f8aa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f8a2:	bf00      	nop
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b082      	sub	sp, #8
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00f      	beq.n	800f8dc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	330c      	adds	r3, #12
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	4798      	blx	r3
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d001      	beq.n	800f8dc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f8d8:	2301      	movs	r3, #1
 800f8da:	e000      	b.n	800f8de <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00e      	beq.n	800f900 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	3308      	adds	r3, #8
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4610      	mov	r0, r2
 800f8f6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	683a      	ldr	r2, [r7, #0]
 800f916:	601a      	str	r2, [r3, #0]
    }
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	4a05      	ldr	r2, [pc, #20]	; (800f944 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	4618      	mov	r0, r3
 800f936:	f7ff ff69 	bl	800f80c <_ZN8touchgfx11ApplicationD1Ev>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	080292f4 	.word	0x080292f4

0800f948 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ffe7 	bl	800f924 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f956:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f017 feae 	bl	80276bc <_ZdlPvj>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4618      	mov	r0, r3
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
	...

0800f96c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	4a08      	ldr	r2, [pc, #32]	; (800f998 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	601a      	str	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f980:	4618      	mov	r0, r3
 800f982:	f001 fc97 	bl	80112b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff ffcb 	bl	800f924 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4618      	mov	r0, r3
 800f992:	3708      	adds	r7, #8
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	08029298 	.word	0x08029298

0800f99c <_ZN23FrontendApplicationBaseD0Ev>:
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7ff ffe1 	bl	800f96c <_ZN23FrontendApplicationBaseD1Ev>
 800f9aa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f017 fe84 	bl	80276bc <_ZdlPvj>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800f9be:	b480      	push	{r7}
 800f9c0:	b083      	sub	sp, #12
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	721a      	strb	r2, [r3, #8]
    }
 800f9cc:	bf00      	nop
 800f9ce:	370c      	adds	r7, #12
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	607b      	str	r3, [r7, #4]
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	817b      	strh	r3, [r7, #10]
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7ff fe7d 	bl	800f6ec <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d008      	beq.n	800fa0a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7ff fe83 	bl	800f706 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e000      	b.n	800fa0c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	601a      	str	r2, [r3, #0]
        }
    }
 800fa16:	bf00      	nop
 800fa18:	3710      	adds	r7, #16
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fa1e:	b480      	push	{r7}
 800fa20:	b083      	sub	sp, #12
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	605a      	str	r2, [r3, #4]
    }
 800fa2e:	bf00      	nop
 800fa30:	370c      	adds	r7, #12
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
	...

0800fa3c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7ff fd2c 	bl	800f4a4 <_ZN8touchgfx8DrawableC1Ev>
 800fa4c:	4a03      	ldr	r2, [pc, #12]	; (800fa5c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	601a      	str	r2, [r3, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4618      	mov	r0, r3
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	08029210 	.word	0x08029210

0800fa60 <_ZN8touchgfx6WidgetD1Ev>:
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	4a05      	ldr	r2, [pc, #20]	; (800fa80 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	601a      	str	r2, [r3, #0]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff fd45 	bl	800f500 <_ZN8touchgfx8DrawableD1Ev>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	08029210 	.word	0x08029210

0800fa84 <_ZN8touchgfx6WidgetD0Ev>:
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7ff ffe7 	bl	800fa60 <_ZN8touchgfx6WidgetD1Ev>
 800fa92:	2128      	movs	r1, #40	; 0x28
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f017 fe11 	bl	80276bc <_ZdlPvj>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7ff fece 	bl	800f854 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fab8:	4a13      	ldr	r2, [pc, #76]	; (800fb08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	601a      	str	r2, [r3, #0]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fac4:	4618      	mov	r0, r3
 800fac6:	f000 f9b7 	bl	800fe38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fada:	f7ff fe6f 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 800fade:	4602      	mov	r2, r0
 800fae0:	6813      	ldr	r3, [r2, #0]
 800fae2:	3308      	adds	r3, #8
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2100      	movs	r1, #0
 800fae8:	4610      	mov	r0, r2
 800faea:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800faec:	2000      	movs	r0, #0
 800faee:	f004 ffcb 	bl	8014a88 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800faf2:	f7ff fe6f 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 800faf6:	4603      	mov	r3, r0
 800faf8:	4618      	mov	r0, r3
 800fafa:	f011 fae4 	bl	80210c6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	4618      	mov	r0, r3
 800fb02:	3710      	adds	r7, #16
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	08029298 	.word	0x08029298

0800fb0c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	683a      	ldr	r2, [r7, #0]
 800fb32:	4611      	mov	r1, r2
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7ff ffe9 	bl	800fb0c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	685a      	ldr	r2, [r3, #4]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	605a      	str	r2, [r3, #4]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	683a      	ldr	r2, [r7, #0]
 800fb46:	3308      	adds	r3, #8
 800fb48:	3208      	adds	r2, #8
 800fb4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb4e:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800fb5c:	b590      	push	{r4, r7, lr}
 800fb5e:	b089      	sub	sp, #36	; 0x24
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fb6a:	4b10      	ldr	r3, [pc, #64]	; (800fbac <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800fb6c:	61bb      	str	r3, [r7, #24]
 800fb6e:	2300      	movs	r3, #0
 800fb70:	61fb      	str	r3, [r7, #28]
 800fb72:	f107 0008 	add.w	r0, r7, #8
 800fb76:	f107 0318 	add.w	r3, r7, #24
 800fb7a:	cb0c      	ldmia	r3, {r2, r3}
 800fb7c:	6879      	ldr	r1, [r7, #4]
 800fb7e:	f000 f977 	bl	800fe70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fb82:	f107 0308 	add.w	r3, r7, #8
 800fb86:	4619      	mov	r1, r3
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f7ff ffcb 	bl	800fb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fb8e:	f107 0308 	add.w	r3, r7, #8
 800fb92:	4618      	mov	r0, r3
 800fb94:	f001 fb8e 	bl	80112b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fba4:	bf00      	nop
 800fba6:	3724      	adds	r7, #36	; 0x24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd90      	pop	{r4, r7, pc}
 800fbac:	0800fbb1 	.word	0x0800fbb1

0800fbb0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af02      	add	r7, sp, #8
 800fbb6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	4b04      	ldr	r3, [pc, #16]	; (800fbe0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800fbd0:	4804      	ldr	r0, [pc, #16]	; (800fbe4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800fbd2:	f000 f97f 	bl	800fed4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fbd6:	bf00      	nop
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	2000b49c 	.word	0x2000b49c
 800fbe4:	2000b498 	.word	0x2000b498

0800fbe8 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEast()
{
 800fbe8:	b590      	push	{r4, r7, lr}
 800fbea:	b089      	sub	sp, #36	; 0x24
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenSlideTransitionEastImpl);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fbf6:	4b10      	ldr	r3, [pc, #64]	; (800fc38 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv+0x50>)
 800fbf8:	61bb      	str	r3, [r7, #24]
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	61fb      	str	r3, [r7, #28]
 800fbfe:	f107 0008 	add.w	r0, r7, #8
 800fc02:	f107 0318 	add.w	r3, r7, #24
 800fc06:	cb0c      	ldmia	r3, {r2, r3}
 800fc08:	6879      	ldr	r1, [r7, #4]
 800fc0a:	f000 f931 	bl	800fe70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fc0e:	f107 0308 	add.w	r3, r7, #8
 800fc12:	4619      	mov	r1, r3
 800fc14:	4620      	mov	r0, r4
 800fc16:	f7ff ff85 	bl	800fb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fc1a:	f107 0308 	add.w	r3, r7, #8
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f001 fb48 	bl	80112b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fc30:	bf00      	nop
 800fc32:	3724      	adds	r7, #36	; 0x24
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd90      	pop	{r4, r7, pc}
 800fc38:	0800fc3d 	.word	0x0800fc3d

0800fc3c <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEastImpl()
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af02      	add	r7, sp, #8
 800fc42:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fc50:	461a      	mov	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	4b04      	ldr	r3, [pc, #16]	; (800fc6c <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x30>)
 800fc5c:	4804      	ldr	r0, [pc, #16]	; (800fc70 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x34>)
 800fc5e:	f000 fa65 	bl	801012c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fc62:	bf00      	nop
 800fc64:	3708      	adds	r7, #8
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	2000b49c 	.word	0x2000b49c
 800fc70:	2000b498 	.word	0x2000b498

0800fc74 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 800fc74:	b590      	push	{r4, r7, lr}
 800fc76:	b089      	sub	sp, #36	; 0x24
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fc82:	4b10      	ldr	r3, [pc, #64]	; (800fcc4 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x50>)
 800fc84:	61bb      	str	r3, [r7, #24]
 800fc86:	2300      	movs	r3, #0
 800fc88:	61fb      	str	r3, [r7, #28]
 800fc8a:	f107 0008 	add.w	r0, r7, #8
 800fc8e:	f107 0318 	add.w	r3, r7, #24
 800fc92:	cb0c      	ldmia	r3, {r2, r3}
 800fc94:	6879      	ldr	r1, [r7, #4]
 800fc96:	f000 f8eb 	bl	800fe70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fc9a:	f107 0308 	add.w	r3, r7, #8
 800fc9e:	4619      	mov	r1, r3
 800fca0:	4620      	mov	r0, r4
 800fca2:	f7ff ff3f 	bl	800fb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fca6:	f107 0308 	add.w	r3, r7, #8
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f001 fb02 	bl	80112b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fcbc:	bf00      	nop
 800fcbe:	3724      	adds	r7, #36	; 0x24
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd90      	pop	{r4, r7, pc}
 800fcc4:	0800fcc9 	.word	0x0800fcc9

0800fcc8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af02      	add	r7, sp, #8
 800fcce:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fcdc:	461a      	mov	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fce4:	9300      	str	r3, [sp, #0]
 800fce6:	4b04      	ldr	r3, [pc, #16]	; (800fcf8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x30>)
 800fce8:	4804      	ldr	r0, [pc, #16]	; (800fcfc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x34>)
 800fcea:	f000 fb4b 	bl	8010384 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fcee:	bf00      	nop
 800fcf0:	3708      	adds	r7, #8
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	2000b49c 	.word	0x2000b49c
 800fcfc:	2000b498 	.word	0x2000b498

0800fd00 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 800fd00:	b590      	push	{r4, r7, lr}
 800fd02:	b089      	sub	sp, #36	; 0x24
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fd0e:	4b10      	ldr	r3, [pc, #64]	; (800fd50 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x50>)
 800fd10:	61bb      	str	r3, [r7, #24]
 800fd12:	2300      	movs	r3, #0
 800fd14:	61fb      	str	r3, [r7, #28]
 800fd16:	f107 0008 	add.w	r0, r7, #8
 800fd1a:	f107 0318 	add.w	r3, r7, #24
 800fd1e:	cb0c      	ldmia	r3, {r2, r3}
 800fd20:	6879      	ldr	r1, [r7, #4]
 800fd22:	f000 f8a5 	bl	800fe70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fd26:	f107 0308 	add.w	r3, r7, #8
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f7ff fef9 	bl	800fb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fd32:	f107 0308 	add.w	r3, r7, #8
 800fd36:	4618      	mov	r0, r3
 800fd38:	f001 fabc 	bl	80112b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fd48:	bf00      	nop
 800fd4a:	3724      	adds	r7, #36	; 0x24
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd90      	pop	{r4, r7, pc}
 800fd50:	0800fd55 	.word	0x0800fd55

0800fd54 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af02      	add	r7, sp, #8
 800fd5a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fd68:	461a      	mov	r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fd70:	9300      	str	r3, [sp, #0]
 800fd72:	4b04      	ldr	r3, [pc, #16]	; (800fd84 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x30>)
 800fd74:	4804      	ldr	r0, [pc, #16]	; (800fd88 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x34>)
 800fd76:	f000 fc31 	bl	80105dc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fd7a:	bf00      	nop
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	2000b49c 	.word	0x2000b49c
 800fd88:	2000b498 	.word	0x2000b498

0800fd8c <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>:

// Pong

void FrontendApplicationBase::gotoPongScreenCoverTransitionEast()
{
 800fd8c:	b590      	push	{r4, r7, lr}
 800fd8e:	b089      	sub	sp, #36	; 0x24
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenCoverTransitionEastImpl);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fd9a:	4b10      	ldr	r3, [pc, #64]	; (800fddc <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv+0x50>)
 800fd9c:	61bb      	str	r3, [r7, #24]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	61fb      	str	r3, [r7, #28]
 800fda2:	f107 0008 	add.w	r0, r7, #8
 800fda6:	f107 0318 	add.w	r3, r7, #24
 800fdaa:	cb0c      	ldmia	r3, {r2, r3}
 800fdac:	6879      	ldr	r1, [r7, #4]
 800fdae:	f000 f85f 	bl	800fe70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fdb2:	f107 0308 	add.w	r3, r7, #8
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f7ff feb3 	bl	800fb24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fdbe:	f107 0308 	add.w	r3, r7, #8
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f001 fa76 	bl	80112b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fdd4:	bf00      	nop
 800fdd6:	3724      	adds	r7, #36	; 0x24
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd90      	pop	{r4, r7, pc}
 800fddc:	0800fde1 	.word	0x0800fde1

0800fde0 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoPongScreenCoverTransitionEastImpl()
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af02      	add	r7, sp, #8
 800fde6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fdfc:	9300      	str	r3, [sp, #0]
 800fdfe:	4b04      	ldr	r3, [pc, #16]	; (800fe10 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x30>)
 800fe00:	4804      	ldr	r0, [pc, #16]	; (800fe14 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x34>)
 800fe02:	f000 fd17 	bl	8010834 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fe06:	bf00      	nop
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	2000b49c 	.word	0x2000b49c
 800fe14:	2000b498 	.word	0x2000b498

0800fe18 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	4a04      	ldr	r2, [pc, #16]	; (800fe34 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr
 800fe34:	08029338 	.word	0x08029338

0800fe38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7ff ffe8 	bl	800fe18 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fe48:	4a08      	ldr	r2, [pc, #32]	; (800fe6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	605a      	str	r2, [r3, #4]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	609a      	str	r2, [r3, #8]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	60da      	str	r2, [r3, #12]
    {
    }
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4618      	mov	r0, r3
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	080292dc 	.word	0x080292dc

0800fe70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7ff ffc8 	bl	800fe18 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fe88:	4a08      	ldr	r2, [pc, #32]	; (800feac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	3308      	adds	r3, #8
 800fe98:	463a      	mov	r2, r7
 800fe9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	4618      	mov	r0, r3
 800fea6:	3710      	adds	r7, #16
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	080292dc 	.word	0x080292dc

0800feb0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff fa52 	bl	800f364 <_ZN8touchgfx10TransitionC1Ev>
 800fec0:	4a03      	ldr	r2, [pc, #12]	; (800fed0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	601a      	str	r2, [r3, #0]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	08029278 	.word	0x08029278

0800fed4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800fed4:	b590      	push	{r4, r7, lr}
 800fed6:	b08f      	sub	sp, #60	; 0x3c
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	607a      	str	r2, [r7, #4]
 800fee0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	689a      	ldr	r2, [r3, #8]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	3320      	adds	r3, #32
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4610      	mov	r0, r2
 800fef2:	4798      	blx	r3
 800fef4:	4603      	mov	r3, r0
 800fef6:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800fefa:	d205      	bcs.n	800ff08 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800fefc:	4b86      	ldr	r3, [pc, #536]	; (8010118 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800fefe:	4a87      	ldr	r2, [pc, #540]	; (801011c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800ff00:	21a7      	movs	r1, #167	; 0xa7
 800ff02:	4887      	ldr	r0, [pc, #540]	; (8010120 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800ff04:	f017 fc06 	bl	8027714 <__assert_func>
 800ff08:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	685a      	ldr	r2, [r3, #4]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	3320      	adds	r3, #32
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4610      	mov	r0, r2
 800ff1a:	4798      	blx	r3
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	2b0f      	cmp	r3, #15
 800ff20:	d805      	bhi.n	800ff2e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800ff22:	4b80      	ldr	r3, [pc, #512]	; (8010124 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800ff24:	4a7d      	ldr	r2, [pc, #500]	; (801011c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800ff26:	21a8      	movs	r1, #168	; 0xa8
 800ff28:	487d      	ldr	r0, [pc, #500]	; (8010120 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800ff2a:	f017 fbf3 	bl	8027714 <__assert_func>
 800ff2e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	68da      	ldr	r2, [r3, #12]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	3320      	adds	r3, #32
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4610      	mov	r0, r2
 800ff40:	4798      	blx	r3
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b0b      	cmp	r3, #11
 800ff46:	d805      	bhi.n	800ff54 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800ff48:	4b77      	ldr	r3, [pc, #476]	; (8010128 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800ff4a:	4a74      	ldr	r2, [pc, #464]	; (801011c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800ff4c:	21a9      	movs	r1, #169	; 0xa9
 800ff4e:	4874      	ldr	r0, [pc, #464]	; (8010120 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800ff50:	f017 fbe0 	bl	8027714 <__assert_func>
 800ff54:	bf00      	nop
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ff62:	f00b fdd7 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 800ff66:	4603      	mov	r3, r0
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f00b fdef 	bl	801bb4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ff6e:	6a3b      	ldr	r3, [r7, #32]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d008      	beq.n	800ff88 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800ff76:	6a3b      	ldr	r3, [r7, #32]
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	6a3b      	ldr	r3, [r7, #32]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	330c      	adds	r3, #12
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4610      	mov	r0, r2
 800ff86:	4798      	blx	r3
    if (*currentTrans)
 800ff88:	6a3b      	ldr	r3, [r7, #32]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d007      	beq.n	800ffa0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800ff90:	6a3b      	ldr	r3, [r7, #32]
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	6a3b      	ldr	r3, [r7, #32]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	4798      	blx	r3
    if (*currentScreen)
 800ffa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d008      	beq.n	800ffba <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800ffa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	3314      	adds	r3, #20
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	4798      	blx	r3
    if (*currentPresenter)
 800ffba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d008      	beq.n	800ffd4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	3304      	adds	r3, #4
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4610      	mov	r0, r2
 800ffd2:	4798      	blx	r3
    if (*currentScreen)
 800ffd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d007      	beq.n	800ffec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800ffdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4610      	mov	r0, r2
 800ffea:	4798      	blx	r3
    if (*currentPresenter)
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d008      	beq.n	8010006 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800fff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	3308      	adds	r3, #8
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4610      	mov	r0, r2
 8010004:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	2100      	movs	r1, #0
 801000c:	4618      	mov	r0, r3
 801000e:	f000 fd3f 	bl	8010a90 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010012:	4603      	mov	r3, r0
 8010014:	4619      	mov	r1, r3
 8010016:	200c      	movs	r0, #12
 8010018:	f7ff f900 	bl	800f21c <_ZnwjPv>
 801001c:	4604      	mov	r4, r0
 801001e:	2c00      	cmp	r4, #0
 8010020:	d004      	beq.n	801002c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 8010022:	4620      	mov	r0, r4
 8010024:	f7ff ff44 	bl	800feb0 <_ZN8touchgfx12NoTransitionC1Ev>
 8010028:	4623      	mov	r3, r4
 801002a:	e000      	b.n	801002e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 801002c:	4623      	mov	r3, r4
 801002e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	2100      	movs	r1, #0
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fd3d 	bl	8010ab6 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 801003c:	4603      	mov	r3, r0
 801003e:	4619      	mov	r1, r3
 8010040:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8010044:	f7ff f8ea 	bl	800f21c <_ZnwjPv>
 8010048:	4604      	mov	r4, r0
 801004a:	2c00      	cmp	r4, #0
 801004c:	d004      	beq.n	8010058 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 801004e:	4620      	mov	r0, r4
 8010050:	f005 fbae 	bl	80157b0 <_ZN10screenViewC1Ev>
 8010054:	4623      	mov	r3, r4
 8010056:	e000      	b.n	801005a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 8010058:	4623      	mov	r3, r4
 801005a:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	2100      	movs	r1, #0
 8010062:	4618      	mov	r0, r3
 8010064:	f000 fd3a 	bl	8010adc <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8010068:	4603      	mov	r3, r0
 801006a:	4619      	mov	r1, r3
 801006c:	2010      	movs	r0, #16
 801006e:	f7ff f8d5 	bl	800f21c <_ZnwjPv>
 8010072:	4604      	mov	r4, r0
 8010074:	2c00      	cmp	r4, #0
 8010076:	d005      	beq.n	8010084 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8010078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801007a:	4620      	mov	r0, r4
 801007c:	f005 fb40 	bl	8015700 <_ZN15screenPresenterC1ER10screenView>
 8010080:	4623      	mov	r3, r4
 8010082:	e000      	b.n	8010086 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8010084:	4623      	mov	r3, r4
 8010086:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801008c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010092:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010098:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801009a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 80100a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a2:	3304      	adds	r3, #4
 80100a4:	e000      	b.n	80100a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 80100a6:	2300      	movs	r3, #0
 80100a8:	4619      	mov	r1, r3
 80100aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80100ac:	f7ff fc2c 	bl	800f908 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	3304      	adds	r3, #4
 80100b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7ff fcb1 	bl	800fa1e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80100bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100c0:	4618      	mov	r0, r3
 80100c2:	f000 fd1e 	bl	8010b02 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	61fb      	str	r3, [r7, #28]
 80100ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100cc:	61bb      	str	r3, [r7, #24]
 80100ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	330c      	adds	r3, #12
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	69f8      	ldr	r0, [r7, #28]
 80100dc:	4798      	blx	r3
    newPresenter->activate();
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	69b8      	ldr	r0, [r7, #24]
 80100e6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80100e8:	6979      	ldr	r1, [r7, #20]
 80100ea:	69f8      	ldr	r0, [r7, #28]
 80100ec:	f00c fe44 	bl	801cd78 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3310      	adds	r3, #16
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	6978      	ldr	r0, [r7, #20]
 80100fa:	4798      	blx	r3
    Application::getInstance()->draw();
 80100fc:	f00b fd0a 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 8010100:	4602      	mov	r2, r0
 8010102:	6813      	ldr	r3, [r2, #0]
 8010104:	3330      	adds	r3, #48	; 0x30
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4610      	mov	r0, r2
 801010a:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 801010c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801010e:	4618      	mov	r0, r3
 8010110:	373c      	adds	r7, #60	; 0x3c
 8010112:	46bd      	mov	sp, r7
 8010114:	bd90      	pop	{r4, r7, pc}
 8010116:	bf00      	nop
 8010118:	08028778 	.word	0x08028778
 801011c:	08029390 	.word	0x08029390
 8010120:	08028808 	.word	0x08028808
 8010124:	0802884c 	.word	0x0802884c
 8010128:	080288f0 	.word	0x080288f0

0801012c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801012c:	b590      	push	{r4, r7, lr}
 801012e:	b08f      	sub	sp, #60	; 0x3c
 8010130:	af00      	add	r7, sp, #0
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	607a      	str	r2, [r7, #4]
 8010138:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	689a      	ldr	r2, [r3, #8]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	689b      	ldr	r3, [r3, #8]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	3320      	adds	r3, #32
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4610      	mov	r0, r2
 801014a:	4798      	blx	r3
 801014c:	4603      	mov	r3, r0
 801014e:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 8010152:	d205      	bcs.n	8010160 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010154:	4b86      	ldr	r3, [pc, #536]	; (8010370 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 8010156:	4a87      	ldr	r2, [pc, #540]	; (8010374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010158:	21a7      	movs	r1, #167	; 0xa7
 801015a:	4887      	ldr	r0, [pc, #540]	; (8010378 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 801015c:	f017 fada 	bl	8027714 <__assert_func>
 8010160:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	685a      	ldr	r2, [r3, #4]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	3320      	adds	r3, #32
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4610      	mov	r0, r2
 8010172:	4798      	blx	r3
 8010174:	4603      	mov	r3, r0
 8010176:	2b0f      	cmp	r3, #15
 8010178:	d805      	bhi.n	8010186 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801017a:	4b80      	ldr	r3, [pc, #512]	; (801037c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 801017c:	4a7d      	ldr	r2, [pc, #500]	; (8010374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 801017e:	21a8      	movs	r1, #168	; 0xa8
 8010180:	487d      	ldr	r0, [pc, #500]	; (8010378 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010182:	f017 fac7 	bl	8027714 <__assert_func>
 8010186:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	68da      	ldr	r2, [r3, #12]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3320      	adds	r3, #32
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4610      	mov	r0, r2
 8010198:	4798      	blx	r3
 801019a:	4603      	mov	r3, r0
 801019c:	2b53      	cmp	r3, #83	; 0x53
 801019e:	d805      	bhi.n	80101ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80101a0:	4b77      	ldr	r3, [pc, #476]	; (8010380 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 80101a2:	4a74      	ldr	r2, [pc, #464]	; (8010374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80101a4:	21a9      	movs	r1, #169	; 0xa9
 80101a6:	4874      	ldr	r0, [pc, #464]	; (8010378 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80101a8:	f017 fab4 	bl	8027714 <__assert_func>
 80101ac:	bf00      	nop
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	627b      	str	r3, [r7, #36]	; 0x24
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80101ba:	f00b fcab 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 80101be:	4603      	mov	r3, r0
 80101c0:	4618      	mov	r0, r3
 80101c2:	f00b fcc3 	bl	801bb4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80101c6:	6a3b      	ldr	r3, [r7, #32]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d008      	beq.n	80101e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80101ce:	6a3b      	ldr	r3, [r7, #32]
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	6a3b      	ldr	r3, [r7, #32]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	330c      	adds	r3, #12
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4610      	mov	r0, r2
 80101de:	4798      	blx	r3
    if (*currentTrans)
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d007      	beq.n	80101f8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80101e8:	6a3b      	ldr	r3, [r7, #32]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	6a3b      	ldr	r3, [r7, #32]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4610      	mov	r0, r2
 80101f6:	4798      	blx	r3
    if (*currentScreen)
 80101f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d008      	beq.n	8010212 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8010200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	3314      	adds	r3, #20
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4610      	mov	r0, r2
 8010210:	4798      	blx	r3
    if (*currentPresenter)
 8010212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d008      	beq.n	801022c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	3304      	adds	r3, #4
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	4610      	mov	r0, r2
 801022a:	4798      	blx	r3
    if (*currentScreen)
 801022c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d007      	beq.n	8010244 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4610      	mov	r0, r2
 8010242:	4798      	blx	r3
    if (*currentPresenter)
 8010244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d008      	beq.n	801025e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 801024c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	3308      	adds	r3, #8
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4610      	mov	r0, r2
 801025c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	2100      	movs	r1, #0
 8010264:	4618      	mov	r0, r3
 8010266:	f000 fc5a 	bl	8010b1e <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801026a:	4603      	mov	r3, r0
 801026c:	4619      	mov	r1, r3
 801026e:	2054      	movs	r0, #84	; 0x54
 8010270:	f7fe ffd4 	bl	800f21c <_ZnwjPv>
 8010274:	4604      	mov	r4, r0
 8010276:	2c00      	cmp	r4, #0
 8010278:	d005      	beq.n	8010286 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 801027a:	2114      	movs	r1, #20
 801027c:	4620      	mov	r0, r4
 801027e:	f000 fca5 	bl	8010bcc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8010282:	4623      	mov	r3, r4
 8010284:	e000      	b.n	8010288 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 8010286:	4623      	mov	r3, r4
 8010288:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	2100      	movs	r1, #0
 8010290:	4618      	mov	r0, r3
 8010292:	f000 fc10 	bl	8010ab6 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8010296:	4603      	mov	r3, r0
 8010298:	4619      	mov	r1, r3
 801029a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 801029e:	f7fe ffbd 	bl	800f21c <_ZnwjPv>
 80102a2:	4604      	mov	r4, r0
 80102a4:	2c00      	cmp	r4, #0
 80102a6:	d004      	beq.n	80102b2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 80102a8:	4620      	mov	r0, r4
 80102aa:	f005 fa81 	bl	80157b0 <_ZN10screenViewC1Ev>
 80102ae:	4623      	mov	r3, r4
 80102b0:	e000      	b.n	80102b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 80102b2:	4623      	mov	r3, r4
 80102b4:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	2100      	movs	r1, #0
 80102bc:	4618      	mov	r0, r3
 80102be:	f000 fc0d 	bl	8010adc <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 80102c2:	4603      	mov	r3, r0
 80102c4:	4619      	mov	r1, r3
 80102c6:	2010      	movs	r0, #16
 80102c8:	f7fe ffa8 	bl	800f21c <_ZnwjPv>
 80102cc:	4604      	mov	r4, r0
 80102ce:	2c00      	cmp	r4, #0
 80102d0:	d005      	beq.n	80102de <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80102d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102d4:	4620      	mov	r0, r4
 80102d6:	f005 fa13 	bl	8015700 <_ZN15screenPresenterC1ER10screenView>
 80102da:	4623      	mov	r3, r4
 80102dc:	e000      	b.n	80102e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80102de:	4623      	mov	r3, r4
 80102e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102e6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102ec:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102f2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d002      	beq.n	8010300 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 80102fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fc:	3304      	adds	r3, #4
 80102fe:	e000      	b.n	8010302 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 8010300:	2300      	movs	r3, #0
 8010302:	4619      	mov	r1, r3
 8010304:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010306:	f7ff faff 	bl	800f908 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801030a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030c:	3304      	adds	r3, #4
 801030e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff fb84 	bl	800fa1e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801031a:	4618      	mov	r0, r3
 801031c:	f000 fbf1 	bl	8010b02 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8010320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010322:	61fb      	str	r3, [r7, #28]
 8010324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010326:	61bb      	str	r3, [r7, #24]
 8010328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	330c      	adds	r3, #12
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	69f8      	ldr	r0, [r7, #28]
 8010336:	4798      	blx	r3
    newPresenter->activate();
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	69b8      	ldr	r0, [r7, #24]
 8010340:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010342:	6979      	ldr	r1, [r7, #20]
 8010344:	69f8      	ldr	r0, [r7, #28]
 8010346:	f00c fd17 	bl	801cd78 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	3310      	adds	r3, #16
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	6978      	ldr	r0, [r7, #20]
 8010354:	4798      	blx	r3
    Application::getInstance()->draw();
 8010356:	f00b fbdd 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801035a:	4602      	mov	r2, r0
 801035c:	6813      	ldr	r3, [r2, #0]
 801035e:	3330      	adds	r3, #48	; 0x30
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4610      	mov	r0, r2
 8010364:	4798      	blx	r3
    return newPresenter;
 8010366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010368:	4618      	mov	r0, r3
 801036a:	373c      	adds	r7, #60	; 0x3c
 801036c:	46bd      	mov	sp, r7
 801036e:	bd90      	pop	{r4, r7, pc}
 8010370:	08028778 	.word	0x08028778
 8010374:	08029494 	.word	0x08029494
 8010378:	08028808 	.word	0x08028808
 801037c:	0802884c 	.word	0x0802884c
 8010380:	080288f0 	.word	0x080288f0

08010384 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010384:	b590      	push	{r4, r7, lr}
 8010386:	b08f      	sub	sp, #60	; 0x3c
 8010388:	af00      	add	r7, sp, #0
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	60b9      	str	r1, [r7, #8]
 801038e:	607a      	str	r2, [r7, #4]
 8010390:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	689a      	ldr	r2, [r3, #8]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	3320      	adds	r3, #32
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4610      	mov	r0, r2
 80103a2:	4798      	blx	r3
 80103a4:	4602      	mov	r2, r0
 80103a6:	f641 7347 	movw	r3, #8007	; 0x1f47
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d805      	bhi.n	80103ba <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80103ae:	4b86      	ldr	r3, [pc, #536]	; (80105c8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 80103b0:	4a86      	ldr	r2, [pc, #536]	; (80105cc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80103b2:	21a7      	movs	r1, #167	; 0xa7
 80103b4:	4886      	ldr	r0, [pc, #536]	; (80105d0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80103b6:	f017 f9ad 	bl	8027714 <__assert_func>
 80103ba:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	685a      	ldr	r2, [r3, #4]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	3320      	adds	r3, #32
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4610      	mov	r0, r2
 80103cc:	4798      	blx	r3
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b0f      	cmp	r3, #15
 80103d2:	d805      	bhi.n	80103e0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80103d4:	4b7f      	ldr	r3, [pc, #508]	; (80105d4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 80103d6:	4a7d      	ldr	r2, [pc, #500]	; (80105cc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80103d8:	21a8      	movs	r1, #168	; 0xa8
 80103da:	487d      	ldr	r0, [pc, #500]	; (80105d0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80103dc:	f017 f99a 	bl	8027714 <__assert_func>
 80103e0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	68da      	ldr	r2, [r3, #12]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	3320      	adds	r3, #32
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4610      	mov	r0, r2
 80103f2:	4798      	blx	r3
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b0b      	cmp	r3, #11
 80103f8:	d805      	bhi.n	8010406 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80103fa:	4b77      	ldr	r3, [pc, #476]	; (80105d8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 80103fc:	4a73      	ldr	r2, [pc, #460]	; (80105cc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80103fe:	21a9      	movs	r1, #169	; 0xa9
 8010400:	4873      	ldr	r0, [pc, #460]	; (80105d0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010402:	f017 f987 	bl	8027714 <__assert_func>
 8010406:	bf00      	nop
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	62bb      	str	r3, [r7, #40]	; 0x28
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	627b      	str	r3, [r7, #36]	; 0x24
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010414:	f00b fb7e 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 8010418:	4603      	mov	r3, r0
 801041a:	4618      	mov	r0, r3
 801041c:	f00b fb96 	bl	801bb4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010420:	6a3b      	ldr	r3, [r7, #32]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d008      	beq.n	801043a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8010428:	6a3b      	ldr	r3, [r7, #32]
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	6a3b      	ldr	r3, [r7, #32]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	330c      	adds	r3, #12
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4610      	mov	r0, r2
 8010438:	4798      	blx	r3
    if (*currentTrans)
 801043a:	6a3b      	ldr	r3, [r7, #32]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d007      	beq.n	8010452 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8010442:	6a3b      	ldr	r3, [r7, #32]
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	6a3b      	ldr	r3, [r7, #32]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	4610      	mov	r0, r2
 8010450:	4798      	blx	r3
    if (*currentScreen)
 8010452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d008      	beq.n	801046c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 801045a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	3314      	adds	r3, #20
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4610      	mov	r0, r2
 801046a:	4798      	blx	r3
    if (*currentPresenter)
 801046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d008      	beq.n	8010486 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8010474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	3304      	adds	r3, #4
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4610      	mov	r0, r2
 8010484:	4798      	blx	r3
    if (*currentScreen)
 8010486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d007      	beq.n	801049e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 801048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4610      	mov	r0, r2
 801049c:	4798      	blx	r3
    if (*currentPresenter)
 801049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d008      	beq.n	80104b8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 80104a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	3308      	adds	r3, #8
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4610      	mov	r0, r2
 80104b6:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	2100      	movs	r1, #0
 80104be:	4618      	mov	r0, r3
 80104c0:	f000 fae6 	bl	8010a90 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80104c4:	4603      	mov	r3, r0
 80104c6:	4619      	mov	r1, r3
 80104c8:	200c      	movs	r0, #12
 80104ca:	f7fe fea7 	bl	800f21c <_ZnwjPv>
 80104ce:	4604      	mov	r4, r0
 80104d0:	2c00      	cmp	r4, #0
 80104d2:	d004      	beq.n	80104de <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 80104d4:	4620      	mov	r0, r4
 80104d6:	f7ff fceb 	bl	800feb0 <_ZN8touchgfx12NoTransitionC1Ev>
 80104da:	4623      	mov	r3, r4
 80104dc:	e000      	b.n	80104e0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 80104de:	4623      	mov	r3, r4
 80104e0:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	689b      	ldr	r3, [r3, #8]
 80104e6:	2100      	movs	r1, #0
 80104e8:	4618      	mov	r0, r3
 80104ea:	f000 fc03 	bl	8010cf4 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 80104ee:	4603      	mov	r3, r0
 80104f0:	4619      	mov	r1, r3
 80104f2:	f641 7048 	movw	r0, #8008	; 0x1f48
 80104f6:	f7fe fe91 	bl	800f21c <_ZnwjPv>
 80104fa:	4604      	mov	r4, r0
 80104fc:	2c00      	cmp	r4, #0
 80104fe:	d004      	beq.n	801050a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 8010500:	4620      	mov	r0, r4
 8010502:	f004 ffe9 	bl	80154d8 <_ZN11Screen2ViewC1Ev>
 8010506:	4623      	mov	r3, r4
 8010508:	e000      	b.n	801050c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 801050a:	4623      	mov	r3, r4
 801050c:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	2100      	movs	r1, #0
 8010514:	4618      	mov	r0, r3
 8010516:	f000 fc00 	bl	8010d1a <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 801051a:	4603      	mov	r3, r0
 801051c:	4619      	mov	r1, r3
 801051e:	2010      	movs	r0, #16
 8010520:	f7fe fe7c 	bl	800f21c <_ZnwjPv>
 8010524:	4604      	mov	r4, r0
 8010526:	2c00      	cmp	r4, #0
 8010528:	d005      	beq.n	8010536 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 801052a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801052c:	4620      	mov	r0, r4
 801052e:	f004 ff7b 	bl	8015428 <_ZN16Screen2PresenterC1ER11Screen2View>
 8010532:	4623      	mov	r3, r4
 8010534:	e000      	b.n	8010538 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8010536:	4623      	mov	r3, r4
 8010538:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801053e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010544:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801054a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801054c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054e:	2b00      	cmp	r3, #0
 8010550:	d002      	beq.n	8010558 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 8010552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010554:	3304      	adds	r3, #4
 8010556:	e000      	b.n	801055a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 8010558:	2300      	movs	r3, #0
 801055a:	4619      	mov	r1, r3
 801055c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801055e:	f7ff f9d3 	bl	800f908 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010564:	3304      	adds	r3, #4
 8010566:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff fa58 	bl	800fa1e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010572:	4618      	mov	r0, r3
 8010574:	f000 fbe4 	bl	8010d40 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 8010578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057a:	61fb      	str	r3, [r7, #28]
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	61bb      	str	r3, [r7, #24]
 8010580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010582:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	330c      	adds	r3, #12
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	69f8      	ldr	r0, [r7, #28]
 801058e:	4798      	blx	r3
    newPresenter->activate();
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	69b8      	ldr	r0, [r7, #24]
 8010598:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801059a:	6979      	ldr	r1, [r7, #20]
 801059c:	69f8      	ldr	r0, [r7, #28]
 801059e:	f00c fbeb 	bl	801cd78 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	3310      	adds	r3, #16
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	6978      	ldr	r0, [r7, #20]
 80105ac:	4798      	blx	r3
    Application::getInstance()->draw();
 80105ae:	f00b fab1 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 80105b2:	4602      	mov	r2, r0
 80105b4:	6813      	ldr	r3, [r2, #0]
 80105b6:	3330      	adds	r3, #48	; 0x30
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	4610      	mov	r0, r2
 80105bc:	4798      	blx	r3
    return newPresenter;
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	373c      	adds	r7, #60	; 0x3c
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd90      	pop	{r4, r7, pc}
 80105c8:	08028778 	.word	0x08028778
 80105cc:	080295b4 	.word	0x080295b4
 80105d0:	08028808 	.word	0x08028808
 80105d4:	0802884c 	.word	0x0802884c
 80105d8:	080288f0 	.word	0x080288f0

080105dc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80105dc:	b590      	push	{r4, r7, lr}
 80105de:	b08f      	sub	sp, #60	; 0x3c
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
 80105e8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	689a      	ldr	r2, [r3, #8]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3320      	adds	r3, #32
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	4610      	mov	r0, r2
 80105fa:	4798      	blx	r3
 80105fc:	4603      	mov	r3, r0
 80105fe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010602:	d205      	bcs.n	8010610 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010604:	4b86      	ldr	r3, [pc, #536]	; (8010820 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 8010606:	4a87      	ldr	r2, [pc, #540]	; (8010824 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010608:	21a7      	movs	r1, #167	; 0xa7
 801060a:	4887      	ldr	r0, [pc, #540]	; (8010828 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 801060c:	f017 f882 	bl	8027714 <__assert_func>
 8010610:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	685a      	ldr	r2, [r3, #4]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	3320      	adds	r3, #32
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4610      	mov	r0, r2
 8010622:	4798      	blx	r3
 8010624:	4603      	mov	r3, r0
 8010626:	2b0f      	cmp	r3, #15
 8010628:	d805      	bhi.n	8010636 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801062a:	4b80      	ldr	r3, [pc, #512]	; (801082c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 801062c:	4a7d      	ldr	r2, [pc, #500]	; (8010824 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 801062e:	21a8      	movs	r1, #168	; 0xa8
 8010630:	487d      	ldr	r0, [pc, #500]	; (8010828 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010632:	f017 f86f 	bl	8027714 <__assert_func>
 8010636:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	68da      	ldr	r2, [r3, #12]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3320      	adds	r3, #32
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4610      	mov	r0, r2
 8010648:	4798      	blx	r3
 801064a:	4603      	mov	r3, r0
 801064c:	2b0b      	cmp	r3, #11
 801064e:	d805      	bhi.n	801065c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8010650:	4b77      	ldr	r3, [pc, #476]	; (8010830 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010652:	4a74      	ldr	r2, [pc, #464]	; (8010824 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010654:	21a9      	movs	r1, #169	; 0xa9
 8010656:	4874      	ldr	r0, [pc, #464]	; (8010828 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010658:	f017 f85c 	bl	8027714 <__assert_func>
 801065c:	bf00      	nop
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	62bb      	str	r3, [r7, #40]	; 0x28
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	627b      	str	r3, [r7, #36]	; 0x24
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 801066a:	f00b fa53 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801066e:	4603      	mov	r3, r0
 8010670:	4618      	mov	r0, r3
 8010672:	f00b fa6b 	bl	801bb4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d008      	beq.n	8010690 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	681a      	ldr	r2, [r3, #0]
 8010682:	6a3b      	ldr	r3, [r7, #32]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	330c      	adds	r3, #12
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4610      	mov	r0, r2
 801068e:	4798      	blx	r3
    if (*currentTrans)
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d007      	beq.n	80106a8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8010698:	6a3b      	ldr	r3, [r7, #32]
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	6a3b      	ldr	r3, [r7, #32]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4610      	mov	r0, r2
 80106a6:	4798      	blx	r3
    if (*currentScreen)
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d008      	beq.n	80106c2 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80106b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3314      	adds	r3, #20
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	4610      	mov	r0, r2
 80106c0:	4798      	blx	r3
    if (*currentPresenter)
 80106c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d008      	beq.n	80106dc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80106ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	3304      	adds	r3, #4
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4610      	mov	r0, r2
 80106da:	4798      	blx	r3
    if (*currentScreen)
 80106dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d007      	beq.n	80106f4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80106e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4610      	mov	r0, r2
 80106f2:	4798      	blx	r3
    if (*currentPresenter)
 80106f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d008      	beq.n	801070e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80106fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3308      	adds	r3, #8
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4610      	mov	r0, r2
 801070c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	2100      	movs	r1, #0
 8010714:	4618      	mov	r0, r3
 8010716:	f000 f9bb 	bl	8010a90 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801071a:	4603      	mov	r3, r0
 801071c:	4619      	mov	r1, r3
 801071e:	200c      	movs	r0, #12
 8010720:	f7fe fd7c 	bl	800f21c <_ZnwjPv>
 8010724:	4604      	mov	r4, r0
 8010726:	2c00      	cmp	r4, #0
 8010728:	d004      	beq.n	8010734 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 801072a:	4620      	mov	r0, r4
 801072c:	f7ff fbc0 	bl	800feb0 <_ZN8touchgfx12NoTransitionC1Ev>
 8010730:	4623      	mov	r3, r4
 8010732:	e000      	b.n	8010736 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 8010734:	4623      	mov	r3, r4
 8010736:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	2100      	movs	r1, #0
 801073e:	4618      	mov	r0, r3
 8010740:	f000 fb0c 	bl	8010d5c <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 8010744:	4603      	mov	r3, r0
 8010746:	4619      	mov	r1, r3
 8010748:	f44f 7006 	mov.w	r0, #536	; 0x218
 801074c:	f7fe fd66 	bl	800f21c <_ZnwjPv>
 8010750:	4604      	mov	r4, r0
 8010752:	2c00      	cmp	r4, #0
 8010754:	d004      	beq.n	8010760 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 8010756:	4620      	mov	r0, r4
 8010758:	f004 ff74 	bl	8015644 <_ZN11Screen3ViewC1Ev>
 801075c:	4623      	mov	r3, r4
 801075e:	e000      	b.n	8010762 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 8010760:	4623      	mov	r3, r4
 8010762:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	2100      	movs	r1, #0
 801076a:	4618      	mov	r0, r3
 801076c:	f000 fb09 	bl	8010d82 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 8010770:	4603      	mov	r3, r0
 8010772:	4619      	mov	r1, r3
 8010774:	2010      	movs	r0, #16
 8010776:	f7fe fd51 	bl	800f21c <_ZnwjPv>
 801077a:	4604      	mov	r4, r0
 801077c:	2c00      	cmp	r4, #0
 801077e:	d005      	beq.n	801078c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8010780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010782:	4620      	mov	r0, r4
 8010784:	f004 ff06 	bl	8015594 <_ZN16Screen3PresenterC1ER11Screen3View>
 8010788:	4623      	mov	r3, r4
 801078a:	e000      	b.n	801078e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 801078c:	4623      	mov	r3, r4
 801078e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010794:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801079a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d002      	beq.n	80107ae <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 80107a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107aa:	3304      	adds	r3, #4
 80107ac:	e000      	b.n	80107b0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 80107ae:	2300      	movs	r3, #0
 80107b0:	4619      	mov	r1, r3
 80107b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80107b4:	f7ff f8a8 	bl	800f908 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80107b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ba:	3304      	adds	r3, #4
 80107bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80107be:	4618      	mov	r0, r3
 80107c0:	f7ff f92d 	bl	800fa1e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107c8:	4618      	mov	r0, r3
 80107ca:	f000 faed 	bl	8010da8 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>
 80107ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d0:	61fb      	str	r3, [r7, #28]
 80107d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d4:	61bb      	str	r3, [r7, #24]
 80107d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	330c      	adds	r3, #12
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	69f8      	ldr	r0, [r7, #28]
 80107e4:	4798      	blx	r3
    newPresenter->activate();
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	69b8      	ldr	r0, [r7, #24]
 80107ee:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80107f0:	6979      	ldr	r1, [r7, #20]
 80107f2:	69f8      	ldr	r0, [r7, #28]
 80107f4:	f00c fac0 	bl	801cd78 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	3310      	adds	r3, #16
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	6978      	ldr	r0, [r7, #20]
 8010802:	4798      	blx	r3
    Application::getInstance()->draw();
 8010804:	f00b f986 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 8010808:	4602      	mov	r2, r0
 801080a:	6813      	ldr	r3, [r2, #0]
 801080c:	3330      	adds	r3, #48	; 0x30
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4610      	mov	r0, r2
 8010812:	4798      	blx	r3
    return newPresenter;
 8010814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010816:	4618      	mov	r0, r3
 8010818:	373c      	adds	r7, #60	; 0x3c
 801081a:	46bd      	mov	sp, r7
 801081c:	bd90      	pop	{r4, r7, pc}
 801081e:	bf00      	nop
 8010820:	08028778 	.word	0x08028778
 8010824:	080296b8 	.word	0x080296b8
 8010828:	08028808 	.word	0x08028808
 801082c:	0802884c 	.word	0x0802884c
 8010830:	080288f0 	.word	0x080288f0

08010834 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010834:	b590      	push	{r4, r7, lr}
 8010836:	b08f      	sub	sp, #60	; 0x3c
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	607a      	str	r2, [r7, #4]
 8010840:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	689a      	ldr	r2, [r3, #8]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	3320      	adds	r3, #32
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4610      	mov	r0, r2
 8010852:	4798      	blx	r3
 8010854:	4602      	mov	r2, r0
 8010856:	f641 6327 	movw	r3, #7719	; 0x1e27
 801085a:	429a      	cmp	r2, r3
 801085c:	d805      	bhi.n	801086a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801085e:	4b87      	ldr	r3, [pc, #540]	; (8010a7c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010860:	4a87      	ldr	r2, [pc, #540]	; (8010a80 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010862:	21a7      	movs	r1, #167	; 0xa7
 8010864:	4887      	ldr	r0, [pc, #540]	; (8010a84 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010866:	f016 ff55 	bl	8027714 <__assert_func>
 801086a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	685a      	ldr	r2, [r3, #4]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	3320      	adds	r3, #32
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4610      	mov	r0, r2
 801087c:	4798      	blx	r3
 801087e:	4603      	mov	r3, r0
 8010880:	2b0f      	cmp	r3, #15
 8010882:	d805      	bhi.n	8010890 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010884:	4b80      	ldr	r3, [pc, #512]	; (8010a88 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010886:	4a7e      	ldr	r2, [pc, #504]	; (8010a80 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010888:	21a8      	movs	r1, #168	; 0xa8
 801088a:	487e      	ldr	r0, [pc, #504]	; (8010a84 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 801088c:	f016 ff42 	bl	8027714 <__assert_func>
 8010890:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	68da      	ldr	r2, [r3, #12]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	3320      	adds	r3, #32
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4610      	mov	r0, r2
 80108a2:	4798      	blx	r3
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b4f      	cmp	r3, #79	; 0x4f
 80108a8:	d805      	bhi.n	80108b6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80108aa:	4b78      	ldr	r3, [pc, #480]	; (8010a8c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 80108ac:	4a74      	ldr	r2, [pc, #464]	; (8010a80 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80108ae:	21a9      	movs	r1, #169	; 0xa9
 80108b0:	4874      	ldr	r0, [pc, #464]	; (8010a84 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 80108b2:	f016 ff2f 	bl	8027714 <__assert_func>
 80108b6:	bf00      	nop
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	627b      	str	r3, [r7, #36]	; 0x24
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80108c4:	f00b f926 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 80108c8:	4603      	mov	r3, r0
 80108ca:	4618      	mov	r0, r3
 80108cc:	f00b f93e 	bl	801bb4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80108d0:	6a3b      	ldr	r3, [r7, #32]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d008      	beq.n	80108ea <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 80108d8:	6a3b      	ldr	r3, [r7, #32]
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	330c      	adds	r3, #12
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4610      	mov	r0, r2
 80108e8:	4798      	blx	r3
    if (*currentTrans)
 80108ea:	6a3b      	ldr	r3, [r7, #32]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d007      	beq.n	8010902 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	681a      	ldr	r2, [r3, #0]
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4610      	mov	r0, r2
 8010900:	4798      	blx	r3
    if (*currentScreen)
 8010902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d008      	beq.n	801091c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 801090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	3314      	adds	r3, #20
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4610      	mov	r0, r2
 801091a:	4798      	blx	r3
    if (*currentPresenter)
 801091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d008      	beq.n	8010936 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	3304      	adds	r3, #4
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	4610      	mov	r0, r2
 8010934:	4798      	blx	r3
    if (*currentScreen)
 8010936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d007      	beq.n	801094e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 801093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4610      	mov	r0, r2
 801094c:	4798      	blx	r3
    if (*currentPresenter)
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d008      	beq.n	8010968 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8010956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3308      	adds	r3, #8
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4610      	mov	r0, r2
 8010966:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	2100      	movs	r1, #0
 801096e:	4618      	mov	r0, r3
 8010970:	f000 fa28 	bl	8010dc4 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8010974:	4603      	mov	r3, r0
 8010976:	4619      	mov	r1, r3
 8010978:	2050      	movs	r0, #80	; 0x50
 801097a:	f7fe fc4f 	bl	800f21c <_ZnwjPv>
 801097e:	4604      	mov	r4, r0
 8010980:	2c00      	cmp	r4, #0
 8010982:	d005      	beq.n	8010990 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 8010984:	2114      	movs	r1, #20
 8010986:	4620      	mov	r0, r4
 8010988:	f000 fa86 	bl	8010e98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 801098c:	4623      	mov	r3, r4
 801098e:	e000      	b.n	8010992 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 8010990:	4623      	mov	r3, r4
 8010992:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	2100      	movs	r1, #0
 801099a:	4618      	mov	r0, r3
 801099c:	f000 fb00 	bl	8010fa0 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 80109a0:	4603      	mov	r3, r0
 80109a2:	4619      	mov	r1, r3
 80109a4:	f641 6028 	movw	r0, #7720	; 0x1e28
 80109a8:	f7fe fc38 	bl	800f21c <_ZnwjPv>
 80109ac:	4604      	mov	r4, r0
 80109ae:	2c00      	cmp	r4, #0
 80109b0:	d004      	beq.n	80109bc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 80109b2:	4620      	mov	r0, r4
 80109b4:	f004 fa96 	bl	8014ee4 <_ZN8PongViewC1Ev>
 80109b8:	4623      	mov	r3, r4
 80109ba:	e000      	b.n	80109be <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 80109bc:	4623      	mov	r3, r4
 80109be:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	2100      	movs	r1, #0
 80109c6:	4618      	mov	r0, r3
 80109c8:	f000 fafd 	bl	8010fc6 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 80109cc:	4603      	mov	r3, r0
 80109ce:	4619      	mov	r1, r3
 80109d0:	2010      	movs	r0, #16
 80109d2:	f7fe fc23 	bl	800f21c <_ZnwjPv>
 80109d6:	4604      	mov	r4, r0
 80109d8:	2c00      	cmp	r4, #0
 80109da:	d005      	beq.n	80109e8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80109dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109de:	4620      	mov	r0, r4
 80109e0:	f004 fa0e 	bl	8014e00 <_ZN13PongPresenterC1ER8PongView>
 80109e4:	4623      	mov	r3, r4
 80109e6:	e000      	b.n	80109ea <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 80109e8:	4623      	mov	r3, r4
 80109ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109f0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109f6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109fc:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80109fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d002      	beq.n	8010a0a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 8010a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a06:	3304      	adds	r3, #4
 8010a08:	e000      	b.n	8010a0c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010a10:	f7fe ff7a 	bl	800f908 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a16:	3304      	adds	r3, #4
 8010a18:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fe ffff 	bl	800fa1e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 fae1 	bl	8010fec <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 8010a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2c:	61fb      	str	r3, [r7, #28]
 8010a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a30:	61bb      	str	r3, [r7, #24]
 8010a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a34:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	330c      	adds	r3, #12
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	69f8      	ldr	r0, [r7, #28]
 8010a40:	4798      	blx	r3
    newPresenter->activate();
 8010a42:	69bb      	ldr	r3, [r7, #24]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	69b8      	ldr	r0, [r7, #24]
 8010a4a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010a4c:	6979      	ldr	r1, [r7, #20]
 8010a4e:	69f8      	ldr	r0, [r7, #28]
 8010a50:	f00c f992 	bl	801cd78 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	3310      	adds	r3, #16
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	6978      	ldr	r0, [r7, #20]
 8010a5e:	4798      	blx	r3
    Application::getInstance()->draw();
 8010a60:	f00b f858 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 8010a64:	4602      	mov	r2, r0
 8010a66:	6813      	ldr	r3, [r2, #0]
 8010a68:	3330      	adds	r3, #48	; 0x30
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	4798      	blx	r3
    return newPresenter;
 8010a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	373c      	adds	r7, #60	; 0x3c
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd90      	pop	{r4, r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	08028778 	.word	0x08028778
 8010a80:	080297bc 	.word	0x080297bc
 8010a84:	08028808 	.word	0x08028808
 8010a88:	0802884c 	.word	0x0802884c
 8010a8c:	080288f0 	.word	0x080288f0

08010a90 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	460b      	mov	r3, r1
 8010a9a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	3324      	adds	r3, #36	; 0x24
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	887a      	ldrh	r2, [r7, #2]
 8010aa6:	4611      	mov	r1, r2
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	4798      	blx	r3
 8010aac:	4603      	mov	r3, r0
    }
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3708      	adds	r7, #8
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b082      	sub	sp, #8
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
 8010abe:	460b      	mov	r3, r1
 8010ac0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	3324      	adds	r3, #36	; 0x24
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	887a      	ldrh	r2, [r7, #2]
 8010acc:	4611      	mov	r1, r2
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	4798      	blx	r3
 8010ad2:	4603      	mov	r3, r0
    }
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	3324      	adds	r3, #36	; 0x24
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	887a      	ldrh	r2, [r7, #2]
 8010af2:	4611      	mov	r1, r2
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	4798      	blx	r3
 8010af8:	4603      	mov	r3, r0
    }
 8010afa:	4618      	mov	r0, r3
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8010b02:	b480      	push	{r7}
 8010b04:	b083      	sub	sp, #12
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	683a      	ldr	r2, [r7, #0]
 8010b10:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010b12:	bf00      	nop
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8010b1e:	b580      	push	{r7, lr}
 8010b20:	b082      	sub	sp, #8
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
 8010b26:	460b      	mov	r3, r1
 8010b28:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	3324      	adds	r3, #36	; 0x24
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	887a      	ldrh	r2, [r7, #2]
 8010b34:	4611      	mov	r1, r2
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	4798      	blx	r3
 8010b3a:	4603      	mov	r3, r0
    }
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	4a05      	ldr	r2, [pc, #20]	; (8010b64 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	601a      	str	r2, [r3, #0]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fe ff83 	bl	800fa60 <_ZN8touchgfx6WidgetD1Ev>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	0802ba94 	.word	0x0802ba94

08010b68 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f7ff ffe7 	bl	8010b44 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8010b76:	212c      	movs	r1, #44	; 0x2c
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f016 fd9f 	bl	80276bc <_ZdlPvj>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4618      	mov	r0, r3
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	4a05      	ldr	r2, [pc, #20]	; (8010ba8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	601a      	str	r2, [r3, #0]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f000 fa9f 	bl	80110dc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3708      	adds	r7, #8
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}
 8010ba8:	08029138 	.word	0x08029138

08010bac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7ff ffe7 	bl	8010b88 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8010bba:	2110      	movs	r1, #16
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f016 fd7d 	bl	80276bc <_ZdlPvj>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8010bcc:	b590      	push	{r4, r7, lr}
 8010bce:	b087      	sub	sp, #28
 8010bd0:	af02      	add	r7, sp, #8
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fe fbc2 	bl	800f364 <_ZN8touchgfx10TransitionC1Ev>
 8010be0:	4a3f      	ldr	r2, [pc, #252]	; (8010ce0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	601a      	str	r2, [r3, #0]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	330c      	adds	r3, #12
 8010bea:	4618      	mov	r0, r3
 8010bec:	f009 faf4 	bl	801a1d8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f103 020c 	add.w	r2, r3, #12
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8010c00:	4a38      	ldr	r2, [pc, #224]	; (8010ce4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 8010c02:	f107 0308 	add.w	r3, r7, #8
 8010c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8010c0e:	f107 0308 	add.w	r3, r7, #8
 8010c12:	cb0c      	ldmia	r3, {r2, r3}
 8010c14:	6879      	ldr	r1, [r7, #4]
 8010c16:	4620      	mov	r0, r4
 8010c18:	f000 fa40 	bl	801109c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2202      	movs	r2, #2
 8010c20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	78fa      	ldrb	r2, [r7, #3]
 8010c28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8010c3c:	4b2a      	ldr	r3, [pc, #168]	; (8010ce8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d047      	beq.n	8010cd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f103 000c 	add.w	r0, r3, #12
 8010c4a:	4b28      	ldr	r3, [pc, #160]	; (8010cec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8010c4c:	881b      	ldrh	r3, [r3, #0]
 8010c4e:	b21a      	sxth	r2, r3
 8010c50:	4b27      	ldr	r3, [pc, #156]	; (8010cf0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	b21b      	sxth	r3, r3
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	f7fe fc6f 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	330c      	adds	r3, #12
 8010c66:	4618      	mov	r0, r3
 8010c68:	f009 fa39 	bl	801a0de <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010c72:	2b03      	cmp	r3, #3
 8010c74:	d82a      	bhi.n	8010ccc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 8010c76:	a201      	add	r2, pc, #4	; (adr r2, 8010c7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8010c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c7c:	08010cad 	.word	0x08010cad
 8010c80:	08010cbb 	.word	0x08010cbb
 8010c84:	08010c8d 	.word	0x08010c8d
 8010c88:	08010c9f 	.word	0x08010c9f
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8010c8c:	4b17      	ldr	r3, [pc, #92]	; (8010cec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	425b      	negs	r3, r3
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	b21a      	sxth	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8010c9c:	e01a      	b.n	8010cd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 8010c9e:	4b13      	ldr	r3, [pc, #76]	; (8010cec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8010ca0:	881b      	ldrh	r3, [r3, #0]
 8010ca2:	b21a      	sxth	r2, r3
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8010caa:	e013      	b.n	8010cd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 8010cac:	4b10      	ldr	r3, [pc, #64]	; (8010cf0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8010cae:	881b      	ldrh	r3, [r3, #0]
 8010cb0:	b21a      	sxth	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8010cb8:	e00c      	b.n	8010cd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 8010cba:	4b0d      	ldr	r3, [pc, #52]	; (8010cf0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	425b      	negs	r3, r3
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	b21a      	sxth	r2, r3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8010cca:	e003      	b.n	8010cd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 8010cd2:	bf00      	nop
            }
        }
    }
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3714      	adds	r7, #20
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd90      	pop	{r4, r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	08029110 	.word	0x08029110
 8010ce4:	08028994 	.word	0x08028994
 8010ce8:	2000b41b 	.word	0x2000b41b
 8010cec:	2000b410 	.word	0x2000b410
 8010cf0:	2000b412 	.word	0x2000b412

08010cf4 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	3324      	adds	r3, #36	; 0x24
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	887a      	ldrh	r2, [r7, #2]
 8010d0a:	4611      	mov	r1, r2
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	4798      	blx	r3
 8010d10:	4603      	mov	r3, r0
    }
 8010d12:	4618      	mov	r0, r3
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b082      	sub	sp, #8
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
 8010d22:	460b      	mov	r3, r1
 8010d24:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	3324      	adds	r3, #36	; 0x24
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	887a      	ldrh	r2, [r7, #2]
 8010d30:	4611      	mov	r1, r2
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	4798      	blx	r3
 8010d36:	4603      	mov	r3, r0
    }
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	683a      	ldr	r2, [r7, #0]
 8010d4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010d50:	bf00      	nop
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr

08010d5c <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	460b      	mov	r3, r1
 8010d66:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	3324      	adds	r3, #36	; 0x24
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	887a      	ldrh	r2, [r7, #2]
 8010d72:	4611      	mov	r1, r2
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	4798      	blx	r3
 8010d78:	4603      	mov	r3, r0
    }
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3708      	adds	r7, #8
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b082      	sub	sp, #8
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	3324      	adds	r3, #36	; 0x24
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	887a      	ldrh	r2, [r7, #2]
 8010d98:	4611      	mov	r1, r2
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	4798      	blx	r3
 8010d9e:	4603      	mov	r3, r0
    }
 8010da0:	4618      	mov	r0, r3
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
    void bind(T& presenter)
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	683a      	ldr	r2, [r7, #0]
 8010db6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010db8:	bf00      	nop
 8010dba:	370c      	adds	r7, #12
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	460b      	mov	r3, r1
 8010dce:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3324      	adds	r3, #36	; 0x24
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	887a      	ldrh	r2, [r7, #2]
 8010dda:	4611      	mov	r1, r2
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	4798      	blx	r3
 8010de0:	4603      	mov	r3, r0
    }
 8010de2:	4618      	mov	r0, r3
 8010de4:	3708      	adds	r7, #8
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
	...

08010dec <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	4a05      	ldr	r2, [pc, #20]	; (8010e0c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f000 f96d 	bl	80110dc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	080291e0 	.word	0x080291e0

08010e10 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff ffe7 	bl	8010dec <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8010e1e:	2110      	movs	r1, #16
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f016 fc4b 	bl	80276bc <_ZdlPvj>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7fe fdfe 	bl	800fa3c <_ZN8touchgfx6WidgetC1Ev>
 8010e40:	4a03      	ldr	r2, [pc, #12]	; (8010e50 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	601a      	str	r2, [r3, #0]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	08029178 	.word	0x08029178

08010e54 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	4a05      	ldr	r2, [pc, #20]	; (8010e74 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fe fdfb 	bl	800fa60 <_ZN8touchgfx6WidgetD1Ev>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	08029178 	.word	0x08029178

08010e78 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7ff ffe7 	bl	8010e54 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 8010e86:	2128      	movs	r1, #40	; 0x28
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f016 fc17 	bl	80276bc <_ZdlPvj>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	4618      	mov	r0, r3
 8010e92:	3708      	adds	r7, #8
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 8010e98:	b590      	push	{r4, r7, lr}
 8010e9a:	b087      	sub	sp, #28
 8010e9c:	af02      	add	r7, sp, #8
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fe fa5c 	bl	800f364 <_ZN8touchgfx10TransitionC1Ev>
 8010eac:	4a38      	ldr	r2, [pc, #224]	; (8010f90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	601a      	str	r2, [r3, #0]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f103 040c 	add.w	r4, r3, #12
 8010eb8:	4a36      	ldr	r2, [pc, #216]	; (8010f94 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 8010eba:	f107 0308 	add.w	r3, r7, #8
 8010ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ec2:	e883 0003 	stmia.w	r3, {r0, r1}
 8010ec6:	f107 0308 	add.w	r3, r7, #8
 8010eca:	cb0c      	ldmia	r3, {r2, r3}
 8010ecc:	6879      	ldr	r1, [r7, #4]
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f000 f956 	bl	8011180 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2202      	movs	r2, #2
 8010ed8:	771a      	strb	r2, [r3, #28]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	78fa      	ldrb	r2, [r7, #3]
 8010ede:	775a      	strb	r2, [r3, #29]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	779a      	strb	r2, [r3, #30]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	845a      	strh	r2, [r3, #34]	; 0x22
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	849a      	strh	r2, [r3, #36]	; 0x24
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	3328      	adds	r3, #40	; 0x28
 8010ef6:	2228      	movs	r2, #40	; 0x28
 8010ef8:	2100      	movs	r1, #0
 8010efa:	4618      	mov	r0, r3
 8010efc:	f016 fc93 	bl	8027826 <memset>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	3328      	adds	r3, #40	; 0x28
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7ff ff93 	bl	8010e30 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	7f1b      	ldrb	r3, [r3, #28]
 8010f0e:	2b03      	cmp	r3, #3
 8010f10:	d826      	bhi.n	8010f60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 8010f12:	a201      	add	r2, pc, #4	; (adr r2, 8010f18 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 8010f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f18:	08010f45 	.word	0x08010f45
 8010f1c:	08010f51 	.word	0x08010f51
 8010f20:	08010f29 	.word	0x08010f29
 8010f24:	08010f39 	.word	0x08010f39
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 8010f28:	4b1b      	ldr	r3, [pc, #108]	; (8010f98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 8010f2a:	881b      	ldrh	r3, [r3, #0]
 8010f2c:	425b      	negs	r3, r3
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	b21a      	sxth	r2, r3
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	841a      	strh	r2, [r3, #32]
            break;
 8010f36:	e017      	b.n	8010f68 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 8010f38:	4b17      	ldr	r3, [pc, #92]	; (8010f98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 8010f3a:	881b      	ldrh	r3, [r3, #0]
 8010f3c:	b21a      	sxth	r2, r3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	841a      	strh	r2, [r3, #32]
            break;
 8010f42:	e011      	b.n	8010f68 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8010f44:	4b15      	ldr	r3, [pc, #84]	; (8010f9c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 8010f46:	881b      	ldrh	r3, [r3, #0]
 8010f48:	b21a      	sxth	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	841a      	strh	r2, [r3, #32]
            break;
 8010f4e:	e00b      	b.n	8010f68 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 8010f50:	4b12      	ldr	r3, [pc, #72]	; (8010f9c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	425b      	negs	r3, r3
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	b21a      	sxth	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	841a      	strh	r2, [r3, #32]
            break;
 8010f5e:	e003      	b.n	8010f68 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 8010f66:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8010f6e:	4b0a      	ldr	r3, [pc, #40]	; (8010f98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	b21a      	sxth	r2, r3
 8010f74:	4b09      	ldr	r3, [pc, #36]	; (8010f9c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 8010f76:	881b      	ldrh	r3, [r3, #0]
 8010f78:	b21b      	sxth	r3, r3
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	4613      	mov	r3, r2
 8010f7e:	2200      	movs	r2, #0
 8010f80:	2100      	movs	r1, #0
 8010f82:	f7fe fadd 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3714      	adds	r7, #20
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd90      	pop	{r4, r7, pc}
 8010f90:	08029150 	.word	0x08029150
 8010f94:	0802899c 	.word	0x0802899c
 8010f98:	2000b410 	.word	0x2000b410
 8010f9c:	2000b412 	.word	0x2000b412

08010fa0 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>:
    T& at(const uint16_t index)
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	460b      	mov	r3, r1
 8010faa:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	3324      	adds	r3, #36	; 0x24
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	887a      	ldrh	r2, [r7, #2]
 8010fb6:	4611      	mov	r1, r2
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	4798      	blx	r3
 8010fbc:	4603      	mov	r3, r0
    }
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3708      	adds	r7, #8
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>:
    T& at(const uint16_t index)
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b082      	sub	sp, #8
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	460b      	mov	r3, r1
 8010fd0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	3324      	adds	r3, #36	; 0x24
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	887a      	ldrh	r2, [r7, #2]
 8010fdc:	4611      	mov	r1, r2
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	4798      	blx	r3
 8010fe2:	4603      	mov	r3, r0
    }
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>:
    void bind(T& presenter)
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	683a      	ldr	r2, [r7, #0]
 8010ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010ffc:	bf00      	nop
 8010ffe:	370c      	adds	r7, #12
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr

08011008 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011016:	683a      	ldr	r2, [r7, #0]
 8011018:	429a      	cmp	r2, r3
 801101a:	d02a      	beq.n	8011072 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011022:	2b03      	cmp	r3, #3
 8011024:	d820      	bhi.n	8011068 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011026:	a201      	add	r2, pc, #4	; (adr r2, 801102c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801102c:	08011053 	.word	0x08011053
 8011030:	08011053 	.word	0x08011053
 8011034:	0801103d 	.word	0x0801103d
 8011038:	0801103d 	.word	0x0801103d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	3354      	adds	r3, #84	; 0x54
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	687a      	ldr	r2, [r7, #4]
 8011046:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 801104a:	2200      	movs	r2, #0
 801104c:	6838      	ldr	r0, [r7, #0]
 801104e:	4798      	blx	r3
            break;
 8011050:	e010      	b.n	8011074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3354      	adds	r3, #84	; 0x54
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011060:	2100      	movs	r1, #0
 8011062:	6838      	ldr	r0, [r7, #0]
 8011064:	4798      	blx	r3
            break;
 8011066:	e005      	b.n	8011074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2201      	movs	r2, #1
 801106c:	721a      	strb	r2, [r3, #8]
            break;
 801106e:	bf00      	nop
 8011070:	e000      	b.n	8011074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011072:	bf00      	nop
        }
    }
 8011074:	3708      	adds	r7, #8
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop

0801107c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	4a04      	ldr	r2, [pc, #16]	; (8011098 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	601a      	str	r2, [r3, #0]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4618      	mov	r0, r3
 801108e:	370c      	adds	r7, #12
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr
 8011098:	080291f8 	.word	0x080291f8

0801109c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	4639      	mov	r1, r7
 80110a8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7ff ffe4 	bl	801107c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 80110b4:	4a08      	ldr	r2, [pc, #32]	; (80110d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	3308      	adds	r3, #8
 80110c4:	463a      	mov	r2, r7
 80110c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	08029138 	.word	0x08029138

080110dc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
    }
 80110e4:	4a04      	ldr	r2, [pc, #16]	; (80110f8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	601a      	str	r2, [r3, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	4618      	mov	r0, r3
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	080291f8 	.word	0x080291f8

080110fc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
    }
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff ffe9 	bl	80110dc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801110a:	2104      	movs	r1, #4
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f016 fad5 	bl	80276bc <_ZdlPvj>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	4618      	mov	r0, r3
 8011116:	3708      	adds	r7, #8
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	7f1b      	ldrb	r3, [r3, #28]
 801112a:	2b03      	cmp	r3, #3
 801112c:	d820      	bhi.n	8011170 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 801112e:	a201      	add	r2, pc, #4	; (adr r2, 8011134 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 8011130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011134:	0801115b 	.word	0x0801115b
 8011138:	0801115b 	.word	0x0801115b
 801113c:	08011145 	.word	0x08011145
 8011140:	08011145 	.word	0x08011145
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	3354      	adds	r3, #84	; 0x54
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 8011152:	2200      	movs	r2, #0
 8011154:	6838      	ldr	r0, [r7, #0]
 8011156:	4798      	blx	r3
            break;
 8011158:	e00e      	b.n	8011178 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	3354      	adds	r3, #84	; 0x54
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8011168:	2100      	movs	r1, #0
 801116a:	6838      	ldr	r0, [r7, #0]
 801116c:	4798      	blx	r3
            break;
 801116e:	e003      	b.n	8011178 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2201      	movs	r2, #1
 8011174:	721a      	strb	r2, [r3, #8]
            break;
 8011176:	bf00      	nop
        }
    }
 8011178:	bf00      	nop
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	4639      	mov	r1, r7
 801118c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	4618      	mov	r0, r3
 8011194:	f7ff ff72 	bl	801107c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011198:	4a08      	ldr	r2, [pc, #32]	; (80111bc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	68ba      	ldr	r2, [r7, #8]
 80111a2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	3308      	adds	r3, #8
 80111a8:	463a      	mov	r2, r7
 80111aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111ae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	4618      	mov	r0, r3
 80111b6:	3710      	adds	r7, #16
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	080291e0 	.word	0x080291e0

080111c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	4a0a      	ldr	r2, [pc, #40]	; (80111f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	601a      	str	r2, [r3, #0]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	333c      	adds	r3, #60	; 0x3c
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff fcd8 	bl	8010b88 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	330c      	adds	r3, #12
 80111dc:	4618      	mov	r0, r3
 80111de:	f7ff fcb1 	bl	8010b44 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7fe f8d3 	bl	800f390 <_ZN8touchgfx10TransitionD1Ev>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4618      	mov	r0, r3
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	08029110 	.word	0x08029110

080111f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7ff ffdd 	bl	80111c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8011206:	2154      	movs	r1, #84	; 0x54
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f016 fa57 	bl	80276bc <_ZdlPvj>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	4a0a      	ldr	r2, [pc, #40]	; (801124c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	601a      	str	r2, [r3, #0]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3328      	adds	r3, #40	; 0x28
 801122a:	4618      	mov	r0, r3
 801122c:	f7ff fe12 	bl	8010e54 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	330c      	adds	r3, #12
 8011234:	4618      	mov	r0, r3
 8011236:	f7ff fdd9 	bl	8010dec <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	f7fe f8a7 	bl	800f390 <_ZN8touchgfx10TransitionD1Ev>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	08029150 	.word	0x08029150

08011250 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7ff ffdd 	bl	8011218 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 801125e:	2150      	movs	r1, #80	; 0x50
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f016 fa2b 	bl	80276bc <_ZdlPvj>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4618      	mov	r0, r3
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <_ZN8touchgfx12NoTransitionD1Ev>:
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	4a05      	ldr	r2, [pc, #20]	; (8011290 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	4618      	mov	r0, r3
 8011282:	f7fe f885 	bl	800f390 <_ZN8touchgfx10TransitionD1Ev>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	08029278 	.word	0x08029278

08011294 <_ZN8touchgfx12NoTransitionD0Ev>:
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ffe7 	bl	8011270 <_ZN8touchgfx12NoTransitionD1Ev>
 80112a2:	210c      	movs	r1, #12
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f016 fa09 	bl	80276bc <_ZdlPvj>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	4a05      	ldr	r2, [pc, #20]	; (80112d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	601a      	str	r2, [r3, #0]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7fe f8cd 	bl	800f464 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	4618      	mov	r0, r3
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	080292dc 	.word	0x080292dc

080112d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7ff ffe7 	bl	80112b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80112e6:	2110      	movs	r1, #16
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f016 f9e7 	bl	80276bc <_ZdlPvj>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4618      	mov	r0, r3
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011300:	4b59      	ldr	r3, [pc, #356]	; (8011468 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f083 0301 	eor.w	r3, r3, #1
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	d003      	beq.n	8011316 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2201      	movs	r2, #1
 8011312:	721a      	strb	r2, [r3, #8]
            return;
 8011314:	e0a5      	b.n	8011462 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4618      	mov	r0, r3
 801131a:	f7fe f859 	bl	800f3d0 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011324:	3301      	adds	r3, #1
 8011326:	b2da      	uxtb	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801133a:	429a      	cmp	r2, r3
 801133c:	d82f      	bhi.n	801139e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011344:	b298      	uxth	r0, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011352:	b29b      	uxth	r3, r3
 8011354:	2100      	movs	r1, #0
 8011356:	f00b fd15 	bl	801cd84 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801135a:	4603      	mov	r3, r0
 801135c:	461a      	mov	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801136a:	b29b      	uxth	r3, r3
 801136c:	f003 0301 	and.w	r3, r3, #1
 8011370:	b29b      	uxth	r3, r3
 8011372:	2b00      	cmp	r3, #0
 8011374:	d01b      	beq.n	80113ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801137c:	b29b      	uxth	r3, r3
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011384:	2a00      	cmp	r2, #0
 8011386:	dd01      	ble.n	801138c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8011388:	2201      	movs	r2, #1
 801138a:	e001      	b.n	8011390 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 801138c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011390:	4413      	add	r3, r2
 8011392:	b29b      	uxth	r3, r3
 8011394:	b21a      	sxth	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 801139c:	e007      	b.n	80113ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2201      	movs	r2, #1
 80113a2:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2200      	movs	r2, #0
 80113a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 80113ac:	e059      	b.n	8011462 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80113b4:	2b03      	cmp	r3, #3
 80113b6:	d845      	bhi.n	8011444 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 80113b8:	a201      	add	r2, pc, #4	; (adr r2, 80113c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 80113ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113be:	bf00      	nop
 80113c0:	0801140b 	.word	0x0801140b
 80113c4:	0801140b 	.word	0x0801140b
 80113c8:	080113d1 	.word	0x080113d1
 80113cc:	080113d1 	.word	0x080113d1
            calculatedValue -= snapshot.getX();
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	330c      	adds	r3, #12
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fe f8e0 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 80113da:	4603      	mov	r3, r0
 80113dc:	4619      	mov	r1, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80113e4:	b29a      	uxth	r2, r3
 80113e6:	b28b      	uxth	r3, r1
 80113e8:	1ad3      	subs	r3, r2, r3
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	b21a      	sxth	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f103 000c 	add.w	r0, r3, #12
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011400:	2200      	movs	r2, #0
 8011402:	4619      	mov	r1, r3
 8011404:	f00a ffd8 	bl	801c3b8 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011408:	e020      	b.n	801144c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	330c      	adds	r3, #12
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe f8d0 	bl	800f5b4 <_ZNK8touchgfx8Drawable4getYEv>
 8011414:	4603      	mov	r3, r0
 8011416:	4619      	mov	r1, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801141e:	b29a      	uxth	r2, r3
 8011420:	b28b      	uxth	r3, r1
 8011422:	1ad3      	subs	r3, r2, r3
 8011424:	b29b      	uxth	r3, r3
 8011426:	b21a      	sxth	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f103 000c 	add.w	r0, r3, #12
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801143a:	461a      	mov	r2, r3
 801143c:	2100      	movs	r1, #0
 801143e:	f00a ffbb 	bl	801c3b8 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011442:	e003      	b.n	801144c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2201      	movs	r2, #1
 8011448:	721a      	strb	r2, [r3, #8]
            break;
 801144a:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6858      	ldr	r0, [r3, #4]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	3378      	adds	r3, #120	; 0x78
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	323c      	adds	r2, #60	; 0x3c
 801145e:	4611      	mov	r1, r2
 8011460:	4798      	blx	r3
    }
 8011462:	3708      	adds	r7, #8
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	2000b41b 	.word	0x2000b41b

0801146c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8011474:	4b0b      	ldr	r3, [pc, #44]	; (80114a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d00e      	beq.n	801149a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00a      	beq.n	801149a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6858      	ldr	r0, [r3, #4]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	685b      	ldr	r3, [r3, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	3364      	adds	r3, #100	; 0x64
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	320c      	adds	r2, #12
 8011496:	4611      	mov	r1, r2
 8011498:	4798      	blx	r3
    }
 801149a:	bf00      	nop
 801149c:	3708      	adds	r7, #8
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	2000b41b 	.word	0x2000b41b

080114a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b088      	sub	sp, #32
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80114b0:	4b1a      	ldr	r3, [pc, #104]	; (801151c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d02d      	beq.n	8011514 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fd ff9c 	bl	800f3f8 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80114c0:	4a17      	ldr	r2, [pc, #92]	; (8011520 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 80114c2:	f107 0318 	add.w	r3, r7, #24
 80114c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80114ce:	f107 0008 	add.w	r0, r7, #8
 80114d2:	f107 0318 	add.w	r3, r7, #24
 80114d6:	cb0c      	ldmia	r3, {r2, r3}
 80114d8:	6879      	ldr	r1, [r7, #4]
 80114da:	f7ff fddf 	bl	801109c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	3378      	adds	r3, #120	; 0x78
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f107 0108 	add.w	r1, r7, #8
 80114f0:	4610      	mov	r0, r2
 80114f2:	4798      	blx	r3
            screenContainer->add(snapshot);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6858      	ldr	r0, [r3, #4]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	3360      	adds	r3, #96	; 0x60
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	320c      	adds	r2, #12
 8011506:	4611      	mov	r1, r2
 8011508:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801150a:	f107 0308 	add.w	r3, r7, #8
 801150e:	4618      	mov	r0, r3
 8011510:	f7ff fb3a 	bl	8010b88 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8011514:	bf00      	nop
 8011516:	3720      	adds	r7, #32
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	2000b41b 	.word	0x2000b41b
 8011520:	080289a4 	.word	0x080289a4

08011524 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
        switch (direction)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011534:	2b03      	cmp	r3, #3
 8011536:	d83b      	bhi.n	80115b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8011538:	a201      	add	r2, pc, #4	; (adr r2, 8011540 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801153e:	bf00      	nop
 8011540:	08011581 	.word	0x08011581
 8011544:	0801159b 	.word	0x0801159b
 8011548:	08011551 	.word	0x08011551
 801154c:	08011567 	.word	0x08011567
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	3354      	adds	r3, #84	; 0x54
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4a18      	ldr	r2, [pc, #96]	; (80115bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801155a:	8812      	ldrh	r2, [r2, #0]
 801155c:	b211      	sxth	r1, r2
 801155e:	2200      	movs	r2, #0
 8011560:	6838      	ldr	r0, [r7, #0]
 8011562:	4798      	blx	r3
            break;
 8011564:	e025      	b.n	80115b2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3354      	adds	r3, #84	; 0x54
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	4a13      	ldr	r2, [pc, #76]	; (80115bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011570:	8812      	ldrh	r2, [r2, #0]
 8011572:	4252      	negs	r2, r2
 8011574:	b292      	uxth	r2, r2
 8011576:	b211      	sxth	r1, r2
 8011578:	2200      	movs	r2, #0
 801157a:	6838      	ldr	r0, [r7, #0]
 801157c:	4798      	blx	r3
            break;
 801157e:	e018      	b.n	80115b2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	3354      	adds	r3, #84	; 0x54
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4a0d      	ldr	r2, [pc, #52]	; (80115c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801158a:	8812      	ldrh	r2, [r2, #0]
 801158c:	4252      	negs	r2, r2
 801158e:	b292      	uxth	r2, r2
 8011590:	b212      	sxth	r2, r2
 8011592:	2100      	movs	r1, #0
 8011594:	6838      	ldr	r0, [r7, #0]
 8011596:	4798      	blx	r3
            break;
 8011598:	e00b      	b.n	80115b2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	3354      	adds	r3, #84	; 0x54
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	4a07      	ldr	r2, [pc, #28]	; (80115c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80115a4:	8812      	ldrh	r2, [r2, #0]
 80115a6:	b212      	sxth	r2, r2
 80115a8:	2100      	movs	r1, #0
 80115aa:	6838      	ldr	r0, [r7, #0]
 80115ac:	4798      	blx	r3
            break;
 80115ae:	e000      	b.n	80115b2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 80115b0:	bf00      	nop
    }
 80115b2:	bf00      	nop
 80115b4:	3708      	adds	r7, #8
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	2000b410 	.word	0x2000b410
 80115c0:	2000b412 	.word	0x2000b412

080115c4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	68d2      	ldr	r2, [r2, #12]
 80115d6:	1052      	asrs	r2, r2, #1
 80115d8:	1898      	adds	r0, r3, r2
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	f003 0301 	and.w	r3, r3, #1
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d102      	bne.n	80115ec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	689b      	ldr	r3, [r3, #8]
 80115ea:	e00a      	b.n	8011602 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	68d2      	ldr	r2, [r2, #12]
 80115f4:	1052      	asrs	r2, r2, #1
 80115f6:	4413      	add	r3, r2
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	6892      	ldr	r2, [r2, #8]
 80115fe:	4413      	add	r3, r2
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	6839      	ldr	r1, [r7, #0]
 8011604:	4798      	blx	r3
    }
 8011606:	bf00      	nop
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}

0801160e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801160e:	b480      	push	{r7}
 8011610:	b083      	sub	sp, #12
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d010      	beq.n	8011640 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d107      	bne.n	8011636 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	f003 0301 	and.w	r3, r3, #1
 801162e:	2b00      	cmp	r3, #0
 8011630:	d101      	bne.n	8011636 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011632:	2301      	movs	r3, #1
 8011634:	e000      	b.n	8011638 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011636:	2300      	movs	r3, #0
 8011638:	2b01      	cmp	r3, #1
 801163a:	d001      	beq.n	8011640 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801163c:	2301      	movs	r3, #1
 801163e:	e000      	b.n	8011642 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011640:	2300      	movs	r3, #0
    }
 8011642:	4618      	mov	r0, r3
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr
	...

08011650 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011650:	b590      	push	{r4, r7, lr}
 8011652:	b08b      	sub	sp, #44	; 0x2c
 8011654:	af02      	add	r7, sp, #8
 8011656:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	4618      	mov	r0, r3
 801165c:	f7fd feb8 	bl	800f3d0 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	7f9b      	ldrb	r3, [r3, #30]
 8011664:	3301      	adds	r3, #1
 8011666:	b2da      	uxtb	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	7f9a      	ldrb	r2, [r3, #30]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	7f5b      	ldrb	r3, [r3, #29]
 8011674:	429a      	cmp	r2, r3
 8011676:	d82b      	bhi.n	80116d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	7f9b      	ldrb	r3, [r3, #30]
 801167c:	b298      	uxth	r0, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	7f5b      	ldrb	r3, [r3, #29]
 8011688:	b29b      	uxth	r3, r3
 801168a:	2100      	movs	r1, #0
 801168c:	f00b fb7a 	bl	801cd84 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011690:	4603      	mov	r3, r0
 8011692:	461a      	mov	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801169e:	b29b      	uxth	r3, r3
 80116a0:	f003 0301 	and.w	r3, r3, #1
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d019      	beq.n	80116de <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80116b0:	b29b      	uxth	r3, r3
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80116b8:	2a00      	cmp	r2, #0
 80116ba:	dd01      	ble.n	80116c0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 80116bc:	2201      	movs	r2, #1
 80116be:	e001      	b.n	80116c4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 80116c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116c4:	4413      	add	r3, r2
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	b21a      	sxth	r2, r3
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	845a      	strh	r2, [r3, #34]	; 0x22
 80116ce:	e006      	b.n	80116de <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2201      	movs	r2, #1
 80116d4:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2200      	movs	r2, #0
 80116da:	779a      	strb	r2, [r3, #30]
            return;
 80116dc:	e0c0      	b.n	8011860 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	b21a      	sxth	r2, r3
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80116fe:	b29a      	uxth	r2, r3
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011706:	b29b      	uxth	r3, r3
 8011708:	4413      	add	r3, r2
 801170a:	b29b      	uxth	r3, r3
 801170c:	b21a      	sxth	r2, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	7f9b      	ldrb	r3, [r3, #30]
 8011716:	2b01      	cmp	r3, #1
 8011718:	f040 8097 	bne.w	801184a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 801171c:	4b52      	ldr	r3, [pc, #328]	; (8011868 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	f000 8092 	beq.w	801184a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 8011726:	f107 0314 	add.w	r3, r7, #20
 801172a:	4618      	mov	r0, r3
 801172c:	f7fd fd82 	bl	800f234 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	7f1b      	ldrb	r3, [r3, #28]
 8011734:	2b03      	cmp	r3, #3
 8011736:	d85b      	bhi.n	80117f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 8011738:	a201      	add	r2, pc, #4	; (adr r2, 8011740 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 801173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801173e:	bf00      	nop
 8011740:	080117a1 	.word	0x080117a1
 8011744:	080117cb 	.word	0x080117cb
 8011748:	08011751 	.word	0x08011751
 801174c:	08011777 	.word	0x08011777
                rect.x = 0;
 8011750:	2300      	movs	r3, #0
 8011752:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8011754:	2300      	movs	r3, #0
 8011756:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801175e:	b29a      	uxth	r2, r3
 8011760:	4b42      	ldr	r3, [pc, #264]	; (801186c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011762:	881b      	ldrh	r3, [r3, #0]
 8011764:	4413      	add	r3, r2
 8011766:	b29b      	uxth	r3, r3
 8011768:	b21b      	sxth	r3, r3
 801176a:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 801176c:	4b40      	ldr	r3, [pc, #256]	; (8011870 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	b21b      	sxth	r3, r3
 8011772:	837b      	strh	r3, [r7, #26]
                break;
 8011774:	e03d      	b.n	80117f2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801177c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 8011782:	4b3a      	ldr	r3, [pc, #232]	; (801186c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011784:	881a      	ldrh	r2, [r3, #0]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801178c:	b29b      	uxth	r3, r3
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	b29b      	uxth	r3, r3
 8011792:	b21b      	sxth	r3, r3
 8011794:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8011796:	4b36      	ldr	r3, [pc, #216]	; (8011870 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011798:	881b      	ldrh	r3, [r3, #0]
 801179a:	b21b      	sxth	r3, r3
 801179c:	837b      	strh	r3, [r7, #26]
                break;
 801179e:	e028      	b.n	80117f2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 80117a0:	2300      	movs	r3, #0
 80117a2:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80117aa:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 80117ac:	4b2f      	ldr	r3, [pc, #188]	; (801186c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 80117ae:	881b      	ldrh	r3, [r3, #0]
 80117b0:	b21b      	sxth	r3, r3
 80117b2:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 80117b4:	4b2e      	ldr	r3, [pc, #184]	; (8011870 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 80117b6:	881a      	ldrh	r2, [r3, #0]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80117be:	b29b      	uxth	r3, r3
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	b21b      	sxth	r3, r3
 80117c6:	837b      	strh	r3, [r7, #26]
                break;
 80117c8:	e013      	b.n	80117f2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 80117ca:	2300      	movs	r3, #0
 80117cc:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 80117d2:	4b26      	ldr	r3, [pc, #152]	; (801186c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 80117d4:	881b      	ldrh	r3, [r3, #0]
 80117d6:	b21b      	sxth	r3, r3
 80117d8:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	4b23      	ldr	r3, [pc, #140]	; (8011870 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 80117e4:	881b      	ldrh	r3, [r3, #0]
 80117e6:	4413      	add	r3, r2
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	b21b      	sxth	r3, r3
 80117ec:	837b      	strh	r3, [r7, #26]
                break;
 80117ee:	e000      	b.n	80117f2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 80117f0:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80117f2:	f7fd ffe3 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 80117f6:	4602      	mov	r2, r0
 80117f8:	6813      	ldr	r3, [r2, #0]
 80117fa:	3328      	adds	r3, #40	; 0x28
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	4610      	mov	r0, r2
 8011800:	4798      	blx	r3
 8011802:	61f8      	str	r0, [r7, #28]
            Rect source;
 8011804:	f107 030c 	add.w	r3, r7, #12
 8011808:	4618      	mov	r0, r3
 801180a:	f7fd fd13 	bl	800f234 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 801180e:	2300      	movs	r3, #0
 8011810:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 8011812:	2300      	movs	r3, #0
 8011814:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 8011816:	4b15      	ldr	r3, [pc, #84]	; (801186c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011818:	881b      	ldrh	r3, [r3, #0]
 801181a:	b21b      	sxth	r3, r3
 801181c:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 801181e:	4b14      	ldr	r3, [pc, #80]	; (8011870 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	b21b      	sxth	r3, r3
 8011824:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8011826:	f7fd ffc9 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 801182a:	f7fd ffd3 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 801182e:	6803      	ldr	r3, [r0, #0]
 8011830:	330c      	adds	r3, #12
 8011832:	681c      	ldr	r4, [r3, #0]
 8011834:	f107 0114 	add.w	r1, r7, #20
 8011838:	f107 020c 	add.w	r2, r7, #12
 801183c:	2300      	movs	r3, #0
 801183e:	9301      	str	r3, [sp, #4]
 8011840:	23ff      	movs	r3, #255	; 0xff
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	460b      	mov	r3, r1
 8011846:	69f9      	ldr	r1, [r7, #28]
 8011848:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6858      	ldr	r0, [r3, #4]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	3378      	adds	r3, #120	; 0x78
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	320c      	adds	r2, #12
 801185c:	4611      	mov	r1, r2
 801185e:	4798      	blx	r3
    }
 8011860:	3724      	adds	r7, #36	; 0x24
 8011862:	46bd      	mov	sp, r7
 8011864:	bd90      	pop	{r4, r7, pc}
 8011866:	bf00      	nop
 8011868:	2000b41a 	.word	0x2000b41a
 801186c:	2000b410 	.word	0x2000b410
 8011870:	2000b412 	.word	0x2000b412

08011874 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6858      	ldr	r0, [r3, #4]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3364      	adds	r3, #100	; 0x64
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	3228      	adds	r2, #40	; 0x28
 801188e:	4611      	mov	r1, r2
 8011890:	4798      	blx	r3
    }
 8011892:	bf00      	nop
 8011894:	3708      	adds	r7, #8
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
	...

0801189c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 801189c:	b580      	push	{r7, lr}
 801189e:	b088      	sub	sp, #32
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
        Transition::init();
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7fd fda6 	bl	800f3f8 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 80118ac:	4a16      	ldr	r2, [pc, #88]	; (8011908 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 80118ae:	f107 0318 	add.w	r3, r7, #24
 80118b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80118ba:	f107 0008 	add.w	r0, r7, #8
 80118be:	f107 0318 	add.w	r3, r7, #24
 80118c2:	cb0c      	ldmia	r3, {r2, r3}
 80118c4:	6879      	ldr	r1, [r7, #4]
 80118c6:	f7ff fc5b 	bl	8011180 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	685a      	ldr	r2, [r3, #4]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	3378      	adds	r3, #120	; 0x78
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f107 0108 	add.w	r1, r7, #8
 80118dc:	4610      	mov	r0, r2
 80118de:	4798      	blx	r3
        screenContainer->add(solid);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6858      	ldr	r0, [r3, #4]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	3360      	adds	r3, #96	; 0x60
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	3228      	adds	r2, #40	; 0x28
 80118f2:	4611      	mov	r1, r2
 80118f4:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 80118f6:	f107 0308 	add.w	r3, r7, #8
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7ff fa76 	bl	8010dec <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8011900:	bf00      	nop
 8011902:	3720      	adds	r7, #32
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	080289ac 	.word	0x080289ac

0801190c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	7f1b      	ldrb	r3, [r3, #28]
 801191a:	2b03      	cmp	r3, #3
 801191c:	d83a      	bhi.n	8011994 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 801191e:	a201      	add	r2, pc, #4	; (adr r2, 8011924 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 8011920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011924:	08011965 	.word	0x08011965
 8011928:	0801197f 	.word	0x0801197f
 801192c:	08011935 	.word	0x08011935
 8011930:	0801194b 	.word	0x0801194b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	3354      	adds	r3, #84	; 0x54
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4a18      	ldr	r2, [pc, #96]	; (80119a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 801193e:	8812      	ldrh	r2, [r2, #0]
 8011940:	b211      	sxth	r1, r2
 8011942:	2200      	movs	r2, #0
 8011944:	6838      	ldr	r0, [r7, #0]
 8011946:	4798      	blx	r3
            break;
 8011948:	e025      	b.n	8011996 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	3354      	adds	r3, #84	; 0x54
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	4a13      	ldr	r2, [pc, #76]	; (80119a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8011954:	8812      	ldrh	r2, [r2, #0]
 8011956:	4252      	negs	r2, r2
 8011958:	b292      	uxth	r2, r2
 801195a:	b211      	sxth	r1, r2
 801195c:	2200      	movs	r2, #0
 801195e:	6838      	ldr	r0, [r7, #0]
 8011960:	4798      	blx	r3
            break;
 8011962:	e018      	b.n	8011996 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	3354      	adds	r3, #84	; 0x54
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4a0d      	ldr	r2, [pc, #52]	; (80119a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801196e:	8812      	ldrh	r2, [r2, #0]
 8011970:	4252      	negs	r2, r2
 8011972:	b292      	uxth	r2, r2
 8011974:	b212      	sxth	r2, r2
 8011976:	2100      	movs	r1, #0
 8011978:	6838      	ldr	r0, [r7, #0]
 801197a:	4798      	blx	r3
            break;
 801197c:	e00b      	b.n	8011996 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	3354      	adds	r3, #84	; 0x54
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a07      	ldr	r2, [pc, #28]	; (80119a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011988:	8812      	ldrh	r2, [r2, #0]
 801198a:	b212      	sxth	r2, r2
 801198c:	2100      	movs	r1, #0
 801198e:	6838      	ldr	r0, [r7, #0]
 8011990:	4798      	blx	r3
            break;
 8011992:	e000      	b.n	8011996 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 8011994:	bf00      	nop
    }
 8011996:	bf00      	nop
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	2000b410 	.word	0x2000b410
 80119a4:	2000b412 	.word	0x2000b412

080119a8 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80119a8:	b480      	push	{r7}
 80119aa:	b083      	sub	sp, #12
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
        }
 80119b2:	bf00      	nop
 80119b4:	370c      	adds	r7, #12
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr
	...

080119c0 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af02      	add	r7, sp, #8
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80119ca:	4b08      	ldr	r3, [pc, #32]	; (80119ec <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 80119cc:	881b      	ldrh	r3, [r3, #0]
 80119ce:	b21a      	sxth	r2, r3
 80119d0:	4b07      	ldr	r3, [pc, #28]	; (80119f0 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 80119d2:	881b      	ldrh	r3, [r3, #0]
 80119d4:	b21b      	sxth	r3, r3
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	4613      	mov	r3, r2
 80119da:	2200      	movs	r2, #0
 80119dc:	2100      	movs	r1, #0
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f7fd fc3f 	bl	800f262 <_ZN8touchgfx4RectC1Essss>
        }
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	3708      	adds	r7, #8
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}
 80119ec:	2000b410 	.word	0x2000b410
 80119f0:	2000b412 	.word	0x2000b412

080119f4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	68d2      	ldr	r2, [r2, #12]
 8011a06:	1052      	asrs	r2, r2, #1
 8011a08:	1898      	adds	r0, r3, r2
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	f003 0301 	and.w	r3, r3, #1
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d102      	bne.n	8011a1c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	689b      	ldr	r3, [r3, #8]
 8011a1a:	e00a      	b.n	8011a32 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	687a      	ldr	r2, [r7, #4]
 8011a22:	68d2      	ldr	r2, [r2, #12]
 8011a24:	1052      	asrs	r2, r2, #1
 8011a26:	4413      	add	r3, r2
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	6892      	ldr	r2, [r2, #8]
 8011a2e:	4413      	add	r3, r2
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	6839      	ldr	r1, [r7, #0]
 8011a34:	4798      	blx	r3
    }
 8011a36:	bf00      	nop
 8011a38:	3708      	adds	r7, #8
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8011a3e:	b480      	push	{r7}
 8011a40:	b083      	sub	sp, #12
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d010      	beq.n	8011a70 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	689b      	ldr	r3, [r3, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d107      	bne.n	8011a66 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	f003 0301 	and.w	r3, r3, #1
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d101      	bne.n	8011a66 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011a62:	2301      	movs	r3, #1
 8011a64:	e000      	b.n	8011a68 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011a66:	2300      	movs	r3, #0
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	d001      	beq.n	8011a70 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	e000      	b.n	8011a72 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011a70:	2300      	movs	r3, #0
    }
 8011a72:	4618      	mov	r0, r3
 8011a74:	370c      	adds	r7, #12
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr

08011a7e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b082      	sub	sp, #8
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	68d2      	ldr	r2, [r2, #12]
 8011a8e:	1052      	asrs	r2, r2, #1
 8011a90:	1899      	adds	r1, r3, r2
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	f003 0301 	and.w	r3, r3, #1
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d102      	bne.n	8011aa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	689b      	ldr	r3, [r3, #8]
 8011aa2:	e00a      	b.n	8011aba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	68d2      	ldr	r2, [r2, #12]
 8011aac:	1052      	asrs	r2, r2, #1
 8011aae:	4413      	add	r3, r2
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	6892      	ldr	r2, [r2, #8]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	4608      	mov	r0, r1
 8011abc:	4798      	blx	r3
    }
 8011abe:	bf00      	nop
 8011ac0:	3708      	adds	r7, #8
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}

08011ac6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8011ac6:	b480      	push	{r7}
 8011ac8:	b083      	sub	sp, #12
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d010      	beq.n	8011af8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d107      	bne.n	8011aee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	f003 0301 	and.w	r3, r3, #1
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d101      	bne.n	8011aee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011aea:	2301      	movs	r3, #1
 8011aec:	e000      	b.n	8011af0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011aee:	2300      	movs	r3, #0
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d001      	beq.n	8011af8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011af4:	2301      	movs	r3, #1
 8011af6:	e000      	b.n	8011afa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8011af8:	2300      	movs	r3, #0
    }
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8011b06:	b480      	push	{r7}
 8011b08:	b083      	sub	sp, #12
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	6039      	str	r1, [r7, #0]
        color = col;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	683a      	ldr	r2, [r7, #0]
 8011b14:	601a      	str	r2, [r3, #0]
    }
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	370c      	adds	r7, #12
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr

08011b24 <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
    /**
     * Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011b32:	b29a      	uxth	r2, r3
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	1ad3      	subs	r3, r2, r3
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	b21b      	sxth	r3, r3
    }
 8011b42:	4618      	mov	r0, r3
 8011b44:	370c      	adds	r7, #12
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr

08011b4e <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
    /**
     * Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 8011b4e:	b480      	push	{r7}
 8011b50:	b083      	sub	sp, #12
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	b21b      	sxth	r3, r3
    }
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	370c      	adds	r7, #12
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr

08011b78 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	460b      	mov	r3, r1
 8011b82:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	887a      	ldrh	r2, [r7, #2]
 8011b88:	801a      	strh	r2, [r3, #0]
    {
    }
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	370c      	adds	r7, #12
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr

08011b98 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	78fa      	ldrb	r2, [r7, #3]
 8011ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8011bac:	bf00      	nop
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr

08011bb8 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
    {
 8011bc0:	4a06      	ldr	r2, [pc, #24]	; (8011bdc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	601a      	str	r2, [r3, #0]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	3304      	adds	r3, #4
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f000 ffb0 	bl	8012b30 <_ZN8touchgfx9ContainerD1Ev>
    }
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3708      	adds	r7, #8
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	0802c2c0 	.word	0x0802c2c0

08011be0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
    }
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7ff ffe5 	bl	8011bb8 <_ZN8touchgfx6ScreenD1Ev>
 8011bee:	213c      	movs	r1, #60	; 0x3c
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f015 fd63 	bl	80276bc <_ZdlPvj>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
    {
    }
 8011c08:	bf00      	nop
 8011c0a:	370c      	adds	r7, #12
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c12:	4770      	bx	lr

08011c14 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8011c14:	b480      	push	{r7}
 8011c16:	b083      	sub	sp, #12
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
    {
    }
 8011c1c:	bf00      	nop
 8011c1e:	370c      	adds	r7, #12
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr

08011c28 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 8011c28:	b480      	push	{r7}
 8011c2a:	b083      	sub	sp, #12
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
    {
    }
 8011c30:	bf00      	nop
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr

08011c3c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8011c3c:	b480      	push	{r7}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
    {
    }
 8011c44:	bf00      	nop
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8011c50:	b480      	push	{r7}
 8011c52:	b083      	sub	sp, #12
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	460b      	mov	r3, r1
 8011c5a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011c5c:	bf00      	nop
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	3304      	adds	r3, #4
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f006 f853 	bl	8017d24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8011c7e:	bf00      	nop
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8011c86:	b480      	push	{r7}
 8011c88:	b083      	sub	sp, #12
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8011c92:	4618      	mov	r0, r3
 8011c94:	370c      	adds	r7, #12
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr

08011c9e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8011c9e:	b480      	push	{r7}
 8011ca0:	b083      	sub	sp, #12
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
 8011ca6:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	683a      	ldr	r2, [r7, #0]
 8011cac:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8011cae:	bf00      	nop
 8011cb0:	370c      	adds	r7, #12
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr
	...

08011cbc <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	4a05      	ldr	r2, [pc, #20]	; (8011cdc <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fd fec7 	bl	800fa60 <_ZN8touchgfx6WidgetD1Ev>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3708      	adds	r7, #8
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	0802ba28 	.word	0x0802ba28

08011ce0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f7ff ffe7 	bl	8011cbc <_ZN8touchgfx14AbstractButtonD1Ev>
 8011cee:	2130      	movs	r1, #48	; 0x30
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f015 fce3 	bl	80276bc <_ZdlPvj>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	2326      	movs	r3, #38	; 0x26
 8011d0e:	461a      	mov	r2, r3
 8011d10:	2100      	movs	r1, #0
 8011d12:	f015 fd88 	bl	8027826 <memset>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7fd fe8f 	bl	800fa3c <_ZN8touchgfx6WidgetC1Ev>
 8011d1e:	4a0b      	ldr	r2, [pc, #44]	; (8011d4c <_ZN8touchgfx3BoxC1Ev+0x4c>)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	601a      	str	r2, [r3, #0]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	22ff      	movs	r2, #255	; 0xff
 8011d28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	3328      	adds	r3, #40	; 0x28
 8011d30:	2100      	movs	r1, #0
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7ff fee7 	bl	8011b06 <_ZN8touchgfx9colortypeC1Em>
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	4618      	mov	r0, r3
 8011d44:	3708      	adds	r7, #8
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	0802bc70 	.word	0x0802bc70

08011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	683a      	ldr	r2, [r7, #0]
 8011d5e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8011d60:	bf00      	nop
 8011d62:	370c      	adds	r7, #12
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr

08011d6c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 8011d74:	4a0a      	ldr	r2, [pc, #40]	; (8011da0 <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	601a      	str	r2, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	809a      	strh	r2, [r3, #4]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2200      	movs	r2, #0
 8011d84:	80da      	strh	r2, [r3, #6]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	22ff      	movs	r2, #255	; 0xff
 8011d8a:	721a      	strb	r2, [r3, #8]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	22ff      	movs	r2, #255	; 0xff
 8011d90:	725a      	strb	r2, [r3, #9]
    {
    }
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	4618      	mov	r0, r3
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr
 8011da0:	08029a50 	.word	0x08029a50

08011da4 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
    {
 8011dac:	4a04      	ldr	r2, [pc, #16]	; (8011dc0 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	601a      	str	r2, [r3, #0]
    }
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	4618      	mov	r0, r3
 8011db6:	370c      	adds	r7, #12
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr
 8011dc0:	08029a50 	.word	0x08029a50

08011dc4 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
    }
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f7ff ffe9 	bl	8011da4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8011dd2:	210c      	movs	r1, #12
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f015 fc71 	bl	80276bc <_ZdlPvj>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	460b      	mov	r3, r1
 8011dee:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	78fa      	ldrb	r2, [r7, #3]
 8011df4:	725a      	strb	r2, [r3, #9]
    }
 8011df6:	bf00      	nop
 8011df8:	370c      	adds	r7, #12
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr

08011e02 <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 8011e02:	b480      	push	{r7}
 8011e04:	b083      	sub	sp, #12
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	7a5b      	ldrb	r3, [r3, #9]
    }
 8011e0e:	4618      	mov	r0, r3
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr

08011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8011e1a:	b480      	push	{r7}
 8011e1c:	b083      	sub	sp, #12
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
 8011e22:	6039      	str	r1, [r7, #0]
            : v(i)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	683a      	ldr	r2, [r7, #0]
 8011e28:	601a      	str	r2, [r3, #0]
        {
        }
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @note The painter set with setPainter() can also have an alpha value. The alpha value of
     *       the painter and the alpha value of the CanvasWidget are combine to a single
     *       alpha value.
     */
    virtual void setAlpha(uint8_t alpha)
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	460b      	mov	r3, r1
 8011e42:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	78fa      	ldrb	r2, [r7, #3]
 8011e48:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 8011e4c:	bf00      	nop
 8011e4e:	370c      	adds	r7, #12
 8011e50:	46bd      	mov	sp, r7
 8011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e56:	4770      	bx	lr

08011e58 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     * @return Gets the current alpha value of the Box.
     *
     * @see setAlpha
     */
    virtual uint8_t getAlpha() const
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 8011e66:	4618      	mov	r0, r3
 8011e68:	370c      	adds	r7, #12
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr
	...

08011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8011e74:	b590      	push	{r4, r7, lr}
 8011e76:	b083      	sub	sp, #12
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	71fb      	strb	r3, [r7, #7]
 8011e7e:	460b      	mov	r3, r1
 8011e80:	71bb      	strb	r3, [r7, #6]
 8011e82:	4613      	mov	r3, r2
 8011e84:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8011e86:	f7fd fc99 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d105      	bne.n	8011e9c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8011e90:	4b0a      	ldr	r3, [pc, #40]	; (8011ebc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8011e92:	4a0b      	ldr	r2, [pc, #44]	; (8011ec0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8011e94:	2135      	movs	r1, #53	; 0x35
 8011e96:	480b      	ldr	r0, [pc, #44]	; (8011ec4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8011e98:	f015 fc3c 	bl	8027714 <__assert_func>
 8011e9c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8011e9e:	f7fd fc99 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 8011ea2:	6803      	ldr	r3, [r0, #0]
 8011ea4:	3328      	adds	r3, #40	; 0x28
 8011ea6:	681c      	ldr	r4, [r3, #0]
 8011ea8:	797b      	ldrb	r3, [r7, #5]
 8011eaa:	79ba      	ldrb	r2, [r7, #6]
 8011eac:	79f9      	ldrb	r1, [r7, #7]
 8011eae:	47a0      	blx	r4
 8011eb0:	4603      	mov	r3, r0
    }
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	370c      	adds	r7, #12
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd90      	pop	{r4, r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	080289b4 	.word	0x080289b4
 8011ec0:	08029ae8 	.word	0x08029ae8
 8011ec4:	080289f8 	.word	0x080289f8

08011ec8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7ff ff4a 	bl	8011d6c <_ZN8touchgfx15AbstractPainterC1Ev>
 8011ed8:	4a27      	ldr	r2, [pc, #156]	; (8011f78 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	601a      	str	r2, [r3, #0]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	60da      	str	r2, [r3, #12]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	611a      	str	r2, [r3, #16]
 8011eea:	2301      	movs	r3, #1
 8011eec:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8011eee:	f7fd fc71 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 8011ef2:	4602      	mov	r2, r0
 8011ef4:	6813      	ldr	r3, [r2, #0]
 8011ef6:	3320      	adds	r3, #32
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4610      	mov	r0, r2
 8011efc:	4798      	blx	r3
 8011efe:	4603      	mov	r3, r0
 8011f00:	461a      	mov	r2, r3
 8011f02:	7bfb      	ldrb	r3, [r7, #15]
 8011f04:	4293      	cmp	r3, r2
 8011f06:	bf0c      	ite	eq
 8011f08:	2301      	moveq	r3, #1
 8011f0a:	2300      	movne	r3, #0
 8011f0c:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8011f0e:	f7fd fc55 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 8011f12:	4603      	mov	r3, r0
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ff feb6 	bl	8011c86 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	bf14      	ite	ne
 8011f20:	2301      	movne	r3, #1
 8011f22:	2300      	moveq	r3, #0
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d016      	beq.n	8011f58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x90>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8011f2a:	f7fd fc47 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7ff fea8 	bl	8011c86 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8011f36:	4602      	mov	r2, r0
 8011f38:	6813      	ldr	r3, [r2, #0]
 8011f3a:	3320      	adds	r3, #32
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4610      	mov	r0, r2
 8011f40:	4798      	blx	r3
 8011f42:	4603      	mov	r3, r0
 8011f44:	461a      	mov	r2, r3
 8011f46:	7bfb      	ldrb	r3, [r7, #15]
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	bf0c      	ite	eq
 8011f4c:	2301      	moveq	r3, #1
 8011f4e:	2300      	movne	r3, #0
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	7bbb      	ldrb	r3, [r7, #14]
 8011f54:	4313      	orrs	r3, r2
 8011f56:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8011f58:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d105      	bne.n	8011f6a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa2>
 8011f5e:	4b07      	ldr	r3, [pc, #28]	; (8011f7c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 8011f60:	4a07      	ldr	r2, [pc, #28]	; (8011f80 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8011f62:	212b      	movs	r1, #43	; 0x2b
 8011f64:	4807      	ldr	r0, [pc, #28]	; (8011f84 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8011f66:	f015 fbd5 	bl	8027714 <__assert_func>
 8011f6a:	bf00      	nop
    }
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	0802b698 	.word	0x0802b698
 8011f7c:	08028a38 	.word	0x08028a38
 8011f80:	08029a7c 	.word	0x08029a7c
 8011f84:	08028a98 	.word	0x08028a98

08011f88 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	4a05      	ldr	r2, [pc, #20]	; (8011fa8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7ff ff03 	bl	8011da4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3708      	adds	r7, #8
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	0802b698 	.word	0x0802b698

08011fac <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7ff ffe7 	bl	8011f88 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011fba:	2114      	movs	r1, #20
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f015 fb7d 	bl	80276bc <_ZdlPvj>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB888(colortype color = 0, uint8_t alpha = 255)
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	4613      	mov	r3, r2
 8011fd8:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB888()
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7ff ff73 	bl	8011ec8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8011fe2:	4a09      	ldr	r2, [pc, #36]	; (8012008 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x3c>)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 8011fe8:	68b9      	ldr	r1, [r7, #8]
 8011fea:	68f8      	ldr	r0, [r7, #12]
 8011fec:	f000 f80e 	bl	801200c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        setAlpha(alpha);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	79fa      	ldrb	r2, [r7, #7]
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7ff fef4 	bl	8011de4 <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	0802b740 	.word	0x0802b740

0801200c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 801200c:	b580      	push	{r7, lr}
 801200e:	b086      	sub	sp, #24
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	617b      	str	r3, [r7, #20]
     *
     * @see LCD16bpp::getRedFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedColor(colortype color)
    {
        return HAL::lcd().getRedColor(color);
 801201a:	f7fd fbdb 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 801201e:	4602      	mov	r2, r0
 8012020:	6813      	ldr	r3, [r2, #0]
 8012022:	332c      	adds	r3, #44	; 0x2c
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	6979      	ldr	r1, [r7, #20]
 8012028:	4610      	mov	r0, r2
 801202a:	4798      	blx	r3
 801202c:	4603      	mov	r3, r0
 801202e:	461a      	mov	r2, r3
    {
        painterRed = Color::getRedColor(color);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	751a      	strb	r2, [r3, #20]
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	613b      	str	r3, [r7, #16]
     *
     * @see LCD16bpp::getGreenFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenColor(colortype color)
    {
        return HAL::lcd().getGreenColor(color);
 8012038:	f7fd fbcc 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 801203c:	4602      	mov	r2, r0
 801203e:	6813      	ldr	r3, [r2, #0]
 8012040:	3330      	adds	r3, #48	; 0x30
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	6939      	ldr	r1, [r7, #16]
 8012046:	4610      	mov	r0, r2
 8012048:	4798      	blx	r3
 801204a:	4603      	mov	r3, r0
 801204c:	461a      	mov	r2, r3
        painterGreen = Color::getGreenColor(color);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	755a      	strb	r2, [r3, #21]
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	60fb      	str	r3, [r7, #12]
     *
     * @see LCD16bpp::getBlueFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueColor(colortype color)
    {
        return HAL::lcd().getBlueColor(color);
 8012056:	f7fd fbbd 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 801205a:	4602      	mov	r2, r0
 801205c:	6813      	ldr	r3, [r2, #0]
 801205e:	3334      	adds	r3, #52	; 0x34
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	68f9      	ldr	r1, [r7, #12]
 8012064:	4610      	mov	r0, r2
 8012066:	4798      	blx	r3
 8012068:	4603      	mov	r3, r0
 801206a:	461a      	mov	r2, r3
        painterBlue = Color::getBlueColor(color);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	759a      	strb	r2, [r3, #22]
    }
 8012070:	bf00      	nop
 8012072:	3718      	adds	r7, #24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	460b      	mov	r3, r1
 8012082:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8012084:	4a06      	ldr	r2, [pc, #24]	; (80120a0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	601a      	str	r2, [r3, #0]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	887a      	ldrh	r2, [r7, #2]
 801208e:	809a      	strh	r2, [r3, #4]
    }
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	4618      	mov	r0, r3
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	080290a0 	.word	0x080290a0

080120a4 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	889a      	ldrh	r2, [r3, #4]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	809a      	strh	r2, [r3, #4]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4618      	mov	r0, r3
 80120ba:	370c      	adds	r7, #12
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr

080120c4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	3334      	adds	r3, #52	; 0x34
 80120d2:	6839      	ldr	r1, [r7, #0]
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7ff ffe5 	bl	80120a4 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 f820 	bl	8012120 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 80120e0:	bf00      	nop
 80120e2:	3708      	adds	r7, #8
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	683a      	ldr	r2, [r7, #0]
 80120f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80120f8:	bf00      	nop
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr

08012104 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	683a      	ldr	r2, [r7, #0]
 8012112:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8012114:	bf00      	nop
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8012120:	b590      	push	{r4, r7, lr}
 8012122:	b08b      	sub	sp, #44	; 0x2c
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	3334      	adds	r3, #52	; 0x34
 801212c:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	889b      	ldrh	r3, [r3, #4]
 8012132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012136:	4293      	cmp	r3, r2
 8012138:	bf14      	ite	ne
 801213a:	2301      	movne	r3, #1
 801213c:	2300      	moveq	r3, #0
 801213e:	b2db      	uxtb	r3, r3
 8012140:	2b00      	cmp	r3, #0
 8012142:	d06f      	beq.n	8012224 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	3334      	adds	r3, #52	; 0x34
 8012148:	613b      	str	r3, [r7, #16]
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801214e:	4b39      	ldr	r3, [pc, #228]	; (8012234 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d105      	bne.n	8012162 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 8012156:	4b38      	ldr	r3, [pc, #224]	; (8012238 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 8012158:	4a38      	ldr	r2, [pc, #224]	; (801223c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 801215a:	21b1      	movs	r1, #177	; 0xb1
 801215c:	4838      	ldr	r0, [pc, #224]	; (8012240 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 801215e:	f015 fad9 	bl	8027714 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	889a      	ldrh	r2, [r3, #4]
 8012166:	4b37      	ldr	r3, [pc, #220]	; (8012244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8012168:	881b      	ldrh	r3, [r3, #0]
 801216a:	429a      	cmp	r2, r3
 801216c:	d305      	bcc.n	801217a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 801216e:	4b36      	ldr	r3, [pc, #216]	; (8012248 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8012170:	4a32      	ldr	r2, [pc, #200]	; (801223c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8012172:	21b2      	movs	r1, #178	; 0xb2
 8012174:	4832      	ldr	r0, [pc, #200]	; (8012240 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8012176:	f015 facd 	bl	8027714 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 801217a:	4b34      	ldr	r3, [pc, #208]	; (801224c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	4b2d      	ldr	r3, [pc, #180]	; (8012234 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8012180:	6819      	ldr	r1, [r3, #0]
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	889b      	ldrh	r3, [r3, #4]
 8012186:	005b      	lsls	r3, r3, #1
 8012188:	440b      	add	r3, r1
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	009b      	lsls	r3, r3, #2
 801218e:	4413      	add	r3, r2
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	3334      	adds	r3, #52	; 0x34
 8012198:	61bb      	str	r3, [r7, #24]
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801219e:	4b25      	ldr	r3, [pc, #148]	; (8012234 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d105      	bne.n	80121b2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 80121a6:	4b24      	ldr	r3, [pc, #144]	; (8012238 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 80121a8:	4a24      	ldr	r2, [pc, #144]	; (801223c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80121aa:	21b1      	movs	r1, #177	; 0xb1
 80121ac:	4824      	ldr	r0, [pc, #144]	; (8012240 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80121ae:	f015 fab1 	bl	8027714 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	889a      	ldrh	r2, [r3, #4]
 80121b6:	4b23      	ldr	r3, [pc, #140]	; (8012244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80121b8:	881b      	ldrh	r3, [r3, #0]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d305      	bcc.n	80121ca <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 80121be:	4b22      	ldr	r3, [pc, #136]	; (8012248 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80121c0:	4a1e      	ldr	r2, [pc, #120]	; (801223c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80121c2:	21b2      	movs	r1, #178	; 0xb2
 80121c4:	481e      	ldr	r0, [pc, #120]	; (8012240 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80121c6:	f015 faa5 	bl	8027714 <__assert_func>
        return texts->getText(typedTextId);
 80121ca:	4b21      	ldr	r3, [pc, #132]	; (8012250 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	889b      	ldrh	r3, [r3, #4]
 80121d2:	4619      	mov	r1, r3
 80121d4:	4610      	mov	r0, r2
 80121d6:	f002 fcad 	bl	8014b34 <_ZNK8touchgfx5Texts7getTextEt>
 80121da:	4603      	mov	r3, r0
 80121dc:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80121de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	3328      	adds	r3, #40	; 0x28
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	6a39      	ldr	r1, [r7, #32]
 80121e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121ea:	4798      	blx	r3
 80121ec:	4603      	mov	r3, r0
 80121ee:	b2dc      	uxtb	r4, r3
 80121f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	3340      	adds	r3, #64	; 0x40
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	6a39      	ldr	r1, [r7, #32]
 80121fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121fc:	4798      	blx	r3
 80121fe:	4603      	mov	r3, r0
 8012200:	b2db      	uxtb	r3, r3
 8012202:	fb14 f303 	smulbb	r3, r4, r3
 8012206:	b2dc      	uxtb	r4, r3
 8012208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	3324      	adds	r3, #36	; 0x24
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	6a39      	ldr	r1, [r7, #32]
 8012212:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012214:	4798      	blx	r3
 8012216:	4603      	mov	r3, r0
 8012218:	4423      	add	r3, r4
 801221a:	b2da      	uxtb	r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8012222:	e003      	b.n	801222c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 801222c:	bf00      	nop
 801222e:	372c      	adds	r7, #44	; 0x2c
 8012230:	46bd      	mov	sp, r7
 8012232:	bd90      	pop	{r4, r7, pc}
 8012234:	2000b4ac 	.word	0x2000b4ac
 8012238:	08028af8 	.word	0x08028af8
 801223c:	08029ab8 	.word	0x08029ab8
 8012240:	08028b3c 	.word	0x08028b3c
 8012244:	2000b4b0 	.word	0x2000b4b0
 8012248:	08028b80 	.word	0x08028b80
 801224c:	2000b4b4 	.word	0x2000b4b4
 8012250:	2000b4b8 	.word	0x2000b4b8

08012254 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4618      	mov	r0, r3
 8012260:	2326      	movs	r3, #38	; 0x26
 8012262:	461a      	mov	r2, r3
 8012264:	2100      	movs	r1, #0
 8012266:	f015 fade 	bl	8027826 <memset>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	4618      	mov	r0, r3
 801226e:	f7fd fbe5 	bl	800fa3c <_ZN8touchgfx6WidgetC1Ev>
 8012272:	4a14      	ldr	r2, [pc, #80]	; (80122c4 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	3328      	adds	r3, #40	; 0x28
 801227c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012280:	4618      	mov	r0, r3
 8012282:	f7ff fef9 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	3330      	adds	r3, #48	; 0x30
 801228a:	2100      	movs	r1, #0
 801228c:	4618      	mov	r0, r3
 801228e:	f7ff fc3a 	bl	8011b06 <_ZN8touchgfx9colortypeC1Em>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2200      	movs	r2, #0
 8012296:	869a      	strh	r2, [r3, #52]	; 0x34
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	22ff      	movs	r2, #255	; 0xff
 801229c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2200      	movs	r2, #0
 80122ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	4618      	mov	r0, r3
 80122bc:	3708      	adds	r7, #8
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	0802bbc4 	.word	0x0802bbc4

080122c8 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>:
class View : public Screen
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	4a05      	ldr	r2, [pc, #20]	; (80122e8 <_ZN8touchgfx4ViewI13PongPresenterED1Ev+0x20>)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	601a      	str	r2, [r3, #0]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4618      	mov	r0, r3
 80122da:	f7ff fc6d 	bl	8011bb8 <_ZN8touchgfx6ScreenD1Ev>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	4618      	mov	r0, r3
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	08029a1c 	.word	0x08029a1c

080122ec <_ZN8touchgfx4ViewI13PongPresenterED0Ev>:
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f7ff ffe7 	bl	80122c8 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 80122fa:	2140      	movs	r1, #64	; 0x40
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f015 f9dd 	bl	80276bc <_ZdlPvj>
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	4618      	mov	r0, r3
 8012306:	3708      	adds	r7, #8
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <_ZN12PongViewBaseD1Ev>:

class PongViewBase : public touchgfx::View<PongPresenter>
{
public:
    PongViewBase();
    virtual ~PongViewBase() {}
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	4a1b      	ldr	r2, [pc, #108]	; (8012384 <_ZN12PongViewBaseD1Ev+0x78>)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	601a      	str	r2, [r3, #0]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8012320:	4618      	mov	r0, r3
 8012322:	f000 fb9f 	bl	8012a64 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 801232c:	4618      	mov	r0, r3
 801232e:	f000 fc8d 	bl	8012c4c <_ZN8touchgfx8TextAreaD1Ev>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012338:	4618      	mov	r0, r3
 801233a:	f000 fc87 	bl	8012c4c <_ZN8touchgfx8TextAreaD1Ev>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012344:	4618      	mov	r0, r3
 8012346:	f000 fc59 	bl	8012bfc <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	33f0      	adds	r3, #240	; 0xf0
 801234e:	4618      	mov	r0, r3
 8012350:	f000 fbaa 	bl	8012aa8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	33d8      	adds	r3, #216	; 0xd8
 8012358:	4618      	mov	r0, r3
 801235a:	f000 fc0b 	bl	8012b74 <_ZN8touchgfx13PainterRGB888D1Ev>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	3370      	adds	r3, #112	; 0x70
 8012362:	4618      	mov	r0, r3
 8012364:	f000 fbc2 	bl	8012aec <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	3340      	adds	r3, #64	; 0x40
 801236c:	4618      	mov	r0, r3
 801236e:	f000 fac1 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	4618      	mov	r0, r3
 8012376:	f7ff ffa7 	bl	80122c8 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	4618      	mov	r0, r3
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}
 8012384:	080298e0 	.word	0x080298e0

08012388 <_ZN12PongViewBaseD0Ev>:
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f7ff ffbb 	bl	801230c <_ZN12PongViewBaseD1Ev>
 8012396:	f641 6110 	movw	r1, #7696	; 0x1e10
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f015 f98e 	bl	80276bc <_ZdlPvj>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	4618      	mov	r0, r3
 80123a4:	3708      	adds	r7, #8
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <_ZN12PongViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b082      	sub	sp, #8
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80123b2:	f009 fbaf 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 80123b6:	4603      	mov	r3, r0
    }
 80123b8:	4618      	mov	r0, r3
 80123ba:	3708      	adds	r7, #8
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <_ZN12PongViewBaseC1Ev>:
#include <gui_generated/pong_screen/PongViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

PongViewBase::PongViewBase() :
 80123c0:	b590      	push	{r4, r7, lr}
 80123c2:	b099      	sub	sp, #100	; 0x64
 80123c4:	af02      	add	r7, sp, #8
 80123c6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &PongViewBase::buttonCallbackHandler)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f000 fa16 	bl	80127fc <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>
 80123d0:	4ad2      	ldr	r2, [pc, #840]	; (801271c <_ZN12PongViewBaseC1Ev+0x35c>)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	601a      	str	r2, [r3, #0]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3340      	adds	r3, #64	; 0x40
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff fc90 	bl	8011d00 <_ZN8touchgfx3BoxC1Ev>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	3370      	adds	r3, #112	; 0x70
 80123e4:	4618      	mov	r0, r3
 80123e6:	f000 fa63 	bl	80128b0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80123f0:	f107 0314 	add.w	r3, r7, #20
 80123f4:	2100      	movs	r1, #0
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff fb85 	bl	8011b06 <_ZN8touchgfx9colortypeC1Em>
 80123fc:	22ff      	movs	r2, #255	; 0xff
 80123fe:	6979      	ldr	r1, [r7, #20]
 8012400:	4620      	mov	r0, r4
 8012402:	f7ff fde3 	bl	8011fcc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	33f0      	adds	r3, #240	; 0xf0
 801240a:	4618      	mov	r0, r3
 801240c:	f000 fa94 	bl	8012938 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012416:	4618      	mov	r0, r3
 8012418:	f008 fb0e 	bl	801aa38 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff ff16 	bl	8012254 <_ZN8touchgfx8TextAreaC1Ev>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff ff10 	bl	8012254 <_ZN8touchgfx8TextAreaC1Ev>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 801243a:	4bb9      	ldr	r3, [pc, #740]	; (8012720 <_ZN12PongViewBaseC1Ev+0x360>)
 801243c:	61bb      	str	r3, [r7, #24]
 801243e:	2300      	movs	r3, #0
 8012440:	61fb      	str	r3, [r7, #28]
 8012442:	f107 0318 	add.w	r3, r7, #24
 8012446:	cb0c      	ldmia	r3, {r2, r3}
 8012448:	6879      	ldr	r1, [r7, #4]
 801244a:	f000 fa9d 	bl	8012988 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8012454:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8012458:	4618      	mov	r0, r3
 801245a:	f008 fb19 	bl	801aa90 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    background.setPosition(0, 0, 480, 272);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012464:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012468:	9300      	str	r3, [sp, #0]
 801246a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801246e:	2200      	movs	r2, #0
 8012470:	2100      	movs	r1, #0
 8012472:	f7fd f865 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801247c:	22ff      	movs	r2, #255	; 0xff
 801247e:	21ff      	movs	r1, #255	; 0xff
 8012480:	20ff      	movs	r0, #255	; 0xff
 8012482:	f7ff fcf7 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012486:	4603      	mov	r3, r0
 8012488:	4619      	mov	r1, r3
 801248a:	4620      	mov	r0, r4
 801248c:	f7ff fc60 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ball.setPosition(200, 85, 80, 80);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8012496:	2350      	movs	r3, #80	; 0x50
 8012498:	9300      	str	r3, [sp, #0]
 801249a:	2350      	movs	r3, #80	; 0x50
 801249c:	2255      	movs	r2, #85	; 0x55
 801249e:	21c8      	movs	r1, #200	; 0xc8
 80124a0:	f7fd f84e 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    ball.setCenter(40, 40);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	3370      	adds	r3, #112	; 0x70
 80124a8:	2228      	movs	r2, #40	; 0x28
 80124aa:	2128      	movs	r1, #40	; 0x28
 80124ac:	4618      	mov	r0, r3
 80124ae:	f000 f959 	bl	8012764 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    ball.setRadius(20);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	3370      	adds	r3, #112	; 0x70
 80124b6:	2114      	movs	r1, #20
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 fa85 	bl	80129c8 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    ball.setLineWidth(0);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	3370      	adds	r3, #112	; 0x70
 80124c2:	2100      	movs	r1, #0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f000 fa96 	bl	80129f6 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    ball.setArc(0, 360);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	3370      	adds	r3, #112	; 0x70
 80124ce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80124d2:	2100      	movs	r1, #0
 80124d4:	4618      	mov	r0, r3
 80124d6:	f000 f96b 	bl	80127b0 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    ballPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80124e0:	22ff      	movs	r2, #255	; 0xff
 80124e2:	2180      	movs	r1, #128	; 0x80
 80124e4:	2006      	movs	r0, #6
 80124e6:	f7ff fcc5 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80124ea:	4603      	mov	r3, r0
 80124ec:	4619      	mov	r1, r3
 80124ee:	4620      	mov	r0, r4
 80124f0:	f7ff fd8c 	bl	801200c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    ball.setPainter(ballPainter);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	33d8      	adds	r3, #216	; 0xd8
 80124fe:	4619      	mov	r1, r3
 8012500:	4610      	mov	r0, r2
 8012502:	f007 fa15 	bl	8019930 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    paddle1.setPosition(173, 182, 134, 29);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 801250c:	231d      	movs	r3, #29
 801250e:	9300      	str	r3, [sp, #0]
 8012510:	2386      	movs	r3, #134	; 0x86
 8012512:	22b6      	movs	r2, #182	; 0xb6
 8012514:	21ad      	movs	r1, #173	; 0xad
 8012516:	f7fd f813 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    paddle1.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8012520:	22ff      	movs	r2, #255	; 0xff
 8012522:	2180      	movs	r1, #128	; 0x80
 8012524:	2006      	movs	r0, #6
 8012526:	f7ff fca5 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801252a:	4603      	mov	r3, r0
 801252c:	4619      	mov	r1, r3
 801252e:	4620      	mov	r0, r4
 8012530:	f7ff fc0e 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    back_button.setXY(0, 0);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801253a:	2200      	movs	r2, #0
 801253c:	2100      	movs	r1, #0
 801253e:	4618      	mov	r0, r3
 8012540:	f7fd f863 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    back_button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f503 7490 	add.w	r4, r3, #288	; 0x120
 801254a:	f107 0320 	add.w	r3, r7, #32
 801254e:	2102      	movs	r1, #2
 8012550:	4618      	mov	r0, r3
 8012552:	f7ff fb11 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8012556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801255a:	2103      	movs	r1, #3
 801255c:	4618      	mov	r0, r3
 801255e:	f7ff fb0b 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8012562:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012566:	f107 0320 	add.w	r3, r7, #32
 801256a:	4619      	mov	r1, r3
 801256c:	4620      	mov	r0, r4
 801256e:	f008 f871 	bl	801a654 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    back_button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID22));
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8012578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801257c:	210d      	movs	r1, #13
 801257e:	4618      	mov	r0, r3
 8012580:	f7ff fd7a 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 8012584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012588:	4619      	mov	r1, r3
 801258a:	4620      	mov	r0, r4
 801258c:	f7ff fd9a 	bl	80120c4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8012590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012594:	4618      	mov	r0, r3
 8012596:	f7fc fcb9 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
    back_button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80125a0:	22ff      	movs	r2, #255	; 0xff
 80125a2:	21ff      	movs	r1, #255	; 0xff
 80125a4:	20ff      	movs	r0, #255	; 0xff
 80125a6:	f7ff fc65 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80125aa:	4603      	mov	r3, r0
 80125ac:	4619      	mov	r1, r3
 80125ae:	4620      	mov	r0, r4
 80125b0:	f7ff fd9a 	bl	80120e8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    back_button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80125ba:	22ff      	movs	r2, #255	; 0xff
 80125bc:	21ff      	movs	r1, #255	; 0xff
 80125be:	20ff      	movs	r0, #255	; 0xff
 80125c0:	f7ff fc58 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80125c4:	4603      	mov	r3, r0
 80125c6:	4619      	mov	r1, r3
 80125c8:	4620      	mov	r0, r4
 80125ca:	f7ff fd9b 	bl	8012104 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    back_button.setAction(buttonCallback);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80125da:	4619      	mov	r1, r3
 80125dc:	4610      	mov	r0, r2
 80125de:	f7ff fb5e 	bl	8011c9e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(442, 230);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80125e8:	22e6      	movs	r2, #230	; 0xe6
 80125ea:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fd f80b 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80125fa:	22ff      	movs	r2, #255	; 0xff
 80125fc:	21ff      	movs	r1, #255	; 0xff
 80125fe:	20ff      	movs	r0, #255	; 0xff
 8012600:	f7ff fc38 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012604:	4603      	mov	r3, r0
 8012606:	643c      	str	r4, [r7, #64]	; 0x40
 8012608:	613b      	str	r3, [r7, #16]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 801260a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801260c:	693a      	ldr	r2, [r7, #16]
 801260e:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012616:	64bb      	str	r3, [r7, #72]	; 0x48
 8012618:	2300      	movs	r3, #0
 801261a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 801261e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012620:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012624:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 801262c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012630:	210e      	movs	r1, #14
 8012632:	4618      	mov	r0, r3
 8012634:	f7ff fd20 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 8012638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801263c:	4619      	mov	r1, r3
 801263e:	4620      	mov	r0, r4
 8012640:	f007 ffce 	bl	801a5e0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012648:	4618      	mov	r0, r3
 801264a:	f7fc fc5f 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_1.setXY(22, 229);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8012654:	22e5      	movs	r2, #229	; 0xe5
 8012656:	2116      	movs	r1, #22
 8012658:	4618      	mov	r0, r3
 801265a:	f7fc ffd6 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8012664:	22ff      	movs	r2, #255	; 0xff
 8012666:	21ff      	movs	r1, #255	; 0xff
 8012668:	20ff      	movs	r0, #255	; 0xff
 801266a:	f7ff fc03 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801266e:	4603      	mov	r3, r0
 8012670:	64fc      	str	r4, [r7, #76]	; 0x4c
 8012672:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8012674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1_1.setLinespacing(0);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8012680:	657b      	str	r3, [r7, #84]	; 0x54
 8012682:	2300      	movs	r3, #0
 8012684:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        linespace = space;
 8012688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801268a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 801268e:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8012696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801269a:	210f      	movs	r1, #15
 801269c:	4618      	mov	r0, r3
 801269e:	f7ff fceb 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 80126a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80126a6:	4619      	mov	r1, r3
 80126a8:	4620      	mov	r0, r4
 80126aa:	f007 ff99 	bl	801a5e0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80126ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fc fc2a 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>

    add(background);
 80126b8:	687a      	ldr	r2, [r7, #4]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	3340      	adds	r3, #64	; 0x40
 80126be:	4619      	mov	r1, r3
 80126c0:	4610      	mov	r0, r2
 80126c2:	f7ff fad1 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ball);
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	3370      	adds	r3, #112	; 0x70
 80126cc:	4619      	mov	r1, r3
 80126ce:	4610      	mov	r0, r2
 80126d0:	f7ff faca 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(paddle1);
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	33f0      	adds	r3, #240	; 0xf0
 80126da:	4619      	mov	r1, r3
 80126dc:	4610      	mov	r0, r2
 80126de:	f7ff fac3 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(back_button);
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80126ea:	4619      	mov	r1, r3
 80126ec:	4610      	mov	r0, r2
 80126ee:	f7ff fabb 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80126fa:	4619      	mov	r1, r3
 80126fc:	4610      	mov	r0, r2
 80126fe:	f7ff fab3 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_1);
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 801270a:	4619      	mov	r1, r3
 801270c:	4610      	mov	r0, r2
 801270e:	f7ff faab 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	4618      	mov	r0, r3
 8012716:	375c      	adds	r7, #92	; 0x5c
 8012718:	46bd      	mov	sp, r7
 801271a:	bd90      	pop	{r4, r7, pc}
 801271c:	080298e0 	.word	0x080298e0
 8012720:	08012739 	.word	0x08012739

08012724 <_ZN12PongViewBase11setupScreenEv>:

void PongViewBase::setupScreen()
{
 8012724:	b480      	push	{r7}
 8012726:	b083      	sub	sp, #12
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]

}
 801272c:	bf00      	nop
 801272e:	370c      	adds	r7, #12
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr

08012738 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void PongViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
    if (&src == &back_button)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012748:	683a      	ldr	r2, [r7, #0]
 801274a:	429a      	cmp	r2, r3
 801274c:	d106      	bne.n	801275c <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //back_to_main_screen
        //When back_button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenSlideTransitionEast();
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7ff fe2b 	bl	80123aa <_ZN12PongViewBase11applicationEv>
 8012754:	4603      	mov	r3, r0
 8012756:	4618      	mov	r0, r3
 8012758:	f7fd fa46 	bl	800fbe8 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>
    }
}
 801275c:	bf00      	nop
 801275e:	3708      	adds	r7, #8
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 8012764:	b580      	push	{r7, lr}
 8012766:	b088      	sub	sp, #32
 8012768:	af00      	add	r7, sp, #0
 801276a:	60f8      	str	r0, [r7, #12]
 801276c:	60b9      	str	r1, [r7, #8]
 801276e:	607a      	str	r2, [r7, #4]
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012774:	69bb      	ldr	r3, [r7, #24]
 8012776:	015a      	lsls	r2, r3, #5
 8012778:	f107 0314 	add.w	r3, r7, #20
 801277c:	4611      	mov	r1, r2
 801277e:	4618      	mov	r0, r3
 8012780:	f7ff fb4b 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	631a      	str	r2, [r3, #48]	; 0x30
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	61fb      	str	r3, [r7, #28]
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	015a      	lsls	r2, r3, #5
 8012794:	f107 0310 	add.w	r3, r7, #16
 8012798:	4611      	mov	r1, r2
 801279a:	4618      	mov	r0, r3
 801279c:	f7ff fb3d 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80127a8:	bf00      	nop
 80127aa:	3720      	adds	r7, #32
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see getArc, updateArcStart, updateArcEnd, updateArc
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b088      	sub	sp, #32
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	607a      	str	r2, [r7, #4]
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	61bb      	str	r3, [r7, #24]
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	015a      	lsls	r2, r3, #5
 80127c4:	f107 0314 	add.w	r3, r7, #20
 80127c8:	4611      	mov	r1, r2
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7ff fb25 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	61fb      	str	r3, [r7, #28]
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	015a      	lsls	r2, r3, #5
 80127e0:	f107 0310 	add.w	r3, r7, #16
 80127e4:	4611      	mov	r1, r2
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7ff fb17 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80127f4:	bf00      	nop
 80127f6:	3720      	adds	r7, #32
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>:
    View()
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	4618      	mov	r0, r3
 8012808:	f00a f93a 	bl	801ca80 <_ZN8touchgfx6ScreenC1Ev>
 801280c:	4a05      	ldr	r2, [pc, #20]	; (8012824 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev+0x28>)
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	601a      	str	r2, [r3, #0]
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2200      	movs	r2, #0
 8012816:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	4618      	mov	r0, r3
 801281c:	3708      	adds	r7, #8
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	08029a1c 	.word	0x08029a1c

08012828 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	4a05      	ldr	r2, [pc, #20]	; (8012848 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	601a      	str	r2, [r3, #0]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	4618      	mov	r0, r3
 801283a:	f7fd f911 	bl	800fa60 <_ZN8touchgfx6WidgetD1Ev>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	0802b7cc 	.word	0x0802b7cc

0801284c <_ZN8touchgfx12CanvasWidgetD0Ev>:
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7ff ffe7 	bl	8012828 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801285a:	2130      	movs	r1, #48	; 0x30
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f014 ff2d 	bl	80276bc <_ZdlPvj>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	3708      	adds	r7, #8
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	4a05      	ldr	r2, [pc, #20]	; (801288c <_ZN8touchgfx6CircleD1Ev+0x20>)
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	601a      	str	r2, [r3, #0]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	4618      	mov	r0, r3
 801287e:	f7ff ffd3 	bl	8012828 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	4618      	mov	r0, r3
 8012886:	3708      	adds	r7, #8
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}
 801288c:	0802b6c0 	.word	0x0802b6c0

08012890 <_ZN8touchgfx6CircleD0Ev>:
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f7ff ffe7 	bl	801286c <_ZN8touchgfx6CircleD1Ev>
 801289e:	214c      	movs	r1, #76	; 0x4c
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f014 ff0b 	bl	80276bc <_ZdlPvj>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4618      	mov	r0, r3
 80128aa:	3708      	adds	r7, #8
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
        : T(),
          moveAnimationRunning(false),
          moveAnimationCounter(0),
          moveAnimationDelay(0),
          moveAnimationEndedCallback(0)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4618      	mov	r0, r3
 80128bc:	f006 fc12 	bl	80190e4 <_ZN8touchgfx6CircleC1Ev>
 80128c0:	4a0b      	ldr	r2, [pc, #44]	; (80128f0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev+0x40>)
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	601a      	str	r2, [r3, #0]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2200      	movs	r2, #0
 80128ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2200      	movs	r2, #0
 80128d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2200      	movs	r2, #0
 80128da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	4618      	mov	r0, r3
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	08029994 	.word	0x08029994

080128f4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	4a05      	ldr	r2, [pc, #20]	; (8012914 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	601a      	str	r2, [r3, #0]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	4618      	mov	r0, r3
 8012906:	f7fd f8ab 	bl	800fa60 <_ZN8touchgfx6WidgetD1Ev>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	4618      	mov	r0, r3
 801290e:	3708      	adds	r7, #8
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	0802bc70 	.word	0x0802bc70

08012918 <_ZN8touchgfx3BoxD0Ev>:
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7ff ffe7 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8012926:	2130      	movs	r1, #48	; 0x30
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f014 fec7 	bl	80276bc <_ZdlPvj>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4618      	mov	r0, r3
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>:
template <class T>
class Draggable : public T
{
public:
    /** Initializes a new instance of the Draggable class. Make the object touchable. */
    Draggable()
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
        : T()
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	4618      	mov	r0, r3
 8012944:	f7ff f9dc 	bl	8011d00 <_ZN8touchgfx3BoxC1Ev>
 8012948:	4a06      	ldr	r2, [pc, #24]	; (8012964 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev+0x2c>)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	601a      	str	r2, [r3, #0]
    {
        T::setTouchable(true);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2101      	movs	r1, #1
 8012952:	4618      	mov	r0, r3
 8012954:	f7ff f920 	bl	8011b98 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	0802992c 	.word	0x0802992c

08012968 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	4a04      	ldr	r2, [pc, #16]	; (8012984 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	601a      	str	r2, [r3, #0]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4618      	mov	r0, r3
 801297a:	370c      	adds	r7, #12
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr
 8012984:	08029a6c 	.word	0x08029a6c

08012988 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012988:	b580      	push	{r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	4639      	mov	r1, r7
 8012994:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	4618      	mov	r0, r3
 801299c:	f7ff ffe4 	bl	8012968 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80129a0:	4a08      	ldr	r2, [pc, #32]	; (80129c4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	68ba      	ldr	r2, [r7, #8]
 80129aa:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	3308      	adds	r3, #8
 80129b0:	463a      	mov	r2, r7
 80129b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80129b6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	4618      	mov	r0, r3
 80129be:	3710      	adds	r7, #16
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	08029914 	.word	0x08029914

080129c8 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	60fb      	str	r3, [r7, #12]
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	015a      	lsls	r2, r3, #5
 80129da:	f107 0308 	add.w	r3, r7, #8
 80129de:	4611      	mov	r1, r2
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7ff fa1a 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80129ee:	bf00      	nop
 80129f0:	3710      	adds	r7, #16
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b084      	sub	sp, #16
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
 80129fe:	6039      	str	r1, [r7, #0]
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	60fb      	str	r3, [r7, #12]
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	015a      	lsls	r2, r3, #5
 8012a08:	f107 0308 	add.w	r3, r7, #8
 8012a0c:	4611      	mov	r1, r2
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7ff fa03 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8012a1c:	bf00      	nop
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
    }
 8012a2c:	4a04      	ldr	r2, [pc, #16]	; (8012a40 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	601a      	str	r2, [r3, #0]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4618      	mov	r0, r3
 8012a36:	370c      	adds	r7, #12
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr
 8012a40:	08029a6c 	.word	0x08029a6c

08012a44 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
    }
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7ff ffe9 	bl	8012a24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012a52:	2104      	movs	r1, #4
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f014 fe31 	bl	80276bc <_ZdlPvj>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3708      	adds	r7, #8
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}

08012a64 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	4a05      	ldr	r2, [pc, #20]	; (8012a84 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	601a      	str	r2, [r3, #0]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7ff ffd5 	bl	8012a24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3708      	adds	r7, #8
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	08029914 	.word	0x08029914

08012a88 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff ffe7 	bl	8012a64 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012a96:	2110      	movs	r1, #16
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f014 fe0f 	bl	80276bc <_ZdlPvj>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>:
class Draggable : public T
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	4a05      	ldr	r2, [pc, #20]	; (8012ac8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev+0x20>)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	601a      	str	r2, [r3, #0]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7ff ff1b 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	0802992c 	.word	0x0802992c

08012acc <_ZN8touchgfx9DraggableINS_3BoxEED0Ev>:
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7ff ffe7 	bl	8012aa8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8012ada:	2130      	movs	r1, #48	; 0x30
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f014 fded 	bl	80276bc <_ZdlPvj>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3708      	adds	r7, #8
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
class MoveAnimator : public T
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	4a05      	ldr	r2, [pc, #20]	; (8012b0c <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev+0x20>)
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	601a      	str	r2, [r3, #0]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7ff feb5 	bl	801286c <_ZN8touchgfx6CircleD1Ev>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	4618      	mov	r0, r3
 8012b06:	3708      	adds	r7, #8
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	08029994 	.word	0x08029994

08012b10 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f7ff ffe7 	bl	8012aec <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8012b1e:	2168      	movs	r1, #104	; 0x68
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f014 fdcb 	bl	80276bc <_ZdlPvj>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3708      	adds	r7, #8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	4a05      	ldr	r2, [pc, #20]	; (8012b50 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	601a      	str	r2, [r3, #0]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fc fcdd 	bl	800f500 <_ZN8touchgfx8DrawableD1Ev>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3708      	adds	r7, #8
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	0802ad38 	.word	0x0802ad38

08012b54 <_ZN8touchgfx9ContainerD0Ev>:
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f7ff ffe7 	bl	8012b30 <_ZN8touchgfx9ContainerD1Ev>
 8012b62:	212c      	movs	r1, #44	; 0x2c
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f014 fda9 	bl	80276bc <_ZdlPvj>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3708      	adds	r7, #8
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	4a05      	ldr	r2, [pc, #20]	; (8012b94 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	601a      	str	r2, [r3, #0]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7ff f9ff 	bl	8011f88 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3708      	adds	r7, #8
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}
 8012b94:	0802b740 	.word	0x0802b740

08012b98 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f7ff ffe7 	bl	8012b74 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012ba6:	2118      	movs	r1, #24
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f014 fd87 	bl	80276bc <_ZdlPvj>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	4a05      	ldr	r2, [pc, #20]	; (8012bd8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	601a      	str	r2, [r3, #0]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7ff f877 	bl	8011cbc <_ZN8touchgfx14AbstractButtonD1Ev>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	0802bd3c 	.word	0x0802bd3c

08012bdc <_ZN8touchgfx6ButtonD0Ev>:
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f7ff ffe7 	bl	8012bb8 <_ZN8touchgfx6ButtonD1Ev>
 8012bea:	2134      	movs	r1, #52	; 0x34
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f014 fd65 	bl	80276bc <_ZdlPvj>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3708      	adds	r7, #8
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	4a08      	ldr	r2, [pc, #32]	; (8012c28 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	601a      	str	r2, [r3, #0]
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	3334      	adds	r3, #52	; 0x34
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7fc f97c 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7ff ffce 	bl	8012bb8 <_ZN8touchgfx6ButtonD1Ev>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3708      	adds	r7, #8
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	0802be4c 	.word	0x0802be4c

08012c2c <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f7ff ffe1 	bl	8012bfc <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012c3a:	2148      	movs	r1, #72	; 0x48
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f014 fd3d 	bl	80276bc <_ZdlPvj>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	4618      	mov	r0, r3
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	4a08      	ldr	r2, [pc, #32]	; (8012c78 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	601a      	str	r2, [r3, #0]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	3328      	adds	r3, #40	; 0x28
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7fc f954 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fc fefa 	bl	800fa60 <_ZN8touchgfx6WidgetD1Ev>
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3708      	adds	r7, #8
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	0802bbc4 	.word	0x0802bbc4

08012c7c <_ZN8touchgfx8TextAreaD0Ev>:
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f7ff ffe1 	bl	8012c4c <_ZN8touchgfx8TextAreaD1Ev>
 8012c8a:	213c      	movs	r1, #60	; 0x3c
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f014 fd15 	bl	80276bc <_ZdlPvj>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	4618      	mov	r0, r3
 8012c96:	3708      	adds	r7, #8
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	68d2      	ldr	r2, [r2, #12]
 8012cae:	1052      	asrs	r2, r2, #1
 8012cb0:	1898      	adds	r0, r3, r2
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	68db      	ldr	r3, [r3, #12]
 8012cb6:	f003 0301 	and.w	r3, r3, #1
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d102      	bne.n	8012cc4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	689b      	ldr	r3, [r3, #8]
 8012cc2:	e00a      	b.n	8012cda <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	68d2      	ldr	r2, [r2, #12]
 8012ccc:	1052      	asrs	r2, r2, #1
 8012cce:	4413      	add	r3, r2
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	687a      	ldr	r2, [r7, #4]
 8012cd4:	6892      	ldr	r2, [r2, #8]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	6839      	ldr	r1, [r7, #0]
 8012cdc:	4798      	blx	r3
    }
 8012cde:	bf00      	nop
 8012ce0:	3708      	adds	r7, #8
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8012ce6:	b480      	push	{r7}
 8012ce8:	b083      	sub	sp, #12
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d010      	beq.n	8012d18 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d107      	bne.n	8012d0e <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	68db      	ldr	r3, [r3, #12]
 8012d02:	f003 0301 	and.w	r3, r3, #1
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d101      	bne.n	8012d0e <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	e000      	b.n	8012d10 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d001      	beq.n	8012d18 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012d14:	2301      	movs	r3, #1
 8012d16:	e000      	b.n	8012d1a <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012d18:	2300      	movs	r3, #0
    }
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	370c      	adds	r7, #12
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d24:	4770      	bx	lr

08012d26 <_ZN8touchgfx9DraggableINS_3BoxEE15handleDragEventERKNS_9DragEventE>:
     * Called when dragging the Draggable object. The object is moved according to the drag
     * event.
     *
     * @param  evt The drag event.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8012d26:	b5b0      	push	{r4, r5, r7, lr}
 8012d28:	b082      	sub	sp, #8
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	6039      	str	r1, [r7, #0]
    {
        T::handleDragEvent(evt);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6839      	ldr	r1, [r7, #0]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7fc fcc4 	bl	800f6c2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>
        T::moveRelative(evt.getDeltaX(), evt.getDeltaY());
 8012d3a:	687c      	ldr	r4, [r7, #4]
 8012d3c:	6838      	ldr	r0, [r7, #0]
 8012d3e:	f7fe fef1 	bl	8011b24 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 8012d42:	4603      	mov	r3, r0
 8012d44:	461d      	mov	r5, r3
 8012d46:	6838      	ldr	r0, [r7, #0]
 8012d48:	f7fe ff01 	bl	8011b4e <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	461a      	mov	r2, r3
 8012d50:	4629      	mov	r1, r5
 8012d52:	4620      	mov	r0, r4
 8012d54:	f009 fb30 	bl	801c3b8 <_ZN8touchgfx8Drawable12moveRelativeEss>
    }
 8012d58:	bf00      	nop
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bdb0      	pop	{r4, r5, r7, pc}

08012d60 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:
        }
    }

protected:
    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fc fcb4 	bl	800f6d8 <_ZN8touchgfx8Drawable15handleTickEventEv>

        nextMoveAnimationStep();
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f000 f821 	bl	8012db8 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 8012d76:	bf00      	nop
 8012d78:	3708      	adds	r7, #8
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 8012d7e:	b480      	push	{r7}
 8012d80:	b083      	sub	sp, #12
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
 8012d86:	460b      	mov	r3, r1
 8012d88:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	887a      	ldrh	r2, [r7, #2]
 8012d8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
 8012d92:	bf00      	nop
 8012d94:	370c      	adds	r7, #12
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr

08012d9e <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 8012d9e:	b480      	push	{r7}
 8012da0:	b083      	sub	sp, #12
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    }
 8012dac:	4618      	mov	r0, r3
 8012dae:	370c      	adds	r7, #12
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr

08012db8 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>:

    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 8012db8:	b590      	push	{r4, r7, lr}
 8012dba:	b085      	sub	sp, #20
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f000 80ad 	beq.w	8012f26 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d208      	bcs.n	8012dee <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x36>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8012de2:	3301      	adds	r3, #1
 8012de4:	b29a      	uxth	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 8012dec:	e09b      	b.n	8012f26 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8012df4:	461a      	mov	r2, r3
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e04:	440b      	add	r3, r1
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d850      	bhi.n	8012eac <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0xf4>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8012e10:	461a      	mov	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012e18:	1ad3      	subs	r3, r2, r3
 8012e1a:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	b298      	uxth	r0, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	1ad3      	subs	r3, r2, r3
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	b21a      	sxth	r2, r3
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e40:	2100      	movs	r1, #0
 8012e42:	47a0      	blx	r4
 8012e44:	4603      	mov	r3, r0
 8012e46:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	b298      	uxth	r0, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	1ad3      	subs	r3, r2, r3
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	b21a      	sxth	r2, r3
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	47a0      	blx	r4
 8012e70:	4603      	mov	r3, r0
 8012e72:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	897b      	ldrh	r3, [r7, #10]
 8012e80:	4413      	add	r3, r2
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	b219      	sxth	r1, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	893b      	ldrh	r3, [r7, #8]
 8012e90:	4413      	add	r3, r2
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	b21b      	sxth	r3, r3
 8012e96:	461a      	mov	r2, r3
 8012e98:	f7fc fc42 	bl	800f720 <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	b29a      	uxth	r2, r3
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012eba:	4619      	mov	r1, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012ec2:	440b      	add	r3, r1
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d92e      	bls.n	8012f26 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                    moveAnimationRunning = false;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    moveAnimationCounter = 0;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    Application::getInstance()->unregisterTimerWidget(this);
 8012ed8:	f008 fe1c 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 8012edc:	4602      	mov	r2, r0
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	4610      	mov	r0, r2
 8012ee4:	f008 fe1c 	bl	801bb20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d00d      	beq.n	8012f0c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	330c      	adds	r3, #12
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	4610      	mov	r0, r2
 8012f00:	4798      	blx	r3
 8012f02:	4603      	mov	r3, r0
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d001      	beq.n	8012f0c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8012f08:	2301      	movs	r3, #1
 8012f0a:	e000      	b.n	8012f0e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x156>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d009      	beq.n	8012f26 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                        moveAnimationEndedCallback->execute(*this);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	3308      	adds	r3, #8
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	6879      	ldr	r1, [r7, #4]
 8012f22:	4610      	mov	r0, r2
 8012f24:	4798      	blx	r3
    }
 8012f26:	bf00      	nop
 8012f28:	3714      	adds	r7, #20
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd90      	pop	{r4, r7, pc}

08012f2e <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
        Q5()
 8012f2e:	b480      	push	{r7}
 8012f30:	b083      	sub	sp, #12
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	6078      	str	r0, [r7, #4]
            : v(0)
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	601a      	str	r2, [r3, #0]
        }
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	370c      	adds	r7, #12
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr

08012f4a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        operator int() const
 8012f4a:	b480      	push	{r7}
 8012f4c:	b083      	sub	sp, #12
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
            return v;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
        }
 8012f56:	4618      	mov	r0, r3
 8012f58:	370c      	adds	r7, #12
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f60:	4770      	bx	lr

08012f62 <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
        explicit Q10(int i)
 8012f62:	b480      	push	{r7}
 8012f64:	b083      	sub	sp, #12
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
 8012f6a:	6039      	str	r1, [r7, #0]
            : v(i)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	683a      	ldr	r2, [r7, #0]
 8012f70:	601a      	str	r2, [r3, #0]
        }
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	370c      	adds	r7, #12
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr

08012f80 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	4a05      	ldr	r2, [pc, #20]	; (8012fa0 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	601a      	str	r2, [r3, #0]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7fe fe11 	bl	8011bb8 <_ZN8touchgfx6ScreenD1Ev>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3708      	adds	r7, #8
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}
 8012fa0:	08029c34 	.word	0x08029c34

08012fa4 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f7ff ffe7 	bl	8012f80 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8012fb2:	2140      	movs	r1, #64	; 0x40
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f014 fb81 	bl	80276bc <_ZdlPvj>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	4a22      	ldr	r2, [pc, #136]	; (8013058 <_ZN15Screen2ViewBaseD1Ev+0x94>)
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	601a      	str	r2, [r3, #0]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f000 fc87 	bl	80138ec <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7ff fdc5 	bl	8012b74 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f000 fc9d 	bl	8013930 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff fdb9 	bl	8012b74 <_ZN8touchgfx13PainterRGB888D1Ev>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8013008:	4618      	mov	r0, r3
 801300a:	f7ff fc2f 	bl	801286c <_ZN8touchgfx6CircleD1Ev>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013014:	4618      	mov	r0, r3
 8013016:	f7ff fe19 	bl	8012c4c <_ZN8touchgfx8TextAreaD1Ev>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013020:	4618      	mov	r0, r3
 8013022:	f7ff fda7 	bl	8012b74 <_ZN8touchgfx13PainterRGB888D1Ev>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	33b8      	adds	r3, #184	; 0xb8
 801302a:	4618      	mov	r0, r3
 801302c:	f000 fd12 	bl	8013a54 <_ZN8touchgfx12LineProgressD1Ev>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	3370      	adds	r3, #112	; 0x70
 8013034:	4618      	mov	r0, r3
 8013036:	f7ff fde1 	bl	8012bfc <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	3340      	adds	r3, #64	; 0x40
 801303e:	4618      	mov	r0, r3
 8013040:	f7ff fc58 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	4618      	mov	r0, r3
 8013048:	f7ff ff9a 	bl	8012f80 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	4618      	mov	r0, r3
 8013050:	3708      	adds	r7, #8
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	08029b4c 	.word	0x08029b4c

0801305c <_ZN15Screen2ViewBaseD0Ev>:
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f7ff ffad 	bl	8012fc4 <_ZN15Screen2ViewBaseD1Ev>
 801306a:	f641 7148 	movw	r1, #8008	; 0x1f48
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f014 fb24 	bl	80276bc <_ZdlPvj>
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	4618      	mov	r0, r3
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801307e:	b580      	push	{r7, lr}
 8013080:	b082      	sub	sp, #8
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013086:	f008 fd45 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801308a:	4603      	mov	r3, r0
    }
 801308c:	4618      	mov	r0, r3
 801308e:	3708      	adds	r7, #8
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	4a05      	ldr	r2, [pc, #20]	; (80130b4 <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	601a      	str	r2, [r3, #0]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7ff fbbf 	bl	8012828 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	4618      	mov	r0, r3
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	0802b5fc 	.word	0x0802b5fc

080130b8 <_ZN8touchgfx13AbstractShapeD0Ev>:
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f7ff ffe7 	bl	8013094 <_ZN8touchgfx13AbstractShapeD1Ev>
 80130c6:	214c      	movs	r1, #76	; 0x4c
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f014 faf7 	bl	80276bc <_ZdlPvj>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	4618      	mov	r0, r3
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <_ZN8touchgfx5ShapeILt3EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 80130d8:	b5b0      	push	{r4, r5, r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f005 fe78 	bl	8018dd8 <_ZN8touchgfx13AbstractShapeC1Ev>
 80130e8:	4a1b      	ldr	r2, [pc, #108]	; (8013158 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x80>)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	601a      	str	r2, [r3, #0]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	334c      	adds	r3, #76	; 0x4c
 80130f2:	2402      	movs	r4, #2
 80130f4:	461d      	mov	r5, r3
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	db05      	blt.n	8013106 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x2e>
 80130fa:	4628      	mov	r0, r5
 80130fc:	f7ff ff17 	bl	8012f2e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013100:	3504      	adds	r5, #4
 8013102:	3c01      	subs	r4, #1
 8013104:	e7f7      	b.n	80130f6 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x1e>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	3358      	adds	r3, #88	; 0x58
 801310a:	2402      	movs	r4, #2
 801310c:	461d      	mov	r5, r3
 801310e:	2c00      	cmp	r4, #0
 8013110:	db05      	blt.n	801311e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x46>
 8013112:	4628      	mov	r0, r5
 8013114:	f7ff ff0b 	bl	8012f2e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013118:	3504      	adds	r5, #4
 801311a:	3c01      	subs	r4, #1
 801311c:	e7f7      	b.n	801310e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x36>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	3364      	adds	r3, #100	; 0x64
 8013122:	2402      	movs	r4, #2
 8013124:	461d      	mov	r5, r3
 8013126:	2c00      	cmp	r4, #0
 8013128:	db05      	blt.n	8013136 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x5e>
 801312a:	4628      	mov	r0, r5
 801312c:	f7ff feff 	bl	8012f2e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013130:	3504      	adds	r5, #4
 8013132:	3c01      	subs	r4, #1
 8013134:	e7f7      	b.n	8013126 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x4e>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	3370      	adds	r3, #112	; 0x70
 801313a:	2402      	movs	r4, #2
 801313c:	461d      	mov	r5, r3
 801313e:	2c00      	cmp	r4, #0
 8013140:	db05      	blt.n	801314e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x76>
 8013142:	4628      	mov	r0, r5
 8013144:	f7ff fef3 	bl	8012f2e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013148:	3504      	adds	r5, #4
 801314a:	3c01      	subs	r4, #1
 801314c:	e7f7      	b.n	801313e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x66>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	4618      	mov	r0, r3
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bdb0      	pop	{r4, r5, r7, pc}
 8013158:	08029b98 	.word	0x08029b98

0801315c <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 801315c:	b5b0      	push	{r4, r5, r7, lr}
 801315e:	b09a      	sub	sp, #104	; 0x68
 8013160:	af02      	add	r7, sp, #8
 8013162:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	4618      	mov	r0, r3
 8013168:	f000 fa5a 	bl	8013620 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 801316c:	4ada      	ldr	r2, [pc, #872]	; (80134d8 <_ZN15Screen2ViewBaseC1Ev+0x37c>)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	601a      	str	r2, [r3, #0]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	3340      	adds	r3, #64	; 0x40
 8013176:	4618      	mov	r0, r3
 8013178:	f7fe fdc2 	bl	8011d00 <_ZN8touchgfx3BoxC1Ev>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	3370      	adds	r3, #112	; 0x70
 8013180:	4618      	mov	r0, r3
 8013182:	f007 fc59 	bl	801aa38 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	33b8      	adds	r3, #184	; 0xb8
 801318a:	4618      	mov	r0, r3
 801318c:	f004 fc06 	bl	801799c <_ZN8touchgfx12LineProgressC1Ev>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8013196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801319a:	2100      	movs	r1, #0
 801319c:	4618      	mov	r0, r3
 801319e:	f7fe fcb2 	bl	8011b06 <_ZN8touchgfx9colortypeC1Em>
 80131a2:	22ff      	movs	r2, #255	; 0xff
 80131a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131a6:	4620      	mov	r0, r4
 80131a8:	f7fe ff10 	bl	8011fcc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7ff f84e 	bl	8012254 <_ZN8touchgfx8TextAreaC1Ev>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80131be:	4618      	mov	r0, r3
 80131c0:	f005 ff90 	bl	80190e4 <_ZN8touchgfx6CircleC1Ev>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 80131ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80131ce:	2100      	movs	r1, #0
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fe fc98 	bl	8011b06 <_ZN8touchgfx9colortypeC1Em>
 80131d6:	22ff      	movs	r2, #255	; 0xff
 80131d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80131da:	4620      	mov	r0, r4
 80131dc:	f7fe fef6 	bl	8011fcc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7ff ff76 	bl	80130d8 <_ZN8touchgfx5ShapeILt3EEC1Ev>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f503 7440 	add.w	r4, r3, #768	; 0x300
 80131f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131f6:	2100      	movs	r1, #0
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fe fc84 	bl	8011b06 <_ZN8touchgfx9colortypeC1Em>
 80131fe:	22ff      	movs	r2, #255	; 0xff
 8013200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013202:	4620      	mov	r0, r4
 8013204:	f7fe fee2 	bl	8011fcc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f503 7046 	add.w	r0, r3, #792	; 0x318
 801320e:	4bb3      	ldr	r3, [pc, #716]	; (80134dc <_ZN15Screen2ViewBaseC1Ev+0x380>)
 8013210:	633b      	str	r3, [r7, #48]	; 0x30
 8013212:	2300      	movs	r3, #0
 8013214:	637b      	str	r3, [r7, #52]	; 0x34
 8013216:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801321a:	cb0c      	ldmia	r3, {r2, r3}
 801321c:	6879      	ldr	r1, [r7, #4]
 801321e:	f000 fa15 	bl	801364c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8013228:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801322c:	4618      	mov	r0, r3
 801322e:	f007 fc2f 	bl	801aa90 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    box1.setPosition(0, 0, 480, 272);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013238:	f44f 7388 	mov.w	r3, #272	; 0x110
 801323c:	9300      	str	r3, [sp, #0]
 801323e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013242:	2200      	movs	r2, #0
 8013244:	2100      	movs	r1, #0
 8013246:	f7fc f97b 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013250:	22ff      	movs	r2, #255	; 0xff
 8013252:	21ff      	movs	r1, #255	; 0xff
 8013254:	20ff      	movs	r0, #255	; 0xff
 8013256:	f7fe fe0d 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801325a:	4603      	mov	r3, r0
 801325c:	4619      	mov	r1, r3
 801325e:	4620      	mov	r0, r4
 8013260:	f7fe fd76 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 212);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	3370      	adds	r3, #112	; 0x70
 8013268:	22d4      	movs	r2, #212	; 0xd4
 801326a:	2100      	movs	r1, #0
 801326c:	4618      	mov	r0, r3
 801326e:	f7fc f9cc 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801327c:	2102      	movs	r1, #2
 801327e:	4618      	mov	r0, r3
 8013280:	f7fe fc7a 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8013284:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013288:	2103      	movs	r1, #3
 801328a:	4618      	mov	r0, r3
 801328c:	f7fe fc74 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8013290:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013294:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013298:	4619      	mov	r1, r3
 801329a:	4620      	mov	r0, r4
 801329c:	f007 f9da 	bl	801a654 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID17));
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80132a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132aa:	2108      	movs	r1, #8
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7fe fee3 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 80132b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132b6:	4619      	mov	r1, r3
 80132b8:	4620      	mov	r0, r4
 80132ba:	f7fe ff03 	bl	80120c4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80132be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fb fe22 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80132ce:	22ff      	movs	r2, #255	; 0xff
 80132d0:	21ff      	movs	r1, #255	; 0xff
 80132d2:	20ff      	movs	r0, #255	; 0xff
 80132d4:	f7fe fdce 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80132d8:	4603      	mov	r3, r0
 80132da:	4619      	mov	r1, r3
 80132dc:	4620      	mov	r0, r4
 80132de:	f7fe ff03 	bl	80120e8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80132e8:	22ff      	movs	r2, #255	; 0xff
 80132ea:	21ff      	movs	r1, #255	; 0xff
 80132ec:	20ff      	movs	r0, #255	; 0xff
 80132ee:	f7fe fdc1 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80132f2:	4603      	mov	r3, r0
 80132f4:	4619      	mov	r1, r3
 80132f6:	4620      	mov	r0, r4
 80132f8:	f7fe ff04 	bl	8012104 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8013308:	4619      	mov	r1, r3
 801330a:	4610      	mov	r0, r2
 801330c:	f7fe fcc7 	bl	8011c9e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    lineProgress1.setXY(38, 178);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	33b8      	adds	r3, #184	; 0xb8
 8013314:	22b2      	movs	r2, #178	; 0xb2
 8013316:	2126      	movs	r1, #38	; 0x26
 8013318:	4618      	mov	r0, r3
 801331a:	f7fc f976 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress1.setProgressIndicatorPosition(0, 0, 404, 34);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8013324:	2322      	movs	r3, #34	; 0x22
 8013326:	9300      	str	r3, [sp, #0]
 8013328:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801332c:	2200      	movs	r2, #0
 801332e:	2100      	movs	r1, #0
 8013330:	f004 fad3 	bl	80178da <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress1.setRange(0, 100);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 801333a:	2300      	movs	r3, #0
 801333c:	9300      	str	r3, [sp, #0]
 801333e:	2300      	movs	r3, #0
 8013340:	2264      	movs	r2, #100	; 0x64
 8013342:	2100      	movs	r1, #0
 8013344:	f004 fbb6 	bl	8017ab4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    lineProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_ROUND_0_DEGREES_ID));
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 801334e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013352:	2104      	movs	r1, #4
 8013354:	4618      	mov	r0, r3
 8013356:	f7fe fc0f 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 801335a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801335e:	4619      	mov	r1, r3
 8013360:	4620      	mov	r0, r4
 8013362:	f004 fb9d 	bl	8017aa0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    lineProgress1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 801336c:	22ff      	movs	r2, #255	; 0xff
 801336e:	2197      	movs	r1, #151	; 0x97
 8013370:	2000      	movs	r0, #0
 8013372:	f7fe fd7f 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013376:	4603      	mov	r3, r0
 8013378:	4619      	mov	r1, r3
 801337a:	4620      	mov	r0, r4
 801337c:	f7fe fe46 	bl	801200c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    lineProgress1.setPainter(lineProgress1Painter);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801338c:	4619      	mov	r1, r3
 801338e:	4610      	mov	r0, r2
 8013390:	f004 fabb 	bl	801790a <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress1.setStart(17, 17);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	33b8      	adds	r3, #184	; 0xb8
 8013398:	2211      	movs	r2, #17
 801339a:	2111      	movs	r1, #17
 801339c:	4618      	mov	r0, r3
 801339e:	f004 fab7 	bl	8017910 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress1.setEnd(387, 17);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	33b8      	adds	r3, #184	; 0xb8
 80133a6:	2211      	movs	r2, #17
 80133a8:	f240 1183 	movw	r1, #387	; 0x183
 80133ac:	4618      	mov	r0, r3
 80133ae:	f004 fa74 	bl	801789a <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress1.setLineWidth(30);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	33b8      	adds	r3, #184	; 0xb8
 80133b6:	211e      	movs	r1, #30
 80133b8:	4618      	mov	r0, r3
 80133ba:	f004 fab0 	bl	801791e <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	33b8      	adds	r3, #184	; 0xb8
 80133c2:	2101      	movs	r1, #1
 80133c4:	4618      	mov	r0, r3
 80133c6:	f004 fab5 	bl	8017934 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress1.setValue(60);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	33b8      	adds	r3, #184	; 0xb8
 80133ce:	213c      	movs	r1, #60	; 0x3c
 80133d0:	4618      	mov	r0, r3
 80133d2:	f004 fab5 	bl	8017940 <_ZN8touchgfx12LineProgress8setValueEi>

    textArea1.setXY(116, 0);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80133dc:	2200      	movs	r2, #0
 80133de:	2174      	movs	r1, #116	; 0x74
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7fc f912 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80133ec:	2200      	movs	r2, #0
 80133ee:	2100      	movs	r1, #0
 80133f0:	2000      	movs	r0, #0
 80133f2:	f7fe fd3f 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133f6:	4603      	mov	r3, r0
 80133f8:	657c      	str	r4, [r7, #84]	; 0x54
 80133fa:	60bb      	str	r3, [r7, #8]
        this->color = color;
 80133fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133fe:	68ba      	ldr	r2, [r7, #8]
 8013400:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013408:	65fb      	str	r3, [r7, #92]	; 0x5c
 801340a:	2300      	movs	r3, #0
 801340c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        linespace = space;
 8013410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013412:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8013416:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 801341e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013422:	2109      	movs	r1, #9
 8013424:	4618      	mov	r0, r3
 8013426:	f7fe fe27 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 801342a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801342e:	4619      	mov	r1, r3
 8013430:	4620      	mov	r0, r4
 8013432:	f007 f8d5 	bl	801a5e0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8013436:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801343a:	4618      	mov	r0, r3
 801343c:	f7fb fd66 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>

    circle1.setPosition(200, 72, 80, 80);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8013446:	2350      	movs	r3, #80	; 0x50
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	2350      	movs	r3, #80	; 0x50
 801344c:	2248      	movs	r2, #72	; 0x48
 801344e:	21c8      	movs	r1, #200	; 0xc8
 8013450:	f7fc f876 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    circle1.setCenter(40, 40);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f503 7308 	add.w	r3, r3, #544	; 0x220
 801345a:	2228      	movs	r2, #40	; 0x28
 801345c:	2128      	movs	r1, #40	; 0x28
 801345e:	4618      	mov	r0, r3
 8013460:	f7ff f980 	bl	8012764 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circle1.setRadius(40);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f503 7308 	add.w	r3, r3, #544	; 0x220
 801346a:	2128      	movs	r1, #40	; 0x28
 801346c:	4618      	mov	r0, r3
 801346e:	f7ff faab 	bl	80129c8 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circle1.setLineWidth(0);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8013478:	2100      	movs	r1, #0
 801347a:	4618      	mov	r0, r3
 801347c:	f7ff fabb 	bl	80129f6 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circle1.setArc(0, 360);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8013486:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801348a:	2100      	movs	r1, #0
 801348c:	4618      	mov	r0, r3
 801348e:	f7ff f98f 	bl	80127b0 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circle1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(52, 181, 214));
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 8013498:	22d6      	movs	r2, #214	; 0xd6
 801349a:	21b5      	movs	r1, #181	; 0xb5
 801349c:	2034      	movs	r0, #52	; 0x34
 801349e:	f7fe fce9 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80134a2:	4603      	mov	r3, r0
 80134a4:	4619      	mov	r1, r3
 80134a6:	4620      	mov	r0, r4
 80134a8:	f7fe fdb0 	bl	801200c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    circle1.setPainter(circle1Painter);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f503 7208 	add.w	r2, r3, #544	; 0x220
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 80134b8:	4619      	mov	r1, r3
 80134ba:	4610      	mov	r0, r2
 80134bc:	f006 fa38 	bl	8019930 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    shape1.setPosition(199, 77, 80, 80);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f503 7021 	add.w	r0, r3, #644	; 0x284
 80134c6:	2350      	movs	r3, #80	; 0x50
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	2350      	movs	r3, #80	; 0x50
 80134cc:	224d      	movs	r2, #77	; 0x4d
 80134ce:	21c7      	movs	r1, #199	; 0xc7
 80134d0:	f7fc f836 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setOrigin(0.000f, 0.000f);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	e009      	b.n	80134ec <_ZN15Screen2ViewBaseC1Ev+0x390>
 80134d8:	08029b4c 	.word	0x08029b4c
 80134dc:	080135f5 	.word	0x080135f5
 80134e0:	3f666666 	.word	0x3f666666
 80134e4:	3f4ccccd 	.word	0x3f4ccccd
 80134e8:	00000000 	.word	0x00000000
 80134ec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80134f0:	ed5f 0a03 	vldr	s1, [pc, #-12]	; 80134e8 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 80134f4:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 80134e8 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 80134f8:	4618      	mov	r0, r3
 80134fa:	f000 f8c7 	bl	801368c <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(0.800f, 0.900f);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013504:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 80134e0 <_ZN15Screen2ViewBaseC1Ev+0x384>
 8013508:	ed1f 0a0a 	vldr	s0, [pc, #-40]	; 80134e4 <_ZN15Screen2ViewBaseC1Ev+0x388>
 801350c:	4618      	mov	r0, r3
 801350e:	f000 f91d 	bl	801374c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.000f);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013518:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 80134e8 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 801351c:	4618      	mov	r0, r3
 801351e:	f000 f959 	bl	80137d4 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 219, 219));
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8013528:	22db      	movs	r2, #219	; 0xdb
 801352a:	21db      	movs	r1, #219	; 0xdb
 801352c:	20f0      	movs	r0, #240	; 0xf0
 801352e:	f7fe fca1 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013532:	4603      	mov	r3, r0
 8013534:	4619      	mov	r1, r3
 8013536:	4620      	mov	r0, r4
 8013538:	f7fe fd68 	bl	801200c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8013548:	4619      	mov	r1, r3
 801354a:	4610      	mov	r0, r2
 801354c:	f006 f9f0 	bl	8019930 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[3] = { { 40.000f, 0.000f }, { 80.000f, 40.000f }, { 40.000f, 80.000f } };
 8013550:	4b22      	ldr	r3, [pc, #136]	; (80135dc <_ZN15Screen2ViewBaseC1Ev+0x480>)
 8013552:	f107 040c 	add.w	r4, r7, #12
 8013556:	461d      	mov	r5, r3
 8013558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801355a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801355c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013560:	e884 0003 	stmia.w	r4, {r0, r1}
    shape1.setShape(shape1Points);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801356a:	f107 020c 	add.w	r2, r7, #12
 801356e:	4611      	mov	r1, r2
 8013570:	4618      	mov	r0, r3
 8013572:	f000 f967 	bl	8013844 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(box1);
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	3340      	adds	r3, #64	; 0x40
 801357c:	4619      	mov	r1, r3
 801357e:	4610      	mov	r0, r2
 8013580:	f7fe fb72 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	3370      	adds	r3, #112	; 0x70
 801358a:	4619      	mov	r1, r3
 801358c:	4610      	mov	r0, r2
 801358e:	f7fe fb6b 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lineProgress1);
 8013592:	687a      	ldr	r2, [r7, #4]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	33b8      	adds	r3, #184	; 0xb8
 8013598:	4619      	mov	r1, r3
 801359a:	4610      	mov	r0, r2
 801359c:	f7fe fb64 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80135a8:	4619      	mov	r1, r3
 80135aa:	4610      	mov	r0, r2
 80135ac:	f7fe fb5c 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circle1);
 80135b0:	687a      	ldr	r2, [r7, #4]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80135b8:	4619      	mov	r1, r3
 80135ba:	4610      	mov	r0, r2
 80135bc:	f7fe fb54 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80135c8:	4619      	mov	r1, r3
 80135ca:	4610      	mov	r0, r2
 80135cc:	f7fe fb4c 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	4618      	mov	r0, r3
 80135d4:	3760      	adds	r7, #96	; 0x60
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bdb0      	pop	{r4, r5, r7, pc}
 80135da:	bf00      	nop
 80135dc:	08028df4 	.word	0x08028df4

080135e0 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 80135e0:	b480      	push	{r7}
 80135e2:	b083      	sub	sp, #12
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]

}
 80135e8:	bf00      	nop
 80135ea:	370c      	adds	r7, #12
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	3370      	adds	r3, #112	; 0x70
 8013602:	683a      	ldr	r2, [r7, #0]
 8013604:	429a      	cmp	r2, r3
 8013606:	d106      	bne.n	8013616 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ff fd38 	bl	801307e <_ZN15Screen2ViewBase11applicationEv>
 801360e:	4603      	mov	r3, r0
 8013610:	4618      	mov	r0, r3
 8013612:	f7fc faa3 	bl	800fb5c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 8013616:	bf00      	nop
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
	...

08013620 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	4618      	mov	r0, r3
 801362c:	f009 fa28 	bl	801ca80 <_ZN8touchgfx6ScreenC1Ev>
 8013630:	4a05      	ldr	r2, [pc, #20]	; (8013648 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2200      	movs	r2, #0
 801363a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	4618      	mov	r0, r3
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	08029c34 	.word	0x08029c34

0801364c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	60f8      	str	r0, [r7, #12]
 8013654:	60b9      	str	r1, [r7, #8]
 8013656:	4639      	mov	r1, r7
 8013658:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	4618      	mov	r0, r3
 8013660:	f7ff f982 	bl	8012968 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013664:	4a08      	ldr	r2, [pc, #32]	; (8013688 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	68ba      	ldr	r2, [r7, #8]
 801366e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	3308      	adds	r3, #8
 8013674:	463a      	mov	r2, r7
 8013676:	e892 0003 	ldmia.w	r2, {r0, r1}
 801367a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	4618      	mov	r0, r3
 8013682:	3710      	adds	r7, #16
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	08029b80 	.word	0x08029b80

0801368c <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 801368c:	b590      	push	{r4, r7, lr}
 801368e:	b08b      	sub	sp, #44	; 0x2c
 8013690:	af00      	add	r7, sp, #0
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	ed87 0a02 	vstr	s0, [r7, #8]
 8013698:	edc7 0a01 	vstr	s1, [r7, #4]
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	623b      	str	r3, [r7, #32]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80136a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80136a4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013748 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 80136a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80136ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136b0:	f107 031c 	add.w	r3, r7, #28
 80136b4:	ee17 1a90 	vmov	r1, s15
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7fe fbae 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80136be:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 80136c0:	617b      	str	r3, [r7, #20]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	627b      	str	r3, [r7, #36]	; 0x24
 80136c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80136ca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013748 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 80136ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80136d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136d6:	f107 0318 	add.w	r3, r7, #24
 80136da:	ee17 1a90 	vmov	r1, s15
 80136de:	4618      	mov	r0, r3
 80136e0:	f7fe fb9b 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80136e4:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 80136e6:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	3330      	adds	r3, #48	; 0x30
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7ff fc2c 	bl	8012f4a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80136f2:	4604      	mov	r4, r0
 80136f4:	f107 0314 	add.w	r3, r7, #20
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7ff fc26 	bl	8012f4a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80136fe:	4603      	mov	r3, r0
 8013700:	429c      	cmp	r4, r3
 8013702:	d10f      	bne.n	8013724 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	3334      	adds	r3, #52	; 0x34
 8013708:	4618      	mov	r0, r3
 801370a:	f7ff fc1e 	bl	8012f4a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801370e:	4604      	mov	r4, r0
 8013710:	f107 0310 	add.w	r3, r7, #16
 8013714:	4618      	mov	r0, r3
 8013716:	f7ff fc18 	bl	8012f4a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801371a:	4603      	mov	r3, r0
 801371c:	429c      	cmp	r4, r3
 801371e:	d101      	bne.n	8013724 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8013720:	2301      	movs	r3, #1
 8013722:	e000      	b.n	8013726 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 8013724:	2300      	movs	r3, #0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d109      	bne.n	801373e <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	697a      	ldr	r2, [r7, #20]
 801372e:	631a      	str	r2, [r3, #48]	; 0x30
        dy = dyNew;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	693a      	ldr	r2, [r7, #16]
 8013734:	635a      	str	r2, [r3, #52]	; 0x34

        updateAbstractShapeCache();
 8013736:	68f8      	ldr	r0, [r7, #12]
 8013738:	f005 fb64 	bl	8018e04 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 801373c:	e000      	b.n	8013740 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 801373e:	bf00      	nop
    }
 8013740:	372c      	adds	r7, #44	; 0x2c
 8013742:	46bd      	mov	sp, r7
 8013744:	bd90      	pop	{r4, r7, pc}
 8013746:	bf00      	nop
 8013748:	42000000 	.word	0x42000000

0801374c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 801374c:	b580      	push	{r7, lr}
 801374e:	b088      	sub	sp, #32
 8013750:	af00      	add	r7, sp, #0
 8013752:	60f8      	str	r0, [r7, #12]
 8013754:	ed87 0a02 	vstr	s0, [r7, #8]
 8013758:	edc7 0a01 	vstr	s1, [r7, #4]
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10(int(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 8013760:	edd7 7a06 	vldr	s15, [r7, #24]
 8013764:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80137d0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8013768:	ee67 7a87 	vmul.f32	s15, s15, s14
 801376c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80137d0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8013770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013778:	f107 0314 	add.w	r3, r7, #20
 801377c:	ee17 1a90 	vmov	r1, s15
 8013780:	4618      	mov	r0, r3
 8013782:	f7ff fbee 	bl	8012f62 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	63da      	str	r2, [r3, #60]	; 0x3c
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	61fb      	str	r3, [r7, #28]
 8013792:	edd7 7a07 	vldr	s15, [r7, #28]
 8013796:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80137d0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 801379a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801379e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80137d0 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 80137a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80137a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137aa:	f107 0310 	add.w	r3, r7, #16
 80137ae:	ee17 1a90 	vmov	r1, s15
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff fbd5 	bl	8012f62 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	641a      	str	r2, [r3, #64]	; 0x40
        updateAbstractShapeCache();
 80137c0:	68f8      	ldr	r0, [r7, #12]
 80137c2:	f005 fb1f 	bl	8018e04 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 80137c6:	bf00      	nop
 80137c8:	3720      	adds	r7, #32
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	42000000 	.word	0x42000000

080137d4 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 80137d4:	b590      	push	{r4, r7, lr}
 80137d6:	b087      	sub	sp, #28
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	ed87 0a00 	vstr	s0, [r7]
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	617b      	str	r3, [r7, #20]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80137e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80137e8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8013840 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 80137ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80137f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137f4:	f107 0310 	add.w	r3, r7, #16
 80137f8:	ee17 1a90 	vmov	r1, s15
 80137fc:	4618      	mov	r0, r3
 80137fe:	f7fe fb0c 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013802:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 8013804:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	3338      	adds	r3, #56	; 0x38
 801380a:	4618      	mov	r0, r3
 801380c:	f7ff fb9d 	bl	8012f4a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013810:	4604      	mov	r4, r0
 8013812:	f107 030c 	add.w	r3, r7, #12
 8013816:	4618      	mov	r0, r3
 8013818:	f7ff fb97 	bl	8012f4a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801381c:	4603      	mov	r3, r0
 801381e:	429c      	cmp	r4, r3
 8013820:	bf14      	ite	ne
 8013822:	2301      	movne	r3, #1
 8013824:	2300      	moveq	r3, #0
 8013826:	b2db      	uxtb	r3, r3
 8013828:	2b00      	cmp	r3, #0
 801382a:	d005      	beq.n	8013838 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	68fa      	ldr	r2, [r7, #12]
 8013830:	639a      	str	r2, [r3, #56]	; 0x38
            updateAbstractShapeCache();
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f005 fae6 	bl	8018e04 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8013838:	bf00      	nop
 801383a:	371c      	adds	r7, #28
 801383c:	46bd      	mov	sp, r7
 801383e:	bd90      	pop	{r4, r7, pc}
 8013840:	42000000 	.word	0x42000000

08013844 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 8013844:	b5b0      	push	{r4, r5, r7, lr}
 8013846:	b088      	sub	sp, #32
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3378      	adds	r3, #120	; 0x78
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	4798      	blx	r3
 801385a:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 801385c:	2300      	movs	r3, #0
 801385e:	61fb      	str	r3, [r7, #28]
 8013860:	69fa      	ldr	r2, [r7, #28]
 8013862:	69bb      	ldr	r3, [r7, #24]
 8013864:	429a      	cmp	r2, r3
 8013866:	da38      	bge.n	80138da <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	337c      	adds	r3, #124	; 0x7c
 801386e:	681c      	ldr	r4, [r3, #0]
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	00db      	lsls	r3, r3, #3
 8013874:	683a      	ldr	r2, [r7, #0]
 8013876:	4413      	add	r3, r2
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	613b      	str	r3, [r7, #16]
 801387c:	edd7 7a04 	vldr	s15, [r7, #16]
 8013880:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80138e8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8013884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801388c:	f107 030c 	add.w	r3, r7, #12
 8013890:	ee17 1a90 	vmov	r1, s15
 8013894:	4618      	mov	r0, r3
 8013896:	f7fe fac0 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	461d      	mov	r5, r3
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	00db      	lsls	r3, r3, #3
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	4413      	add	r3, r2
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	617b      	str	r3, [r7, #20]
 80138aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80138ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80138e8 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 80138b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80138b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138ba:	f107 0308 	add.w	r3, r7, #8
 80138be:	ee17 1a90 	vmov	r1, s15
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fe faa9 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	462a      	mov	r2, r5
 80138cc:	69f9      	ldr	r1, [r7, #28]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	3301      	adds	r3, #1
 80138d6:	61fb      	str	r3, [r7, #28]
 80138d8:	e7c2      	b.n	8013860 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f005 fa92 	bl	8018e04 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 80138e0:	bf00      	nop
 80138e2:	3720      	adds	r7, #32
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bdb0      	pop	{r4, r5, r7, pc}
 80138e8:	42000000 	.word	0x42000000

080138ec <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	4a05      	ldr	r2, [pc, #20]	; (801390c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	601a      	str	r2, [r3, #0]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7ff f891 	bl	8012a24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	4618      	mov	r0, r3
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	08029b80 	.word	0x08029b80

08013910 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f7ff ffe7 	bl	80138ec <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801391e:	2110      	movs	r1, #16
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f013 fecb 	bl	80276bc <_ZdlPvj>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	4618      	mov	r0, r3
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <_ZN8touchgfx5ShapeILt3EED1Ev>:
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	4a05      	ldr	r2, [pc, #20]	; (8013950 <_ZN8touchgfx5ShapeILt3EED1Ev+0x20>)
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	601a      	str	r2, [r3, #0]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	4618      	mov	r0, r3
 8013942:	f7ff fba7 	bl	8013094 <_ZN8touchgfx13AbstractShapeD1Ev>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	4618      	mov	r0, r3
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}
 8013950:	08029b98 	.word	0x08029b98

08013954 <_ZN8touchgfx5ShapeILt3EED0Ev>:
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7ff ffe7 	bl	8013930 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8013962:	217c      	movs	r1, #124	; 0x7c
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f013 fea9 	bl	80276bc <_ZdlPvj>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	4618      	mov	r0, r3
 801396e:	3708      	adds	r7, #8
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}

08013974 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	4a05      	ldr	r2, [pc, #20]	; (8013994 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	601a      	str	r2, [r3, #0]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	4618      	mov	r0, r3
 8013986:	f7fc f86b 	bl	800fa60 <_ZN8touchgfx6WidgetD1Ev>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	4618      	mov	r0, r3
 801398e:	3708      	adds	r7, #8
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}
 8013994:	0802bde0 	.word	0x0802bde0

08013998 <_ZN8touchgfx5ImageD0Ev>:
 8013998:	b580      	push	{r7, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f7ff ffe7 	bl	8013974 <_ZN8touchgfx5ImageD1Ev>
 80139a6:	212c      	movs	r1, #44	; 0x2c
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f013 fe87 	bl	80276bc <_ZdlPvj>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	4a0a      	ldr	r2, [pc, #40]	; (80139ec <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	601a      	str	r2, [r3, #0]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	3358      	adds	r3, #88	; 0x58
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7ff f8b0 	bl	8012b30 <_ZN8touchgfx9ContainerD1Ev>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	332c      	adds	r3, #44	; 0x2c
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7ff ffcd 	bl	8013974 <_ZN8touchgfx5ImageD1Ev>
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7ff f8a7 	bl	8012b30 <_ZN8touchgfx9ContainerD1Ev>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4618      	mov	r0, r3
 80139e6:	3708      	adds	r7, #8
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}
 80139ec:	0802ab4c 	.word	0x0802ab4c

080139f0 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b082      	sub	sp, #8
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f7ff ffdd 	bl	80139b8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80139fe:	2190      	movs	r1, #144	; 0x90
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f013 fe5b 	bl	80276bc <_ZdlPvj>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <_ZN8touchgfx4LineD1Ev>:
 *            line.setStart(1.1f, 1.1f); // Will use (35/32, 35/32) = (1.09375f, 1.09375f)
 *            int x, y;
 *            line.getStart(&amp;x, &amp;y); // Will return (1, 1)
 *       @endcode.
 */
class Line : public CanvasWidget
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	4a05      	ldr	r2, [pc, #20]	; (8013a30 <_ZN8touchgfx4LineD1Ev+0x20>)
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	601a      	str	r2, [r3, #0]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7fe ff01 	bl	8012828 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	0802b93c 	.word	0x0802b93c

08013a34 <_ZN8touchgfx4LineD0Ev>:
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f7ff ffe7 	bl	8013a10 <_ZN8touchgfx4LineD1Ev>
 8013a42:	2174      	movs	r1, #116	; 0x74
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f013 fe39 	bl	80276bc <_ZdlPvj>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <_ZN8touchgfx12LineProgressD1Ev>:
 * horizontal or vertical, but can start at any coordinate and finish at any coordinate.
 *
 * @note As LineProgress uses CanvasWidgetRenderer, it is important that a buffer is set up by
 *       calling CanvasWidgetRendere::setBuffer().
 */
class LineProgress : public AbstractProgressIndicator
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	4a08      	ldr	r2, [pc, #32]	; (8013a80 <_ZN8touchgfx12LineProgressD1Ev+0x2c>)
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	601a      	str	r2, [r3, #0]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	3390      	adds	r3, #144	; 0x90
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff ffd2 	bl	8013a10 <_ZN8touchgfx4LineD1Ev>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7ff ffa2 	bl	80139b8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	4618      	mov	r0, r3
 8013a78:	3708      	adds	r7, #8
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	0802a9e4 	.word	0x0802a9e4

08013a84 <_ZN8touchgfx12LineProgressD0Ev>:
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f7ff ffe1 	bl	8013a54 <_ZN8touchgfx12LineProgressD1Ev>
 8013a92:	f44f 718a 	mov.w	r1, #276	; 0x114
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f013 fe10 	bl	80276bc <_ZdlPvj>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3708      	adds	r7, #8
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}

08013aa6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8013aa6:	b580      	push	{r7, lr}
 8013aa8:	b082      	sub	sp, #8
 8013aaa:	af00      	add	r7, sp, #0
 8013aac:	6078      	str	r0, [r7, #4]
 8013aae:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	68d2      	ldr	r2, [r2, #12]
 8013ab8:	1052      	asrs	r2, r2, #1
 8013aba:	1898      	adds	r0, r3, r2
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	f003 0301 	and.w	r3, r3, #1
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d102      	bne.n	8013ace <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	689b      	ldr	r3, [r3, #8]
 8013acc:	e00a      	b.n	8013ae4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	687a      	ldr	r2, [r7, #4]
 8013ad4:	68d2      	ldr	r2, [r2, #12]
 8013ad6:	1052      	asrs	r2, r2, #1
 8013ad8:	4413      	add	r3, r2
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	687a      	ldr	r2, [r7, #4]
 8013ade:	6892      	ldr	r2, [r2, #8]
 8013ae0:	4413      	add	r3, r2
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	6839      	ldr	r1, [r7, #0]
 8013ae6:	4798      	blx	r3
    }
 8013ae8:	bf00      	nop
 8013aea:	3708      	adds	r7, #8
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d010      	beq.n	8013b22 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	689b      	ldr	r3, [r3, #8]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d107      	bne.n	8013b18 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d101      	bne.n	8013b18 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013b14:	2301      	movs	r3, #1
 8013b16:	e000      	b.n	8013b1a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8013b18:	2300      	movs	r3, #0
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d001      	beq.n	8013b22 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013b1e:	2301      	movs	r3, #1
 8013b20:	e000      	b.n	8013b24 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013b22:	2300      	movs	r3, #0
    }
 8013b24:	4618      	mov	r0, r3
 8013b26:	370c      	adds	r7, #12
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr

08013b30 <_ZNK8touchgfx5ShapeILt3EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 8013b38:	2303      	movs	r3, #3
    }
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	370c      	adds	r7, #12
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b44:	4770      	bx	lr

08013b46 <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8013b46:	b480      	push	{r7}
 8013b48:	b085      	sub	sp, #20
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	60f8      	str	r0, [r7, #12]
 8013b4e:	60b9      	str	r1, [r7, #8]
 8013b50:	607a      	str	r2, [r7, #4]
 8013b52:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	db0f      	blt.n	8013b7a <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x34>
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	2b02      	cmp	r3, #2
 8013b5e:	dc0c      	bgt.n	8013b7a <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x34>
        {
            xCorner[i] = x, yCorner[i] = y;
 8013b60:	68fa      	ldr	r2, [r7, #12]
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	3312      	adds	r3, #18
 8013b66:	009b      	lsls	r3, r3, #2
 8013b68:	4413      	add	r3, r2
 8013b6a:	687a      	ldr	r2, [r7, #4]
 8013b6c:	605a      	str	r2, [r3, #4]
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	68ba      	ldr	r2, [r7, #8]
 8013b72:	3216      	adds	r2, #22
 8013b74:	6839      	ldr	r1, [r7, #0]
 8013b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8013b7a:	bf00      	nop
 8013b7c:	3714      	adds	r7, #20
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 8013b86:	b580      	push	{r7, lr}
 8013b88:	b084      	sub	sp, #16
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
 8013b8e:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	db09      	blt.n	8013baa <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x24>
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	2b02      	cmp	r3, #2
 8013b9a:	dc06      	bgt.n	8013baa <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x24>
        {
            return xCorner[i];
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	3312      	adds	r3, #18
 8013ba2:	009b      	lsls	r3, r3, #2
 8013ba4:	4413      	add	r3, r2
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	e00b      	b.n	8013bc2 <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x3c>
 8013baa:	2300      	movs	r3, #0
 8013bac:	60fb      	str	r3, [r7, #12]
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	015a      	lsls	r2, r3, #5
 8013bb2:	f107 0308 	add.w	r3, r7, #8
 8013bb6:	4611      	mov	r1, r2
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fe f92e 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013bbe:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8013bc0:	bf00      	nop
    }
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3710      	adds	r7, #16
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}

08013bca <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 8013bca:	b580      	push	{r7, lr}
 8013bcc:	b084      	sub	sp, #16
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	6078      	str	r0, [r7, #4]
 8013bd2:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	db08      	blt.n	8013bec <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x22>
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	2b02      	cmp	r3, #2
 8013bde:	dc05      	bgt.n	8013bec <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	683a      	ldr	r2, [r7, #0]
 8013be4:	3216      	adds	r2, #22
 8013be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bea:	e00b      	b.n	8013c04 <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x3a>
 8013bec:	2300      	movs	r3, #0
 8013bee:	60fb      	str	r3, [r7, #12]
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	015a      	lsls	r2, r3, #5
 8013bf4:	f107 0308 	add.w	r3, r7, #8
 8013bf8:	4611      	mov	r1, r2
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fe f90d 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013c00:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8013c02:	bf00      	nop
    }
 8013c04:	4618      	mov	r0, r3
 8013c06:	3710      	adds	r7, #16
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8013c0c:	b480      	push	{r7}
 8013c0e:	b085      	sub	sp, #20
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	607a      	str	r2, [r7, #4]
 8013c18:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	db0f      	blt.n	8013c40 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x34>
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	2b02      	cmp	r3, #2
 8013c24:	dc0c      	bgt.n	8013c40 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x34>
        {
            xCache[i] = x, yCache[i] = y;
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	3318      	adds	r3, #24
 8013c2c:	009b      	lsls	r3, r3, #2
 8013c2e:	4413      	add	r3, r2
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	605a      	str	r2, [r3, #4]
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	68ba      	ldr	r2, [r7, #8]
 8013c38:	321c      	adds	r2, #28
 8013c3a:	6839      	ldr	r1, [r7, #0]
 8013c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8013c40:	bf00      	nop
 8013c42:	3714      	adds	r7, #20
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	db09      	blt.n	8013c70 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x24>
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	2b02      	cmp	r3, #2
 8013c60:	dc06      	bgt.n	8013c70 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x24>
        {
            return xCache[i];
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	3318      	adds	r3, #24
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	4413      	add	r3, r2
 8013c6c:	685b      	ldr	r3, [r3, #4]
 8013c6e:	e00b      	b.n	8013c88 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x3c>
 8013c70:	2300      	movs	r3, #0
 8013c72:	60fb      	str	r3, [r7, #12]
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	015a      	lsls	r2, r3, #5
 8013c78:	f107 0308 	add.w	r3, r7, #8
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7fe f8cb 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013c84:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8013c86:	bf00      	nop
    }
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3710      	adds	r7, #16
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	db08      	blt.n	8013cb2 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x22>
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	2b02      	cmp	r3, #2
 8013ca4:	dc05      	bgt.n	8013cb2 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x22>
        {
            return yCache[i];
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	683a      	ldr	r2, [r7, #0]
 8013caa:	321c      	adds	r2, #28
 8013cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cb0:	e00b      	b.n	8013cca <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x3a>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	60fb      	str	r3, [r7, #12]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	015a      	lsls	r2, r3, #5
 8013cba:	f107 0308 	add.w	r3, r7, #8
 8013cbe:	4611      	mov	r1, r2
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fe f8aa 	bl	8011e1a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013cc6:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8013cc8:	bf00      	nop
    }
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3710      	adds	r7, #16
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
	...

08013cd4 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	4a05      	ldr	r2, [pc, #20]	; (8013cf4 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	601a      	str	r2, [r3, #0]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fd ff67 	bl	8011bb8 <_ZN8touchgfx6ScreenD1Ev>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	4618      	mov	r0, r3
 8013cee:	3708      	adds	r7, #8
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	08029cb4 	.word	0x08029cb4

08013cf8 <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f7ff ffe7 	bl	8013cd4 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8013d06:	2140      	movs	r1, #64	; 0x40
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f013 fcd7 	bl	80276bc <_ZdlPvj>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	4618      	mov	r0, r3
 8013d12:	3708      	adds	r7, #8
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	4a18      	ldr	r2, [pc, #96]	; (8013d84 <_ZN15Screen3ViewBaseD1Ev+0x6c>)
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	601a      	str	r2, [r3, #0]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f000 fa03 	bl	8014138 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fe fddb 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7fe fdd5 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	33e8      	adds	r3, #232	; 0xe8
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f000 fa36 	bl	80141c0 <_ZN8touchgfx11BoxProgressD1Ev>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	33a0      	adds	r3, #160	; 0xa0
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7fe ff4f 	bl	8012bfc <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	3370      	adds	r3, #112	; 0x70
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fe fdc6 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	3340      	adds	r3, #64	; 0x40
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7fe fdc1 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7ff ffad 	bl	8013cd4 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	08029c68 	.word	0x08029c68

08013d88 <_ZN15Screen3ViewBaseD0Ev>:
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7ff ffc1 	bl	8013d18 <_ZN15Screen3ViewBaseD1Ev>
 8013d96:	f44f 7106 	mov.w	r1, #536	; 0x218
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f013 fc8e 	bl	80276bc <_ZdlPvj>
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	4618      	mov	r0, r3
 8013da4:	3708      	adds	r7, #8
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}

08013daa <_ZN15Screen3ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b082      	sub	sp, #8
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013db2:	f007 feaf 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 8013db6:	4603      	mov	r3, r0
    }
 8013db8:	4618      	mov	r0, r3
 8013dba:	3708      	adds	r7, #8
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <_ZN15Screen3ViewBaseC1Ev>:
#include <gui_generated/screen3_screen/Screen3ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen3ViewBase::Screen3ViewBase() :
 8013dc0:	b590      	push	{r4, r7, lr}
 8013dc2:	b08d      	sub	sp, #52	; 0x34
 8013dc4:	af02      	add	r7, sp, #8
 8013dc6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f000 f97e 	bl	80140cc <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 8013dd0:	4aac      	ldr	r2, [pc, #688]	; (8014084 <_ZN15Screen3ViewBaseC1Ev+0x2c4>)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	3340      	adds	r3, #64	; 0x40
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7fd ff90 	bl	8011d00 <_ZN8touchgfx3BoxC1Ev>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	3370      	adds	r3, #112	; 0x70
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7fd ff8b 	bl	8011d00 <_ZN8touchgfx3BoxC1Ev>
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	33a0      	adds	r3, #160	; 0xa0
 8013dee:	4618      	mov	r0, r3
 8013df0:	f006 fe22 	bl	801aa38 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	33e8      	adds	r3, #232	; 0xe8
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f003 fce7 	bl	80177cc <_ZN8touchgfx11BoxProgressC1Ev>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7fd ff7b 	bl	8011d00 <_ZN8touchgfx3BoxC1Ev>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8013e10:	4618      	mov	r0, r3
 8013e12:	f7fd ff75 	bl	8011d00 <_ZN8touchgfx3BoxC1Ev>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8013e1c:	4b9a      	ldr	r3, [pc, #616]	; (8014088 <_ZN15Screen3ViewBaseC1Ev+0x2c8>)
 8013e1e:	60fb      	str	r3, [r7, #12]
 8013e20:	2300      	movs	r3, #0
 8013e22:	613b      	str	r3, [r7, #16]
 8013e24:	f107 030c 	add.w	r3, r7, #12
 8013e28:	cb0c      	ldmia	r3, {r2, r3}
 8013e2a:	6879      	ldr	r1, [r7, #4]
 8013e2c:	f000 f964 	bl	80140f8 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013e36:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013e3a:	9300      	str	r3, [sp, #0]
 8013e3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013e40:	2200      	movs	r2, #0
 8013e42:	2100      	movs	r1, #0
 8013e44:	f7fb fb7c 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013e4e:	22ff      	movs	r2, #255	; 0xff
 8013e50:	21ff      	movs	r1, #255	; 0xff
 8013e52:	20ff      	movs	r0, #255	; 0xff
 8013e54:	f7fe f80e 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	f7fd ff77 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box2.setPosition(0, 0, 480, 212);
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8013e68:	23d4      	movs	r3, #212	; 0xd4
 8013e6a:	9300      	str	r3, [sp, #0]
 8013e6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013e70:	2200      	movs	r2, #0
 8013e72:	2100      	movs	r1, #0
 8013e74:	f7fb fb64 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013e7e:	2200      	movs	r2, #0
 8013e80:	2100      	movs	r1, #0
 8013e82:	2000      	movs	r0, #0
 8013e84:	f7fd fff6 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	f7fd ff5f 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 0);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	33a0      	adds	r3, #160	; 0xa0
 8013e96:	2200      	movs	r2, #0
 8013e98:	2100      	movs	r1, #0
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7fb fbb5 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8013ea6:	f107 0314 	add.w	r3, r7, #20
 8013eaa:	2102      	movs	r1, #2
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fd fe63 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8013eb2:	f107 0318 	add.w	r3, r7, #24
 8013eb6:	2103      	movs	r1, #3
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7fd fe5d 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8013ebe:	f107 0218 	add.w	r2, r7, #24
 8013ec2:	f107 0314 	add.w	r3, r7, #20
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f006 fbc3 	bl	801a654 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID21));
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8013ed4:	f107 031c 	add.w	r3, r7, #28
 8013ed8:	210c      	movs	r1, #12
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7fe f8cc 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 8013ee0:	f107 031c 	add.w	r3, r7, #28
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f7fe f8ec 	bl	80120c4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8013eec:	f107 031c 	add.w	r3, r7, #28
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7fb f80b 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8013efc:	22ff      	movs	r2, #255	; 0xff
 8013efe:	21ff      	movs	r1, #255	; 0xff
 8013f00:	20ff      	movs	r0, #255	; 0xff
 8013f02:	f7fd ffb7 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f06:	4603      	mov	r3, r0
 8013f08:	4619      	mov	r1, r3
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	f7fe f8ec 	bl	80120e8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8013f16:	22ff      	movs	r2, #255	; 0xff
 8013f18:	21ff      	movs	r1, #255	; 0xff
 8013f1a:	20ff      	movs	r0, #255	; 0xff
 8013f1c:	f7fd ffaa 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f20:	4603      	mov	r3, r0
 8013f22:	4619      	mov	r1, r3
 8013f24:	4620      	mov	r0, r4
 8013f26:	f7fe f8ed 	bl	8012104 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013f36:	4619      	mov	r1, r3
 8013f38:	4610      	mov	r0, r2
 8013f3a:	f7fd feb0 	bl	8011c9e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    boxProgress1.setXY(60, 224);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	33e8      	adds	r3, #232	; 0xe8
 8013f42:	22e0      	movs	r2, #224	; 0xe0
 8013f44:	213c      	movs	r1, #60	; 0x3c
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fb fb5f 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(2, 2, 400, 30);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8013f52:	231e      	movs	r3, #30
 8013f54:	9300      	str	r3, [sp, #0]
 8013f56:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013f5a:	2202      	movs	r2, #2
 8013f5c:	2102      	movs	r1, #2
 8013f5e:	f003 fb8f 	bl	8017680 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 100);
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8013f68:	2300      	movs	r3, #0
 8013f6a:	9300      	str	r3, [sp, #0]
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	2264      	movs	r2, #100	; 0x64
 8013f70:	2100      	movs	r1, #0
 8013f72:	f003 fd9f 	bl	8017ab4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	33e8      	adds	r3, #232	; 0xe8
 8013f7a:	2100      	movs	r1, #0
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f003 fc5e 	bl	801783e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8013f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013f8c:	2105      	movs	r1, #5
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fd fdf2 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8013f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013f98:	4619      	mov	r1, r3
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	f003 fd80 	bl	8017aa0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8013fa6:	22ff      	movs	r2, #255	; 0xff
 8013fa8:	2197      	movs	r1, #151	; 0x97
 8013faa:	2000      	movs	r0, #0
 8013fac:	f7fd ff62 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f003 fb57 	bl	8017668 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	33e8      	adds	r3, #232	; 0xe8
 8013fbe:	213c      	movs	r1, #60	; 0x3c
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f003 fb75 	bl	80176b0 <_ZN8touchgfx11BoxProgress8setValueEi>

    box3.setPosition(9, 227, 15, 31);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8013fcc:	231f      	movs	r3, #31
 8013fce:	9300      	str	r3, [sp, #0]
 8013fd0:	230f      	movs	r3, #15
 8013fd2:	22e3      	movs	r2, #227	; 0xe3
 8013fd4:	2109      	movs	r1, #9
 8013fd6:	f7fb fab3 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    box3.setColor(touchgfx::Color::getColorFrom24BitRGB(4, 48, 240));
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8013fe0:	22f0      	movs	r2, #240	; 0xf0
 8013fe2:	2130      	movs	r1, #48	; 0x30
 8013fe4:	2004      	movs	r0, #4
 8013fe6:	f7fd ff45 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013fea:	4603      	mov	r3, r0
 8013fec:	4619      	mov	r1, r3
 8013fee:	4620      	mov	r0, r4
 8013ff0:	f7fd feae 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box3_1.setPosition(30, 227, 15, 31);
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8013ffa:	231f      	movs	r3, #31
 8013ffc:	9300      	str	r3, [sp, #0]
 8013ffe:	230f      	movs	r3, #15
 8014000:	22e3      	movs	r2, #227	; 0xe3
 8014002:	211e      	movs	r1, #30
 8014004:	f7fb fa9c 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    box3_1.setColor(touchgfx::Color::getColorFrom24BitRGB(4, 48, 240));
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 801400e:	22f0      	movs	r2, #240	; 0xf0
 8014010:	2130      	movs	r1, #48	; 0x30
 8014012:	2004      	movs	r0, #4
 8014014:	f7fd ff2e 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014018:	4603      	mov	r3, r0
 801401a:	4619      	mov	r1, r3
 801401c:	4620      	mov	r0, r4
 801401e:	f7fd fe97 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    add(box1);
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	3340      	adds	r3, #64	; 0x40
 8014028:	4619      	mov	r1, r3
 801402a:	4610      	mov	r0, r2
 801402c:	f7fd fe1c 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box2);
 8014030:	687a      	ldr	r2, [r7, #4]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	3370      	adds	r3, #112	; 0x70
 8014036:	4619      	mov	r1, r3
 8014038:	4610      	mov	r0, r2
 801403a:	f7fd fe15 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	33a0      	adds	r3, #160	; 0xa0
 8014044:	4619      	mov	r1, r3
 8014046:	4610      	mov	r0, r2
 8014048:	f7fd fe0e 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(boxProgress1);
 801404c:	687a      	ldr	r2, [r7, #4]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	33e8      	adds	r3, #232	; 0xe8
 8014052:	4619      	mov	r1, r3
 8014054:	4610      	mov	r0, r2
 8014056:	f7fd fe07 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box3);
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014062:	4619      	mov	r1, r3
 8014064:	4610      	mov	r0, r2
 8014066:	f7fd fdff 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box3_1);
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8014072:	4619      	mov	r1, r3
 8014074:	4610      	mov	r0, r2
 8014076:	f7fd fdf7 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4618      	mov	r0, r3
 801407e:	372c      	adds	r7, #44	; 0x2c
 8014080:	46bd      	mov	sp, r7
 8014082:	bd90      	pop	{r4, r7, pc}
 8014084:	08029c68 	.word	0x08029c68
 8014088:	080140a1 	.word	0x080140a1

0801408c <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]

}
 8014094:	bf00      	nop
 8014096:	370c      	adds	r7, #12
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr

080140a0 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	33a0      	adds	r3, #160	; 0xa0
 80140ae:	683a      	ldr	r2, [r7, #0]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d106      	bne.n	80140c2 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f7ff fe78 	bl	8013daa <_ZN15Screen3ViewBase11applicationEv>
 80140ba:	4603      	mov	r3, r0
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fb fd4d 	bl	800fb5c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 80140c2:	bf00      	nop
 80140c4:	3708      	adds	r7, #8
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
	...

080140cc <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View()
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f008 fcd2 	bl	801ca80 <_ZN8touchgfx6ScreenC1Ev>
 80140dc:	4a05      	ldr	r2, [pc, #20]	; (80140f4 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2200      	movs	r2, #0
 80140e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	4618      	mov	r0, r3
 80140ec:	3708      	adds	r7, #8
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	08029cb4 	.word	0x08029cb4

080140f8 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	4639      	mov	r1, r7
 8014104:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	4618      	mov	r0, r3
 801410c:	f7fe fc2c 	bl	8012968 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8014110:	4a08      	ldr	r2, [pc, #32]	; (8014134 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	68ba      	ldr	r2, [r7, #8]
 801411a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	3308      	adds	r3, #8
 8014120:	463a      	mov	r2, r7
 8014122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014126:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	4618      	mov	r0, r3
 801412e:	3710      	adds	r7, #16
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	08029c9c 	.word	0x08029c9c

08014138 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	4a05      	ldr	r2, [pc, #20]	; (8014158 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	601a      	str	r2, [r3, #0]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	4618      	mov	r0, r3
 801414a:	f7fe fc6b 	bl	8012a24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	4618      	mov	r0, r3
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}
 8014158:	08029c9c 	.word	0x08029c9c

0801415c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801415c:	b580      	push	{r7, lr}
 801415e:	b082      	sub	sp, #8
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7ff ffe7 	bl	8014138 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801416a:	2110      	movs	r1, #16
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f013 faa5 	bl	80276bc <_ZdlPvj>
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	4618      	mov	r0, r3
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 801417c:	b580      	push	{r7, lr}
 801417e:	b082      	sub	sp, #8
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	4a05      	ldr	r2, [pc, #20]	; (801419c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	601a      	str	r2, [r3, #0]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	4618      	mov	r0, r3
 801418e:	f7ff fc13 	bl	80139b8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	4618      	mov	r0, r3
 8014196:	3708      	adds	r7, #8
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	0802a91c 	.word	0x0802a91c

080141a0 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7ff ffe7 	bl	801417c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80141ae:	2190      	movs	r1, #144	; 0x90
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f013 fa83 	bl	80276bc <_ZdlPvj>
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	4618      	mov	r0, r3
 80141ba:	3708      	adds	r7, #8
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <_ZN8touchgfx11BoxProgressD1Ev>:
/**
 * A BoxProgress which shows the current progress using a simple Box. It is possible to set the
 * color and the alpha of the box. It is also possible to control in what direction the
 * box will progress (up, down, to the left or to the right).
 */
class BoxProgress : public AbstractDirectionProgress
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	4a08      	ldr	r2, [pc, #32]	; (80141ec <_ZN8touchgfx11BoxProgressD1Ev+0x2c>)
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	601a      	str	r2, [r3, #0]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	3390      	adds	r3, #144	; 0x90
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7fe fb8e 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	4618      	mov	r0, r3
 80141dc:	f7ff ffce 	bl	801417c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	4618      	mov	r0, r3
 80141e4:	3708      	adds	r7, #8
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	0802a844 	.word	0x0802a844

080141f0 <_ZN8touchgfx11BoxProgressD0Ev>:
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6878      	ldr	r0, [r7, #4]
 80141fa:	f7ff ffe1 	bl	80141c0 <_ZN8touchgfx11BoxProgressD1Ev>
 80141fe:	21c0      	movs	r1, #192	; 0xc0
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f013 fa5b 	bl	80276bc <_ZdlPvj>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	4618      	mov	r0, r3
 801420a:	3708      	adds	r7, #8
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	685b      	ldr	r3, [r3, #4]
 801421e:	687a      	ldr	r2, [r7, #4]
 8014220:	68d2      	ldr	r2, [r2, #12]
 8014222:	1052      	asrs	r2, r2, #1
 8014224:	1898      	adds	r0, r3, r2
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	f003 0301 	and.w	r3, r3, #1
 801422e:	2b00      	cmp	r3, #0
 8014230:	d102      	bne.n	8014238 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	689b      	ldr	r3, [r3, #8]
 8014236:	e00a      	b.n	801424e <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	685b      	ldr	r3, [r3, #4]
 801423c:	687a      	ldr	r2, [r7, #4]
 801423e:	68d2      	ldr	r2, [r2, #12]
 8014240:	1052      	asrs	r2, r2, #1
 8014242:	4413      	add	r3, r2
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	687a      	ldr	r2, [r7, #4]
 8014248:	6892      	ldr	r2, [r2, #8]
 801424a:	4413      	add	r3, r2
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	4798      	blx	r3
    }
 8014252:	bf00      	nop
 8014254:	3708      	adds	r7, #8
 8014256:	46bd      	mov	sp, r7
 8014258:	bd80      	pop	{r7, pc}

0801425a <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801425a:	b480      	push	{r7}
 801425c:	b083      	sub	sp, #12
 801425e:	af00      	add	r7, sp, #0
 8014260:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d010      	beq.n	801428c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	689b      	ldr	r3, [r3, #8]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d107      	bne.n	8014282 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	68db      	ldr	r3, [r3, #12]
 8014276:	f003 0301 	and.w	r3, r3, #1
 801427a:	2b00      	cmp	r3, #0
 801427c:	d101      	bne.n	8014282 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801427e:	2301      	movs	r3, #1
 8014280:	e000      	b.n	8014284 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8014282:	2300      	movs	r3, #0
 8014284:	2b01      	cmp	r3, #1
 8014286:	d001      	beq.n	801428c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8014288:	2301      	movs	r3, #1
 801428a:	e000      	b.n	801428e <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801428c:	2300      	movs	r3, #0
    }
 801428e:	4618      	mov	r0, r3
 8014290:	370c      	adds	r7, #12
 8014292:	46bd      	mov	sp, r7
 8014294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014298:	4770      	bx	lr
	...

0801429c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	4a05      	ldr	r2, [pc, #20]	; (80142bc <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	601a      	str	r2, [r3, #0]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7fd fc83 	bl	8011bb8 <_ZN8touchgfx6ScreenD1Ev>
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	4618      	mov	r0, r3
 80142b6:	3708      	adds	r7, #8
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	08029d34 	.word	0x08029d34

080142c0 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b082      	sub	sp, #8
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f7ff ffe7 	bl	801429c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80142ce:	2140      	movs	r1, #64	; 0x40
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f013 f9f3 	bl	80276bc <_ZdlPvj>
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	4618      	mov	r0, r3
 80142da:	3708      	adds	r7, #8
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	4a13      	ldr	r2, [pc, #76]	; (8014338 <_ZN14screenViewBaseD1Ev+0x58>)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	601a      	str	r2, [r3, #0]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80142f4:	4618      	mov	r0, r3
 80142f6:	f000 fa1d 	bl	8014734 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014300:	4618      	mov	r0, r3
 8014302:	f7fe fc7b 	bl	8012bfc <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	33b8      	adds	r3, #184	; 0xb8
 801430a:	4618      	mov	r0, r3
 801430c:	f7fe fc76 	bl	8012bfc <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	3370      	adds	r3, #112	; 0x70
 8014314:	4618      	mov	r0, r3
 8014316:	f7fe fc71 	bl	8012bfc <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	3340      	adds	r3, #64	; 0x40
 801431e:	4618      	mov	r0, r3
 8014320:	f7fe fae8 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	4618      	mov	r0, r3
 8014328:	f7ff ffb8 	bl	801429c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	4618      	mov	r0, r3
 8014330:	3708      	adds	r7, #8
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	08029ce8 	.word	0x08029ce8

0801433c <_ZN14screenViewBaseD0Ev>:
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7ff ffcb 	bl	80142e0 <_ZN14screenViewBaseD1Ev>
 801434a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f013 f9b4 	bl	80276bc <_ZdlPvj>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	4618      	mov	r0, r3
 8014358:	3708      	adds	r7, #8
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}

0801435e <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801435e:	b580      	push	{r7, lr}
 8014360:	b082      	sub	sp, #8
 8014362:	af00      	add	r7, sp, #0
 8014364:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8014366:	f007 fbd5 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801436a:	4603      	mov	r3, r0
    }
 801436c:	4618      	mov	r0, r3
 801436e:	3708      	adds	r7, #8
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 8014374:	b590      	push	{r4, r7, lr}
 8014376:	b093      	sub	sp, #76	; 0x4c
 8014378:	af02      	add	r7, sp, #8
 801437a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	4618      	mov	r0, r3
 8014380:	f000 f9a2 	bl	80146c8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8014384:	4ab1      	ldr	r2, [pc, #708]	; (801464c <_ZN14screenViewBaseC1Ev+0x2d8>)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	601a      	str	r2, [r3, #0]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	3340      	adds	r3, #64	; 0x40
 801438e:	4618      	mov	r0, r3
 8014390:	f7fd fcb6 	bl	8011d00 <_ZN8touchgfx3BoxC1Ev>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	3370      	adds	r3, #112	; 0x70
 8014398:	4618      	mov	r0, r3
 801439a:	f006 fb4d 	bl	801aa38 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	33b8      	adds	r3, #184	; 0xb8
 80143a2:	4618      	mov	r0, r3
 80143a4:	f006 fb48 	bl	801aa38 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80143ae:	4618      	mov	r0, r3
 80143b0:	f006 fb42 	bl	801aa38 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 80143ba:	4ba5      	ldr	r3, [pc, #660]	; (8014650 <_ZN14screenViewBaseC1Ev+0x2dc>)
 80143bc:	60bb      	str	r3, [r7, #8]
 80143be:	2300      	movs	r3, #0
 80143c0:	60fb      	str	r3, [r7, #12]
 80143c2:	f107 0308 	add.w	r3, r7, #8
 80143c6:	cb0c      	ldmia	r3, {r2, r3}
 80143c8:	6879      	ldr	r1, [r7, #4]
 80143ca:	f000 f993 	bl	80146f4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80143d4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80143d8:	9300      	str	r3, [sp, #0]
 80143da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80143de:	2200      	movs	r2, #0
 80143e0:	2100      	movs	r1, #0
 80143e2:	f7fb f8ad 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80143ec:	22ff      	movs	r2, #255	; 0xff
 80143ee:	21ff      	movs	r1, #255	; 0xff
 80143f0:	20ff      	movs	r0, #255	; 0xff
 80143f2:	f7fd fd3f 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143f6:	4603      	mov	r3, r0
 80143f8:	4619      	mov	r1, r3
 80143fa:	4620      	mov	r0, r4
 80143fc:	f7fd fca8 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 18);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	3370      	adds	r3, #112	; 0x70
 8014404:	2212      	movs	r2, #18
 8014406:	219b      	movs	r1, #155	; 0x9b
 8014408:	4618      	mov	r0, r3
 801440a:	f7fb f8fe 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014414:	f107 0310 	add.w	r3, r7, #16
 8014418:	2100      	movs	r1, #0
 801441a:	4618      	mov	r0, r3
 801441c:	f7fd fbac 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8014420:	f107 0314 	add.w	r3, r7, #20
 8014424:	2101      	movs	r1, #1
 8014426:	4618      	mov	r0, r3
 8014428:	f7fd fba6 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 801442c:	f107 0214 	add.w	r2, r7, #20
 8014430:	f107 0310 	add.w	r3, r7, #16
 8014434:	4619      	mov	r1, r3
 8014436:	4620      	mov	r0, r4
 8014438:	f006 f90c 	bl	801a654 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014442:	f107 0318 	add.w	r3, r7, #24
 8014446:	2100      	movs	r1, #0
 8014448:	4618      	mov	r0, r3
 801444a:	f7fd fe15 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 801444e:	f107 0318 	add.w	r3, r7, #24
 8014452:	4619      	mov	r1, r3
 8014454:	4620      	mov	r0, r4
 8014456:	f7fd fe35 	bl	80120c4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801445a:	f107 0318 	add.w	r3, r7, #24
 801445e:	4618      	mov	r0, r3
 8014460:	f7fa fd54 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801446a:	22ff      	movs	r2, #255	; 0xff
 801446c:	21ff      	movs	r1, #255	; 0xff
 801446e:	20ff      	movs	r0, #255	; 0xff
 8014470:	f7fd fd00 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014474:	4603      	mov	r3, r0
 8014476:	4619      	mov	r1, r3
 8014478:	4620      	mov	r0, r4
 801447a:	f7fd fe35 	bl	80120e8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014484:	22ff      	movs	r2, #255	; 0xff
 8014486:	21ff      	movs	r1, #255	; 0xff
 8014488:	20ff      	movs	r0, #255	; 0xff
 801448a:	f7fd fcf3 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801448e:	4603      	mov	r3, r0
 8014490:	4619      	mov	r1, r3
 8014492:	4620      	mov	r0, r4
 8014494:	f7fd fe36 	bl	8012104 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80144a4:	4619      	mov	r1, r3
 80144a6:	4610      	mov	r0, r2
 80144a8:	f7fd fbf9 	bl	8011c9e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel2.setXY(155, 106);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	33b8      	adds	r3, #184	; 0xb8
 80144b0:	226a      	movs	r2, #106	; 0x6a
 80144b2:	219b      	movs	r1, #155	; 0x9b
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fb f8a8 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80144c0:	f107 0320 	add.w	r3, r7, #32
 80144c4:	2100      	movs	r1, #0
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7fd fb56 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 80144cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144d0:	2101      	movs	r1, #1
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fd fb50 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 80144d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80144dc:	f107 0320 	add.w	r3, r7, #32
 80144e0:	4619      	mov	r1, r3
 80144e2:	4620      	mov	r0, r4
 80144e4:	f006 f8b6 	bl	801a654 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80144ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80144f2:	2101      	movs	r1, #1
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7fd fdbf 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 80144fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80144fe:	4619      	mov	r1, r3
 8014500:	4620      	mov	r0, r4
 8014502:	f7fd fddf 	bl	80120c4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8014506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801450a:	4618      	mov	r0, r3
 801450c:	f7fa fcfe 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8014516:	22ff      	movs	r2, #255	; 0xff
 8014518:	21ff      	movs	r1, #255	; 0xff
 801451a:	20ff      	movs	r0, #255	; 0xff
 801451c:	f7fd fcaa 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014520:	4603      	mov	r3, r0
 8014522:	4619      	mov	r1, r3
 8014524:	4620      	mov	r0, r4
 8014526:	f7fd fddf 	bl	80120e8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8014530:	22ff      	movs	r2, #255	; 0xff
 8014532:	21ff      	movs	r1, #255	; 0xff
 8014534:	20ff      	movs	r0, #255	; 0xff
 8014536:	f7fd fc9d 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801453a:	4603      	mov	r3, r0
 801453c:	4619      	mov	r1, r3
 801453e:	4620      	mov	r0, r4
 8014540:	f7fd fde0 	bl	8012104 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel2.setAction(buttonCallback);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8014550:	4619      	mov	r1, r3
 8014552:	4610      	mov	r0, r2
 8014554:	f7fd fba3 	bl	8011c9e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel3.setXY(155, 197);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801455e:	22c5      	movs	r2, #197	; 0xc5
 8014560:	219b      	movs	r1, #155	; 0x9b
 8014562:	4618      	mov	r0, r3
 8014564:	f7fb f851 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 801456e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014572:	2100      	movs	r1, #0
 8014574:	4618      	mov	r0, r3
 8014576:	f7fd faff 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 801457a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801457e:	2101      	movs	r1, #1
 8014580:	4618      	mov	r0, r3
 8014582:	f7fd faf9 	bl	8011b78 <_ZN8touchgfx6BitmapC1Et>
 8014586:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801458a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801458e:	4619      	mov	r1, r3
 8014590:	4620      	mov	r0, r4
 8014592:	f006 f85f 	bl	801a654 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f503 7480 	add.w	r4, r3, #256	; 0x100
 801459c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80145a0:	2102      	movs	r1, #2
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7fd fd68 	bl	8012078 <_ZN8touchgfx9TypedTextC1Et>
 80145a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80145ac:	4619      	mov	r1, r3
 80145ae:	4620      	mov	r0, r4
 80145b0:	f7fd fd88 	bl	80120c4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80145b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fa fca7 	bl	800ef0c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80145c4:	22ff      	movs	r2, #255	; 0xff
 80145c6:	21ff      	movs	r1, #255	; 0xff
 80145c8:	20ff      	movs	r0, #255	; 0xff
 80145ca:	f7fd fc53 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80145ce:	4603      	mov	r3, r0
 80145d0:	4619      	mov	r1, r3
 80145d2:	4620      	mov	r0, r4
 80145d4:	f7fd fd88 	bl	80120e8 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80145de:	22ff      	movs	r2, #255	; 0xff
 80145e0:	21ff      	movs	r1, #255	; 0xff
 80145e2:	20ff      	movs	r0, #255	; 0xff
 80145e4:	f7fd fc46 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80145e8:	4603      	mov	r3, r0
 80145ea:	4619      	mov	r1, r3
 80145ec:	4620      	mov	r0, r4
 80145ee:	f7fd fd89 	bl	8012104 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel3.setAction(buttonCallback);
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80145fe:	4619      	mov	r1, r3
 8014600:	4610      	mov	r0, r2
 8014602:	f7fd fb4c 	bl	8011c9e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 8014606:	687a      	ldr	r2, [r7, #4]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	3340      	adds	r3, #64	; 0x40
 801460c:	4619      	mov	r1, r3
 801460e:	4610      	mov	r0, r2
 8014610:	f7fd fb2a 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	3370      	adds	r3, #112	; 0x70
 801461a:	4619      	mov	r1, r3
 801461c:	4610      	mov	r0, r2
 801461e:	f7fd fb23 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 8014622:	687a      	ldr	r2, [r7, #4]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	33b8      	adds	r3, #184	; 0xb8
 8014628:	4619      	mov	r1, r3
 801462a:	4610      	mov	r0, r2
 801462c:	f7fd fb1c 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014638:	4619      	mov	r1, r3
 801463a:	4610      	mov	r0, r2
 801463c:	f7fd fb14 	bl	8011c68 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	4618      	mov	r0, r3
 8014644:	3744      	adds	r7, #68	; 0x44
 8014646:	46bd      	mov	sp, r7
 8014648:	bd90      	pop	{r4, r7, pc}
 801464a:	bf00      	nop
 801464c:	08029ce8 	.word	0x08029ce8
 8014650:	08014669 	.word	0x08014669

08014654 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8014654:	b480      	push	{r7}
 8014656:	b083      	sub	sp, #12
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]

}
 801465c:	bf00      	nop
 801465e:	370c      	adds	r7, #12
 8014660:	46bd      	mov	sp, r7
 8014662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014666:	4770      	bx	lr

08014668 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	3370      	adds	r3, #112	; 0x70
 8014676:	683a      	ldr	r2, [r7, #0]
 8014678:	429a      	cmp	r2, r3
 801467a:	d107      	bne.n	801468c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with screen transition towards East
        application().gotoPongScreenCoverTransitionEast();
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f7ff fe6e 	bl	801435e <_ZN14screenViewBase11applicationEv>
 8014682:	4603      	mov	r3, r0
 8014684:	4618      	mov	r0, r3
 8014686:	f7fb fb81 	bl	800fd8c <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>
        //Interaction3
        //When buttonWithLabel3 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
    }
}
 801468a:	e019      	b.n	80146c0 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel2)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	33b8      	adds	r3, #184	; 0xb8
 8014690:	683a      	ldr	r2, [r7, #0]
 8014692:	429a      	cmp	r2, r3
 8014694:	d107      	bne.n	80146a6 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoScreen2ScreenNoTransition();
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f7ff fe61 	bl	801435e <_ZN14screenViewBase11applicationEv>
 801469c:	4603      	mov	r3, r0
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fb fae8 	bl	800fc74 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 80146a4:	e00c      	b.n	80146c0 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel3)
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80146ac:	683a      	ldr	r2, [r7, #0]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d106      	bne.n	80146c0 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoScreen3ScreenNoTransition();
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff fe53 	bl	801435e <_ZN14screenViewBase11applicationEv>
 80146b8:	4603      	mov	r3, r0
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7fb fb20 	bl	800fd00 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
}
 80146c0:	bf00      	nop
 80146c2:	3708      	adds	r7, #8
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}

080146c8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	4618      	mov	r0, r3
 80146d4:	f008 f9d4 	bl	801ca80 <_ZN8touchgfx6ScreenC1Ev>
 80146d8:	4a05      	ldr	r2, [pc, #20]	; (80146f0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	601a      	str	r2, [r3, #0]
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2200      	movs	r2, #0
 80146e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	4618      	mov	r0, r3
 80146e8:	3708      	adds	r7, #8
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	08029d34 	.word	0x08029d34

080146f4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	60f8      	str	r0, [r7, #12]
 80146fc:	60b9      	str	r1, [r7, #8]
 80146fe:	4639      	mov	r1, r7
 8014700:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	4618      	mov	r0, r3
 8014708:	f7fe f92e 	bl	8012968 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801470c:	4a08      	ldr	r2, [pc, #32]	; (8014730 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	68ba      	ldr	r2, [r7, #8]
 8014716:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	3308      	adds	r3, #8
 801471c:	463a      	mov	r2, r7
 801471e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014722:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	4618      	mov	r0, r3
 801472a:	3710      	adds	r7, #16
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	08029d1c 	.word	0x08029d1c

08014734 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	4a05      	ldr	r2, [pc, #20]	; (8014754 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	601a      	str	r2, [r3, #0]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	4618      	mov	r0, r3
 8014746:	f7fe f96d 	bl	8012a24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	3708      	adds	r7, #8
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}
 8014754:	08029d1c 	.word	0x08029d1c

08014758 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8014758:	b580      	push	{r7, lr}
 801475a:	b082      	sub	sp, #8
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7ff ffe7 	bl	8014734 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8014766:	2110      	movs	r1, #16
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f012 ffa7 	bl	80276bc <_ZdlPvj>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	4618      	mov	r0, r3
 8014772:	3708      	adds	r7, #8
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	68d2      	ldr	r2, [r2, #12]
 801478a:	1052      	asrs	r2, r2, #1
 801478c:	1898      	adds	r0, r3, r2
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	68db      	ldr	r3, [r3, #12]
 8014792:	f003 0301 	and.w	r3, r3, #1
 8014796:	2b00      	cmp	r3, #0
 8014798:	d102      	bne.n	80147a0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	e00a      	b.n	80147b6 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	685b      	ldr	r3, [r3, #4]
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	68d2      	ldr	r2, [r2, #12]
 80147a8:	1052      	asrs	r2, r2, #1
 80147aa:	4413      	add	r3, r2
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	6892      	ldr	r2, [r2, #8]
 80147b2:	4413      	add	r3, r2
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	4798      	blx	r3
    }
 80147ba:	bf00      	nop
 80147bc:	3708      	adds	r7, #8
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80147c2:	b480      	push	{r7}
 80147c4:	b083      	sub	sp, #12
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d010      	beq.n	80147f4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	689b      	ldr	r3, [r3, #8]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d107      	bne.n	80147ea <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	f003 0301 	and.w	r3, r3, #1
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d101      	bne.n	80147ea <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80147e6:	2301      	movs	r3, #1
 80147e8:	e000      	b.n	80147ec <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80147ea:	2300      	movs	r3, #0
 80147ec:	2b01      	cmp	r3, #1
 80147ee:	d001      	beq.n	80147f4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80147f0:	2301      	movs	r3, #1
 80147f2:	e000      	b.n	80147f6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80147f4:	2300      	movs	r3, #0
    }
 80147f6:	4618      	mov	r0, r3
 80147f8:	370c      	adds	r7, #12
 80147fa:	46bd      	mov	sp, r7
 80147fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014800:	4770      	bx	lr
	...

08014804 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014804:	b480      	push	{r7}
 8014806:	af00      	add	r7, sp, #0
    return bitmap_database;
 8014808:	4b02      	ldr	r3, [pc, #8]	; (8014814 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801480a:	4618      	mov	r0, r3
 801480c:	46bd      	mov	sp, r7
 801480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014812:	4770      	bx	lr
 8014814:	08029d60 	.word	0x08029d60

08014818 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8014818:	b480      	push	{r7}
 801481a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801481c:	2307      	movs	r3, #7
}
 801481e:	4618      	mov	r0, r3
 8014820:	46bd      	mov	sp, r7
 8014822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014826:	4770      	bx	lr

08014828 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8014828:	b480      	push	{r7}
 801482a:	b085      	sub	sp, #20
 801482c:	af00      	add	r7, sp, #0
 801482e:	60f8      	str	r0, [r7, #12]
 8014830:	460b      	mov	r3, r1
 8014832:	607a      	str	r2, [r7, #4]
 8014834:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8014836:	2300      	movs	r3, #0
    }
 8014838:	4618      	mov	r0, r3
 801483a:	3714      	adds	r7, #20
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr

08014844 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8014844:	b480      	push	{r7}
 8014846:	b083      	sub	sp, #12
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801484c:	2300      	movs	r3, #0
    }
 801484e:	4618      	mov	r0, r3
 8014850:	370c      	adds	r7, #12
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr
	...

0801485c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801485c:	b480      	push	{r7}
 801485e:	b085      	sub	sp, #20
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	4613      	mov	r3, r2
 8014868:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801486a:	4a07      	ldr	r2, [pc, #28]	; (8014888 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014870:	4a06      	ldr	r2, [pc, #24]	; (801488c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8014876:	4a06      	ldr	r2, [pc, #24]	; (8014890 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014878:	88fb      	ldrh	r3, [r7, #6]
 801487a:	8013      	strh	r3, [r2, #0]
    }
 801487c:	bf00      	nop
 801487e:	3714      	adds	r7, #20
 8014880:	46bd      	mov	sp, r7
 8014882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014886:	4770      	bx	lr
 8014888:	2000b4ac 	.word	0x2000b4ac
 801488c:	2000b4b4 	.word	0x2000b4b4
 8014890:	2000b4b0 	.word	0x2000b4b0

08014894 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8014894:	b40e      	push	{r1, r2, r3}
 8014896:	b580      	push	{r7, lr}
 8014898:	b085      	sub	sp, #20
 801489a:	af00      	add	r7, sp, #0
 801489c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801489e:	f107 0320 	add.w	r3, r7, #32
 80148a2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	69fa      	ldr	r2, [r7, #28]
 80148a8:	2100      	movs	r1, #0
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f007 fc4a 	bl	801c144 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80148b0:	4603      	mov	r3, r0
 80148b2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80148b4:	89fb      	ldrh	r3, [r7, #14]
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3714      	adds	r7, #20
 80148ba:	46bd      	mov	sp, r7
 80148bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80148c0:	b003      	add	sp, #12
 80148c2:	4770      	bx	lr

080148c4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80148c4:	b40c      	push	{r2, r3}
 80148c6:	b580      	push	{r7, lr}
 80148c8:	b084      	sub	sp, #16
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
 80148ce:	460b      	mov	r3, r1
 80148d0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80148d2:	f107 031c 	add.w	r3, r7, #28
 80148d6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80148d8:	78f9      	ldrb	r1, [r7, #3]
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	69ba      	ldr	r2, [r7, #24]
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f007 fc30 	bl	801c144 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80148e4:	4603      	mov	r3, r0
 80148e6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80148e8:	89fb      	ldrh	r3, [r7, #14]
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3710      	adds	r7, #16
 80148ee:	46bd      	mov	sp, r7
 80148f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80148f4:	b002      	add	sp, #8
 80148f6:	4770      	bx	lr

080148f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b08a      	sub	sp, #40	; 0x28
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	460b      	mov	r3, r1
 8014902:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014908:	2b00      	cmp	r3, #0
 801490a:	d016      	beq.n	801493a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	331a      	adds	r3, #26
 8014910:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8014912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014914:	8adb      	ldrh	r3, [r3, #22]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d105      	bne.n	8014926 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801491a:	4b42      	ldr	r3, [pc, #264]	; (8014a24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 801491c:	4a42      	ldr	r2, [pc, #264]	; (8014a28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801491e:	21c0      	movs	r1, #192	; 0xc0
 8014920:	4842      	ldr	r0, [pc, #264]	; (8014a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014922:	f012 fef7 	bl	8027714 <__assert_func>
            return buffer[pos];
 8014926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014928:	8a9b      	ldrh	r3, [r3, #20]
 801492a:	461a      	mov	r2, r3
 801492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d001      	beq.n	801493a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014936:	2301      	movs	r3, #1
 8014938:	e000      	b.n	801493c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801493a:	2300      	movs	r3, #0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d068      	beq.n	8014a12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f008 ffa1 	bl	801d888 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	331a      	adds	r3, #26
 801494a:	623b      	str	r3, [r7, #32]
 801494c:	2301      	movs	r3, #1
 801494e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014950:	6a3b      	ldr	r3, [r7, #32]
 8014952:	8adb      	ldrh	r3, [r3, #22]
 8014954:	8bfa      	ldrh	r2, [r7, #30]
 8014956:	429a      	cmp	r2, r3
 8014958:	d305      	bcc.n	8014966 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801495a:	4b35      	ldr	r3, [pc, #212]	; (8014a30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801495c:	4a35      	ldr	r2, [pc, #212]	; (8014a34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801495e:	21c5      	movs	r1, #197	; 0xc5
 8014960:	4832      	ldr	r0, [pc, #200]	; (8014a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014962:	f012 fed7 	bl	8027714 <__assert_func>
            const uint16_t index = pos + offset;
 8014966:	6a3b      	ldr	r3, [r7, #32]
 8014968:	8a9a      	ldrh	r2, [r3, #20]
 801496a:	8bfb      	ldrh	r3, [r7, #30]
 801496c:	4413      	add	r3, r2
 801496e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8014970:	8bbb      	ldrh	r3, [r7, #28]
 8014972:	2b09      	cmp	r3, #9
 8014974:	d801      	bhi.n	801497a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8014976:	8bbb      	ldrh	r3, [r7, #28]
 8014978:	e001      	b.n	801497e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801497a:	8bbb      	ldrh	r3, [r7, #28]
 801497c:	3b0a      	subs	r3, #10
 801497e:	6a3a      	ldr	r2, [r7, #32]
 8014980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014984:	f640 123f 	movw	r2, #2367	; 0x93f
 8014988:	4293      	cmp	r3, r2
 801498a:	bf0c      	ite	eq
 801498c:	2301      	moveq	r3, #1
 801498e:	2300      	movne	r3, #0
 8014990:	b2db      	uxtb	r3, r3
 8014992:	2b00      	cmp	r3, #0
 8014994:	d03d      	beq.n	8014a12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	331a      	adds	r3, #26
 801499a:	687a      	ldr	r2, [r7, #4]
 801499c:	321a      	adds	r2, #26
 801499e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80149a0:	68ba      	ldr	r2, [r7, #8]
 80149a2:	8ad2      	ldrh	r2, [r2, #22]
 80149a4:	2a00      	cmp	r2, #0
 80149a6:	d105      	bne.n	80149b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80149a8:	4b1e      	ldr	r3, [pc, #120]	; (8014a24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 80149aa:	4a1f      	ldr	r2, [pc, #124]	; (8014a28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80149ac:	21c0      	movs	r1, #192	; 0xc0
 80149ae:	481f      	ldr	r0, [pc, #124]	; (8014a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80149b0:	f012 feb0 	bl	8027714 <__assert_func>
            return buffer[pos];
 80149b4:	68ba      	ldr	r2, [r7, #8]
 80149b6:	8a92      	ldrh	r2, [r2, #20]
 80149b8:	4611      	mov	r1, r2
 80149ba:	68ba      	ldr	r2, [r7, #8]
 80149bc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80149c0:	613b      	str	r3, [r7, #16]
 80149c2:	4613      	mov	r3, r2
 80149c4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	8adb      	ldrh	r3, [r3, #22]
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d806      	bhi.n	80149dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80149ce:	4b1a      	ldr	r3, [pc, #104]	; (8014a38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80149d0:	4a1a      	ldr	r2, [pc, #104]	; (8014a3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80149d2:	f240 110d 	movw	r1, #269	; 0x10d
 80149d6:	4815      	ldr	r0, [pc, #84]	; (8014a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80149d8:	f012 fe9c 	bl	8027714 <__assert_func>
            const uint16_t index = pos + 1;
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	8a9b      	ldrh	r3, [r3, #20]
 80149e0:	3301      	adds	r3, #1
 80149e2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80149e4:	89bb      	ldrh	r3, [r7, #12]
 80149e6:	2b09      	cmp	r3, #9
 80149e8:	d801      	bhi.n	80149ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80149ea:	89bb      	ldrh	r3, [r7, #12]
 80149ec:	e000      	b.n	80149f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80149ee:	2300      	movs	r3, #0
 80149f0:	693a      	ldr	r2, [r7, #16]
 80149f2:	89f9      	ldrh	r1, [r7, #14]
 80149f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	331a      	adds	r3, #26
 80149fc:	61bb      	str	r3, [r7, #24]
 80149fe:	f640 133f 	movw	r3, #2367	; 0x93f
 8014a02:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8014a04:	69bb      	ldr	r3, [r7, #24]
 8014a06:	8a9b      	ldrh	r3, [r3, #20]
 8014a08:	4619      	mov	r1, r3
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	8afa      	ldrh	r2, [r7, #22]
 8014a0e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f008 fe1c 	bl	801d650 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014a18:	4603      	mov	r3, r0
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	3728      	adds	r7, #40	; 0x28
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}
 8014a22:	bf00      	nop
 8014a24:	08028e0c 	.word	0x08028e0c
 8014a28:	08029f10 	.word	0x08029f10
 8014a2c:	08028e18 	.word	0x08028e18
 8014a30:	08028e60 	.word	0x08028e60
 8014a34:	08029e3c 	.word	0x08029e3c
 8014a38:	08028e70 	.word	0x08028e70
 8014a3c:	08029fbc 	.word	0x08029fbc

08014a40 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b082      	sub	sp, #8
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f008 fdbb 	bl	801d5c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8014a4e:	bf00      	nop
 8014a50:	3708      	adds	r7, #8
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}

08014a56 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8014a56:	b580      	push	{r7, lr}
 8014a58:	b088      	sub	sp, #32
 8014a5a:	af02      	add	r7, sp, #8
 8014a5c:	60f8      	str	r0, [r7, #12]
 8014a5e:	1d38      	adds	r0, r7, #4
 8014a60:	e880 0006 	stmia.w	r0, {r1, r2}
 8014a64:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8014a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014a6a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8014a6c:	1d39      	adds	r1, r7, #4
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	9301      	str	r3, [sp, #4]
 8014a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a74:	9300      	str	r3, [sp, #0]
 8014a76:	6a3b      	ldr	r3, [r7, #32]
 8014a78:	683a      	ldr	r2, [r7, #0]
 8014a7a:	68f8      	ldr	r0, [r7, #12]
 8014a7c:	f006 fcab 	bl	801b3d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8014a80:	bf00      	nop
 8014a82:	3718      	adds	r7, #24
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014a88:	b590      	push	{r4, r7, lr}
 8014a8a:	b085      	sub	sp, #20
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	4603      	mov	r3, r0
 8014a90:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014a96:	88fb      	ldrh	r3, [r7, #6]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d127      	bne.n	8014aec <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014a9c:	88fb      	ldrh	r3, [r7, #6]
 8014a9e:	4a1e      	ldr	r2, [pc, #120]	; (8014b18 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d016      	beq.n	8014ad6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014aa8:	88fb      	ldrh	r3, [r7, #6]
 8014aaa:	4a1b      	ldr	r2, [pc, #108]	; (8014b18 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ab0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	68ba      	ldr	r2, [r7, #8]
 8014ab8:	4413      	add	r3, r2
 8014aba:	4a18      	ldr	r2, [pc, #96]	; (8014b1c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014abc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	68ba      	ldr	r2, [r7, #8]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	4a16      	ldr	r2, [pc, #88]	; (8014b20 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014ac8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	68ba      	ldr	r2, [r7, #8]
 8014ad0:	4413      	add	r3, r2
 8014ad2:	60fb      	str	r3, [r7, #12]
 8014ad4:	e00a      	b.n	8014aec <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8014ad6:	4b11      	ldr	r3, [pc, #68]	; (8014b1c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014ad8:	4a12      	ldr	r2, [pc, #72]	; (8014b24 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8014ada:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014adc:	4a12      	ldr	r2, [pc, #72]	; (8014b28 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8014ade:	4b10      	ldr	r3, [pc, #64]	; (8014b20 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014ae0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8014ae2:	88fb      	ldrh	r3, [r7, #6]
 8014ae4:	4a11      	ldr	r2, [pc, #68]	; (8014b2c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8014ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014aea:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00d      	beq.n	8014b0e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8014af2:	4a0f      	ldr	r2, [pc, #60]	; (8014b30 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8014af4:	88fb      	ldrh	r3, [r7, #6]
 8014af6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8014af8:	f000 f83e 	bl	8014b78 <_ZN17TypedTextDatabase8getFontsEv>
 8014afc:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8014afe:	f000 f833 	bl	8014b68 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8014b02:	4603      	mov	r3, r0
 8014b04:	461a      	mov	r2, r3
 8014b06:	4621      	mov	r1, r4
 8014b08:	68f8      	ldr	r0, [r7, #12]
 8014b0a:	f7ff fea7 	bl	801485c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8014b0e:	bf00      	nop
 8014b10:	3714      	adds	r7, #20
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd90      	pop	{r4, r7, pc}
 8014b16:	bf00      	nop
 8014b18:	200085b4 	.word	0x200085b4
 8014b1c:	200085bc 	.word	0x200085bc
 8014b20:	200085c0 	.word	0x200085c0
 8014b24:	080c1284 	.word	0x080c1284
 8014b28:	080c123c 	.word	0x080c123c
 8014b2c:	080c1300 	.word	0x080c1300
 8014b30:	200085b8 	.word	0x200085b8

08014b34 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014b34:	b480      	push	{r7}
 8014b36:	b083      	sub	sp, #12
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014b40:	4b07      	ldr	r3, [pc, #28]	; (8014b60 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8014b42:	681a      	ldr	r2, [r3, #0]
 8014b44:	4b07      	ldr	r3, [pc, #28]	; (8014b64 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8014b46:	6819      	ldr	r1, [r3, #0]
 8014b48:	887b      	ldrh	r3, [r7, #2]
 8014b4a:	009b      	lsls	r3, r3, #2
 8014b4c:	440b      	add	r3, r1
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	005b      	lsls	r3, r3, #1
 8014b52:	4413      	add	r3, r2
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	370c      	adds	r7, #12
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5e:	4770      	bx	lr
 8014b60:	200085bc 	.word	0x200085bc
 8014b64:	200085c0 	.word	0x200085c0

08014b68 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014b68:	b480      	push	{r7}
 8014b6a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014b6c:	2312      	movs	r3, #18
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	46bd      	mov	sp, r7
 8014b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b76:	4770      	bx	lr

08014b78 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014b78:	b480      	push	{r7}
 8014b7a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014b7c:	4b02      	ldr	r3, [pc, #8]	; (8014b88 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr
 8014b88:	200085c4 	.word	0x200085c4

08014b8c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b082      	sub	sp, #8
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	6039      	str	r1, [r7, #0]
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d113      	bne.n	8014bc4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ba2:	4293      	cmp	r3, r2
 8014ba4:	d10e      	bne.n	8014bc4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8014ba6:	f7fa fabd 	bl	800f124 <_Z23getFont_verdana_20_4bppv>
 8014baa:	4602      	mov	r2, r0
};
 8014bac:	4b07      	ldr	r3, [pc, #28]	; (8014bcc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014bae:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8014bb0:	f7fa fafa 	bl	800f1a8 <_Z23getFont_verdana_40_4bppv>
 8014bb4:	4602      	mov	r2, r0
};
 8014bb6:	4b05      	ldr	r3, [pc, #20]	; (8014bcc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014bb8:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 8014bba:	f7fa fa71 	bl	800f0a0 <_Z23getFont_verdana_10_4bppv>
 8014bbe:	4602      	mov	r2, r0
};
 8014bc0:	4b02      	ldr	r3, [pc, #8]	; (8014bcc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014bc2:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 8014bc4:	bf00      	nop
 8014bc6:	3708      	adds	r7, #8
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	200085c4 	.word	0x200085c4

08014bd0 <_GLOBAL__sub_I_touchgfx_fonts>:
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	af00      	add	r7, sp, #0
 8014bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014bd8:	2001      	movs	r0, #1
 8014bda:	f7ff ffd7 	bl	8014b8c <_Z41__static_initialization_and_destruction_0ii>
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	4a05      	ldr	r2, [pc, #20]	; (8014c00 <_ZN19FrontendApplicationD1Ev+0x20>)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	601a      	str	r2, [r3, #0]
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7fa febb 	bl	800f96c <_ZN23FrontendApplicationBaseD1Ev>
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3708      	adds	r7, #8
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	0802a078 	.word	0x0802a078

08014c04 <_ZN19FrontendApplicationD0Ev>:
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7ff ffe7 	bl	8014be0 <_ZN19FrontendApplicationD1Ev>
 8014c12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f012 fd50 	bl	80276bc <_ZdlPvj>
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3708      	adds	r7, #8
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}

08014c26 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014c26:	b580      	push	{r7, lr}
 8014c28:	b082      	sub	sp, #8
 8014c2a:	af00      	add	r7, sp, #0
 8014c2c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8014c34:	4618      	mov	r0, r3
 8014c36:	f000 f82d 	bl	8014c94 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f006 fe91 	bl	801b964 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014c42:	bf00      	nop
 8014c44:	3708      	adds	r7, #8
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
	...

08014c4c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b084      	sub	sp, #16
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	68b9      	ldr	r1, [r7, #8]
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7fa ff20 	bl	800faa4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8014c64:	4a03      	ldr	r2, [pc, #12]	; (8014c74 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	601a      	str	r2, [r3, #0]
{

}
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3710      	adds	r7, #16
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	0802a078 	.word	0x0802a078

08014c78 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8014c78:	b480      	push	{r7}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2200      	movs	r2, #0
 8014c84:	601a      	str	r2, [r3, #0]
{

}
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	4618      	mov	r0, r3
 8014c8a:	370c      	adds	r7, #12
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c92:	4770      	bx	lr

08014c94 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014c94:	b480      	push	{r7}
 8014c96:	b083      	sub	sp, #12
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]

}
 8014c9c:	bf00      	nop
 8014c9e:	370c      	adds	r7, #12
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca6:	4770      	bx	lr

08014ca8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
    {
    }
 8014cb0:	bf00      	nop
 8014cb2:	370c      	adds	r7, #12
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr

08014cbc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014cbc:	b480      	push	{r7}
 8014cbe:	b083      	sub	sp, #12
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
    {
    }
 8014cc4:	bf00      	nop
 8014cc6:	370c      	adds	r7, #12
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr

08014cd0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8014cd0:	b480      	push	{r7}
 8014cd2:	b083      	sub	sp, #12
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
    {
 8014cd8:	4a04      	ldr	r2, [pc, #16]	; (8014cec <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	601a      	str	r2, [r3, #0]
    }
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	370c      	adds	r7, #12
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr
 8014cec:	0802a0f4 	.word	0x0802a0f4

08014cf0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
    }
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7ff ffe9 	bl	8014cd0 <_ZN8touchgfx9PresenterD1Ev>
 8014cfe:	2104      	movs	r1, #4
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f012 fcdb 	bl	80276bc <_ZdlPvj>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3708      	adds	r7, #8
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8014d10:	b480      	push	{r7}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
    {
 8014d18:	4a04      	ldr	r2, [pc, #16]	; (8014d2c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	601a      	str	r2, [r3, #0]
    }
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	370c      	adds	r7, #12
 8014d24:	46bd      	mov	sp, r7
 8014d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2a:	4770      	bx	lr
 8014d2c:	0802a0f4 	.word	0x0802a0f4

08014d30 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8014d30:	b480      	push	{r7}
 8014d32:	b083      	sub	sp, #12
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	4a06      	ldr	r2, [pc, #24]	; (8014d54 <_ZN13ModelListenerC1Ev+0x24>)
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	601a      	str	r2, [r3, #0]
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2200      	movs	r2, #0
 8014d42:	605a      	str	r2, [r3, #4]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	4618      	mov	r0, r3
 8014d48:	370c      	adds	r7, #12
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d50:	4770      	bx	lr
 8014d52:	bf00      	nop
 8014d54:	0802a0e4 	.word	0x0802a0e4

08014d58 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
 8014d60:	4a04      	ldr	r2, [pc, #16]	; (8014d74 <_ZN13ModelListenerD1Ev+0x1c>)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	601a      	str	r2, [r3, #0]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	370c      	adds	r7, #12
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr
 8014d74:	0802a0e4 	.word	0x0802a0e4

08014d78 <_ZN13ModelListenerD0Ev>:
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f7ff ffe9 	bl	8014d58 <_ZN13ModelListenerD1Ev>
 8014d86:	2108      	movs	r1, #8
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	f012 fc97 	bl	80276bc <_ZdlPvj>
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	4618      	mov	r0, r3
 8014d92:	3708      	adds	r7, #8
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <_ZN13PongPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~PongPresenter() {};
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	4a09      	ldr	r2, [pc, #36]	; (8014dc8 <_ZN13PongPresenterD1Ev+0x30>)
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	601a      	str	r2, [r3, #0]
 8014da6:	4a09      	ldr	r2, [pc, #36]	; (8014dcc <_ZN13PongPresenterD1Ev+0x34>)
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	605a      	str	r2, [r3, #4]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	3304      	adds	r3, #4
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7ff ffd1 	bl	8014d58 <_ZN13ModelListenerD1Ev>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7ff ff89 	bl	8014cd0 <_ZN8touchgfx9PresenterD1Ev>
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3708      	adds	r7, #8
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	0802a0bc 	.word	0x0802a0bc
 8014dcc:	0802a0d4 	.word	0x0802a0d4

08014dd0 <_ZThn4_N13PongPresenterD1Ev>:
 8014dd0:	f1a0 0004 	sub.w	r0, r0, #4
 8014dd4:	e7e0      	b.n	8014d98 <_ZN13PongPresenterD1Ev>
 8014dd6:	bf00      	nop

08014dd8 <_ZN13PongPresenterD0Ev>:
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f7ff ffd9 	bl	8014d98 <_ZN13PongPresenterD1Ev>
 8014de6:	2110      	movs	r1, #16
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f012 fc67 	bl	80276bc <_ZdlPvj>
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	4618      	mov	r0, r3
 8014df2:	3708      	adds	r7, #8
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}

08014df8 <_ZThn4_N13PongPresenterD0Ev>:
 8014df8:	f1a0 0004 	sub.w	r0, r0, #4
 8014dfc:	e7ec      	b.n	8014dd8 <_ZN13PongPresenterD0Ev>
	...

08014e00 <_ZN13PongPresenterC1ER8PongView>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

PongPresenter::PongPresenter(PongView& v)
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
    : view(v)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7ff ff7f 	bl	8014d10 <_ZN8touchgfx9PresenterC1Ev>
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	3304      	adds	r3, #4
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7ff ff8a 	bl	8014d30 <_ZN13ModelListenerC1Ev>
 8014e1c:	4a06      	ldr	r2, [pc, #24]	; (8014e38 <_ZN13PongPresenterC1ER8PongView+0x38>)
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	601a      	str	r2, [r3, #0]
 8014e22:	4a06      	ldr	r2, [pc, #24]	; (8014e3c <_ZN13PongPresenterC1ER8PongView+0x3c>)
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	605a      	str	r2, [r3, #4]
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	60da      	str	r2, [r3, #12]
{

}
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	4618      	mov	r0, r3
 8014e32:	3708      	adds	r7, #8
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	0802a0bc 	.word	0x0802a0bc
 8014e3c:	0802a0d4 	.word	0x0802a0d4

08014e40 <_ZN13PongPresenter8activateEv>:

void PongPresenter::activate()
{
 8014e40:	b480      	push	{r7}
 8014e42:	b083      	sub	sp, #12
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]

}
 8014e48:	bf00      	nop
 8014e4a:	370c      	adds	r7, #12
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr

08014e54 <_ZN13PongPresenter10deactivateEv>:

void PongPresenter::deactivate()
{
 8014e54:	b480      	push	{r7}
 8014e56:	b083      	sub	sp, #12
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]

}
 8014e5c:	bf00      	nop
 8014e5e:	370c      	adds	r7, #12
 8014e60:	46bd      	mov	sp, r7
 8014e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e66:	4770      	bx	lr

08014e68 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8014e68:	b480      	push	{r7}
 8014e6a:	b083      	sub	sp, #12
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
        return rect.width;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8014e76:	4618      	mov	r0, r3
 8014e78:	370c      	adds	r7, #12
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e80:	4770      	bx	lr

08014e82 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8014e82:	b480      	push	{r7}
 8014e84:	b083      	sub	sp, #12
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	6078      	str	r0, [r7, #4]
        return rect.height;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8014e90:	4618      	mov	r0, r3
 8014e92:	370c      	adds	r7, #12
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <_ZN8PongViewD1Ev>:
#include <touchgfx/Color.hpp>
class PongView : public PongViewBase
{
public:
    PongView();
    virtual ~PongView() {}
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b082      	sub	sp, #8
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
 8014ea4:	4a05      	ldr	r2, [pc, #20]	; (8014ebc <_ZN8PongViewD1Ev+0x20>)
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	601a      	str	r2, [r3, #0]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7fd fa2d 	bl	801230c <_ZN12PongViewBaseD1Ev>
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	3708      	adds	r7, #8
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd80      	pop	{r7, pc}
 8014ebc:	0802a10c 	.word	0x0802a10c

08014ec0 <_ZN8PongViewD0Ev>:
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f7ff ffe7 	bl	8014e9c <_ZN8PongViewD1Ev>
 8014ece:	f641 6128 	movw	r1, #7720	; 0x1e28
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f012 fbf2 	bl	80276bc <_ZdlPvj>
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	4618      	mov	r0, r3
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
	...

08014ee4 <_ZN8PongViewC1Ev>:
#include <gui/pong_screen/PongView.hpp>

#include <touchgfx/lcd/LCD.hpp>

PongView::PongView()
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7fd fa66 	bl	80123c0 <_ZN12PongViewBaseC1Ev>
 8014ef4:	4a12      	ldr	r2, [pc, #72]	; (8014f40 <_ZN8PongViewC1Ev+0x5c>)
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	601a      	str	r2, [r3, #0]
 8014efa:	687a      	ldr	r2, [r7, #4]
 8014efc:	f641 6310 	movw	r3, #7696	; 0x1e10
 8014f00:	4413      	add	r3, r2
 8014f02:	2201      	movs	r2, #1
 8014f04:	601a      	str	r2, [r3, #0]
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	f641 6314 	movw	r3, #7700	; 0x1e14
 8014f0c:	4413      	add	r3, r2
 8014f0e:	2200      	movs	r2, #0
 8014f10:	601a      	str	r2, [r3, #0]
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	f641 6318 	movw	r3, #7704	; 0x1e18
 8014f18:	4413      	add	r3, r2
 8014f1a:	2204      	movs	r2, #4
 8014f1c:	601a      	str	r2, [r3, #0]
 8014f1e:	687a      	ldr	r2, [r7, #4]
 8014f20:	f641 631c 	movw	r3, #7708	; 0x1e1c
 8014f24:	4413      	add	r3, r2
 8014f26:	2228      	movs	r2, #40	; 0x28
 8014f28:	601a      	str	r2, [r3, #0]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f503 53f1 	add.w	r3, r3, #7712	; 0x1e20
 8014f30:	2200      	movs	r2, #0
 8014f32:	601a      	str	r2, [r3, #0]
{

}
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	4618      	mov	r0, r3
 8014f38:	3708      	adds	r7, #8
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	0802a10c 	.word	0x0802a10c

08014f44 <_ZN8PongView11setupScreenEv>:

void PongView::setupScreen()
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b082      	sub	sp, #8
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
    PongViewBase::setupScreen();
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7fd fbe8 	bl	8012724 <_ZN12PongViewBase11setupScreenEv>
}
 8014f54:	bf00      	nop
 8014f56:	3708      	adds	r7, #8
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <_ZN8PongView14tearDownScreenEv>:

void PongView::tearDownScreen()
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
    PongViewBase::tearDownScreen();
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7fc fe5e 	bl	8011c28 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014f6c:	bf00      	nop
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <_ZN8PongView9move_leftEv>:

void PongView::move_left(){
 8014f74:	b590      	push	{r4, r7, lr}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8014f82:	22ff      	movs	r2, #255	; 0xff
 8014f84:	21ff      	movs	r1, #255	; 0xff
 8014f86:	20ff      	movs	r0, #255	; 0xff
 8014f88:	f7fc ff74 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	4619      	mov	r1, r3
 8014f90:	4620      	mov	r0, r4
 8014f92:	f7fc fedd 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	33f0      	adds	r3, #240	; 0xf0
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f007 f9dc 	bl	801c358 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()-20);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	33f0      	adds	r3, #240	; 0xf0
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fa faf5 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	3b14      	subs	r3, #20
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	b21b      	sxth	r3, r3
 8014fba:	4619      	mov	r1, r3
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	f7fa fb06 	bl	800f5ce <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8014fc8:	22ff      	movs	r2, #255	; 0xff
 8014fca:	2180      	movs	r1, #128	; 0x80
 8014fcc:	2006      	movs	r0, #6
 8014fce:	f7fc ff51 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	f7fc feba 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	33f0      	adds	r3, #240	; 0xf0
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f007 f9b9 	bl	801c358 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8014fe6:	bf00      	nop
 8014fe8:	370c      	adds	r7, #12
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd90      	pop	{r4, r7, pc}

08014fee <_ZN8PongView10move_rightEv>:

void PongView::move_right(){
 8014fee:	b590      	push	{r4, r7, lr}
 8014ff0:	b083      	sub	sp, #12
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8014ffc:	22ff      	movs	r2, #255	; 0xff
 8014ffe:	21ff      	movs	r1, #255	; 0xff
 8015000:	20ff      	movs	r0, #255	; 0xff
 8015002:	f7fc ff37 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015006:	4603      	mov	r3, r0
 8015008:	4619      	mov	r1, r3
 801500a:	4620      	mov	r0, r4
 801500c:	f7fc fea0 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	33f0      	adds	r3, #240	; 0xf0
 8015014:	4618      	mov	r0, r3
 8015016:	f007 f99f 	bl	801c358 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()+20);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	33f0      	adds	r3, #240	; 0xf0
 8015024:	4618      	mov	r0, r3
 8015026:	f7fa fab8 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 801502a:	4603      	mov	r3, r0
 801502c:	b29b      	uxth	r3, r3
 801502e:	3314      	adds	r3, #20
 8015030:	b29b      	uxth	r3, r3
 8015032:	b21b      	sxth	r3, r3
 8015034:	4619      	mov	r1, r3
 8015036:	4620      	mov	r0, r4
 8015038:	f7fa fac9 	bl	800f5ce <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8015042:	22ff      	movs	r2, #255	; 0xff
 8015044:	2180      	movs	r1, #128	; 0x80
 8015046:	2006      	movs	r0, #6
 8015048:	f7fc ff14 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801504c:	4603      	mov	r3, r0
 801504e:	4619      	mov	r1, r3
 8015050:	4620      	mov	r0, r4
 8015052:	f7fc fe7d 	bl	8011d50 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	33f0      	adds	r3, #240	; 0xf0
 801505a:	4618      	mov	r0, r3
 801505c:	f007 f97c 	bl	801c358 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8015060:	bf00      	nop
 8015062:	370c      	adds	r7, #12
 8015064:	46bd      	mov	sp, r7
 8015066:	bd90      	pop	{r4, r7, pc}

08015068 <_ZN8PongView15handleTickEventEv>:

void PongView::handleTickEvent(){
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
	tick ++;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f503 53f1 	add.w	r3, r3, #7712	; 0x1e20
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	1c5a      	adds	r2, r3, #1
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	f503 53f1 	add.w	r3, r3, #7712	; 0x1e20
 8015080:	601a      	str	r2, [r3, #0]
	move_ball();
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f000 f804 	bl	8015090 <_ZN8PongView9move_ballEv>
}
 8015088:	bf00      	nop
 801508a:	3708      	adds	r7, #8
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <_ZN8PongView9move_ballEv>:

void PongView::move_ball(){\
 8015090:	b590      	push	{r4, r7, lr}
 8015092:	b083      	sub	sp, #12
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]

	// move ball
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801509e:	22ff      	movs	r2, #255	; 0xff
 80150a0:	21ff      	movs	r1, #255	; 0xff
 80150a2:	20ff      	movs	r0, #255	; 0xff
 80150a4:	f7fc fee6 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80150a8:	4603      	mov	r3, r0
 80150aa:	4619      	mov	r1, r3
 80150ac:	4620      	mov	r0, r4
 80150ae:	f7fc ffad 	bl	801200c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	3370      	adds	r3, #112	; 0x70
 80150b6:	4618      	mov	r0, r3
 80150b8:	f004 fc3c 	bl	8019934 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	ball.setY(ball.getY() +  ball_vertical_direction*ball_speed);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	3370      	adds	r3, #112	; 0x70
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7fa fa74 	bl	800f5b4 <_ZNK8touchgfx8Drawable4getYEv>
 80150cc:	4603      	mov	r3, r0
 80150ce:	b29a      	uxth	r2, r3
 80150d0:	6879      	ldr	r1, [r7, #4]
 80150d2:	f641 6310 	movw	r3, #7696	; 0x1e10
 80150d6:	440b      	add	r3, r1
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	b299      	uxth	r1, r3
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f641 6318 	movw	r3, #7704	; 0x1e18
 80150e2:	4403      	add	r3, r0
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	fb11 f303 	smulbb	r3, r1, r3
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	4413      	add	r3, r2
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	b21b      	sxth	r3, r3
 80150f4:	4619      	mov	r1, r3
 80150f6:	4620      	mov	r0, r4
 80150f8:	f7fa fa78 	bl	800f5ec <_ZN8touchgfx8Drawable4setYEs>
	ball.setX(ball.getX() +  ball_horizontal_direction*ball_speed);
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	3370      	adds	r3, #112	; 0x70
 8015106:	4618      	mov	r0, r3
 8015108:	f7fa fa47 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 801510c:	4603      	mov	r3, r0
 801510e:	b29a      	uxth	r2, r3
 8015110:	6879      	ldr	r1, [r7, #4]
 8015112:	f641 6314 	movw	r3, #7700	; 0x1e14
 8015116:	440b      	add	r3, r1
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	b299      	uxth	r1, r3
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f641 6318 	movw	r3, #7704	; 0x1e18
 8015122:	4403      	add	r3, r0
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	b29b      	uxth	r3, r3
 8015128:	fb11 f303 	smulbb	r3, r1, r3
 801512c:	b29b      	uxth	r3, r3
 801512e:	4413      	add	r3, r2
 8015130:	b29b      	uxth	r3, r3
 8015132:	b21b      	sxth	r3, r3
 8015134:	4619      	mov	r1, r3
 8015136:	4620      	mov	r0, r4
 8015138:	f7fa fa49 	bl	800f5ce <_ZN8touchgfx8Drawable4setXEs>
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8015142:	22ff      	movs	r2, #255	; 0xff
 8015144:	2180      	movs	r1, #128	; 0x80
 8015146:	2006      	movs	r0, #6
 8015148:	f7fc fe94 	bl	8011e74 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801514c:	4603      	mov	r3, r0
 801514e:	4619      	mov	r1, r3
 8015150:	4620      	mov	r0, r4
 8015152:	f7fc ff5b 	bl	801200c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	3370      	adds	r3, #112	; 0x70
 801515a:	4618      	mov	r0, r3
 801515c:	f004 fbea 	bl	8019934 <_ZNK8touchgfx12CanvasWidget10invalidateEv>

	// change direction vertical
	if(check_collision()==1){
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f000 f855 	bl	8015210 <_ZN8PongView15check_collisionEv>
 8015166:	4603      	mov	r3, r0
 8015168:	2b01      	cmp	r3, #1
 801516a:	bf0c      	ite	eq
 801516c:	2301      	moveq	r3, #1
 801516e:	2300      	movne	r3, #0
 8015170:	b2db      	uxtb	r3, r3
 8015172:	2b00      	cmp	r3, #0
 8015174:	d007      	beq.n	8015186 <_ZN8PongView9move_ballEv+0xf6>
		ball_vertical_direction = -1;
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	f641 6310 	movw	r3, #7696	; 0x1e10
 801517c:	4413      	add	r3, r2
 801517e:	f04f 32ff 	mov.w	r2, #4294967295
 8015182:	601a      	str	r2, [r3, #0]
 8015184:	e010      	b.n	80151a8 <_ZN8PongView9move_ballEv+0x118>
	}
	else if(check_collision()==2){
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f000 f842 	bl	8015210 <_ZN8PongView15check_collisionEv>
 801518c:	4603      	mov	r3, r0
 801518e:	2b02      	cmp	r3, #2
 8015190:	bf0c      	ite	eq
 8015192:	2301      	moveq	r3, #1
 8015194:	2300      	movne	r3, #0
 8015196:	b2db      	uxtb	r3, r3
 8015198:	2b00      	cmp	r3, #0
 801519a:	d005      	beq.n	80151a8 <_ZN8PongView9move_ballEv+0x118>
		ball_vertical_direction = 1;
 801519c:	687a      	ldr	r2, [r7, #4]
 801519e:	f641 6310 	movw	r3, #7696	; 0x1e10
 80151a2:	4413      	add	r3, r2
 80151a4:	2201      	movs	r2, #1
 80151a6:	601a      	str	r2, [r3, #0]
	}


// change direction horizontal
	if(check_moving()==1 && check_collision()==1){
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	f000 f8bf 	bl	801532c <_ZN8PongView12check_movingEv>
 80151ae:	4603      	mov	r3, r0
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d107      	bne.n	80151c4 <_ZN8PongView9move_ballEv+0x134>
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f000 f82b 	bl	8015210 <_ZN8PongView15check_collisionEv>
 80151ba:	4603      	mov	r3, r0
 80151bc:	2b01      	cmp	r3, #1
 80151be:	d101      	bne.n	80151c4 <_ZN8PongView9move_ballEv+0x134>
 80151c0:	2301      	movs	r3, #1
 80151c2:	e000      	b.n	80151c6 <_ZN8PongView9move_ballEv+0x136>
 80151c4:	2300      	movs	r3, #0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d006      	beq.n	80151d8 <_ZN8PongView9move_ballEv+0x148>
		ball_horizontal_direction = 1;
 80151ca:	687a      	ldr	r2, [r7, #4]
 80151cc:	f641 6314 	movw	r3, #7700	; 0x1e14
 80151d0:	4413      	add	r3, r2
 80151d2:	2201      	movs	r2, #1
 80151d4:	601a      	str	r2, [r3, #0]





}
 80151d6:	e017      	b.n	8015208 <_ZN8PongView9move_ballEv+0x178>
	else if (check_moving()==2 && check_collision()==1){
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f000 f8a7 	bl	801532c <_ZN8PongView12check_movingEv>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b02      	cmp	r3, #2
 80151e2:	d107      	bne.n	80151f4 <_ZN8PongView9move_ballEv+0x164>
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f000 f813 	bl	8015210 <_ZN8PongView15check_collisionEv>
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b01      	cmp	r3, #1
 80151ee:	d101      	bne.n	80151f4 <_ZN8PongView9move_ballEv+0x164>
 80151f0:	2301      	movs	r3, #1
 80151f2:	e000      	b.n	80151f6 <_ZN8PongView9move_ballEv+0x166>
 80151f4:	2300      	movs	r3, #0
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d006      	beq.n	8015208 <_ZN8PongView9move_ballEv+0x178>
		ball_horizontal_direction = -1;
 80151fa:	687a      	ldr	r2, [r7, #4]
 80151fc:	f641 6314 	movw	r3, #7700	; 0x1e14
 8015200:	4413      	add	r3, r2
 8015202:	f04f 32ff 	mov.w	r2, #4294967295
 8015206:	601a      	str	r2, [r3, #0]
}
 8015208:	bf00      	nop
 801520a:	370c      	adds	r7, #12
 801520c:	46bd      	mov	sp, r7
 801520e:	bd90      	pop	{r4, r7, pc}

08015210 <_ZN8PongView15check_collisionEv>:

int PongView::check_collision(){
 8015210:	b5b0      	push	{r4, r5, r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
	// collide with paddle
	if(ball.getY()+ball.getHeight()-margin>=paddle1.getY()-paddle1.getHeight() && ball.getX() + margin - 110 >= paddle1.getX() - paddle1.getWidth() && ball.getX() + margin <= paddle1.getX() + paddle1.getWidth()){
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	3370      	adds	r3, #112	; 0x70
 801521c:	4618      	mov	r0, r3
 801521e:	f7fa f9c9 	bl	800f5b4 <_ZNK8touchgfx8Drawable4getYEv>
 8015222:	4603      	mov	r3, r0
 8015224:	461c      	mov	r4, r3
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	3370      	adds	r3, #112	; 0x70
 801522a:	4618      	mov	r0, r3
 801522c:	f7ff fe29 	bl	8014e82 <_ZNK8touchgfx8Drawable9getHeightEv>
 8015230:	4603      	mov	r3, r0
 8015232:	18e2      	adds	r2, r4, r3
 8015234:	6879      	ldr	r1, [r7, #4]
 8015236:	f641 631c 	movw	r3, #7708	; 0x1e1c
 801523a:	440b      	add	r3, r1
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	1ad4      	subs	r4, r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	33f0      	adds	r3, #240	; 0xf0
 8015244:	4618      	mov	r0, r3
 8015246:	f7fa f9b5 	bl	800f5b4 <_ZNK8touchgfx8Drawable4getYEv>
 801524a:	4603      	mov	r3, r0
 801524c:	461d      	mov	r5, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	33f0      	adds	r3, #240	; 0xf0
 8015252:	4618      	mov	r0, r3
 8015254:	f7ff fe15 	bl	8014e82 <_ZNK8touchgfx8Drawable9getHeightEv>
 8015258:	4603      	mov	r3, r0
 801525a:	1aeb      	subs	r3, r5, r3
 801525c:	429c      	cmp	r4, r3
 801525e:	db3d      	blt.n	80152dc <_ZN8PongView15check_collisionEv+0xcc>
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	3370      	adds	r3, #112	; 0x70
 8015264:	4618      	mov	r0, r3
 8015266:	f7fa f998 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 801526a:	4603      	mov	r3, r0
 801526c:	4619      	mov	r1, r3
 801526e:	687a      	ldr	r2, [r7, #4]
 8015270:	f641 631c 	movw	r3, #7708	; 0x1e1c
 8015274:	4413      	add	r3, r2
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	440b      	add	r3, r1
 801527a:	f1a3 046e 	sub.w	r4, r3, #110	; 0x6e
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	33f0      	adds	r3, #240	; 0xf0
 8015282:	4618      	mov	r0, r3
 8015284:	f7fa f989 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 8015288:	4603      	mov	r3, r0
 801528a:	461d      	mov	r5, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	33f0      	adds	r3, #240	; 0xf0
 8015290:	4618      	mov	r0, r3
 8015292:	f7ff fde9 	bl	8014e68 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015296:	4603      	mov	r3, r0
 8015298:	1aeb      	subs	r3, r5, r3
 801529a:	429c      	cmp	r4, r3
 801529c:	db1e      	blt.n	80152dc <_ZN8PongView15check_collisionEv+0xcc>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	3370      	adds	r3, #112	; 0x70
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fa f979 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 80152a8:	4603      	mov	r3, r0
 80152aa:	4619      	mov	r1, r3
 80152ac:	687a      	ldr	r2, [r7, #4]
 80152ae:	f641 631c 	movw	r3, #7708	; 0x1e1c
 80152b2:	4413      	add	r3, r2
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	18cc      	adds	r4, r1, r3
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	33f0      	adds	r3, #240	; 0xf0
 80152bc:	4618      	mov	r0, r3
 80152be:	f7fa f96c 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 80152c2:	4603      	mov	r3, r0
 80152c4:	461d      	mov	r5, r3
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	33f0      	adds	r3, #240	; 0xf0
 80152ca:	4618      	mov	r0, r3
 80152cc:	f7ff fdcc 	bl	8014e68 <_ZNK8touchgfx8Drawable8getWidthEv>
 80152d0:	4603      	mov	r3, r0
 80152d2:	442b      	add	r3, r5
 80152d4:	429c      	cmp	r4, r3
 80152d6:	dc01      	bgt.n	80152dc <_ZN8PongView15check_collisionEv+0xcc>
 80152d8:	2301      	movs	r3, #1
 80152da:	e000      	b.n	80152de <_ZN8PongView15check_collisionEv+0xce>
 80152dc:	2300      	movs	r3, #0
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d001      	beq.n	80152e6 <_ZN8PongView15check_collisionEv+0xd6>
		return 1;
 80152e2:	2301      	movs	r3, #1
 80152e4:	e01e      	b.n	8015324 <_ZN8PongView15check_collisionEv+0x114>
	}

	// collide with wall
	if(ball.getY()+ball.getHeight()-margin-20<=0){
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	3370      	adds	r3, #112	; 0x70
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7fa f962 	bl	800f5b4 <_ZNK8touchgfx8Drawable4getYEv>
 80152f0:	4603      	mov	r3, r0
 80152f2:	461c      	mov	r4, r3
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	3370      	adds	r3, #112	; 0x70
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7ff fdc2 	bl	8014e82 <_ZNK8touchgfx8Drawable9getHeightEv>
 80152fe:	4603      	mov	r3, r0
 8015300:	18e2      	adds	r2, r4, r3
 8015302:	6879      	ldr	r1, [r7, #4]
 8015304:	f641 631c 	movw	r3, #7708	; 0x1e1c
 8015308:	440b      	add	r3, r1
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	1ad3      	subs	r3, r2, r3
 801530e:	3b14      	subs	r3, #20
 8015310:	2b00      	cmp	r3, #0
 8015312:	bfd4      	ite	le
 8015314:	2301      	movle	r3, #1
 8015316:	2300      	movgt	r3, #0
 8015318:	b2db      	uxtb	r3, r3
 801531a:	2b00      	cmp	r3, #0
 801531c:	d001      	beq.n	8015322 <_ZN8PongView15check_collisionEv+0x112>
		return 2;
 801531e:	2302      	movs	r3, #2
 8015320:	e000      	b.n	8015324 <_ZN8PongView15check_collisionEv+0x114>
	}

	return 0;
 8015322:	2300      	movs	r3, #0
}
 8015324:	4618      	mov	r0, r3
 8015326:	3708      	adds	r7, #8
 8015328:	46bd      	mov	sp, r7
 801532a:	bdb0      	pop	{r4, r5, r7, pc}

0801532c <_ZN8PongView12check_movingEv>:

int PongView::check_moving(){
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]

	if(tick>5){
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f503 53f1 	add.w	r3, r3, #7712	; 0x1e20
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	2b05      	cmp	r3, #5
 801533e:	dd2e      	ble.n	801539e <_ZN8PongView12check_movingEv+0x72>
		if(paddle1.getX() - pos > 0){
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	33f0      	adds	r3, #240	; 0xf0
 8015344:	4618      	mov	r0, r3
 8015346:	f7fa f928 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 801534a:	4603      	mov	r3, r0
 801534c:	4619      	mov	r1, r3
 801534e:	687a      	ldr	r2, [r7, #4]
 8015350:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015354:	4413      	add	r3, r2
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	1acb      	subs	r3, r1, r3
 801535a:	2b00      	cmp	r3, #0
 801535c:	bfcc      	ite	gt
 801535e:	2301      	movgt	r3, #1
 8015360:	2300      	movle	r3, #0
 8015362:	b2db      	uxtb	r3, r3
 8015364:	2b00      	cmp	r3, #0
 8015366:	d001      	beq.n	801536c <_ZN8PongView12check_movingEv+0x40>
			return 1;
 8015368:	2301      	movs	r3, #1
 801536a:	e025      	b.n	80153b8 <_ZN8PongView12check_movingEv+0x8c>
		}
		else if(paddle1.getX() - pos < 0){
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	33f0      	adds	r3, #240	; 0xf0
 8015370:	4618      	mov	r0, r3
 8015372:	f7fa f912 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 8015376:	4603      	mov	r3, r0
 8015378:	4619      	mov	r1, r3
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015380:	4413      	add	r3, r2
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	1acb      	subs	r3, r1, r3
 8015386:	0fdb      	lsrs	r3, r3, #31
 8015388:	b2db      	uxtb	r3, r3
 801538a:	2b00      	cmp	r3, #0
 801538c:	d001      	beq.n	8015392 <_ZN8PongView12check_movingEv+0x66>
			return 2;
 801538e:	2302      	movs	r3, #2
 8015390:	e012      	b.n	80153b8 <_ZN8PongView12check_movingEv+0x8c>
		}
		tick = 0;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f503 53f1 	add.w	r3, r3, #7712	; 0x1e20
 8015398:	2200      	movs	r2, #0
 801539a:	601a      	str	r2, [r3, #0]
 801539c:	e00b      	b.n	80153b6 <_ZN8PongView12check_movingEv+0x8a>
	}
	else{
		pos = paddle1.getX();
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	33f0      	adds	r3, #240	; 0xf0
 80153a2:	4618      	mov	r0, r3
 80153a4:	f7fa f8f9 	bl	800f59a <_ZNK8touchgfx8Drawable4getXEv>
 80153a8:	4603      	mov	r3, r0
 80153aa:	4619      	mov	r1, r3
 80153ac:	687a      	ldr	r2, [r7, #4]
 80153ae:	f641 6324 	movw	r3, #7716	; 0x1e24
 80153b2:	4413      	add	r3, r2
 80153b4:	6019      	str	r1, [r3, #0]
	}

	return 0;
 80153b6:	2300      	movs	r3, #0


}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3708      	adds	r7, #8
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}

080153c0 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
 80153c8:	4a09      	ldr	r2, [pc, #36]	; (80153f0 <_ZN16Screen2PresenterD1Ev+0x30>)
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	601a      	str	r2, [r3, #0]
 80153ce:	4a09      	ldr	r2, [pc, #36]	; (80153f4 <_ZN16Screen2PresenterD1Ev+0x34>)
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	605a      	str	r2, [r3, #4]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	3304      	adds	r3, #4
 80153d8:	4618      	mov	r0, r3
 80153da:	f7ff fcbd 	bl	8014d58 <_ZN13ModelListenerD1Ev>
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7ff fc75 	bl	8014cd0 <_ZN8touchgfx9PresenterD1Ev>
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	4618      	mov	r0, r3
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	0802a148 	.word	0x0802a148
 80153f4:	0802a160 	.word	0x0802a160

080153f8 <_ZThn4_N16Screen2PresenterD1Ev>:
 80153f8:	f1a0 0004 	sub.w	r0, r0, #4
 80153fc:	e7e0      	b.n	80153c0 <_ZN16Screen2PresenterD1Ev>
 80153fe:	bf00      	nop

08015400 <_ZN16Screen2PresenterD0Ev>:
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f7ff ffd9 	bl	80153c0 <_ZN16Screen2PresenterD1Ev>
 801540e:	2110      	movs	r1, #16
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f012 f953 	bl	80276bc <_ZdlPvj>
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	4618      	mov	r0, r3
 801541a:	3708      	adds	r7, #8
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}

08015420 <_ZThn4_N16Screen2PresenterD0Ev>:
 8015420:	f1a0 0004 	sub.w	r0, r0, #4
 8015424:	e7ec      	b.n	8015400 <_ZN16Screen2PresenterD0Ev>
	...

08015428 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
    : view(v)
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	4618      	mov	r0, r3
 8015436:	f7ff fc6b 	bl	8014d10 <_ZN8touchgfx9PresenterC1Ev>
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	3304      	adds	r3, #4
 801543e:	4618      	mov	r0, r3
 8015440:	f7ff fc76 	bl	8014d30 <_ZN13ModelListenerC1Ev>
 8015444:	4a06      	ldr	r2, [pc, #24]	; (8015460 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	601a      	str	r2, [r3, #0]
 801544a:	4a06      	ldr	r2, [pc, #24]	; (8015464 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	605a      	str	r2, [r3, #4]
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	683a      	ldr	r2, [r7, #0]
 8015454:	60da      	str	r2, [r3, #12]
{

}
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	4618      	mov	r0, r3
 801545a:	3708      	adds	r7, #8
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	0802a148 	.word	0x0802a148
 8015464:	0802a160 	.word	0x0802a160

08015468 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8015468:	b480      	push	{r7}
 801546a:	b083      	sub	sp, #12
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]

}
 8015470:	bf00      	nop
 8015472:	370c      	adds	r7, #12
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr

0801547c <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 801547c:	b480      	push	{r7}
 801547e:	b083      	sub	sp, #12
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]

}
 8015484:	bf00      	nop
 8015486:	370c      	adds	r7, #12
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr

08015490 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	4a05      	ldr	r2, [pc, #20]	; (80154b0 <_ZN11Screen2ViewD1Ev+0x20>)
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	601a      	str	r2, [r3, #0]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fd fd8f 	bl	8012fc4 <_ZN15Screen2ViewBaseD1Ev>
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	4618      	mov	r0, r3
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	0802a170 	.word	0x0802a170

080154b4 <_ZN11Screen2ViewD0Ev>:
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f7ff ffe7 	bl	8015490 <_ZN11Screen2ViewD1Ev>
 80154c2:	f641 7148 	movw	r1, #8008	; 0x1f48
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f012 f8f8 	bl	80276bc <_ZdlPvj>
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	4618      	mov	r0, r3
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
	...

080154d8 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fd fe3a 	bl	801315c <_ZN15Screen2ViewBaseC1Ev>
 80154e8:	4a03      	ldr	r2, [pc, #12]	; (80154f8 <_ZN11Screen2ViewC1Ev+0x20>)
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	601a      	str	r2, [r3, #0]
{

}
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	4618      	mov	r0, r3
 80154f2:	3708      	adds	r7, #8
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	0802a170 	.word	0x0802a170

080154fc <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	4618      	mov	r0, r3
 8015508:	f7fe f86a 	bl	80135e0 <_ZN15Screen2ViewBase11setupScreenEv>
}
 801550c:	bf00      	nop
 801550e:	3708      	adds	r7, #8
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b082      	sub	sp, #8
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	4618      	mov	r0, r3
 8015520:	f7fc fb82 	bl	8011c28 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015524:	bf00      	nop
 8015526:	3708      	adds	r7, #8
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	4a09      	ldr	r2, [pc, #36]	; (801555c <_ZN16Screen3PresenterD1Ev+0x30>)
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	601a      	str	r2, [r3, #0]
 801553a:	4a09      	ldr	r2, [pc, #36]	; (8015560 <_ZN16Screen3PresenterD1Ev+0x34>)
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	605a      	str	r2, [r3, #4]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	3304      	adds	r3, #4
 8015544:	4618      	mov	r0, r3
 8015546:	f7ff fc07 	bl	8014d58 <_ZN13ModelListenerD1Ev>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	4618      	mov	r0, r3
 801554e:	f7ff fbbf 	bl	8014cd0 <_ZN8touchgfx9PresenterD1Ev>
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	4618      	mov	r0, r3
 8015556:	3708      	adds	r7, #8
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	0802a1a4 	.word	0x0802a1a4
 8015560:	0802a1bc 	.word	0x0802a1bc

08015564 <_ZThn4_N16Screen3PresenterD1Ev>:
 8015564:	f1a0 0004 	sub.w	r0, r0, #4
 8015568:	e7e0      	b.n	801552c <_ZN16Screen3PresenterD1Ev>
 801556a:	bf00      	nop

0801556c <_ZN16Screen3PresenterD0Ev>:
 801556c:	b580      	push	{r7, lr}
 801556e:	b082      	sub	sp, #8
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f7ff ffd9 	bl	801552c <_ZN16Screen3PresenterD1Ev>
 801557a:	2110      	movs	r1, #16
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f012 f89d 	bl	80276bc <_ZdlPvj>
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	4618      	mov	r0, r3
 8015586:	3708      	adds	r7, #8
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <_ZThn4_N16Screen3PresenterD0Ev>:
 801558c:	f1a0 0004 	sub.w	r0, r0, #4
 8015590:	e7ec      	b.n	801556c <_ZN16Screen3PresenterD0Ev>
	...

08015594 <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	6039      	str	r1, [r7, #0]
    : view(v)
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff fbb5 	bl	8014d10 <_ZN8touchgfx9PresenterC1Ev>
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	3304      	adds	r3, #4
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7ff fbc0 	bl	8014d30 <_ZN13ModelListenerC1Ev>
 80155b0:	4a06      	ldr	r2, [pc, #24]	; (80155cc <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	601a      	str	r2, [r3, #0]
 80155b6:	4a06      	ldr	r2, [pc, #24]	; (80155d0 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	605a      	str	r2, [r3, #4]
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	683a      	ldr	r2, [r7, #0]
 80155c0:	60da      	str	r2, [r3, #12]
{

}
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	4618      	mov	r0, r3
 80155c6:	3708      	adds	r7, #8
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}
 80155cc:	0802a1a4 	.word	0x0802a1a4
 80155d0:	0802a1bc 	.word	0x0802a1bc

080155d4 <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 80155d4:	b480      	push	{r7}
 80155d6:	b083      	sub	sp, #12
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]

}
 80155dc:	bf00      	nop
 80155de:	370c      	adds	r7, #12
 80155e0:	46bd      	mov	sp, r7
 80155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e6:	4770      	bx	lr

080155e8 <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 80155e8:	b480      	push	{r7}
 80155ea:	b083      	sub	sp, #12
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]

}
 80155f0:	bf00      	nop
 80155f2:	370c      	adds	r7, #12
 80155f4:	46bd      	mov	sp, r7
 80155f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fa:	4770      	bx	lr

080155fc <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	4a05      	ldr	r2, [pc, #20]	; (801561c <_ZN11Screen3ViewD1Ev+0x20>)
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	601a      	str	r2, [r3, #0]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	4618      	mov	r0, r3
 801560e:	f7fe fb83 	bl	8013d18 <_ZN15Screen3ViewBaseD1Ev>
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	4618      	mov	r0, r3
 8015616:	3708      	adds	r7, #8
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	0802a1cc 	.word	0x0802a1cc

08015620 <_ZN11Screen3ViewD0Ev>:
 8015620:	b580      	push	{r7, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6878      	ldr	r0, [r7, #4]
 801562a:	f7ff ffe7 	bl	80155fc <_ZN11Screen3ViewD1Ev>
 801562e:	f44f 7106 	mov.w	r1, #536	; 0x218
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	f012 f842 	bl	80276bc <_ZdlPvj>
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	4618      	mov	r0, r3
 801563c:	3708      	adds	r7, #8
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
	...

08015644 <_ZN11Screen3ViewC1Ev>:
#include <gui/screen3_screen/Screen3View.hpp>

Screen3View::Screen3View()
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	4618      	mov	r0, r3
 8015650:	f7fe fbb6 	bl	8013dc0 <_ZN15Screen3ViewBaseC1Ev>
 8015654:	4a03      	ldr	r2, [pc, #12]	; (8015664 <_ZN11Screen3ViewC1Ev+0x20>)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	601a      	str	r2, [r3, #0]
{

}
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	4618      	mov	r0, r3
 801565e:	3708      	adds	r7, #8
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	0802a1cc 	.word	0x0802a1cc

08015668 <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::setupScreen();
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f7fe fd0a 	bl	801408c <_ZN15Screen3ViewBase11setupScreenEv>
}
 8015678:	bf00      	nop
 801567a:	3708      	adds	r7, #8
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	4618      	mov	r0, r3
 801568c:	f7fc facc 	bl	8011c28 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015690:	bf00      	nop
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	4a09      	ldr	r2, [pc, #36]	; (80156c8 <_ZN15screenPresenterD1Ev+0x30>)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	601a      	str	r2, [r3, #0]
 80156a6:	4a09      	ldr	r2, [pc, #36]	; (80156cc <_ZN15screenPresenterD1Ev+0x34>)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	605a      	str	r2, [r3, #4]
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	3304      	adds	r3, #4
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7ff fb51 	bl	8014d58 <_ZN13ModelListenerD1Ev>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7ff fb09 	bl	8014cd0 <_ZN8touchgfx9PresenterD1Ev>
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	4618      	mov	r0, r3
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	0802a200 	.word	0x0802a200
 80156cc:	0802a218 	.word	0x0802a218

080156d0 <_ZThn4_N15screenPresenterD1Ev>:
 80156d0:	f1a0 0004 	sub.w	r0, r0, #4
 80156d4:	e7e0      	b.n	8015698 <_ZN15screenPresenterD1Ev>
 80156d6:	bf00      	nop

080156d8 <_ZN15screenPresenterD0Ev>:
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7ff ffd9 	bl	8015698 <_ZN15screenPresenterD1Ev>
 80156e6:	2110      	movs	r1, #16
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f011 ffe7 	bl	80276bc <_ZdlPvj>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	4618      	mov	r0, r3
 80156f2:	3708      	adds	r7, #8
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <_ZThn4_N15screenPresenterD0Ev>:
 80156f8:	f1a0 0004 	sub.w	r0, r0, #4
 80156fc:	e7ec      	b.n	80156d8 <_ZN15screenPresenterD0Ev>
	...

08015700 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
 8015708:	6039      	str	r1, [r7, #0]
    : view(v)
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4618      	mov	r0, r3
 801570e:	f7ff faff 	bl	8014d10 <_ZN8touchgfx9PresenterC1Ev>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	3304      	adds	r3, #4
 8015716:	4618      	mov	r0, r3
 8015718:	f7ff fb0a 	bl	8014d30 <_ZN13ModelListenerC1Ev>
 801571c:	4a06      	ldr	r2, [pc, #24]	; (8015738 <_ZN15screenPresenterC1ER10screenView+0x38>)
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	601a      	str	r2, [r3, #0]
 8015722:	4a06      	ldr	r2, [pc, #24]	; (801573c <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	605a      	str	r2, [r3, #4]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	683a      	ldr	r2, [r7, #0]
 801572c:	60da      	str	r2, [r3, #12]
{

}
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	4618      	mov	r0, r3
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	0802a200 	.word	0x0802a200
 801573c:	0802a218 	.word	0x0802a218

08015740 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8015740:	b480      	push	{r7}
 8015742:	b083      	sub	sp, #12
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]

}
 8015748:	bf00      	nop
 801574a:	370c      	adds	r7, #12
 801574c:	46bd      	mov	sp, r7
 801574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015752:	4770      	bx	lr

08015754 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8015754:	b480      	push	{r7}
 8015756:	b083      	sub	sp, #12
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]

}
 801575c:	bf00      	nop
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	4a05      	ldr	r2, [pc, #20]	; (8015788 <_ZN10screenViewD1Ev+0x20>)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	601a      	str	r2, [r3, #0]
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	4618      	mov	r0, r3
 801577a:	f7fe fdb1 	bl	80142e0 <_ZN14screenViewBaseD1Ev>
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	4618      	mov	r0, r3
 8015782:	3708      	adds	r7, #8
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	0802a228 	.word	0x0802a228

0801578c <_ZN10screenViewD0Ev>:
 801578c:	b580      	push	{r7, lr}
 801578e:	b082      	sub	sp, #8
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f7ff ffe7 	bl	8015768 <_ZN10screenViewD1Ev>
 801579a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f011 ff8c 	bl	80276bc <_ZdlPvj>
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	4618      	mov	r0, r3
 80157a8:	3708      	adds	r7, #8
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}
	...

080157b0 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b082      	sub	sp, #8
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7fe fdda 	bl	8014374 <_ZN14screenViewBaseC1Ev>
 80157c0:	4a03      	ldr	r2, [pc, #12]	; (80157d0 <_ZN10screenViewC1Ev+0x20>)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	601a      	str	r2, [r3, #0]
{

}
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	4618      	mov	r0, r3
 80157ca:	3708      	adds	r7, #8
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}
 80157d0:	0802a228 	.word	0x0802a228

080157d4 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	4618      	mov	r0, r3
 80157e0:	f7fe ff38 	bl	8014654 <_ZN14screenViewBase11setupScreenEv>
}
 80157e4:	bf00      	nop
 80157e6:	3708      	adds	r7, #8
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7fc fa16 	bl	8011c28 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80157fc:	bf00      	nop
 80157fe:	3708      	adds	r7, #8
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}

08015804 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8015804:	b480      	push	{r7}
 8015806:	b083      	sub	sp, #12
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
    {
 801580c:	4a04      	ldr	r2, [pc, #16]	; (8015820 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	601a      	str	r2, [r3, #0]
    }
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	4618      	mov	r0, r3
 8015816:	370c      	adds	r7, #12
 8015818:	46bd      	mov	sp, r7
 801581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581e:	4770      	bx	lr
 8015820:	0802a274 	.word	0x0802a274

08015824 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
    }
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f7ff ffe9 	bl	8015804 <_ZN8touchgfx15TouchControllerD1Ev>
 8015832:	2104      	movs	r1, #4
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f011 ff41 	bl	80276bc <_ZdlPvj>
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	4618      	mov	r0, r3
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	tsDriver = &ft5336_ts_drv;
 801584c:	4b05      	ldr	r3, [pc, #20]	; (8015864 <_ZN20STM32TouchController4initEv+0x20>)
 801584e:	4a06      	ldr	r2, [pc, #24]	; (8015868 <_ZN20STM32TouchController4initEv+0x24>)
 8015850:	601a      	str	r2, [r3, #0]
	tsDriver->Start(TS_I2C_ADDRESS);
 8015852:	4b04      	ldr	r3, [pc, #16]	; (8015864 <_ZN20STM32TouchController4initEv+0x20>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	68db      	ldr	r3, [r3, #12]
 8015858:	2070      	movs	r0, #112	; 0x70
 801585a:	4798      	blx	r3

}
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	200085d0 	.word	0x200085d0
 8015868:	20000004 	.word	0x20000004

0801586c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b084      	sub	sp, #16
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 8015878:	4b0f      	ldr	r3, [pc, #60]	; (80158b8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d015      	beq.n	80158ac <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    {
	        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8015880:	4b0d      	ldr	r3, [pc, #52]	; (80158b8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	691b      	ldr	r3, [r3, #16]
 8015886:	2070      	movs	r0, #112	; 0x70
 8015888:	4798      	blx	r3
 801588a:	4603      	mov	r3, r0
 801588c:	2b00      	cmp	r3, #0
 801588e:	bf14      	ite	ne
 8015890:	2301      	movne	r3, #1
 8015892:	2300      	moveq	r3, #0
 8015894:	b2db      	uxtb	r3, r3
 8015896:	2b00      	cmp	r3, #0
 8015898:	d008      	beq.n	80158ac <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	        {
	            /* Get each touch coordinates */
	            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 801589a:	4b07      	ldr	r3, [pc, #28]	; (80158b8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	695b      	ldr	r3, [r3, #20]
 80158a0:	68ba      	ldr	r2, [r7, #8]
 80158a2:	6879      	ldr	r1, [r7, #4]
 80158a4:	2070      	movs	r0, #112	; 0x70
 80158a6:	4798      	blx	r3
	            return true;
 80158a8:	2301      	movs	r3, #1
 80158aa:	e000      	b.n	80158ae <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	        }
	    }


    return false;
 80158ac:	2300      	movs	r3, #0
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	3710      	adds	r7, #16
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}
 80158b6:	bf00      	nop
 80158b8:	200085d0 	.word	0x200085d0

080158bc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80158bc:	b580      	push	{r7, lr}
 80158be:	b082      	sub	sp, #8
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	4a05      	ldr	r2, [pc, #20]	; (80158dc <_ZN20STM32TouchControllerD1Ev+0x20>)
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	601a      	str	r2, [r3, #0]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7ff ff99 	bl	8015804 <_ZN8touchgfx15TouchControllerD1Ev>
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	4618      	mov	r0, r3
 80158d6:	3708      	adds	r7, #8
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}
 80158dc:	0802a25c 	.word	0x0802a25c

080158e0 <_ZN20STM32TouchControllerD0Ev>:
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7ff ffe7 	bl	80158bc <_ZN20STM32TouchControllerD1Ev>
 80158ee:	2104      	movs	r1, #4
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f011 fee3 	bl	80276bc <_ZdlPvj>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	4618      	mov	r0, r3
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	4603      	mov	r3, r0
 8015908:	71fb      	strb	r3, [r7, #7]

}
 801590a:	bf00      	nop
 801590c:	370c      	adds	r7, #12
 801590e:	46bd      	mov	sp, r7
 8015910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015914:	4770      	bx	lr

08015916 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8015916:	b480      	push	{r7}
 8015918:	b083      	sub	sp, #12
 801591a:	af00      	add	r7, sp, #0
 801591c:	4603      	mov	r3, r0
 801591e:	71fb      	strb	r3, [r7, #7]

}
 8015920:	bf00      	nop
 8015922:	370c      	adds	r7, #12
 8015924:	46bd      	mov	sp, r7
 8015926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592a:	4770      	bx	lr

0801592c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801592c:	b480      	push	{r7}
 801592e:	b083      	sub	sp, #12
 8015930:	af00      	add	r7, sp, #0
 8015932:	4603      	mov	r3, r0
 8015934:	71fb      	strb	r3, [r7, #7]

}
 8015936:	bf00      	nop
 8015938:	370c      	adds	r7, #12
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
	...

08015944 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
    {
 801594c:	4a04      	ldr	r2, [pc, #16]	; (8015960 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	601a      	str	r2, [r3, #0]
    }
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	4618      	mov	r0, r3
 8015956:	370c      	adds	r7, #12
 8015958:	46bd      	mov	sp, r7
 801595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595e:	4770      	bx	lr
 8015960:	0802afe0 	.word	0x0802afe0

08015964 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
    }
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f7ff ffe9 	bl	8015944 <_ZN8touchgfx3HALD1Ev>
 8015972:	2178      	movs	r1, #120	; 0x78
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f011 fea1 	bl	80276bc <_ZdlPvj>
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	4618      	mov	r0, r3
 801597e:	3708      	adds	r7, #8
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}

08015984 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8015984:	b480      	push	{r7}
 8015986:	b083      	sub	sp, #12
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	460b      	mov	r3, r1
 801598e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	78fa      	ldrb	r2, [r7, #3]
 8015994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	2201      	movs	r2, #1
 801599c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80159a0:	bf00      	nop
 80159a2:	370c      	adds	r7, #12
 80159a4:	46bd      	mov	sp, r7
 80159a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159aa:	4770      	bx	lr

080159ac <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b082      	sub	sp, #8
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	685a      	ldr	r2, [r3, #4]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	4610      	mov	r0, r2
 80159c2:	4798      	blx	r3
 80159c4:	4603      	mov	r3, r0
    }
 80159c6:	4618      	mov	r0, r3
 80159c8:	3708      	adds	r7, #8
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}

080159ce <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80159ce:	b580      	push	{r7, lr}
 80159d0:	b082      	sub	sp, #8
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f003 f864 	bl	8018aa4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	3390      	adds	r3, #144	; 0x90
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	4798      	blx	r3
    }
 80159e8:	bf00      	nop
 80159ea:	3708      	adds	r7, #8
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80159f0:	b480      	push	{r7}
 80159f2:	b083      	sub	sp, #12
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
 80159f8:	6039      	str	r1, [r7, #0]
        return false;
 80159fa:	2300      	movs	r3, #0
    }
 80159fc:	4618      	mov	r0, r3
 80159fe:	370c      	adds	r7, #12
 8015a00:	46bd      	mov	sp, r7
 8015a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a06:	4770      	bx	lr

08015a08 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    TOUCHGFX_DEPRECATED(
 8015a08:	b590      	push	{r4, r7, lr}
 8015a0a:	b08b      	sub	sp, #44	; 0x2c
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	60f8      	str	r0, [r7, #12]
 8015a10:	60b9      	str	r1, [r7, #8]
 8015a12:	4611      	mov	r1, r2
 8015a14:	461a      	mov	r2, r3
 8015a16:	460b      	mov	r3, r1
 8015a18:	80fb      	strh	r3, [r7, #6]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 8015a1e:	f7f9 fed9 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 8015a22:	4602      	mov	r2, r0
 8015a24:	6813      	ldr	r3, [r2, #0]
 8015a26:	3324      	adds	r3, #36	; 0x24
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	4610      	mov	r0, r2
 8015a2c:	4798      	blx	r3
 8015a2e:	4603      	mov	r3, r0
 8015a30:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8015a32:	8b7b      	ldrh	r3, [r7, #26]
 8015a34:	4a3d      	ldr	r2, [pc, #244]	; (8015b2c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8015a36:	8812      	ldrh	r2, [r2, #0]
 8015a38:	fb02 f303 	mul.w	r3, r2, r3
 8015a3c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8015a42:	2300      	movs	r3, #0
 8015a44:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8015a46:	2300      	movs	r3, #0
 8015a48:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8015a4a:	797b      	ldrb	r3, [r7, #5]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d005      	beq.n	8015a5c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8015a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	4413      	add	r3, r2
 8015a56:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8015a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5a:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8015a5c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d005      	beq.n	8015a70 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8015a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a66:	697b      	ldr	r3, [r7, #20]
 8015a68:	4413      	add	r3, r2
 8015a6a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a6e:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8015a70:	88fb      	ldrh	r3, [r7, #6]
 8015a72:	3b01      	subs	r3, #1
 8015a74:	2b1f      	cmp	r3, #31
 8015a76:	d84d      	bhi.n	8015b14 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8015a78:	a201      	add	r2, pc, #4	; (adr r2, 8015a80 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8015a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a7e:	bf00      	nop
 8015a80:	08015b01 	.word	0x08015b01
 8015a84:	08015b01 	.word	0x08015b01
 8015a88:	08015b15 	.word	0x08015b15
 8015a8c:	08015b01 	.word	0x08015b01
 8015a90:	08015b15 	.word	0x08015b15
 8015a94:	08015b15 	.word	0x08015b15
 8015a98:	08015b15 	.word	0x08015b15
 8015a9c:	08015b01 	.word	0x08015b01
 8015aa0:	08015b15 	.word	0x08015b15
 8015aa4:	08015b15 	.word	0x08015b15
 8015aa8:	08015b15 	.word	0x08015b15
 8015aac:	08015b15 	.word	0x08015b15
 8015ab0:	08015b15 	.word	0x08015b15
 8015ab4:	08015b15 	.word	0x08015b15
 8015ab8:	08015b15 	.word	0x08015b15
 8015abc:	08015b01 	.word	0x08015b01
 8015ac0:	08015b15 	.word	0x08015b15
 8015ac4:	08015b15 	.word	0x08015b15
 8015ac8:	08015b15 	.word	0x08015b15
 8015acc:	08015b15 	.word	0x08015b15
 8015ad0:	08015b15 	.word	0x08015b15
 8015ad4:	08015b15 	.word	0x08015b15
 8015ad8:	08015b15 	.word	0x08015b15
 8015adc:	08015b01 	.word	0x08015b01
 8015ae0:	08015b15 	.word	0x08015b15
 8015ae4:	08015b15 	.word	0x08015b15
 8015ae8:	08015b15 	.word	0x08015b15
 8015aec:	08015b15 	.word	0x08015b15
 8015af0:	08015b15 	.word	0x08015b15
 8015af4:	08015b15 	.word	0x08015b15
 8015af8:	08015b15 	.word	0x08015b15
 8015afc:	08015b01 	.word	0x08015b01
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	3374      	adds	r3, #116	; 0x74
 8015b06:	681c      	ldr	r4, [r3, #0]
 8015b08:	69fb      	ldr	r3, [r7, #28]
 8015b0a:	6a3a      	ldr	r2, [r7, #32]
 8015b0c:	68b9      	ldr	r1, [r7, #8]
 8015b0e:	68f8      	ldr	r0, [r7, #12]
 8015b10:	47a0      	blx	r4
            break;
 8015b12:	e006      	b.n	8015b22 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8015b14:	4b06      	ldr	r3, [pc, #24]	; (8015b30 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8015b16:	4a07      	ldr	r2, [pc, #28]	; (8015b34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8015b18:	f240 216f 	movw	r1, #623	; 0x26f
 8015b1c:	4806      	ldr	r0, [pc, #24]	; (8015b38 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8015b1e:	f011 fdf9 	bl	8027714 <__assert_func>
    }
 8015b22:	bf00      	nop
 8015b24:	372c      	adds	r7, #44	; 0x2c
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd90      	pop	{r4, r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	2000b418 	.word	0x2000b418
 8015b30:	08028e7c 	.word	0x08028e7c
 8015b34:	0802a388 	.word	0x0802a388
 8015b38:	08028e9c 	.word	0x08028e9c

08015b3c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	60b9      	str	r1, [r7, #8]
 8015b46:	607a      	str	r2, [r7, #4]
 8015b48:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d106      	bne.n	8015b5e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015b50:	4b11      	ldr	r3, [pc, #68]	; (8015b98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8015b52:	4a12      	ldr	r2, [pc, #72]	; (8015b9c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8015b54:	f240 2182 	movw	r1, #642	; 0x282
 8015b58:	4811      	ldr	r0, [pc, #68]	; (8015ba0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015b5a:	f011 fddb 	bl	8027714 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	68ba      	ldr	r2, [r7, #8]
 8015b62:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	687a      	ldr	r2, [r7, #4]
 8015b68:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	683a      	ldr	r2, [r7, #0]
 8015b6e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	bf14      	ite	ne
 8015b76:	2301      	movne	r3, #1
 8015b78:	2300      	moveq	r3, #0
 8015b7a:	b2da      	uxtb	r2, r3
 8015b7c:	4b09      	ldr	r3, [pc, #36]	; (8015ba4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8015b7e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	bf14      	ite	ne
 8015b86:	2301      	movne	r3, #1
 8015b88:	2300      	moveq	r3, #0
 8015b8a:	b2da      	uxtb	r2, r3
 8015b8c:	4b06      	ldr	r3, [pc, #24]	; (8015ba8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8015b8e:	701a      	strb	r2, [r3, #0]
    }
 8015b90:	bf00      	nop
 8015b92:	3710      	adds	r7, #16
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd80      	pop	{r7, pc}
 8015b98:	08028ee0 	.word	0x08028ee0
 8015b9c:	0802a338 	.word	0x0802a338
 8015ba0:	08028e9c 	.word	0x08028e9c
 8015ba4:	2000b41a 	.word	0x2000b41a
 8015ba8:	2000b41b 	.word	0x2000b41b

08015bac <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b082      	sub	sp, #8
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	460b      	mov	r3, r1
 8015bb6:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d004      	beq.n	8015bca <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bc4:	887a      	ldrh	r2, [r7, #2]
 8015bc6:	4610      	mov	r0, r2
 8015bc8:	4798      	blx	r3
    }
 8015bca:	bf00      	nop
 8015bcc:	3708      	adds	r7, #8
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}

08015bd2 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8015bd2:	b580      	push	{r7, lr}
 8015bd4:	b082      	sub	sp, #8
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	685a      	ldr	r2, [r3, #4]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	3318      	adds	r3, #24
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	4610      	mov	r0, r2
 8015bea:	4798      	blx	r3
 8015bec:	4603      	mov	r3, r0
    }
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3708      	adds	r7, #8
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}
	...

08015bf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8015bf8:	b480      	push	{r7}
 8015bfa:	b083      	sub	sp, #12
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d017      	beq.n	8015c40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8015c10:	4b1a      	ldr	r3, [pc, #104]	; (8015c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015c12:	781b      	ldrb	r3, [r3, #0]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d12a      	bne.n	8015c6e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8015c18:	4b19      	ldr	r3, [pc, #100]	; (8015c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015c1a:	881a      	ldrh	r2, [r3, #0]
 8015c1c:	4b19      	ldr	r3, [pc, #100]	; (8015c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015c1e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8015c20:	4b19      	ldr	r3, [pc, #100]	; (8015c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015c22:	881a      	ldrh	r2, [r3, #0]
 8015c24:	4b19      	ldr	r3, [pc, #100]	; (8015c8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015c26:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8015c28:	4b16      	ldr	r3, [pc, #88]	; (8015c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015c2a:	881a      	ldrh	r2, [r3, #0]
 8015c2c:	4b16      	ldr	r3, [pc, #88]	; (8015c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015c2e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8015c30:	4b16      	ldr	r3, [pc, #88]	; (8015c8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015c32:	881a      	ldrh	r2, [r3, #0]
 8015c34:	4b12      	ldr	r3, [pc, #72]	; (8015c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015c36:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8015c38:	4b10      	ldr	r3, [pc, #64]	; (8015c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8015c3e:	e016      	b.n	8015c6e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8015c40:	4b0e      	ldr	r3, [pc, #56]	; (8015c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015c42:	781b      	ldrb	r3, [r3, #0]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d012      	beq.n	8015c6e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8015c48:	4b0f      	ldr	r3, [pc, #60]	; (8015c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015c4a:	881a      	ldrh	r2, [r3, #0]
 8015c4c:	4b0d      	ldr	r3, [pc, #52]	; (8015c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015c4e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8015c50:	4b0b      	ldr	r3, [pc, #44]	; (8015c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015c52:	881a      	ldrh	r2, [r3, #0]
 8015c54:	4b0d      	ldr	r3, [pc, #52]	; (8015c8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015c56:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8015c58:	4b0c      	ldr	r3, [pc, #48]	; (8015c8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015c5a:	881a      	ldrh	r2, [r3, #0]
 8015c5c:	4b0a      	ldr	r3, [pc, #40]	; (8015c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015c5e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8015c60:	4b08      	ldr	r3, [pc, #32]	; (8015c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015c62:	881a      	ldrh	r2, [r3, #0]
 8015c64:	4b06      	ldr	r3, [pc, #24]	; (8015c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015c66:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8015c68:	4b04      	ldr	r3, [pc, #16]	; (8015c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	701a      	strb	r2, [r3, #0]
    }
 8015c6e:	bf00      	nop
 8015c70:	370c      	adds	r7, #12
 8015c72:	46bd      	mov	sp, r7
 8015c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c78:	4770      	bx	lr
 8015c7a:	bf00      	nop
 8015c7c:	2000b414 	.word	0x2000b414
 8015c80:	2000b410 	.word	0x2000b410
 8015c84:	2000b416 	.word	0x2000b416
 8015c88:	2000b412 	.word	0x2000b412
 8015c8c:	2000b418 	.word	0x2000b418

08015c90 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b082      	sub	sp, #8
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f002 f985 	bl	8017faa <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8015ca0:	bf00      	nop
 8015ca2:	3708      	adds	r7, #8
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	bd80      	pop	{r7, pc}

08015ca8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	4a05      	ldr	r2, [pc, #20]	; (8015cc8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	601a      	str	r2, [r3, #0]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7ff fe43 	bl	8015944 <_ZN8touchgfx3HALD1Ev>
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3708      	adds	r7, #8
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	0802a5a0 	.word	0x0802a5a0

08015ccc <_ZN20TouchGFXGeneratedHALD0Ev>:
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b082      	sub	sp, #8
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f7ff ffe7 	bl	8015ca8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8015cda:	2178      	movs	r1, #120	; 0x78
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f011 fced 	bl	80276bc <_ZdlPvj>
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	3708      	adds	r7, #8
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}

08015cec <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f7ff ffca 	bl	8015c90 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8015cfc:	bf00      	nop
 8015cfe:	3708      	adds	r7, #8
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}

08015d04 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f001 fafc 	bl	801730c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8015d14:	bf00      	nop
 8015d16:	3708      	adds	r7, #8
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	4618      	mov	r0, r3
 8015d28:	f001 fb7c 	bl	8017424 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8015d2c:	4603      	mov	r3, r0
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3708      	adds	r7, #8
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}

08015d36 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8015d36:	b580      	push	{r7, lr}
 8015d38:	b082      	sub	sp, #8
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	6078      	str	r0, [r7, #4]
 8015d3e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	6839      	ldr	r1, [r7, #0]
 8015d44:	4618      	mov	r0, r3
 8015d46:	f001 fb7b 	bl	8017440 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8015d4a:	bf00      	nop
 8015d4c:	3708      	adds	r7, #8
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}

08015d52 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015d52:	b580      	push	{r7, lr}
 8015d54:	b082      	sub	sp, #8
 8015d56:	af00      	add	r7, sp, #0
 8015d58:	6078      	str	r0, [r7, #4]
 8015d5a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	6839      	ldr	r1, [r7, #0]
 8015d60:	4618      	mov	r0, r3
 8015d62:	f001 fb83 	bl	801746c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8015d66:	bf00      	nop
 8015d68:	3708      	adds	r7, #8
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b084      	sub	sp, #16
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	60f8      	str	r0, [r7, #12]
 8015d76:	60b9      	str	r1, [r7, #8]
 8015d78:	607a      	str	r2, [r7, #4]
 8015d7a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8015d7c:	68f8      	ldr	r0, [r7, #12]
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	687a      	ldr	r2, [r7, #4]
 8015d82:	68b9      	ldr	r1, [r7, #8]
 8015d84:	f002 fa4b 	bl	801821e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8015d88:	4603      	mov	r3, r0
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3710      	adds	r7, #16
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}

08015d92 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8015d92:	b580      	push	{r7, lr}
 8015d94:	b082      	sub	sp, #8
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f001 fae7 	bl	8017370 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8015da2:	bf00      	nop
 8015da4:	3708      	adds	r7, #8
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}

08015daa <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8015daa:	b580      	push	{r7, lr}
 8015dac:	b082      	sub	sp, #8
 8015dae:	af00      	add	r7, sp, #0
 8015db0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	4618      	mov	r0, r3
 8015db6:	f001 faeb 	bl	8017390 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8015dba:	bf00      	nop
 8015dbc:	3708      	adds	r7, #8
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}

08015dc2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8015dc2:	b580      	push	{r7, lr}
 8015dc4:	b082      	sub	sp, #8
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f001 faed 	bl	80173ac <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8015dd2:	bf00      	nop
 8015dd4:	3708      	adds	r7, #8
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}

08015dda <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8015dda:	b580      	push	{r7, lr}
 8015ddc:	b082      	sub	sp, #8
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	4618      	mov	r0, r3
 8015de6:	f001 faef 	bl	80173c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8015dea:	bf00      	nop
 8015dec:	3708      	adds	r7, #8
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}
	...

08015df4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	4a05      	ldr	r2, [pc, #20]	; (8015e14 <_ZN11TouchGFXHALD1Ev+0x20>)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	601a      	str	r2, [r3, #0]
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7ff ff4f 	bl	8015ca8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	0802a28c 	.word	0x0802a28c

08015e18 <_ZN11TouchGFXHALD0Ev>:
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	6878      	ldr	r0, [r7, #4]
 8015e22:	f7ff ffe7 	bl	8015df4 <_ZN11TouchGFXHALD1Ev>
 8015e26:	2178      	movs	r1, #120	; 0x78
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f011 fc47 	bl	80276bc <_ZdlPvj>
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	4618      	mov	r0, r3
 8015e32:	3708      	adds	r7, #8
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}

08015e38 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8015e3c:	2101      	movs	r1, #1
 8015e3e:	4811      	ldr	r0, [pc, #68]	; (8015e84 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8015e40:	f7f5 ff2c 	bl	800bc9c <osSemaphoreCreate>
 8015e44:	4602      	mov	r2, r0
 8015e46:	4b10      	ldr	r3, [pc, #64]	; (8015e88 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8015e48:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8015e4a:	4b0f      	ldr	r3, [pc, #60]	; (8015e88 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d105      	bne.n	8015e5e <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8015e52:	4b0e      	ldr	r3, [pc, #56]	; (8015e8c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8015e54:	4a0e      	ldr	r2, [pc, #56]	; (8015e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015e56:	2125      	movs	r1, #37	; 0x25
 8015e58:	480e      	ldr	r0, [pc, #56]	; (8015e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015e5a:	f011 fc5b 	bl	8027714 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 8015e5e:	2101      	movs	r1, #1
 8015e60:	480d      	ldr	r0, [pc, #52]	; (8015e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015e62:	f7f5 ff1b 	bl	800bc9c <osSemaphoreCreate>
 8015e66:	4602      	mov	r2, r0
 8015e68:	4b0c      	ldr	r3, [pc, #48]	; (8015e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8015e6a:	601a      	str	r2, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8015e6c:	4b0b      	ldr	r3, [pc, #44]	; (8015e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d105      	bne.n	8015e80 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 8015e74:	4b0a      	ldr	r3, [pc, #40]	; (8015ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 8015e76:	4a06      	ldr	r2, [pc, #24]	; (8015e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015e78:	2128      	movs	r1, #40	; 0x28
 8015e7a:	4806      	ldr	r0, [pc, #24]	; (8015e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015e7c:	f011 fc4a 	bl	8027714 <__assert_func>
}
 8015e80:	bf00      	nop
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	0802a3dc 	.word	0x0802a3dc
 8015e88:	200085d4 	.word	0x200085d4
 8015e8c:	08028f18 	.word	0x08028f18
 8015e90:	0802a3ec 	.word	0x0802a3ec
 8015e94:	08028f64 	.word	0x08028f64
 8015e98:	0802a3e4 	.word	0x0802a3e4
 8015e9c:	200085d8 	.word	0x200085d8
 8015ea0:	08028f90 	.word	0x08028f90

08015ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8015ea8:	4b04      	ldr	r3, [pc, #16]	; (8015ebc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	f04f 31ff 	mov.w	r1, #4294967295
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7f5 ff33 	bl	800bd1c <osSemaphoreWait>
}
 8015eb6:	bf00      	nop
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	200085d4 	.word	0x200085d4

08015ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8015ec4:	4b03      	ldr	r3, [pc, #12]	; (8015ed4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7f5 ff75 	bl	800bdb8 <osSemaphoreRelease>
}
 8015ece:	bf00      	nop
 8015ed0:	bd80      	pop	{r7, pc}
 8015ed2:	bf00      	nop
 8015ed4:	200085d4 	.word	0x200085d4

08015ed8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8015edc:	4b03      	ldr	r3, [pc, #12]	; (8015eec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f7f5 ff1a 	bl	800bd1c <osSemaphoreWait>
}
 8015ee8:	bf00      	nop
 8015eea:	bd80      	pop	{r7, pc}
 8015eec:	200085d4 	.word	0x200085d4

08015ef0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8015ef4:	4b03      	ldr	r3, [pc, #12]	; (8015f04 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7f5 ff5d 	bl	800bdb8 <osSemaphoreRelease>
}
 8015efe:	bf00      	nop
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	200085d4 	.word	0x200085d4

08015f08 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8015f0c:	4b03      	ldr	r3, [pc, #12]	; (8015f1c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7f5 ff51 	bl	800bdb8 <osSemaphoreRelease>
}
 8015f16:	bf00      	nop
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	bf00      	nop
 8015f1c:	200085d8 	.word	0x200085d8

08015f20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8015f24:	4b07      	ldr	r3, [pc, #28]	; (8015f44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	2100      	movs	r1, #0
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f7f5 fef6 	bl	800bd1c <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8015f30:	4b04      	ldr	r3, [pc, #16]	; (8015f44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	f04f 31ff 	mov.w	r1, #4294967295
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f7f5 feef 	bl	800bd1c <osSemaphoreWait>
}
 8015f3e:	bf00      	nop
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	200085d8 	.word	0x200085d8

08015f48 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	4603      	mov	r3, r0
 8015f50:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8015f52:	88fb      	ldrh	r3, [r7, #6]
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7f5 fe8d 	bl	800bc74 <osDelay>
}
 8015f5a:	bf00      	nop
 8015f5c:	3708      	adds	r7, #8
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
	...

08015f64 <__NVIC_EnableIRQ>:
{
 8015f64:	b480      	push	{r7}
 8015f66:	b083      	sub	sp, #12
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	db0d      	blt.n	8015f92 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	f003 021f 	and.w	r2, r3, #31
 8015f80:	4907      	ldr	r1, [pc, #28]	; (8015fa0 <__NVIC_EnableIRQ+0x3c>)
 8015f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f86:	095b      	lsrs	r3, r3, #5
 8015f88:	2001      	movs	r0, #1
 8015f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8015f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015f92:	bf00      	nop
 8015f94:	370c      	adds	r7, #12
 8015f96:	46bd      	mov	sp, r7
 8015f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9c:	4770      	bx	lr
 8015f9e:	bf00      	nop
 8015fa0:	e000e100 	.word	0xe000e100

08015fa4 <__NVIC_DisableIRQ>:
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b083      	sub	sp, #12
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	4603      	mov	r3, r0
 8015fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	db12      	blt.n	8015fdc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fba:	b2db      	uxtb	r3, r3
 8015fbc:	f003 021f 	and.w	r2, r3, #31
 8015fc0:	4909      	ldr	r1, [pc, #36]	; (8015fe8 <__NVIC_DisableIRQ+0x44>)
 8015fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fc6:	095b      	lsrs	r3, r3, #5
 8015fc8:	2001      	movs	r0, #1
 8015fca:	fa00 f202 	lsl.w	r2, r0, r2
 8015fce:	3320      	adds	r3, #32
 8015fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015fd8:	f3bf 8f6f 	isb	sy
}
 8015fdc:	bf00      	nop
 8015fde:	370c      	adds	r7, #12
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe6:	4770      	bx	lr
 8015fe8:	e000e100 	.word	0xe000e100

08015fec <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8015fec:	b480      	push	{r7}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
        : color(0)
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	601a      	str	r2, [r3, #0]
    }
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	370c      	adds	r7, #12
 8016000:	46bd      	mov	sp, r7
 8016002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016006:	4770      	bx	lr

08016008 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8016008:	b480      	push	{r7}
 801600a:	b083      	sub	sp, #12
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
        return color;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
    }
 8016014:	4618      	mov	r0, r3
 8016016:	370c      	adds	r7, #12
 8016018:	46bd      	mov	sp, r7
 801601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601e:	4770      	bx	lr

08016020 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8016020:	b480      	push	{r7}
 8016022:	b083      	sub	sp, #12
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
    {
 8016028:	4a04      	ldr	r2, [pc, #16]	; (801603c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	601a      	str	r2, [r3, #0]
    }
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	4618      	mov	r0, r3
 8016032:	370c      	adds	r7, #12
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr
 801603c:	0802a474 	.word	0x0802a474

08016040 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016040:	b580      	push	{r7, lr}
 8016042:	b082      	sub	sp, #8
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
    }
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f7ff ffe9 	bl	8016020 <_ZN8touchgfx9DMA_QueueD1Ev>
 801604e:	2104      	movs	r1, #4
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f011 fb33 	bl	80276bc <_ZdlPvj>
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	4618      	mov	r0, r3
 801605a:	3708      	adds	r7, #8
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	3344      	adds	r3, #68	; 0x44
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	4798      	blx	r3
    }
 8016074:	bf00      	nop
 8016076:	3708      	adds	r7, #8
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}

0801607c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 801607c:	b480      	push	{r7}
 801607e:	b083      	sub	sp, #12
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016084:	2300      	movs	r3, #0
    }
 8016086:	4618      	mov	r0, r3
 8016088:	370c      	adds	r7, #12
 801608a:	46bd      	mov	sp, r7
 801608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016090:	4770      	bx	lr
	...

08016094 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8016094:	b480      	push	{r7}
 8016096:	b083      	sub	sp, #12
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
    {
 801609c:	4a04      	ldr	r2, [pc, #16]	; (80160b0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	601a      	str	r2, [r3, #0]
    }
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	4618      	mov	r0, r3
 80160a6:	370c      	adds	r7, #12
 80160a8:	46bd      	mov	sp, r7
 80160aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ae:	4770      	bx	lr
 80160b0:	0802b424 	.word	0x0802b424

080160b4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b082      	sub	sp, #8
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
    }
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f7ff ffe9 	bl	8016094 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80160c2:	210c      	movs	r1, #12
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f011 faf9 	bl	80276bc <_ZdlPvj>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	4618      	mov	r0, r3
 80160ce:	3708      	adds	r7, #8
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}

080160d4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80160d4:	b480      	push	{r7}
 80160d6:	b083      	sub	sp, #12
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
 80160dc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80160de:	4a09      	ldr	r2, [pc, #36]	; (8016104 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	601a      	str	r2, [r3, #0]
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	683a      	ldr	r2, [r7, #0]
 80160e8:	605a      	str	r2, [r3, #4]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2200      	movs	r2, #0
 80160ee:	721a      	strb	r2, [r3, #8]
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	2200      	movs	r2, #0
 80160f4:	725a      	strb	r2, [r3, #9]
    {
    }
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	4618      	mov	r0, r3
 80160fa:	370c      	adds	r7, #12
 80160fc:	46bd      	mov	sp, r7
 80160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016102:	4770      	bx	lr
 8016104:	0802b424 	.word	0x0802b424

08016108 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8016108:	b580      	push	{r7, lr}
 801610a:	b082      	sub	sp, #8
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	685a      	ldr	r2, [r3, #4]
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	3314      	adds	r3, #20
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	4610      	mov	r0, r2
 8016120:	4798      	blx	r3
    }
 8016122:	bf00      	nop
 8016124:	3708      	adds	r7, #8
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}

0801612a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801612a:	b580      	push	{r7, lr}
 801612c:	b082      	sub	sp, #8
 801612e:	af00      	add	r7, sp, #0
 8016130:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8016132:	687a      	ldr	r2, [r7, #4]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	3328      	adds	r3, #40	; 0x28
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	4610      	mov	r0, r2
 801613e:	4798      	blx	r3
    }
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8016148:	b480      	push	{r7}
 801614a:	b085      	sub	sp, #20
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	60b9      	str	r1, [r7, #8]
 8016152:	607a      	str	r2, [r7, #4]
 8016154:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	430a      	orrs	r2, r1
 8016168:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016170:	f023 0107 	bic.w	r1, r3, #7
 8016174:	687a      	ldr	r2, [r7, #4]
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	430a      	orrs	r2, r1
 801617c:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016184:	4b06      	ldr	r3, [pc, #24]	; (80161a0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8016186:	4013      	ands	r3, r2
 8016188:	6839      	ldr	r1, [r7, #0]
 801618a:	68fa      	ldr	r2, [r7, #12]
 801618c:	6812      	ldr	r2, [r2, #0]
 801618e:	430b      	orrs	r3, r1
 8016190:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016192:	2300      	movs	r3, #0
}
 8016194:	4618      	mov	r0, r3
 8016196:	3714      	adds	r7, #20
 8016198:	46bd      	mov	sp, r7
 801619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619e:	4770      	bx	lr
 80161a0:	ffffc000 	.word	0xffffc000

080161a4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b082      	sub	sp, #8
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80161ac:	f7f9 fb06 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 80161b0:	4603      	mov	r3, r0
 80161b2:	4618      	mov	r0, r3
 80161b4:	f7ff ffa8 	bl	8016108 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80161b8:	bf00      	nop
 80161ba:	3708      	adds	r7, #8
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b082      	sub	sp, #8
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
    assert(0);
 80161c8:	4b02      	ldr	r3, [pc, #8]	; (80161d4 <DMA2D_XferErrorCallback+0x14>)
 80161ca:	4a03      	ldr	r2, [pc, #12]	; (80161d8 <DMA2D_XferErrorCallback+0x18>)
 80161cc:	213e      	movs	r1, #62	; 0x3e
 80161ce:	4803      	ldr	r0, [pc, #12]	; (80161dc <DMA2D_XferErrorCallback+0x1c>)
 80161d0:	f011 faa0 	bl	8027714 <__assert_func>
 80161d4:	08028fcc 	.word	0x08028fcc
 80161d8:	0802a490 	.word	0x0802a490
 80161dc:	08028fd0 	.word	0x08028fd0

080161e0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b082      	sub	sp, #8
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	3318      	adds	r3, #24
 80161ec:	4618      	mov	r0, r3
 80161ee:	f7ff fefd 	bl	8015fec <_ZN8touchgfx9colortypeC1Ev>
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	4618      	mov	r0, r3
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}

080161fc <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80161fc:	b5b0      	push	{r4, r5, r7, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016204:	687a      	ldr	r2, [r7, #4]
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	330c      	adds	r3, #12
 801620a:	4619      	mov	r1, r3
 801620c:	4610      	mov	r0, r2
 801620e:	f7ff ff61 	bl	80160d4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016212:	4a0e      	ldr	r2, [pc, #56]	; (801624c <_ZN10STM32F7DMAC1Ev+0x50>)
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	601a      	str	r2, [r3, #0]
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f103 000c 	add.w	r0, r3, #12
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	3320      	adds	r3, #32
 8016222:	2260      	movs	r2, #96	; 0x60
 8016224:	4619      	mov	r1, r3
 8016226:	f002 fd63 	bl	8018cf0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	3320      	adds	r3, #32
 801622e:	245f      	movs	r4, #95	; 0x5f
 8016230:	461d      	mov	r5, r3
 8016232:	2c00      	cmp	r4, #0
 8016234:	db05      	blt.n	8016242 <_ZN10STM32F7DMAC1Ev+0x46>
 8016236:	4628      	mov	r0, r5
 8016238:	f7ff ffd2 	bl	80161e0 <_ZN8touchgfx6BlitOpC1Ev>
 801623c:	3520      	adds	r5, #32
 801623e:	3c01      	subs	r4, #1
 8016240:	e7f7      	b.n	8016232 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	4618      	mov	r0, r3
 8016246:	3708      	adds	r7, #8
 8016248:	46bd      	mov	sp, r7
 801624a:	bdb0      	pop	{r4, r5, r7, pc}
 801624c:	0802a424 	.word	0x0802a424

08016250 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8016250:	b580      	push	{r7, lr}
 8016252:	b082      	sub	sp, #8
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	4a0b      	ldr	r2, [pc, #44]	; (8016288 <_ZN10STM32F7DMAD1Ev+0x38>)
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801625e:	480b      	ldr	r0, [pc, #44]	; (801628c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8016260:	f7ed fd1a 	bl	8003c98 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016264:	205a      	movs	r0, #90	; 0x5a
 8016266:	f7ff fe9d 	bl	8015fa4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	330c      	adds	r3, #12
 801626e:	4618      	mov	r0, r3
 8016270:	f000 faa4 	bl	80167bc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	4618      	mov	r0, r3
 8016278:	f7ff ff0c 	bl	8016094 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	4618      	mov	r0, r3
 8016280:	3708      	adds	r7, #8
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	0802a424 	.word	0x0802a424
 801628c:	2000bc70 	.word	0x2000bc70

08016290 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
}
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f7ff ffd9 	bl	8016250 <_ZN10STM32F7DMAD1Ev>
 801629e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f011 fa0a 	bl	80276bc <_ZdlPvj>
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	4618      	mov	r0, r3
 80162ac:	3708      	adds	r7, #8
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}
	...

080162b4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b082      	sub	sp, #8
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80162bc:	4b09      	ldr	r3, [pc, #36]	; (80162e4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80162be:	4a0a      	ldr	r2, [pc, #40]	; (80162e8 <_ZN10STM32F7DMA10initializeEv+0x34>)
 80162c0:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80162c2:	4808      	ldr	r0, [pc, #32]	; (80162e4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80162c4:	f7ed fc9e 	bl	8003c04 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80162c8:	4b06      	ldr	r3, [pc, #24]	; (80162e4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80162ca:	4a08      	ldr	r2, [pc, #32]	; (80162ec <_ZN10STM32F7DMA10initializeEv+0x38>)
 80162cc:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80162ce:	4b05      	ldr	r3, [pc, #20]	; (80162e4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80162d0:	4a07      	ldr	r2, [pc, #28]	; (80162f0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80162d2:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80162d4:	205a      	movs	r0, #90	; 0x5a
 80162d6:	f7ff fe45 	bl	8015f64 <__NVIC_EnableIRQ>
}
 80162da:	bf00      	nop
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	bf00      	nop
 80162e4:	2000bc70 	.word	0x2000bc70
 80162e8:	4002b000 	.word	0x4002b000
 80162ec:	080161a5 	.word	0x080161a5
 80162f0:	080161c1 	.word	0x080161c1

080162f4 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80162f4:	b480      	push	{r7}
 80162f6:	b083      	sub	sp, #12
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 80162fc:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8016300:	4618      	mov	r0, r3
 8016302:	370c      	adds	r7, #12
 8016304:	46bd      	mov	sp, r7
 8016306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630a:	4770      	bx	lr

0801630c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801630c:	b590      	push	{r4, r7, lr}
 801630e:	b08d      	sub	sp, #52	; 0x34
 8016310:	af02      	add	r7, sp, #8
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8016316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801631a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801631c:	2300      	movs	r3, #0
 801631e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016320:	683b      	ldr	r3, [r7, #0]
 8016322:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016324:	2b20      	cmp	r3, #32
 8016326:	d007      	beq.n	8016338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	2b40      	cmp	r3, #64	; 0x40
 801632e:	d003      	beq.n	8016338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b04      	cmp	r3, #4
 8016336:	d101      	bne.n	801633c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8016338:	2301      	movs	r3, #1
 801633a:	e000      	b.n	801633e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 801633c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801633e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8016344:	2b80      	cmp	r3, #128	; 0x80
 8016346:	d004      	beq.n	8016352 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016350:	d101      	bne.n	8016356 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016352:	2301      	movs	r3, #1
 8016354:	e000      	b.n	8016358 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8016356:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016358:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801635a:	f7f9 fa3b 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 801635e:	4602      	mov	r2, r0
 8016360:	6813      	ldr	r3, [r2, #0]
 8016362:	331c      	adds	r3, #28
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4610      	mov	r0, r2
 8016368:	4798      	blx	r3
 801636a:	4603      	mov	r3, r0
 801636c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	2b40      	cmp	r3, #64	; 0x40
 8016374:	d01d      	beq.n	80163b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016376:	2b40      	cmp	r3, #64	; 0x40
 8016378:	d804      	bhi.n	8016384 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801637a:	2b04      	cmp	r3, #4
 801637c:	d00e      	beq.n	801639c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801637e:	2b20      	cmp	r3, #32
 8016380:	d017      	beq.n	80163b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016382:	e019      	b.n	80163b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016384:	2b80      	cmp	r3, #128	; 0x80
 8016386:	d003      	beq.n	8016390 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8016388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801638c:	d003      	beq.n	8016396 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801638e:	e013      	b.n	80163b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016390:	230a      	movs	r3, #10
 8016392:	623b      	str	r3, [r7, #32]
        break;
 8016394:	e01a      	b.n	80163cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016396:	2309      	movs	r3, #9
 8016398:	623b      	str	r3, [r7, #32]
        break;
 801639a:	e017      	b.n	80163cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801639c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80163a0:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80163a2:	7f7b      	ldrb	r3, [r7, #29]
 80163a4:	2b10      	cmp	r3, #16
 80163a6:	d101      	bne.n	80163ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80163a8:	2302      	movs	r3, #2
 80163aa:	e000      	b.n	80163ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80163ac:	2301      	movs	r3, #1
 80163ae:	623b      	str	r3, [r7, #32]
        break;
 80163b0:	e00c      	b.n	80163cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80163b2:	2300      	movs	r3, #0
 80163b4:	623b      	str	r3, [r7, #32]
        break;
 80163b6:	e009      	b.n	80163cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80163b8:	2300      	movs	r3, #0
 80163ba:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80163bc:	7f7b      	ldrb	r3, [r7, #29]
 80163be:	2b10      	cmp	r3, #16
 80163c0:	d101      	bne.n	80163c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 80163c2:	2302      	movs	r3, #2
 80163c4:	e000      	b.n	80163c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 80163c6:	2301      	movs	r3, #1
 80163c8:	623b      	str	r3, [r7, #32]
        break;
 80163ca:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80163cc:	4a75      	ldr	r2, [pc, #468]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80163ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d0:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80163d2:	7f7b      	ldrb	r3, [r7, #29]
 80163d4:	2b10      	cmp	r3, #16
 80163d6:	d101      	bne.n	80163dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80163d8:	2302      	movs	r3, #2
 80163da:	e000      	b.n	80163de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80163dc:	2301      	movs	r3, #1
 80163de:	4a71      	ldr	r2, [pc, #452]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80163e0:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	8adb      	ldrh	r3, [r3, #22]
 80163e6:	461a      	mov	r2, r3
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	8a1b      	ldrh	r3, [r3, #16]
 80163ec:	1ad3      	subs	r3, r2, r3
 80163ee:	461a      	mov	r2, r3
 80163f0:	4b6c      	ldr	r3, [pc, #432]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80163f2:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80163f4:	7f7b      	ldrb	r3, [r7, #29]
 80163f6:	2b10      	cmp	r3, #16
 80163f8:	d101      	bne.n	80163fe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80163fa:	2202      	movs	r2, #2
 80163fc:	e000      	b.n	8016400 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80163fe:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	8adb      	ldrh	r3, [r3, #22]
 8016404:	4619      	mov	r1, r3
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	8a1b      	ldrh	r3, [r3, #16]
 801640a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801640c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801640e:	4865      	ldr	r0, [pc, #404]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016410:	f7ff fe9a 	bl	8016148 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016414:	4a63      	ldr	r2, [pc, #396]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016416:	6a3b      	ldr	r3, [r7, #32]
 8016418:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	8a9b      	ldrh	r3, [r3, #20]
 801641e:	461a      	mov	r2, r3
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	8a1b      	ldrh	r3, [r3, #16]
 8016424:	1ad3      	subs	r3, r2, r3
 8016426:	461a      	mov	r2, r3
 8016428:	4b5e      	ldr	r3, [pc, #376]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801642a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 801642c:	7ffb      	ldrb	r3, [r7, #31]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d103      	bne.n	801643a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8016432:	7fbb      	ldrb	r3, [r7, #30]
 8016434:	2b00      	cmp	r3, #0
 8016436:	f000 8081 	beq.w	801653c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	7f1b      	ldrb	r3, [r3, #28]
 801643e:	2bff      	cmp	r3, #255	; 0xff
 8016440:	d008      	beq.n	8016454 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8016442:	4b58      	ldr	r3, [pc, #352]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016444:	2202      	movs	r2, #2
 8016446:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	7f1b      	ldrb	r3, [r3, #28]
 801644c:	461a      	mov	r2, r3
 801644e:	4b55      	ldr	r3, [pc, #340]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016450:	635a      	str	r2, [r3, #52]	; 0x34
 8016452:	e002      	b.n	801645a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8016454:	4b53      	ldr	r3, [pc, #332]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016456:	2200      	movs	r2, #0
 8016458:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801645a:	7fbb      	ldrb	r3, [r7, #30]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d058      	beq.n	8016512 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8016460:	7f7b      	ldrb	r3, [r7, #29]
 8016462:	2b10      	cmp	r3, #16
 8016464:	d14a      	bne.n	80164fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	3318      	adds	r3, #24
 801646a:	4618      	mov	r0, r3
 801646c:	f7ff fdcc 	bl	8016008 <_ZNK8touchgfx9colortypecvmEv>
 8016470:	4603      	mov	r3, r0
 8016472:	0adb      	lsrs	r3, r3, #11
 8016474:	f003 021f 	and.w	r2, r3, #31
 8016478:	4613      	mov	r3, r2
 801647a:	021b      	lsls	r3, r3, #8
 801647c:	1a9a      	subs	r2, r3, r2
 801647e:	4b4a      	ldr	r3, [pc, #296]	; (80165a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016480:	fba3 1302 	umull	r1, r3, r3, r2
 8016484:	1ad2      	subs	r2, r2, r3
 8016486:	0852      	lsrs	r2, r2, #1
 8016488:	4413      	add	r3, r2
 801648a:	091b      	lsrs	r3, r3, #4
 801648c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	3318      	adds	r3, #24
 8016492:	4618      	mov	r0, r3
 8016494:	f7ff fdb8 	bl	8016008 <_ZNK8touchgfx9colortypecvmEv>
 8016498:	4603      	mov	r3, r0
 801649a:	095b      	lsrs	r3, r3, #5
 801649c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80164a0:	4613      	mov	r3, r2
 80164a2:	021b      	lsls	r3, r3, #8
 80164a4:	1a9a      	subs	r2, r3, r2
 80164a6:	4b41      	ldr	r3, [pc, #260]	; (80165ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80164a8:	fba3 1302 	umull	r1, r3, r3, r2
 80164ac:	1ad2      	subs	r2, r2, r3
 80164ae:	0852      	lsrs	r2, r2, #1
 80164b0:	4413      	add	r3, r2
 80164b2:	095b      	lsrs	r3, r3, #5
 80164b4:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	3318      	adds	r3, #24
 80164ba:	4618      	mov	r0, r3
 80164bc:	f7ff fda4 	bl	8016008 <_ZNK8touchgfx9colortypecvmEv>
 80164c0:	4603      	mov	r3, r0
 80164c2:	f003 021f 	and.w	r2, r3, #31
 80164c6:	4613      	mov	r3, r2
 80164c8:	021b      	lsls	r3, r3, #8
 80164ca:	1a9a      	subs	r2, r3, r2
 80164cc:	4b36      	ldr	r3, [pc, #216]	; (80165a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80164ce:	fba3 1302 	umull	r1, r3, r3, r2
 80164d2:	1ad2      	subs	r2, r2, r3
 80164d4:	0852      	lsrs	r2, r2, #1
 80164d6:	4413      	add	r3, r2
 80164d8:	091b      	lsrs	r3, r3, #4
 80164da:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	7f1b      	ldrb	r3, [r3, #28]
 80164e0:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	061a      	lsls	r2, r3, #24
 80164e6:	69bb      	ldr	r3, [r7, #24]
 80164e8:	041b      	lsls	r3, r3, #16
 80164ea:	431a      	orrs	r2, r3
 80164ec:	697b      	ldr	r3, [r7, #20]
 80164ee:	021b      	lsls	r3, r3, #8
 80164f0:	431a      	orrs	r2, r3
 80164f2:	693b      	ldr	r3, [r7, #16]
 80164f4:	4313      	orrs	r3, r2
 80164f6:	4a2b      	ldr	r2, [pc, #172]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80164f8:	6353      	str	r3, [r2, #52]	; 0x34
 80164fa:	e00a      	b.n	8016512 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	3318      	adds	r3, #24
 8016500:	60bb      	str	r3, [r7, #8]
        return color;
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	683a      	ldr	r2, [r7, #0]
 8016508:	7f12      	ldrb	r2, [r2, #28]
 801650a:	0612      	lsls	r2, r2, #24
 801650c:	4313      	orrs	r3, r2
 801650e:	4a25      	ldr	r2, [pc, #148]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016510:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	8adb      	ldrh	r3, [r3, #22]
 8016516:	461a      	mov	r2, r3
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	8a1b      	ldrh	r3, [r3, #16]
 801651c:	1ad3      	subs	r3, r2, r3
 801651e:	461a      	mov	r2, r3
 8016520:	4b20      	ldr	r3, [pc, #128]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016522:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016524:	7f7b      	ldrb	r3, [r7, #29]
 8016526:	2b10      	cmp	r3, #16
 8016528:	d101      	bne.n	801652e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 801652a:	2302      	movs	r3, #2
 801652c:	e000      	b.n	8016530 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 801652e:	2301      	movs	r3, #1
 8016530:	4a1c      	ldr	r2, [pc, #112]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016532:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016534:	2100      	movs	r1, #0
 8016536:	481b      	ldr	r0, [pc, #108]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016538:	f7ed fe2e 	bl	8004198 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801653c:	2101      	movs	r1, #1
 801653e:	4819      	ldr	r0, [pc, #100]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016540:	f7ed fe2a 	bl	8004198 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8016544:	7ffb      	ldrb	r3, [r7, #31]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d102      	bne.n	8016550 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801654a:	7fbb      	ldrb	r3, [r7, #30]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d015      	beq.n	801657c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8016550:	683b      	ldr	r3, [r7, #0]
 8016552:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016554:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801655a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016560:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016566:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801656c:	9301      	str	r3, [sp, #4]
 801656e:	9200      	str	r2, [sp, #0]
 8016570:	4623      	mov	r3, r4
 8016572:	4602      	mov	r2, r0
 8016574:	480b      	ldr	r0, [pc, #44]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016576:	f7ed fc32 	bl	8003dde <HAL_DMA2D_BlendingStart_IT>
 801657a:	e00f      	b.n	801659c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016580:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016586:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 801658c:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 801658e:	683b      	ldr	r3, [r7, #0]
 8016590:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016592:	9300      	str	r3, [sp, #0]
 8016594:	4603      	mov	r3, r0
 8016596:	4803      	ldr	r0, [pc, #12]	; (80165a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016598:	f7ed fbee 	bl	8003d78 <HAL_DMA2D_Start_IT>
    }
}
 801659c:	bf00      	nop
 801659e:	372c      	adds	r7, #44	; 0x2c
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd90      	pop	{r4, r7, pc}
 80165a4:	2000bc70 	.word	0x2000bc70
 80165a8:	08421085 	.word	0x08421085
 80165ac:	04104105 	.word	0x04104105

080165b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80165b0:	b590      	push	{r4, r7, lr}
 80165b2:	b08f      	sub	sp, #60	; 0x3c
 80165b4:	af02      	add	r7, sp, #8
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80165ba:	f7f9 f90b 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 80165be:	4602      	mov	r2, r0
 80165c0:	6813      	ldr	r3, [r2, #0]
 80165c2:	331c      	adds	r3, #28
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	4610      	mov	r0, r2
 80165c8:	4798      	blx	r3
 80165ca:	4603      	mov	r3, r0
 80165cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80165d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165d4:	2b10      	cmp	r3, #16
 80165d6:	d101      	bne.n	80165dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 80165d8:	2302      	movs	r3, #2
 80165da:	e000      	b.n	80165de <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 80165dc:	2301      	movs	r3, #1
 80165de:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 80165e0:	2300      	movs	r3, #0
 80165e2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 80165e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165e8:	2b10      	cmp	r3, #16
 80165ea:	d149      	bne.n	8016680 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80165ec:	683b      	ldr	r3, [r7, #0]
 80165ee:	3318      	adds	r3, #24
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7ff fd09 	bl	8016008 <_ZNK8touchgfx9colortypecvmEv>
 80165f6:	4603      	mov	r3, r0
 80165f8:	0adb      	lsrs	r3, r3, #11
 80165fa:	f003 021f 	and.w	r2, r3, #31
 80165fe:	4613      	mov	r3, r2
 8016600:	021b      	lsls	r3, r3, #8
 8016602:	1a9a      	subs	r2, r3, r2
 8016604:	4b6a      	ldr	r3, [pc, #424]	; (80167b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8016606:	fba3 1302 	umull	r1, r3, r3, r2
 801660a:	1ad2      	subs	r2, r2, r3
 801660c:	0852      	lsrs	r2, r2, #1
 801660e:	4413      	add	r3, r2
 8016610:	091b      	lsrs	r3, r3, #4
 8016612:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	3318      	adds	r3, #24
 8016618:	4618      	mov	r0, r3
 801661a:	f7ff fcf5 	bl	8016008 <_ZNK8touchgfx9colortypecvmEv>
 801661e:	4603      	mov	r3, r0
 8016620:	095b      	lsrs	r3, r3, #5
 8016622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016626:	4613      	mov	r3, r2
 8016628:	021b      	lsls	r3, r3, #8
 801662a:	1a9a      	subs	r2, r3, r2
 801662c:	4b61      	ldr	r3, [pc, #388]	; (80167b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 801662e:	fba3 1302 	umull	r1, r3, r3, r2
 8016632:	1ad2      	subs	r2, r2, r3
 8016634:	0852      	lsrs	r2, r2, #1
 8016636:	4413      	add	r3, r2
 8016638:	095b      	lsrs	r3, r3, #5
 801663a:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801663c:	683b      	ldr	r3, [r7, #0]
 801663e:	3318      	adds	r3, #24
 8016640:	4618      	mov	r0, r3
 8016642:	f7ff fce1 	bl	8016008 <_ZNK8touchgfx9colortypecvmEv>
 8016646:	4603      	mov	r3, r0
 8016648:	f003 021f 	and.w	r2, r3, #31
 801664c:	4613      	mov	r3, r2
 801664e:	021b      	lsls	r3, r3, #8
 8016650:	1a9a      	subs	r2, r3, r2
 8016652:	4b57      	ldr	r3, [pc, #348]	; (80167b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8016654:	fba3 1302 	umull	r1, r3, r3, r2
 8016658:	1ad2      	subs	r2, r2, r3
 801665a:	0852      	lsrs	r2, r2, #1
 801665c:	4413      	add	r3, r2
 801665e:	091b      	lsrs	r3, r3, #4
 8016660:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	7f1b      	ldrb	r3, [r3, #28]
 8016666:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	061a      	lsls	r2, r3, #24
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	041b      	lsls	r3, r3, #16
 8016670:	431a      	orrs	r2, r3
 8016672:	69bb      	ldr	r3, [r7, #24]
 8016674:	021b      	lsls	r3, r3, #8
 8016676:	4313      	orrs	r3, r2
 8016678:	697a      	ldr	r2, [r7, #20]
 801667a:	4313      	orrs	r3, r2
 801667c:	62bb      	str	r3, [r7, #40]	; 0x28
 801667e:	e00a      	b.n	8016696 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	7f1b      	ldrb	r3, [r3, #28]
 8016684:	061b      	lsls	r3, r3, #24
 8016686:	461a      	mov	r2, r3
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	3318      	adds	r3, #24
 801668c:	60fb      	str	r3, [r7, #12]
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	4313      	orrs	r3, r2
 8016694:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	2b08      	cmp	r3, #8
 801669c:	d103      	bne.n	80166a6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801669e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80166a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80166a4:	e003      	b.n	80166ae <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80166a6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80166aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80166ac:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80166ae:	4a42      	ldr	r2, [pc, #264]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80166b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b2:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80166b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166b8:	2b10      	cmp	r3, #16
 80166ba:	d101      	bne.n	80166c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 80166bc:	2302      	movs	r3, #2
 80166be:	e000      	b.n	80166c2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 80166c0:	2301      	movs	r3, #1
 80166c2:	4a3d      	ldr	r2, [pc, #244]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80166c4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	8adb      	ldrh	r3, [r3, #22]
 80166ca:	461a      	mov	r2, r3
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	8a1b      	ldrh	r3, [r3, #16]
 80166d0:	1ad3      	subs	r3, r2, r3
 80166d2:	461a      	mov	r2, r3
 80166d4:	4b38      	ldr	r3, [pc, #224]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80166d6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80166d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166dc:	2b10      	cmp	r3, #16
 80166de:	d101      	bne.n	80166e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 80166e0:	2202      	movs	r2, #2
 80166e2:	e000      	b.n	80166e6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 80166e4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	8adb      	ldrh	r3, [r3, #22]
 80166ea:	4619      	mov	r1, r3
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	8a1b      	ldrh	r3, [r3, #16]
 80166f0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80166f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80166f4:	4830      	ldr	r0, [pc, #192]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80166f6:	f7ff fd27 	bl	8016148 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80166fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016700:	d11f      	bne.n	8016742 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8016702:	4b2d      	ldr	r3, [pc, #180]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016704:	2201      	movs	r2, #1
 8016706:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8016708:	4a2b      	ldr	r2, [pc, #172]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801670c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801670e:	4b2a      	ldr	r3, [pc, #168]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016710:	2209      	movs	r2, #9
 8016712:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	8adb      	ldrh	r3, [r3, #22]
 8016718:	461a      	mov	r2, r3
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	8a1b      	ldrh	r3, [r3, #16]
 801671e:	1ad3      	subs	r3, r2, r3
 8016720:	461a      	mov	r2, r3
 8016722:	4b25      	ldr	r3, [pc, #148]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016724:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801672a:	2b10      	cmp	r3, #16
 801672c:	d101      	bne.n	8016732 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 801672e:	2302      	movs	r3, #2
 8016730:	e000      	b.n	8016734 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8016732:	2301      	movs	r3, #1
 8016734:	4a20      	ldr	r2, [pc, #128]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016736:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016738:	2100      	movs	r1, #0
 801673a:	481f      	ldr	r0, [pc, #124]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801673c:	f7ed fd2c 	bl	8004198 <HAL_DMA2D_ConfigLayer>
 8016740:	e005      	b.n	801674e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016742:	4a1d      	ldr	r2, [pc, #116]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016744:	6a3b      	ldr	r3, [r7, #32]
 8016746:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8016748:	4b1b      	ldr	r3, [pc, #108]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801674a:	2200      	movs	r2, #0
 801674c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801674e:	2101      	movs	r1, #1
 8016750:	4819      	ldr	r0, [pc, #100]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016752:	f7ed fd21 	bl	8004198 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8016756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801675c:	d115      	bne.n	801678a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016762:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016768:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801676e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016774:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	9200      	str	r2, [sp, #0]
 801677e:	4623      	mov	r3, r4
 8016780:	4602      	mov	r2, r0
 8016782:	480d      	ldr	r0, [pc, #52]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016784:	f7ed fb2b 	bl	8003dde <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8016788:	e00d      	b.n	80167a6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	68db      	ldr	r3, [r3, #12]
 801678e:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016794:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801679a:	9300      	str	r3, [sp, #0]
 801679c:	460b      	mov	r3, r1
 801679e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80167a0:	4805      	ldr	r0, [pc, #20]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80167a2:	f7ed fae9 	bl	8003d78 <HAL_DMA2D_Start_IT>
}
 80167a6:	bf00      	nop
 80167a8:	3734      	adds	r7, #52	; 0x34
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd90      	pop	{r4, r7, pc}
 80167ae:	bf00      	nop
 80167b0:	08421085 	.word	0x08421085
 80167b4:	04104105 	.word	0x04104105
 80167b8:	2000bc70 	.word	0x2000bc70

080167bc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	4a05      	ldr	r2, [pc, #20]	; (80167dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	601a      	str	r2, [r3, #0]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7ff fc27 	bl	8016020 <_ZN8touchgfx9DMA_QueueD1Ev>
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	4618      	mov	r0, r3
 80167d6:	3708      	adds	r7, #8
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	0802b474 	.word	0x0802b474

080167e0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7ff ffe7 	bl	80167bc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80167ee:	2114      	movs	r1, #20
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f010 ff63 	bl	80276bc <_ZdlPvj>
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	4618      	mov	r0, r3
 80167fa:	3708      	adds	r7, #8
 80167fc:	46bd      	mov	sp, r7
 80167fe:	bd80      	pop	{r7, pc}

08016800 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8016800:	b480      	push	{r7}
 8016802:	b083      	sub	sp, #12
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
        texts = t;
 8016808:	4a04      	ldr	r2, [pc, #16]	; (801681c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	6013      	str	r3, [r2, #0]
    }
 801680e:	bf00      	nop
 8016810:	370c      	adds	r7, #12
 8016812:	46bd      	mov	sp, r7
 8016814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop
 801681c:	2000b4b8 	.word	0x2000b4b8

08016820 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016820:	b480      	push	{r7}
 8016822:	b085      	sub	sp, #20
 8016824:	af00      	add	r7, sp, #0
 8016826:	60f8      	str	r0, [r7, #12]
 8016828:	60b9      	str	r1, [r7, #8]
 801682a:	607a      	str	r2, [r7, #4]
 801682c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801682e:	4a0b      	ldr	r2, [pc, #44]	; (801685c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	601a      	str	r2, [r3, #0]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	68ba      	ldr	r2, [r7, #8]
 8016838:	605a      	str	r2, [r3, #4]
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	687a      	ldr	r2, [r7, #4]
 801683e:	609a      	str	r2, [r3, #8]
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	683a      	ldr	r2, [r7, #0]
 8016844:	60da      	str	r2, [r3, #12]
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	69ba      	ldr	r2, [r7, #24]
 801684a:	611a      	str	r2, [r3, #16]
    {
    }
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	4618      	mov	r0, r3
 8016850:	3714      	adds	r7, #20
 8016852:	46bd      	mov	sp, r7
 8016854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016858:	4770      	bx	lr
 801685a:	bf00      	nop
 801685c:	0802a590 	.word	0x0802a590

08016860 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8016860:	b480      	push	{r7}
 8016862:	b083      	sub	sp, #12
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
    {
 8016868:	4a04      	ldr	r2, [pc, #16]	; (801687c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	601a      	str	r2, [r3, #0]
    }
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	4618      	mov	r0, r3
 8016872:	370c      	adds	r7, #12
 8016874:	46bd      	mov	sp, r7
 8016876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687a:	4770      	bx	lr
 801687c:	0802a590 	.word	0x0802a590

08016880 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8016880:	b580      	push	{r7, lr}
 8016882:	b082      	sub	sp, #8
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
    }
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	f7ff ffe9 	bl	8016860 <_ZN8touchgfx7MVPHeapD1Ev>
 801688e:	2114      	movs	r1, #20
 8016890:	6878      	ldr	r0, [r7, #4]
 8016892:	f010 ff13 	bl	80276bc <_ZdlPvj>
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	4618      	mov	r0, r3
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}

080168a0 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80168a0:	b480      	push	{r7}
 80168a2:	b083      	sub	sp, #12
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
    {
 80168a8:	4a04      	ldr	r2, [pc, #16]	; (80168bc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	601a      	str	r2, [r3, #0]
    }
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	4618      	mov	r0, r3
 80168b2:	370c      	adds	r7, #12
 80168b4:	46bd      	mov	sp, r7
 80168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ba:	4770      	bx	lr
 80168bc:	0802c000 	.word	0x0802c000

080168c0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
    }
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f7ff ffe9 	bl	80168a0 <_ZN8touchgfx3LCDD1Ev>
 80168ce:	2108      	movs	r1, #8
 80168d0:	6878      	ldr	r0, [r7, #4]
 80168d2:	f010 fef3 	bl	80276bc <_ZdlPvj>
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	4618      	mov	r0, r3
 80168da:	3708      	adds	r7, #8
 80168dc:	46bd      	mov	sp, r7
 80168de:	bd80      	pop	{r7, pc}

080168e0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80168e0:	b480      	push	{r7}
 80168e2:	b083      	sub	sp, #12
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2200      	movs	r2, #0
 80168ec:	801a      	strh	r2, [r3, #0]
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2200      	movs	r2, #0
 80168f2:	805a      	strh	r2, [r3, #2]
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2200      	movs	r2, #0
 80168f8:	809a      	strh	r2, [r3, #4]
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2200      	movs	r2, #0
 80168fe:	80da      	strh	r2, [r3, #6]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2200      	movs	r2, #0
 8016904:	811a      	strh	r2, [r3, #8]
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2200      	movs	r2, #0
 801690a:	815a      	strh	r2, [r3, #10]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2200      	movs	r2, #0
 8016910:	819a      	strh	r2, [r3, #12]
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2200      	movs	r2, #0
 8016916:	739a      	strb	r2, [r3, #14]
        {
        }
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	4618      	mov	r0, r3
 801691c:	370c      	adds	r7, #12
 801691e:	46bd      	mov	sp, r7
 8016920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016924:	4770      	bx	lr

08016926 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8016926:	b580      	push	{r7, lr}
 8016928:	b082      	sub	sp, #8
 801692a:	af00      	add	r7, sp, #0
 801692c:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	4618      	mov	r0, r3
 8016932:	f7ff ffd5 	bl	80168e0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	2200      	movs	r2, #0
 801693a:	611a      	str	r2, [r3, #16]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2200      	movs	r2, #0
 8016940:	829a      	strh	r2, [r3, #20]
    {
    }
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	4618      	mov	r0, r3
 8016946:	3708      	adds	r7, #8
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}

0801694c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 801694c:	b580      	push	{r7, lr}
 801694e:	b084      	sub	sp, #16
 8016950:	af00      	add	r7, sp, #0
 8016952:	60f8      	str	r0, [r7, #12]
 8016954:	60b9      	str	r1, [r7, #8]
 8016956:	607a      	str	r2, [r7, #4]
 8016958:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 801695a:	4a44      	ldr	r2, [pc, #272]	; (8016a6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	601a      	str	r2, [r3, #0]
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	68ba      	ldr	r2, [r7, #8]
 8016964:	605a      	str	r2, [r3, #4]
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	687a      	ldr	r2, [r7, #4]
 801696a:	609a      	str	r2, [r3, #8]
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	683a      	ldr	r2, [r7, #0]
 8016970:	60da      	str	r2, [r3, #12]
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2200      	movs	r2, #0
 8016976:	611a      	str	r2, [r3, #16]
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	2200      	movs	r2, #0
 801697c:	615a      	str	r2, [r3, #20]
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	2200      	movs	r2, #0
 8016982:	619a      	str	r2, [r3, #24]
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	331c      	adds	r3, #28
 8016988:	4618      	mov	r0, r3
 801698a:	f7ff ffcc 	bl	8016926 <_ZN8touchgfx8GesturesC1Ev>
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	2200      	movs	r2, #0
 8016992:	639a      	str	r2, [r3, #56]	; 0x38
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	2200      	movs	r2, #0
 8016998:	63da      	str	r2, [r3, #60]	; 0x3c
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	2200      	movs	r2, #0
 801699e:	641a      	str	r2, [r3, #64]	; 0x40
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	2200      	movs	r2, #0
 80169a4:	645a      	str	r2, [r3, #68]	; 0x44
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2200      	movs	r2, #0
 80169aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	2201      	movs	r2, #1
 80169b2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	2200      	movs	r2, #0
 80169ba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2200      	movs	r2, #0
 80169c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	3350      	adds	r3, #80	; 0x50
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7f8 fc33 	bl	800f234 <_ZN8touchgfx4RectC1Ev>
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	2201      	movs	r2, #1
 80169d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	2200      	movs	r2, #0
 80169da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	2200      	movs	r2, #0
 80169e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	2201      	movs	r2, #1
 80169ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2200      	movs	r2, #0
 80169f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	2200      	movs	r2, #0
 80169fa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	2200      	movs	r2, #0
 8016a02:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	2200      	movs	r2, #0
 8016a12:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	2200      	movs	r2, #0
 8016a1a:	671a      	str	r2, [r3, #112]	; 0x70
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8016a24:	4a12      	ldr	r2, [pc, #72]	; (8016a70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8016a2a:	4a12      	ldr	r2, [pc, #72]	; (8016a74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016a2c:	8b3b      	ldrh	r3, [r7, #24]
 8016a2e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8016a30:	4a11      	ldr	r2, [pc, #68]	; (8016a78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016a32:	8bbb      	ldrh	r3, [r7, #28]
 8016a34:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8016a36:	4b11      	ldr	r3, [pc, #68]	; (8016a7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8016a38:	2200      	movs	r2, #0
 8016a3a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016a3c:	4b0d      	ldr	r3, [pc, #52]	; (8016a74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016a3e:	881a      	ldrh	r2, [r3, #0]
 8016a40:	4b0f      	ldr	r3, [pc, #60]	; (8016a80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8016a42:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016a44:	4b0c      	ldr	r3, [pc, #48]	; (8016a78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016a46:	881a      	ldrh	r2, [r3, #0]
 8016a48:	4b0e      	ldr	r3, [pc, #56]	; (8016a84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8016a4a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016a4c:	8b3a      	ldrh	r2, [r7, #24]
 8016a4e:	8bbb      	ldrh	r3, [r7, #28]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d301      	bcc.n	8016a58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8016a54:	2200      	movs	r2, #0
 8016a56:	e000      	b.n	8016a5a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8016a58:	2201      	movs	r2, #1
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	4618      	mov	r0, r3
 8016a64:	3710      	adds	r7, #16
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	0802afe0 	.word	0x0802afe0
 8016a70:	2000b41c 	.word	0x2000b41c
 8016a74:	2000b410 	.word	0x2000b410
 8016a78:	2000b412 	.word	0x2000b412
 8016a7c:	2000b414 	.word	0x2000b414
 8016a80:	2000b416 	.word	0x2000b416
 8016a84:	2000b418 	.word	0x2000b418

08016a88 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8016a92:	683b      	ldr	r3, [r7, #0]
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7f9 f861 	bl	800fb5c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8016a9a:	bf00      	nop
 8016a9c:	3708      	adds	r7, #8
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
	...

08016aa4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b086      	sub	sp, #24
 8016aa8:	af02      	add	r7, sp, #8
 8016aaa:	60f8      	str	r0, [r7, #12]
 8016aac:	60b9      	str	r1, [r7, #8]
 8016aae:	607a      	str	r2, [r7, #4]
 8016ab0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016ab2:	68f8      	ldr	r0, [r7, #12]
 8016ab4:	69bb      	ldr	r3, [r7, #24]
 8016ab6:	9300      	str	r3, [sp, #0]
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	687a      	ldr	r2, [r7, #4]
 8016abc:	68b9      	ldr	r1, [r7, #8]
 8016abe:	f7ff feaf 	bl	8016820 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8016ac2:	4a04      	ldr	r2, [pc, #16]	; (8016ad4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	601a      	str	r2, [r3, #0]
    {

    }
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	4618      	mov	r0, r3
 8016acc:	3710      	adds	r7, #16
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}
 8016ad2:	bf00      	nop
 8016ad4:	0802a57c 	.word	0x0802a57c

08016ad8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	4801      	ldr	r0, [pc, #4]	; (8016ae4 <__tcf_0+0xc>)
 8016ade:	f000 f953 	bl	8016d88 <_ZN12FrontendHeapD1Ev>
 8016ae2:	bd80      	pop	{r7, pc}
 8016ae4:	200085dc 	.word	0x200085dc

08016ae8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8016aec:	4b08      	ldr	r3, [pc, #32]	; (8016b10 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	f003 0301 	and.w	r3, r3, #1
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d108      	bne.n	8016b0a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8016af8:	4806      	ldr	r0, [pc, #24]	; (8016b14 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8016afa:	f000 f867 	bl	8016bcc <_ZN12FrontendHeapC1Ev>
 8016afe:	4b04      	ldr	r3, [pc, #16]	; (8016b10 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8016b00:	2201      	movs	r2, #1
 8016b02:	601a      	str	r2, [r3, #0]
 8016b04:	4804      	ldr	r0, [pc, #16]	; (8016b18 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8016b06:	f010 fe23 	bl	8027750 <atexit>
        return instance;
 8016b0a:	4b02      	ldr	r3, [pc, #8]	; (8016b14 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	bd80      	pop	{r7, pc}
 8016b10:	2000a710 	.word	0x2000a710
 8016b14:	200085dc 	.word	0x200085dc
 8016b18:	08016ad9 	.word	0x08016ad9

08016b1c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b082      	sub	sp, #8
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	4a05      	ldr	r2, [pc, #20]	; (8016b3c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	601a      	str	r2, [r3, #0]
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7ff fe97 	bl	8016860 <_ZN8touchgfx7MVPHeapD1Ev>
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	4618      	mov	r0, r3
 8016b36:	3708      	adds	r7, #8
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}
 8016b3c:	0802a57c 	.word	0x0802a57c

08016b40 <_ZN16FrontendHeapBaseD0Ev>:
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b082      	sub	sp, #8
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	6878      	ldr	r0, [r7, #4]
 8016b4a:	f7ff ffe7 	bl	8016b1c <_ZN16FrontendHeapBaseD1Ev>
 8016b4e:	2114      	movs	r1, #20
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f010 fdb3 	bl	80276bc <_ZdlPvj>
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f000 fd74 	bl	8017658 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016b70:	4a03      	ldr	r2, [pc, #12]	; (8016b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	601a      	str	r2, [r3, #0]
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3708      	adds	r7, #8
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}
 8016b80:	0802a548 	.word	0x0802a548

08016b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b082      	sub	sp, #8
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f000 fd62 	bl	8017658 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016b94:	4a03      	ldr	r2, [pc, #12]	; (8016ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	601a      	str	r2, [r3, #0]
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}
 8016ba4:	0802a514 	.word	0x0802a514

08016ba8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b082      	sub	sp, #8
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f000 fd50 	bl	8017658 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016bb8:	4a03      	ldr	r2, [pc, #12]	; (8016bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	601a      	str	r2, [r3, #0]
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	3708      	adds	r7, #8
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bd80      	pop	{r7, pc}
 8016bc8:	0802a4e0 	.word	0x0802a4e0

08016bcc <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016bcc:	b5b0      	push	{r4, r5, r7, lr}
 8016bce:	b084      	sub	sp, #16
 8016bd0:	af02      	add	r7, sp, #8
 8016bd2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f103 0414 	add.w	r4, r3, #20
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f641 727c 	movw	r2, #8060	; 0x1f7c
 8016be8:	441a      	add	r2, r3
 8016bea:	6879      	ldr	r1, [r7, #4]
 8016bec:	f641 73dc 	movw	r3, #8156	; 0x1fdc
 8016bf0:	440b      	add	r3, r1
 8016bf2:	9300      	str	r3, [sp, #0]
 8016bf4:	4613      	mov	r3, r2
 8016bf6:	462a      	mov	r2, r5
 8016bf8:	4621      	mov	r1, r4
 8016bfa:	f7ff ff53 	bl	8016aa4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8016bfe:	4a1a      	ldr	r2, [pc, #104]	; (8016c68 <_ZN12FrontendHeapC1Ev+0x9c>)
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	601a      	str	r2, [r3, #0]
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	3314      	adds	r3, #20
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7ff ffa9 	bl	8016b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	332c      	adds	r3, #44	; 0x2c
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7ff ffb6 	bl	8016b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016c18:	687a      	ldr	r2, [r7, #4]
 8016c1a:	f641 737c 	movw	r3, #8060	; 0x1f7c
 8016c1e:	4413      	add	r3, r2
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7ff ffc1 	bl	8016ba8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8016c26:	687a      	ldr	r2, [r7, #4]
 8016c28:	f641 73d8 	movw	r3, #8152	; 0x1fd8
 8016c2c:	4413      	add	r3, r2
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7fe f822 	bl	8014c78 <_ZN5ModelC1Ev>
 8016c34:	687a      	ldr	r2, [r7, #4]
 8016c36:	f641 73dc 	movw	r3, #8156	; 0x1fdc
 8016c3a:	4413      	add	r3, r2
 8016c3c:	687a      	ldr	r2, [r7, #4]
 8016c3e:	f641 71d8 	movw	r1, #8152	; 0x1fd8
 8016c42:	4411      	add	r1, r2
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7fe f800 	bl	8014c4c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	687a      	ldr	r2, [r7, #4]
 8016c50:	f641 73dc 	movw	r3, #8156	; 0x1fdc
 8016c54:	4413      	add	r3, r2
 8016c56:	4619      	mov	r1, r3
 8016c58:	f7ff ff16 	bl	8016a88 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3708      	adds	r7, #8
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bdb0      	pop	{r4, r5, r7, pc}
 8016c66:	bf00      	nop
 8016c68:	0802a4cc 	.word	0x0802a4cc

08016c6c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b086      	sub	sp, #24
 8016c70:	af02      	add	r7, sp, #8
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	607a      	str	r2, [r7, #4]
 8016c78:	603b      	str	r3, [r7, #0]
 8016c7a:	68f8      	ldr	r0, [r7, #12]
 8016c7c:	8bbb      	ldrh	r3, [r7, #28]
 8016c7e:	9301      	str	r3, [sp, #4]
 8016c80:	8b3b      	ldrh	r3, [r7, #24]
 8016c82:	9300      	str	r3, [sp, #0]
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	687a      	ldr	r2, [r7, #4]
 8016c88:	68b9      	ldr	r1, [r7, #8]
 8016c8a:	f7ff fe5f 	bl	801694c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8016c8e:	4a04      	ldr	r2, [pc, #16]	; (8016ca0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	601a      	str	r2, [r3, #0]
    }
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	4618      	mov	r0, r3
 8016c98:	3710      	adds	r7, #16
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}
 8016c9e:	bf00      	nop
 8016ca0:	0802a5a0 	.word	0x0802a5a0

08016ca4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b086      	sub	sp, #24
 8016ca8:	af02      	add	r7, sp, #8
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	60b9      	str	r1, [r7, #8]
 8016cae:	607a      	str	r2, [r7, #4]
 8016cb0:	603b      	str	r3, [r7, #0]
 8016cb2:	68f8      	ldr	r0, [r7, #12]
 8016cb4:	8bbb      	ldrh	r3, [r7, #28]
 8016cb6:	9301      	str	r3, [sp, #4]
 8016cb8:	8b3b      	ldrh	r3, [r7, #24]
 8016cba:	9300      	str	r3, [sp, #0]
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	687a      	ldr	r2, [r7, #4]
 8016cc0:	68b9      	ldr	r1, [r7, #8]
 8016cc2:	f7ff ffd3 	bl	8016c6c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8016cc6:	4a04      	ldr	r2, [pc, #16]	; (8016cd8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	601a      	str	r2, [r3, #0]
    }
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	3710      	adds	r7, #16
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bd80      	pop	{r7, pc}
 8016cd6:	bf00      	nop
 8016cd8:	0802a28c 	.word	0x0802a28c

08016cdc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8016cdc:	b480      	push	{r7}
 8016cde:	b083      	sub	sp, #12
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
 8016ce4:	4a04      	ldr	r2, [pc, #16]	; (8016cf8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	601a      	str	r2, [r3, #0]
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	4618      	mov	r0, r3
 8016cee:	370c      	adds	r7, #12
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr
 8016cf8:	0802a274 	.word	0x0802a274

08016cfc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b082      	sub	sp, #8
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7ff ffe8 	bl	8016cdc <_ZN8touchgfx15TouchControllerC1Ev>
 8016d0c:	4a03      	ldr	r2, [pc, #12]	; (8016d1c <_ZN20STM32TouchControllerC1Ev+0x20>)
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	601a      	str	r2, [r3, #0]
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	4618      	mov	r0, r3
 8016d16:	3708      	adds	r7, #8
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}
 8016d1c:	0802a25c 	.word	0x0802a25c

08016d20 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8016d20:	b590      	push	{r4, r7, lr}
 8016d22:	b085      	sub	sp, #20
 8016d24:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8016d26:	f7fd fd6d 	bl	8014804 <_ZN14BitmapDatabase11getInstanceEv>
 8016d2a:	4604      	mov	r4, r0
 8016d2c:	f7fd fd74 	bl	8014818 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8016d30:	4603      	mov	r3, r0
 8016d32:	4619      	mov	r1, r3
 8016d34:	2300      	movs	r3, #0
 8016d36:	9300      	str	r3, [sp, #0]
 8016d38:	2300      	movs	r3, #0
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f006 fe87 	bl	801da50 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8016d42:	4809      	ldr	r0, [pc, #36]	; (8016d68 <touchgfx_init+0x48>)
 8016d44:	f7ff fd5c 	bl	8016800 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8016d48:	2000      	movs	r0, #0
 8016d4a:	f7fd fe9d 	bl	8014a88 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8016d4e:	4807      	ldr	r0, [pc, #28]	; (8016d6c <touchgfx_init+0x4c>)
 8016d50:	f006 fdc8 	bl	801d8e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8016d54:	f7ff fec8 	bl	8016ae8 <_ZN12FrontendHeap11getInstanceEv>
 8016d58:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8016d5a:	4805      	ldr	r0, [pc, #20]	; (8016d70 <touchgfx_init+0x50>)
 8016d5c:	f7fe ffd2 	bl	8015d04 <_ZN11TouchGFXHAL10initializeEv>
}
 8016d60:	bf00      	nop
 8016d62:	370c      	adds	r7, #12
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd90      	pop	{r4, r7, pc}
 8016d68:	2000b390 	.word	0x2000b390
 8016d6c:	2000003c 	.word	0x2000003c
 8016d70:	2000b394 	.word	0x2000b394

08016d74 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8016d78:	4802      	ldr	r0, [pc, #8]	; (8016d84 <touchgfx_taskEntry+0x10>)
 8016d7a:	f001 f946 	bl	801800a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8016d7e:	bf00      	nop
 8016d80:	bd80      	pop	{r7, pc}
 8016d82:	bf00      	nop
 8016d84:	2000b394 	.word	0x2000b394

08016d88 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b082      	sub	sp, #8
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	4a11      	ldr	r2, [pc, #68]	; (8016dd8 <_ZN12FrontendHeapD1Ev+0x50>)
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	601a      	str	r2, [r3, #0]
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	f641 73dc 	movw	r3, #8156	; 0x1fdc
 8016d9c:	4413      	add	r3, r2
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f7fd ff1e 	bl	8014be0 <_ZN19FrontendApplicationD1Ev>
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	f641 737c 	movw	r3, #8060	; 0x1f7c
 8016daa:	4413      	add	r3, r2
 8016dac:	4618      	mov	r0, r3
 8016dae:	f000 f827 	bl	8016e00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	332c      	adds	r3, #44	; 0x2c
 8016db6:	4618      	mov	r0, r3
 8016db8:	f000 f844 	bl	8016e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	3314      	adds	r3, #20
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f000 f863 	bl	8016e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7ff fea7 	bl	8016b1c <_ZN16FrontendHeapBaseD1Ev>
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	3708      	adds	r7, #8
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bd80      	pop	{r7, pc}
 8016dd8:	0802a4cc 	.word	0x0802a4cc

08016ddc <_ZN12FrontendHeapD0Ev>:
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b082      	sub	sp, #8
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f7ff ffcf 	bl	8016d88 <_ZN12FrontendHeapD1Ev>
 8016dea:	f242 1134 	movw	r1, #8500	; 0x2134
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f010 fc64 	bl	80276bc <_ZdlPvj>
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	4618      	mov	r0, r3
 8016df8:	3708      	adds	r7, #8
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
	...

08016e00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b082      	sub	sp, #8
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	4a05      	ldr	r2, [pc, #20]	; (8016e20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	601a      	str	r2, [r3, #0]
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	4618      	mov	r0, r3
 8016e12:	f000 fc1f 	bl	8017654 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	4618      	mov	r0, r3
 8016e1a:	3708      	adds	r7, #8
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	bd80      	pop	{r7, pc}
 8016e20:	0802a4e0 	.word	0x0802a4e0

08016e24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b082      	sub	sp, #8
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
 8016e2c:	6878      	ldr	r0, [r7, #4]
 8016e2e:	f7ff ffe7 	bl	8016e00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8016e32:	215c      	movs	r1, #92	; 0x5c
 8016e34:	6878      	ldr	r0, [r7, #4]
 8016e36:	f010 fc41 	bl	80276bc <_ZdlPvj>
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3708      	adds	r7, #8
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	4a05      	ldr	r2, [pc, #20]	; (8016e64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	601a      	str	r2, [r3, #0]
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	4618      	mov	r0, r3
 8016e56:	f000 fbfd 	bl	8017654 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3708      	adds	r7, #8
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}
 8016e64:	0802a514 	.word	0x0802a514

08016e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6878      	ldr	r0, [r7, #4]
 8016e72:	f7ff ffe7 	bl	8016e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016e76:	f641 7150 	movw	r1, #8016	; 0x1f50
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f010 fc1e 	bl	80276bc <_ZdlPvj>
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	4618      	mov	r0, r3
 8016e84:	3708      	adds	r7, #8
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bd80      	pop	{r7, pc}
	...

08016e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	4a05      	ldr	r2, [pc, #20]	; (8016eac <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	601a      	str	r2, [r3, #0]
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f000 fbd9 	bl	8017654 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	3708      	adds	r7, #8
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}
 8016eac:	0802a548 	.word	0x0802a548

08016eb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b082      	sub	sp, #8
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	6878      	ldr	r0, [r7, #4]
 8016eba:	f7ff ffe7 	bl	8016e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016ebe:	2118      	movs	r1, #24
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f010 fbfb 	bl	80276bc <_ZdlPvj>
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3708      	adds	r7, #8
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	4a05      	ldr	r2, [pc, #20]	; (8016ef0 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	601a      	str	r2, [r3, #0]
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7ff fcdd 	bl	80168a0 <_ZN8touchgfx3LCDD1Ev>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	4618      	mov	r0, r3
 8016eea:	3708      	adds	r7, #8
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}
 8016ef0:	0802d0d4 	.word	0x0802d0d4

08016ef4 <_ZN8touchgfx8LCD24bppD0Ev>:
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b082      	sub	sp, #8
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f7ff ffe7 	bl	8016ed0 <_ZN8touchgfx8LCD24bppD1Ev>
 8016f02:	2158      	movs	r1, #88	; 0x58
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f010 fbd9 	bl	80276bc <_ZdlPvj>
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	3708      	adds	r7, #8
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd80      	pop	{r7, pc}

08016f14 <_Z41__static_initialization_and_destruction_0ii>:
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b084      	sub	sp, #16
 8016f18:	af02      	add	r7, sp, #8
 8016f1a:	6078      	str	r0, [r7, #4]
 8016f1c:	6039      	str	r1, [r7, #0]
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	d119      	bne.n	8016f58 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f2a:	4293      	cmp	r3, r2
 8016f2c:	d114      	bne.n	8016f58 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8016f2e:	4818      	ldr	r0, [pc, #96]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016f30:	f7ff fee4 	bl	8016cfc <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8016f34:	4817      	ldr	r0, [pc, #92]	; (8016f94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016f36:	f7ff f961 	bl	80161fc <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8016f3a:	4817      	ldr	r0, [pc, #92]	; (8016f98 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016f3c:	f008 ff76 	bl	801fe2c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8016f40:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016f44:	9301      	str	r3, [sp, #4]
 8016f46:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	4b10      	ldr	r3, [pc, #64]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016f4e:	4a12      	ldr	r2, [pc, #72]	; (8016f98 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016f50:	4910      	ldr	r1, [pc, #64]	; (8016f94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016f52:	4812      	ldr	r0, [pc, #72]	; (8016f9c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8016f54:	f7ff fea6 	bl	8016ca4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d113      	bne.n	8016f86 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f64:	4293      	cmp	r3, r2
 8016f66:	d10e      	bne.n	8016f86 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8016f68:	480c      	ldr	r0, [pc, #48]	; (8016f9c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8016f6a:	f7fe ff43 	bl	8015df4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8016f6e:	480c      	ldr	r0, [pc, #48]	; (8016fa0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8016f70:	f7f7 fed2 	bl	800ed18 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8016f74:	4808      	ldr	r0, [pc, #32]	; (8016f98 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016f76:	f7ff ffab 	bl	8016ed0 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8016f7a:	4806      	ldr	r0, [pc, #24]	; (8016f94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016f7c:	f7ff f968 	bl	8016250 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8016f80:	4803      	ldr	r0, [pc, #12]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016f82:	f7fe fc9b 	bl	80158bc <_ZN20STM32TouchControllerD1Ev>
}
 8016f86:	bf00      	nop
 8016f88:	3708      	adds	r7, #8
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}
 8016f8e:	bf00      	nop
 8016f90:	2000a714 	.word	0x2000a714
 8016f94:	2000a718 	.word	0x2000a718
 8016f98:	2000b338 	.word	0x2000b338
 8016f9c:	2000b394 	.word	0x2000b394
 8016fa0:	2000003c 	.word	0x2000003c

08016fa4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 8016fa4:	b480      	push	{r7}
 8016fa6:	b083      	sub	sp, #12
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8016fac:	2301      	movs	r3, #1
    }
 8016fae:	4618      	mov	r0, r3
 8016fb0:	370c      	adds	r7, #12
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr

08016fba <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 8016fba:	b480      	push	{r7}
 8016fbc:	b083      	sub	sp, #12
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8016fc2:	2354      	movs	r3, #84	; 0x54
    }
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	370c      	adds	r7, #12
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fce:	4770      	bx	lr

08016fd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 8016fd0:	b480      	push	{r7}
 8016fd2:	b083      	sub	sp, #12
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	460b      	mov	r3, r1
 8016fda:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016fdc:	887b      	ldrh	r3, [r7, #2]
 8016fde:	2254      	movs	r2, #84	; 0x54
 8016fe0:	fb02 f303 	mul.w	r3, r2, r3
 8016fe4:	3308      	adds	r3, #8
 8016fe6:	687a      	ldr	r2, [r7, #4]
 8016fe8:	4413      	add	r3, r2
    }
 8016fea:	4618      	mov	r0, r3
 8016fec:	370c      	adds	r7, #12
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff4:	4770      	bx	lr

08016ff6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 8016ff6:	b480      	push	{r7}
 8016ff8:	b083      	sub	sp, #12
 8016ffa:	af00      	add	r7, sp, #0
 8016ffc:	6078      	str	r0, [r7, #4]
 8016ffe:	460b      	mov	r3, r1
 8017000:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017002:	887b      	ldrh	r3, [r7, #2]
 8017004:	2254      	movs	r2, #84	; 0x54
 8017006:	fb02 f303 	mul.w	r3, r2, r3
 801700a:	3308      	adds	r3, #8
 801700c:	687a      	ldr	r2, [r7, #4]
 801700e:	4413      	add	r3, r2
    }
 8017010:	4618      	mov	r0, r3
 8017012:	370c      	adds	r7, #12
 8017014:	46bd      	mov	sp, r7
 8017016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701a:	4770      	bx	lr

0801701c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801701c:	b480      	push	{r7}
 801701e:	b083      	sub	sp, #12
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017024:	2301      	movs	r3, #1
    }
 8017026:	4618      	mov	r0, r3
 8017028:	370c      	adds	r7, #12
 801702a:	46bd      	mov	sp, r7
 801702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017030:	4770      	bx	lr

08017032 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017032:	b480      	push	{r7}
 8017034:	b083      	sub	sp, #12
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801703a:	f641 7348 	movw	r3, #8008	; 0x1f48
    }
 801703e:	4618      	mov	r0, r3
 8017040:	370c      	adds	r7, #12
 8017042:	46bd      	mov	sp, r7
 8017044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017048:	4770      	bx	lr

0801704a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801704a:	b480      	push	{r7}
 801704c:	b083      	sub	sp, #12
 801704e:	af00      	add	r7, sp, #0
 8017050:	6078      	str	r0, [r7, #4]
 8017052:	460b      	mov	r3, r1
 8017054:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017056:	887b      	ldrh	r3, [r7, #2]
 8017058:	f641 7248 	movw	r2, #8008	; 0x1f48
 801705c:	fb02 f303 	mul.w	r3, r2, r3
 8017060:	3308      	adds	r3, #8
 8017062:	687a      	ldr	r2, [r7, #4]
 8017064:	4413      	add	r3, r2
    }
 8017066:	4618      	mov	r0, r3
 8017068:	370c      	adds	r7, #12
 801706a:	46bd      	mov	sp, r7
 801706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017070:	4770      	bx	lr

08017072 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017072:	b480      	push	{r7}
 8017074:	b083      	sub	sp, #12
 8017076:	af00      	add	r7, sp, #0
 8017078:	6078      	str	r0, [r7, #4]
 801707a:	460b      	mov	r3, r1
 801707c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801707e:	887b      	ldrh	r3, [r7, #2]
 8017080:	f641 7248 	movw	r2, #8008	; 0x1f48
 8017084:	fb02 f303 	mul.w	r3, r2, r3
 8017088:	3308      	adds	r3, #8
 801708a:	687a      	ldr	r2, [r7, #4]
 801708c:	4413      	add	r3, r2
    }
 801708e:	4618      	mov	r0, r3
 8017090:	370c      	adds	r7, #12
 8017092:	46bd      	mov	sp, r7
 8017094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017098:	4770      	bx	lr

0801709a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801709a:	b480      	push	{r7}
 801709c:	b083      	sub	sp, #12
 801709e:	af00      	add	r7, sp, #0
 80170a0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80170a2:	2301      	movs	r3, #1
    }
 80170a4:	4618      	mov	r0, r3
 80170a6:	370c      	adds	r7, #12
 80170a8:	46bd      	mov	sp, r7
 80170aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ae:	4770      	bx	lr

080170b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80170b0:	b480      	push	{r7}
 80170b2:	b083      	sub	sp, #12
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80170b8:	2310      	movs	r3, #16
    }
 80170ba:	4618      	mov	r0, r3
 80170bc:	370c      	adds	r7, #12
 80170be:	46bd      	mov	sp, r7
 80170c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c4:	4770      	bx	lr

080170c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80170c6:	b480      	push	{r7}
 80170c8:	b083      	sub	sp, #12
 80170ca:	af00      	add	r7, sp, #0
 80170cc:	6078      	str	r0, [r7, #4]
 80170ce:	460b      	mov	r3, r1
 80170d0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80170d2:	887b      	ldrh	r3, [r7, #2]
 80170d4:	011b      	lsls	r3, r3, #4
 80170d6:	3308      	adds	r3, #8
 80170d8:	687a      	ldr	r2, [r7, #4]
 80170da:	4413      	add	r3, r2
    }
 80170dc:	4618      	mov	r0, r3
 80170de:	370c      	adds	r7, #12
 80170e0:	46bd      	mov	sp, r7
 80170e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e6:	4770      	bx	lr

080170e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80170e8:	b480      	push	{r7}
 80170ea:	b083      	sub	sp, #12
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
 80170f0:	460b      	mov	r3, r1
 80170f2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80170f4:	887b      	ldrh	r3, [r7, #2]
 80170f6:	011b      	lsls	r3, r3, #4
 80170f8:	3308      	adds	r3, #8
 80170fa:	687a      	ldr	r2, [r7, #4]
 80170fc:	4413      	add	r3, r2
    }
 80170fe:	4618      	mov	r0, r3
 8017100:	370c      	adds	r7, #12
 8017102:	46bd      	mov	sp, r7
 8017104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017108:	4770      	bx	lr

0801710a <_GLOBAL__sub_I_touchgfx_init>:
 801710a:	b580      	push	{r7, lr}
 801710c:	af00      	add	r7, sp, #0
 801710e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017112:	2001      	movs	r0, #1
 8017114:	f7ff fefe 	bl	8016f14 <_Z41__static_initialization_and_destruction_0ii>
 8017118:	bd80      	pop	{r7, pc}

0801711a <_GLOBAL__sub_D_touchgfx_init>:
 801711a:	b580      	push	{r7, lr}
 801711c:	af00      	add	r7, sp, #0
 801711e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017122:	2000      	movs	r0, #0
 8017124:	f7ff fef6 	bl	8016f14 <_Z41__static_initialization_and_destruction_0ii>
 8017128:	bd80      	pop	{r7, pc}

0801712a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801712a:	b580      	push	{r7, lr}
 801712c:	b082      	sub	sp, #8
 801712e:	af00      	add	r7, sp, #0
 8017130:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	3318      	adds	r3, #24
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	4798      	blx	r3
    }
 801713e:	bf00      	nop
 8017140:	3708      	adds	r7, #8
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}

08017146 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8017146:	b480      	push	{r7}
 8017148:	b083      	sub	sp, #12
 801714a:	af00      	add	r7, sp, #0
 801714c:	6078      	str	r0, [r7, #4]
 801714e:	460b      	mov	r3, r1
 8017150:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	78fa      	ldrb	r2, [r7, #3]
 8017156:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801715a:	bf00      	nop
 801715c:	370c      	adds	r7, #12
 801715e:	46bd      	mov	sp, r7
 8017160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017164:	4770      	bx	lr

08017166 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8017166:	b480      	push	{r7}
 8017168:	b083      	sub	sp, #12
 801716a:	af00      	add	r7, sp, #0
 801716c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017174:	3301      	adds	r3, #1
 8017176:	b2da      	uxtb	r2, r3
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801717e:	bf00      	nop
 8017180:	370c      	adds	r7, #12
 8017182:	46bd      	mov	sp, r7
 8017184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017188:	4770      	bx	lr
	...

0801718c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801718c:	b580      	push	{r7, lr}
 801718e:	b082      	sub	sp, #8
 8017190:	af00      	add	r7, sp, #0
 8017192:	6078      	str	r0, [r7, #4]
 8017194:	460b      	mov	r3, r1
 8017196:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8017198:	78fb      	ldrb	r3, [r7, #3]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d002      	beq.n	80171a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801719e:	78fb      	ldrb	r3, [r7, #3]
 80171a0:	2b02      	cmp	r3, #2
 80171a2:	d105      	bne.n	80171b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	78fa      	ldrb	r2, [r7, #3]
 80171a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80171ac:	2301      	movs	r3, #1
 80171ae:	e027      	b.n	8017200 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80171b0:	78fb      	ldrb	r3, [r7, #3]
 80171b2:	2b01      	cmp	r3, #1
 80171b4:	d123      	bne.n	80171fe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d014      	beq.n	80171e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	3380      	adds	r3, #128	; 0x80
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	4798      	blx	r3
 80171ca:	4603      	mov	r3, r0
 80171cc:	461a      	mov	r2, r3
 80171ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d008      	beq.n	80171e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80171d6:	4b0c      	ldr	r3, [pc, #48]	; (8017208 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	f083 0301 	eor.w	r3, r3, #1
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d001      	beq.n	80171e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80171e4:	2301      	movs	r3, #1
 80171e6:	e000      	b.n	80171ea <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80171e8:	2300      	movs	r3, #0
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d005      	beq.n	80171fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	78fa      	ldrb	r2, [r7, #3]
 80171f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80171f6:	2301      	movs	r3, #1
 80171f8:	e002      	b.n	8017200 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80171fa:	2300      	movs	r3, #0
 80171fc:	e000      	b.n	8017200 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80171fe:	2300      	movs	r3, #0
    }
 8017200:	4618      	mov	r0, r3
 8017202:	3708      	adds	r7, #8
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}
 8017208:	2000b41a 	.word	0x2000b41a

0801720c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 801720c:	b480      	push	{r7}
 801720e:	b083      	sub	sp, #12
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	683a      	ldr	r2, [r7, #0]
 801721a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801721c:	bf00      	nop
 801721e:	370c      	adds	r7, #12
 8017220:	46bd      	mov	sp, r7
 8017222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017226:	4770      	bx	lr

08017228 <__NVIC_EnableIRQ>:
{
 8017228:	b480      	push	{r7}
 801722a:	b083      	sub	sp, #12
 801722c:	af00      	add	r7, sp, #0
 801722e:	4603      	mov	r3, r0
 8017230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017236:	2b00      	cmp	r3, #0
 8017238:	db0d      	blt.n	8017256 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801723a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801723e:	b2db      	uxtb	r3, r3
 8017240:	f003 021f 	and.w	r2, r3, #31
 8017244:	4907      	ldr	r1, [pc, #28]	; (8017264 <__NVIC_EnableIRQ+0x3c>)
 8017246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801724a:	095b      	lsrs	r3, r3, #5
 801724c:	2001      	movs	r0, #1
 801724e:	fa00 f202 	lsl.w	r2, r0, r2
 8017252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017256:	bf00      	nop
 8017258:	370c      	adds	r7, #12
 801725a:	46bd      	mov	sp, r7
 801725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017260:	4770      	bx	lr
 8017262:	bf00      	nop
 8017264:	e000e100 	.word	0xe000e100

08017268 <__NVIC_DisableIRQ>:
{
 8017268:	b480      	push	{r7}
 801726a:	b083      	sub	sp, #12
 801726c:	af00      	add	r7, sp, #0
 801726e:	4603      	mov	r3, r0
 8017270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017276:	2b00      	cmp	r3, #0
 8017278:	db12      	blt.n	80172a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801727a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801727e:	b2db      	uxtb	r3, r3
 8017280:	f003 021f 	and.w	r2, r3, #31
 8017284:	4909      	ldr	r1, [pc, #36]	; (80172ac <__NVIC_DisableIRQ+0x44>)
 8017286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801728a:	095b      	lsrs	r3, r3, #5
 801728c:	2001      	movs	r0, #1
 801728e:	fa00 f202 	lsl.w	r2, r0, r2
 8017292:	3320      	adds	r3, #32
 8017294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801729c:	f3bf 8f6f 	isb	sy
}
 80172a0:	bf00      	nop
 80172a2:	370c      	adds	r7, #12
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr
 80172ac:	e000e100 	.word	0xe000e100

080172b0 <__NVIC_SetPriority>:
{
 80172b0:	b480      	push	{r7}
 80172b2:	b083      	sub	sp, #12
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	4603      	mov	r3, r0
 80172b8:	6039      	str	r1, [r7, #0]
 80172ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80172bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	db0c      	blt.n	80172de <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	b2db      	uxtb	r3, r3
 80172c8:	4a0e      	ldr	r2, [pc, #56]	; (8017304 <__NVIC_SetPriority+0x54>)
 80172ca:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80172ce:	4608      	mov	r0, r1
 80172d0:	011b      	lsls	r3, r3, #4
 80172d2:	b2d9      	uxtb	r1, r3
 80172d4:	1813      	adds	r3, r2, r0
 80172d6:	460a      	mov	r2, r1
 80172d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80172dc:	e00c      	b.n	80172f8 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	b2da      	uxtb	r2, r3
 80172e2:	4909      	ldr	r1, [pc, #36]	; (8017308 <__NVIC_SetPriority+0x58>)
 80172e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80172e8:	b2db      	uxtb	r3, r3
 80172ea:	f003 030f 	and.w	r3, r3, #15
 80172ee:	3b04      	subs	r3, #4
 80172f0:	0112      	lsls	r2, r2, #4
 80172f2:	b2d2      	uxtb	r2, r2
 80172f4:	440b      	add	r3, r1
 80172f6:	761a      	strb	r2, [r3, #24]
}
 80172f8:	bf00      	nop
 80172fa:	370c      	adds	r7, #12
 80172fc:	46bd      	mov	sp, r7
 80172fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017302:	4770      	bx	lr
 8017304:	e000e100 	.word	0xe000e100
 8017308:	e000ed00 	.word	0xe000ed00

0801730c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801730c:	b5b0      	push	{r4, r5, r7, lr}
 801730e:	b082      	sub	sp, #8
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	4618      	mov	r0, r3
 8017318:	f001 f93c 	bl	8018594 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 801731c:	687d      	ldr	r5, [r7, #4]
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	334c      	adds	r3, #76	; 0x4c
 8017324:	681c      	ldr	r4, [r3, #0]
 8017326:	f004 fbf5 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801732a:	4603      	mov	r3, r0
 801732c:	4619      	mov	r1, r3
 801732e:	4628      	mov	r0, r5
 8017330:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	490d      	ldr	r1, [pc, #52]	; (801736c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8017336:	4618      	mov	r0, r3
 8017338:	f7ff ff68 	bl	801720c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2101      	movs	r1, #1
 8017340:	4618      	mov	r0, r3
 8017342:	f7ff ff23 	bl	801718c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	3374      	adds	r3, #116	; 0x74
 801734e:	681c      	ldr	r4, [r3, #0]
 8017350:	2300      	movs	r3, #0
 8017352:	2200      	movs	r2, #0
 8017354:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8017358:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	2101      	movs	r1, #1
 801735e:	4618      	mov	r0, r3
 8017360:	f7ff fef1 	bl	8017146 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8017364:	bf00      	nop
 8017366:	3708      	adds	r7, #8
 8017368:	46bd      	mov	sp, r7
 801736a:	bdb0      	pop	{r4, r5, r7, pc}
 801736c:	08015f49 	.word	0x08015f49

08017370 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017378:	2109      	movs	r1, #9
 801737a:	205a      	movs	r0, #90	; 0x5a
 801737c:	f7ff ff98 	bl	80172b0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017380:	2109      	movs	r1, #9
 8017382:	2058      	movs	r0, #88	; 0x58
 8017384:	f7ff ff94 	bl	80172b0 <__NVIC_SetPriority>
}
 8017388:	bf00      	nop
 801738a:	3708      	adds	r7, #8
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}

08017390 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b082      	sub	sp, #8
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017398:	205a      	movs	r0, #90	; 0x5a
 801739a:	f7ff ff45 	bl	8017228 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801739e:	2058      	movs	r0, #88	; 0x58
 80173a0:	f7ff ff42 	bl	8017228 <__NVIC_EnableIRQ>
}
 80173a4:	bf00      	nop
 80173a6:	3708      	adds	r7, #8
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}

080173ac <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80173b4:	205a      	movs	r0, #90	; 0x5a
 80173b6:	f7ff ff57 	bl	8017268 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80173ba:	2058      	movs	r0, #88	; 0x58
 80173bc:	f7ff ff54 	bl	8017268 <__NVIC_DisableIRQ>
}
 80173c0:	bf00      	nop
 80173c2:	3708      	adds	r7, #8
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80173c8:	b480      	push	{r7}
 80173ca:	b083      	sub	sp, #12
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80173d0:	4b11      	ldr	r3, [pc, #68]	; (8017418 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80173d2:	68db      	ldr	r3, [r3, #12]
 80173d4:	b29b      	uxth	r3, r3
 80173d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80173da:	b29b      	uxth	r3, r3
 80173dc:	3b01      	subs	r3, #1
 80173de:	b29a      	uxth	r2, r3
 80173e0:	4b0e      	ldr	r3, [pc, #56]	; (801741c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80173e2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80173e4:	4b0c      	ldr	r3, [pc, #48]	; (8017418 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80173e6:	691b      	ldr	r3, [r3, #16]
 80173e8:	b29b      	uxth	r3, r3
 80173ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	3b01      	subs	r3, #1
 80173f2:	b29a      	uxth	r2, r3
 80173f4:	4b0a      	ldr	r3, [pc, #40]	; (8017420 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80173f6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80173f8:	4b08      	ldr	r3, [pc, #32]	; (801741c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80173fa:	881a      	ldrh	r2, [r3, #0]
 80173fc:	4b06      	ldr	r3, [pc, #24]	; (8017418 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80173fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8017400:	4b05      	ldr	r3, [pc, #20]	; (8017418 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017404:	4a04      	ldr	r2, [pc, #16]	; (8017418 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017406:	f043 0301 	orr.w	r3, r3, #1
 801740a:	6353      	str	r3, [r2, #52]	; 0x34
}
 801740c:	bf00      	nop
 801740e:	370c      	adds	r7, #12
 8017410:	46bd      	mov	sp, r7
 8017412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017416:	4770      	bx	lr
 8017418:	40016800 	.word	0x40016800
 801741c:	2000b40c 	.word	0x2000b40c
 8017420:	2000b40e 	.word	0x2000b40e

08017424 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8017424:	b480      	push	{r7}
 8017426:	b083      	sub	sp, #12
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801742c:	4b03      	ldr	r3, [pc, #12]	; (801743c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017430:	4618      	mov	r0, r3
 8017432:	370c      	adds	r7, #12
 8017434:	46bd      	mov	sp, r7
 8017436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743a:	4770      	bx	lr
 801743c:	40016884 	.word	0x40016884

08017440 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8017440:	b480      	push	{r7}
 8017442:	b083      	sub	sp, #12
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
 8017448:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801744a:	4a06      	ldr	r2, [pc, #24]	; (8017464 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801744c:	683b      	ldr	r3, [r7, #0]
 801744e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8017450:	4b05      	ldr	r3, [pc, #20]	; (8017468 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8017452:	2201      	movs	r2, #1
 8017454:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017456:	bf00      	nop
 8017458:	370c      	adds	r7, #12
 801745a:	46bd      	mov	sp, r7
 801745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017460:	4770      	bx	lr
 8017462:	bf00      	nop
 8017464:	40016884 	.word	0x40016884
 8017468:	40016800 	.word	0x40016800

0801746c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b082      	sub	sp, #8
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
 8017474:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	6839      	ldr	r1, [r7, #0]
 801747a:	4618      	mov	r0, r3
 801747c:	f000 fd9b 	bl	8017fb6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8017480:	bf00      	nop
 8017482:	3708      	adds	r7, #8
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}

08017488 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8017488:	b480      	push	{r7}
 801748a:	b085      	sub	sp, #20
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8017490:	4b0d      	ldr	r3, [pc, #52]	; (80174c8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017494:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8017496:	4b0c      	ldr	r3, [pc, #48]	; (80174c8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	b29b      	uxth	r3, r3
 801749c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80174a0:	b29b      	uxth	r3, r3
 80174a2:	3301      	adds	r3, #1
 80174a4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80174a6:	89fa      	ldrh	r2, [r7, #14]
 80174a8:	89bb      	ldrh	r3, [r7, #12]
 80174aa:	429a      	cmp	r2, r3
 80174ac:	d201      	bcs.n	80174b2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80174ae:	2300      	movs	r3, #0
 80174b0:	e003      	b.n	80174ba <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80174b2:	89fa      	ldrh	r2, [r7, #14]
 80174b4:	89bb      	ldrh	r3, [r7, #12]
 80174b6:	1ad3      	subs	r3, r2, r3
 80174b8:	b29b      	uxth	r3, r3
    }
}
 80174ba:	4618      	mov	r0, r3
 80174bc:	3714      	adds	r7, #20
 80174be:	46bd      	mov	sp, r7
 80174c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c4:	4770      	bx	lr
 80174c6:	bf00      	nop
 80174c8:	40016800 	.word	0x40016800

080174cc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b082      	sub	sp, #8
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80174d4:	4b1a      	ldr	r3, [pc, #104]	; (8017540 <HAL_LTDC_LineEventCallback+0x74>)
 80174d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174d8:	4a1a      	ldr	r2, [pc, #104]	; (8017544 <HAL_LTDC_LineEventCallback+0x78>)
 80174da:	8812      	ldrh	r2, [r2, #0]
 80174dc:	4293      	cmp	r3, r2
 80174de:	bf0c      	ite	eq
 80174e0:	2301      	moveq	r3, #1
 80174e2:	2300      	movne	r3, #0
 80174e4:	b2db      	uxtb	r3, r3
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d017      	beq.n	801751a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80174ea:	4b17      	ldr	r3, [pc, #92]	; (8017548 <HAL_LTDC_LineEventCallback+0x7c>)
 80174ec:	881b      	ldrh	r3, [r3, #0]
 80174ee:	4619      	mov	r1, r3
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f7ee f9db 	bl	80058ac <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80174f6:	f7f8 f961 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 80174fa:	4603      	mov	r3, r0
 80174fc:	4618      	mov	r0, r3
 80174fe:	f7ff fe32 	bl	8017166 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8017502:	f7fe fd01 	bl	8015f08 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8017506:	f7f8 f959 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 801750a:	4603      	mov	r3, r0
 801750c:	4618      	mov	r0, r3
 801750e:	f001 fac9 	bl	8018aa4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8017512:	2000      	movs	r0, #0
 8017514:	f7fe f9f4 	bl	8015900 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8017518:	e00e      	b.n	8017538 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801751a:	4b0a      	ldr	r3, [pc, #40]	; (8017544 <HAL_LTDC_LineEventCallback+0x78>)
 801751c:	881b      	ldrh	r3, [r3, #0]
 801751e:	4619      	mov	r1, r3
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f7ee f9c3 	bl	80058ac <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8017526:	2000      	movs	r0, #0
 8017528:	f7fe f9f5 	bl	8015916 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 801752c:	f7f8 f946 	bl	800f7bc <_ZN8touchgfx3HAL11getInstanceEv>
 8017530:	4603      	mov	r3, r0
 8017532:	4618      	mov	r0, r3
 8017534:	f7ff fdf9 	bl	801712a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8017538:	bf00      	nop
 801753a:	3708      	adds	r7, #8
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}
 8017540:	40016800 	.word	0x40016800
 8017544:	2000b40c 	.word	0x2000b40c
 8017548:	2000b40e 	.word	0x2000b40e

0801754c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801754c:	8880      	ldrh	r0, [r0, #4]
 801754e:	4770      	bx	lr

08017550 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017550:	2300      	movs	r3, #0
 8017552:	8083      	strh	r3, [r0, #4]
 8017554:	4770      	bx	lr
	...

08017558 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801755a:	6803      	ldr	r3, [r0, #0]
 801755c:	460e      	mov	r6, r1
 801755e:	2100      	movs	r1, #0
 8017560:	4605      	mov	r5, r0
 8017562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017564:	4798      	blx	r3
 8017566:	4604      	mov	r4, r0
 8017568:	682b      	ldr	r3, [r5, #0]
 801756a:	4628      	mov	r0, r5
 801756c:	1b34      	subs	r4, r6, r4
 801756e:	6a1b      	ldr	r3, [r3, #32]
 8017570:	b2a4      	uxth	r4, r4
 8017572:	4798      	blx	r3
 8017574:	88ab      	ldrh	r3, [r5, #4]
 8017576:	fbb4 f4f0 	udiv	r4, r4, r0
 801757a:	42a3      	cmp	r3, r4
 801757c:	d805      	bhi.n	801758a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801757e:	4b0e      	ldr	r3, [pc, #56]	; (80175b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8017580:	2120      	movs	r1, #32
 8017582:	4a0e      	ldr	r2, [pc, #56]	; (80175bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017584:	480e      	ldr	r0, [pc, #56]	; (80175c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017586:	f010 f8c5 	bl	8027714 <__assert_func>
 801758a:	682b      	ldr	r3, [r5, #0]
 801758c:	2100      	movs	r1, #0
 801758e:	4628      	mov	r0, r5
 8017590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017592:	4798      	blx	r3
 8017594:	682b      	ldr	r3, [r5, #0]
 8017596:	4607      	mov	r7, r0
 8017598:	4628      	mov	r0, r5
 801759a:	6a1b      	ldr	r3, [r3, #32]
 801759c:	4798      	blx	r3
 801759e:	1bf3      	subs	r3, r6, r7
 80175a0:	b29b      	uxth	r3, r3
 80175a2:	fbb3 f2f0 	udiv	r2, r3, r0
 80175a6:	fb02 3010 	mls	r0, r2, r0, r3
 80175aa:	b118      	cbz	r0, 80175b4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80175ac:	4b05      	ldr	r3, [pc, #20]	; (80175c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80175ae:	2121      	movs	r1, #33	; 0x21
 80175b0:	4a02      	ldr	r2, [pc, #8]	; (80175bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80175b2:	e7e7      	b.n	8017584 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80175b4:	4620      	mov	r0, r4
 80175b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175b8:	0802a64c 	.word	0x0802a64c
 80175bc:	0802a7ba 	.word	0x0802a7ba
 80175c0:	0802a661 	.word	0x0802a661
 80175c4:	0802a68f 	.word	0x0802a68f

080175c8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80175c8:	b538      	push	{r3, r4, r5, lr}
 80175ca:	6803      	ldr	r3, [r0, #0]
 80175cc:	460d      	mov	r5, r1
 80175ce:	4604      	mov	r4, r0
 80175d0:	6a1b      	ldr	r3, [r3, #32]
 80175d2:	4798      	blx	r3
 80175d4:	4285      	cmp	r5, r0
 80175d6:	d905      	bls.n	80175e4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80175d8:	4b0c      	ldr	r3, [pc, #48]	; (801760c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80175da:	2132      	movs	r1, #50	; 0x32
 80175dc:	4a0c      	ldr	r2, [pc, #48]	; (8017610 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80175de:	480d      	ldr	r0, [pc, #52]	; (8017614 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80175e0:	f010 f898 	bl	8027714 <__assert_func>
 80175e4:	6823      	ldr	r3, [r4, #0]
 80175e6:	4620      	mov	r0, r4
 80175e8:	88a5      	ldrh	r5, [r4, #4]
 80175ea:	69db      	ldr	r3, [r3, #28]
 80175ec:	4798      	blx	r3
 80175ee:	4285      	cmp	r5, r0
 80175f0:	d303      	bcc.n	80175fa <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80175f2:	4b09      	ldr	r3, [pc, #36]	; (8017618 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80175f4:	2133      	movs	r1, #51	; 0x33
 80175f6:	4a06      	ldr	r2, [pc, #24]	; (8017610 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80175f8:	e7f1      	b.n	80175de <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80175fa:	6823      	ldr	r3, [r4, #0]
 80175fc:	4620      	mov	r0, r4
 80175fe:	88a1      	ldrh	r1, [r4, #4]
 8017600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017602:	4798      	blx	r3
 8017604:	88a3      	ldrh	r3, [r4, #4]
 8017606:	3301      	adds	r3, #1
 8017608:	80a3      	strh	r3, [r4, #4]
 801760a:	bd38      	pop	{r3, r4, r5, pc}
 801760c:	0802a709 	.word	0x0802a709
 8017610:	0802a7fd 	.word	0x0802a7fd
 8017614:	0802a661 	.word	0x0802a661
 8017618:	0802a720 	.word	0x0802a720

0801761c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801761c:	b570      	push	{r4, r5, r6, lr}
 801761e:	6803      	ldr	r3, [r0, #0]
 8017620:	4616      	mov	r6, r2
 8017622:	4604      	mov	r4, r0
 8017624:	460d      	mov	r5, r1
 8017626:	6a1b      	ldr	r3, [r3, #32]
 8017628:	4798      	blx	r3
 801762a:	4286      	cmp	r6, r0
 801762c:	d905      	bls.n	801763a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801762e:	4b06      	ldr	r3, [pc, #24]	; (8017648 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8017630:	213c      	movs	r1, #60	; 0x3c
 8017632:	4a06      	ldr	r2, [pc, #24]	; (801764c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8017634:	4806      	ldr	r0, [pc, #24]	; (8017650 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8017636:	f010 f86d 	bl	8027714 <__assert_func>
 801763a:	6823      	ldr	r3, [r4, #0]
 801763c:	4629      	mov	r1, r5
 801763e:	4620      	mov	r0, r4
 8017640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017646:	4718      	bx	r3
 8017648:	0802a709 	.word	0x0802a709
 801764c:	0802a770 	.word	0x0802a770
 8017650:	0802a661 	.word	0x0802a661

08017654 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017654:	4770      	bx	lr
	...

08017658 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017658:	4a02      	ldr	r2, [pc, #8]	; (8017664 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801765a:	6002      	str	r2, [r0, #0]
 801765c:	2200      	movs	r2, #0
 801765e:	8082      	strh	r2, [r0, #4]
 8017660:	4770      	bx	lr
 8017662:	bf00      	nop
 8017664:	0802a744 	.word	0x0802a744

08017668 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8017668:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 801766c:	4770      	bx	lr

0801766e <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801766e:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8017672:	4770      	bx	lr

08017674 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8017674:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8017678:	4770      	bx	lr

0801767a <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801767a:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801767e:	4770      	bx	lr

08017680 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8017680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017684:	4617      	mov	r7, r2
 8017686:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801768a:	2200      	movs	r2, #0
 801768c:	4604      	mov	r4, r0
 801768e:	460e      	mov	r6, r1
 8017690:	4698      	mov	r8, r3
 8017692:	4611      	mov	r1, r2
 8017694:	9500      	str	r5, [sp, #0]
 8017696:	3090      	adds	r0, #144	; 0x90
 8017698:	f7f7 ff52 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
 801769c:	4643      	mov	r3, r8
 801769e:	463a      	mov	r2, r7
 80176a0:	4631      	mov	r1, r6
 80176a2:	4620      	mov	r0, r4
 80176a4:	9508      	str	r5, [sp, #32]
 80176a6:	b002      	add	sp, #8
 80176a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176ac:	f000 b99e 	b.w	80179ec <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080176b0 <_ZN8touchgfx11BoxProgress8setValueEi>:
 80176b0:	b530      	push	{r4, r5, lr}
 80176b2:	4604      	mov	r4, r0
 80176b4:	b085      	sub	sp, #20
 80176b6:	f000 f9e3 	bl	8017a80 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80176ba:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80176be:	2b03      	cmp	r3, #3
 80176c0:	d814      	bhi.n	80176ec <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 80176c2:	e8df f003 	tbb	[pc, r3]
 80176c6:	0202      	.short	0x0202
 80176c8:	1010      	.short	0x1010
 80176ca:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80176ce:	4620      	mov	r0, r4
 80176d0:	f000 fa28 	bl	8017b24 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80176d4:	b200      	sxth	r0, r0
 80176d6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80176da:	2b03      	cmp	r3, #3
 80176dc:	d830      	bhi.n	8017740 <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 80176de:	e8df f003 	tbb	[pc, r3]
 80176e2:	3107      	.short	0x3107
 80176e4:	6442      	.short	0x6442
 80176e6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80176ea:	e7f0      	b.n	80176ce <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 80176ec:	2000      	movs	r0, #0
 80176ee:	e7f2      	b.n	80176d6 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 80176f0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80176f4:	2200      	movs	r2, #0
 80176f6:	f9b4 5098 	ldrsh.w	r5, [r4, #152]	; 0x98
 80176fa:	9300      	str	r3, [sp, #0]
 80176fc:	4611      	mov	r1, r2
 80176fe:	4603      	mov	r3, r0
 8017700:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8017704:	f7f7 ff1c 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017708:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 801770c:	4629      	mov	r1, r5
 801770e:	429d      	cmp	r5, r3
 8017710:	eba5 0503 	sub.w	r5, r5, r3
 8017714:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8017718:	bfa8      	it	ge
 801771a:	4619      	movge	r1, r3
 801771c:	2d00      	cmp	r5, #0
 801771e:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017722:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017726:	f04f 0100 	mov.w	r1, #0
 801772a:	bfb8      	it	lt
 801772c:	426d      	neglt	r5, r5
 801772e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8017732:	f8ad 500c 	strh.w	r5, [sp, #12]
 8017736:	a902      	add	r1, sp, #8
 8017738:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801773c:	f004 fe6f 	bl	801c41e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8017740:	b005      	add	sp, #20
 8017742:	bd30      	pop	{r4, r5, pc}
 8017744:	8921      	ldrh	r1, [r4, #8]
 8017746:	2200      	movs	r2, #0
 8017748:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801774c:	1a09      	subs	r1, r1, r0
 801774e:	f9b4 5094 	ldrsh.w	r5, [r4, #148]	; 0x94
 8017752:	9300      	str	r3, [sp, #0]
 8017754:	4603      	mov	r3, r0
 8017756:	b209      	sxth	r1, r1
 8017758:	f104 0090 	add.w	r0, r4, #144	; 0x90
 801775c:	f7f7 fef0 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017760:	f9b4 3094 	ldrsh.w	r3, [r4, #148]	; 0x94
 8017764:	e7d2      	b.n	801770c <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 8017766:	2200      	movs	r2, #0
 8017768:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801776c:	9000      	str	r0, [sp, #0]
 801776e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8017772:	4611      	mov	r1, r2
 8017774:	f9b4 509a 	ldrsh.w	r5, [r4, #154]	; 0x9a
 8017778:	f7f7 fee2 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
 801777c:	f9b4 309a 	ldrsh.w	r3, [r4, #154]	; 0x9a
 8017780:	2100      	movs	r1, #0
 8017782:	429d      	cmp	r5, r3
 8017784:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
 8017788:	f8ad 1008 	strh.w	r1, [sp, #8]
 801778c:	4629      	mov	r1, r5
 801778e:	eba5 0503 	sub.w	r5, r5, r3
 8017792:	bfa8      	it	ge
 8017794:	4619      	movge	r1, r3
 8017796:	f8ad 200c 	strh.w	r2, [sp, #12]
 801779a:	2d00      	cmp	r5, #0
 801779c:	f8ad 100a 	strh.w	r1, [sp, #10]
 80177a0:	bfb8      	it	lt
 80177a2:	426d      	neglt	r5, r5
 80177a4:	f8ad 500e 	strh.w	r5, [sp, #14]
 80177a8:	e7c5      	b.n	8017736 <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 80177aa:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80177ae:	2100      	movs	r1, #0
 80177b0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80177b4:	1a12      	subs	r2, r2, r0
 80177b6:	9000      	str	r0, [sp, #0]
 80177b8:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80177bc:	f9b4 5096 	ldrsh.w	r5, [r4, #150]	; 0x96
 80177c0:	b212      	sxth	r2, r2
 80177c2:	f7f7 febd 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
 80177c6:	f9b4 3096 	ldrsh.w	r3, [r4, #150]	; 0x96
 80177ca:	e7d9      	b.n	8017780 <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>

080177cc <_ZN8touchgfx11BoxProgressC1Ev>:
 80177cc:	b510      	push	{r4, lr}
 80177ce:	4604      	mov	r4, r0
 80177d0:	f000 f848 	bl	8017864 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80177d4:	2201      	movs	r2, #1
 80177d6:	4b16      	ldr	r3, [pc, #88]	; (8017830 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 80177d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80177dc:	f104 0190 	add.w	r1, r4, #144	; 0x90
 80177e0:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 80177e4:	4a13      	ldr	r2, [pc, #76]	; (8017834 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 80177e6:	6023      	str	r3, [r4, #0]
 80177e8:	2300      	movs	r3, #0
 80177ea:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80177ee:	22ff      	movs	r2, #255	; 0xff
 80177f0:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 80177f4:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 80177f8:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 80177fc:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8017800:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8017804:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8017808:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801780c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8017810:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8017814:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8017818:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 801781c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8017820:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8017824:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8017828:	f000 fa7c 	bl	8017d24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801782c:	4620      	mov	r0, r4
 801782e:	bd10      	pop	{r4, pc}
 8017830:	0802a844 	.word	0x0802a844
 8017834:	0802bc70 	.word	0x0802bc70

08017838 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8017838:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 801783c:	4770      	bx	lr

0801783e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 801783e:	b570      	push	{r4, r5, r6, lr}
 8017840:	4604      	mov	r4, r0
 8017842:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8017846:	3058      	adds	r0, #88	; 0x58
 8017848:	f004 fd86 	bl	801c358 <_ZNK8touchgfx8Drawable10invalidateEv>
 801784c:	6823      	ldr	r3, [r4, #0]
 801784e:	4620      	mov	r0, r4
 8017850:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8017854:	4798      	blx	r3
 8017856:	4601      	mov	r1, r0
 8017858:	462b      	mov	r3, r5
 801785a:	4620      	mov	r0, r4
 801785c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017860:	4718      	bx	r3
	...

08017864 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8017864:	b510      	push	{r4, lr}
 8017866:	4604      	mov	r4, r0
 8017868:	f000 f97c 	bl	8017b64 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801786c:	4b03      	ldr	r3, [pc, #12]	; (801787c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801786e:	2100      	movs	r1, #0
 8017870:	4620      	mov	r0, r4
 8017872:	6023      	str	r3, [r4, #0]
 8017874:	f7ff ffe3 	bl	801783e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8017878:	4620      	mov	r0, r4
 801787a:	bd10      	pop	{r4, pc}
 801787c:	0802a91c 	.word	0x0802a91c

08017880 <_ZNK8touchgfx12LineProgress8getStartERiS1_>:
 8017880:	b530      	push	{r4, r5, lr}
 8017882:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 8017886:	2520      	movs	r5, #32
 8017888:	fb94 f4f5 	sdiv	r4, r4, r5
 801788c:	600c      	str	r4, [r1, #0]
 801788e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8017892:	fb93 f3f5 	sdiv	r3, r3, r5
 8017896:	6013      	str	r3, [r2, #0]
 8017898:	bd30      	pop	{r4, r5, pc}

0801789a <_ZN8touchgfx12LineProgress6setEndEii>:
 801789a:	0149      	lsls	r1, r1, #5
 801789c:	0152      	lsls	r2, r2, #5
 801789e:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 80178a2:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 80178a6:	4770      	bx	lr

080178a8 <_ZNK8touchgfx12LineProgress6getEndERiS1_>:
 80178a8:	b530      	push	{r4, r5, lr}
 80178aa:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
 80178ae:	2520      	movs	r5, #32
 80178b0:	fb94 f4f5 	sdiv	r4, r4, r5
 80178b4:	600c      	str	r4, [r1, #0]
 80178b6:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80178ba:	fb93 f3f5 	sdiv	r3, r3, r5
 80178be:	6013      	str	r3, [r2, #0]
 80178c0:	bd30      	pop	{r4, r5, pc}

080178c2 <_ZNK8touchgfx12LineProgress12getLineWidthEv>:
 80178c2:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 80178c6:	2320      	movs	r3, #32
 80178c8:	fb90 f0f3 	sdiv	r0, r0, r3
 80178cc:	4770      	bx	lr

080178ce <_ZN8touchgfx12LineProgress8setAlphaEh>:
 80178ce:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
 80178d2:	4770      	bx	lr

080178d4 <_ZNK8touchgfx12LineProgress8getAlphaEv>:
 80178d4:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
 80178d8:	4770      	bx	lr

080178da <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>:
 80178da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80178de:	4617      	mov	r7, r2
 80178e0:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80178e4:	2200      	movs	r2, #0
 80178e6:	4604      	mov	r4, r0
 80178e8:	460e      	mov	r6, r1
 80178ea:	4698      	mov	r8, r3
 80178ec:	4611      	mov	r1, r2
 80178ee:	9500      	str	r5, [sp, #0]
 80178f0:	3090      	adds	r0, #144	; 0x90
 80178f2:	f7f7 fe25 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
 80178f6:	4643      	mov	r3, r8
 80178f8:	463a      	mov	r2, r7
 80178fa:	4631      	mov	r1, r6
 80178fc:	4620      	mov	r0, r4
 80178fe:	9508      	str	r5, [sp, #32]
 8017900:	b002      	add	sp, #8
 8017902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017906:	f000 b871 	b.w	80179ec <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801790a <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>:
 801790a:	3090      	adds	r0, #144	; 0x90
 801790c:	f002 b810 	b.w	8019930 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

08017910 <_ZN8touchgfx12LineProgress8setStartEii>:
 8017910:	0149      	lsls	r1, r1, #5
 8017912:	3090      	adds	r0, #144	; 0x90
 8017914:	0152      	lsls	r2, r2, #5
 8017916:	6741      	str	r1, [r0, #116]	; 0x74
 8017918:	6782      	str	r2, [r0, #120]	; 0x78
 801791a:	f002 bae5 	b.w	8019ee8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

0801791e <_ZN8touchgfx12LineProgress12setLineWidthEi>:
 801791e:	0149      	lsls	r1, r1, #5
 8017920:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8017924:	4299      	cmp	r1, r3
 8017926:	d004      	beq.n	8017932 <_ZN8touchgfx12LineProgress12setLineWidthEi+0x14>
 8017928:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
 801792c:	3090      	adds	r0, #144	; 0x90
 801792e:	f002 b9b7 	b.w	8019ca0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017932:	4770      	bx	lr

08017934 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>:
 8017934:	3090      	adds	r0, #144	; 0x90
 8017936:	f002 bb06 	b.w	8019f46 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

0801793a <_ZNK8touchgfx12LineProgress18getLineEndingStyleEv>:
 801793a:	3090      	adds	r0, #144	; 0x90
 801793c:	f002 b9ac 	b.w	8019c98 <_ZNK8touchgfx4Line18getLineEndingStyleEv>

08017940 <_ZN8touchgfx12LineProgress8setValueEi>:
 8017940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017942:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 8017946:	4604      	mov	r4, r0
 8017948:	b33b      	cbz	r3, 801799a <_ZN8touchgfx12LineProgress8setValueEi+0x5a>
 801794a:	f000 f899 	bl	8017a80 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801794e:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8017952:	4620      	mov	r0, r4
 8017954:	2720      	movs	r7, #32
 8017956:	f000 f8e5 	bl	8017b24 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801795a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 801795e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 8017962:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8017966:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 801796a:	1a5b      	subs	r3, r3, r1
 801796c:	f8b4 608a 	ldrh.w	r6, [r4, #138]	; 0x8a
 8017970:	1aad      	subs	r5, r5, r2
 8017972:	015b      	lsls	r3, r3, #5
 8017974:	016d      	lsls	r5, r5, #5
 8017976:	fb93 f3f6 	sdiv	r3, r3, r6
 801797a:	fb95 f5f6 	sdiv	r5, r5, r6
 801797e:	4343      	muls	r3, r0
 8017980:	4368      	muls	r0, r5
 8017982:	fb93 f3f7 	sdiv	r3, r3, r7
 8017986:	fb90 f0f7 	sdiv	r0, r0, r7
 801798a:	4419      	add	r1, r3
 801798c:	4402      	add	r2, r0
 801798e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8017992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017996:	f002 bab2 	b.w	8019efe <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>
 801799a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801799c <_ZN8touchgfx12LineProgressC1Ev>:
 801799c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801799e:	4604      	mov	r4, r0
 80179a0:	f000 f8e0 	bl	8017b64 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80179a4:	4b10      	ldr	r3, [pc, #64]	; (80179e8 <_ZN8touchgfx12LineProgressC1Ev+0x4c>)
 80179a6:	2600      	movs	r6, #0
 80179a8:	4625      	mov	r5, r4
 80179aa:	f845 3b90 	str.w	r3, [r5], #144
 80179ae:	4628      	mov	r0, r5
 80179b0:	f002 f952 	bl	8019c58 <_ZN8touchgfx4LineC1Ev>
 80179b4:	4629      	mov	r1, r5
 80179b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80179ba:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
 80179be:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 80179c2:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80179c6:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 80179ca:	f000 f9ab 	bl	8017d24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80179ce:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80179d2:	4628      	mov	r0, r5
 80179d4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80179d8:	9200      	str	r2, [sp, #0]
 80179da:	4631      	mov	r1, r6
 80179dc:	4632      	mov	r2, r6
 80179de:	f7f7 fdaf 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
 80179e2:	4620      	mov	r0, r4
 80179e4:	b002      	add	sp, #8
 80179e6:	bd70      	pop	{r4, r5, r6, pc}
 80179e8:	0802a9e4 	.word	0x0802a9e4

080179ec <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80179ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80179f0:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80179f4:	4604      	mov	r4, r0
 80179f6:	460e      	mov	r6, r1
 80179f8:	4698      	mov	r8, r3
 80179fa:	9700      	str	r7, [sp, #0]
 80179fc:	3058      	adds	r0, #88	; 0x58
 80179fe:	4615      	mov	r5, r2
 8017a00:	f7f7 fd9e 	bl	800f540 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017a04:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017a08:	eb06 0308 	add.w	r3, r6, r8
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	eb05 0207 	add.w	r2, r5, r7
 8017a12:	bfb8      	it	lt
 8017a14:	8123      	strhlt	r3, [r4, #8]
 8017a16:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017a1a:	4293      	cmp	r3, r2
 8017a1c:	bfb8      	it	lt
 8017a1e:	8162      	strhlt	r2, [r4, #10]
 8017a20:	b002      	add	sp, #8
 8017a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a26 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8017a26:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8017a2a:	4770      	bx	lr

08017a2c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8017a2c:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8017a30:	4770      	bx	lr

08017a32 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017a32:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8017a36:	4770      	bx	lr

08017a38 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8017a38:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8017a3c:	4770      	bx	lr

08017a3e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8017a3e:	b510      	push	{r4, lr}
 8017a40:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8017a44:	800c      	strh	r4, [r1, #0]
 8017a46:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8017a4a:	8011      	strh	r1, [r2, #0]
 8017a4c:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8017a50:	801a      	strh	r2, [r3, #0]
 8017a52:	9b02      	ldr	r3, [sp, #8]
 8017a54:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8017a58:	801a      	strh	r2, [r3, #0]
 8017a5a:	bd10      	pop	{r4, pc}

08017a5c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8017a5c:	b510      	push	{r4, lr}
 8017a5e:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8017a62:	800c      	strh	r4, [r1, #0]
 8017a64:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8017a68:	8011      	strh	r1, [r2, #0]
 8017a6a:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8017a6e:	801a      	strh	r2, [r3, #0]
 8017a70:	bd10      	pop	{r4, pc}

08017a72 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8017a72:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8017a76:	800b      	strh	r3, [r1, #0]
 8017a78:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8017a7c:	8013      	strh	r3, [r2, #0]
 8017a7e:	4770      	bx	lr

08017a80 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017a80:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8017a84:	4299      	cmp	r1, r3
 8017a86:	bfb8      	it	lt
 8017a88:	4619      	movlt	r1, r3
 8017a8a:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8017a8e:	4299      	cmp	r1, r3
 8017a90:	bfa8      	it	ge
 8017a92:	4619      	movge	r1, r3
 8017a94:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8017a98:	4770      	bx	lr

08017a9a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8017a9a:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8017a9e:	4770      	bx	lr

08017aa0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017aa0:	b510      	push	{r4, lr}
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	302c      	adds	r0, #44	; 0x2c
 8017aa6:	f002 fe8b 	bl	801a7c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017aaa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017aac:	8123      	strh	r3, [r4, #8]
 8017aae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017ab0:	8163      	strh	r3, [r4, #10]
 8017ab2:	bd10      	pop	{r4, pc}

08017ab4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8017ab4:	4291      	cmp	r1, r2
 8017ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aba:	4604      	mov	r4, r0
 8017abc:	460e      	mov	r6, r1
 8017abe:	4615      	mov	r5, r2
 8017ac0:	4698      	mov	r8, r3
 8017ac2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017ac6:	db05      	blt.n	8017ad4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8017ac8:	4b12      	ldr	r3, [pc, #72]	; (8017b14 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8017aca:	2149      	movs	r1, #73	; 0x49
 8017acc:	4a12      	ldr	r2, [pc, #72]	; (8017b18 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8017ace:	4813      	ldr	r0, [pc, #76]	; (8017b1c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8017ad0:	f00f fe20 	bl	8027714 <__assert_func>
 8017ad4:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8017ad8:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8017adc:	6803      	ldr	r3, [r0, #0]
 8017ade:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8017ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017ae6:	4798      	blx	r3
 8017ae8:	f1b8 0f00 	cmp.w	r8, #0
 8017aec:	d10c      	bne.n	8017b08 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8017aee:	1bad      	subs	r5, r5, r6
 8017af0:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8017af4:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8017af8:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8017afc:	42bb      	cmp	r3, r7
 8017afe:	d806      	bhi.n	8017b0e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8017b00:	4b07      	ldr	r3, [pc, #28]	; (8017b20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8017b02:	2156      	movs	r1, #86	; 0x56
 8017b04:	4a04      	ldr	r2, [pc, #16]	; (8017b18 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8017b06:	e7e2      	b.n	8017ace <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8017b08:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8017b0c:	e7f2      	b.n	8017af4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8017b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b12:	bf00      	nop
 8017b14:	0802aac8 	.word	0x0802aac8
 8017b18:	0802ac04 	.word	0x0802ac04
 8017b1c:	0802aad2 	.word	0x0802aad2
 8017b20:	0802ab29 	.word	0x0802ab29

08017b24 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8017b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b26:	4604      	mov	r4, r0
 8017b28:	460d      	mov	r5, r1
 8017b2a:	b1b9      	cbz	r1, 8017b5c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8017b2c:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8017b30:	ab01      	add	r3, sp, #4
 8017b32:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8017b36:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8017b3a:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8017b3e:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8017b42:	1a12      	subs	r2, r2, r0
 8017b44:	1b89      	subs	r1, r1, r6
 8017b46:	1a38      	subs	r0, r7, r0
 8017b48:	f004 fd74 	bl	801c634 <_ZN8touchgfx6muldivElllRl>
 8017b4c:	4629      	mov	r1, r5
 8017b4e:	ab01      	add	r3, sp, #4
 8017b50:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8017b54:	4430      	add	r0, r6
 8017b56:	f004 fd6d 	bl	801c634 <_ZN8touchgfx6muldivElllRl>
 8017b5a:	b285      	uxth	r5, r0
 8017b5c:	4628      	mov	r0, r5
 8017b5e:	b003      	add	sp, #12
 8017b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017b64 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017b64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017b68:	4604      	mov	r4, r0
 8017b6a:	2600      	movs	r6, #0
 8017b6c:	f7f7 fc9a 	bl	800f4a4 <_ZN8touchgfx8DrawableC1Ev>
 8017b70:	4b1d      	ldr	r3, [pc, #116]	; (8017be8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8017b72:	4625      	mov	r5, r4
 8017b74:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8017b78:	af02      	add	r7, sp, #8
 8017b7a:	2226      	movs	r2, #38	; 0x26
 8017b7c:	4631      	mov	r1, r6
 8017b7e:	62a6      	str	r6, [r4, #40]	; 0x28
 8017b80:	f845 3b2c 	str.w	r3, [r5], #44
 8017b84:	4628      	mov	r0, r5
 8017b86:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8017b8a:	f00f fe4c 	bl	8027826 <memset>
 8017b8e:	4628      	mov	r0, r5
 8017b90:	f7f7 fc88 	bl	800f4a4 <_ZN8touchgfx8DrawableC1Ev>
 8017b94:	4b15      	ldr	r3, [pc, #84]	; (8017bec <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x88>)
 8017b96:	4639      	mov	r1, r7
 8017b98:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017b9e:	4628      	mov	r0, r5
 8017ba0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8017ba4:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8017ba8:	f002 fe0a 	bl	801a7c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017bac:	4638      	mov	r0, r7
 8017bae:	f7f7 fc79 	bl	800f4a4 <_ZN8touchgfx8DrawableC1Ev>
 8017bb2:	4b0f      	ldr	r3, [pc, #60]	; (8017bf0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x8c>)
 8017bb4:	4632      	mov	r2, r6
 8017bb6:	4631      	mov	r1, r6
 8017bb8:	65a3      	str	r3, [r4, #88]	; 0x58
 8017bba:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8017bbe:	4628      	mov	r0, r5
 8017bc0:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8017bc4:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8017bc8:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8017bcc:	f7f7 fd1d 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
 8017bd0:	4629      	mov	r1, r5
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	f000 f8a6 	bl	8017d24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017bd8:	4620      	mov	r0, r4
 8017bda:	4639      	mov	r1, r7
 8017bdc:	f000 f8a2 	bl	8017d24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017be0:	4620      	mov	r0, r4
 8017be2:	b002      	add	sp, #8
 8017be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017be8:	0802ab4c 	.word	0x0802ab4c
 8017bec:	0802bde0 	.word	0x0802bde0
 8017bf0:	0802ad38 	.word	0x0802ad38

08017bf4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017bf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017bf6:	2000      	movs	r0, #0
 8017bf8:	b12b      	cbz	r3, 8017c06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017bfa:	b920      	cbnz	r0, 8017c06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017bfc:	1a5a      	subs	r2, r3, r1
 8017bfe:	699b      	ldr	r3, [r3, #24]
 8017c00:	4250      	negs	r0, r2
 8017c02:	4150      	adcs	r0, r2
 8017c04:	e7f8      	b.n	8017bf8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017c06:	4770      	bx	lr

08017c08 <_ZN8touchgfx9Container9removeAllEv>:
 8017c08:	2200      	movs	r2, #0
 8017c0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017c0c:	b123      	cbz	r3, 8017c18 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017c0e:	6999      	ldr	r1, [r3, #24]
 8017c10:	6281      	str	r1, [r0, #40]	; 0x28
 8017c12:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017c16:	e7f8      	b.n	8017c0a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017c18:	4770      	bx	lr

08017c1a <_ZN8touchgfx9Container6unlinkEv>:
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	6283      	str	r3, [r0, #40]	; 0x28
 8017c1e:	4770      	bx	lr

08017c20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c24:	461f      	mov	r7, r3
 8017c26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8017c2a:	460d      	mov	r5, r1
 8017c2c:	4616      	mov	r6, r2
 8017c2e:	b103      	cbz	r3, 8017c32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017c30:	6038      	str	r0, [r7, #0]
 8017c32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017c34:	b314      	cbz	r4, 8017c7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017c36:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017c3a:	b1eb      	cbz	r3, 8017c78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c3c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017c40:	428d      	cmp	r5, r1
 8017c42:	db19      	blt.n	8017c78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c44:	b289      	uxth	r1, r1
 8017c46:	8923      	ldrh	r3, [r4, #8]
 8017c48:	440b      	add	r3, r1
 8017c4a:	b21b      	sxth	r3, r3
 8017c4c:	429d      	cmp	r5, r3
 8017c4e:	da13      	bge.n	8017c78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c50:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017c54:	4296      	cmp	r6, r2
 8017c56:	db0f      	blt.n	8017c78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c58:	b292      	uxth	r2, r2
 8017c5a:	8963      	ldrh	r3, [r4, #10]
 8017c5c:	4413      	add	r3, r2
 8017c5e:	b21b      	sxth	r3, r3
 8017c60:	429e      	cmp	r6, r3
 8017c62:	da09      	bge.n	8017c78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c64:	6823      	ldr	r3, [r4, #0]
 8017c66:	1ab2      	subs	r2, r6, r2
 8017c68:	1a69      	subs	r1, r5, r1
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8017c70:	b212      	sxth	r2, r2
 8017c72:	463b      	mov	r3, r7
 8017c74:	b209      	sxth	r1, r1
 8017c76:	47c0      	blx	r8
 8017c78:	69a4      	ldr	r4, [r4, #24]
 8017c7a:	e7db      	b.n	8017c34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017c80 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017c80:	2200      	movs	r2, #0
 8017c82:	8002      	strh	r2, [r0, #0]
 8017c84:	8042      	strh	r2, [r0, #2]
 8017c86:	8082      	strh	r2, [r0, #4]
 8017c88:	80c2      	strh	r2, [r0, #6]
 8017c8a:	4770      	bx	lr

08017c8c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017c8c:	b570      	push	{r4, r5, r6, lr}
 8017c8e:	460d      	mov	r5, r1
 8017c90:	4616      	mov	r6, r2
 8017c92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017c94:	b13c      	cbz	r4, 8017ca6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017c96:	6823      	ldr	r3, [r4, #0]
 8017c98:	4620      	mov	r0, r4
 8017c9a:	4632      	mov	r2, r6
 8017c9c:	4629      	mov	r1, r5
 8017c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017ca0:	4798      	blx	r3
 8017ca2:	69a4      	ldr	r4, [r4, #24]
 8017ca4:	e7f6      	b.n	8017c94 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017ca6:	bd70      	pop	{r4, r5, r6, pc}

08017ca8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017ca8:	b538      	push	{r3, r4, r5, lr}
 8017caa:	460d      	mov	r5, r1
 8017cac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017cae:	b134      	cbz	r4, 8017cbe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017cb0:	682b      	ldr	r3, [r5, #0]
 8017cb2:	4621      	mov	r1, r4
 8017cb4:	4628      	mov	r0, r5
 8017cb6:	689b      	ldr	r3, [r3, #8]
 8017cb8:	4798      	blx	r3
 8017cba:	69a4      	ldr	r4, [r4, #24]
 8017cbc:	e7f7      	b.n	8017cae <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017cbe:	bd38      	pop	{r3, r4, r5, pc}

08017cc0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017cc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017cc2:	b19b      	cbz	r3, 8017cec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017cc4:	428b      	cmp	r3, r1
 8017cc6:	d109      	bne.n	8017cdc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017cc8:	699a      	ldr	r2, [r3, #24]
 8017cca:	2100      	movs	r1, #0
 8017ccc:	6159      	str	r1, [r3, #20]
 8017cce:	6282      	str	r2, [r0, #40]	; 0x28
 8017cd0:	b902      	cbnz	r2, 8017cd4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017cd2:	4770      	bx	lr
 8017cd4:	6199      	str	r1, [r3, #24]
 8017cd6:	4770      	bx	lr
 8017cd8:	4613      	mov	r3, r2
 8017cda:	b13a      	cbz	r2, 8017cec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017cdc:	699a      	ldr	r2, [r3, #24]
 8017cde:	428a      	cmp	r2, r1
 8017ce0:	d1fa      	bne.n	8017cd8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017ce2:	698a      	ldr	r2, [r1, #24]
 8017ce4:	619a      	str	r2, [r3, #24]
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017cec:	4770      	bx	lr

08017cee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017cee:	b410      	push	{r4}
 8017cf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017cf2:	4604      	mov	r4, r0
 8017cf4:	b92b      	cbnz	r3, 8017d02 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017cf6:	6803      	ldr	r3, [r0, #0]
 8017cf8:	4611      	mov	r1, r2
 8017cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017d00:	4718      	bx	r3
 8017d02:	b941      	cbnz	r1, 8017d16 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017d04:	6193      	str	r3, [r2, #24]
 8017d06:	6282      	str	r2, [r0, #40]	; 0x28
 8017d08:	6154      	str	r4, [r2, #20]
 8017d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d0e:	4770      	bx	lr
 8017d10:	4603      	mov	r3, r0
 8017d12:	2800      	cmp	r0, #0
 8017d14:	d0f9      	beq.n	8017d0a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017d16:	4299      	cmp	r1, r3
 8017d18:	6998      	ldr	r0, [r3, #24]
 8017d1a:	d1f9      	bne.n	8017d10 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017d1c:	6190      	str	r0, [r2, #24]
 8017d1e:	618a      	str	r2, [r1, #24]
 8017d20:	e7f2      	b.n	8017d08 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017d24 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017d24:	4288      	cmp	r0, r1
 8017d26:	b508      	push	{r3, lr}
 8017d28:	d105      	bne.n	8017d36 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8017d2a:	4b11      	ldr	r3, [pc, #68]	; (8017d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017d2c:	2123      	movs	r1, #35	; 0x23
 8017d2e:	4a11      	ldr	r2, [pc, #68]	; (8017d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017d30:	4811      	ldr	r0, [pc, #68]	; (8017d78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8017d32:	f00f fcef 	bl	8027714 <__assert_func>
 8017d36:	694b      	ldr	r3, [r1, #20]
 8017d38:	b11b      	cbz	r3, 8017d42 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017d3a:	4b10      	ldr	r3, [pc, #64]	; (8017d7c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017d3c:	2124      	movs	r1, #36	; 0x24
 8017d3e:	4a0d      	ldr	r2, [pc, #52]	; (8017d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017d40:	e7f6      	b.n	8017d30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017d42:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8017d46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017d48:	b913      	cbnz	r3, 8017d50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017d4a:	6281      	str	r1, [r0, #40]	; 0x28
 8017d4c:	bd08      	pop	{r3, pc}
 8017d4e:	4613      	mov	r3, r2
 8017d50:	699a      	ldr	r2, [r3, #24]
 8017d52:	b12a      	cbz	r2, 8017d60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017d54:	428b      	cmp	r3, r1
 8017d56:	d1fa      	bne.n	8017d4e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017d58:	4b09      	ldr	r3, [pc, #36]	; (8017d80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017d5a:	2135      	movs	r1, #53	; 0x35
 8017d5c:	4a05      	ldr	r2, [pc, #20]	; (8017d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017d5e:	e7e7      	b.n	8017d30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017d60:	428b      	cmp	r3, r1
 8017d62:	d103      	bne.n	8017d6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017d64:	4b06      	ldr	r3, [pc, #24]	; (8017d80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017d66:	2138      	movs	r1, #56	; 0x38
 8017d68:	4a02      	ldr	r2, [pc, #8]	; (8017d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017d6a:	e7e1      	b.n	8017d30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017d6c:	6199      	str	r1, [r3, #24]
 8017d6e:	e7ed      	b.n	8017d4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017d70:	0802ac65 	.word	0x0802ac65
 8017d74:	0802adbc 	.word	0x0802adbc
 8017d78:	0802ac91 	.word	0x0802ac91
 8017d7c:	0802acc4 	.word	0x0802acc4
 8017d80:	0802acfa 	.word	0x0802acfa

08017d84 <_ZN8touchgfx4RectaNERKS0_>:
 8017d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d88:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017d8c:	888c      	ldrh	r4, [r1, #4]
 8017d8e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017d92:	443c      	add	r4, r7
 8017d94:	b2a4      	uxth	r4, r4
 8017d96:	fa0f f884 	sxth.w	r8, r4
 8017d9a:	45c1      	cmp	r9, r8
 8017d9c:	da2f      	bge.n	8017dfe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017d9e:	8882      	ldrh	r2, [r0, #4]
 8017da0:	444a      	add	r2, r9
 8017da2:	b292      	uxth	r2, r2
 8017da4:	fa0f fe82 	sxth.w	lr, r2
 8017da8:	4577      	cmp	r7, lr
 8017daa:	da28      	bge.n	8017dfe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017dac:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017db0:	88cb      	ldrh	r3, [r1, #6]
 8017db2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017db6:	442b      	add	r3, r5
 8017db8:	b21b      	sxth	r3, r3
 8017dba:	429e      	cmp	r6, r3
 8017dbc:	da1f      	bge.n	8017dfe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017dbe:	88c3      	ldrh	r3, [r0, #6]
 8017dc0:	4433      	add	r3, r6
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	fa0f fc83 	sxth.w	ip, r3
 8017dc8:	4565      	cmp	r5, ip
 8017dca:	da18      	bge.n	8017dfe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017dcc:	454f      	cmp	r7, r9
 8017dce:	bfb8      	it	lt
 8017dd0:	464f      	movlt	r7, r9
 8017dd2:	42b5      	cmp	r5, r6
 8017dd4:	bfb8      	it	lt
 8017dd6:	4635      	movlt	r5, r6
 8017dd8:	45f0      	cmp	r8, lr
 8017dda:	bfd8      	it	le
 8017ddc:	4622      	movle	r2, r4
 8017dde:	1bd2      	subs	r2, r2, r7
 8017de0:	8082      	strh	r2, [r0, #4]
 8017de2:	884a      	ldrh	r2, [r1, #2]
 8017de4:	88c9      	ldrh	r1, [r1, #6]
 8017de6:	8007      	strh	r7, [r0, #0]
 8017de8:	440a      	add	r2, r1
 8017dea:	8045      	strh	r5, [r0, #2]
 8017dec:	b292      	uxth	r2, r2
 8017dee:	b211      	sxth	r1, r2
 8017df0:	458c      	cmp	ip, r1
 8017df2:	bfa8      	it	ge
 8017df4:	4613      	movge	r3, r2
 8017df6:	1b5b      	subs	r3, r3, r5
 8017df8:	80c3      	strh	r3, [r0, #6]
 8017dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dfe:	2300      	movs	r3, #0
 8017e00:	8003      	strh	r3, [r0, #0]
 8017e02:	8043      	strh	r3, [r0, #2]
 8017e04:	8083      	strh	r3, [r0, #4]
 8017e06:	80c3      	strh	r3, [r0, #6]
 8017e08:	e7f7      	b.n	8017dfa <_ZN8touchgfx4RectaNERKS0_+0x76>

08017e0a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017e0a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	dd06      	ble.n	8017e20 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017e12:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017e16:	2800      	cmp	r0, #0
 8017e18:	bfcc      	ite	gt
 8017e1a:	2000      	movgt	r0, #0
 8017e1c:	2001      	movle	r0, #1
 8017e1e:	4770      	bx	lr
 8017e20:	2001      	movs	r0, #1
 8017e22:	4770      	bx	lr

08017e24 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e28:	2300      	movs	r3, #0
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017e2e:	8003      	strh	r3, [r0, #0]
 8017e30:	8043      	strh	r3, [r0, #2]
 8017e32:	8083      	strh	r3, [r0, #4]
 8017e34:	80c3      	strh	r3, [r0, #6]
 8017e36:	2d00      	cmp	r5, #0
 8017e38:	d040      	beq.n	8017ebc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017e3a:	1d28      	adds	r0, r5, #4
 8017e3c:	f7ff ffe5 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017e40:	b988      	cbnz	r0, 8017e66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017e42:	4620      	mov	r0, r4
 8017e44:	f7ff ffe1 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017e48:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017e4c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017e50:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017e54:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017e58:	b138      	cbz	r0, 8017e6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017e5a:	8022      	strh	r2, [r4, #0]
 8017e5c:	8063      	strh	r3, [r4, #2]
 8017e5e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017e62:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017e66:	69ad      	ldr	r5, [r5, #24]
 8017e68:	e7e5      	b.n	8017e36 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017e6a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017e6e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017e72:	4290      	cmp	r0, r2
 8017e74:	4607      	mov	r7, r0
 8017e76:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017e7a:	460e      	mov	r6, r1
 8017e7c:	bfa8      	it	ge
 8017e7e:	4617      	movge	r7, r2
 8017e80:	4299      	cmp	r1, r3
 8017e82:	4472      	add	r2, lr
 8017e84:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017e88:	bfa8      	it	ge
 8017e8a:	461e      	movge	r6, r3
 8017e8c:	4440      	add	r0, r8
 8017e8e:	4471      	add	r1, lr
 8017e90:	4463      	add	r3, ip
 8017e92:	b200      	sxth	r0, r0
 8017e94:	8027      	strh	r7, [r4, #0]
 8017e96:	b212      	sxth	r2, r2
 8017e98:	8066      	strh	r6, [r4, #2]
 8017e9a:	b209      	sxth	r1, r1
 8017e9c:	b21b      	sxth	r3, r3
 8017e9e:	4290      	cmp	r0, r2
 8017ea0:	bfac      	ite	ge
 8017ea2:	ebc7 0200 	rsbge	r2, r7, r0
 8017ea6:	ebc7 0202 	rsblt	r2, r7, r2
 8017eaa:	4299      	cmp	r1, r3
 8017eac:	bfac      	ite	ge
 8017eae:	ebc6 0301 	rsbge	r3, r6, r1
 8017eb2:	ebc6 0303 	rsblt	r3, r6, r3
 8017eb6:	80a2      	strh	r2, [r4, #4]
 8017eb8:	80e3      	strh	r3, [r4, #6]
 8017eba:	e7d4      	b.n	8017e66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ec2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017ec2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017ec6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017eca:	b383      	cbz	r3, 8017f2e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017ecc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017ece:	b374      	cbz	r4, 8017f2e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017ed0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017ed4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017ed8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017edc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017ee0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017ee4:	b303      	cbz	r3, 8017f28 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017ee6:	4668      	mov	r0, sp
 8017ee8:	1d21      	adds	r1, r4, #4
 8017eea:	f8ad 5000 	strh.w	r5, [sp]
 8017eee:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017ef2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017ef6:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017efa:	f7ff ff43 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 8017efe:	4668      	mov	r0, sp
 8017f00:	f7ff ff83 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f04:	b980      	cbnz	r0, 8017f28 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017f06:	f8bd 3000 	ldrh.w	r3, [sp]
 8017f0a:	4669      	mov	r1, sp
 8017f0c:	88a2      	ldrh	r2, [r4, #4]
 8017f0e:	4620      	mov	r0, r4
 8017f10:	1a9b      	subs	r3, r3, r2
 8017f12:	88e2      	ldrh	r2, [r4, #6]
 8017f14:	f8ad 3000 	strh.w	r3, [sp]
 8017f18:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017f1c:	1a9b      	subs	r3, r3, r2
 8017f1e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017f22:	6823      	ldr	r3, [r4, #0]
 8017f24:	689b      	ldr	r3, [r3, #8]
 8017f26:	4798      	blx	r3
 8017f28:	69a4      	ldr	r4, [r4, #24]
 8017f2a:	2c00      	cmp	r4, #0
 8017f2c:	d1d8      	bne.n	8017ee0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017f2e:	b002      	add	sp, #8
 8017f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f34 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f36:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017f3a:	460d      	mov	r5, r1
 8017f3c:	4616      	mov	r6, r2
 8017f3e:	b323      	cbz	r3, 8017f8a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017f40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017f42:	b314      	cbz	r4, 8017f8a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017f44:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017f48:	b1eb      	cbz	r3, 8017f86 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017f4a:	6828      	ldr	r0, [r5, #0]
 8017f4c:	466b      	mov	r3, sp
 8017f4e:	6869      	ldr	r1, [r5, #4]
 8017f50:	c303      	stmia	r3!, {r0, r1}
 8017f52:	4668      	mov	r0, sp
 8017f54:	1d21      	adds	r1, r4, #4
 8017f56:	f7ff ff15 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 8017f5a:	4668      	mov	r0, sp
 8017f5c:	f7ff ff55 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f60:	b988      	cbnz	r0, 8017f86 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017f62:	f8bd 3000 	ldrh.w	r3, [sp]
 8017f66:	4669      	mov	r1, sp
 8017f68:	88a2      	ldrh	r2, [r4, #4]
 8017f6a:	4620      	mov	r0, r4
 8017f6c:	1a9b      	subs	r3, r3, r2
 8017f6e:	88e2      	ldrh	r2, [r4, #6]
 8017f70:	f8ad 3000 	strh.w	r3, [sp]
 8017f74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017f78:	1a9b      	subs	r3, r3, r2
 8017f7a:	4632      	mov	r2, r6
 8017f7c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017f80:	6823      	ldr	r3, [r4, #0]
 8017f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f84:	4798      	blx	r3
 8017f86:	69a4      	ldr	r4, [r4, #24]
 8017f88:	e7db      	b.n	8017f42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017f8a:	b002      	add	sp, #8
 8017f8c:	bd70      	pop	{r4, r5, r6, pc}

08017f8e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8017f8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017f92:	4770      	bx	lr

08017f94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017f94:	6803      	ldr	r3, [r0, #0]
 8017f96:	b513      	push	{r0, r1, r4, lr}
 8017f98:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	e9cd 3300 	strd	r3, r3, [sp]
 8017fa2:	466b      	mov	r3, sp
 8017fa4:	47a0      	blx	r4
 8017fa6:	b002      	add	sp, #8
 8017fa8:	bd10      	pop	{r4, pc}

08017faa <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017faa:	2301      	movs	r3, #1
 8017fac:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017fb0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017fb4:	4770      	bx	lr

08017fb6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017fb6:	2301      	movs	r3, #1
 8017fb8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017fbc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017fc0:	4770      	bx	lr

08017fc2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017fc2:	6843      	ldr	r3, [r0, #4]
 8017fc4:	2201      	movs	r2, #1
 8017fc6:	725a      	strb	r2, [r3, #9]
 8017fc8:	6840      	ldr	r0, [r0, #4]
 8017fca:	6803      	ldr	r3, [r0, #0]
 8017fcc:	691b      	ldr	r3, [r3, #16]
 8017fce:	4718      	bx	r3

08017fd0 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017fd0:	6840      	ldr	r0, [r0, #4]
 8017fd2:	6803      	ldr	r3, [r0, #0]
 8017fd4:	689b      	ldr	r3, [r3, #8]
 8017fd6:	4718      	bx	r3

08017fd8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017fd8:	4b04      	ldr	r3, [pc, #16]	; (8017fec <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017fda:	781b      	ldrb	r3, [r3, #0]
 8017fdc:	b123      	cbz	r3, 8017fe8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017fde:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017fe2:	f080 0001 	eor.w	r0, r0, #1
 8017fe6:	4770      	bx	lr
 8017fe8:	2001      	movs	r0, #1
 8017fea:	4770      	bx	lr
 8017fec:	2000b41a 	.word	0x2000b41a

08017ff0 <_ZN8touchgfx3HAL8endFrameEv>:
 8017ff0:	b510      	push	{r4, lr}
 8017ff2:	4604      	mov	r4, r0
 8017ff4:	6840      	ldr	r0, [r0, #4]
 8017ff6:	6803      	ldr	r3, [r0, #0]
 8017ff8:	689b      	ldr	r3, [r3, #8]
 8017ffa:	4798      	blx	r3
 8017ffc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018000:	b113      	cbz	r3, 8018008 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018002:	2301      	movs	r3, #1
 8018004:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018008:	bd10      	pop	{r4, pc}

0801800a <_ZN8touchgfx3HAL9taskEntryEv>:
 801800a:	b508      	push	{r3, lr}
 801800c:	6803      	ldr	r3, [r0, #0]
 801800e:	4604      	mov	r4, r0
 8018010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018012:	4798      	blx	r3
 8018014:	6823      	ldr	r3, [r4, #0]
 8018016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018018:	4620      	mov	r0, r4
 801801a:	4798      	blx	r3
 801801c:	f7fd ff80 	bl	8015f20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018020:	6823      	ldr	r3, [r4, #0]
 8018022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018024:	e7f8      	b.n	8018018 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08018028 <_ZN8touchgfx3HAL4tickEv>:
 8018028:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801802a:	6803      	ldr	r3, [r0, #0]
 801802c:	4604      	mov	r4, r0
 801802e:	4d5c      	ldr	r5, [pc, #368]	; (80181a0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018034:	4798      	blx	r3
 8018036:	2800      	cmp	r0, #0
 8018038:	f000 8097 	beq.w	801816a <_ZN8touchgfx3HAL4tickEv+0x142>
 801803c:	2001      	movs	r0, #1
 801803e:	2600      	movs	r6, #0
 8018040:	f7fd fc5e 	bl	8015900 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018044:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8018048:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801804c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018050:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8018054:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8018058:	b133      	cbz	r3, 8018068 <_ZN8touchgfx3HAL4tickEv+0x40>
 801805a:	6823      	ldr	r3, [r4, #0]
 801805c:	4620      	mov	r0, r4
 801805e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8018062:	4798      	blx	r3
 8018064:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8018068:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801806c:	2601      	movs	r6, #1
 801806e:	6862      	ldr	r2, [r4, #4]
 8018070:	f083 0301 	eor.w	r3, r3, #1
 8018074:	702e      	strb	r6, [r5, #0]
 8018076:	7253      	strb	r3, [r2, #9]
 8018078:	f003 fd4c 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801807c:	6803      	ldr	r3, [r0, #0]
 801807e:	4631      	mov	r1, r6
 8018080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018082:	4798      	blx	r3
 8018084:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018088:	b90b      	cbnz	r3, 801808e <_ZN8touchgfx3HAL4tickEv+0x66>
 801808a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801808e:	f003 fd41 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 8018092:	6803      	ldr	r3, [r0, #0]
 8018094:	695b      	ldr	r3, [r3, #20]
 8018096:	4798      	blx	r3
 8018098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801809a:	6803      	ldr	r3, [r0, #0]
 801809c:	691b      	ldr	r3, [r3, #16]
 801809e:	4798      	blx	r3
 80180a0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80180a4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80180a8:	3b01      	subs	r3, #1
 80180aa:	b2db      	uxtb	r3, r3
 80180ac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80180b0:	b10a      	cbz	r2, 80180b6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d1eb      	bne.n	801808e <_ZN8touchgfx3HAL4tickEv+0x66>
 80180b6:	4a3b      	ldr	r2, [pc, #236]	; (80181a4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80180b8:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80180bc:	7813      	ldrb	r3, [r2, #0]
 80180be:	3301      	adds	r3, #1
 80180c0:	b25b      	sxtb	r3, r3
 80180c2:	4299      	cmp	r1, r3
 80180c4:	7013      	strb	r3, [r2, #0]
 80180c6:	dc10      	bgt.n	80180ea <_ZN8touchgfx3HAL4tickEv+0xc2>
 80180c8:	2300      	movs	r3, #0
 80180ca:	68e0      	ldr	r0, [r4, #12]
 80180cc:	a902      	add	r1, sp, #8
 80180ce:	7013      	strb	r3, [r2, #0]
 80180d0:	aa03      	add	r2, sp, #12
 80180d2:	6803      	ldr	r3, [r0, #0]
 80180d4:	68db      	ldr	r3, [r3, #12]
 80180d6:	4798      	blx	r3
 80180d8:	6823      	ldr	r3, [r4, #0]
 80180da:	2800      	cmp	r0, #0
 80180dc:	d051      	beq.n	8018182 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80180de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80180e2:	4620      	mov	r0, r4
 80180e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80180e8:	4798      	blx	r3
 80180ea:	2300      	movs	r3, #0
 80180ec:	6960      	ldr	r0, [r4, #20]
 80180ee:	f88d 3007 	strb.w	r3, [sp, #7]
 80180f2:	b158      	cbz	r0, 801810c <_ZN8touchgfx3HAL4tickEv+0xe4>
 80180f4:	6803      	ldr	r3, [r0, #0]
 80180f6:	f10d 0107 	add.w	r1, sp, #7
 80180fa:	68db      	ldr	r3, [r3, #12]
 80180fc:	4798      	blx	r3
 80180fe:	b128      	cbz	r0, 801810c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018102:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018106:	6803      	ldr	r3, [r0, #0]
 8018108:	68db      	ldr	r3, [r3, #12]
 801810a:	4798      	blx	r3
 801810c:	f104 001c 	add.w	r0, r4, #28
 8018110:	f00d fe2a 	bl	8025d68 <_ZN8touchgfx8Gestures4tickEv>
 8018114:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018118:	b30b      	cbz	r3, 801815e <_ZN8touchgfx3HAL4tickEv+0x136>
 801811a:	6920      	ldr	r0, [r4, #16]
 801811c:	6803      	ldr	r3, [r0, #0]
 801811e:	691b      	ldr	r3, [r3, #16]
 8018120:	4798      	blx	r3
 8018122:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018124:	4606      	mov	r6, r0
 8018126:	b903      	cbnz	r3, 801812a <_ZN8touchgfx3HAL4tickEv+0x102>
 8018128:	6720      	str	r0, [r4, #112]	; 0x70
 801812a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801812c:	4a1e      	ldr	r2, [pc, #120]	; (80181a8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801812e:	1af3      	subs	r3, r6, r3
 8018130:	4293      	cmp	r3, r2
 8018132:	d914      	bls.n	801815e <_ZN8touchgfx3HAL4tickEv+0x136>
 8018134:	6920      	ldr	r0, [r4, #16]
 8018136:	6803      	ldr	r3, [r0, #0]
 8018138:	699b      	ldr	r3, [r3, #24]
 801813a:	4798      	blx	r3
 801813c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801813e:	2264      	movs	r2, #100	; 0x64
 8018140:	1af3      	subs	r3, r6, r3
 8018142:	fbb3 f3f2 	udiv	r3, r3, r2
 8018146:	fbb0 f0f3 	udiv	r0, r0, r3
 801814a:	2800      	cmp	r0, #0
 801814c:	dc1e      	bgt.n	801818c <_ZN8touchgfx3HAL4tickEv+0x164>
 801814e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8018152:	6920      	ldr	r0, [r4, #16]
 8018154:	2100      	movs	r1, #0
 8018156:	6803      	ldr	r3, [r0, #0]
 8018158:	69db      	ldr	r3, [r3, #28]
 801815a:	4798      	blx	r3
 801815c:	6726      	str	r6, [r4, #112]	; 0x70
 801815e:	f003 fcd9 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 8018162:	6803      	ldr	r3, [r0, #0]
 8018164:	2100      	movs	r1, #0
 8018166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018168:	4798      	blx	r3
 801816a:	6823      	ldr	r3, [r4, #0]
 801816c:	4620      	mov	r0, r4
 801816e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018172:	4798      	blx	r3
 8018174:	2001      	movs	r0, #1
 8018176:	f7fd fbce 	bl	8015916 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801817a:	2300      	movs	r3, #0
 801817c:	702b      	strb	r3, [r5, #0]
 801817e:	b004      	add	sp, #16
 8018180:	bd70      	pop	{r4, r5, r6, pc}
 8018182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018186:	4620      	mov	r0, r4
 8018188:	4798      	blx	r3
 801818a:	e7ae      	b.n	80180ea <_ZN8touchgfx3HAL4tickEv+0xc2>
 801818c:	2863      	cmp	r0, #99	; 0x63
 801818e:	bfcb      	itete	gt
 8018190:	2300      	movgt	r3, #0
 8018192:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018196:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801819a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801819e:	e7d8      	b.n	8018152 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80181a0:	2000b420 	.word	0x2000b420
 80181a4:	2000b421 	.word	0x2000b421
 80181a8:	05f5e100 	.word	0x05f5e100

080181ac <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80181ac:	f7fd be88 	b.w	8015ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080181b0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80181b0:	6581      	str	r1, [r0, #88]	; 0x58
 80181b2:	301c      	adds	r0, #28
 80181b4:	f00d bdd6 	b.w	8025d64 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080181b8 <_ZN8touchgfx3HAL5touchEll>:
 80181b8:	b530      	push	{r4, r5, lr}
 80181ba:	b087      	sub	sp, #28
 80181bc:	4604      	mov	r4, r0
 80181be:	a804      	add	r0, sp, #16
 80181c0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80181c4:	f003 faa6 	bl	801b714 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80181c8:	9b04      	ldr	r3, [sp, #16]
 80181ca:	a906      	add	r1, sp, #24
 80181cc:	a803      	add	r0, sp, #12
 80181ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80181d2:	9b05      	ldr	r3, [sp, #20]
 80181d4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80181d8:	f003 faea 	bl	801b7b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80181dc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80181e0:	f104 001c 	add.w	r0, r4, #28
 80181e4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80181e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80181ec:	b189      	cbz	r1, 8018212 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80181ee:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80181f2:	9300      	str	r3, [sp, #0]
 80181f4:	4613      	mov	r3, r2
 80181f6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80181fa:	462a      	mov	r2, r5
 80181fc:	f00d fdc2 	bl	8025d84 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018200:	b128      	cbz	r0, 801820e <_ZN8touchgfx3HAL5touchEll+0x56>
 8018202:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018206:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018208:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801820c:	6623      	str	r3, [r4, #96]	; 0x60
 801820e:	b007      	add	sp, #28
 8018210:	bd30      	pop	{r4, r5, pc}
 8018212:	f00d fdfb 	bl	8025e0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018216:	2301      	movs	r3, #1
 8018218:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801821c:	e7f1      	b.n	8018202 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801821e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801821e:	b570      	push	{r4, r5, r6, lr}
 8018220:	2b00      	cmp	r3, #0
 8018222:	d050      	beq.n	80182c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018224:	ea81 0002 	eor.w	r0, r1, r2
 8018228:	07c6      	lsls	r6, r0, #31
 801822a:	d508      	bpl.n	801823e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801822c:	3a01      	subs	r2, #1
 801822e:	18cc      	adds	r4, r1, r3
 8018230:	42a1      	cmp	r1, r4
 8018232:	d048      	beq.n	80182c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018234:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018238:	f801 0b01 	strb.w	r0, [r1], #1
 801823c:	e7f8      	b.n	8018230 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801823e:	07d5      	lsls	r5, r2, #31
 8018240:	bf42      	ittt	mi
 8018242:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018246:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801824a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801824e:	2b01      	cmp	r3, #1
 8018250:	d915      	bls.n	801827e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018252:	ea82 0001 	eor.w	r0, r2, r1
 8018256:	0784      	lsls	r4, r0, #30
 8018258:	d02d      	beq.n	80182b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801825a:	1e94      	subs	r4, r2, #2
 801825c:	4608      	mov	r0, r1
 801825e:	18ce      	adds	r6, r1, r3
 8018260:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8018264:	f820 5b02 	strh.w	r5, [r0], #2
 8018268:	1a35      	subs	r5, r6, r0
 801826a:	2d01      	cmp	r5, #1
 801826c:	d8f8      	bhi.n	8018260 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801826e:	1e98      	subs	r0, r3, #2
 8018270:	f003 0301 	and.w	r3, r3, #1
 8018274:	f020 0001 	bic.w	r0, r0, #1
 8018278:	3002      	adds	r0, #2
 801827a:	4401      	add	r1, r0
 801827c:	4402      	add	r2, r0
 801827e:	1f14      	subs	r4, r2, #4
 8018280:	4608      	mov	r0, r1
 8018282:	18ce      	adds	r6, r1, r3
 8018284:	1a35      	subs	r5, r6, r0
 8018286:	2d03      	cmp	r5, #3
 8018288:	d810      	bhi.n	80182ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801828a:	089c      	lsrs	r4, r3, #2
 801828c:	00a0      	lsls	r0, r4, #2
 801828e:	4401      	add	r1, r0
 8018290:	3801      	subs	r0, #1
 8018292:	4402      	add	r2, r0
 8018294:	f06f 0003 	mvn.w	r0, #3
 8018298:	fb00 3404 	mla	r4, r0, r4, r3
 801829c:	440c      	add	r4, r1
 801829e:	42a1      	cmp	r1, r4
 80182a0:	d011      	beq.n	80182c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80182a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80182a6:	f801 3b01 	strb.w	r3, [r1], #1
 80182aa:	e7f8      	b.n	801829e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80182ac:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80182b0:	f840 5b04 	str.w	r5, [r0], #4
 80182b4:	e7e6      	b.n	8018284 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80182b6:	0790      	lsls	r0, r2, #30
 80182b8:	d0e1      	beq.n	801827e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80182ba:	f832 0b02 	ldrh.w	r0, [r2], #2
 80182be:	3b02      	subs	r3, #2
 80182c0:	f821 0b02 	strh.w	r0, [r1], #2
 80182c4:	e7db      	b.n	801827e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80182c6:	2001      	movs	r0, #1
 80182c8:	bd70      	pop	{r4, r5, r6, pc}

080182ca <_ZN8touchgfx3HAL7noTouchEv>:
 80182ca:	b510      	push	{r4, lr}
 80182cc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80182d0:	4604      	mov	r4, r0
 80182d2:	b153      	cbz	r3, 80182ea <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80182d4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80182d8:	2101      	movs	r1, #1
 80182da:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80182de:	301c      	adds	r0, #28
 80182e0:	f00d fd94 	bl	8025e0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80182e4:	2300      	movs	r3, #0
 80182e6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80182ea:	bd10      	pop	{r4, pc}

080182ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80182ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182f0:	4605      	mov	r5, r0
 80182f2:	6980      	ldr	r0, [r0, #24]
 80182f4:	b085      	sub	sp, #20
 80182f6:	460f      	mov	r7, r1
 80182f8:	4690      	mov	r8, r2
 80182fa:	4699      	mov	r9, r3
 80182fc:	b930      	cbnz	r0, 801830c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80182fe:	4b1f      	ldr	r3, [pc, #124]	; (801837c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018300:	f44f 7198 	mov.w	r1, #304	; 0x130
 8018304:	4a1e      	ldr	r2, [pc, #120]	; (8018380 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018306:	481f      	ldr	r0, [pc, #124]	; (8018384 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8018308:	f00f fa04 	bl	8027714 <__assert_func>
 801830c:	ac04      	add	r4, sp, #16
 801830e:	2600      	movs	r6, #0
 8018310:	f844 6d04 	str.w	r6, [r4, #-4]!
 8018314:	6806      	ldr	r6, [r0, #0]
 8018316:	9401      	str	r4, [sp, #4]
 8018318:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801831c:	9400      	str	r4, [sp, #0]
 801831e:	6834      	ldr	r4, [r6, #0]
 8018320:	47a0      	blx	r4
 8018322:	4c19      	ldr	r4, [pc, #100]	; (8018388 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8018324:	4606      	mov	r6, r0
 8018326:	f8a4 9000 	strh.w	r9, [r4]
 801832a:	f7f7 fa53 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 801832e:	6803      	ldr	r3, [r0, #0]
 8018330:	6a1b      	ldr	r3, [r3, #32]
 8018332:	4798      	blx	r3
 8018334:	280c      	cmp	r0, #12
 8018336:	d80f      	bhi.n	8018358 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8018338:	e8df f000 	tbb	[pc, r0]
 801833c:	1b1b1207 	.word	0x1b1b1207
 8018340:	1b1b1b1b 	.word	0x1b1b1b1b
 8018344:	1b1b1b1b 	.word	0x1b1b1b1b
 8018348:	1b          	.byte	0x1b
 8018349:	00          	.byte	0x00
 801834a:	8823      	ldrh	r3, [r4, #0]
 801834c:	fb08 7203 	mla	r2, r8, r3, r7
 8018350:	9b03      	ldr	r3, [sp, #12]
 8018352:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018356:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018358:	4630      	mov	r0, r6
 801835a:	b005      	add	sp, #20
 801835c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018360:	8822      	ldrh	r2, [r4, #0]
 8018362:	9b03      	ldr	r3, [sp, #12]
 8018364:	fb08 7202 	mla	r2, r8, r2, r7
 8018368:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801836c:	1a9a      	subs	r2, r3, r2
 801836e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8018370:	e7f2      	b.n	8018358 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8018372:	4b06      	ldr	r3, [pc, #24]	; (801838c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8018374:	f240 114d 	movw	r1, #333	; 0x14d
 8018378:	4a01      	ldr	r2, [pc, #4]	; (8018380 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801837a:	e7c4      	b.n	8018306 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801837c:	0802ae65 	.word	0x0802ae65
 8018380:	0802b176 	.word	0x0802b176
 8018384:	0802aeaa 	.word	0x0802aeaa
 8018388:	2000b416 	.word	0x2000b416
 801838c:	0802aed0 	.word	0x0802aed0

08018390 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8018390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018394:	4698      	mov	r8, r3
 8018396:	6803      	ldr	r3, [r0, #0]
 8018398:	b087      	sub	sp, #28
 801839a:	460e      	mov	r6, r1
 801839c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801839e:	4617      	mov	r7, r2
 80183a0:	4b0d      	ldr	r3, [pc, #52]	; (80183d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80183a2:	4604      	mov	r4, r0
 80183a4:	f8b3 9000 	ldrh.w	r9, [r3]
 80183a8:	f7f7 fa14 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 80183ac:	6803      	ldr	r3, [r0, #0]
 80183ae:	6a1b      	ldr	r3, [r3, #32]
 80183b0:	4798      	blx	r3
 80183b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80183b6:	463a      	mov	r2, r7
 80183b8:	4631      	mov	r1, r6
 80183ba:	9302      	str	r3, [sp, #8]
 80183bc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80183c0:	9301      	str	r3, [sp, #4]
 80183c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80183c6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80183ca:	9300      	str	r3, [sp, #0]
 80183cc:	4620      	mov	r0, r4
 80183ce:	4643      	mov	r3, r8
 80183d0:	47a8      	blx	r5
 80183d2:	b007      	add	sp, #28
 80183d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183d8:	2000b416 	.word	0x2000b416

080183dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80183dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e0:	4606      	mov	r6, r0
 80183e2:	b089      	sub	sp, #36	; 0x24
 80183e4:	4610      	mov	r0, r2
 80183e6:	460c      	mov	r4, r1
 80183e8:	4691      	mov	r9, r2
 80183ea:	4698      	mov	r8, r3
 80183ec:	f005 fa80 	bl	801d8f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80183f0:	2800      	cmp	r0, #0
 80183f2:	f000 8093 	beq.w	801851c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 80183f6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8018534 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80183fa:	ad08      	add	r5, sp, #32
 80183fc:	f8df b138 	ldr.w	fp, [pc, #312]	; 8018538 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8018400:	f8da 0000 	ldr.w	r0, [sl]
 8018404:	4f4a      	ldr	r7, [pc, #296]	; (8018530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8018406:	6802      	ldr	r2, [r0, #0]
 8018408:	6a12      	ldr	r2, [r2, #32]
 801840a:	4790      	blx	r2
 801840c:	f8da 0000 	ldr.w	r0, [sl]
 8018410:	6802      	ldr	r2, [r0, #0]
 8018412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018414:	4790      	blx	r2
 8018416:	f8bb 3000 	ldrh.w	r3, [fp]
 801841a:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801841e:	4628      	mov	r0, r5
 8018420:	9300      	str	r3, [sp, #0]
 8018422:	883b      	ldrh	r3, [r7, #0]
 8018424:	9301      	str	r3, [sp, #4]
 8018426:	f005 fb27 	bl	801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801842a:	f8ab 0000 	strh.w	r0, [fp]
 801842e:	4628      	mov	r0, r5
 8018430:	f005 fb5c 	bl	801daec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018434:	f8da b000 	ldr.w	fp, [sl]
 8018438:	8038      	strh	r0, [r7, #0]
 801843a:	4648      	mov	r0, r9
 801843c:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8018440:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8018444:	9302      	str	r3, [sp, #8]
 8018446:	f005 fa53 	bl	801d8f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801844a:	f8da 2000 	ldr.w	r2, [sl]
 801844e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8018452:	63d0      	str	r0, [r2, #60]	; 0x3c
 8018454:	4620      	mov	r0, r4
 8018456:	6822      	ldr	r2, [r4, #0]
 8018458:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801845c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801845e:	2200      	movs	r2, #0
 8018460:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8018464:	4611      	mov	r1, r2
 8018466:	4798      	blx	r3
 8018468:	2201      	movs	r2, #1
 801846a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801846e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8018472:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8018476:	2a00      	cmp	r2, #0
 8018478:	f104 0204 	add.w	r2, r4, #4
 801847c:	dd51      	ble.n	8018522 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801847e:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8018482:	2900      	cmp	r1, #0
 8018484:	dd4d      	ble.n	8018522 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8018486:	6810      	ldr	r0, [r2, #0]
 8018488:	f10d 0c18 	add.w	ip, sp, #24
 801848c:	6851      	ldr	r1, [r2, #4]
 801848e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018492:	4641      	mov	r1, r8
 8018494:	a806      	add	r0, sp, #24
 8018496:	f7ff fc75 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801849a:	4628      	mov	r0, r5
 801849c:	f005 fc3e 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80184a0:	4680      	mov	r8, r0
 80184a2:	f7f7 f997 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 80184a6:	6802      	ldr	r2, [r0, #0]
 80184a8:	6a12      	ldr	r2, [r2, #32]
 80184aa:	4790      	blx	r2
 80184ac:	4580      	cmp	r8, r0
 80184ae:	d03d      	beq.n	801852c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 80184b0:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80184b2:	b150      	cbz	r0, 80184ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 80184b4:	4628      	mov	r0, r5
 80184b6:	f005 fc31 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80184ba:	4605      	mov	r5, r0
 80184bc:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80184be:	6803      	ldr	r3, [r0, #0]
 80184c0:	6a1b      	ldr	r3, [r3, #32]
 80184c2:	4798      	blx	r3
 80184c4:	1a2b      	subs	r3, r5, r0
 80184c6:	4258      	negs	r0, r3
 80184c8:	4158      	adcs	r0, r3
 80184ca:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80184ce:	2500      	movs	r5, #0
 80184d0:	6963      	ldr	r3, [r4, #20]
 80184d2:	4620      	mov	r0, r4
 80184d4:	6822      	ldr	r2, [r4, #0]
 80184d6:	a906      	add	r1, sp, #24
 80184d8:	6165      	str	r5, [r4, #20]
 80184da:	9303      	str	r3, [sp, #12]
 80184dc:	6892      	ldr	r2, [r2, #8]
 80184de:	4790      	blx	r2
 80184e0:	9b03      	ldr	r3, [sp, #12]
 80184e2:	4620      	mov	r0, r4
 80184e4:	4652      	mov	r2, sl
 80184e6:	6163      	str	r3, [r4, #20]
 80184e8:	4649      	mov	r1, r9
 80184ea:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80184ee:	6823      	ldr	r3, [r4, #0]
 80184f0:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80184f4:	4c0f      	ldr	r4, [pc, #60]	; (8018534 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80184f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184f8:	4798      	blx	r3
 80184fa:	6820      	ldr	r0, [r4, #0]
 80184fc:	9b02      	ldr	r3, [sp, #8]
 80184fe:	9a00      	ldr	r2, [sp, #0]
 8018500:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8018504:	4b0c      	ldr	r3, [pc, #48]	; (8018538 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8018506:	801a      	strh	r2, [r3, #0]
 8018508:	4b09      	ldr	r3, [pc, #36]	; (8018530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801850a:	9a01      	ldr	r2, [sp, #4]
 801850c:	801a      	strh	r2, [r3, #0]
 801850e:	6803      	ldr	r3, [r0, #0]
 8018510:	6a1b      	ldr	r3, [r3, #32]
 8018512:	4798      	blx	r3
 8018514:	6820      	ldr	r0, [r4, #0]
 8018516:	6803      	ldr	r3, [r0, #0]
 8018518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801851a:	4798      	blx	r3
 801851c:	b009      	add	sp, #36	; 0x24
 801851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018522:	ab06      	add	r3, sp, #24
 8018524:	6810      	ldr	r0, [r2, #0]
 8018526:	6851      	ldr	r1, [r2, #4]
 8018528:	c303      	stmia	r3!, {r0, r1}
 801852a:	e7b6      	b.n	801849a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 801852c:	2000      	movs	r0, #0
 801852e:	e7cc      	b.n	80184ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8018530:	2000b418 	.word	0x2000b418
 8018534:	2000b41c 	.word	0x2000b41c
 8018538:	2000b416 	.word	0x2000b416

0801853c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801853c:	4b07      	ldr	r3, [pc, #28]	; (801855c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801853e:	b510      	push	{r4, lr}
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	4604      	mov	r4, r0
 8018544:	b13b      	cbz	r3, 8018556 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018546:	6803      	ldr	r3, [r0, #0]
 8018548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801854a:	4798      	blx	r3
 801854c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801854e:	4283      	cmp	r3, r0
 8018550:	d101      	bne.n	8018556 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018552:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018554:	bd10      	pop	{r4, pc}
 8018556:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018558:	e7fc      	b.n	8018554 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801855a:	bf00      	nop
 801855c:	2000b41a 	.word	0x2000b41a

08018560 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018560:	4b0b      	ldr	r3, [pc, #44]	; (8018590 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8018562:	b510      	push	{r4, lr}
 8018564:	781b      	ldrb	r3, [r3, #0]
 8018566:	4604      	mov	r4, r0
 8018568:	b95b      	cbnz	r3, 8018582 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801856a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801856e:	2b02      	cmp	r3, #2
 8018570:	d007      	beq.n	8018582 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018572:	6840      	ldr	r0, [r0, #4]
 8018574:	f000 fbc8 	bl	8018d08 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8018578:	b118      	cbz	r0, 8018582 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801857a:	6862      	ldr	r2, [r4, #4]
 801857c:	7a53      	ldrb	r3, [r2, #9]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d0fc      	beq.n	801857c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018582:	f7fd fc8f 	bl	8015ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018586:	4620      	mov	r0, r4
 8018588:	f7ff ffd8 	bl	801853c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801858c:	bd10      	pop	{r4, pc}
 801858e:	bf00      	nop
 8018590:	2000b41a 	.word	0x2000b41a

08018594 <_ZN8touchgfx3HAL10initializeEv>:
 8018594:	b510      	push	{r4, lr}
 8018596:	4604      	mov	r4, r0
 8018598:	f7fd fc4e 	bl	8015e38 <_ZN8touchgfx10OSWrappers10initializeEv>
 801859c:	6860      	ldr	r0, [r4, #4]
 801859e:	6803      	ldr	r3, [r0, #0]
 80185a0:	68db      	ldr	r3, [r3, #12]
 80185a2:	4798      	blx	r3
 80185a4:	68e0      	ldr	r0, [r4, #12]
 80185a6:	6803      	ldr	r3, [r0, #0]
 80185a8:	689b      	ldr	r3, [r3, #8]
 80185aa:	4798      	blx	r3
 80185ac:	6823      	ldr	r3, [r4, #0]
 80185ae:	4620      	mov	r0, r4
 80185b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185b6:	4718      	bx	r3

080185b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80185b8:	b508      	push	{r3, lr}
 80185ba:	290c      	cmp	r1, #12
 80185bc:	d817      	bhi.n	80185ee <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80185be:	e8df f001 	tbb	[pc, r1]
 80185c2:	090b      	.short	0x090b
 80185c4:	0d0d0d07 	.word	0x0d0d0d07
 80185c8:	1414140d 	.word	0x1414140d
 80185cc:	1414      	.short	0x1414
 80185ce:	0d          	.byte	0x0d
 80185cf:	00          	.byte	0x00
 80185d0:	2020      	movs	r0, #32
 80185d2:	bd08      	pop	{r3, pc}
 80185d4:	2018      	movs	r0, #24
 80185d6:	e7fc      	b.n	80185d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80185d8:	2010      	movs	r0, #16
 80185da:	e7fa      	b.n	80185d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80185dc:	4b05      	ldr	r3, [pc, #20]	; (80185f4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80185de:	f44f 710c 	mov.w	r1, #560	; 0x230
 80185e2:	4a05      	ldr	r2, [pc, #20]	; (80185f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80185e4:	4805      	ldr	r0, [pc, #20]	; (80185fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80185e6:	f00f f895 	bl	8027714 <__assert_func>
 80185ea:	2008      	movs	r0, #8
 80185ec:	e7f1      	b.n	80185d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80185ee:	2000      	movs	r0, #0
 80185f0:	e7ef      	b.n	80185d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80185f2:	bf00      	nop
 80185f4:	0802afa3 	.word	0x0802afa3
 80185f8:	0802b338 	.word	0x0802b338
 80185fc:	0802aeaa 	.word	0x0802aeaa

08018600 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018600:	b570      	push	{r4, r5, r6, lr}
 8018602:	460d      	mov	r5, r1
 8018604:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018608:	4616      	mov	r6, r2
 801860a:	461c      	mov	r4, r3
 801860c:	f7ff ffd4 	bl	80185b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018610:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018614:	10c0      	asrs	r0, r0, #3
 8018616:	fb06 5101 	mla	r1, r6, r1, r5
 801861a:	fb00 4001 	mla	r0, r0, r1, r4
 801861e:	bd70      	pop	{r4, r5, r6, pc}

08018620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8018620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018624:	b08a      	sub	sp, #40	; 0x28
 8018626:	f04f 0c00 	mov.w	ip, #0
 801862a:	4604      	mov	r4, r0
 801862c:	469a      	mov	sl, r3
 801862e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8018632:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8018636:	f1b8 0f02 	cmp.w	r8, #2
 801863a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801863e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018642:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018646:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801864a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801864e:	f8cd c020 	str.w	ip, [sp, #32]
 8018652:	d030      	beq.n	80186b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8018654:	2bff      	cmp	r3, #255	; 0xff
 8018656:	d12c      	bne.n	80186b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8018658:	4560      	cmp	r0, ip
 801865a:	bf14      	ite	ne
 801865c:	2004      	movne	r0, #4
 801865e:	2001      	moveq	r0, #1
 8018660:	9204      	str	r2, [sp, #16]
 8018662:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018666:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801866a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801866e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018672:	f8ad 501a 	strh.w	r5, [sp, #26]
 8018676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801867a:	4620      	mov	r0, r4
 801867c:	f7ff ff5e 	bl	801853c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018680:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018684:	4603      	mov	r3, r0
 8018686:	4651      	mov	r1, sl
 8018688:	4620      	mov	r0, r4
 801868a:	e9cd 9700 	strd	r9, r7, [sp]
 801868e:	f7ff ffb7 	bl	8018600 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018692:	f8ad 901e 	strh.w	r9, [sp, #30]
 8018696:	9005      	str	r0, [sp, #20]
 8018698:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801869c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80186a0:	b106      	cbz	r6, 80186a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 80186a2:	b98d      	cbnz	r5, 80186c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 80186a4:	4b12      	ldr	r3, [pc, #72]	; (80186f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 80186a6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80186aa:	4a12      	ldr	r2, [pc, #72]	; (80186f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80186ac:	4812      	ldr	r0, [pc, #72]	; (80186f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80186ae:	f00f f831 	bl	8027714 <__assert_func>
 80186b2:	2004      	movs	r0, #4
 80186b4:	e7d4      	b.n	8018660 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80186b6:	2bff      	cmp	r3, #255	; 0xff
 80186b8:	d104      	bne.n	80186c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80186ba:	2800      	cmp	r0, #0
 80186bc:	bf14      	ite	ne
 80186be:	2040      	movne	r0, #64	; 0x40
 80186c0:	2020      	moveq	r0, #32
 80186c2:	e7cd      	b.n	8018660 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80186c4:	2040      	movs	r0, #64	; 0x40
 80186c6:	e7cb      	b.n	8018660 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80186c8:	6823      	ldr	r3, [r4, #0]
 80186ca:	4620      	mov	r0, r4
 80186cc:	9d02      	ldr	r5, [sp, #8]
 80186ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186d0:	4798      	blx	r3
 80186d2:	4228      	tst	r0, r5
 80186d4:	d104      	bne.n	80186e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80186d6:	4b09      	ldr	r3, [pc, #36]	; (80186fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80186d8:	f240 11b1 	movw	r1, #433	; 0x1b1
 80186dc:	4a05      	ldr	r2, [pc, #20]	; (80186f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80186de:	e7e5      	b.n	80186ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80186e0:	6860      	ldr	r0, [r4, #4]
 80186e2:	a902      	add	r1, sp, #8
 80186e4:	6803      	ldr	r3, [r0, #0]
 80186e6:	685b      	ldr	r3, [r3, #4]
 80186e8:	4798      	blx	r3
 80186ea:	b00a      	add	sp, #40	; 0x28
 80186ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186f0:	0802af26 	.word	0x0802af26
 80186f4:	0802b1da 	.word	0x0802b1da
 80186f8:	0802aeaa 	.word	0x0802aeaa
 80186fc:	0802af5e 	.word	0x0802af5e

08018700 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8018700:	b510      	push	{r4, lr}
 8018702:	b08a      	sub	sp, #40	; 0x28
 8018704:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8018708:	9408      	str	r4, [sp, #32]
 801870a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801870e:	9407      	str	r4, [sp, #28]
 8018710:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8018714:	9406      	str	r4, [sp, #24]
 8018716:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801871a:	9405      	str	r4, [sp, #20]
 801871c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8018720:	9404      	str	r4, [sp, #16]
 8018722:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8018726:	9403      	str	r4, [sp, #12]
 8018728:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801872c:	9402      	str	r4, [sp, #8]
 801872e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8018732:	e9cd 3400 	strd	r3, r4, [sp]
 8018736:	4613      	mov	r3, r2
 8018738:	2200      	movs	r2, #0
 801873a:	f7ff ff71 	bl	8018620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801873e:	b00a      	add	sp, #40	; 0x28
 8018740:	bd10      	pop	{r4, pc}
	...

08018744 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8018744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018746:	b08b      	sub	sp, #44	; 0x2c
 8018748:	4616      	mov	r6, r2
 801874a:	460d      	mov	r5, r1
 801874c:	461f      	mov	r7, r3
 801874e:	4604      	mov	r4, r0
 8018750:	f7f7 f840 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 8018754:	6803      	ldr	r3, [r0, #0]
 8018756:	6a1b      	ldr	r3, [r3, #32]
 8018758:	4798      	blx	r3
 801875a:	4b0e      	ldr	r3, [pc, #56]	; (8018794 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801875c:	2200      	movs	r2, #0
 801875e:	4629      	mov	r1, r5
 8018760:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018764:	881b      	ldrh	r3, [r3, #0]
 8018766:	4620      	mov	r0, r4
 8018768:	9306      	str	r3, [sp, #24]
 801876a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801876e:	9305      	str	r3, [sp, #20]
 8018770:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018774:	9304      	str	r3, [sp, #16]
 8018776:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801877a:	9303      	str	r3, [sp, #12]
 801877c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018780:	9302      	str	r3, [sp, #8]
 8018782:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018786:	e9cd 7300 	strd	r7, r3, [sp]
 801878a:	4633      	mov	r3, r6
 801878c:	f7ff ff48 	bl	8018620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018790:	b00b      	add	sp, #44	; 0x2c
 8018792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018794:	2000b416 	.word	0x2000b416

08018798 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8018798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801879c:	461f      	mov	r7, r3
 801879e:	4b14      	ldr	r3, [pc, #80]	; (80187f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80187a0:	b08a      	sub	sp, #40	; 0x28
 80187a2:	4616      	mov	r6, r2
 80187a4:	f8b3 8000 	ldrh.w	r8, [r3]
 80187a8:	460d      	mov	r5, r1
 80187aa:	4604      	mov	r4, r0
 80187ac:	f7f7 f812 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 80187b0:	6803      	ldr	r3, [r0, #0]
 80187b2:	6a1b      	ldr	r3, [r3, #32]
 80187b4:	4798      	blx	r3
 80187b6:	2302      	movs	r3, #2
 80187b8:	9008      	str	r0, [sp, #32]
 80187ba:	2200      	movs	r2, #0
 80187bc:	4629      	mov	r1, r5
 80187be:	4620      	mov	r0, r4
 80187c0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80187c4:	2301      	movs	r3, #1
 80187c6:	9305      	str	r3, [sp, #20]
 80187c8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80187cc:	9304      	str	r3, [sp, #16]
 80187ce:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80187d2:	9303      	str	r3, [sp, #12]
 80187d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80187d8:	9302      	str	r3, [sp, #8]
 80187da:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80187de:	e9cd 7300 	strd	r7, r3, [sp]
 80187e2:	4633      	mov	r3, r6
 80187e4:	f7ff ff1c 	bl	8018620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80187e8:	b00a      	add	sp, #40	; 0x28
 80187ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187ee:	bf00      	nop
 80187f0:	2000b416 	.word	0x2000b416

080187f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80187f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f8:	b08b      	sub	sp, #44	; 0x2c
 80187fa:	469b      	mov	fp, r3
 80187fc:	4604      	mov	r4, r0
 80187fe:	4692      	mov	sl, r2
 8018800:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018804:	2600      	movs	r6, #0
 8018806:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801880a:	4689      	mov	r9, r1
 801880c:	2fff      	cmp	r7, #255	; 0xff
 801880e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018812:	9608      	str	r6, [sp, #32]
 8018814:	bf14      	ite	ne
 8018816:	2308      	movne	r3, #8
 8018818:	2302      	moveq	r3, #2
 801881a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801881e:	f7ff fe8d 	bl	801853c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018822:	465a      	mov	r2, fp
 8018824:	4603      	mov	r3, r0
 8018826:	4651      	mov	r1, sl
 8018828:	4620      	mov	r0, r4
 801882a:	e9cd 8500 	strd	r8, r5, [sp]
 801882e:	f7ff fee7 	bl	8018600 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018832:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018836:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801883a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801883e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018842:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8018846:	f8ad 301a 	strh.w	r3, [sp, #26]
 801884a:	6823      	ldr	r3, [r4, #0]
 801884c:	9d02      	ldr	r5, [sp, #8]
 801884e:	9005      	str	r0, [sp, #20]
 8018850:	4620      	mov	r0, r4
 8018852:	f8ad 601c 	strh.w	r6, [sp, #28]
 8018856:	f8ad 801e 	strh.w	r8, [sp, #30]
 801885a:	f8cd 9020 	str.w	r9, [sp, #32]
 801885e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018864:	4798      	blx	r3
 8018866:	4228      	tst	r0, r5
 8018868:	d106      	bne.n	8018878 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801886a:	4b07      	ldr	r3, [pc, #28]	; (8018888 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801886c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8018870:	4a06      	ldr	r2, [pc, #24]	; (801888c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8018872:	4807      	ldr	r0, [pc, #28]	; (8018890 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8018874:	f00e ff4e 	bl	8027714 <__assert_func>
 8018878:	6860      	ldr	r0, [r4, #4]
 801887a:	a902      	add	r1, sp, #8
 801887c:	6803      	ldr	r3, [r0, #0]
 801887e:	685b      	ldr	r3, [r3, #4]
 8018880:	4798      	blx	r3
 8018882:	b00b      	add	sp, #44	; 0x2c
 8018884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018888:	0802af5e 	.word	0x0802af5e
 801888c:	0802b2a3 	.word	0x0802b2a3
 8018890:	0802aeaa 	.word	0x0802aeaa

08018894 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018898:	461f      	mov	r7, r3
 801889a:	4b0b      	ldr	r3, [pc, #44]	; (80188c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801889c:	460d      	mov	r5, r1
 801889e:	4616      	mov	r6, r2
 80188a0:	f8b3 8000 	ldrh.w	r8, [r3]
 80188a4:	4604      	mov	r4, r0
 80188a6:	f7f6 ff95 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 80188aa:	6803      	ldr	r3, [r0, #0]
 80188ac:	6a1b      	ldr	r3, [r3, #32]
 80188ae:	4798      	blx	r3
 80188b0:	463b      	mov	r3, r7
 80188b2:	4632      	mov	r2, r6
 80188b4:	4629      	mov	r1, r5
 80188b6:	e9cd 8000 	strd	r8, r0, [sp]
 80188ba:	4620      	mov	r0, r4
 80188bc:	f7ff fea0 	bl	8018600 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80188c0:	b002      	add	sp, #8
 80188c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188c6:	bf00      	nop
 80188c8:	2000b416 	.word	0x2000b416

080188cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80188cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188d0:	4698      	mov	r8, r3
 80188d2:	b088      	sub	sp, #32
 80188d4:	2300      	movs	r3, #0
 80188d6:	4617      	mov	r7, r2
 80188d8:	4604      	mov	r4, r0
 80188da:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80188de:	9306      	str	r3, [sp, #24]
 80188e0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80188e4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80188e8:	f8ad 6010 	strh.w	r6, [sp, #16]
 80188ec:	f8ad 5012 	strh.w	r5, [sp, #18]
 80188f0:	e9cd 3100 	strd	r3, r1, [sp]
 80188f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80188f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80188fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018900:	f88d 301c 	strb.w	r3, [sp, #28]
 8018904:	f7ff fe1a 	bl	801853c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018908:	4642      	mov	r2, r8
 801890a:	4603      	mov	r3, r0
 801890c:	4639      	mov	r1, r7
 801890e:	4620      	mov	r0, r4
 8018910:	f7ff ffc0 	bl	8018894 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018914:	4b16      	ldr	r3, [pc, #88]	; (8018970 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8018916:	9003      	str	r0, [sp, #12]
 8018918:	881b      	ldrh	r3, [r3, #0]
 801891a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801891e:	f7f6 ff59 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 8018922:	6803      	ldr	r3, [r0, #0]
 8018924:	6a1b      	ldr	r3, [r3, #32]
 8018926:	4798      	blx	r3
 8018928:	f88d 001e 	strb.w	r0, [sp, #30]
 801892c:	f88d 001d 	strb.w	r0, [sp, #29]
 8018930:	b106      	cbz	r6, 8018934 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8018932:	b935      	cbnz	r5, 8018942 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8018934:	4b0f      	ldr	r3, [pc, #60]	; (8018974 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8018936:	f240 11cd 	movw	r1, #461	; 0x1cd
 801893a:	4a0f      	ldr	r2, [pc, #60]	; (8018978 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801893c:	480f      	ldr	r0, [pc, #60]	; (801897c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801893e:	f00e fee9 	bl	8027714 <__assert_func>
 8018942:	6823      	ldr	r3, [r4, #0]
 8018944:	4620      	mov	r0, r4
 8018946:	9d00      	ldr	r5, [sp, #0]
 8018948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801894a:	4798      	blx	r3
 801894c:	4228      	tst	r0, r5
 801894e:	d104      	bne.n	801895a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8018950:	4b0b      	ldr	r3, [pc, #44]	; (8018980 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8018952:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8018956:	4a08      	ldr	r2, [pc, #32]	; (8018978 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8018958:	e7f0      	b.n	801893c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801895a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801895c:	4669      	mov	r1, sp
 801895e:	6860      	ldr	r0, [r4, #4]
 8018960:	9306      	str	r3, [sp, #24]
 8018962:	6803      	ldr	r3, [r0, #0]
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	4798      	blx	r3
 8018968:	b008      	add	sp, #32
 801896a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801896e:	bf00      	nop
 8018970:	2000b416 	.word	0x2000b416
 8018974:	0802af26 	.word	0x0802af26
 8018978:	0802b08c 	.word	0x0802b08c
 801897c:	0802aeaa 	.word	0x0802aeaa
 8018980:	0802af5e 	.word	0x0802af5e

08018984 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018984:	b570      	push	{r4, r5, r6, lr}
 8018986:	b08a      	sub	sp, #40	; 0x28
 8018988:	4604      	mov	r4, r0
 801898a:	466b      	mov	r3, sp
 801898c:	e883 0006 	stmia.w	r3, {r1, r2}
 8018990:	4b1f      	ldr	r3, [pc, #124]	; (8018a10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8018992:	781b      	ldrb	r3, [r3, #0]
 8018994:	b933      	cbnz	r3, 80189a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8018996:	4b1f      	ldr	r3, [pc, #124]	; (8018a14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018998:	f240 11f9 	movw	r1, #505	; 0x1f9
 801899c:	4a1e      	ldr	r2, [pc, #120]	; (8018a18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801899e:	481f      	ldr	r0, [pc, #124]	; (8018a1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80189a0:	f00e feb8 	bl	8027714 <__assert_func>
 80189a4:	2300      	movs	r3, #0
 80189a6:	f8bd 5000 	ldrh.w	r5, [sp]
 80189aa:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80189ae:	9308      	str	r3, [sp, #32]
 80189b0:	2301      	movs	r3, #1
 80189b2:	9302      	str	r3, [sp, #8]
 80189b4:	6803      	ldr	r3, [r0, #0]
 80189b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189b8:	4798      	blx	r3
 80189ba:	4632      	mov	r2, r6
 80189bc:	4629      	mov	r1, r5
 80189be:	4603      	mov	r3, r0
 80189c0:	4620      	mov	r0, r4
 80189c2:	f7ff ff67 	bl	8018894 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80189c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80189c8:	9003      	str	r0, [sp, #12]
 80189ca:	9305      	str	r3, [sp, #20]
 80189cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80189d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80189d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80189d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80189dc:	4b10      	ldr	r3, [pc, #64]	; (8018a20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80189de:	881b      	ldrh	r3, [r3, #0]
 80189e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80189e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80189e8:	f7f6 fef4 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 80189ec:	6803      	ldr	r3, [r0, #0]
 80189ee:	6a1b      	ldr	r3, [r3, #32]
 80189f0:	4798      	blx	r3
 80189f2:	23ff      	movs	r3, #255	; 0xff
 80189f4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80189f8:	a902      	add	r1, sp, #8
 80189fa:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80189fe:	6860      	ldr	r0, [r4, #4]
 8018a00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018a04:	6803      	ldr	r3, [r0, #0]
 8018a06:	685b      	ldr	r3, [r3, #4]
 8018a08:	4798      	blx	r3
 8018a0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018a0c:	b00a      	add	sp, #40	; 0x28
 8018a0e:	bd70      	pop	{r4, r5, r6, pc}
 8018a10:	2000b41b 	.word	0x2000b41b
 8018a14:	0802adf7 	.word	0x0802adf7
 8018a18:	0802b130 	.word	0x0802b130
 8018a1c:	0802aeaa 	.word	0x0802aeaa
 8018a20:	2000b416 	.word	0x2000b416

08018a24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a26:	b08b      	sub	sp, #44	; 0x2c
 8018a28:	4604      	mov	r4, r0
 8018a2a:	466d      	mov	r5, sp
 8018a2c:	e885 0006 	stmia.w	r5, {r1, r2}
 8018a30:	461d      	mov	r5, r3
 8018a32:	2300      	movs	r3, #0
 8018a34:	f8bd 6000 	ldrh.w	r6, [sp]
 8018a38:	9308      	str	r3, [sp, #32]
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018a40:	9302      	str	r3, [sp, #8]
 8018a42:	6803      	ldr	r3, [r0, #0]
 8018a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a46:	4798      	blx	r3
 8018a48:	463a      	mov	r2, r7
 8018a4a:	4631      	mov	r1, r6
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	4620      	mov	r0, r4
 8018a50:	f7ff ff20 	bl	8018894 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018a54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018a58:	9003      	str	r0, [sp, #12]
 8018a5a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018a5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018a62:	9505      	str	r5, [sp, #20]
 8018a64:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018a68:	4b0d      	ldr	r3, [pc, #52]	; (8018aa0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8018a6a:	881b      	ldrh	r3, [r3, #0]
 8018a6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018a70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a72:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018a76:	f7f6 fead 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 8018a7a:	6803      	ldr	r3, [r0, #0]
 8018a7c:	6a1b      	ldr	r3, [r3, #32]
 8018a7e:	4798      	blx	r3
 8018a80:	23ff      	movs	r3, #255	; 0xff
 8018a82:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018a86:	a902      	add	r1, sp, #8
 8018a88:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018a8c:	6860      	ldr	r0, [r4, #4]
 8018a8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018a92:	6803      	ldr	r3, [r0, #0]
 8018a94:	685b      	ldr	r3, [r3, #4]
 8018a96:	4798      	blx	r3
 8018a98:	4628      	mov	r0, r5
 8018a9a:	b00b      	add	sp, #44	; 0x2c
 8018a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a9e:	bf00      	nop
 8018aa0:	2000b416 	.word	0x2000b416

08018aa4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018aa4:	b570      	push	{r4, r5, r6, lr}
 8018aa6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018aaa:	4604      	mov	r4, r0
 8018aac:	b19b      	cbz	r3, 8018ad6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018aae:	2002      	movs	r0, #2
 8018ab0:	f7fc ff3c 	bl	801592c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	4620      	mov	r0, r4
 8018ab8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018abc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018ac0:	6823      	ldr	r3, [r4, #0]
 8018ac2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8018ac6:	f7ff fd39 	bl	801853c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018aca:	4601      	mov	r1, r0
 8018acc:	4620      	mov	r0, r4
 8018ace:	462b      	mov	r3, r5
 8018ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ad4:	4718      	bx	r3
 8018ad6:	bd70      	pop	{r4, r5, r6, pc}

08018ad8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8018ad8:	4770      	bx	lr

08018ada <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018ada:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018ade:	1a13      	subs	r3, r2, r0
 8018ae0:	4258      	negs	r0, r3
 8018ae2:	4158      	adcs	r0, r3
 8018ae4:	4770      	bx	lr

08018ae6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018ae6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018aea:	1a9b      	subs	r3, r3, r2
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	bfdc      	itt	le
 8018af0:	6882      	ldrle	r2, [r0, #8]
 8018af2:	189b      	addle	r3, r3, r2
 8018af4:	2b01      	cmp	r3, #1
 8018af6:	bfcc      	ite	gt
 8018af8:	2000      	movgt	r0, #0
 8018afa:	2001      	movle	r0, #1
 8018afc:	4770      	bx	lr

08018afe <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018afe:	6902      	ldr	r2, [r0, #16]
 8018b00:	6840      	ldr	r0, [r0, #4]
 8018b02:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8018b06:	4770      	bx	lr

08018b08 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018b08:	6803      	ldr	r3, [r0, #0]
 8018b0a:	691b      	ldr	r3, [r3, #16]
 8018b0c:	4718      	bx	r3

08018b0e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018b0e:	4770      	bx	lr

08018b10 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018b10:	4770      	bx	lr
	...

08018b14 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018b14:	2301      	movs	r3, #1
 8018b16:	b570      	push	{r4, r5, r6, lr}
 8018b18:	7203      	strb	r3, [r0, #8]
 8018b1a:	4604      	mov	r4, r0
 8018b1c:	6840      	ldr	r0, [r0, #4]
 8018b1e:	6803      	ldr	r3, [r0, #0]
 8018b20:	699b      	ldr	r3, [r3, #24]
 8018b22:	4798      	blx	r3
 8018b24:	6803      	ldr	r3, [r0, #0]
 8018b26:	4605      	mov	r5, r0
 8018b28:	2b08      	cmp	r3, #8
 8018b2a:	d01e      	beq.n	8018b6a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8018b2c:	d80b      	bhi.n	8018b46 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018b2e:	2b02      	cmp	r3, #2
 8018b30:	d027      	beq.n	8018b82 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8018b32:	2b04      	cmp	r3, #4
 8018b34:	d011      	beq.n	8018b5a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8018b36:	2b01      	cmp	r3, #1
 8018b38:	d028      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018b3a:	4b17      	ldr	r3, [pc, #92]	; (8018b98 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8018b3c:	218b      	movs	r1, #139	; 0x8b
 8018b3e:	4a17      	ldr	r2, [pc, #92]	; (8018b9c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8018b40:	4817      	ldr	r0, [pc, #92]	; (8018ba0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8018b42:	f00e fde7 	bl	8027714 <__assert_func>
 8018b46:	2b40      	cmp	r3, #64	; 0x40
 8018b48:	d020      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018b4a:	d801      	bhi.n	8018b50 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018b4c:	2b20      	cmp	r3, #32
 8018b4e:	e7f3      	b.n	8018b38 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018b50:	2b80      	cmp	r3, #128	; 0x80
 8018b52:	d01b      	beq.n	8018b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018b58:	e7ee      	b.n	8018b38 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018b5a:	6823      	ldr	r3, [r4, #0]
 8018b5c:	7f01      	ldrb	r1, [r0, #28]
 8018b5e:	4620      	mov	r0, r4
 8018b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b62:	4798      	blx	r3
 8018b64:	6823      	ldr	r3, [r4, #0]
 8018b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b68:	e006      	b.n	8018b78 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018b6a:	6823      	ldr	r3, [r4, #0]
 8018b6c:	7f01      	ldrb	r1, [r0, #28]
 8018b6e:	4620      	mov	r0, r4
 8018b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b72:	4798      	blx	r3
 8018b74:	6823      	ldr	r3, [r4, #0]
 8018b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b78:	4629      	mov	r1, r5
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b80:	4718      	bx	r3
 8018b82:	6823      	ldr	r3, [r4, #0]
 8018b84:	4620      	mov	r0, r4
 8018b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b88:	4798      	blx	r3
 8018b8a:	e7f3      	b.n	8018b74 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8018b8c:	6823      	ldr	r3, [r4, #0]
 8018b8e:	4620      	mov	r0, r4
 8018b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b92:	4798      	blx	r3
 8018b94:	e7e6      	b.n	8018b64 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8018b96:	bf00      	nop
 8018b98:	0802b381 	.word	0x0802b381
 8018b9c:	0802b490 	.word	0x0802b490
 8018ba0:	0802b3a6 	.word	0x0802b3a6

08018ba4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018ba4:	b570      	push	{r4, r5, r6, lr}
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	460e      	mov	r6, r1
 8018baa:	6860      	ldr	r0, [r4, #4]
 8018bac:	6803      	ldr	r3, [r0, #0]
 8018bae:	685b      	ldr	r3, [r3, #4]
 8018bb0:	4798      	blx	r3
 8018bb2:	2800      	cmp	r0, #0
 8018bb4:	d1f9      	bne.n	8018baa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018bb6:	4d0b      	ldr	r5, [pc, #44]	; (8018be4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8018bb8:	6828      	ldr	r0, [r5, #0]
 8018bba:	6803      	ldr	r3, [r0, #0]
 8018bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018bbe:	4798      	blx	r3
 8018bc0:	f7fd f98a 	bl	8015ed8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018bc4:	6860      	ldr	r0, [r4, #4]
 8018bc6:	4631      	mov	r1, r6
 8018bc8:	6803      	ldr	r3, [r0, #0]
 8018bca:	689b      	ldr	r3, [r3, #8]
 8018bcc:	4798      	blx	r3
 8018bce:	6823      	ldr	r3, [r4, #0]
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bd4:	4798      	blx	r3
 8018bd6:	6828      	ldr	r0, [r5, #0]
 8018bd8:	6803      	ldr	r3, [r0, #0]
 8018bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018be0:	4718      	bx	r3
 8018be2:	bf00      	nop
 8018be4:	2000b41c 	.word	0x2000b41c

08018be8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018be8:	b508      	push	{r3, lr}
 8018bea:	f7fd f95b 	bl	8015ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018bf2:	f7fd b965 	b.w	8015ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018bf6 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018bf6:	b510      	push	{r4, lr}
 8018bf8:	4604      	mov	r4, r0
 8018bfa:	6840      	ldr	r0, [r0, #4]
 8018bfc:	6803      	ldr	r3, [r0, #0]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	4798      	blx	r3
 8018c02:	b948      	cbnz	r0, 8018c18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c04:	7a63      	ldrb	r3, [r4, #9]
 8018c06:	b13b      	cbz	r3, 8018c18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c08:	7a23      	ldrb	r3, [r4, #8]
 8018c0a:	b92b      	cbnz	r3, 8018c18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c0c:	6823      	ldr	r3, [r4, #0]
 8018c0e:	4620      	mov	r0, r4
 8018c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c16:	4718      	bx	r3
 8018c18:	bd10      	pop	{r4, pc}
	...

08018c1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018c1c:	b510      	push	{r4, lr}
 8018c1e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8018c22:	1b12      	subs	r2, r2, r4
 8018c24:	2a00      	cmp	r2, #0
 8018c26:	bfdc      	itt	le
 8018c28:	6883      	ldrle	r3, [r0, #8]
 8018c2a:	18d2      	addle	r2, r2, r3
 8018c2c:	2a01      	cmp	r2, #1
 8018c2e:	dd18      	ble.n	8018c62 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8018c30:	6843      	ldr	r3, [r0, #4]
 8018c32:	f101 021c 	add.w	r2, r1, #28
 8018c36:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8018c3a:	f851 4b04 	ldr.w	r4, [r1], #4
 8018c3e:	4291      	cmp	r1, r2
 8018c40:	f843 4b04 	str.w	r4, [r3], #4
 8018c44:	d1f9      	bne.n	8018c3a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8018c46:	880a      	ldrh	r2, [r1, #0]
 8018c48:	801a      	strh	r2, [r3, #0]
 8018c4a:	788a      	ldrb	r2, [r1, #2]
 8018c4c:	709a      	strb	r2, [r3, #2]
 8018c4e:	68c3      	ldr	r3, [r0, #12]
 8018c50:	6882      	ldr	r2, [r0, #8]
 8018c52:	f3bf 8f5b 	dmb	ish
 8018c56:	3301      	adds	r3, #1
 8018c58:	429a      	cmp	r2, r3
 8018c5a:	bfd8      	it	le
 8018c5c:	1a9b      	suble	r3, r3, r2
 8018c5e:	60c3      	str	r3, [r0, #12]
 8018c60:	bd10      	pop	{r4, pc}
 8018c62:	4b03      	ldr	r3, [pc, #12]	; (8018c70 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8018c64:	2139      	movs	r1, #57	; 0x39
 8018c66:	4a03      	ldr	r2, [pc, #12]	; (8018c74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8018c68:	4803      	ldr	r0, [pc, #12]	; (8018c78 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8018c6a:	f00e fd53 	bl	8027714 <__assert_func>
 8018c6e:	bf00      	nop
 8018c70:	0802b3cc 	.word	0x0802b3cc
 8018c74:	0802b4c0 	.word	0x0802b4c0
 8018c78:	0802b3a6 	.word	0x0802b3a6

08018c7c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018c7c:	b510      	push	{r4, lr}
 8018c7e:	6803      	ldr	r3, [r0, #0]
 8018c80:	4604      	mov	r4, r0
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	4798      	blx	r3
 8018c86:	b128      	cbz	r0, 8018c94 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8018c88:	4b07      	ldr	r3, [pc, #28]	; (8018ca8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8018c8a:	213f      	movs	r1, #63	; 0x3f
 8018c8c:	4a07      	ldr	r2, [pc, #28]	; (8018cac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018c8e:	4808      	ldr	r0, [pc, #32]	; (8018cb0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8018c90:	f00e fd40 	bl	8027714 <__assert_func>
 8018c94:	6923      	ldr	r3, [r4, #16]
 8018c96:	68a2      	ldr	r2, [r4, #8]
 8018c98:	f3bf 8f5b 	dmb	ish
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	429a      	cmp	r2, r3
 8018ca0:	bfd8      	it	le
 8018ca2:	1a9b      	suble	r3, r3, r2
 8018ca4:	6123      	str	r3, [r4, #16]
 8018ca6:	bd10      	pop	{r4, pc}
 8018ca8:	0802b3ef 	.word	0x0802b3ef
 8018cac:	0802b50e 	.word	0x0802b50e
 8018cb0:	0802b3a6 	.word	0x0802b3a6

08018cb4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018cb4:	b570      	push	{r4, r5, r6, lr}
 8018cb6:	4604      	mov	r4, r0
 8018cb8:	6840      	ldr	r0, [r0, #4]
 8018cba:	6803      	ldr	r3, [r0, #0]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	4798      	blx	r3
 8018cc0:	4605      	mov	r5, r0
 8018cc2:	b930      	cbnz	r0, 8018cd2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018cc4:	7a23      	ldrb	r3, [r4, #8]
 8018cc6:	b123      	cbz	r3, 8018cd2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018cc8:	6860      	ldr	r0, [r4, #4]
 8018cca:	6803      	ldr	r3, [r0, #0]
 8018ccc:	695b      	ldr	r3, [r3, #20]
 8018cce:	4798      	blx	r3
 8018cd0:	7225      	strb	r5, [r4, #8]
 8018cd2:	6860      	ldr	r0, [r4, #4]
 8018cd4:	6803      	ldr	r3, [r0, #0]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	4798      	blx	r3
 8018cda:	b928      	cbnz	r0, 8018ce8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018cdc:	6823      	ldr	r3, [r4, #0]
 8018cde:	4620      	mov	r0, r4
 8018ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ce6:	4718      	bx	r3
 8018ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018cec:	f7fd b900 	b.w	8015ef0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018cf0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018cf0:	b510      	push	{r4, lr}
 8018cf2:	6082      	str	r2, [r0, #8]
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	4c03      	ldr	r4, [pc, #12]	; (8018d04 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018cf8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018cfc:	e9c0 4100 	strd	r4, r1, [r0]
 8018d00:	bd10      	pop	{r4, pc}
 8018d02:	bf00      	nop
 8018d04:	0802b474 	.word	0x0802b474

08018d08 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018d08:	6840      	ldr	r0, [r0, #4]
 8018d0a:	6803      	ldr	r3, [r0, #0]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	4718      	bx	r3

08018d10 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 8018d10:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8018d14:	4602      	mov	r2, r0
 8018d16:	cb03      	ldmia	r3!, {r0, r1}
 8018d18:	6010      	str	r0, [r2, #0]
 8018d1a:	4610      	mov	r0, r2
 8018d1c:	6051      	str	r1, [r2, #4]
 8018d1e:	4770      	bx	lr

08018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8018d20:	b507      	push	{r0, r1, r2, lr}
 8018d22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8018d26:	ab01      	add	r3, sp, #4
 8018d28:	6809      	ldr	r1, [r1, #0]
 8018d2a:	6800      	ldr	r0, [r0, #0]
 8018d2c:	f003 fc82 	bl	801c634 <_ZN8touchgfx6muldivElllRl>
 8018d30:	b003      	add	sp, #12
 8018d32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018d38 <_ZN8touchgfx7CWRUtil4sineEi>:
 8018d38:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018d3c:	fb90 f3f2 	sdiv	r3, r0, r2
 8018d40:	fb03 0312 	mls	r3, r3, r2, r0
 8018d44:	4413      	add	r3, r2
 8018d46:	fb93 f0f2 	sdiv	r0, r3, r2
 8018d4a:	fb02 3010 	mls	r0, r2, r0, r3
 8018d4e:	4b0a      	ldr	r3, [pc, #40]	; (8018d78 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8018d50:	285a      	cmp	r0, #90	; 0x5a
 8018d52:	dc02      	bgt.n	8018d5a <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8018d54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018d58:	4770      	bx	lr
 8018d5a:	28b4      	cmp	r0, #180	; 0xb4
 8018d5c:	dc02      	bgt.n	8018d64 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8018d5e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8018d62:	e7f7      	b.n	8018d54 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8018d64:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8018d68:	bfd4      	ite	le
 8018d6a:	38b4      	suble	r0, #180	; 0xb4
 8018d6c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8018d70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018d74:	4240      	negs	r0, r0
 8018d76:	4770      	bx	lr
 8018d78:	0802b53e 	.word	0x0802b53e

08018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8018d7c:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8018d80:	fb90 f3f2 	sdiv	r3, r0, r2
 8018d84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d86:	fb03 0012 	mls	r0, r3, r2, r0
 8018d8a:	4410      	add	r0, r2
 8018d8c:	fb90 f4f2 	sdiv	r4, r0, r2
 8018d90:	fb02 0414 	mls	r4, r2, r4, r0
 8018d94:	f004 061f 	and.w	r6, r4, #31
 8018d98:	1164      	asrs	r4, r4, #5
 8018d9a:	4620      	mov	r0, r4
 8018d9c:	f7ff ffcc 	bl	8018d38 <_ZN8touchgfx7CWRUtil4sineEi>
 8018da0:	4605      	mov	r5, r0
 8018da2:	b90e      	cbnz	r6, 8018da8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8018da4:	b002      	add	sp, #8
 8018da6:	bd70      	pop	{r4, r5, r6, pc}
 8018da8:	1c60      	adds	r0, r4, #1
 8018daa:	f7ff ffc5 	bl	8018d38 <_ZN8touchgfx7CWRUtil4sineEi>
 8018dae:	ab01      	add	r3, sp, #4
 8018db0:	2220      	movs	r2, #32
 8018db2:	4631      	mov	r1, r6
 8018db4:	1b40      	subs	r0, r0, r5
 8018db6:	f003 fc3d 	bl	801c634 <_ZN8touchgfx6muldivElllRl>
 8018dba:	4428      	add	r0, r5
 8018dbc:	e7f2      	b.n	8018da4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08018dbe <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 8018dbe:	b507      	push	{r0, r1, r2, lr}
 8018dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018dc4:	ab01      	add	r3, sp, #4
 8018dc6:	0140      	lsls	r0, r0, #5
 8018dc8:	f003 fc34 	bl	801c634 <_ZN8touchgfx6muldivElllRl>
 8018dcc:	2320      	movs	r3, #32
 8018dce:	fb90 f0f3 	sdiv	r0, r0, r3
 8018dd2:	b003      	add	sp, #12
 8018dd4:	f85d fb04 	ldr.w	pc, [sp], #4

08018dd8 <_ZN8touchgfx13AbstractShapeC1Ev>:
 8018dd8:	b510      	push	{r4, lr}
 8018dda:	4604      	mov	r4, r0
 8018ddc:	f000 fe68 	bl	8019ab0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018de0:	4b07      	ldr	r3, [pc, #28]	; (8018e00 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 8018de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018de6:	4620      	mov	r0, r4
 8018de8:	6023      	str	r3, [r4, #0]
 8018dea:	2300      	movs	r3, #0
 8018dec:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
 8018df0:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8018df4:	63a3      	str	r3, [r4, #56]	; 0x38
 8018df6:	60a3      	str	r3, [r4, #8]
 8018df8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8018dfc:	bd10      	pop	{r4, pc}
 8018dfe:	bf00      	nop
 8018e00:	0802b5fc 	.word	0x0802b5fc

08018e04 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 8018e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e08:	2500      	movs	r5, #0
 8018e0a:	6803      	ldr	r3, [r0, #0]
 8018e0c:	b087      	sub	sp, #28
 8018e0e:	4604      	mov	r4, r0
 8018e10:	462e      	mov	r6, r5
 8018e12:	46a8      	mov	r8, r5
 8018e14:	462f      	mov	r7, r5
 8018e16:	46a9      	mov	r9, r5
 8018e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018e1a:	4798      	blx	r3
 8018e1c:	9000      	str	r0, [sp, #0]
 8018e1e:	9b00      	ldr	r3, [sp, #0]
 8018e20:	429d      	cmp	r5, r3
 8018e22:	da7f      	bge.n	8018f24 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x120>
 8018e24:	6823      	ldr	r3, [r4, #0]
 8018e26:	4629      	mov	r1, r5
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018e2e:	4798      	blx	r3
 8018e30:	6823      	ldr	r3, [r4, #0]
 8018e32:	4682      	mov	sl, r0
 8018e34:	4629      	mov	r1, r5
 8018e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018e3a:	4620      	mov	r0, r4
 8018e3c:	4798      	blx	r3
 8018e3e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018e40:	4683      	mov	fp, r0
 8018e42:	4650      	mov	r0, sl
 8018e44:	f7ff ffbb 	bl	8018dbe <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8018e48:	9002      	str	r0, [sp, #8]
 8018e4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8018e4c:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8018e50:	f7ff ff94 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018e54:	a903      	add	r1, sp, #12
 8018e56:	9003      	str	r0, [sp, #12]
 8018e58:	a802      	add	r0, sp, #8
 8018e5a:	f7ff ff61 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018e60:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018e62:	4402      	add	r2, r0
 8018e64:	4658      	mov	r0, fp
 8018e66:	9201      	str	r2, [sp, #4]
 8018e68:	f7ff ffa9 	bl	8018dbe <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8018e6c:	9004      	str	r0, [sp, #16]
 8018e6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8018e70:	f7ff ff84 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018e74:	a905      	add	r1, sp, #20
 8018e76:	9005      	str	r0, [sp, #20]
 8018e78:	a804      	add	r0, sp, #16
 8018e7a:	f7ff ff51 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e7e:	9a01      	ldr	r2, [sp, #4]
 8018e80:	1a12      	subs	r2, r2, r0
 8018e82:	b125      	cbz	r5, 8018e8e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8a>
 8018e84:	2320      	movs	r3, #32
 8018e86:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e8a:	429f      	cmp	r7, r3
 8018e8c:	da03      	bge.n	8018e96 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x92>
 8018e8e:	2720      	movs	r7, #32
 8018e90:	fb92 f7f7 	sdiv	r7, r2, r7
 8018e94:	b125      	cbz	r5, 8018ea0 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x9c>
 8018e96:	2320      	movs	r3, #32
 8018e98:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e9c:	4599      	cmp	r9, r3
 8018e9e:	dd03      	ble.n	8018ea8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa4>
 8018ea0:	f04f 0920 	mov.w	r9, #32
 8018ea4:	fb92 f9f9 	sdiv	r9, r2, r9
 8018ea8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018eaa:	4658      	mov	r0, fp
 8018eac:	9201      	str	r2, [sp, #4]
 8018eae:	f7ff ff86 	bl	8018dbe <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8018eb2:	9002      	str	r0, [sp, #8]
 8018eb4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8018eb6:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8018eba:	f7ff ff5f 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018ebe:	a903      	add	r1, sp, #12
 8018ec0:	9003      	str	r0, [sp, #12]
 8018ec2:	a802      	add	r0, sp, #8
 8018ec4:	f7ff ff2c 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018eca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018ecc:	eb00 0b03 	add.w	fp, r0, r3
 8018ed0:	4650      	mov	r0, sl
 8018ed2:	f7ff ff74 	bl	8018dbe <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8018ed6:	9004      	str	r0, [sp, #16]
 8018ed8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8018eda:	f7ff ff4f 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018ede:	a905      	add	r1, sp, #20
 8018ee0:	9005      	str	r0, [sp, #20]
 8018ee2:	a804      	add	r0, sp, #16
 8018ee4:	f7ff ff1c 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ee8:	9a01      	ldr	r2, [sp, #4]
 8018eea:	eb00 030b 	add.w	r3, r0, fp
 8018eee:	b125      	cbz	r5, 8018efa <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf6>
 8018ef0:	2120      	movs	r1, #32
 8018ef2:	fb93 f1f1 	sdiv	r1, r3, r1
 8018ef6:	428e      	cmp	r6, r1
 8018ef8:	da03      	bge.n	8018f02 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfe>
 8018efa:	2620      	movs	r6, #32
 8018efc:	fb93 f6f6 	sdiv	r6, r3, r6
 8018f00:	b125      	cbz	r5, 8018f0c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x108>
 8018f02:	2120      	movs	r1, #32
 8018f04:	fb93 f1f1 	sdiv	r1, r3, r1
 8018f08:	4588      	cmp	r8, r1
 8018f0a:	dd03      	ble.n	8018f14 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x110>
 8018f0c:	f04f 0820 	mov.w	r8, #32
 8018f10:	fb93 f8f8 	sdiv	r8, r3, r8
 8018f14:	6821      	ldr	r1, [r4, #0]
 8018f16:	4620      	mov	r0, r4
 8018f18:	f8d1 a088 	ldr.w	sl, [r1, #136]	; 0x88
 8018f1c:	4629      	mov	r1, r5
 8018f1e:	47d0      	blx	sl
 8018f20:	3501      	adds	r5, #1
 8018f22:	e77c      	b.n	8018e1e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 8018f24:	3701      	adds	r7, #1
 8018f26:	3601      	adds	r6, #1
 8018f28:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 8018f2c:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 8018f30:	eba7 0909 	sub.w	r9, r7, r9
 8018f34:	eba6 0808 	sub.w	r8, r6, r8
 8018f38:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
 8018f3c:	f8a4 804a 	strh.w	r8, [r4, #74]	; 0x4a
 8018f40:	b007      	add	sp, #28
 8018f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f46 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 8018f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f48:	b0b1      	sub	sp, #196	; 0xc4
 8018f4a:	4604      	mov	r4, r0
 8018f4c:	460a      	mov	r2, r1
 8018f4e:	4601      	mov	r1, r0
 8018f50:	a801      	add	r0, sp, #4
 8018f52:	f00d f809 	bl	8025f68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018f56:	6823      	ldr	r3, [r4, #0]
 8018f58:	4620      	mov	r0, r4
 8018f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018f5c:	4798      	blx	r3
 8018f5e:	4606      	mov	r6, r0
 8018f60:	b390      	cbz	r0, 8018fc8 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 8018f62:	6823      	ldr	r3, [r4, #0]
 8018f64:	2100      	movs	r1, #0
 8018f66:	4620      	mov	r0, r4
 8018f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018f6c:	4798      	blx	r3
 8018f6e:	6823      	ldr	r3, [r4, #0]
 8018f70:	4605      	mov	r5, r0
 8018f72:	2100      	movs	r1, #0
 8018f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018f78:	4620      	mov	r0, r4
 8018f7a:	4798      	blx	r3
 8018f7c:	4629      	mov	r1, r5
 8018f7e:	2501      	movs	r5, #1
 8018f80:	4602      	mov	r2, r0
 8018f82:	a801      	add	r0, sp, #4
 8018f84:	f00d f9b9 	bl	80262fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018f88:	42b5      	cmp	r5, r6
 8018f8a:	da13      	bge.n	8018fb4 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x6e>
 8018f8c:	6823      	ldr	r3, [r4, #0]
 8018f8e:	4629      	mov	r1, r5
 8018f90:	4620      	mov	r0, r4
 8018f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018f96:	4798      	blx	r3
 8018f98:	6823      	ldr	r3, [r4, #0]
 8018f9a:	4607      	mov	r7, r0
 8018f9c:	4629      	mov	r1, r5
 8018f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	4798      	blx	r3
 8018fa6:	4639      	mov	r1, r7
 8018fa8:	4602      	mov	r2, r0
 8018faa:	a801      	add	r0, sp, #4
 8018fac:	f00d f934 	bl	8026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018fb0:	3501      	adds	r5, #1
 8018fb2:	e7e9      	b.n	8018f88 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x42>
 8018fb4:	a801      	add	r0, sp, #4
 8018fb6:	f00d faa4 	bl	8026502 <_ZN8touchgfx6Canvas6renderEv>
 8018fba:	4604      	mov	r4, r0
 8018fbc:	a801      	add	r0, sp, #4
 8018fbe:	f00d fadd 	bl	802657c <_ZN8touchgfx6CanvasD1Ev>
 8018fc2:	4620      	mov	r0, r4
 8018fc4:	b031      	add	sp, #196	; 0xc4
 8018fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fc8:	2401      	movs	r4, #1
 8018fca:	e7f7      	b.n	8018fbc <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x76>

08018fcc <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8018fcc:	2001      	movs	r0, #1
 8018fce:	4770      	bx	lr

08018fd0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8018fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fd4:	460d      	mov	r5, r1
 8018fd6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018fda:	b085      	sub	sp, #20
 8018fdc:	4690      	mov	r8, r2
 8018fde:	4411      	add	r1, r2
 8018fe0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018fe4:	4699      	mov	r9, r3
 8018fe6:	6803      	ldr	r3, [r0, #0]
 8018fe8:	60c1      	str	r1, [r0, #12]
 8018fea:	4604      	mov	r4, r0
 8018fec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018fee:	440a      	add	r2, r1
 8018ff0:	6102      	str	r2, [r0, #16]
 8018ff2:	695b      	ldr	r3, [r3, #20]
 8018ff4:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8018ff8:	4798      	blx	r3
 8018ffa:	2800      	cmp	r0, #0
 8018ffc:	d039      	beq.n	8019072 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8018ffe:	44c8      	add	r8, r9
 8019000:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019004:	4445      	add	r5, r8
 8019006:	6823      	ldr	r3, [r4, #0]
 8019008:	f10d 020f 	add.w	r2, sp, #15
 801900c:	a903      	add	r1, sp, #12
 801900e:	4620      	mov	r0, r4
 8019010:	9200      	str	r2, [sp, #0]
 8019012:	f10d 020d 	add.w	r2, sp, #13
 8019016:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801901a:	f10d 030e 	add.w	r3, sp, #14
 801901e:	47c0      	blx	r8
 8019020:	b1f8      	cbz	r0, 8019062 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8019022:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8019026:	7a20      	ldrb	r0, [r4, #8]
 8019028:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801902c:	4358      	muls	r0, r3
 801902e:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8019032:	1c43      	adds	r3, r0, #1
 8019034:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019038:	f817 0b01 	ldrb.w	r0, [r7], #1
 801903c:	121b      	asrs	r3, r3, #8
 801903e:	fb10 f003 	smulbb	r0, r0, r3
 8019042:	b283      	uxth	r3, r0
 8019044:	1c58      	adds	r0, r3, #1
 8019046:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801904a:	6823      	ldr	r3, [r4, #0]
 801904c:	1200      	asrs	r0, r0, #8
 801904e:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8019052:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8019056:	28ff      	cmp	r0, #255	; 0xff
 8019058:	d10e      	bne.n	8019078 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801905a:	9100      	str	r1, [sp, #0]
 801905c:	4629      	mov	r1, r5
 801905e:	4620      	mov	r0, r4
 8019060:	47c0      	blx	r8
 8019062:	68e3      	ldr	r3, [r4, #12]
 8019064:	3e01      	subs	r6, #1
 8019066:	f105 0503 	add.w	r5, r5, #3
 801906a:	f103 0301 	add.w	r3, r3, #1
 801906e:	60e3      	str	r3, [r4, #12]
 8019070:	d1c9      	bne.n	8019006 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8019072:	b005      	add	sp, #20
 8019074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019078:	fa1f fc80 	uxth.w	ip, r0
 801907c:	43c0      	mvns	r0, r0
 801907e:	f895 e002 	ldrb.w	lr, [r5, #2]
 8019082:	fb12 f20c 	smulbb	r2, r2, ip
 8019086:	b2c0      	uxtb	r0, r0
 8019088:	fb13 f30c 	smulbb	r3, r3, ip
 801908c:	fb0e 2200 	mla	r2, lr, r0, r2
 8019090:	f895 e001 	ldrb.w	lr, [r5, #1]
 8019094:	fb11 f10c 	smulbb	r1, r1, ip
 8019098:	fb0e 3300 	mla	r3, lr, r0, r3
 801909c:	f895 e000 	ldrb.w	lr, [r5]
 80190a0:	b292      	uxth	r2, r2
 80190a2:	b29b      	uxth	r3, r3
 80190a4:	fb0e 1000 	mla	r0, lr, r0, r1
 80190a8:	1c59      	adds	r1, r3, #1
 80190aa:	b280      	uxth	r0, r0
 80190ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80190b0:	1c51      	adds	r1, r2, #1
 80190b2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80190b6:	1c41      	adds	r1, r0, #1
 80190b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80190bc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80190c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80190c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80190c8:	9000      	str	r0, [sp, #0]
 80190ca:	e7c7      	b.n	801905c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080190cc <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80190cc:	f89d 0000 	ldrb.w	r0, [sp]
 80190d0:	704b      	strb	r3, [r1, #1]
 80190d2:	7008      	strb	r0, [r1, #0]
 80190d4:	708a      	strb	r2, [r1, #2]
 80190d6:	4770      	bx	lr

080190d8 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 80190d8:	b508      	push	{r3, lr}
 80190da:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80190de:	f7ff fe4d 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80190e2:	bd08      	pop	{r3, pc}

080190e4 <_ZN8touchgfx6CircleC1Ev>:
 80190e4:	b510      	push	{r4, lr}
 80190e6:	4604      	mov	r4, r0
 80190e8:	f000 fce2 	bl	8019ab0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80190ec:	4b08      	ldr	r3, [pc, #32]	; (8019110 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80190ee:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80190f2:	4620      	mov	r0, r4
 80190f4:	6023      	str	r3, [r4, #0]
 80190f6:	2300      	movs	r3, #0
 80190f8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 80190fc:	f24b 4205 	movw	r2, #46085	; 0xb405
 8019100:	60a3      	str	r3, [r4, #8]
 8019102:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8019106:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801910a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801910e:	bd10      	pop	{r4, pc}
 8019110:	0802b6c0 	.word	0x0802b6c0

08019114 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8019114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019118:	4606      	mov	r6, r0
 801911a:	6810      	ldr	r0, [r2, #0]
 801911c:	4698      	mov	r8, r3
 801911e:	4691      	mov	r9, r2
 8019120:	460f      	mov	r7, r1
 8019122:	f7ff fe2b 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019126:	a902      	add	r1, sp, #8
 8019128:	2402      	movs	r4, #2
 801912a:	f841 0d08 	str.w	r0, [r1, #-8]!
 801912e:	4640      	mov	r0, r8
 8019130:	f7ff fdf6 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019134:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8019136:	fb90 f0f4 	sdiv	r0, r0, r4
 801913a:	4405      	add	r5, r0
 801913c:	f8d9 0000 	ldr.w	r0, [r9]
 8019140:	f7ff ffca 	bl	80190d8 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019144:	a902      	add	r1, sp, #8
 8019146:	f841 0d04 	str.w	r0, [r1, #-4]!
 801914a:	4640      	mov	r0, r8
 801914c:	f7ff fde8 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019150:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8019152:	4629      	mov	r1, r5
 8019154:	fb90 f0f4 	sdiv	r0, r0, r4
 8019158:	1a12      	subs	r2, r2, r0
 801915a:	4638      	mov	r0, r7
 801915c:	f00d f8cd 	bl	80262fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8019160:	b003      	add	sp, #12
 8019162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019166 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8019166:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801916a:	9e08      	ldr	r6, [sp, #32]
 801916c:	4698      	mov	r8, r3
 801916e:	4615      	mov	r5, r2
 8019170:	460f      	mov	r7, r1
 8019172:	6830      	ldr	r0, [r6, #0]
 8019174:	2402      	movs	r4, #2
 8019176:	f7ff fe01 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801917a:	a902      	add	r1, sp, #8
 801917c:	f841 0d08 	str.w	r0, [r1, #-8]!
 8019180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019182:	f7ff fdcd 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019186:	682d      	ldr	r5, [r5, #0]
 8019188:	fb90 f0f4 	sdiv	r0, r0, r4
 801918c:	4405      	add	r5, r0
 801918e:	6830      	ldr	r0, [r6, #0]
 8019190:	f7ff ffa2 	bl	80190d8 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019194:	a902      	add	r1, sp, #8
 8019196:	f841 0d04 	str.w	r0, [r1, #-4]!
 801919a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801919c:	f7ff fdc0 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80191a0:	f8d8 2000 	ldr.w	r2, [r8]
 80191a4:	4629      	mov	r1, r5
 80191a6:	fb90 f0f4 	sdiv	r0, r0, r4
 80191aa:	1a12      	subs	r2, r2, r0
 80191ac:	4638      	mov	r0, r7
 80191ae:	f00d f833 	bl	8026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80191b2:	b002      	add	sp, #8
 80191b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080191b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80191b8:	b513      	push	{r0, r1, r4, lr}
 80191ba:	e9cd 2300 	strd	r2, r3, [sp]
 80191be:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80191c2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80191c6:	f7ff ffce 	bl	8019166 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80191ca:	b002      	add	sp, #8
 80191cc:	bd10      	pop	{r4, pc}

080191ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 80191ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191d0:	680e      	ldr	r6, [r1, #0]
 80191d2:	681f      	ldr	r7, [r3, #0]
 80191d4:	9807      	ldr	r0, [sp, #28]
 80191d6:	42be      	cmp	r6, r7
 80191d8:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 80191dc:	bfb8      	it	lt
 80191de:	601e      	strlt	r6, [r3, #0]
 80191e0:	680b      	ldr	r3, [r1, #0]
 80191e2:	6829      	ldr	r1, [r5, #0]
 80191e4:	428b      	cmp	r3, r1
 80191e6:	bfc8      	it	gt
 80191e8:	602b      	strgt	r3, [r5, #0]
 80191ea:	6813      	ldr	r3, [r2, #0]
 80191ec:	6821      	ldr	r1, [r4, #0]
 80191ee:	428b      	cmp	r3, r1
 80191f0:	bfb8      	it	lt
 80191f2:	6023      	strlt	r3, [r4, #0]
 80191f4:	6813      	ldr	r3, [r2, #0]
 80191f6:	6802      	ldr	r2, [r0, #0]
 80191f8:	4293      	cmp	r3, r2
 80191fa:	bfc8      	it	gt
 80191fc:	6003      	strgt	r3, [r0, #0]
 80191fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019200 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8019200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019204:	b089      	sub	sp, #36	; 0x24
 8019206:	4690      	mov	r8, r2
 8019208:	4606      	mov	r6, r0
 801920a:	2402      	movs	r4, #2
 801920c:	ad08      	add	r5, sp, #32
 801920e:	6808      	ldr	r0, [r1, #0]
 8019210:	461f      	mov	r7, r3
 8019212:	4689      	mov	r9, r1
 8019214:	f7ff fdb2 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019218:	f845 0d04 	str.w	r0, [r5, #-4]!
 801921c:	4640      	mov	r0, r8
 801921e:	4629      	mov	r1, r5
 8019220:	f7ff fd7e 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019224:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8019226:	fb90 f0f4 	sdiv	r0, r0, r4
 801922a:	4418      	add	r0, r3
 801922c:	9005      	str	r0, [sp, #20]
 801922e:	f8d9 0000 	ldr.w	r0, [r9]
 8019232:	f7ff ff51 	bl	80190d8 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019236:	4629      	mov	r1, r5
 8019238:	9007      	str	r0, [sp, #28]
 801923a:	4640      	mov	r0, r8
 801923c:	f7ff fd70 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019242:	aa08      	add	r2, sp, #32
 8019244:	a905      	add	r1, sp, #20
 8019246:	fb90 f0f4 	sdiv	r0, r0, r4
 801924a:	6b74      	ldr	r4, [r6, #52]	; 0x34
 801924c:	1a24      	subs	r4, r4, r0
 801924e:	4630      	mov	r0, r6
 8019250:	f842 4d08 	str.w	r4, [r2, #-8]!
 8019254:	9302      	str	r3, [sp, #8]
 8019256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019258:	9301      	str	r3, [sp, #4]
 801925a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801925c:	9300      	str	r3, [sp, #0]
 801925e:	463b      	mov	r3, r7
 8019260:	f7ff ffb5 	bl	80191ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019264:	b009      	add	sp, #36	; 0x24
 8019266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801926a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 801926a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801926e:	4291      	cmp	r1, r2
 8019270:	b08d      	sub	sp, #52	; 0x34
 8019272:	461e      	mov	r6, r3
 8019274:	4604      	mov	r4, r0
 8019276:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801927a:	ad0c      	add	r5, sp, #48	; 0x30
 801927c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019280:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8019284:	bfc8      	it	gt
 8019286:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 801928a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801928e:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8019292:	1a9b      	subs	r3, r3, r2
 8019294:	a907      	add	r1, sp, #28
 8019296:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801929a:	bfa2      	ittt	ge
 801929c:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80192a0:	2200      	movge	r2, #0
 80192a2:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 80192a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80192a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80192aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80192ae:	f845 3d04 	str.w	r3, [r5, #-4]!
 80192b2:	4633      	mov	r3, r6
 80192b4:	462a      	mov	r2, r5
 80192b6:	9700      	str	r7, [sp, #0]
 80192b8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80192bc:	f7ff ffa0 	bl	8019200 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80192c0:	9b07      	ldr	r3, [sp, #28]
 80192c2:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 80192c6:	f103 0120 	add.w	r1, r3, #32
 80192ca:	fb91 f3f0 	sdiv	r3, r1, r0
 80192ce:	fb00 1313 	mls	r3, r0, r3, r1
 80192d2:	1ac3      	subs	r3, r0, r3
 80192d4:	fb93 f2f0 	sdiv	r2, r3, r0
 80192d8:	fb00 3312 	mls	r3, r0, r2, r3
 80192dc:	440b      	add	r3, r1
 80192de:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 80192e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192e4:	9906      	ldr	r1, [sp, #24]
 80192e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80192e8:	4291      	cmp	r1, r2
 80192ea:	db11      	blt.n	8019310 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 80192ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80192ee:	4651      	mov	r1, sl
 80192f0:	9700      	str	r7, [sp, #0]
 80192f2:	4620      	mov	r0, r4
 80192f4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80192f8:	462a      	mov	r2, r5
 80192fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80192fc:	4633      	mov	r3, r6
 80192fe:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019302:	f7ff ff7d 	bl	8019200 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019308:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 801930c:	9309      	str	r3, [sp, #36]	; 0x24
 801930e:	e7e8      	b.n	80192e2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8019310:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8019314:	4291      	cmp	r1, r2
 8019316:	dd0c      	ble.n	8019332 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8019318:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801931a:	a906      	add	r1, sp, #24
 801931c:	9700      	str	r7, [sp, #0]
 801931e:	4620      	mov	r0, r4
 8019320:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019324:	462a      	mov	r2, r5
 8019326:	930b      	str	r3, [sp, #44]	; 0x2c
 8019328:	4633      	mov	r3, r6
 801932a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801932e:	f7ff ff67 	bl	8019200 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019332:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019334:	2b00      	cmp	r3, #0
 8019336:	f040 8097 	bne.w	8019468 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 801933a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 801933e:	1a52      	subs	r2, r2, r1
 8019340:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8019344:	da0a      	bge.n	801935c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8019346:	462a      	mov	r2, r5
 8019348:	a90a      	add	r1, sp, #40	; 0x28
 801934a:	9700      	str	r7, [sp, #0]
 801934c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8019350:	4633      	mov	r3, r6
 8019352:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019356:	4620      	mov	r0, r4
 8019358:	f7ff ff52 	bl	8019200 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801935c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019360:	2bb3      	cmp	r3, #179	; 0xb3
 8019362:	d87e      	bhi.n	8019462 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8019364:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8019368:	1a1b      	subs	r3, r3, r0
 801936a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801936e:	da78      	bge.n	8019462 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8019370:	ad0c      	add	r5, sp, #48	; 0x30
 8019372:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8019376:	f7ff fd01 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801937a:	f04f 0a02 	mov.w	sl, #2
 801937e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019382:	4658      	mov	r0, fp
 8019384:	4629      	mov	r1, r5
 8019386:	f7ff fccb 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801938a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801938c:	18c3      	adds	r3, r0, r3
 801938e:	9807      	ldr	r0, [sp, #28]
 8019390:	9305      	str	r3, [sp, #20]
 8019392:	f7ff fea1 	bl	80190d8 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019396:	4629      	mov	r1, r5
 8019398:	900b      	str	r0, [sp, #44]	; 0x2c
 801939a:	4658      	mov	r0, fp
 801939c:	f7ff fcc0 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80193a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80193a2:	9a05      	ldr	r2, [sp, #20]
 80193a4:	a90a      	add	r1, sp, #40	; 0x28
 80193a6:	1a1b      	subs	r3, r3, r0
 80193a8:	9700      	str	r7, [sp, #0]
 80193aa:	4620      	mov	r0, r4
 80193ac:	9304      	str	r3, [sp, #16]
 80193ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80193b0:	fb93 f3fa 	sdiv	r3, r3, sl
 80193b4:	1ad2      	subs	r2, r2, r3
 80193b6:	920a      	str	r2, [sp, #40]	; 0x28
 80193b8:	9a04      	ldr	r2, [sp, #16]
 80193ba:	1ad3      	subs	r3, r2, r3
 80193bc:	462a      	mov	r2, r5
 80193be:	930b      	str	r3, [sp, #44]	; 0x2c
 80193c0:	4633      	mov	r3, r6
 80193c2:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80193c6:	f7ff ff02 	bl	80191ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80193ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80193cc:	9a05      	ldr	r2, [sp, #20]
 80193ce:	a90a      	add	r1, sp, #40	; 0x28
 80193d0:	4620      	mov	r0, r4
 80193d2:	9700      	str	r7, [sp, #0]
 80193d4:	fb93 f3fa 	sdiv	r3, r3, sl
 80193d8:	189a      	adds	r2, r3, r2
 80193da:	920a      	str	r2, [sp, #40]	; 0x28
 80193dc:	9a04      	ldr	r2, [sp, #16]
 80193de:	4413      	add	r3, r2
 80193e0:	462a      	mov	r2, r5
 80193e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80193e4:	4633      	mov	r3, r6
 80193e6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80193ea:	f7ff fef0 	bl	80191ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80193ee:	9806      	ldr	r0, [sp, #24]
 80193f0:	f7ff fcc4 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80193f4:	4629      	mov	r1, r5
 80193f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80193f8:	4658      	mov	r0, fp
 80193fa:	f7ff fc91 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80193fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019400:	18c3      	adds	r3, r0, r3
 8019402:	9806      	ldr	r0, [sp, #24]
 8019404:	9304      	str	r3, [sp, #16]
 8019406:	f7ff fe67 	bl	80190d8 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801940a:	4629      	mov	r1, r5
 801940c:	900b      	str	r0, [sp, #44]	; 0x2c
 801940e:	4658      	mov	r0, fp
 8019410:	f7ff fc86 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019416:	9a04      	ldr	r2, [sp, #16]
 8019418:	a90a      	add	r1, sp, #40	; 0x28
 801941a:	eba3 0b00 	sub.w	fp, r3, r0
 801941e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019420:	4620      	mov	r0, r4
 8019422:	9700      	str	r7, [sp, #0]
 8019424:	fb93 f3fa 	sdiv	r3, r3, sl
 8019428:	1ad2      	subs	r2, r2, r3
 801942a:	ebab 0303 	sub.w	r3, fp, r3
 801942e:	920a      	str	r2, [sp, #40]	; 0x28
 8019430:	462a      	mov	r2, r5
 8019432:	930b      	str	r3, [sp, #44]	; 0x2c
 8019434:	4633      	mov	r3, r6
 8019436:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801943a:	f7ff fec8 	bl	80191ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801943e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019440:	9700      	str	r7, [sp, #0]
 8019442:	462a      	mov	r2, r5
 8019444:	a90a      	add	r1, sp, #40	; 0x28
 8019446:	4620      	mov	r0, r4
 8019448:	fb93 fafa 	sdiv	sl, r3, sl
 801944c:	9b04      	ldr	r3, [sp, #16]
 801944e:	4453      	add	r3, sl
 8019450:	930a      	str	r3, [sp, #40]	; 0x28
 8019452:	eb0a 030b 	add.w	r3, sl, fp
 8019456:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801945a:	930b      	str	r3, [sp, #44]	; 0x2c
 801945c:	4633      	mov	r3, r6
 801945e:	f7ff feb6 	bl	80191ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019462:	b00d      	add	sp, #52	; 0x34
 8019464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019468:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801946a:	a907      	add	r1, sp, #28
 801946c:	9700      	str	r7, [sp, #0]
 801946e:	4620      	mov	r0, r4
 8019470:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019474:	462a      	mov	r2, r5
 8019476:	930b      	str	r3, [sp, #44]	; 0x2c
 8019478:	4633      	mov	r3, r6
 801947a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801947e:	f7ff febf 	bl	8019200 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019482:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019484:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019486:	a906      	add	r1, sp, #24
 8019488:	9700      	str	r7, [sp, #0]
 801948a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801948e:	462a      	mov	r2, r5
 8019490:	930b      	str	r3, [sp, #44]	; 0x2c
 8019492:	4633      	mov	r3, r6
 8019494:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019498:	e75d      	b.n	8019356 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0801949a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801949a:	b530      	push	{r4, r5, lr}
 801949c:	4604      	mov	r4, r0
 801949e:	4608      	mov	r0, r1
 80194a0:	4611      	mov	r1, r2
 80194a2:	461a      	mov	r2, r3
 80194a4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80194a8:	b089      	sub	sp, #36	; 0x24
 80194aa:	2500      	movs	r5, #0
 80194ac:	015b      	lsls	r3, r3, #5
 80194ae:	9505      	str	r5, [sp, #20]
 80194b0:	9304      	str	r3, [sp, #16]
 80194b2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80194b6:	015b      	lsls	r3, r3, #5
 80194b8:	e9cd 3506 	strd	r3, r5, [sp, #24]
 80194bc:	ab07      	add	r3, sp, #28
 80194be:	2520      	movs	r5, #32
 80194c0:	9302      	str	r3, [sp, #8]
 80194c2:	ab06      	add	r3, sp, #24
 80194c4:	9301      	str	r3, [sp, #4]
 80194c6:	ab05      	add	r3, sp, #20
 80194c8:	9300      	str	r3, [sp, #0]
 80194ca:	ab04      	add	r3, sp, #16
 80194cc:	f7ff fecd 	bl	801926a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80194d0:	9a04      	ldr	r2, [sp, #16]
 80194d2:	9805      	ldr	r0, [sp, #20]
 80194d4:	9b06      	ldr	r3, [sp, #24]
 80194d6:	9907      	ldr	r1, [sp, #28]
 80194d8:	fb92 f2f5 	sdiv	r2, r2, r5
 80194dc:	fb90 f0f5 	sdiv	r0, r0, r5
 80194e0:	fb93 f3f5 	sdiv	r3, r3, r5
 80194e4:	fb91 f1f5 	sdiv	r1, r1, r5
 80194e8:	b292      	uxth	r2, r2
 80194ea:	3002      	adds	r0, #2
 80194ec:	b29b      	uxth	r3, r3
 80194ee:	3102      	adds	r1, #2
 80194f0:	1a80      	subs	r0, r0, r2
 80194f2:	3a01      	subs	r2, #1
 80194f4:	1ac9      	subs	r1, r1, r3
 80194f6:	3b01      	subs	r3, #1
 80194f8:	80a0      	strh	r0, [r4, #4]
 80194fa:	4620      	mov	r0, r4
 80194fc:	8022      	strh	r2, [r4, #0]
 80194fe:	8063      	strh	r3, [r4, #2]
 8019500:	80e1      	strh	r1, [r4, #6]
 8019502:	b009      	add	sp, #36	; 0x24
 8019504:	bd30      	pop	{r4, r5, pc}

08019506 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8019506:	b510      	push	{r4, lr}
 8019508:	4604      	mov	r4, r0
 801950a:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 801950e:	f7ff ffc4 	bl	801949a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8019512:	4620      	mov	r0, r4
 8019514:	bd10      	pop	{r4, pc}

08019516 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8019516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801951a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801951c:	b0ba      	sub	sp, #232	; 0xe8
 801951e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8019520:	4604      	mov	r4, r0
 8019522:	9303      	str	r3, [sp, #12]
 8019524:	460f      	mov	r7, r1
 8019526:	429a      	cmp	r2, r3
 8019528:	9204      	str	r2, [sp, #16]
 801952a:	ae0a      	add	r6, sp, #40	; 0x28
 801952c:	bfb8      	it	lt
 801952e:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8019532:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8019536:	1a9b      	subs	r3, r3, r2
 8019538:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801953c:	bfa2      	ittt	ge
 801953e:	2200      	movge	r2, #0
 8019540:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8019544:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8019548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801954a:	2a00      	cmp	r2, #0
 801954c:	d131      	bne.n	80195b2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 801954e:	463a      	mov	r2, r7
 8019550:	4621      	mov	r1, r4
 8019552:	a80b      	add	r0, sp, #44	; 0x2c
 8019554:	f00c fd08 	bl	8025f68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8019558:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801955a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801955c:	9205      	str	r2, [sp, #20]
 801955e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8019562:	9306      	str	r3, [sp, #24]
 8019564:	dc6f      	bgt.n	8019646 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8019566:	9b03      	ldr	r3, [sp, #12]
 8019568:	a90b      	add	r1, sp, #44	; 0x2c
 801956a:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 801956e:	4620      	mov	r0, r4
 8019570:	9307      	str	r3, [sp, #28]
 8019572:	016d      	lsls	r5, r5, #5
 8019574:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019578:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801957c:	aa07      	add	r2, sp, #28
 801957e:	930a      	str	r3, [sp, #40]	; 0x28
 8019580:	4633      	mov	r3, r6
 8019582:	f7ff fdc7 	bl	8019114 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019586:	9f07      	ldr	r7, [sp, #28]
 8019588:	2d00      	cmp	r5, #0
 801958a:	d165      	bne.n	8019658 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 801958c:	3720      	adds	r7, #32
 801958e:	4639      	mov	r1, r7
 8019590:	9a04      	ldr	r2, [sp, #16]
 8019592:	9b06      	ldr	r3, [sp, #24]
 8019594:	442f      	add	r7, r5
 8019596:	4291      	cmp	r1, r2
 8019598:	dc6b      	bgt.n	8019672 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 801959a:	9a05      	ldr	r2, [sp, #20]
 801959c:	4620      	mov	r0, r4
 801959e:	9107      	str	r1, [sp, #28]
 80195a0:	a90b      	add	r1, sp, #44	; 0x2c
 80195a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80195a6:	aa07      	add	r2, sp, #28
 80195a8:	930a      	str	r3, [sp, #40]	; 0x28
 80195aa:	4633      	mov	r3, r6
 80195ac:	f7ff fe04 	bl	80191b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80195b0:	e7ed      	b.n	801958e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80195b2:	f9b1 c000 	ldrsh.w	ip, [r1]
 80195b6:	88bd      	ldrh	r5, [r7, #4]
 80195b8:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 80195bc:	4465      	add	r5, ip
 80195be:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 80195c2:	b22d      	sxth	r5, r5
 80195c4:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 80195c8:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 80195cc:	2d00      	cmp	r5, #0
 80195ce:	bfb8      	it	lt
 80195d0:	426d      	neglt	r5, r5
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	bfb8      	it	lt
 80195d6:	425b      	neglt	r3, r3
 80195d8:	429d      	cmp	r5, r3
 80195da:	bfb8      	it	lt
 80195dc:	461d      	movlt	r5, r3
 80195de:	88fb      	ldrh	r3, [r7, #6]
 80195e0:	4403      	add	r3, r0
 80195e2:	116d      	asrs	r5, r5, #5
 80195e4:	b21b      	sxth	r3, r3
 80195e6:	3501      	adds	r5, #1
 80195e8:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 80195ec:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 80195f0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	f100 0001 	add.w	r0, r0, #1
 80195fa:	bfb8      	it	lt
 80195fc:	425b      	neglt	r3, r3
 80195fe:	2900      	cmp	r1, #0
 8019600:	ea4f 0060 	mov.w	r0, r0, asr #1
 8019604:	bfb8      	it	lt
 8019606:	4249      	neglt	r1, r1
 8019608:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801960c:	428b      	cmp	r3, r1
 801960e:	bfb8      	it	lt
 8019610:	460b      	movlt	r3, r1
 8019612:	115b      	asrs	r3, r3, #5
 8019614:	3301      	adds	r3, #1
 8019616:	435b      	muls	r3, r3
 8019618:	fb05 3505 	mla	r5, r5, r5, r3
 801961c:	2302      	movs	r3, #2
 801961e:	fb92 f2f3 	sdiv	r2, r2, r3
 8019622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019624:	1a9a      	subs	r2, r3, r2
 8019626:	920a      	str	r2, [sp, #40]	; 0x28
 8019628:	f7ff fb86 	bl	8018d38 <_ZN8touchgfx7CWRUtil4sineEi>
 801962c:	a90b      	add	r1, sp, #44	; 0x2c
 801962e:	900b      	str	r0, [sp, #44]	; 0x2c
 8019630:	4630      	mov	r0, r6
 8019632:	f7ff fb75 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019636:	2320      	movs	r3, #32
 8019638:	fb90 f0f3 	sdiv	r0, r0, r3
 801963c:	4340      	muls	r0, r0
 801963e:	42a8      	cmp	r0, r5
 8019640:	dd85      	ble.n	801954e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8019642:	2401      	movs	r4, #1
 8019644:	e036      	b.n	80196b4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 8019646:	2102      	movs	r1, #2
 8019648:	fb93 f3f1 	sdiv	r3, r3, r1
 801964c:	4413      	add	r3, r2
 801964e:	9306      	str	r3, [sp, #24]
 8019650:	fb93 f3f1 	sdiv	r3, r3, r1
 8019654:	9305      	str	r3, [sp, #20]
 8019656:	e786      	b.n	8019566 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8019658:	f107 0320 	add.w	r3, r7, #32
 801965c:	fb93 f7f5 	sdiv	r7, r3, r5
 8019660:	fb05 3717 	mls	r7, r5, r7, r3
 8019664:	1bea      	subs	r2, r5, r7
 8019666:	fb92 f7f5 	sdiv	r7, r2, r5
 801966a:	fb05 2717 	mls	r7, r5, r7, r2
 801966e:	441f      	add	r7, r3
 8019670:	e78d      	b.n	801958e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8019672:	9907      	ldr	r1, [sp, #28]
 8019674:	428a      	cmp	r2, r1
 8019676:	dd09      	ble.n	801968c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8019678:	9a05      	ldr	r2, [sp, #20]
 801967a:	a90b      	add	r1, sp, #44	; 0x2c
 801967c:	4620      	mov	r0, r4
 801967e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019682:	aa04      	add	r2, sp, #16
 8019684:	930a      	str	r3, [sp, #40]	; 0x28
 8019686:	4633      	mov	r3, r6
 8019688:	f7ff fd96 	bl	80191b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801968c:	9a06      	ldr	r2, [sp, #24]
 801968e:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8019692:	1ac3      	subs	r3, r0, r3
 8019694:	b992      	cbnz	r2, 80196bc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 8019696:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801969a:	da04      	bge.n	80196a6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 801969c:	a80b      	add	r0, sp, #44	; 0x2c
 801969e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80196a2:	f00c fdb9 	bl	8026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80196a6:	a80b      	add	r0, sp, #44	; 0x2c
 80196a8:	f00c ff2b 	bl	8026502 <_ZN8touchgfx6Canvas6renderEv>
 80196ac:	4604      	mov	r4, r0
 80196ae:	a80b      	add	r0, sp, #44	; 0x2c
 80196b0:	f00c ff64 	bl	802657c <_ZN8touchgfx6CanvasD1Ev>
 80196b4:	4620      	mov	r0, r4
 80196b6:	b03a      	add	sp, #232	; 0xe8
 80196b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196bc:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 80196c0:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80196c4:	ea4f 1747 	mov.w	r7, r7, lsl #5
 80196c8:	da2b      	bge.n	8019722 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 80196ca:	f7ff fb57 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80196ce:	4631      	mov	r1, r6
 80196d0:	900a      	str	r0, [sp, #40]	; 0x28
 80196d2:	a805      	add	r0, sp, #20
 80196d4:	f7ff fb24 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80196d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80196da:	f10d 0818 	add.w	r8, sp, #24
 80196de:	4418      	add	r0, r3
 80196e0:	9008      	str	r0, [sp, #32]
 80196e2:	9804      	ldr	r0, [sp, #16]
 80196e4:	f7ff fcf8 	bl	80190d8 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80196e8:	4631      	mov	r1, r6
 80196ea:	900a      	str	r0, [sp, #40]	; 0x28
 80196ec:	a805      	add	r0, sp, #20
 80196ee:	f7ff fb17 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80196f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80196f4:	1a18      	subs	r0, r3, r0
 80196f6:	9b04      	ldr	r3, [sp, #16]
 80196f8:	443b      	add	r3, r7
 80196fa:	9009      	str	r0, [sp, #36]	; 0x24
 80196fc:	930a      	str	r3, [sp, #40]	; 0x28
 80196fe:	9b04      	ldr	r3, [sp, #16]
 8019700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019702:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8019706:	4293      	cmp	r3, r2
 8019708:	dd0b      	ble.n	8019722 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 801970a:	ab09      	add	r3, sp, #36	; 0x24
 801970c:	aa08      	add	r2, sp, #32
 801970e:	a90b      	add	r1, sp, #44	; 0x2c
 8019710:	4620      	mov	r0, r4
 8019712:	e9cd 6800 	strd	r6, r8, [sp]
 8019716:	f7ff fd26 	bl	8019166 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801971a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801971c:	443b      	add	r3, r7
 801971e:	930a      	str	r3, [sp, #40]	; 0x28
 8019720:	e7ed      	b.n	80196fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8019722:	9a04      	ldr	r2, [sp, #16]
 8019724:	9b07      	ldr	r3, [sp, #28]
 8019726:	429a      	cmp	r2, r3
 8019728:	dd0a      	ble.n	8019740 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 801972a:	a90b      	add	r1, sp, #44	; 0x2c
 801972c:	4620      	mov	r0, r4
 801972e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019732:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019736:	aa04      	add	r2, sp, #16
 8019738:	930a      	str	r3, [sp, #40]	; 0x28
 801973a:	4633      	mov	r3, r6
 801973c:	f7ff fd3c 	bl	80191b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019740:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019744:	4642      	mov	r2, r8
 8019746:	9b03      	ldr	r3, [sp, #12]
 8019748:	eba8 0805 	sub.w	r8, r8, r5
 801974c:	429a      	cmp	r2, r3
 801974e:	db0c      	blt.n	801976a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 8019750:	9207      	str	r2, [sp, #28]
 8019752:	a90b      	add	r1, sp, #44	; 0x2c
 8019754:	4620      	mov	r0, r4
 8019756:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801975a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801975e:	aa07      	add	r2, sp, #28
 8019760:	930a      	str	r3, [sp, #40]	; 0x28
 8019762:	4633      	mov	r3, r6
 8019764:	f7ff fd28 	bl	80191b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019768:	e7ec      	b.n	8019744 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 801976a:	9a07      	ldr	r2, [sp, #28]
 801976c:	4293      	cmp	r3, r2
 801976e:	da0a      	bge.n	8019786 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 8019770:	a90b      	add	r1, sp, #44	; 0x2c
 8019772:	4620      	mov	r0, r4
 8019774:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019778:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801977c:	aa03      	add	r2, sp, #12
 801977e:	930a      	str	r3, [sp, #40]	; 0x28
 8019780:	4633      	mov	r3, r6
 8019782:	f7ff fd19 	bl	80191b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019786:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 801978a:	1a1b      	subs	r3, r3, r0
 801978c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019790:	da89      	bge.n	80196a6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019792:	f7ff faf3 	bl	8018d7c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019796:	4631      	mov	r1, r6
 8019798:	900a      	str	r0, [sp, #40]	; 0x28
 801979a:	a805      	add	r0, sp, #20
 801979c:	f7ff fac0 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80197a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80197a2:	ad06      	add	r5, sp, #24
 80197a4:	4418      	add	r0, r3
 80197a6:	9008      	str	r0, [sp, #32]
 80197a8:	9803      	ldr	r0, [sp, #12]
 80197aa:	f7ff fc95 	bl	80190d8 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80197ae:	4631      	mov	r1, r6
 80197b0:	900a      	str	r0, [sp, #40]	; 0x28
 80197b2:	a805      	add	r0, sp, #20
 80197b4:	f7ff fab4 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80197b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80197ba:	1a18      	subs	r0, r3, r0
 80197bc:	9b03      	ldr	r3, [sp, #12]
 80197be:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 80197c2:	9009      	str	r0, [sp, #36]	; 0x24
 80197c4:	443b      	add	r3, r7
 80197c6:	930a      	str	r3, [sp, #40]	; 0x28
 80197c8:	9a03      	ldr	r2, [sp, #12]
 80197ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197cc:	429a      	cmp	r2, r3
 80197ce:	f77f af6a 	ble.w	80196a6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 80197d2:	ab09      	add	r3, sp, #36	; 0x24
 80197d4:	aa08      	add	r2, sp, #32
 80197d6:	a90b      	add	r1, sp, #44	; 0x2c
 80197d8:	4620      	mov	r0, r4
 80197da:	e9cd 6500 	strd	r6, r5, [sp]
 80197de:	f7ff fcc2 	bl	8019166 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80197e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197e4:	443b      	add	r3, r7
 80197e6:	930a      	str	r3, [sp, #40]	; 0x28
 80197e8:	e7ee      	b.n	80197c8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

080197ea <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80197ea:	4413      	add	r3, r2
 80197ec:	7a42      	ldrb	r2, [r0, #9]
 80197ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80197f2:	4419      	add	r1, r3
 80197f4:	7a03      	ldrb	r3, [r0, #8]
 80197f6:	435a      	muls	r2, r3
 80197f8:	1c53      	adds	r3, r2, #1
 80197fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80197fe:	121b      	asrs	r3, r3, #8
 8019800:	2bff      	cmp	r3, #255	; 0xff
 8019802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019804:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8019808:	d13e      	bne.n	8019888 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801980a:	4427      	add	r7, r4
 801980c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019810:	3103      	adds	r1, #3
 8019812:	7d86      	ldrb	r6, [r0, #22]
 8019814:	2bff      	cmp	r3, #255	; 0xff
 8019816:	d10a      	bne.n	801982e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8019818:	f801 6c03 	strb.w	r6, [r1, #-3]
 801981c:	7d43      	ldrb	r3, [r0, #21]
 801981e:	f801 3c02 	strb.w	r3, [r1, #-2]
 8019822:	7d03      	ldrb	r3, [r0, #20]
 8019824:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019828:	42a7      	cmp	r7, r4
 801982a:	d1ef      	bne.n	801980c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801982c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801982e:	b29a      	uxth	r2, r3
 8019830:	43db      	mvns	r3, r3
 8019832:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8019836:	fb16 f602 	smulbb	r6, r6, r2
 801983a:	b2db      	uxtb	r3, r3
 801983c:	fb05 6503 	mla	r5, r5, r3, r6
 8019840:	b2ad      	uxth	r5, r5
 8019842:	1c6e      	adds	r6, r5, #1
 8019844:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019848:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801984c:	fb16 f603 	smulbb	r6, r6, r3
 8019850:	122d      	asrs	r5, r5, #8
 8019852:	f801 5c03 	strb.w	r5, [r1, #-3]
 8019856:	7d45      	ldrb	r5, [r0, #21]
 8019858:	fb05 6502 	mla	r5, r5, r2, r6
 801985c:	b2ad      	uxth	r5, r5
 801985e:	1c6e      	adds	r6, r5, #1
 8019860:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019864:	122d      	asrs	r5, r5, #8
 8019866:	f801 5c02 	strb.w	r5, [r1, #-2]
 801986a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801986e:	7d06      	ldrb	r6, [r0, #20]
 8019870:	fb15 f303 	smulbb	r3, r5, r3
 8019874:	fb06 3202 	mla	r2, r6, r2, r3
 8019878:	b292      	uxth	r2, r2
 801987a:	1c53      	adds	r3, r2, #1
 801987c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019880:	1212      	asrs	r2, r2, #8
 8019882:	f801 2c01 	strb.w	r2, [r1, #-1]
 8019886:	e7cf      	b.n	8019828 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8019888:	b2de      	uxtb	r6, r3
 801988a:	2b00      	cmp	r3, #0
 801988c:	d0ce      	beq.n	801982c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801988e:	3103      	adds	r1, #3
 8019890:	4427      	add	r7, r4
 8019892:	f814 2b01 	ldrb.w	r2, [r4], #1
 8019896:	3103      	adds	r1, #3
 8019898:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801989c:	fb02 f306 	mul.w	r3, r2, r6
 80198a0:	42bc      	cmp	r4, r7
 80198a2:	f103 0201 	add.w	r2, r3, #1
 80198a6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80198aa:	ea4f 2222 	mov.w	r2, r2, asr #8
 80198ae:	b295      	uxth	r5, r2
 80198b0:	ea6f 0202 	mvn.w	r2, r2
 80198b4:	b2d3      	uxtb	r3, r2
 80198b6:	7d82      	ldrb	r2, [r0, #22]
 80198b8:	fb1c fc03 	smulbb	ip, ip, r3
 80198bc:	fb02 c205 	mla	r2, r2, r5, ip
 80198c0:	b292      	uxth	r2, r2
 80198c2:	f102 0c01 	add.w	ip, r2, #1
 80198c6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80198ca:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80198ce:	fb1c fc03 	smulbb	ip, ip, r3
 80198d2:	ea4f 2222 	mov.w	r2, r2, asr #8
 80198d6:	f801 2c06 	strb.w	r2, [r1, #-6]
 80198da:	7d42      	ldrb	r2, [r0, #21]
 80198dc:	fb02 c205 	mla	r2, r2, r5, ip
 80198e0:	b292      	uxth	r2, r2
 80198e2:	f102 0c01 	add.w	ip, r2, #1
 80198e6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80198ea:	ea4f 2222 	mov.w	r2, r2, asr #8
 80198ee:	f801 2c05 	strb.w	r2, [r1, #-5]
 80198f2:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80198f6:	f890 c014 	ldrb.w	ip, [r0, #20]
 80198fa:	fb12 f303 	smulbb	r3, r2, r3
 80198fe:	fb0c 3305 	mla	r3, ip, r5, r3
 8019902:	b29b      	uxth	r3, r3
 8019904:	f103 0201 	add.w	r2, r3, #1
 8019908:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801990c:	ea4f 2323 	mov.w	r3, r3, asr #8
 8019910:	f801 3c04 	strb.w	r3, [r1, #-4]
 8019914:	d1bd      	bne.n	8019892 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8019916:	e789      	b.n	801982c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08019918 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8019918:	b510      	push	{r4, lr}
 801991a:	7d04      	ldrb	r4, [r0, #20]
 801991c:	700c      	strb	r4, [r1, #0]
 801991e:	7d41      	ldrb	r1, [r0, #21]
 8019920:	7011      	strb	r1, [r2, #0]
 8019922:	7d82      	ldrb	r2, [r0, #22]
 8019924:	701a      	strb	r2, [r3, #0]
 8019926:	9b02      	ldr	r3, [sp, #8]
 8019928:	7a42      	ldrb	r2, [r0, #9]
 801992a:	2001      	movs	r0, #1
 801992c:	701a      	strb	r2, [r3, #0]
 801992e:	bd10      	pop	{r4, pc}

08019930 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8019930:	6281      	str	r1, [r0, #40]	; 0x28
 8019932:	4770      	bx	lr

08019934 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8019934:	b513      	push	{r0, r1, r4, lr}
 8019936:	6803      	ldr	r3, [r0, #0]
 8019938:	4604      	mov	r4, r0
 801993a:	4601      	mov	r1, r0
 801993c:	4668      	mov	r0, sp
 801993e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019940:	4798      	blx	r3
 8019942:	6823      	ldr	r3, [r4, #0]
 8019944:	4669      	mov	r1, sp
 8019946:	4620      	mov	r0, r4
 8019948:	691b      	ldr	r3, [r3, #16]
 801994a:	4798      	blx	r3
 801994c:	b002      	add	sp, #8
 801994e:	bd10      	pop	{r4, pc}

08019950 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8019950:	b510      	push	{r4, lr}
 8019952:	2200      	movs	r2, #0
 8019954:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8019958:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801995c:	8002      	strh	r2, [r0, #0]
 801995e:	8042      	strh	r2, [r0, #2]
 8019960:	8084      	strh	r4, [r0, #4]
 8019962:	80c1      	strh	r1, [r0, #6]
 8019964:	bd10      	pop	{r4, pc}

08019966 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8019966:	2200      	movs	r2, #0
 8019968:	8002      	strh	r2, [r0, #0]
 801996a:	8042      	strh	r2, [r0, #2]
 801996c:	8082      	strh	r2, [r0, #4]
 801996e:	80c2      	strh	r2, [r0, #6]
 8019970:	4770      	bx	lr
	...

08019974 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8019974:	b508      	push	{r3, lr}
 8019976:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019978:	b928      	cbnz	r0, 8019986 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801997a:	4b03      	ldr	r3, [pc, #12]	; (8019988 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801997c:	2123      	movs	r1, #35	; 0x23
 801997e:	4a03      	ldr	r2, [pc, #12]	; (801998c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8019980:	4803      	ldr	r0, [pc, #12]	; (8019990 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8019982:	f00d fec7 	bl	8027714 <__assert_func>
 8019986:	bd08      	pop	{r3, pc}
 8019988:	0802b760 	.word	0x0802b760
 801998c:	0802b844 	.word	0x0802b844
 8019990:	0802b787 	.word	0x0802b787

08019994 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8019994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019998:	b089      	sub	sp, #36	; 0x24
 801999a:	4604      	mov	r4, r0
 801999c:	6808      	ldr	r0, [r1, #0]
 801999e:	f04f 0a00 	mov.w	sl, #0
 80199a2:	6849      	ldr	r1, [r1, #4]
 80199a4:	ab02      	add	r3, sp, #8
 80199a6:	f04f 0b01 	mov.w	fp, #1
 80199aa:	c303      	stmia	r3!, {r0, r1}
 80199ac:	4b3f      	ldr	r3, [pc, #252]	; (8019aac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80199ae:	4621      	mov	r1, r4
 80199b0:	a804      	add	r0, sp, #16
 80199b2:	781b      	ldrb	r3, [r3, #0]
 80199b4:	2b01      	cmp	r3, #1
 80199b6:	6823      	ldr	r3, [r4, #0]
 80199b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199ba:	bf1f      	itttt	ne
 80199bc:	f10d 0906 	addne.w	r9, sp, #6
 80199c0:	ae03      	addne	r6, sp, #12
 80199c2:	f10d 050e 	addne.w	r5, sp, #14
 80199c6:	f10d 080a 	addne.w	r8, sp, #10
 80199ca:	bf01      	itttt	eq
 80199cc:	f10d 090e 	addeq.w	r9, sp, #14
 80199d0:	f10d 0606 	addeq.w	r6, sp, #6
 80199d4:	ad03      	addeq	r5, sp, #12
 80199d6:	f10d 0808 	addeq.w	r8, sp, #8
 80199da:	4798      	blx	r3
 80199dc:	f9b5 3000 	ldrsh.w	r3, [r5]
 80199e0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d056      	beq.n	8019a96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80199e8:	4293      	cmp	r3, r2
 80199ea:	bfa8      	it	ge
 80199ec:	4613      	movge	r3, r2
 80199ee:	f8ad 3006 	strh.w	r3, [sp, #6]
 80199f2:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80199f6:	2f00      	cmp	r7, #0
 80199f8:	dd34      	ble.n	8019a64 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80199fa:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80199fe:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8019a02:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019a06:	4484      	add	ip, r0
 8019a08:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019a0c:	f9b6 e000 	ldrsh.w	lr, [r6]
 8019a10:	fa0f fc8c 	sxth.w	ip, ip
 8019a14:	f9b9 1000 	ldrsh.w	r1, [r9]
 8019a18:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019a1c:	4562      	cmp	r2, ip
 8019a1e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019a22:	f8ad e01c 	strh.w	lr, [sp, #28]
 8019a26:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019a2a:	da29      	bge.n	8019a80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019a2c:	4472      	add	r2, lr
 8019a2e:	b212      	sxth	r2, r2
 8019a30:	4290      	cmp	r0, r2
 8019a32:	da25      	bge.n	8019a80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019a34:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019a38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019a3c:	4402      	add	r2, r0
 8019a3e:	b212      	sxth	r2, r2
 8019a40:	4293      	cmp	r3, r2
 8019a42:	da1d      	bge.n	8019a80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019a44:	440b      	add	r3, r1
 8019a46:	b21b      	sxth	r3, r3
 8019a48:	4298      	cmp	r0, r3
 8019a4a:	da19      	bge.n	8019a80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019a4c:	6823      	ldr	r3, [r4, #0]
 8019a4e:	a906      	add	r1, sp, #24
 8019a50:	4620      	mov	r0, r4
 8019a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a54:	4798      	blx	r3
 8019a56:	b998      	cbnz	r0, 8019a80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019a58:	107f      	asrs	r7, r7, #1
 8019a5a:	f04f 0a01 	mov.w	sl, #1
 8019a5e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8019a62:	e7c6      	b.n	80199f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8019a64:	d10c      	bne.n	8019a80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019a66:	f8ad b006 	strh.w	fp, [sp, #6]
 8019a6a:	f8b8 2000 	ldrh.w	r2, [r8]
 8019a6e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8019a72:	440a      	add	r2, r1
 8019a74:	f8a8 2000 	strh.w	r2, [r8]
 8019a78:	882b      	ldrh	r3, [r5, #0]
 8019a7a:	1a5b      	subs	r3, r3, r1
 8019a7c:	802b      	strh	r3, [r5, #0]
 8019a7e:	e7ad      	b.n	80199dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019a80:	f1ba 0f00 	cmp.w	sl, #0
 8019a84:	d0f1      	beq.n	8019a6a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8019a86:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019a8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019a8e:	429a      	cmp	r2, r3
 8019a90:	bf08      	it	eq
 8019a92:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8019a94:	e7e9      	b.n	8019a6a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8019a96:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019a9a:	429a      	cmp	r2, r3
 8019a9c:	bf04      	itt	eq
 8019a9e:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8019aa2:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8019aa4:	b009      	add	sp, #36	; 0x24
 8019aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aaa:	bf00      	nop
 8019aac:	2000b414 	.word	0x2000b414

08019ab0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8019ab0:	2200      	movs	r2, #0
 8019ab2:	2101      	movs	r1, #1
 8019ab4:	8082      	strh	r2, [r0, #4]
 8019ab6:	80c2      	strh	r2, [r0, #6]
 8019ab8:	8102      	strh	r2, [r0, #8]
 8019aba:	8142      	strh	r2, [r0, #10]
 8019abc:	8182      	strh	r2, [r0, #12]
 8019abe:	81c2      	strh	r2, [r0, #14]
 8019ac0:	8202      	strh	r2, [r0, #16]
 8019ac2:	8242      	strh	r2, [r0, #18]
 8019ac4:	61c2      	str	r2, [r0, #28]
 8019ac6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8019aca:	6282      	str	r2, [r0, #40]	; 0x28
 8019acc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8019ad0:	4905      	ldr	r1, [pc, #20]	; (8019ae8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8019ad2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019ad6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019ada:	6001      	str	r1, [r0, #0]
 8019adc:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019ade:	22ff      	movs	r2, #255	; 0xff
 8019ae0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8019ae4:	4770      	bx	lr
 8019ae6:	bf00      	nop
 8019ae8:	0802b7cc 	.word	0x0802b7cc

08019aec <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8019aec:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8019af0:	4602      	mov	r2, r0
 8019af2:	cb03      	ldmia	r3!, {r0, r1}
 8019af4:	6010      	str	r0, [r2, #0]
 8019af6:	4610      	mov	r0, r2
 8019af8:	6051      	str	r1, [r2, #4]
 8019afa:	4770      	bx	lr

08019afc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b00:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8019b04:	2d00      	cmp	r5, #0
 8019b06:	dd34      	ble.n	8019b72 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x76>
 8019b08:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8019b0c:	f1bc 0f00 	cmp.w	ip, #0
 8019b10:	dd2f      	ble.n	8019b72 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x76>
 8019b12:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019b16:	f9b1 e000 	ldrsh.w	lr, [r1]
 8019b1a:	2c00      	cmp	r4, #0
 8019b1c:	dd2b      	ble.n	8019b76 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x7a>
 8019b1e:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8019b22:	2f00      	cmp	r7, #0
 8019b24:	dd27      	ble.n	8019b76 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x7a>
 8019b26:	f9b0 8000 	ldrsh.w	r8, [r0]
 8019b2a:	4475      	add	r5, lr
 8019b2c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8019b30:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019b34:	45f0      	cmp	r8, lr
 8019b36:	4646      	mov	r6, r8
 8019b38:	4444      	add	r4, r8
 8019b3a:	bfa8      	it	ge
 8019b3c:	4676      	movge	r6, lr
 8019b3e:	4293      	cmp	r3, r2
 8019b40:	4619      	mov	r1, r3
 8019b42:	443b      	add	r3, r7
 8019b44:	bfa8      	it	ge
 8019b46:	4611      	movge	r1, r2
 8019b48:	4462      	add	r2, ip
 8019b4a:	b22d      	sxth	r5, r5
 8019b4c:	8006      	strh	r6, [r0, #0]
 8019b4e:	b224      	sxth	r4, r4
 8019b50:	8041      	strh	r1, [r0, #2]
 8019b52:	b212      	sxth	r2, r2
 8019b54:	b21b      	sxth	r3, r3
 8019b56:	42a5      	cmp	r5, r4
 8019b58:	bfac      	ite	ge
 8019b5a:	ebc6 0405 	rsbge	r4, r6, r5
 8019b5e:	ebc6 0404 	rsblt	r4, r6, r4
 8019b62:	429a      	cmp	r2, r3
 8019b64:	bfac      	ite	ge
 8019b66:	ebc1 0302 	rsbge	r3, r1, r2
 8019b6a:	ebc1 0303 	rsblt	r3, r1, r3
 8019b6e:	8084      	strh	r4, [r0, #4]
 8019b70:	80c3      	strh	r3, [r0, #6]
 8019b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b76:	f8a0 e000 	strh.w	lr, [r0]
 8019b7a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019b7e:	8043      	strh	r3, [r0, #2]
 8019b80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019b84:	8083      	strh	r3, [r0, #4]
 8019b86:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019b8a:	e7f1      	b.n	8019b70 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>

08019b8c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8019b8c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8019b90:	f04f 0300 	mov.w	r3, #0
 8019b94:	bf2c      	ite	cs
 8019b96:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8019b9a:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8019b9e:	1899      	adds	r1, r3, r2
 8019ba0:	4288      	cmp	r0, r1
 8019ba2:	bf24      	itt	cs
 8019ba4:	1853      	addcs	r3, r2, r1
 8019ba6:	1a40      	subcs	r0, r0, r1
 8019ba8:	0892      	lsrs	r2, r2, #2
 8019baa:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8019bae:	d1f6      	bne.n	8019b9e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	4770      	bx	lr

08019bb4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8019bb4:	2800      	cmp	r0, #0
 8019bb6:	b508      	push	{r3, lr}
 8019bb8:	da05      	bge.n	8019bc6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8019bba:	4240      	negs	r0, r0
 8019bbc:	f7ff fffa 	bl	8019bb4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8019bc0:	4240      	negs	r0, r0
 8019bc2:	b240      	sxtb	r0, r0
 8019bc4:	bd08      	pop	{r3, pc}
 8019bc6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019bca:	dc11      	bgt.n	8019bf0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8019bcc:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8019bd0:	dd09      	ble.n	8019be6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8019bd2:	4340      	muls	r0, r0
 8019bd4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8019bd8:	f7ff ffd8 	bl	8019b8c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8019bdc:	f7ff ffea 	bl	8019bb4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8019be0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8019be4:	e7ed      	b.n	8019bc2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8019be6:	3003      	adds	r0, #3
 8019be8:	4b02      	ldr	r3, [pc, #8]	; (8019bf4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8019bea:	10c0      	asrs	r0, r0, #3
 8019bec:	5618      	ldrsb	r0, [r3, r0]
 8019bee:	e7e9      	b.n	8019bc4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8019bf0:	2000      	movs	r0, #0
 8019bf2:	e7e7      	b.n	8019bc4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8019bf4:	0802b892 	.word	0x0802b892

08019bf8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8019bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019bfa:	460c      	mov	r4, r1
 8019bfc:	1e01      	subs	r1, r0, #0
 8019bfe:	4615      	mov	r5, r2
 8019c00:	db01      	blt.n	8019c06 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8019c02:	2c00      	cmp	r4, #0
 8019c04:	da06      	bge.n	8019c14 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8019c06:	4b11      	ldr	r3, [pc, #68]	; (8019c4c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8019c08:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8019c0c:	4a10      	ldr	r2, [pc, #64]	; (8019c50 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8019c0e:	4811      	ldr	r0, [pc, #68]	; (8019c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8019c10:	f00d fd80 	bl	8027714 <__assert_func>
 8019c14:	428c      	cmp	r4, r1
 8019c16:	dd06      	ble.n	8019c26 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8019c18:	4620      	mov	r0, r4
 8019c1a:	f7ff ffed 	bl	8019bf8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8019c1e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8019c22:	b003      	add	sp, #12
 8019c24:	bd30      	pop	{r4, r5, pc}
 8019c26:	4349      	muls	r1, r1
 8019c28:	fb04 1004 	mla	r0, r4, r4, r1
 8019c2c:	f7ff ffae 	bl	8019b8c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8019c30:	6028      	str	r0, [r5, #0]
 8019c32:	2800      	cmp	r0, #0
 8019c34:	d0f5      	beq.n	8019c22 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8019c36:	4602      	mov	r2, r0
 8019c38:	ab01      	add	r3, sp, #4
 8019c3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019c3e:	4620      	mov	r0, r4
 8019c40:	f002 fcf8 	bl	801c634 <_ZN8touchgfx6muldivElllRl>
 8019c44:	f7ff ffb6 	bl	8019bb4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8019c48:	e7eb      	b.n	8019c22 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8019c4a:	bf00      	nop
 8019c4c:	0802b8ed 	.word	0x0802b8ed
 8019c50:	0802b9b4 	.word	0x0802b9b4
 8019c54:	0802b8fe 	.word	0x0802b8fe

08019c58 <_ZN8touchgfx4LineC1Ev>:
 8019c58:	b510      	push	{r4, lr}
 8019c5a:	4604      	mov	r4, r0
 8019c5c:	f7ff ff28 	bl	8019ab0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8019c60:	4b0c      	ldr	r3, [pc, #48]	; (8019c94 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8019c62:	2220      	movs	r2, #32
 8019c64:	4620      	mov	r0, r4
 8019c66:	6023      	str	r3, [r4, #0]
 8019c68:	2300      	movs	r3, #0
 8019c6a:	6422      	str	r2, [r4, #64]	; 0x40
 8019c6c:	2212      	movs	r2, #18
 8019c6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8019c72:	6722      	str	r2, [r4, #112]	; 0x70
 8019c74:	60a3      	str	r3, [r4, #8]
 8019c76:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8019c7a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8019c7e:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019c82:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8019c86:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8019c8a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8019c8e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8019c92:	bd10      	pop	{r4, pc}
 8019c94:	0802b93c 	.word	0x0802b93c

08019c98 <_ZNK8touchgfx4Line18getLineEndingStyleEv>:
 8019c98:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8019c9c:	4770      	bx	lr
	...

08019ca0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8019ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8019ca6:	b085      	sub	sp, #20
 8019ca8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019caa:	4604      	mov	r4, r0
 8019cac:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8019cae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8019cb0:	1af6      	subs	r6, r6, r3
 8019cb2:	eba5 0502 	sub.w	r5, r5, r2
 8019cb6:	f040 809b 	bne.w	8019df0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8019cba:	b955      	cbnz	r5, 8019cd2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8019cbc:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8019cc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019cc4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8019cc8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8019ccc:	b005      	add	sp, #20
 8019cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cd2:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8019cd6:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8019cda:	f04f 0802 	mov.w	r8, #2
 8019cde:	463a      	mov	r2, r7
 8019ce0:	4629      	mov	r1, r5
 8019ce2:	ab03      	add	r3, sp, #12
 8019ce4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019ce6:	f002 fca5 	bl	801c634 <_ZN8touchgfx6muldivElllRl>
 8019cea:	ab03      	add	r3, sp, #12
 8019cec:	463a      	mov	r2, r7
 8019cee:	4631      	mov	r1, r6
 8019cf0:	fb90 f5f8 	sdiv	r5, r0, r8
 8019cf4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019cf6:	f002 fc9d 	bl	801c634 <_ZN8touchgfx6muldivElllRl>
 8019cfa:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8019cfe:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8019d02:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8019d06:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8019d08:	fb90 f0f8 	sdiv	r0, r0, r8
 8019d0c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8019d10:	eba8 0305 	sub.w	r3, r8, r5
 8019d14:	f1ba 0f00 	cmp.w	sl, #0
 8019d18:	f040 80c3 	bne.w	8019ea2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8019d1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8019d1e:	19c3      	adds	r3, r0, r7
 8019d20:	65a3      	str	r3, [r4, #88]	; 0x58
 8019d22:	ebae 0305 	sub.w	r3, lr, r5
 8019d26:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019d28:	eb00 030c 	add.w	r3, r0, ip
 8019d2c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019d2e:	eb05 030e 	add.w	r3, r5, lr
 8019d32:	6523      	str	r3, [r4, #80]	; 0x50
 8019d34:	ebac 0300 	sub.w	r3, ip, r0
 8019d38:	6623      	str	r3, [r4, #96]	; 0x60
 8019d3a:	eb05 0308 	add.w	r3, r5, r8
 8019d3e:	6563      	str	r3, [r4, #84]	; 0x54
 8019d40:	1a3b      	subs	r3, r7, r0
 8019d42:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8019d44:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8019d48:	6663      	str	r3, [r4, #100]	; 0x64
 8019d4a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8019d4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019d50:	4632      	mov	r2, r6
 8019d52:	9301      	str	r3, [sp, #4]
 8019d54:	9100      	str	r1, [sp, #0]
 8019d56:	f859 bb04 	ldr.w	fp, [r9], #4
 8019d5a:	9b00      	ldr	r3, [sp, #0]
 8019d5c:	455e      	cmp	r6, fp
 8019d5e:	bfa8      	it	ge
 8019d60:	465e      	movge	r6, fp
 8019d62:	455a      	cmp	r2, fp
 8019d64:	bfb8      	it	lt
 8019d66:	465a      	movlt	r2, fp
 8019d68:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8019d6c:	4559      	cmp	r1, fp
 8019d6e:	bfa8      	it	ge
 8019d70:	4659      	movge	r1, fp
 8019d72:	455b      	cmp	r3, fp
 8019d74:	bfb8      	it	lt
 8019d76:	465b      	movlt	r3, fp
 8019d78:	9300      	str	r3, [sp, #0]
 8019d7a:	9b01      	ldr	r3, [sp, #4]
 8019d7c:	454b      	cmp	r3, r9
 8019d7e:	d1ea      	bne.n	8019d56 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8019d80:	f04f 0b20 	mov.w	fp, #32
 8019d84:	b209      	sxth	r1, r1
 8019d86:	b212      	sxth	r2, r2
 8019d88:	f1ba 0f01 	cmp.w	sl, #1
 8019d8c:	b236      	sxth	r6, r6
 8019d8e:	fb91 f9fb 	sdiv	r9, r1, fp
 8019d92:	f9bd 1000 	ldrsh.w	r1, [sp]
 8019d96:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8019d9a:	fb92 f2fb 	sdiv	r2, r2, fp
 8019d9e:	fb91 f1fb 	sdiv	r1, r1, fp
 8019da2:	fb96 f6fb 	sdiv	r6, r6, fp
 8019da6:	f102 0201 	add.w	r2, r2, #1
 8019daa:	f101 0101 	add.w	r1, r1, #1
 8019dae:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8019db2:	eba1 0109 	sub.w	r1, r1, r9
 8019db6:	eba2 0606 	sub.w	r6, r2, r6
 8019dba:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8019dbe:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8019dc2:	d183      	bne.n	8019ccc <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8019dc4:	eba8 0305 	sub.w	r3, r8, r5
 8019dc8:	64a3      	str	r3, [r4, #72]	; 0x48
 8019dca:	19c3      	adds	r3, r0, r7
 8019dcc:	65a3      	str	r3, [r4, #88]	; 0x58
 8019dce:	ebae 0305 	sub.w	r3, lr, r5
 8019dd2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019dd4:	eb00 030c 	add.w	r3, r0, ip
 8019dd8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019dda:	eb05 030e 	add.w	r3, r5, lr
 8019dde:	4445      	add	r5, r8
 8019de0:	6523      	str	r3, [r4, #80]	; 0x50
 8019de2:	ebac 0300 	sub.w	r3, ip, r0
 8019de6:	1a38      	subs	r0, r7, r0
 8019de8:	6565      	str	r5, [r4, #84]	; 0x54
 8019dea:	6623      	str	r3, [r4, #96]	; 0x60
 8019dec:	6660      	str	r0, [r4, #100]	; 0x64
 8019dee:	e76d      	b.n	8019ccc <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8019df0:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8019df4:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8019df8:	2d00      	cmp	r5, #0
 8019dfa:	f43f af6e 	beq.w	8019cda <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8019dfe:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8019e02:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8019e06:	fb93 f2f7 	sdiv	r2, r3, r7
 8019e0a:	fb07 3312 	mls	r3, r7, r2, r3
 8019e0e:	b34b      	cbz	r3, 8019e64 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8019e10:	fb97 f2f3 	sdiv	r2, r7, r3
 8019e14:	fb03 7712 	mls	r7, r3, r2, r7
 8019e18:	2f00      	cmp	r7, #0
 8019e1a:	d1f4      	bne.n	8019e06 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8019e1c:	2b01      	cmp	r3, #1
 8019e1e:	f24b 5204 	movw	r2, #46340	; 0xb504
 8019e22:	bf18      	it	ne
 8019e24:	fb96 f6f3 	sdivne	r6, r6, r3
 8019e28:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8019e2c:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8019e30:	bf18      	it	ne
 8019e32:	fb95 f5f3 	sdivne	r5, r5, r3
 8019e36:	4291      	cmp	r1, r2
 8019e38:	dd16      	ble.n	8019e68 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8019e3a:	2d00      	cmp	r5, #0
 8019e3c:	da4d      	bge.n	8019eda <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8019e3e:	4b29      	ldr	r3, [pc, #164]	; (8019ee4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8019e40:	429d      	cmp	r5, r3
 8019e42:	da27      	bge.n	8019e94 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8019e44:	426a      	negs	r2, r5
 8019e46:	f24b 5304 	movw	r3, #46340	; 0xb504
 8019e4a:	fb91 f1f3 	sdiv	r1, r1, r3
 8019e4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e52:	4299      	cmp	r1, r3
 8019e54:	bfcc      	ite	gt
 8019e56:	1c4b      	addgt	r3, r1, #1
 8019e58:	3301      	addle	r3, #1
 8019e5a:	fb96 f6f3 	sdiv	r6, r6, r3
 8019e5e:	fb95 f5f3 	sdiv	r5, r5, r3
 8019e62:	e00f      	b.n	8019e84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8019e64:	463b      	mov	r3, r7
 8019e66:	e7d9      	b.n	8019e1c <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8019e68:	2d00      	cmp	r5, #0
 8019e6a:	fb92 f2f1 	sdiv	r2, r2, r1
 8019e6e:	da13      	bge.n	8019e98 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8019e70:	4269      	negs	r1, r5
 8019e72:	f24b 5304 	movw	r3, #46340	; 0xb504
 8019e76:	fb93 f3f1 	sdiv	r3, r3, r1
 8019e7a:	429a      	cmp	r2, r3
 8019e7c:	bfa8      	it	ge
 8019e7e:	461a      	movge	r2, r3
 8019e80:	4356      	muls	r6, r2
 8019e82:	4355      	muls	r5, r2
 8019e84:	fb05 f005 	mul.w	r0, r5, r5
 8019e88:	fb06 0006 	mla	r0, r6, r6, r0
 8019e8c:	f7ff fe7e 	bl	8019b8c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8019e90:	4607      	mov	r7, r0
 8019e92:	e722      	b.n	8019cda <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8019e94:	2200      	movs	r2, #0
 8019e96:	e7eb      	b.n	8019e70 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8019e98:	4629      	mov	r1, r5
 8019e9a:	e7ea      	b.n	8019e72 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8019e9c:	4629      	mov	r1, r5
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	e7e7      	b.n	8019e72 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8019ea2:	1a1b      	subs	r3, r3, r0
 8019ea4:	64a3      	str	r3, [r4, #72]	; 0x48
 8019ea6:	19c3      	adds	r3, r0, r7
 8019ea8:	1b5b      	subs	r3, r3, r5
 8019eaa:	65a3      	str	r3, [r4, #88]	; 0x58
 8019eac:	ebae 0305 	sub.w	r3, lr, r5
 8019eb0:	4403      	add	r3, r0
 8019eb2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019eb4:	eb00 030c 	add.w	r3, r0, ip
 8019eb8:	442b      	add	r3, r5
 8019eba:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019ebc:	eb05 030e 	add.w	r3, r5, lr
 8019ec0:	4403      	add	r3, r0
 8019ec2:	6523      	str	r3, [r4, #80]	; 0x50
 8019ec4:	ebac 0300 	sub.w	r3, ip, r0
 8019ec8:	442b      	add	r3, r5
 8019eca:	6623      	str	r3, [r4, #96]	; 0x60
 8019ecc:	eb05 0308 	add.w	r3, r5, r8
 8019ed0:	1a1b      	subs	r3, r3, r0
 8019ed2:	6563      	str	r3, [r4, #84]	; 0x54
 8019ed4:	1a3b      	subs	r3, r7, r0
 8019ed6:	1b5b      	subs	r3, r3, r5
 8019ed8:	e733      	b.n	8019d42 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8019eda:	4295      	cmp	r5, r2
 8019edc:	ddde      	ble.n	8019e9c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8019ede:	462a      	mov	r2, r5
 8019ee0:	e7b1      	b.n	8019e46 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8019ee2:	bf00      	nop
 8019ee4:	ffff4afc 	.word	0xffff4afc

08019ee8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8019ee8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019eea:	428b      	cmp	r3, r1
 8019eec:	d102      	bne.n	8019ef4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8019eee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8019ef0:	4293      	cmp	r3, r2
 8019ef2:	d003      	beq.n	8019efc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8019ef4:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8019ef8:	f7ff bed2 	b.w	8019ca0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8019efc:	4770      	bx	lr

08019efe <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>:
 8019efe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019f00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019f02:	4604      	mov	r4, r0
 8019f04:	460e      	mov	r6, r1
 8019f06:	4615      	mov	r5, r2
 8019f08:	428b      	cmp	r3, r1
 8019f0a:	d102      	bne.n	8019f12 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x14>
 8019f0c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8019f0e:	4293      	cmp	r3, r2
 8019f10:	d017      	beq.n	8019f42 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x44>
 8019f12:	6823      	ldr	r3, [r4, #0]
 8019f14:	4621      	mov	r1, r4
 8019f16:	4668      	mov	r0, sp
 8019f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f1a:	4798      	blx	r3
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	e9c4 650e 	strd	r6, r5, [r4, #56]	; 0x38
 8019f22:	f7ff febd 	bl	8019ca0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8019f26:	6823      	ldr	r3, [r4, #0]
 8019f28:	4621      	mov	r1, r4
 8019f2a:	a802      	add	r0, sp, #8
 8019f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f2e:	4798      	blx	r3
 8019f30:	a902      	add	r1, sp, #8
 8019f32:	4668      	mov	r0, sp
 8019f34:	f7ff fde2 	bl	8019afc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019f38:	6823      	ldr	r3, [r4, #0]
 8019f3a:	4669      	mov	r1, sp
 8019f3c:	4620      	mov	r0, r4
 8019f3e:	691b      	ldr	r3, [r3, #16]
 8019f40:	4798      	blx	r3
 8019f42:	b004      	add	sp, #16
 8019f44:	bd70      	pop	{r4, r5, r6, pc}

08019f46 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8019f46:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8019f4a:	f7ff bea9 	b.w	8019ca0 <_ZN8touchgfx4Line17updateCachedShapeEv>

08019f4e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8019f4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f52:	b0b3      	sub	sp, #204	; 0xcc
 8019f54:	4604      	mov	r4, r0
 8019f56:	460a      	mov	r2, r1
 8019f58:	4601      	mov	r1, r0
 8019f5a:	a803      	add	r0, sp, #12
 8019f5c:	ad32      	add	r5, sp, #200	; 0xc8
 8019f5e:	f00c f803 	bl	8025f68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8019f62:	2300      	movs	r3, #0
 8019f64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8019f66:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8019f6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019f6c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019f6e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019f70:	1ac0      	subs	r0, r0, r3
 8019f72:	eba1 0102 	sub.w	r1, r1, r2
 8019f76:	d43c      	bmi.n	8019ff2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8019f78:	2900      	cmp	r1, #0
 8019f7a:	462a      	mov	r2, r5
 8019f7c:	db33      	blt.n	8019fe6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8019f7e:	f7ff fe3b 	bl	8019bf8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8019f82:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8019f86:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8019f88:	a803      	add	r0, sp, #12
 8019f8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019f8c:	f00c f9b5 	bl	80262fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8019f90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8019f92:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8019f94:	a803      	add	r0, sp, #12
 8019f96:	f00c f93f 	bl	8026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8019f9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019f9e:	2b01      	cmp	r3, #1
 8019fa0:	d137      	bne.n	801a012 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8019fa2:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8019fa4:	2eb3      	cmp	r6, #179	; 0xb3
 8019fa6:	dc34      	bgt.n	801a012 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8019fa8:	eba7 0906 	sub.w	r9, r7, r6
 8019fac:	4648      	mov	r0, r9
 8019fae:	f7fe fec3 	bl	8018d38 <_ZN8touchgfx7CWRUtil4sineEi>
 8019fb2:	a901      	add	r1, sp, #4
 8019fb4:	9001      	str	r0, [sp, #4]
 8019fb6:	4628      	mov	r0, r5
 8019fb8:	f7fe feb2 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019fbc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019fbe:	eb00 0801 	add.w	r8, r0, r1
 8019fc2:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8019fc6:	f7fe feb7 	bl	8018d38 <_ZN8touchgfx7CWRUtil4sineEi>
 8019fca:	a902      	add	r1, sp, #8
 8019fcc:	9002      	str	r0, [sp, #8]
 8019fce:	4628      	mov	r0, r5
 8019fd0:	f7fe fea6 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019fd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019fd6:	4641      	mov	r1, r8
 8019fd8:	1a12      	subs	r2, r2, r0
 8019fda:	a803      	add	r0, sp, #12
 8019fdc:	f00c f91c 	bl	8026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8019fe0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019fe2:	441e      	add	r6, r3
 8019fe4:	e7de      	b.n	8019fa4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8019fe6:	4249      	negs	r1, r1
 8019fe8:	f7ff fe06 	bl	8019bf8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8019fec:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8019ff0:	e7c9      	b.n	8019f86 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8019ff2:	2900      	cmp	r1, #0
 8019ff4:	f1c0 0000 	rsb	r0, r0, #0
 8019ff8:	462a      	mov	r2, r5
 8019ffa:	db04      	blt.n	801a006 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8019ffc:	f7ff fdfc 	bl	8019bf8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a000:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801a004:	e7bf      	b.n	8019f86 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a006:	4249      	negs	r1, r1
 801a008:	f7ff fdf6 	bl	8019bf8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a00c:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801a010:	e7b9      	b.n	8019f86 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a012:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801a014:	a803      	add	r0, sp, #12
 801a016:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a018:	f00c f8fe 	bl	8026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a01c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a01e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801a020:	a803      	add	r0, sp, #12
 801a022:	f00c f8f9 	bl	8026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a026:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a02a:	2b01      	cmp	r3, #1
 801a02c:	d123      	bne.n	801a076 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a02e:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a030:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801a034:	2e00      	cmp	r6, #0
 801a036:	dd1e      	ble.n	801a076 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a038:	eb06 0907 	add.w	r9, r6, r7
 801a03c:	4648      	mov	r0, r9
 801a03e:	f7fe fe7b 	bl	8018d38 <_ZN8touchgfx7CWRUtil4sineEi>
 801a042:	a901      	add	r1, sp, #4
 801a044:	9001      	str	r0, [sp, #4]
 801a046:	4628      	mov	r0, r5
 801a048:	f7fe fe6a 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a04c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a04e:	eb00 0801 	add.w	r8, r0, r1
 801a052:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a056:	f7fe fe6f 	bl	8018d38 <_ZN8touchgfx7CWRUtil4sineEi>
 801a05a:	a902      	add	r1, sp, #8
 801a05c:	9002      	str	r0, [sp, #8]
 801a05e:	4628      	mov	r0, r5
 801a060:	f7fe fe5e 	bl	8018d20 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a064:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a066:	4641      	mov	r1, r8
 801a068:	1a12      	subs	r2, r2, r0
 801a06a:	a803      	add	r0, sp, #12
 801a06c:	f00c f8d4 	bl	8026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a070:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a072:	1af6      	subs	r6, r6, r3
 801a074:	e7de      	b.n	801a034 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801a076:	a803      	add	r0, sp, #12
 801a078:	f00c fa43 	bl	8026502 <_ZN8touchgfx6Canvas6renderEv>
 801a07c:	4604      	mov	r4, r0
 801a07e:	a803      	add	r0, sp, #12
 801a080:	f00c fa7c 	bl	802657c <_ZN8touchgfx6CanvasD1Ev>
 801a084:	4620      	mov	r0, r4
 801a086:	b033      	add	sp, #204	; 0xcc
 801a088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a08c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801a08c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801a090:	4770      	bx	lr

0801a092 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801a092:	b570      	push	{r4, r5, r6, lr}
 801a094:	790b      	ldrb	r3, [r1, #4]
 801a096:	4604      	mov	r4, r0
 801a098:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801a09c:	460e      	mov	r6, r1
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	bf0c      	ite	eq
 801a0a2:	2301      	moveq	r3, #1
 801a0a4:	2300      	movne	r3, #0
 801a0a6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801a0aa:	d110      	bne.n	801a0ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801a0ac:	b185      	cbz	r5, 801a0d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801a0ae:	7933      	ldrb	r3, [r6, #4]
 801a0b0:	2b01      	cmp	r3, #1
 801a0b2:	d113      	bne.n	801a0dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801a0b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a0b6:	b188      	cbz	r0, 801a0dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801a0b8:	6803      	ldr	r3, [r0, #0]
 801a0ba:	68db      	ldr	r3, [r3, #12]
 801a0bc:	4798      	blx	r3
 801a0be:	b168      	cbz	r0, 801a0dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801a0c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a0c2:	4621      	mov	r1, r4
 801a0c4:	6803      	ldr	r3, [r0, #0]
 801a0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0ca:	689b      	ldr	r3, [r3, #8]
 801a0cc:	4718      	bx	r3
 801a0ce:	b12d      	cbz	r5, 801a0dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801a0d0:	6823      	ldr	r3, [r4, #0]
 801a0d2:	4620      	mov	r0, r4
 801a0d4:	695b      	ldr	r3, [r3, #20]
 801a0d6:	4798      	blx	r3
 801a0d8:	2d00      	cmp	r5, #0
 801a0da:	d1e8      	bne.n	801a0ae <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801a0dc:	bd70      	pop	{r4, r5, r6, pc}

0801a0de <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801a0de:	6803      	ldr	r3, [r0, #0]
 801a0e0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801a0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a0e6:	4718      	bx	r3

0801a0e8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801a0e8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a0ec:	2bff      	cmp	r3, #255	; 0xff
 801a0ee:	b510      	push	{r4, lr}
 801a0f0:	d104      	bne.n	801a0fc <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801a0f2:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801a0f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a0f8:	429a      	cmp	r2, r3
 801a0fa:	d105      	bne.n	801a108 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	8003      	strh	r3, [r0, #0]
 801a100:	8043      	strh	r3, [r0, #2]
 801a102:	8083      	strh	r3, [r0, #4]
 801a104:	80c3      	strh	r3, [r0, #6]
 801a106:	bd10      	pop	{r4, pc}
 801a108:	2300      	movs	r3, #0
 801a10a:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a10e:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801a112:	8003      	strh	r3, [r0, #0]
 801a114:	8043      	strh	r3, [r0, #2]
 801a116:	8084      	strh	r4, [r0, #4]
 801a118:	80c2      	strh	r2, [r0, #6]
 801a11a:	e7f4      	b.n	801a106 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801a11c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801a11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a120:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801a124:	b087      	sub	sp, #28
 801a126:	4604      	mov	r4, r0
 801a128:	4689      	mov	r9, r1
 801a12a:	b363      	cbz	r3, 801a186 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801a12c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a12e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a132:	429a      	cmp	r2, r3
 801a134:	d027      	beq.n	801a186 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801a136:	ad06      	add	r5, sp, #24
 801a138:	2700      	movs	r7, #0
 801a13a:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801a13e:	4628      	mov	r0, r5
 801a140:	f003 fc9a 	bl	801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a144:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a148:	a904      	add	r1, sp, #16
 801a14a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a14e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a152:	4620      	mov	r0, r4
 801a154:	6823      	ldr	r3, [r4, #0]
 801a156:	9704      	str	r7, [sp, #16]
 801a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a15a:	4798      	blx	r3
 801a15c:	f7f5 fb3a 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 801a160:	6803      	ldr	r3, [r0, #0]
 801a162:	4606      	mov	r6, r0
 801a164:	4628      	mov	r0, r5
 801a166:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801a16a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801a16c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a170:	f003 fd50 	bl	801dc14 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a174:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a178:	4601      	mov	r1, r0
 801a17a:	9701      	str	r7, [sp, #4]
 801a17c:	aa04      	add	r2, sp, #16
 801a17e:	9300      	str	r3, [sp, #0]
 801a180:	4630      	mov	r0, r6
 801a182:	464b      	mov	r3, r9
 801a184:	47c0      	blx	r8
 801a186:	b007      	add	sp, #28
 801a188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a18c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801a18c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a18e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a192:	460d      	mov	r5, r1
 801a194:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a198:	2100      	movs	r1, #0
 801a19a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a19e:	4604      	mov	r4, r0
 801a1a0:	6803      	ldr	r3, [r0, #0]
 801a1a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a1a6:	6a1b      	ldr	r3, [r3, #32]
 801a1a8:	9100      	str	r1, [sp, #0]
 801a1aa:	4669      	mov	r1, sp
 801a1ac:	4798      	blx	r3
 801a1ae:	4621      	mov	r1, r4
 801a1b0:	a802      	add	r0, sp, #8
 801a1b2:	f002 f97a 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1b6:	f7f5 fb0d 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 801a1ba:	6803      	ldr	r3, [r0, #0]
 801a1bc:	aa02      	add	r2, sp, #8
 801a1be:	4669      	mov	r1, sp
 801a1c0:	695e      	ldr	r6, [r3, #20]
 801a1c2:	462b      	mov	r3, r5
 801a1c4:	47b0      	blx	r6
 801a1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	bf08      	it	eq
 801a1ce:	461d      	moveq	r5, r3
 801a1d0:	84e5      	strh	r5, [r4, #38]	; 0x26
 801a1d2:	b004      	add	sp, #16
 801a1d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a1d8 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801a1d8:	2200      	movs	r2, #0
 801a1da:	8082      	strh	r2, [r0, #4]
 801a1dc:	80c2      	strh	r2, [r0, #6]
 801a1de:	8102      	strh	r2, [r0, #8]
 801a1e0:	8142      	strh	r2, [r0, #10]
 801a1e2:	8182      	strh	r2, [r0, #12]
 801a1e4:	81c2      	strh	r2, [r0, #14]
 801a1e6:	8202      	strh	r2, [r0, #16]
 801a1e8:	8242      	strh	r2, [r0, #18]
 801a1ea:	61c2      	str	r2, [r0, #28]
 801a1ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a1f0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a1f4:	2201      	movs	r2, #1
 801a1f6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801a1fa:	4a04      	ldr	r2, [pc, #16]	; (801a20c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801a1fc:	6002      	str	r2, [r0, #0]
 801a1fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a202:	84c2      	strh	r2, [r0, #38]	; 0x26
 801a204:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a208:	4770      	bx	lr
 801a20a:	bf00      	nop
 801a20c:	0802ba94 	.word	0x0802ba94

0801a210 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801a210:	2200      	movs	r2, #0
 801a212:	8002      	strh	r2, [r0, #0]
 801a214:	8042      	strh	r2, [r0, #2]
 801a216:	8082      	strh	r2, [r0, #4]
 801a218:	80c2      	strh	r2, [r0, #6]
 801a21a:	4770      	bx	lr

0801a21c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801a21c:	b570      	push	{r4, r5, r6, lr}
 801a21e:	6803      	ldr	r3, [r0, #0]
 801a220:	4604      	mov	r4, r0
 801a222:	4615      	mov	r5, r2
 801a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a226:	4798      	blx	r3
 801a228:	6823      	ldr	r3, [r4, #0]
 801a22a:	4629      	mov	r1, r5
 801a22c:	4620      	mov	r0, r4
 801a22e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a234:	4718      	bx	r3
	...

0801a238 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801a238:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a23a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a23e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a240:	4299      	cmp	r1, r3
 801a242:	d029      	beq.n	801a298 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801a244:	4b15      	ldr	r3, [pc, #84]	; (801a29c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	b92b      	cbnz	r3, 801a256 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801a24a:	4b15      	ldr	r3, [pc, #84]	; (801a2a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801a24c:	21b1      	movs	r1, #177	; 0xb1
 801a24e:	4a15      	ldr	r2, [pc, #84]	; (801a2a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801a250:	4815      	ldr	r0, [pc, #84]	; (801a2a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801a252:	f00d fa5f 	bl	8027714 <__assert_func>
 801a256:	4a15      	ldr	r2, [pc, #84]	; (801a2ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801a258:	8812      	ldrh	r2, [r2, #0]
 801a25a:	428a      	cmp	r2, r1
 801a25c:	d803      	bhi.n	801a266 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801a25e:	4b14      	ldr	r3, [pc, #80]	; (801a2b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801a260:	21b2      	movs	r1, #178	; 0xb2
 801a262:	4a10      	ldr	r2, [pc, #64]	; (801a2a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801a264:	e7f4      	b.n	801a250 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801a266:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801a26a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801a26e:	4b11      	ldr	r3, [pc, #68]	; (801a2b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801a270:	7854      	ldrb	r4, [r2, #1]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801a278:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801a27c:	682b      	ldr	r3, [r5, #0]
 801a27e:	69de      	ldr	r6, [r3, #28]
 801a280:	4b0d      	ldr	r3, [pc, #52]	; (801a2b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801a282:	6818      	ldr	r0, [r3, #0]
 801a284:	f7fa fc56 	bl	8014b34 <_ZNK8touchgfx5Texts7getTextEt>
 801a288:	2300      	movs	r3, #0
 801a28a:	4602      	mov	r2, r0
 801a28c:	4621      	mov	r1, r4
 801a28e:	9300      	str	r3, [sp, #0]
 801a290:	4628      	mov	r0, r5
 801a292:	47b0      	blx	r6
 801a294:	b002      	add	sp, #8
 801a296:	bd70      	pop	{r4, r5, r6, pc}
 801a298:	2000      	movs	r0, #0
 801a29a:	e7fb      	b.n	801a294 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801a29c:	2000b4ac 	.word	0x2000b4ac
 801a2a0:	0802bafc 	.word	0x0802bafc
 801a2a4:	0802bc38 	.word	0x0802bc38
 801a2a8:	0802bb3e 	.word	0x0802bb3e
 801a2ac:	2000b4b0 	.word	0x2000b4b0
 801a2b0:	0802bb67 	.word	0x0802bb67
 801a2b4:	2000b4b4 	.word	0x2000b4b4
 801a2b8:	2000b4b8 	.word	0x2000b4b8

0801a2bc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801a2bc:	b570      	push	{r4, r5, r6, lr}
 801a2be:	6803      	ldr	r3, [r0, #0]
 801a2c0:	4604      	mov	r4, r0
 801a2c2:	b28d      	uxth	r5, r1
 801a2c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a2c6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801a2c8:	4b10      	ldr	r3, [pc, #64]	; (801a30c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	b92b      	cbnz	r3, 801a2da <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801a2ce:	4b10      	ldr	r3, [pc, #64]	; (801a310 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801a2d0:	21b1      	movs	r1, #177	; 0xb1
 801a2d2:	4a10      	ldr	r2, [pc, #64]	; (801a314 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801a2d4:	4810      	ldr	r0, [pc, #64]	; (801a318 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801a2d6:	f00d fa1d 	bl	8027714 <__assert_func>
 801a2da:	4910      	ldr	r1, [pc, #64]	; (801a31c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 801a2dc:	8809      	ldrh	r1, [r1, #0]
 801a2de:	4291      	cmp	r1, r2
 801a2e0:	d803      	bhi.n	801a2ea <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801a2e2:	4b0f      	ldr	r3, [pc, #60]	; (801a320 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801a2e4:	21b2      	movs	r1, #178	; 0xb2
 801a2e6:	4a0b      	ldr	r2, [pc, #44]	; (801a314 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801a2e8:	e7f4      	b.n	801a2d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801a2ea:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801a2ee:	4b0d      	ldr	r3, [pc, #52]	; (801a324 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a2f6:	6803      	ldr	r3, [r0, #0]
 801a2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2fa:	4798      	blx	r3
 801a2fc:	1a29      	subs	r1, r5, r0
 801a2fe:	4633      	mov	r3, r6
 801a300:	4620      	mov	r0, r4
 801a302:	b209      	sxth	r1, r1
 801a304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a308:	4718      	bx	r3
 801a30a:	bf00      	nop
 801a30c:	2000b4ac 	.word	0x2000b4ac
 801a310:	0802bafc 	.word	0x0802bafc
 801a314:	0802bc38 	.word	0x0802bc38
 801a318:	0802bb3e 	.word	0x0802bb3e
 801a31c:	2000b4b0 	.word	0x2000b4b0
 801a320:	0802bb67 	.word	0x0802bb67
 801a324:	2000b4b4 	.word	0x2000b4b4

0801a328 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801a328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a32c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a330:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a332:	b08c      	sub	sp, #48	; 0x30
 801a334:	4604      	mov	r4, r0
 801a336:	4293      	cmp	r3, r2
 801a338:	4688      	mov	r8, r1
 801a33a:	d05f      	beq.n	801a3fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801a33c:	4e31      	ldr	r6, [pc, #196]	; (801a404 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801a33e:	6832      	ldr	r2, [r6, #0]
 801a340:	b92a      	cbnz	r2, 801a34e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801a342:	4b31      	ldr	r3, [pc, #196]	; (801a408 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801a344:	21b1      	movs	r1, #177	; 0xb1
 801a346:	4a31      	ldr	r2, [pc, #196]	; (801a40c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801a348:	4831      	ldr	r0, [pc, #196]	; (801a410 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801a34a:	f00d f9e3 	bl	8027714 <__assert_func>
 801a34e:	4d31      	ldr	r5, [pc, #196]	; (801a414 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801a350:	8829      	ldrh	r1, [r5, #0]
 801a352:	4299      	cmp	r1, r3
 801a354:	d803      	bhi.n	801a35e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801a356:	4b30      	ldr	r3, [pc, #192]	; (801a418 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801a358:	21b2      	movs	r1, #178	; 0xb2
 801a35a:	4a2c      	ldr	r2, [pc, #176]	; (801a40c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801a35c:	e7f4      	b.n	801a348 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801a35e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a362:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a366:	4b2d      	ldr	r3, [pc, #180]	; (801a41c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a36e:	2a00      	cmp	r2, #0
 801a370:	d044      	beq.n	801a3fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801a372:	784b      	ldrb	r3, [r1, #1]
 801a374:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801a378:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801a37c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a380:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801a384:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a388:	4b25      	ldr	r3, [pc, #148]	; (801a420 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801a38a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801a394:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801a398:	9207      	str	r2, [sp, #28]
 801a39a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a39c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a3a0:	9009      	str	r0, [sp, #36]	; 0x24
 801a3a2:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801a3a6:	f88d 9020 	strb.w	r9, [sp, #32]
 801a3aa:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801a3ae:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801a3b2:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801a3b6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a3ba:	b10a      	cbz	r2, 801a3c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801a3bc:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801a3be:	b907      	cbnz	r7, 801a3c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801a3c0:	689f      	ldr	r7, [r3, #8]
 801a3c2:	f10d 0914 	add.w	r9, sp, #20
 801a3c6:	4621      	mov	r1, r4
 801a3c8:	4648      	mov	r0, r9
 801a3ca:	f002 f86e 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a3ce:	6833      	ldr	r3, [r6, #0]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d0b6      	beq.n	801a342 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801a3d4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a3d6:	882b      	ldrh	r3, [r5, #0]
 801a3d8:	428b      	cmp	r3, r1
 801a3da:	d9bc      	bls.n	801a356 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801a3dc:	4b11      	ldr	r3, [pc, #68]	; (801a424 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801a3de:	6818      	ldr	r0, [r3, #0]
 801a3e0:	f7fa fba8 	bl	8014b34 <_ZNK8touchgfx5Texts7getTextEt>
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	9001      	str	r0, [sp, #4]
 801a3e8:	4638      	mov	r0, r7
 801a3ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a3ee:	ab07      	add	r3, sp, #28
 801a3f0:	9300      	str	r3, [sp, #0]
 801a3f2:	4643      	mov	r3, r8
 801a3f4:	e899 0006 	ldmia.w	r9, {r1, r2}
 801a3f8:	f7fa fb2d 	bl	8014a56 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a3fc:	b00c      	add	sp, #48	; 0x30
 801a3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a402:	bf00      	nop
 801a404:	2000b4ac 	.word	0x2000b4ac
 801a408:	0802bafc 	.word	0x0802bafc
 801a40c:	0802bc38 	.word	0x0802bc38
 801a410:	0802bb3e 	.word	0x0802bb3e
 801a414:	2000b4b0 	.word	0x2000b4b0
 801a418:	0802bb67 	.word	0x0802bb67
 801a41c:	2000b4b4 	.word	0x2000b4b4
 801a420:	2000b41c 	.word	0x2000b41c
 801a424:	2000b4b8 	.word	0x2000b4b8

0801a428 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801a428:	b40e      	push	{r1, r2, r3}
 801a42a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a42e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a432:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a434:	b09b      	sub	sp, #108	; 0x6c
 801a436:	4604      	mov	r4, r0
 801a438:	4293      	cmp	r3, r2
 801a43a:	d061      	beq.n	801a500 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 801a43c:	aa24      	add	r2, sp, #144	; 0x90
 801a43e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a514 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801a442:	9203      	str	r2, [sp, #12]
 801a444:	f8da 2000 	ldr.w	r2, [sl]
 801a448:	b92a      	cbnz	r2, 801a456 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801a44a:	4b2e      	ldr	r3, [pc, #184]	; (801a504 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 801a44c:	21b1      	movs	r1, #177	; 0xb1
 801a44e:	4a2e      	ldr	r2, [pc, #184]	; (801a508 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801a450:	482e      	ldr	r0, [pc, #184]	; (801a50c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 801a452:	f00d f95f 	bl	8027714 <__assert_func>
 801a456:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801a518 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 801a45a:	f8b8 1000 	ldrh.w	r1, [r8]
 801a45e:	4299      	cmp	r1, r3
 801a460:	d803      	bhi.n	801a46a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801a462:	4b2b      	ldr	r3, [pc, #172]	; (801a510 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 801a464:	21b2      	movs	r1, #178	; 0xb2
 801a466:	4a28      	ldr	r2, [pc, #160]	; (801a508 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801a468:	e7f2      	b.n	801a450 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801a46a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801a51c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 801a46e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a472:	f8d9 3000 	ldr.w	r3, [r9]
 801a476:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a47a:	683b      	ldr	r3, [r7, #0]
 801a47c:	4638      	mov	r0, r7
 801a47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a480:	4798      	blx	r3
 801a482:	4606      	mov	r6, r0
 801a484:	b205      	sxth	r5, r0
 801a486:	a804      	add	r0, sp, #16
 801a488:	f002 fcb1 	bl	801cdee <_ZN8touchgfx12TextProviderC1Ev>
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	4638      	mov	r0, r7
 801a490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a492:	4798      	blx	r3
 801a494:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801a496:	4603      	mov	r3, r0
 801a498:	9a03      	ldr	r2, [sp, #12]
 801a49a:	a804      	add	r0, sp, #16
 801a49c:	f002 fcec 	bl	801ce78 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a4a0:	f8da 3000 	ldr.w	r3, [sl]
 801a4a4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d0ce      	beq.n	801a44a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801a4ac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801a4ae:	f8b8 0000 	ldrh.w	r0, [r8]
 801a4b2:	4290      	cmp	r0, r2
 801a4b4:	d9d5      	bls.n	801a462 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801a4b6:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 801a4ba:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801a4be:	f8d9 3000 	ldr.w	r3, [r9]
 801a4c2:	787a      	ldrb	r2, [r7, #1]
 801a4c4:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 801a4c8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801a4cc:	9700      	str	r7, [sp, #0]
 801a4ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a4d2:	a804      	add	r0, sp, #16
 801a4d4:	f000 ff5a 	bl	801b38c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801a4d8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801a4dc:	b203      	sxth	r3, r0
 801a4de:	18a9      	adds	r1, r5, r2
 801a4e0:	2900      	cmp	r1, #0
 801a4e2:	dd0b      	ble.n	801a4fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 801a4e4:	3b01      	subs	r3, #1
 801a4e6:	fb13 f302 	smulbb	r3, r3, r2
 801a4ea:	fb16 3300 	smlabb	r3, r6, r0, r3
 801a4ee:	b21d      	sxth	r5, r3
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	b01b      	add	sp, #108	; 0x6c
 801a4f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4f8:	b003      	add	sp, #12
 801a4fa:	4770      	bx	lr
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	dcf7      	bgt.n	801a4f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801a500:	2500      	movs	r5, #0
 801a502:	e7f5      	b.n	801a4f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801a504:	0802bafc 	.word	0x0802bafc
 801a508:	0802bc38 	.word	0x0802bc38
 801a50c:	0802bb3e 	.word	0x0802bb3e
 801a510:	0802bb67 	.word	0x0802bb67
 801a514:	2000b4ac 	.word	0x2000b4ac
 801a518:	2000b4b0 	.word	0x2000b4b0
 801a51c:	2000b4b4 	.word	0x2000b4b4

0801a520 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801a520:	b570      	push	{r4, r5, r6, lr}
 801a522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a526:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a528:	4604      	mov	r4, r0
 801a52a:	4299      	cmp	r1, r3
 801a52c:	d01e      	beq.n	801a56c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801a52e:	6803      	ldr	r3, [r0, #0]
 801a530:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801a532:	4b0f      	ldr	r3, [pc, #60]	; (801a570 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	b92b      	cbnz	r3, 801a544 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801a538:	4b0e      	ldr	r3, [pc, #56]	; (801a574 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801a53a:	21b1      	movs	r1, #177	; 0xb1
 801a53c:	4a0e      	ldr	r2, [pc, #56]	; (801a578 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801a53e:	480f      	ldr	r0, [pc, #60]	; (801a57c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801a540:	f00d f8e8 	bl	8027714 <__assert_func>
 801a544:	4b0e      	ldr	r3, [pc, #56]	; (801a580 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801a546:	881b      	ldrh	r3, [r3, #0]
 801a548:	428b      	cmp	r3, r1
 801a54a:	d803      	bhi.n	801a554 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801a54c:	4b0d      	ldr	r3, [pc, #52]	; (801a584 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801a54e:	21b2      	movs	r1, #178	; 0xb2
 801a550:	4a09      	ldr	r2, [pc, #36]	; (801a578 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801a552:	e7f4      	b.n	801a53e <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801a554:	4b0c      	ldr	r3, [pc, #48]	; (801a588 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801a556:	6818      	ldr	r0, [r3, #0]
 801a558:	f7fa faec 	bl	8014b34 <_ZNK8touchgfx5Texts7getTextEt>
 801a55c:	2300      	movs	r3, #0
 801a55e:	4601      	mov	r1, r0
 801a560:	46ac      	mov	ip, r5
 801a562:	4620      	mov	r0, r4
 801a564:	461a      	mov	r2, r3
 801a566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a56a:	4760      	bx	ip
 801a56c:	2000      	movs	r0, #0
 801a56e:	bd70      	pop	{r4, r5, r6, pc}
 801a570:	2000b4ac 	.word	0x2000b4ac
 801a574:	0802bafc 	.word	0x0802bafc
 801a578:	0802bc38 	.word	0x0802bc38
 801a57c:	0802bb3e 	.word	0x0802bb3e
 801a580:	2000b4b0 	.word	0x2000b4b0
 801a584:	0802bb67 	.word	0x0802bb67
 801a588:	2000b4b8 	.word	0x2000b4b8

0801a58c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801a58c:	b570      	push	{r4, r5, r6, lr}
 801a58e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a592:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a594:	4604      	mov	r4, r0
 801a596:	429a      	cmp	r2, r3
 801a598:	d021      	beq.n	801a5de <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801a59a:	6803      	ldr	r3, [r0, #0]
 801a59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a59e:	4798      	blx	r3
 801a5a0:	6823      	ldr	r3, [r4, #0]
 801a5a2:	4605      	mov	r5, r0
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a5a8:	4798      	blx	r3
 801a5aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a5ae:	4606      	mov	r6, r0
 801a5b0:	b22d      	sxth	r5, r5
 801a5b2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801a5b6:	6823      	ldr	r3, [r4, #0]
 801a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5ba:	d109      	bne.n	801a5d0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801a5bc:	4629      	mov	r1, r5
 801a5be:	4620      	mov	r0, r4
 801a5c0:	4798      	blx	r3
 801a5c2:	6823      	ldr	r3, [r4, #0]
 801a5c4:	4631      	mov	r1, r6
 801a5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5c8:	4620      	mov	r0, r4
 801a5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5ce:	4718      	bx	r3
 801a5d0:	4601      	mov	r1, r0
 801a5d2:	4620      	mov	r0, r4
 801a5d4:	4798      	blx	r3
 801a5d6:	6823      	ldr	r3, [r4, #0]
 801a5d8:	4629      	mov	r1, r5
 801a5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5dc:	e7f4      	b.n	801a5c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801a5de:	bd70      	pop	{r4, r5, r6, pc}

0801a5e0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801a5e0:	888a      	ldrh	r2, [r1, #4]
 801a5e2:	8582      	strh	r2, [r0, #44]	; 0x2c
 801a5e4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a5e8:	b922      	cbnz	r2, 801a5f4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801a5ea:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a5ee:	b90b      	cbnz	r3, 801a5f4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801a5f0:	f7ff bfcc 	b.w	801a58c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801a5f4:	4770      	bx	lr

0801a5f6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	8003      	strh	r3, [r0, #0]
 801a5fa:	8043      	strh	r3, [r0, #2]
 801a5fc:	8083      	strh	r3, [r0, #4]
 801a5fe:	80c3      	strh	r3, [r0, #6]
 801a600:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801a604:	b91b      	cbnz	r3, 801a60e <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801a606:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801a60a:	2bff      	cmp	r3, #255	; 0xff
 801a60c:	d103      	bne.n	801a616 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801a60e:	890b      	ldrh	r3, [r1, #8]
 801a610:	8083      	strh	r3, [r0, #4]
 801a612:	894b      	ldrh	r3, [r1, #10]
 801a614:	80c3      	strh	r3, [r0, #6]
 801a616:	4770      	bx	lr

0801a618 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a61a:	4604      	mov	r4, r0
 801a61c:	466b      	mov	r3, sp
 801a61e:	6808      	ldr	r0, [r1, #0]
 801a620:	6849      	ldr	r1, [r1, #4]
 801a622:	c303      	stmia	r3!, {r0, r1}
 801a624:	6823      	ldr	r3, [r4, #0]
 801a626:	4669      	mov	r1, sp
 801a628:	4620      	mov	r0, r4
 801a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a62c:	4798      	blx	r3
 801a62e:	4b08      	ldr	r3, [pc, #32]	; (801a650 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a636:	b10a      	cbz	r2, 801a63c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a638:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a63a:	b900      	cbnz	r0, 801a63e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a63c:	6898      	ldr	r0, [r3, #8]
 801a63e:	6803      	ldr	r3, [r0, #0]
 801a640:	4669      	mov	r1, sp
 801a642:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a644:	699d      	ldr	r5, [r3, #24]
 801a646:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a64a:	47a8      	blx	r5
 801a64c:	b003      	add	sp, #12
 801a64e:	bd30      	pop	{r4, r5, pc}
 801a650:	2000b41c 	.word	0x2000b41c

0801a654 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801a654:	b538      	push	{r3, r4, r5, lr}
 801a656:	880b      	ldrh	r3, [r1, #0]
 801a658:	4605      	mov	r5, r0
 801a65a:	4604      	mov	r4, r0
 801a65c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a65e:	8813      	ldrh	r3, [r2, #0]
 801a660:	f825 3f30 	strh.w	r3, [r5, #48]!
 801a664:	4628      	mov	r0, r5
 801a666:	f003 fa07 	bl	801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a66a:	8120      	strh	r0, [r4, #8]
 801a66c:	4628      	mov	r0, r5
 801a66e:	f003 fa3d 	bl	801daec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a672:	8160      	strh	r0, [r4, #10]
 801a674:	bd38      	pop	{r3, r4, r5, pc}

0801a676 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801a676:	b510      	push	{r4, lr}
 801a678:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801a67c:	4604      	mov	r4, r0
 801a67e:	2bff      	cmp	r3, #255	; 0xff
 801a680:	d006      	beq.n	801a690 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801a682:	2300      	movs	r3, #0
 801a684:	8003      	strh	r3, [r0, #0]
 801a686:	8043      	strh	r3, [r0, #2]
 801a688:	8083      	strh	r3, [r0, #4]
 801a68a:	80c3      	strh	r3, [r0, #6]
 801a68c:	4620      	mov	r0, r4
 801a68e:	bd10      	pop	{r4, pc}
 801a690:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801a694:	b11b      	cbz	r3, 801a69e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801a696:	3130      	adds	r1, #48	; 0x30
 801a698:	f003 fa62 	bl	801db60 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a69c:	e7f6      	b.n	801a68c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801a69e:	312e      	adds	r1, #46	; 0x2e
 801a6a0:	e7fa      	b.n	801a698 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801a6a4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6a8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801a6ac:	b08a      	sub	sp, #40	; 0x28
 801a6ae:	4604      	mov	r4, r0
 801a6b0:	4688      	mov	r8, r1
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d044      	beq.n	801a740 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801a6b6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801a6b8:	a805      	add	r0, sp, #20
 801a6ba:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a6be:	f003 f9db 	bl	801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a6c2:	4605      	mov	r5, r0
 801a6c4:	b206      	sxth	r6, r0
 801a6c6:	a805      	add	r0, sp, #20
 801a6c8:	f003 fa10 	bl	801daec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a6cc:	f9b8 2000 	ldrsh.w	r2, [r8]
 801a6d0:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	fa0f fc80 	sxth.w	ip, r0
 801a6da:	4417      	add	r7, r2
 801a6dc:	9306      	str	r3, [sp, #24]
 801a6de:	b2bf      	uxth	r7, r7
 801a6e0:	fa0f fe87 	sxth.w	lr, r7
 801a6e4:	459e      	cmp	lr, r3
 801a6e6:	dd2d      	ble.n	801a744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801a6e8:	4296      	cmp	r6, r2
 801a6ea:	dd2b      	ble.n	801a744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801a6ec:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801a6f0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801a6f4:	4419      	add	r1, r3
 801a6f6:	b289      	uxth	r1, r1
 801a6f8:	fa0f f881 	sxth.w	r8, r1
 801a6fc:	f1b8 0f00 	cmp.w	r8, #0
 801a700:	dd20      	ble.n	801a744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801a702:	459c      	cmp	ip, r3
 801a704:	dd1e      	ble.n	801a744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801a706:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801a70a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a70e:	4576      	cmp	r6, lr
 801a710:	bfa8      	it	ge
 801a712:	463d      	movge	r5, r7
 801a714:	45c4      	cmp	ip, r8
 801a716:	bfa8      	it	ge
 801a718:	4608      	movge	r0, r1
 801a71a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a71e:	1aad      	subs	r5, r5, r2
 801a720:	1ac0      	subs	r0, r0, r3
 801a722:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a726:	f8ad 501c 	strh.w	r5, [sp, #28]
 801a72a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a72e:	4b1f      	ldr	r3, [pc, #124]	; (801a7ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	b953      	cbnz	r3, 801a74a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801a734:	4b1e      	ldr	r3, [pc, #120]	; (801a7b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801a736:	2189      	movs	r1, #137	; 0x89
 801a738:	4a1e      	ldr	r2, [pc, #120]	; (801a7b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801a73a:	481f      	ldr	r0, [pc, #124]	; (801a7b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801a73c:	f00c ffea 	bl	8027714 <__assert_func>
 801a740:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a742:	e7b9      	b.n	801a6b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801a744:	2300      	movs	r3, #0
 801a746:	9307      	str	r3, [sp, #28]
 801a748:	e7f1      	b.n	801a72e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801a74a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a74e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a752:	429a      	cmp	r2, r3
 801a754:	d026      	beq.n	801a7a4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801a756:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	dd22      	ble.n	801a7a4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801a75e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a762:	2b00      	cmp	r3, #0
 801a764:	dd1e      	ble.n	801a7a4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801a766:	2300      	movs	r3, #0
 801a768:	a908      	add	r1, sp, #32
 801a76a:	4620      	mov	r0, r4
 801a76c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801a770:	6823      	ldr	r3, [r4, #0]
 801a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a774:	4798      	blx	r3
 801a776:	4b11      	ldr	r3, [pc, #68]	; (801a7bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a77e:	b10a      	cbz	r2, 801a784 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801a780:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a782:	b900      	cbnz	r0, 801a786 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 801a784:	6898      	ldr	r0, [r3, #8]
 801a786:	2501      	movs	r5, #1
 801a788:	6801      	ldr	r1, [r0, #0]
 801a78a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a78e:	9502      	str	r5, [sp, #8]
 801a790:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801a794:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a798:	9401      	str	r4, [sp, #4]
 801a79a:	ac06      	add	r4, sp, #24
 801a79c:	9400      	str	r4, [sp, #0]
 801a79e:	688c      	ldr	r4, [r1, #8]
 801a7a0:	a905      	add	r1, sp, #20
 801a7a2:	47a0      	blx	r4
 801a7a4:	b00a      	add	sp, #40	; 0x28
 801a7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7aa:	bf00      	nop
 801a7ac:	2000b4e4 	.word	0x2000b4e4
 801a7b0:	0802bcd0 	.word	0x0802bcd0
 801a7b4:	0802bda4 	.word	0x0802bda4
 801a7b8:	0802bd0c 	.word	0x0802bd0c
 801a7bc:	2000b41c 	.word	0x2000b41c

0801a7c0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a7c0:	b570      	push	{r4, r5, r6, lr}
 801a7c2:	4605      	mov	r5, r0
 801a7c4:	880b      	ldrh	r3, [r1, #0]
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a7ca:	f855 3b26 	ldr.w	r3, [r5], #38
 801a7ce:	4628      	mov	r0, r5
 801a7d0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801a7d2:	f003 f951 	bl	801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a7d6:	b201      	sxth	r1, r0
 801a7d8:	4620      	mov	r0, r4
 801a7da:	47b0      	blx	r6
 801a7dc:	6823      	ldr	r3, [r4, #0]
 801a7de:	4628      	mov	r0, r5
 801a7e0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801a7e2:	f003 f983 	bl	801daec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a7e6:	b201      	sxth	r1, r0
 801a7e8:	4620      	mov	r0, r4
 801a7ea:	4633      	mov	r3, r6
 801a7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7f0:	4718      	bx	r3

0801a7f2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a7f2:	b510      	push	{r4, lr}
 801a7f4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a7f8:	4604      	mov	r4, r0
 801a7fa:	2bff      	cmp	r3, #255	; 0xff
 801a7fc:	d006      	beq.n	801a80c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a7fe:	2300      	movs	r3, #0
 801a800:	8003      	strh	r3, [r0, #0]
 801a802:	8043      	strh	r3, [r0, #2]
 801a804:	8083      	strh	r3, [r0, #4]
 801a806:	80c3      	strh	r3, [r0, #6]
 801a808:	4620      	mov	r0, r4
 801a80a:	bd10      	pop	{r4, pc}
 801a80c:	3126      	adds	r1, #38	; 0x26
 801a80e:	f003 f9a7 	bl	801db60 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a812:	e7f9      	b.n	801a808 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801a814 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a818:	4604      	mov	r4, r0
 801a81a:	b088      	sub	sp, #32
 801a81c:	2500      	movs	r5, #0
 801a81e:	460f      	mov	r7, r1
 801a820:	f854 3b26 	ldr.w	r3, [r4], #38
 801a824:	a904      	add	r1, sp, #16
 801a826:	4606      	mov	r6, r0
 801a828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a82a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a82e:	4798      	blx	r3
 801a830:	4620      	mov	r0, r4
 801a832:	f003 f921 	bl	801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a836:	4680      	mov	r8, r0
 801a838:	4620      	mov	r0, r4
 801a83a:	f003 f957 	bl	801daec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a83e:	9506      	str	r5, [sp, #24]
 801a840:	ad06      	add	r5, sp, #24
 801a842:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a846:	4639      	mov	r1, r7
 801a848:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a84c:	4628      	mov	r0, r5
 801a84e:	f7fd fa99 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801a852:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a856:	2b00      	cmp	r3, #0
 801a858:	dd19      	ble.n	801a88e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a85a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	dd15      	ble.n	801a88e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a862:	4b0c      	ldr	r3, [pc, #48]	; (801a894 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a86a:	b10a      	cbz	r2, 801a870 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a86c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a86e:	b900      	cbnz	r0, 801a872 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a870:	6898      	ldr	r0, [r3, #8]
 801a872:	2701      	movs	r7, #1
 801a874:	6801      	ldr	r1, [r0, #0]
 801a876:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a87a:	9702      	str	r7, [sp, #8]
 801a87c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801a880:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a884:	e9cd 5600 	strd	r5, r6, [sp]
 801a888:	688d      	ldr	r5, [r1, #8]
 801a88a:	4621      	mov	r1, r4
 801a88c:	47a8      	blx	r5
 801a88e:	b008      	add	sp, #32
 801a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a894:	2000b41c 	.word	0x2000b41c

0801a898 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 801a898:	b510      	push	{r4, lr}
 801a89a:	4604      	mov	r4, r0
 801a89c:	f7ff feeb 	bl	801a676 <_ZNK8touchgfx6Button12getSolidRectEv>
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	bd10      	pop	{r4, pc}

0801a8a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8a8:	4604      	mov	r4, r0
 801a8aa:	b08c      	sub	sp, #48	; 0x30
 801a8ac:	4688      	mov	r8, r1
 801a8ae:	f7ff fef9 	bl	801a6a4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801a8b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a8b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8b8:	4293      	cmp	r3, r2
 801a8ba:	f000 809a 	beq.w	801a9f2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801a8be:	4e55      	ldr	r6, [pc, #340]	; (801aa14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801a8c0:	6832      	ldr	r2, [r6, #0]
 801a8c2:	b92a      	cbnz	r2, 801a8d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 801a8c4:	4b54      	ldr	r3, [pc, #336]	; (801aa18 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801a8c6:	21b1      	movs	r1, #177	; 0xb1
 801a8c8:	4a54      	ldr	r2, [pc, #336]	; (801aa1c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801a8ca:	4855      	ldr	r0, [pc, #340]	; (801aa20 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801a8cc:	f00c ff22 	bl	8027714 <__assert_func>
 801a8d0:	4d54      	ldr	r5, [pc, #336]	; (801aa24 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801a8d2:	8829      	ldrh	r1, [r5, #0]
 801a8d4:	4299      	cmp	r1, r3
 801a8d6:	d803      	bhi.n	801a8e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 801a8d8:	4b53      	ldr	r3, [pc, #332]	; (801aa28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801a8da:	21b2      	movs	r1, #178	; 0xb2
 801a8dc:	4a4f      	ldr	r2, [pc, #316]	; (801aa1c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801a8de:	e7f4      	b.n	801a8ca <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 801a8e0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a8e4:	f04f 0c02 	mov.w	ip, #2
 801a8e8:	4b50      	ldr	r3, [pc, #320]	; (801aa2c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801a8ea:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a8f4:	f1be 0f01 	cmp.w	lr, #1
 801a8f8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a8fc:	f04f 0300 	mov.w	r3, #0
 801a900:	b208      	sxth	r0, r1
 801a902:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801a906:	9303      	str	r3, [sp, #12]
 801a908:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a90c:	d074      	beq.n	801a9f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801a90e:	f1be 0f03 	cmp.w	lr, #3
 801a912:	d071      	beq.n	801a9f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801a914:	1a52      	subs	r2, r2, r1
 801a916:	f8ad 3010 	strh.w	r3, [sp, #16]
 801a91a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a91e:	fb92 f2fc 	sdiv	r2, r2, ip
 801a922:	f8ad 200e 	strh.w	r2, [sp, #14]
 801a926:	f10d 090c 	add.w	r9, sp, #12
 801a92a:	f10d 0a14 	add.w	sl, sp, #20
 801a92e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801a932:	e88a 0003 	stmia.w	sl, {r0, r1}
 801a936:	4641      	mov	r1, r8
 801a938:	4650      	mov	r0, sl
 801a93a:	f7fd fa23 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801a93e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a942:	2b00      	cmp	r3, #0
 801a944:	dd55      	ble.n	801a9f2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801a946:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	dd51      	ble.n	801a9f2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801a94e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a952:	4649      	mov	r1, r9
 801a954:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a958:	4620      	mov	r0, r4
 801a95a:	1a9b      	subs	r3, r3, r2
 801a95c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a960:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a964:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a968:	1a9b      	subs	r3, r3, r2
 801a96a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a96e:	6823      	ldr	r3, [r4, #0]
 801a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a972:	4798      	blx	r3
 801a974:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d047      	beq.n	801aa0c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 801a97c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801a980:	6833      	ldr	r3, [r6, #0]
 801a982:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 801a986:	2b00      	cmp	r3, #0
 801a988:	d09c      	beq.n	801a8c4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801a98a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801a98c:	8828      	ldrh	r0, [r5, #0]
 801a98e:	4288      	cmp	r0, r1
 801a990:	d9a2      	bls.n	801a8d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801a992:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801a996:	6812      	ldr	r2, [r2, #0]
 801a998:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801a99c:	785b      	ldrb	r3, [r3, #1]
 801a99e:	9209      	str	r2, [sp, #36]	; 0x24
 801a9a0:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801a9a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a9a8:	9707      	str	r7, [sp, #28]
 801a9aa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a9b4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801a9b8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a9bc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801a9c0:	4b1b      	ldr	r3, [pc, #108]	; (801aa30 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801a9c2:	f88d 5020 	strb.w	r5, [sp, #32]
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801a9cc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a9d0:	b10a      	cbz	r2, 801a9d6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801a9d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a9d4:	b904      	cbnz	r4, 801a9d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 801a9d6:	689c      	ldr	r4, [r3, #8]
 801a9d8:	4b16      	ldr	r3, [pc, #88]	; (801aa34 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801a9da:	6818      	ldr	r0, [r3, #0]
 801a9dc:	f7fa f8aa 	bl	8014b34 <_ZNK8touchgfx5Texts7getTextEt>
 801a9e0:	ab07      	add	r3, sp, #28
 801a9e2:	9001      	str	r0, [sp, #4]
 801a9e4:	4620      	mov	r0, r4
 801a9e6:	9300      	str	r3, [sp, #0]
 801a9e8:	4653      	mov	r3, sl
 801a9ea:	e899 0006 	ldmia.w	r9, {r1, r2}
 801a9ee:	f7fa f832 	bl	8014a56 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a9f2:	b00c      	add	sp, #48	; 0x30
 801a9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9f8:	1a5b      	subs	r3, r3, r1
 801a9fa:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a9fe:	f8ad 2012 	strh.w	r2, [sp, #18]
 801aa02:	fb93 f3fc 	sdiv	r3, r3, ip
 801aa06:	f8ad 300c 	strh.w	r3, [sp, #12]
 801aa0a:	e78c      	b.n	801a926 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 801aa0c:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801aa10:	e7b6      	b.n	801a980 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801aa12:	bf00      	nop
 801aa14:	2000b4ac 	.word	0x2000b4ac
 801aa18:	0802bafc 	.word	0x0802bafc
 801aa1c:	0802beb4 	.word	0x0802beb4
 801aa20:	0802bb3e 	.word	0x0802bb3e
 801aa24:	2000b4b0 	.word	0x2000b4b0
 801aa28:	0802bb67 	.word	0x0802bb67
 801aa2c:	2000b4b4 	.word	0x2000b4b4
 801aa30:	2000b41c 	.word	0x2000b41c
 801aa34:	2000b4b8 	.word	0x2000b4b8

0801aa38 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801aa38:	2101      	movs	r1, #1
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	b510      	push	{r4, lr}
 801aa3e:	4c12      	ldr	r4, [pc, #72]	; (801aa88 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 801aa40:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801aa44:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801aa48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801aa4c:	6004      	str	r4, [r0, #0]
 801aa4e:	4c0f      	ldr	r4, [pc, #60]	; (801aa8c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801aa50:	8082      	strh	r2, [r0, #4]
 801aa52:	80c2      	strh	r2, [r0, #6]
 801aa54:	8102      	strh	r2, [r0, #8]
 801aa56:	8142      	strh	r2, [r0, #10]
 801aa58:	8182      	strh	r2, [r0, #12]
 801aa5a:	81c2      	strh	r2, [r0, #14]
 801aa5c:	8202      	strh	r2, [r0, #16]
 801aa5e:	8242      	strh	r2, [r0, #18]
 801aa60:	61c2      	str	r2, [r0, #28]
 801aa62:	6282      	str	r2, [r0, #40]	; 0x28
 801aa64:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801aa68:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801aa6a:	8601      	strh	r1, [r0, #48]	; 0x30
 801aa6c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801aa70:	6344      	str	r4, [r0, #52]	; 0x34
 801aa72:	8701      	strh	r1, [r0, #56]	; 0x38
 801aa74:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801aa78:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801aa7c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801aa80:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 801aa84:	bd10      	pop	{r4, pc}
 801aa86:	bf00      	nop
 801aa88:	0802be4c 	.word	0x0802be4c
 801aa8c:	080290a0 	.word	0x080290a0

0801aa90 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801aa90:	4b02      	ldr	r3, [pc, #8]	; (801aa9c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801aa92:	6018      	str	r0, [r3, #0]
 801aa94:	4b02      	ldr	r3, [pc, #8]	; (801aaa0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801aa96:	6019      	str	r1, [r3, #0]
 801aa98:	4770      	bx	lr
 801aa9a:	bf00      	nop
 801aa9c:	2000b424 	.word	0x2000b424
 801aaa0:	2000b438 	.word	0x2000b438

0801aaa4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801aaa4:	b538      	push	{r3, r4, r5, lr}
 801aaa6:	4c2b      	ldr	r4, [pc, #172]	; (801ab54 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801aaa8:	4b2b      	ldr	r3, [pc, #172]	; (801ab58 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801aaaa:	6821      	ldr	r1, [r4, #0]
 801aaac:	681a      	ldr	r2, [r3, #0]
 801aaae:	4281      	cmp	r1, r0
 801aab0:	4d2a      	ldr	r5, [pc, #168]	; (801ab5c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801aab2:	492b      	ldr	r1, [pc, #172]	; (801ab60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801aab4:	d108      	bne.n	801aac8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801aab6:	682b      	ldr	r3, [r5, #0]
 801aab8:	4293      	cmp	r3, r2
 801aaba:	d105      	bne.n	801aac8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801aabc:	6808      	ldr	r0, [r1, #0]
 801aabe:	280f      	cmp	r0, #15
 801aac0:	bf94      	ite	ls
 801aac2:	2000      	movls	r0, #0
 801aac4:	2001      	movhi	r0, #1
 801aac6:	bd38      	pop	{r3, r4, r5, pc}
 801aac8:	4b26      	ldr	r3, [pc, #152]	; (801ab64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801aaca:	6020      	str	r0, [r4, #0]
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	602a      	str	r2, [r5, #0]
 801aad0:	4298      	cmp	r0, r3
 801aad2:	d905      	bls.n	801aae0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801aad4:	4b24      	ldr	r3, [pc, #144]	; (801ab68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801aad6:	2137      	movs	r1, #55	; 0x37
 801aad8:	4a24      	ldr	r2, [pc, #144]	; (801ab6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801aada:	4825      	ldr	r0, [pc, #148]	; (801ab70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801aadc:	f00c fe1a 	bl	8027714 <__assert_func>
 801aae0:	f010 0403 	ands.w	r4, r0, #3
 801aae4:	bf1f      	itttt	ne
 801aae6:	f1c4 0504 	rsbne	r5, r4, #4
 801aaea:	3b04      	subne	r3, #4
 801aaec:	1952      	addne	r2, r2, r5
 801aaee:	191b      	addne	r3, r3, r4
 801aaf0:	4d20      	ldr	r5, [pc, #128]	; (801ab74 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801aaf2:	4402      	add	r2, r0
 801aaf4:	1a1b      	subs	r3, r3, r0
 801aaf6:	3001      	adds	r0, #1
 801aaf8:	602a      	str	r2, [r5, #0]
 801aafa:	f020 0401 	bic.w	r4, r0, #1
 801aafe:	42a3      	cmp	r3, r4
 801ab00:	d203      	bcs.n	801ab0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801ab02:	4b19      	ldr	r3, [pc, #100]	; (801ab68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801ab04:	214a      	movs	r1, #74	; 0x4a
 801ab06:	4a19      	ldr	r2, [pc, #100]	; (801ab6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801ab08:	e7e7      	b.n	801aada <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801ab0a:	f010 0002 	ands.w	r0, r0, #2
 801ab0e:	bf1f      	itttt	ne
 801ab10:	f1c0 0504 	rsbne	r5, r0, #4
 801ab14:	1952      	addne	r2, r2, r5
 801ab16:	1f05      	subne	r5, r0, #4
 801ab18:	195b      	addne	r3, r3, r5
 801ab1a:	4422      	add	r2, r4
 801ab1c:	4d16      	ldr	r5, [pc, #88]	; (801ab78 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801ab1e:	1b1b      	subs	r3, r3, r4
 801ab20:	602a      	str	r2, [r5, #0]
 801ab22:	429c      	cmp	r4, r3
 801ab24:	d903      	bls.n	801ab2e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801ab26:	4b10      	ldr	r3, [pc, #64]	; (801ab68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801ab28:	215d      	movs	r1, #93	; 0x5d
 801ab2a:	4a10      	ldr	r2, [pc, #64]	; (801ab6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801ab2c:	e7d5      	b.n	801aada <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801ab2e:	b120      	cbz	r0, 801ab3a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801ab30:	f1c0 0504 	rsb	r5, r0, #4
 801ab34:	3804      	subs	r0, #4
 801ab36:	442a      	add	r2, r5
 801ab38:	4403      	add	r3, r0
 801ab3a:	1b1b      	subs	r3, r3, r4
 801ab3c:	4422      	add	r2, r4
 801ab3e:	480f      	ldr	r0, [pc, #60]	; (801ab7c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801ab40:	2b0f      	cmp	r3, #15
 801ab42:	600b      	str	r3, [r1, #0]
 801ab44:	6002      	str	r2, [r0, #0]
 801ab46:	d803      	bhi.n	801ab50 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801ab48:	4b0d      	ldr	r3, [pc, #52]	; (801ab80 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801ab4a:	2170      	movs	r1, #112	; 0x70
 801ab4c:	4a07      	ldr	r2, [pc, #28]	; (801ab6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801ab4e:	e7c4      	b.n	801aada <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801ab50:	2001      	movs	r0, #1
 801ab52:	e7b8      	b.n	801aac6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801ab54:	2000b42c 	.word	0x2000b42c
 801ab58:	2000b424 	.word	0x2000b424
 801ab5c:	2000b434 	.word	0x2000b434
 801ab60:	2000b43c 	.word	0x2000b43c
 801ab64:	2000b438 	.word	0x2000b438
 801ab68:	0802bee2 	.word	0x0802bee2
 801ab6c:	0802bfaa 	.word	0x0802bfaa
 801ab70:	0802bf1b 	.word	0x0802bf1b
 801ab74:	2000b440 	.word	0x2000b440
 801ab78:	2000b430 	.word	0x2000b430
 801ab7c:	2000b428 	.word	0x2000b428
 801ab80:	0802bf65 	.word	0x0802bf65

0801ab84 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801ab84:	4b04      	ldr	r3, [pc, #16]	; (801ab98 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801ab86:	6818      	ldr	r0, [r3, #0]
 801ab88:	b120      	cbz	r0, 801ab94 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801ab8a:	4b04      	ldr	r3, [pc, #16]	; (801ab9c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801ab8c:	6818      	ldr	r0, [r3, #0]
 801ab8e:	3000      	adds	r0, #0
 801ab90:	bf18      	it	ne
 801ab92:	2001      	movne	r0, #1
 801ab94:	4770      	bx	lr
 801ab96:	bf00      	nop
 801ab98:	2000b424 	.word	0x2000b424
 801ab9c:	2000b438 	.word	0x2000b438

0801aba0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801aba0:	4b01      	ldr	r3, [pc, #4]	; (801aba8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801aba2:	6818      	ldr	r0, [r3, #0]
 801aba4:	4770      	bx	lr
 801aba6:	bf00      	nop
 801aba8:	2000b42c 	.word	0x2000b42c

0801abac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801abac:	4b01      	ldr	r3, [pc, #4]	; (801abb4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801abae:	6818      	ldr	r0, [r3, #0]
 801abb0:	4770      	bx	lr
 801abb2:	bf00      	nop
 801abb4:	2000b434 	.word	0x2000b434

0801abb8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801abb8:	4b01      	ldr	r3, [pc, #4]	; (801abc0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801abba:	6818      	ldr	r0, [r3, #0]
 801abbc:	4770      	bx	lr
 801abbe:	bf00      	nop
 801abc0:	2000b440 	.word	0x2000b440

0801abc4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801abc4:	4b01      	ldr	r3, [pc, #4]	; (801abcc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801abc6:	6818      	ldr	r0, [r3, #0]
 801abc8:	4770      	bx	lr
 801abca:	bf00      	nop
 801abcc:	2000b430 	.word	0x2000b430

0801abd0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801abd0:	4b01      	ldr	r3, [pc, #4]	; (801abd8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801abd2:	6818      	ldr	r0, [r3, #0]
 801abd4:	4770      	bx	lr
 801abd6:	bf00      	nop
 801abd8:	2000b428 	.word	0x2000b428

0801abdc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801abdc:	4b01      	ldr	r3, [pc, #4]	; (801abe4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801abde:	6818      	ldr	r0, [r3, #0]
 801abe0:	4770      	bx	lr
 801abe2:	bf00      	nop
 801abe4:	2000b43c 	.word	0x2000b43c

0801abe8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801abe8:	2000      	movs	r0, #0
 801abea:	4770      	bx	lr

0801abec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abf0:	b091      	sub	sp, #68	; 0x44
 801abf2:	4699      	mov	r9, r3
 801abf4:	4617      	mov	r7, r2
 801abf6:	2500      	movs	r5, #0
 801abf8:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801abfc:	4680      	mov	r8, r0
 801abfe:	a80e      	add	r0, sp, #56	; 0x38
 801ac00:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801ac02:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801ac06:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801ac0a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801ac0e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ac12:	910d      	str	r1, [sp, #52]	; 0x34
 801ac14:	950e      	str	r5, [sp, #56]	; 0x38
 801ac16:	f000 fe39 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ac1c:	f8d9 6000 	ldr.w	r6, [r9]
 801ac20:	6818      	ldr	r0, [r3, #0]
 801ac22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ac24:	f9b4 b000 	ldrsh.w	fp, [r4]
 801ac28:	1b80      	subs	r0, r0, r6
 801ac2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac2e:	eb02 0c06 	add.w	ip, r2, r6
 801ac32:	ebab 0e0c 	sub.w	lr, fp, ip
 801ac36:	4570      	cmp	r0, lr
 801ac38:	f340 80bc 	ble.w	801adb4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801ac3c:	88a1      	ldrh	r1, [r4, #4]
 801ac3e:	4459      	add	r1, fp
 801ac40:	b209      	sxth	r1, r1
 801ac42:	458c      	cmp	ip, r1
 801ac44:	f300 80b6 	bgt.w	801adb4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801ac48:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801ac4c:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801ac50:	4283      	cmp	r3, r0
 801ac52:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801ac56:	edd9 6a07 	vldr	s13, [r9, #28]
 801ac5a:	bfa8      	it	ge
 801ac5c:	4603      	movge	r3, r0
 801ac5e:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801ac62:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801ac66:	45e3      	cmp	fp, ip
 801ac68:	ee07 3a90 	vmov	s15, r3
 801ac6c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801ac70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801ac74:	ee25 4a04 	vmul.f32	s8, s10, s8
 801ac78:	ee65 4a24 	vmul.f32	s9, s10, s9
 801ac7c:	ee25 5a27 	vmul.f32	s10, s10, s15
 801ac80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ac84:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801ac88:	ee32 1a05 	vadd.f32	s2, s4, s10
 801ac8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801ac90:	ee36 0a84 	vadd.f32	s0, s13, s8
 801ac94:	ee61 1a87 	vmul.f32	s3, s3, s14
 801ac98:	ee22 2a07 	vmul.f32	s4, s4, s14
 801ac9c:	f340 808d 	ble.w	801adba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801aca0:	fb9e f5f3 	sdiv	r5, lr, r3
 801aca4:	ee07 5a10 	vmov	s14, r5
 801aca8:	2d00      	cmp	r5, #0
 801acaa:	fb03 e415 	mls	r4, r3, r5, lr
 801acae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801acb2:	eea7 0a04 	vfma.f32	s0, s14, s8
 801acb6:	eee7 0a24 	vfma.f32	s1, s14, s9
 801acba:	eea7 1a05 	vfma.f32	s2, s14, s10
 801acbe:	dd12      	ble.n	801ace6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801acc0:	ee70 6a44 	vsub.f32	s13, s0, s8
 801acc4:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801acc8:	ee31 2a45 	vsub.f32	s4, s2, s10
 801accc:	eef5 6a40 	vcmp.f32	s13, #0.0
 801acd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acd4:	bf14      	ite	ne
 801acd6:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801acda:	eeb0 7a67 	vmoveq.f32	s14, s15
 801acde:	ee61 1a87 	vmul.f32	s3, s3, s14
 801ace2:	ee22 2a07 	vmul.f32	s4, s4, s14
 801ace6:	fb05 f703 	mul.w	r7, r5, r3
 801acea:	1bc0      	subs	r0, r0, r7
 801acec:	443e      	add	r6, r7
 801acee:	1997      	adds	r7, r2, r6
 801acf0:	4407      	add	r7, r0
 801acf2:	42b9      	cmp	r1, r7
 801acf4:	bfbc      	itt	lt
 801acf6:	1a88      	sublt	r0, r1, r2
 801acf8:	1b80      	sublt	r0, r0, r6
 801acfa:	2800      	cmp	r0, #0
 801acfc:	dd5a      	ble.n	801adb4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801acfe:	fb90 f1f3 	sdiv	r1, r0, r3
 801ad02:	fb03 0211 	mls	r2, r3, r1, r0
 801ad06:	b90a      	cbnz	r2, 801ad0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801ad08:	3901      	subs	r1, #1
 801ad0a:	461a      	mov	r2, r3
 801ad0c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801ad10:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801ad14:	44a4      	add	ip, r4
 801ad16:	2900      	cmp	r1, #0
 801ad18:	bfcc      	ite	gt
 801ad1a:	469e      	movgt	lr, r3
 801ad1c:	4696      	movle	lr, r2
 801ad1e:	fb03 c505 	mla	r5, r3, r5, ip
 801ad22:	eef0 6a42 	vmov.f32	s13, s4
 801ad26:	eeb0 7a61 	vmov.f32	s14, s3
 801ad2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad2e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ad32:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801ad36:	ee21 3a23 	vmul.f32	s6, s2, s7
 801ad3a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801ad3e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ad42:	ee17 0a90 	vmov	r0, s15
 801ad46:	ee73 7a42 	vsub.f32	s15, s6, s4
 801ad4a:	fb90 f6f3 	sdiv	r6, r0, r3
 801ad4e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ad52:	ee17 0a90 	vmov	r0, s15
 801ad56:	fb90 f7f3 	sdiv	r7, r0, r3
 801ad5a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ad5e:	f8d0 8000 	ldr.w	r8, [r0]
 801ad62:	900c      	str	r0, [sp, #48]	; 0x30
 801ad64:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ad66:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801ad6a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801ad6e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801ad72:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801ad76:	f8cd a020 	str.w	sl, [sp, #32]
 801ad7a:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801ad7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ad80:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801ad84:	9603      	str	r6, [sp, #12]
 801ad86:	44ca      	add	sl, r9
 801ad88:	9506      	str	r5, [sp, #24]
 801ad8a:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801ad8e:	ee16 0a90 	vmov	r0, s13
 801ad92:	f8cd a01c 	str.w	sl, [sp, #28]
 801ad96:	fb07 0704 	mla	r7, r7, r4, r0
 801ad9a:	ee17 0a10 	vmov	r0, s14
 801ad9e:	fb06 0604 	mla	r6, r6, r4, r0
 801ada2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ada4:	9702      	str	r7, [sp, #8]
 801ada6:	e9cd 3600 	strd	r3, r6, [sp]
 801adaa:	ebae 0304 	sub.w	r3, lr, r4
 801adae:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801adb2:	47a8      	blx	r5
 801adb4:	b011      	add	sp, #68	; 0x44
 801adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adba:	462c      	mov	r4, r5
 801adbc:	e797      	b.n	801acee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801adbe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801adbe:	b570      	push	{r4, r5, r6, lr}
 801adc0:	4604      	mov	r4, r0
 801adc2:	2500      	movs	r5, #0
 801adc4:	9804      	ldr	r0, [sp, #16]
 801adc6:	7223      	strb	r3, [r4, #8]
 801adc8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801adcc:	8025      	strh	r5, [r4, #0]
 801adce:	6061      	str	r1, [r4, #4]
 801add0:	7263      	strb	r3, [r4, #9]
 801add2:	60e0      	str	r0, [r4, #12]
 801add4:	8222      	strh	r2, [r4, #16]
 801add6:	8265      	strh	r5, [r4, #18]
 801add8:	82a5      	strh	r5, [r4, #20]
 801adda:	82e5      	strh	r5, [r4, #22]
 801addc:	8325      	strh	r5, [r4, #24]
 801adde:	8365      	strh	r5, [r4, #26]
 801ade0:	83a5      	strh	r5, [r4, #28]
 801ade2:	77a5      	strb	r5, [r4, #30]
 801ade4:	6803      	ldr	r3, [r0, #0]
 801ade6:	695b      	ldr	r3, [r3, #20]
 801ade8:	4798      	blx	r3
 801adea:	4606      	mov	r6, r0
 801adec:	b1f8      	cbz	r0, 801ae2e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801adee:	68e0      	ldr	r0, [r4, #12]
 801adf0:	4631      	mov	r1, r6
 801adf2:	6803      	ldr	r3, [r0, #0]
 801adf4:	68db      	ldr	r3, [r3, #12]
 801adf6:	4798      	blx	r3
 801adf8:	7b43      	ldrb	r3, [r0, #13]
 801adfa:	7a82      	ldrb	r2, [r0, #10]
 801adfc:	4605      	mov	r5, r0
 801adfe:	005b      	lsls	r3, r3, #1
 801ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae04:	4313      	orrs	r3, r2
 801ae06:	83a3      	strh	r3, [r4, #28]
 801ae08:	7a63      	ldrb	r3, [r4, #9]
 801ae0a:	2b04      	cmp	r3, #4
 801ae0c:	d10f      	bne.n	801ae2e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801ae0e:	68e0      	ldr	r0, [r4, #12]
 801ae10:	462a      	mov	r2, r5
 801ae12:	4631      	mov	r1, r6
 801ae14:	6803      	ldr	r3, [r0, #0]
 801ae16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ae18:	4798      	blx	r3
 801ae1a:	7b6b      	ldrb	r3, [r5, #13]
 801ae1c:	005b      	lsls	r3, r3, #1
 801ae1e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ae22:	7aab      	ldrb	r3, [r5, #10]
 801ae24:	4313      	orrs	r3, r2
 801ae26:	4418      	add	r0, r3
 801ae28:	8ba3      	ldrh	r3, [r4, #28]
 801ae2a:	4418      	add	r0, r3
 801ae2c:	83a0      	strh	r0, [r4, #28]
 801ae2e:	4620      	mov	r0, r4
 801ae30:	bd70      	pop	{r4, r5, r6, pc}

0801ae32 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801ae32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae36:	2400      	movs	r4, #0
 801ae38:	b085      	sub	sp, #20
 801ae3a:	4681      	mov	r9, r0
 801ae3c:	4688      	mov	r8, r1
 801ae3e:	4692      	mov	sl, r2
 801ae40:	469b      	mov	fp, r3
 801ae42:	4627      	mov	r7, r4
 801ae44:	4625      	mov	r5, r4
 801ae46:	4626      	mov	r6, r4
 801ae48:	4554      	cmp	r4, sl
 801ae4a:	da2a      	bge.n	801aea2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	9303      	str	r3, [sp, #12]
 801ae50:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ae54:	429d      	cmp	r5, r3
 801ae56:	d004      	beq.n	801ae62 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801ae58:	f242 030b 	movw	r3, #8203	; 0x200b
 801ae5c:	429d      	cmp	r5, r3
 801ae5e:	bf18      	it	ne
 801ae60:	462f      	movne	r7, r5
 801ae62:	ab03      	add	r3, sp, #12
 801ae64:	4642      	mov	r2, r8
 801ae66:	4659      	mov	r1, fp
 801ae68:	4648      	mov	r0, r9
 801ae6a:	f002 faff 	bl	801d46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ae6e:	4605      	mov	r5, r0
 801ae70:	b1b8      	cbz	r0, 801aea2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ae72:	280a      	cmp	r0, #10
 801ae74:	d015      	beq.n	801aea2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ae76:	9a03      	ldr	r2, [sp, #12]
 801ae78:	b18a      	cbz	r2, 801ae9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801ae7a:	7b50      	ldrb	r0, [r2, #13]
 801ae7c:	4639      	mov	r1, r7
 801ae7e:	7a93      	ldrb	r3, [r2, #10]
 801ae80:	0040      	lsls	r0, r0, #1
 801ae82:	8895      	ldrh	r5, [r2, #4]
 801ae84:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ae88:	4303      	orrs	r3, r0
 801ae8a:	4640      	mov	r0, r8
 801ae8c:	9301      	str	r3, [sp, #4]
 801ae8e:	f8d8 3000 	ldr.w	r3, [r8]
 801ae92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ae94:	4798      	blx	r3
 801ae96:	9b01      	ldr	r3, [sp, #4]
 801ae98:	4418      	add	r0, r3
 801ae9a:	4406      	add	r6, r0
 801ae9c:	b2b6      	uxth	r6, r6
 801ae9e:	3401      	adds	r4, #1
 801aea0:	e7d2      	b.n	801ae48 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801aea2:	4630      	mov	r0, r6
 801aea4:	b005      	add	sp, #20
 801aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aeaa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801aeaa:	2a02      	cmp	r2, #2
 801aeac:	b530      	push	{r4, r5, lr}
 801aeae:	d011      	beq.n	801aed4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801aeb0:	2a03      	cmp	r2, #3
 801aeb2:	d01c      	beq.n	801aeee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801aeb4:	2a01      	cmp	r2, #1
 801aeb6:	d10c      	bne.n	801aed2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801aeb8:	888b      	ldrh	r3, [r1, #4]
 801aeba:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801aebe:	8801      	ldrh	r1, [r0, #0]
 801aec0:	1a9b      	subs	r3, r3, r2
 801aec2:	8844      	ldrh	r4, [r0, #2]
 801aec4:	1a5b      	subs	r3, r3, r1
 801aec6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801aeca:	8004      	strh	r4, [r0, #0]
 801aecc:	8043      	strh	r3, [r0, #2]
 801aece:	8081      	strh	r1, [r0, #4]
 801aed0:	80c2      	strh	r2, [r0, #6]
 801aed2:	bd30      	pop	{r4, r5, pc}
 801aed4:	88cb      	ldrh	r3, [r1, #6]
 801aed6:	88c2      	ldrh	r2, [r0, #6]
 801aed8:	1a9b      	subs	r3, r3, r2
 801aeda:	8842      	ldrh	r2, [r0, #2]
 801aedc:	1a9b      	subs	r3, r3, r2
 801aede:	888a      	ldrh	r2, [r1, #4]
 801aee0:	8881      	ldrh	r1, [r0, #4]
 801aee2:	8043      	strh	r3, [r0, #2]
 801aee4:	1a52      	subs	r2, r2, r1
 801aee6:	8801      	ldrh	r1, [r0, #0]
 801aee8:	1a52      	subs	r2, r2, r1
 801aeea:	8002      	strh	r2, [r0, #0]
 801aeec:	e7f1      	b.n	801aed2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801aeee:	88cb      	ldrh	r3, [r1, #6]
 801aef0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801aef4:	8841      	ldrh	r1, [r0, #2]
 801aef6:	1a9b      	subs	r3, r3, r2
 801aef8:	f9b0 5000 	ldrsh.w	r5, [r0]
 801aefc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801af00:	1a5b      	subs	r3, r3, r1
 801af02:	8045      	strh	r5, [r0, #2]
 801af04:	8082      	strh	r2, [r0, #4]
 801af06:	8003      	strh	r3, [r0, #0]
 801af08:	80c4      	strh	r4, [r0, #6]
 801af0a:	e7e2      	b.n	801aed2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801af0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af10:	b09f      	sub	sp, #124	; 0x7c
 801af12:	9116      	str	r1, [sp, #88]	; 0x58
 801af14:	9317      	str	r3, [sp, #92]	; 0x5c
 801af16:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801af18:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801af1a:	8809      	ldrh	r1, [r1, #0]
 801af1c:	889b      	ldrh	r3, [r3, #4]
 801af1e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801af22:	440b      	add	r3, r1
 801af24:	9212      	str	r2, [sp, #72]	; 0x48
 801af26:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801af2a:	b21b      	sxth	r3, r3
 801af2c:	9011      	str	r0, [sp, #68]	; 0x44
 801af2e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801af32:	9310      	str	r3, [sp, #64]	; 0x40
 801af34:	f8d8 3000 	ldr.w	r3, [r8]
 801af38:	7a59      	ldrb	r1, [r3, #9]
 801af3a:	7a1b      	ldrb	r3, [r3, #8]
 801af3c:	9114      	str	r1, [sp, #80]	; 0x50
 801af3e:	9315      	str	r3, [sp, #84]	; 0x54
 801af40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801af42:	f9b3 5000 	ldrsh.w	r5, [r3]
 801af46:	2a00      	cmp	r2, #0
 801af48:	d067      	beq.n	801b01a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801af4a:	f898 3010 	ldrb.w	r3, [r8, #16]
 801af4e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801af50:	2b04      	cmp	r3, #4
 801af52:	bf14      	ite	ne
 801af54:	2301      	movne	r3, #1
 801af56:	2302      	moveq	r3, #2
 801af58:	4413      	add	r3, r2
 801af5a:	f04f 0900 	mov.w	r9, #0
 801af5e:	930f      	str	r3, [sp, #60]	; 0x3c
 801af60:	464c      	mov	r4, r9
 801af62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801af66:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801af6a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801af6e:	4293      	cmp	r3, r2
 801af70:	f280 808c 	bge.w	801b08c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801af74:	2300      	movs	r3, #0
 801af76:	931c      	str	r3, [sp, #112]	; 0x70
 801af78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801af7c:	429c      	cmp	r4, r3
 801af7e:	d006      	beq.n	801af8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801af80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af82:	f242 020b 	movw	r2, #8203	; 0x200b
 801af86:	4294      	cmp	r4, r2
 801af88:	bf18      	it	ne
 801af8a:	4623      	movne	r3, r4
 801af8c:	930d      	str	r3, [sp, #52]	; 0x34
 801af8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af90:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801af92:	f8d8 2000 	ldr.w	r2, [r8]
 801af96:	428b      	cmp	r3, r1
 801af98:	db41      	blt.n	801b01e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801af9a:	6813      	ldr	r3, [r2, #0]
 801af9c:	4610      	mov	r0, r2
 801af9e:	695b      	ldr	r3, [r3, #20]
 801afa0:	4798      	blx	r3
 801afa2:	4604      	mov	r4, r0
 801afa4:	f8d8 0000 	ldr.w	r0, [r8]
 801afa8:	aa1d      	add	r2, sp, #116	; 0x74
 801afaa:	4621      	mov	r1, r4
 801afac:	6803      	ldr	r3, [r0, #0]
 801afae:	689e      	ldr	r6, [r3, #8]
 801afb0:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801afb4:	47b0      	blx	r6
 801afb6:	901c      	str	r0, [sp, #112]	; 0x70
 801afb8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801afbc:	429c      	cmp	r4, r3
 801afbe:	f000 80ea 	beq.w	801b196 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801afc2:	f242 030b 	movw	r3, #8203	; 0x200b
 801afc6:	429c      	cmp	r4, r3
 801afc8:	f000 80e5 	beq.w	801b196 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801afcc:	2c00      	cmp	r4, #0
 801afce:	f000 80f7 	beq.w	801b1c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801afd2:	2c0a      	cmp	r4, #10
 801afd4:	d060      	beq.n	801b098 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801afd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801afd8:	b36a      	cbz	r2, 801b036 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801afda:	8894      	ldrh	r4, [r2, #4]
 801afdc:	f1bb 0f00 	cmp.w	fp, #0
 801afe0:	d03b      	beq.n	801b05a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801afe2:	f892 900d 	ldrb.w	r9, [r2, #13]
 801afe6:	f1bb 0f01 	cmp.w	fp, #1
 801afea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801afee:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801aff2:	f892 900a 	ldrb.w	r9, [r2, #10]
 801aff6:	ea49 0903 	orr.w	r9, r9, r3
 801affa:	d134      	bne.n	801b066 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801affc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801affe:	eba5 0509 	sub.w	r5, r5, r9
 801b002:	2b00      	cmp	r3, #0
 801b004:	d14f      	bne.n	801b0a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b006:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b008:	eb09 0305 	add.w	r3, r9, r5
 801b00c:	4413      	add	r3, r2
 801b00e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b010:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b014:	4293      	cmp	r3, r2
 801b016:	da51      	bge.n	801b0bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b018:	e038      	b.n	801b08c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b01a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b01c:	e79d      	b.n	801af5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801b01e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b022:	4659      	mov	r1, fp
 801b024:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b026:	9301      	str	r3, [sp, #4]
 801b028:	ab1d      	add	r3, sp, #116	; 0x74
 801b02a:	9300      	str	r3, [sp, #0]
 801b02c:	ab1c      	add	r3, sp, #112	; 0x70
 801b02e:	f002 fa71 	bl	801d514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b032:	4604      	mov	r4, r0
 801b034:	e7c0      	b.n	801afb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801b036:	f8d8 0000 	ldr.w	r0, [r8]
 801b03a:	6803      	ldr	r3, [r0, #0]
 801b03c:	691b      	ldr	r3, [r3, #16]
 801b03e:	4798      	blx	r3
 801b040:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b044:	4298      	cmp	r0, r3
 801b046:	f000 80a6 	beq.w	801b196 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b04a:	f242 030b 	movw	r3, #8203	; 0x200b
 801b04e:	4298      	cmp	r0, r3
 801b050:	f000 80a1 	beq.w	801b196 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b054:	f1bb 0f00 	cmp.w	fp, #0
 801b058:	d100      	bne.n	801b05c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801b05a:	444d      	add	r5, r9
 801b05c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b05e:	2a00      	cmp	r2, #0
 801b060:	d1bf      	bne.n	801afe2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801b062:	4691      	mov	r9, r2
 801b064:	e097      	b.n	801b196 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b068:	2b00      	cmp	r3, #0
 801b06a:	f000 80ab 	beq.w	801b1c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801b06e:	f1bb 0f00 	cmp.w	fp, #0
 801b072:	d118      	bne.n	801b0a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b074:	f8d8 0000 	ldr.w	r0, [r8]
 801b078:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b07a:	6803      	ldr	r3, [r0, #0]
 801b07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b07e:	4798      	blx	r3
 801b080:	4405      	add	r5, r0
 801b082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b086:	1aeb      	subs	r3, r5, r3
 801b088:	4293      	cmp	r3, r2
 801b08a:	dd17      	ble.n	801b0bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b08c:	2c00      	cmp	r4, #0
 801b08e:	f000 8097 	beq.w	801b1c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801b092:	2c0a      	cmp	r4, #10
 801b094:	f040 8085 	bne.w	801b1a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801b098:	240a      	movs	r4, #10
 801b09a:	fab4 f084 	clz	r0, r4
 801b09e:	0940      	lsrs	r0, r0, #5
 801b0a0:	b01f      	add	sp, #124	; 0x7c
 801b0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0a6:	f8d8 0000 	ldr.w	r0, [r8]
 801b0aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b0ac:	6803      	ldr	r3, [r0, #0]
 801b0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0b0:	4798      	blx	r3
 801b0b2:	f1bb 0f01 	cmp.w	fp, #1
 801b0b6:	eba5 0500 	sub.w	r5, r5, r0
 801b0ba:	d0a4      	beq.n	801b006 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801b0bc:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b0be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b0c0:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b0c4:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b0c8:	7b43      	ldrb	r3, [r0, #13]
 801b0ca:	4429      	add	r1, r5
 801b0cc:	015b      	lsls	r3, r3, #5
 801b0ce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b0d2:	7983      	ldrb	r3, [r0, #6]
 801b0d4:	4313      	orrs	r3, r2
 801b0d6:	440b      	add	r3, r1
 801b0d8:	42b3      	cmp	r3, r6
 801b0da:	db5c      	blt.n	801b196 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0de:	4299      	cmp	r1, r3
 801b0e0:	da59      	bge.n	801b196 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b0e2:	f8d8 0000 	ldr.w	r0, [r8]
 801b0e6:	42ae      	cmp	r6, r5
 801b0e8:	6803      	ldr	r3, [r0, #0]
 801b0ea:	bfcc      	ite	gt
 801b0ec:	1b76      	subgt	r6, r6, r5
 801b0ee:	2600      	movle	r6, #0
 801b0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0f2:	bfc8      	it	gt
 801b0f4:	b2b6      	uxthgt	r6, r6
 801b0f6:	4798      	blx	r3
 801b0f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b0fa:	7b5a      	ldrb	r2, [r3, #13]
 801b0fc:	00d1      	lsls	r1, r2, #3
 801b0fe:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801b102:	7a19      	ldrb	r1, [r3, #8]
 801b104:	4339      	orrs	r1, r7
 801b106:	0657      	lsls	r7, r2, #25
 801b108:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b10a:	bf48      	it	mi
 801b10c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b110:	4407      	add	r7, r0
 801b112:	bf48      	it	mi
 801b114:	b209      	sxthmi	r1, r1
 801b116:	1a7f      	subs	r7, r7, r1
 801b118:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b11a:	b2bf      	uxth	r7, r7
 801b11c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b120:	fa0f fa87 	sxth.w	sl, r7
 801b124:	4551      	cmp	r1, sl
 801b126:	dd3a      	ble.n	801b19e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b128:	0112      	lsls	r2, r2, #4
 801b12a:	79d8      	ldrb	r0, [r3, #7]
 801b12c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b130:	4302      	orrs	r2, r0
 801b132:	4492      	add	sl, r2
 801b134:	4551      	cmp	r1, sl
 801b136:	dc2e      	bgt.n	801b196 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b138:	1bcf      	subs	r7, r1, r7
 801b13a:	468a      	mov	sl, r1
 801b13c:	b2bf      	uxth	r7, r7
 801b13e:	9319      	str	r3, [sp, #100]	; 0x64
 801b140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b142:	f8d8 0000 	ldr.w	r0, [r8]
 801b146:	681a      	ldr	r2, [r3, #0]
 801b148:	6801      	ldr	r1, [r0, #0]
 801b14a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801b14c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b14e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b150:	9218      	str	r2, [sp, #96]	; 0x60
 801b152:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b154:	4788      	blx	r1
 801b156:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b15a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b15c:	910b      	str	r1, [sp, #44]	; 0x2c
 801b15e:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b162:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b164:	910a      	str	r1, [sp, #40]	; 0x28
 801b166:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b16a:	9109      	str	r1, [sp, #36]	; 0x24
 801b16c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b170:	9305      	str	r3, [sp, #20]
 801b172:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b174:	9206      	str	r2, [sp, #24]
 801b176:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b17a:	442e      	add	r6, r5
 801b17c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b180:	b236      	sxth	r6, r6
 801b182:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b184:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b188:	9600      	str	r6, [sp, #0]
 801b18a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b18c:	681a      	ldr	r2, [r3, #0]
 801b18e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b190:	685b      	ldr	r3, [r3, #4]
 801b192:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b194:	47b0      	blx	r6
 801b196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b198:	3301      	adds	r3, #1
 801b19a:	930e      	str	r3, [sp, #56]	; 0x38
 801b19c:	e6e5      	b.n	801af6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801b19e:	2700      	movs	r7, #0
 801b1a0:	e7cd      	b.n	801b13e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801b1a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b1a4:	3501      	adds	r5, #1
 801b1a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b1a8:	429d      	cmp	r5, r3
 801b1aa:	f6bf af76 	bge.w	801b09a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b1ae:	4659      	mov	r1, fp
 801b1b0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b1b2:	f7f9 fba1 	bl	80148f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b1b6:	4604      	mov	r4, r0
 801b1b8:	b110      	cbz	r0, 801b1c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801b1ba:	280a      	cmp	r0, #10
 801b1bc:	d1f2      	bne.n	801b1a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801b1be:	e76b      	b.n	801b098 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b1c0:	2400      	movs	r4, #0
 801b1c2:	e76a      	b.n	801b09a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b1c4:	f1bb 0f00 	cmp.w	fp, #0
 801b1c8:	f43f af5b 	beq.w	801b082 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b1cc:	e776      	b.n	801b0bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801b1ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b1ce:	b530      	push	{r4, r5, lr}
 801b1d0:	8a44      	ldrh	r4, [r0, #18]
 801b1d2:	8ac5      	ldrh	r5, [r0, #22]
 801b1d4:	82c3      	strh	r3, [r0, #22]
 801b1d6:	442c      	add	r4, r5
 801b1d8:	1ae4      	subs	r4, r4, r3
 801b1da:	8b03      	ldrh	r3, [r0, #24]
 801b1dc:	8244      	strh	r4, [r0, #18]
 801b1de:	8a84      	ldrh	r4, [r0, #20]
 801b1e0:	4422      	add	r2, r4
 801b1e2:	440c      	add	r4, r1
 801b1e4:	1a59      	subs	r1, r3, r1
 801b1e6:	8342      	strh	r2, [r0, #26]
 801b1e8:	8284      	strh	r4, [r0, #20]
 801b1ea:	8301      	strh	r1, [r0, #24]
 801b1ec:	bd30      	pop	{r4, r5, pc}

0801b1ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1f2:	7a43      	ldrb	r3, [r0, #9]
 801b1f4:	b087      	sub	sp, #28
 801b1f6:	4604      	mov	r4, r0
 801b1f8:	460f      	mov	r7, r1
 801b1fa:	1eda      	subs	r2, r3, #3
 801b1fc:	b2d2      	uxtb	r2, r2
 801b1fe:	2900      	cmp	r1, #0
 801b200:	d036      	beq.n	801b270 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b202:	2a01      	cmp	r2, #1
 801b204:	d932      	bls.n	801b26c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b206:	1e58      	subs	r0, r3, #1
 801b208:	f1d0 0b00 	rsbs	fp, r0, #0
 801b20c:	eb4b 0b00 	adc.w	fp, fp, r0
 801b210:	1e99      	subs	r1, r3, #2
 801b212:	424b      	negs	r3, r1
 801b214:	414b      	adcs	r3, r1
 801b216:	9303      	str	r3, [sp, #12]
 801b218:	2300      	movs	r3, #0
 801b21a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b21e:	2500      	movs	r5, #0
 801b220:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801b224:	46a9      	mov	r9, r5
 801b226:	8265      	strh	r5, [r4, #18]
 801b228:	82a5      	strh	r5, [r4, #20]
 801b22a:	2300      	movs	r3, #0
 801b22c:	9305      	str	r3, [sp, #20]
 801b22e:	8823      	ldrh	r3, [r4, #0]
 801b230:	2b20      	cmp	r3, #32
 801b232:	d02b      	beq.n	801b28c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b234:	eba3 020a 	sub.w	r2, r3, sl
 801b238:	4256      	negs	r6, r2
 801b23a:	4156      	adcs	r6, r2
 801b23c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b240:	4293      	cmp	r3, r2
 801b242:	d004      	beq.n	801b24e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b244:	4553      	cmp	r3, sl
 801b246:	bf16      	itet	ne
 801b248:	4699      	movne	r9, r3
 801b24a:	2601      	moveq	r6, #1
 801b24c:	2600      	movne	r6, #0
 801b24e:	ab05      	add	r3, sp, #20
 801b250:	68e2      	ldr	r2, [r4, #12]
 801b252:	7a21      	ldrb	r1, [r4, #8]
 801b254:	6860      	ldr	r0, [r4, #4]
 801b256:	f002 f909 	bl	801d46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b25a:	8020      	strh	r0, [r4, #0]
 801b25c:	b9c8      	cbnz	r0, 801b292 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b25e:	8b22      	ldrh	r2, [r4, #24]
 801b260:	2300      	movs	r3, #0
 801b262:	4611      	mov	r1, r2
 801b264:	4620      	mov	r0, r4
 801b266:	f7ff ffb2 	bl	801b1ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b26a:	e066      	b.n	801b33a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b26c:	468b      	mov	fp, r1
 801b26e:	e7cf      	b.n	801b210 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b270:	3b01      	subs	r3, #1
 801b272:	2a01      	cmp	r2, #1
 801b274:	9103      	str	r1, [sp, #12]
 801b276:	468b      	mov	fp, r1
 801b278:	bf8c      	ite	hi
 801b27a:	2200      	movhi	r2, #0
 801b27c:	2201      	movls	r2, #1
 801b27e:	2b01      	cmp	r3, #1
 801b280:	9202      	str	r2, [sp, #8]
 801b282:	bf8c      	ite	hi
 801b284:	2300      	movhi	r3, #0
 801b286:	2301      	movls	r3, #1
 801b288:	9301      	str	r3, [sp, #4]
 801b28a:	e7c8      	b.n	801b21e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b28c:	4699      	mov	r9, r3
 801b28e:	2601      	movs	r6, #1
 801b290:	e7dd      	b.n	801b24e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b292:	8ae3      	ldrh	r3, [r4, #22]
 801b294:	280a      	cmp	r0, #10
 801b296:	f103 0301 	add.w	r3, r3, #1
 801b29a:	82e3      	strh	r3, [r4, #22]
 801b29c:	d0df      	beq.n	801b25e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b29e:	9a05      	ldr	r2, [sp, #20]
 801b2a0:	bb42      	cbnz	r2, 801b2f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b2a2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b2a6:	4298      	cmp	r0, r3
 801b2a8:	d001      	beq.n	801b2ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b2aa:	4550      	cmp	r0, sl
 801b2ac:	d1bd      	bne.n	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2ae:	8823      	ldrh	r3, [r4, #0]
 801b2b0:	8b21      	ldrh	r1, [r4, #24]
 801b2b2:	2b20      	cmp	r3, #32
 801b2b4:	d001      	beq.n	801b2ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b2b6:	4553      	cmp	r3, sl
 801b2b8:	d131      	bne.n	801b31e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b2ba:	2e00      	cmp	r6, #0
 801b2bc:	bf0a      	itet	eq
 801b2be:	460d      	moveq	r5, r1
 801b2c0:	4630      	movne	r0, r6
 801b2c2:	2001      	moveq	r0, #1
 801b2c4:	440a      	add	r2, r1
 801b2c6:	8aa3      	ldrh	r3, [r4, #20]
 801b2c8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b2cc:	b292      	uxth	r2, r2
 801b2ce:	8322      	strh	r2, [r4, #24]
 801b2d0:	4413      	add	r3, r2
 801b2d2:	2f00      	cmp	r7, #0
 801b2d4:	d03a      	beq.n	801b34c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b2d6:	f1bb 0f00 	cmp.w	fp, #0
 801b2da:	d102      	bne.n	801b2e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b2dc:	9903      	ldr	r1, [sp, #12]
 801b2de:	b301      	cbz	r1, 801b322 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b2e0:	b1f8      	cbz	r0, 801b322 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b2e2:	8ba1      	ldrh	r1, [r4, #28]
 801b2e4:	4419      	add	r1, r3
 801b2e6:	458c      	cmp	ip, r1
 801b2e8:	da2a      	bge.n	801b340 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b2ea:	8a61      	ldrh	r1, [r4, #18]
 801b2ec:	b341      	cbz	r1, 801b340 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b2ee:	4563      	cmp	r3, ip
 801b2f0:	dd9b      	ble.n	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2f2:	e01c      	b.n	801b32e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b2f4:	8893      	ldrh	r3, [r2, #4]
 801b2f6:	4649      	mov	r1, r9
 801b2f8:	8023      	strh	r3, [r4, #0]
 801b2fa:	f892 800d 	ldrb.w	r8, [r2, #13]
 801b2fe:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b302:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801b306:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b30a:	ea48 0800 	orr.w	r8, r8, r0
 801b30e:	68e0      	ldr	r0, [r4, #12]
 801b310:	6803      	ldr	r3, [r0, #0]
 801b312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b314:	4798      	blx	r3
 801b316:	eb08 0200 	add.w	r2, r8, r0
 801b31a:	b292      	uxth	r2, r2
 801b31c:	e7c7      	b.n	801b2ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b31e:	2000      	movs	r0, #0
 801b320:	e7d0      	b.n	801b2c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b322:	4563      	cmp	r3, ip
 801b324:	dd81      	ble.n	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b326:	8a63      	ldrh	r3, [r4, #18]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	f43f af7e 	beq.w	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b32e:	2301      	movs	r3, #1
 801b330:	8ba2      	ldrh	r2, [r4, #28]
 801b332:	77a3      	strb	r3, [r4, #30]
 801b334:	8b63      	ldrh	r3, [r4, #26]
 801b336:	4413      	add	r3, r2
 801b338:	8363      	strh	r3, [r4, #26]
 801b33a:	b007      	add	sp, #28
 801b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b340:	2300      	movs	r3, #0
 801b342:	4611      	mov	r1, r2
 801b344:	4620      	mov	r0, r4
 801b346:	f7ff ff42 	bl	801b1ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b34a:	e76e      	b.n	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b34c:	4563      	cmp	r3, ip
 801b34e:	dd14      	ble.n	801b37a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801b350:	9b02      	ldr	r3, [sp, #8]
 801b352:	b113      	cbz	r3, 801b35a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801b354:	2301      	movs	r3, #1
 801b356:	460a      	mov	r2, r1
 801b358:	e783      	b.n	801b262 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801b35a:	9b01      	ldr	r3, [sp, #4]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	f43f af64 	beq.w	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b362:	2800      	cmp	r0, #0
 801b364:	f47f af61 	bne.w	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b368:	b116      	cbz	r6, 801b370 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801b36a:	2301      	movs	r3, #1
 801b36c:	462a      	mov	r2, r5
 801b36e:	e779      	b.n	801b264 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b370:	8a63      	ldrh	r3, [r4, #18]
 801b372:	2b00      	cmp	r3, #0
 801b374:	f43f af59 	beq.w	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b378:	e7df      	b.n	801b33a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b37a:	2800      	cmp	r0, #0
 801b37c:	f47f af55 	bne.w	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b380:	2e00      	cmp	r6, #0
 801b382:	f43f af52 	beq.w	801b22a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b386:	2301      	movs	r3, #1
 801b388:	462a      	mov	r2, r5
 801b38a:	e7db      	b.n	801b344 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b38c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b38c:	b530      	push	{r4, r5, lr}
 801b38e:	4605      	mov	r5, r0
 801b390:	b08b      	sub	sp, #44	; 0x2c
 801b392:	b191      	cbz	r1, 801b3ba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801b394:	2401      	movs	r4, #1
 801b396:	e9cd 3100 	strd	r3, r1, [sp]
 801b39a:	4613      	mov	r3, r2
 801b39c:	4601      	mov	r1, r0
 801b39e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b3a2:	a802      	add	r0, sp, #8
 801b3a4:	f7ff fd0b 	bl	801adbe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b3a8:	2100      	movs	r1, #0
 801b3aa:	a802      	add	r0, sp, #8
 801b3ac:	f7ff ff1f 	bl	801b1ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b3b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b3b4:	b163      	cbz	r3, 801b3d0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b3b6:	3401      	adds	r4, #1
 801b3b8:	e7f6      	b.n	801b3a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801b3ba:	2401      	movs	r4, #1
 801b3bc:	f002 f948 	bl	801d650 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b3c0:	280a      	cmp	r0, #10
 801b3c2:	4628      	mov	r0, r5
 801b3c4:	bf08      	it	eq
 801b3c6:	3401      	addeq	r4, #1
 801b3c8:	f002 f942 	bl	801d650 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b3cc:	2800      	cmp	r0, #0
 801b3ce:	d1f7      	bne.n	801b3c0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b3d0:	b2a0      	uxth	r0, r4
 801b3d2:	b00b      	add	sp, #44	; 0x2c
 801b3d4:	bd30      	pop	{r4, r5, pc}

0801b3d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3da:	b0db      	sub	sp, #364	; 0x16c
 801b3dc:	4689      	mov	r9, r1
 801b3de:	461c      	mov	r4, r3
 801b3e0:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 801b3e4:	900a      	str	r0, [sp, #40]	; 0x28
 801b3e6:	f1ba 0f00 	cmp.w	sl, #0
 801b3ea:	f000 80a5 	beq.w	801b538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	f000 80a1 	beq.w	801b538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801b3f6:	7ba3      	ldrb	r3, [r4, #14]
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	f000 809d 	beq.w	801b538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801b3fe:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801b402:	6810      	ldr	r0, [r2, #0]
 801b404:	6851      	ldr	r1, [r2, #4]
 801b406:	2500      	movs	r5, #0
 801b408:	4643      	mov	r3, r8
 801b40a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801b40e:	950e      	str	r5, [sp, #56]	; 0x38
 801b410:	af18      	add	r7, sp, #96	; 0x60
 801b412:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801b416:	79a2      	ldrb	r2, [r4, #6]
 801b418:	c303      	stmia	r3!, {r0, r1}
 801b41a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801b41e:	a90e      	add	r1, sp, #56	; 0x38
 801b420:	4640      	mov	r0, r8
 801b422:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b426:	f7ff fd40 	bl	801aeaa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b42a:	a90e      	add	r1, sp, #56	; 0x38
 801b42c:	79a2      	ldrb	r2, [r4, #6]
 801b42e:	4608      	mov	r0, r1
 801b430:	f7ff fd3b 	bl	801aeaa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b434:	4638      	mov	r0, r7
 801b436:	f001 fcda 	bl	801cdee <_ZN8touchgfx12TextProviderC1Ev>
 801b43a:	6820      	ldr	r0, [r4, #0]
 801b43c:	6803      	ldr	r3, [r0, #0]
 801b43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b440:	4798      	blx	r3
 801b442:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801b444:	4603      	mov	r3, r0
 801b446:	4651      	mov	r1, sl
 801b448:	4638      	mov	r0, r7
 801b44a:	f001 fd15 	bl	801ce78 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b44e:	7923      	ldrb	r3, [r4, #4]
 801b450:	6820      	ldr	r0, [r4, #0]
 801b452:	9308      	str	r3, [sp, #32]
 801b454:	6803      	ldr	r3, [r0, #0]
 801b456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b458:	4798      	blx	r3
 801b45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b45e:	181e      	adds	r6, r3, r0
 801b460:	42ae      	cmp	r6, r5
 801b462:	dd06      	ble.n	801b472 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801b464:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801b468:	4282      	cmp	r2, r0
 801b46a:	bfa4      	itt	ge
 801b46c:	189d      	addge	r5, r3, r2
 801b46e:	fb95 f5f6 	sdivge	r5, r5, r6
 801b472:	a82e      	add	r0, sp, #184	; 0xb8
 801b474:	f001 fcbb 	bl	801cdee <_ZN8touchgfx12TextProviderC1Ev>
 801b478:	7c23      	ldrb	r3, [r4, #16]
 801b47a:	b14b      	cbz	r3, 801b490 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801b47c:	6820      	ldr	r0, [r4, #0]
 801b47e:	6803      	ldr	r3, [r0, #0]
 801b480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b482:	4798      	blx	r3
 801b484:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801b486:	4603      	mov	r3, r0
 801b488:	4651      	mov	r1, sl
 801b48a:	a82e      	add	r0, sp, #184	; 0xb8
 801b48c:	f001 fcf4 	bl	801ce78 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b490:	7c21      	ldrb	r1, [r4, #16]
 801b492:	a810      	add	r0, sp, #64	; 0x40
 801b494:	7963      	ldrb	r3, [r4, #5]
 801b496:	9101      	str	r1, [sp, #4]
 801b498:	6821      	ldr	r1, [r4, #0]
 801b49a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801b49e:	9100      	str	r1, [sp, #0]
 801b4a0:	a92e      	add	r1, sp, #184	; 0xb8
 801b4a2:	f7ff fc8c 	bl	801adbe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b4a6:	7c23      	ldrb	r3, [r4, #16]
 801b4a8:	b9bb      	cbnz	r3, 801b4da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 801b4aa:	fa1f fa86 	uxth.w	sl, r6
 801b4ae:	2d00      	cmp	r5, #0
 801b4b0:	dd45      	ble.n	801b53e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801b4b2:	4638      	mov	r0, r7
 801b4b4:	f002 f8cc 	bl	801d650 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b4b8:	2800      	cmp	r0, #0
 801b4ba:	d03d      	beq.n	801b538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801b4bc:	280a      	cmp	r0, #10
 801b4be:	d1f6      	bne.n	801b4ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801b4c0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801b4c4:	3d01      	subs	r5, #1
 801b4c6:	4453      	add	r3, sl
 801b4c8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b4cc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b4d0:	eba3 030a 	sub.w	r3, r3, sl
 801b4d4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b4d8:	e7e9      	b.n	801b4ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801b4da:	0073      	lsls	r3, r6, #1
 801b4dc:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801b4e0:	fa1f fa86 	uxth.w	sl, r6
 801b4e4:	9309      	str	r3, [sp, #36]	; 0x24
 801b4e6:	2d00      	cmp	r5, #0
 801b4e8:	dd29      	ble.n	801b53e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801b4ea:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801b4ee:	a810      	add	r0, sp, #64	; 0x40
 801b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4f2:	428b      	cmp	r3, r1
 801b4f4:	bfd4      	ite	le
 801b4f6:	2100      	movle	r1, #0
 801b4f8:	2101      	movgt	r1, #1
 801b4fa:	f7ff fe78 	bl	801b1ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b4fe:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801b502:	3b01      	subs	r3, #1
 801b504:	b29b      	uxth	r3, r3
 801b506:	455b      	cmp	r3, fp
 801b508:	930b      	str	r3, [sp, #44]	; 0x2c
 801b50a:	d005      	beq.n	801b518 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801b50c:	7961      	ldrb	r1, [r4, #5]
 801b50e:	4638      	mov	r0, r7
 801b510:	f7f9 f9f2 	bl	80148f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b516:	e7f4      	b.n	801b502 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801b518:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801b51c:	3d01      	subs	r5, #1
 801b51e:	4453      	add	r3, sl
 801b520:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b524:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b528:	eba3 030a 	sub.w	r3, r3, sl
 801b52c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b530:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b534:	2b00      	cmp	r3, #0
 801b536:	d1d6      	bne.n	801b4e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801b538:	b05b      	add	sp, #364	; 0x16c
 801b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b53e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801b542:	ad44      	add	r5, sp, #272	; 0x110
 801b544:	f04f 0b00 	mov.w	fp, #0
 801b548:	7c23      	ldrb	r3, [r4, #16]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d067      	beq.n	801b61e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b54e:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801b552:	a810      	add	r0, sp, #64	; 0x40
 801b554:	458a      	cmp	sl, r1
 801b556:	bfd4      	ite	le
 801b558:	2100      	movle	r1, #0
 801b55a:	2101      	movgt	r1, #1
 801b55c:	f7ff fe47 	bl	801b1ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b560:	9b08      	ldr	r3, [sp, #32]
 801b562:	2b00      	cmp	r3, #0
 801b564:	d056      	beq.n	801b614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801b566:	7c23      	ldrb	r3, [r4, #16]
 801b568:	2258      	movs	r2, #88	; 0x58
 801b56a:	4639      	mov	r1, r7
 801b56c:	4628      	mov	r0, r5
 801b56e:	9309      	str	r3, [sp, #36]	; 0x24
 801b570:	f00c f94e 	bl	8027810 <memcpy>
 801b574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b576:	2b00      	cmp	r3, #0
 801b578:	d059      	beq.n	801b62e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801b57a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801b57e:	7922      	ldrb	r2, [r4, #4]
 801b580:	2a01      	cmp	r2, #1
 801b582:	d13d      	bne.n	801b600 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 801b584:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801b588:	1ac0      	subs	r0, r0, r3
 801b58a:	2302      	movs	r3, #2
 801b58c:	fb90 f0f3 	sdiv	r0, r0, r3
 801b590:	b200      	sxth	r0, r0
 801b592:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b596:	4418      	add	r0, r3
 801b598:	7c23      	ldrb	r3, [r4, #16]
 801b59a:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d03a      	beq.n	801b618 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801b5a2:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801b5a6:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801b5aa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b5ae:	9500      	str	r5, [sp, #0]
 801b5b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b5b2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b5b6:	e9cd b703 	strd	fp, r7, [sp, #12]
 801b5ba:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b5be:	464a      	mov	r2, r9
 801b5c0:	2100      	movs	r1, #0
 801b5c2:	f7ff fca3 	bl	801af0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b5c6:	2800      	cmp	r0, #0
 801b5c8:	d1b6      	bne.n	801b538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801b5ca:	b2b2      	uxth	r2, r6
 801b5cc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801b5d0:	4611      	mov	r1, r2
 801b5d2:	4413      	add	r3, r2
 801b5d4:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801b5d8:	b21b      	sxth	r3, r3
 801b5da:	1a52      	subs	r2, r2, r1
 801b5dc:	7c21      	ldrb	r1, [r4, #16]
 801b5de:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b5e2:	b212      	sxth	r2, r2
 801b5e4:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b5e8:	b109      	cbz	r1, 801b5ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801b5ea:	42b2      	cmp	r2, r6
 801b5ec:	dba4      	blt.n	801b538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801b5ee:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801b5f2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801b5f6:	440a      	add	r2, r1
 801b5f8:	b212      	sxth	r2, r2
 801b5fa:	4293      	cmp	r3, r2
 801b5fc:	dda4      	ble.n	801b548 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 801b5fe:	e79b      	b.n	801b538 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801b600:	2a02      	cmp	r2, #2
 801b602:	d105      	bne.n	801b610 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801b604:	7be2      	ldrb	r2, [r4, #15]
 801b606:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801b60a:	1a80      	subs	r0, r0, r2
 801b60c:	1ac0      	subs	r0, r0, r3
 801b60e:	e7bf      	b.n	801b590 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 801b610:	2000      	movs	r0, #0
 801b612:	e7be      	b.n	801b592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801b614:	7be0      	ldrb	r0, [r4, #15]
 801b616:	e7bc      	b.n	801b592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801b618:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b61c:	e7c3      	b.n	801b5a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 801b61e:	9b08      	ldr	r3, [sp, #32]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d0f7      	beq.n	801b614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801b624:	2258      	movs	r2, #88	; 0x58
 801b626:	4639      	mov	r1, r7
 801b628:	4628      	mov	r0, r5
 801b62a:	f00c f8f1 	bl	8027810 <memcpy>
 801b62e:	2300      	movs	r3, #0
 801b630:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b634:	6821      	ldr	r1, [r4, #0]
 801b636:	4628      	mov	r0, r5
 801b638:	f7ff fbfb 	bl	801ae32 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b63c:	b203      	sxth	r3, r0
 801b63e:	e79e      	b.n	801b57e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0801b640 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b640:	2b02      	cmp	r3, #2
 801b642:	b510      	push	{r4, lr}
 801b644:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b648:	d00b      	beq.n	801b662 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801b64a:	2b03      	cmp	r3, #3
 801b64c:	d00e      	beq.n	801b66c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801b64e:	2b01      	cmp	r3, #1
 801b650:	d001      	beq.n	801b656 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801b652:	1860      	adds	r0, r4, r1
 801b654:	bd10      	pop	{r4, pc}
 801b656:	8880      	ldrh	r0, [r0, #4]
 801b658:	4420      	add	r0, r4
 801b65a:	b200      	sxth	r0, r0
 801b65c:	1a80      	subs	r0, r0, r2
 801b65e:	3801      	subs	r0, #1
 801b660:	e7f8      	b.n	801b654 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801b662:	8880      	ldrh	r0, [r0, #4]
 801b664:	4420      	add	r0, r4
 801b666:	b200      	sxth	r0, r0
 801b668:	1a40      	subs	r0, r0, r1
 801b66a:	e7f8      	b.n	801b65e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b66c:	18a0      	adds	r0, r4, r2
 801b66e:	e7f1      	b.n	801b654 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801b670 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b670:	2b02      	cmp	r3, #2
 801b672:	b510      	push	{r4, lr}
 801b674:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801b678:	d006      	beq.n	801b688 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801b67a:	2b03      	cmp	r3, #3
 801b67c:	d00a      	beq.n	801b694 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b67e:	2b01      	cmp	r3, #1
 801b680:	bf14      	ite	ne
 801b682:	18a0      	addne	r0, r4, r2
 801b684:	1860      	addeq	r0, r4, r1
 801b686:	bd10      	pop	{r4, pc}
 801b688:	88c0      	ldrh	r0, [r0, #6]
 801b68a:	4420      	add	r0, r4
 801b68c:	b200      	sxth	r0, r0
 801b68e:	1a80      	subs	r0, r0, r2
 801b690:	3801      	subs	r0, #1
 801b692:	e7f8      	b.n	801b686 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801b694:	88c0      	ldrh	r0, [r0, #6]
 801b696:	4420      	add	r0, r4
 801b698:	b200      	sxth	r0, r0
 801b69a:	1a40      	subs	r0, r0, r1
 801b69c:	e7f8      	b.n	801b690 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801b6a0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b6a0:	4b01      	ldr	r3, [pc, #4]	; (801b6a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	601a      	str	r2, [r3, #0]
 801b6a6:	4770      	bx	lr
 801b6a8:	2000b444 	.word	0x2000b444

0801b6ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801b6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ae:	1e05      	subs	r5, r0, #0
 801b6b0:	f04f 0601 	mov.w	r6, #1
 801b6b4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b6b8:	bfba      	itte	lt
 801b6ba:	f04f 37ff 	movlt.w	r7, #4294967295
 801b6be:	426d      	neglt	r5, r5
 801b6c0:	2701      	movge	r7, #1
 801b6c2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801b6c6:	f1be 0f00 	cmp.w	lr, #0
 801b6ca:	bfbc      	itt	lt
 801b6cc:	f1ce 0e00 	rsblt	lr, lr, #0
 801b6d0:	427f      	neglt	r7, r7
 801b6d2:	2c00      	cmp	r4, #0
 801b6d4:	fa4e f001 	asr.w	r0, lr, r1
 801b6d8:	fa06 f101 	lsl.w	r1, r6, r1
 801b6dc:	bfbc      	itt	lt
 801b6de:	4264      	neglt	r4, r4
 801b6e0:	427f      	neglt	r7, r7
 801b6e2:	3901      	subs	r1, #1
 801b6e4:	ea01 010e 	and.w	r1, r1, lr
 801b6e8:	434d      	muls	r5, r1
 801b6ea:	f8dc 1000 	ldr.w	r1, [ip]
 801b6ee:	fb03 1300 	mla	r3, r3, r0, r1
 801b6f2:	fb95 f1f4 	sdiv	r1, r5, r4
 801b6f6:	fb04 5511 	mls	r5, r4, r1, r5
 801b6fa:	441d      	add	r5, r3
 801b6fc:	fb95 f3f4 	sdiv	r3, r5, r4
 801b700:	4419      	add	r1, r3
 801b702:	fb04 5413 	mls	r4, r4, r3, r5
 801b706:	fb02 1000 	mla	r0, r2, r0, r1
 801b70a:	f8cc 4000 	str.w	r4, [ip]
 801b70e:	4378      	muls	r0, r7
 801b710:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b714 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b718:	4c24      	ldr	r4, [pc, #144]	; (801b7ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801b71a:	b086      	sub	sp, #24
 801b71c:	4605      	mov	r5, r0
 801b71e:	6807      	ldr	r7, [r0, #0]
 801b720:	69a3      	ldr	r3, [r4, #24]
 801b722:	b92b      	cbnz	r3, 801b730 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801b724:	6840      	ldr	r0, [r0, #4]
 801b726:	e9c5 7000 	strd	r7, r0, [r5]
 801b72a:	b006      	add	sp, #24
 801b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b730:	f04f 0802 	mov.w	r8, #2
 801b734:	68a2      	ldr	r2, [r4, #8]
 801b736:	ae06      	add	r6, sp, #24
 801b738:	6820      	ldr	r0, [r4, #0]
 801b73a:	fb93 f1f8 	sdiv	r1, r3, r8
 801b73e:	440a      	add	r2, r1
 801b740:	69e1      	ldr	r1, [r4, #28]
 801b742:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b746:	9700      	str	r7, [sp, #0]
 801b748:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b74a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801b74e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b750:	f7ff ffac 	bl	801b6ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801b754:	69a3      	ldr	r3, [r4, #24]
 801b756:	4607      	mov	r7, r0
 801b758:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b75a:	9301      	str	r3, [sp, #4]
 801b75c:	686b      	ldr	r3, [r5, #4]
 801b75e:	6a21      	ldr	r1, [r4, #32]
 801b760:	9300      	str	r3, [sp, #0]
 801b762:	9602      	str	r6, [sp, #8]
 801b764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b766:	6860      	ldr	r0, [r4, #4]
 801b768:	f7ff ffa0 	bl	801b6ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801b76c:	69a2      	ldr	r2, [r4, #24]
 801b76e:	6963      	ldr	r3, [r4, #20]
 801b770:	4407      	add	r7, r0
 801b772:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b774:	68e0      	ldr	r0, [r4, #12]
 801b776:	fb92 f8f8 	sdiv	r8, r2, r8
 801b77a:	4443      	add	r3, r8
 801b77c:	9305      	str	r3, [sp, #20]
 801b77e:	682b      	ldr	r3, [r5, #0]
 801b780:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801b784:	9300      	str	r3, [sp, #0]
 801b786:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801b788:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b78a:	f7ff ff8f 	bl	801b6ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801b78e:	69a3      	ldr	r3, [r4, #24]
 801b790:	4680      	mov	r8, r0
 801b792:	9602      	str	r6, [sp, #8]
 801b794:	9301      	str	r3, [sp, #4]
 801b796:	686b      	ldr	r3, [r5, #4]
 801b798:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801b79a:	9300      	str	r3, [sp, #0]
 801b79c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b79e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801b7a0:	6920      	ldr	r0, [r4, #16]
 801b7a2:	f7ff ff83 	bl	801b6ac <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801b7a6:	4440      	add	r0, r8
 801b7a8:	e7bd      	b.n	801b726 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801b7aa:	bf00      	nop
 801b7ac:	2000b448 	.word	0x2000b448

0801b7b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b7b0:	4b07      	ldr	r3, [pc, #28]	; (801b7d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b7b2:	b510      	push	{r4, lr}
 801b7b4:	781b      	ldrb	r3, [r3, #0]
 801b7b6:	2b01      	cmp	r3, #1
 801b7b8:	d108      	bne.n	801b7cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b7ba:	4b06      	ldr	r3, [pc, #24]	; (801b7d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b7bc:	880c      	ldrh	r4, [r1, #0]
 801b7be:	881b      	ldrh	r3, [r3, #0]
 801b7c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b7c4:	3b01      	subs	r3, #1
 801b7c6:	1b1b      	subs	r3, r3, r4
 801b7c8:	8003      	strh	r3, [r0, #0]
 801b7ca:	800a      	strh	r2, [r1, #0]
 801b7cc:	bd10      	pop	{r4, pc}
 801b7ce:	bf00      	nop
 801b7d0:	2000b414 	.word	0x2000b414
 801b7d4:	2000b418 	.word	0x2000b418

0801b7d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b7d8:	4b0a      	ldr	r3, [pc, #40]	; (801b804 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b7da:	b510      	push	{r4, lr}
 801b7dc:	781b      	ldrb	r3, [r3, #0]
 801b7de:	2b01      	cmp	r3, #1
 801b7e0:	d10e      	bne.n	801b800 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b7e2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b7e6:	8843      	ldrh	r3, [r0, #2]
 801b7e8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b7ec:	18ca      	adds	r2, r1, r3
 801b7ee:	4b06      	ldr	r3, [pc, #24]	; (801b808 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b7f0:	8044      	strh	r4, [r0, #2]
 801b7f2:	881b      	ldrh	r3, [r3, #0]
 801b7f4:	1a9b      	subs	r3, r3, r2
 801b7f6:	8003      	strh	r3, [r0, #0]
 801b7f8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b7fc:	8081      	strh	r1, [r0, #4]
 801b7fe:	80c3      	strh	r3, [r0, #6]
 801b800:	bd10      	pop	{r4, pc}
 801b802:	bf00      	nop
 801b804:	2000b414 	.word	0x2000b414
 801b808:	2000b410 	.word	0x2000b410

0801b80c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b80c:	4b07      	ldr	r3, [pc, #28]	; (801b82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b80e:	b510      	push	{r4, lr}
 801b810:	781b      	ldrb	r3, [r3, #0]
 801b812:	2b01      	cmp	r3, #1
 801b814:	d108      	bne.n	801b828 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b816:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b81a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b81e:	8003      	strh	r3, [r0, #0]
 801b820:	8893      	ldrh	r3, [r2, #4]
 801b822:	3b01      	subs	r3, #1
 801b824:	1b1b      	subs	r3, r3, r4
 801b826:	800b      	strh	r3, [r1, #0]
 801b828:	bd10      	pop	{r4, pc}
 801b82a:	bf00      	nop
 801b82c:	2000b414 	.word	0x2000b414

0801b830 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b830:	4b08      	ldr	r3, [pc, #32]	; (801b854 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b832:	b513      	push	{r0, r1, r4, lr}
 801b834:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b838:	2400      	movs	r4, #0
 801b83a:	4b07      	ldr	r3, [pc, #28]	; (801b858 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801b83c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b840:	466a      	mov	r2, sp
 801b842:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b846:	9400      	str	r4, [sp, #0]
 801b848:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b84c:	f7ff ffde 	bl	801b80c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b850:	b002      	add	sp, #8
 801b852:	bd10      	pop	{r4, pc}
 801b854:	2000b410 	.word	0x2000b410
 801b858:	2000b412 	.word	0x2000b412

0801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b85c:	4b0a      	ldr	r3, [pc, #40]	; (801b888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b85e:	460a      	mov	r2, r1
 801b860:	b510      	push	{r4, lr}
 801b862:	781b      	ldrb	r3, [r3, #0]
 801b864:	2b01      	cmp	r3, #1
 801b866:	d10d      	bne.n	801b884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b868:	8881      	ldrh	r1, [r0, #4]
 801b86a:	8803      	ldrh	r3, [r0, #0]
 801b86c:	440b      	add	r3, r1
 801b86e:	4601      	mov	r1, r0
 801b870:	3b01      	subs	r3, #1
 801b872:	f821 3b02 	strh.w	r3, [r1], #2
 801b876:	f7ff ffc9 	bl	801b80c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b87a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b87e:	88c2      	ldrh	r2, [r0, #6]
 801b880:	80c3      	strh	r3, [r0, #6]
 801b882:	8082      	strh	r2, [r0, #4]
 801b884:	bd10      	pop	{r4, pc}
 801b886:	bf00      	nop
 801b888:	2000b414 	.word	0x2000b414

0801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b88c:	4b09      	ldr	r3, [pc, #36]	; (801b8b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b88e:	b507      	push	{r0, r1, r2, lr}
 801b890:	2100      	movs	r1, #0
 801b892:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b896:	4b08      	ldr	r3, [pc, #32]	; (801b8b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801b898:	9100      	str	r1, [sp, #0]
 801b89a:	4669      	mov	r1, sp
 801b89c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b8a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b8a8:	f7ff ffd8 	bl	801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b8ac:	b003      	add	sp, #12
 801b8ae:	f85d fb04 	ldr.w	pc, [sp], #4
 801b8b2:	bf00      	nop
 801b8b4:	2000b410 	.word	0x2000b410
 801b8b8:	2000b412 	.word	0x2000b412

0801b8bc <_ZN8touchgfx11Application13requestRedrawEv>:
 801b8bc:	4b06      	ldr	r3, [pc, #24]	; (801b8d8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b8be:	2100      	movs	r1, #0
 801b8c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b8c4:	4b05      	ldr	r3, [pc, #20]	; (801b8dc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b8c6:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801b8ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8ce:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801b8d2:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801b8d6:	4770      	bx	lr
 801b8d8:	2000b410 	.word	0x2000b410
 801b8dc:	2000b412 	.word	0x2000b412

0801b8e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b8e0:	4b03      	ldr	r3, [pc, #12]	; (801b8f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b8e2:	6818      	ldr	r0, [r3, #0]
 801b8e4:	b110      	cbz	r0, 801b8ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b8e6:	6803      	ldr	r3, [r0, #0]
 801b8e8:	699b      	ldr	r3, [r3, #24]
 801b8ea:	4718      	bx	r3
 801b8ec:	4770      	bx	lr
 801b8ee:	bf00      	nop
 801b8f0:	2000b498 	.word	0x2000b498

0801b8f4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b8f4:	4770      	bx	lr
	...

0801b8f8 <_ZN8touchgfx11Application4drawEv>:
 801b8f8:	4b09      	ldr	r3, [pc, #36]	; (801b920 <_ZN8touchgfx11Application4drawEv+0x28>)
 801b8fa:	b507      	push	{r0, r1, r2, lr}
 801b8fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b900:	2100      	movs	r1, #0
 801b902:	4b08      	ldr	r3, [pc, #32]	; (801b924 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b904:	9100      	str	r1, [sp, #0]
 801b906:	4669      	mov	r1, sp
 801b908:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b90c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b910:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b914:	6803      	ldr	r3, [r0, #0]
 801b916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b918:	4798      	blx	r3
 801b91a:	b003      	add	sp, #12
 801b91c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b920:	2000b410 	.word	0x2000b410
 801b924:	2000b412 	.word	0x2000b412

0801b928 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b928:	4b03      	ldr	r3, [pc, #12]	; (801b938 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b92a:	6818      	ldr	r0, [r3, #0]
 801b92c:	b110      	cbz	r0, 801b934 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b92e:	6803      	ldr	r3, [r0, #0]
 801b930:	69db      	ldr	r3, [r3, #28]
 801b932:	4718      	bx	r3
 801b934:	4770      	bx	lr
 801b936:	bf00      	nop
 801b938:	2000b498 	.word	0x2000b498

0801b93c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b93c:	4b03      	ldr	r3, [pc, #12]	; (801b94c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b93e:	6818      	ldr	r0, [r3, #0]
 801b940:	b110      	cbz	r0, 801b948 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b942:	6803      	ldr	r3, [r0, #0]
 801b944:	6a1b      	ldr	r3, [r3, #32]
 801b946:	4718      	bx	r3
 801b948:	4770      	bx	lr
 801b94a:	bf00      	nop
 801b94c:	2000b498 	.word	0x2000b498

0801b950 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b950:	4b03      	ldr	r3, [pc, #12]	; (801b960 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b952:	6818      	ldr	r0, [r3, #0]
 801b954:	b110      	cbz	r0, 801b95c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b956:	6803      	ldr	r3, [r0, #0]
 801b958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b95a:	4718      	bx	r3
 801b95c:	4770      	bx	lr
 801b95e:	bf00      	nop
 801b960:	2000b498 	.word	0x2000b498

0801b964 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b964:	b570      	push	{r4, r5, r6, lr}
 801b966:	4d34      	ldr	r5, [pc, #208]	; (801ba38 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801b968:	4604      	mov	r4, r0
 801b96a:	6828      	ldr	r0, [r5, #0]
 801b96c:	b140      	cbz	r0, 801b980 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b96e:	7a03      	ldrb	r3, [r0, #8]
 801b970:	b933      	cbnz	r3, 801b980 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b972:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b976:	6803      	ldr	r3, [r0, #0]
 801b978:	689b      	ldr	r3, [r3, #8]
 801b97a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b97e:	4718      	bx	r3
 801b980:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801b984:	b97b      	cbnz	r3, 801b9a6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b986:	b170      	cbz	r0, 801b9a6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b988:	7a03      	ldrb	r3, [r0, #8]
 801b98a:	b163      	cbz	r3, 801b9a6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b98c:	4b2b      	ldr	r3, [pc, #172]	; (801ba3c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801b98e:	6818      	ldr	r0, [r3, #0]
 801b990:	b110      	cbz	r0, 801b998 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b992:	6803      	ldr	r3, [r0, #0]
 801b994:	691b      	ldr	r3, [r3, #16]
 801b996:	4798      	blx	r3
 801b998:	6828      	ldr	r0, [r5, #0]
 801b99a:	6803      	ldr	r3, [r0, #0]
 801b99c:	68db      	ldr	r3, [r3, #12]
 801b99e:	4798      	blx	r3
 801b9a0:	2301      	movs	r3, #1
 801b9a2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b9a6:	2500      	movs	r5, #0
 801b9a8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801b9ac:	42a8      	cmp	r0, r5
 801b9ae:	dd0c      	ble.n	801b9ca <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b9b0:	1963      	adds	r3, r4, r5
 801b9b2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801b9b6:	b132      	cbz	r2, 801b9c6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b9b8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b9bc:	4413      	add	r3, r2
 801b9be:	6858      	ldr	r0, [r3, #4]
 801b9c0:	6803      	ldr	r3, [r0, #0]
 801b9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9c4:	4798      	blx	r3
 801b9c6:	3501      	adds	r5, #1
 801b9c8:	e7ee      	b.n	801b9a8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b9ca:	2300      	movs	r3, #0
 801b9cc:	461a      	mov	r2, r3
 801b9ce:	4298      	cmp	r0, r3
 801b9d0:	d114      	bne.n	801b9fc <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801b9d2:	1d25      	adds	r5, r4, #4
 801b9d4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801b9d8:	1e48      	subs	r0, r1, #1
 801b9da:	b280      	uxth	r0, r0
 801b9dc:	4291      	cmp	r1, r2
 801b9de:	dd24      	ble.n	801ba2a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801b9e0:	4288      	cmp	r0, r1
 801b9e2:	d2fb      	bcs.n	801b9dc <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801b9e4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801b9e8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801b9ec:	3304      	adds	r3, #4
 801b9ee:	428b      	cmp	r3, r1
 801b9f0:	d018      	beq.n	801ba24 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801b9f2:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801b9f6:	f843 6c04 	str.w	r6, [r3, #-4]
 801b9fa:	e7f8      	b.n	801b9ee <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801b9fc:	18e1      	adds	r1, r4, r3
 801b9fe:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801ba02:	b16d      	cbz	r5, 801ba20 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801ba04:	429a      	cmp	r2, r3
 801ba06:	d00a      	beq.n	801ba1e <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801ba08:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801ba0c:	4431      	add	r1, r6
 801ba0e:	684e      	ldr	r6, [r1, #4]
 801ba10:	b291      	uxth	r1, r2
 801ba12:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ba16:	604e      	str	r6, [r1, #4]
 801ba18:	18a1      	adds	r1, r4, r2
 801ba1a:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801ba1e:	3201      	adds	r2, #1
 801ba20:	3301      	adds	r3, #1
 801ba22:	e7d4      	b.n	801b9ce <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801ba24:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801ba28:	e7d4      	b.n	801b9d4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801ba2a:	4b04      	ldr	r3, [pc, #16]	; (801ba3c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801ba2c:	6818      	ldr	r0, [r3, #0]
 801ba2e:	b110      	cbz	r0, 801ba36 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801ba30:	6803      	ldr	r3, [r0, #0]
 801ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba34:	e7a1      	b.n	801b97a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801ba36:	bd70      	pop	{r4, r5, r6, pc}
 801ba38:	2000b49c 	.word	0x2000b49c
 801ba3c:	2000b498 	.word	0x2000b498

0801ba40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ba40:	b570      	push	{r4, r5, r6, lr}
 801ba42:	4606      	mov	r6, r0
 801ba44:	460c      	mov	r4, r1
 801ba46:	b929      	cbnz	r1, 801ba54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801ba48:	4b0c      	ldr	r3, [pc, #48]	; (801ba7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801ba4a:	2165      	movs	r1, #101	; 0x65
 801ba4c:	4a0c      	ldr	r2, [pc, #48]	; (801ba80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801ba4e:	480d      	ldr	r0, [pc, #52]	; (801ba84 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801ba50:	f00b fe60 	bl	8027714 <__assert_func>
 801ba54:	2300      	movs	r3, #0
 801ba56:	4d0c      	ldr	r5, [pc, #48]	; (801ba88 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801ba58:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ba5c:	6828      	ldr	r0, [r5, #0]
 801ba5e:	b110      	cbz	r0, 801ba66 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801ba60:	6803      	ldr	r3, [r0, #0]
 801ba62:	695b      	ldr	r3, [r3, #20]
 801ba64:	4798      	blx	r3
 801ba66:	602c      	str	r4, [r5, #0]
 801ba68:	4620      	mov	r0, r4
 801ba6a:	6823      	ldr	r3, [r4, #0]
 801ba6c:	68db      	ldr	r3, [r3, #12]
 801ba6e:	4798      	blx	r3
 801ba70:	6833      	ldr	r3, [r6, #0]
 801ba72:	4630      	mov	r0, r6
 801ba74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba7a:	4718      	bx	r3
 801ba7c:	0802c044 	.word	0x0802c044
 801ba80:	0802c114 	.word	0x0802c114
 801ba84:	0802c04e 	.word	0x0802c04e
 801ba88:	2000b498 	.word	0x2000b498

0801ba8c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801ba8c:	b510      	push	{r4, lr}
 801ba8e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801ba92:	888a      	ldrh	r2, [r1, #4]
 801ba94:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ba98:	4422      	add	r2, r4
 801ba9a:	b212      	sxth	r2, r2
 801ba9c:	4293      	cmp	r3, r2
 801ba9e:	da15      	bge.n	801bacc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801baa0:	8882      	ldrh	r2, [r0, #4]
 801baa2:	4413      	add	r3, r2
 801baa4:	b21b      	sxth	r3, r3
 801baa6:	429c      	cmp	r4, r3
 801baa8:	da10      	bge.n	801bacc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801baaa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801baae:	88c9      	ldrh	r1, [r1, #6]
 801bab0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bab4:	4419      	add	r1, r3
 801bab6:	b209      	sxth	r1, r1
 801bab8:	428a      	cmp	r2, r1
 801baba:	da07      	bge.n	801bacc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801babc:	88c0      	ldrh	r0, [r0, #6]
 801babe:	4410      	add	r0, r2
 801bac0:	b200      	sxth	r0, r0
 801bac2:	4283      	cmp	r3, r0
 801bac4:	bfac      	ite	ge
 801bac6:	2000      	movge	r0, #0
 801bac8:	2001      	movlt	r0, #1
 801baca:	bd10      	pop	{r4, pc}
 801bacc:	2000      	movs	r0, #0
 801bace:	e7fc      	b.n	801baca <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801bad0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bad0:	b570      	push	{r4, r5, r6, lr}
 801bad2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bad6:	f9b0 5000 	ldrsh.w	r5, [r0]
 801bada:	42ac      	cmp	r4, r5
 801badc:	db18      	blt.n	801bb10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bade:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801bae2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bae6:	429a      	cmp	r2, r3
 801bae8:	db12      	blt.n	801bb10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801baea:	8886      	ldrh	r6, [r0, #4]
 801baec:	4435      	add	r5, r6
 801baee:	888e      	ldrh	r6, [r1, #4]
 801baf0:	4434      	add	r4, r6
 801baf2:	b22d      	sxth	r5, r5
 801baf4:	b224      	sxth	r4, r4
 801baf6:	42a5      	cmp	r5, r4
 801baf8:	db0a      	blt.n	801bb10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bafa:	88c0      	ldrh	r0, [r0, #6]
 801bafc:	4418      	add	r0, r3
 801bafe:	88cb      	ldrh	r3, [r1, #6]
 801bb00:	441a      	add	r2, r3
 801bb02:	b200      	sxth	r0, r0
 801bb04:	b212      	sxth	r2, r2
 801bb06:	4290      	cmp	r0, r2
 801bb08:	bfb4      	ite	lt
 801bb0a:	2000      	movlt	r0, #0
 801bb0c:	2001      	movge	r0, #1
 801bb0e:	bd70      	pop	{r4, r5, r6, pc}
 801bb10:	2000      	movs	r0, #0
 801bb12:	e7fc      	b.n	801bb0e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801bb14 <_ZN8touchgfx11Application11getInstanceEv>:
 801bb14:	4b01      	ldr	r3, [pc, #4]	; (801bb1c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801bb16:	6818      	ldr	r0, [r3, #0]
 801bb18:	4770      	bx	lr
 801bb1a:	bf00      	nop
 801bb1c:	2000b4a8 	.word	0x2000b4a8

0801bb20 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801bb20:	b570      	push	{r4, r5, r6, lr}
 801bb22:	2300      	movs	r3, #0
 801bb24:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801bb28:	1d04      	adds	r4, r0, #4
 801bb2a:	b29a      	uxth	r2, r3
 801bb2c:	4296      	cmp	r6, r2
 801bb2e:	d90a      	bls.n	801bb46 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801bb30:	f854 2b04 	ldr.w	r2, [r4], #4
 801bb34:	428a      	cmp	r2, r1
 801bb36:	d107      	bne.n	801bb48 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801bb38:	18c5      	adds	r5, r0, r3
 801bb3a:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801bb3e:	b11a      	cbz	r2, 801bb48 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801bb40:	3a01      	subs	r2, #1
 801bb42:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801bb46:	bd70      	pop	{r4, r5, r6, pc}
 801bb48:	3301      	adds	r3, #1
 801bb4a:	e7ee      	b.n	801bb2a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801bb4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801bb52:	30a8      	adds	r0, #168	; 0xa8
 801bb54:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bb58:	f802 3b01 	strb.w	r3, [r2], #1
 801bb5c:	4282      	cmp	r2, r0
 801bb5e:	d1fb      	bne.n	801bb58 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801bb60:	4770      	bx	lr

0801bb62 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801bb62:	4603      	mov	r3, r0
 801bb64:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801bb68:	2200      	movs	r2, #0
 801bb6a:	801a      	strh	r2, [r3, #0]
 801bb6c:	3308      	adds	r3, #8
 801bb6e:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bb72:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bb76:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bb7a:	428b      	cmp	r3, r1
 801bb7c:	d1f5      	bne.n	801bb6a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bb7e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801bb82:	4770      	bx	lr

0801bb84 <_ZN8touchgfx11ApplicationC1Ev>:
 801bb84:	b570      	push	{r4, r5, r6, lr}
 801bb86:	4b1a      	ldr	r3, [pc, #104]	; (801bbf0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801bb88:	2500      	movs	r5, #0
 801bb8a:	4604      	mov	r4, r0
 801bb8c:	30a8      	adds	r0, #168	; 0xa8
 801bb8e:	f840 3ca8 	str.w	r3, [r0, #-168]
 801bb92:	f820 5c24 	strh.w	r5, [r0, #-36]
 801bb96:	f7ff ffe4 	bl	801bb62 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bb9a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801bb9e:	f7ff ffe0 	bl	801bb62 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bba2:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801bba6:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801bbaa:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801bbae:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801bbb2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801bbb6:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801bbba:	490e      	ldr	r1, [pc, #56]	; (801bbf4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801bbbc:	480e      	ldr	r0, [pc, #56]	; (801bbf8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801bbbe:	f00a f885 	bl	8025ccc <CRC_Lock>
 801bbc2:	4e0e      	ldr	r6, [pc, #56]	; (801bbfc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801bbc4:	4b0e      	ldr	r3, [pc, #56]	; (801bc00 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801bbc6:	b158      	cbz	r0, 801bbe0 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801bbc8:	801d      	strh	r5, [r3, #0]
 801bbca:	2300      	movs	r3, #0
 801bbcc:	4a0d      	ldr	r2, [pc, #52]	; (801bc04 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801bbce:	4620      	mov	r0, r4
 801bbd0:	6013      	str	r3, [r2, #0]
 801bbd2:	4a0d      	ldr	r2, [pc, #52]	; (801bc08 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801bbd4:	6033      	str	r3, [r6, #0]
 801bbd6:	6013      	str	r3, [r2, #0]
 801bbd8:	f7ff ffb8 	bl	801bb4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801bbdc:	4620      	mov	r0, r4
 801bbde:	bd70      	pop	{r4, r5, r6, pc}
 801bbe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bbe4:	2002      	movs	r0, #2
 801bbe6:	801a      	strh	r2, [r3, #0]
 801bbe8:	6030      	str	r0, [r6, #0]
 801bbea:	f000 ff83 	bl	801caf4 <_ZN8touchgfx6Screen4drawEv>
 801bbee:	e7ec      	b.n	801bbca <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801bbf0:	0802c0d8 	.word	0x0802c0d8
 801bbf4:	b5e8b5cd 	.word	0xb5e8b5cd
 801bbf8:	f407a5c2 	.word	0xf407a5c2
 801bbfc:	2000b498 	.word	0x2000b498
 801bc00:	20000040 	.word	0x20000040
 801bc04:	2000b4a8 	.word	0x2000b4a8
 801bc08:	2000b49c 	.word	0x2000b49c

0801bc0c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	8003      	strh	r3, [r0, #0]
 801bc10:	8043      	strh	r3, [r0, #2]
 801bc12:	8083      	strh	r3, [r0, #4]
 801bc14:	80c3      	strh	r3, [r0, #6]
 801bc16:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801bc1a:	4293      	cmp	r3, r2
 801bc1c:	b530      	push	{r4, r5, lr}
 801bc1e:	d912      	bls.n	801bc46 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801bc20:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801bc24:	3b01      	subs	r3, #1
 801bc26:	6825      	ldr	r5, [r4, #0]
 801bc28:	b29b      	uxth	r3, r3
 801bc2a:	6005      	str	r5, [r0, #0]
 801bc2c:	4293      	cmp	r3, r2
 801bc2e:	6865      	ldr	r5, [r4, #4]
 801bc30:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801bc34:	6045      	str	r5, [r0, #4]
 801bc36:	d906      	bls.n	801bc46 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801bc38:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801bc3c:	681d      	ldr	r5, [r3, #0]
 801bc3e:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801bc42:	685d      	ldr	r5, [r3, #4]
 801bc44:	6065      	str	r5, [r4, #4]
 801bc46:	bd30      	pop	{r4, r5, pc}

0801bc48 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801bc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bc4a:	466b      	mov	r3, sp
 801bc4c:	4604      	mov	r4, r0
 801bc4e:	e883 0006 	stmia.w	r3, {r1, r2}
 801bc52:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801bc56:	2a07      	cmp	r2, #7
 801bc58:	d906      	bls.n	801bc68 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801bc5a:	4b09      	ldr	r3, [pc, #36]	; (801bc80 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801bc5c:	f240 118f 	movw	r1, #399	; 0x18f
 801bc60:	4a08      	ldr	r2, [pc, #32]	; (801bc84 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801bc62:	4809      	ldr	r0, [pc, #36]	; (801bc88 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801bc64:	f00b fd56 	bl	8027714 <__assert_func>
 801bc68:	1c51      	adds	r1, r2, #1
 801bc6a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bc6e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801bc72:	cb03      	ldmia	r3!, {r0, r1}
 801bc74:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801bc78:	6069      	str	r1, [r5, #4]
 801bc7a:	b003      	add	sp, #12
 801bc7c:	bd30      	pop	{r4, r5, pc}
 801bc7e:	bf00      	nop
 801bc80:	0802c078 	.word	0x0802c078
 801bc84:	0802c158 	.word	0x0802c158
 801bc88:	0802c0a7 	.word	0x0802c0a7

0801bc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801bc8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc90:	b089      	sub	sp, #36	; 0x24
 801bc92:	4606      	mov	r6, r0
 801bc94:	466c      	mov	r4, sp
 801bc96:	4620      	mov	r0, r4
 801bc98:	e884 0006 	stmia.w	r4, {r1, r2}
 801bc9c:	f7fc f8b5 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bca0:	bbb0      	cbnz	r0, 801bd10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801bca2:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801bca6:	b1fd      	cbz	r5, 801bce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801bca8:	3d01      	subs	r5, #1
 801bcaa:	af04      	add	r7, sp, #16
 801bcac:	f04f 090a 	mov.w	r9, #10
 801bcb0:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801bcb4:	ab02      	add	r3, sp, #8
 801bcb6:	fa1f f885 	uxth.w	r8, r5
 801bcba:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801bcbe:	6851      	ldr	r1, [r2, #4]
 801bcc0:	c303      	stmia	r3!, {r0, r1}
 801bcc2:	4621      	mov	r1, r4
 801bcc4:	a802      	add	r0, sp, #8
 801bcc6:	f7ff ff03 	bl	801bad0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801bcca:	bb08      	cbnz	r0, 801bd10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801bccc:	a902      	add	r1, sp, #8
 801bcce:	4620      	mov	r0, r4
 801bcd0:	f7ff fefe 	bl	801bad0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801bcd4:	b1f8      	cbz	r0, 801bd16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801bcd6:	4642      	mov	r2, r8
 801bcd8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801bcdc:	a806      	add	r0, sp, #24
 801bcde:	f7ff ff95 	bl	801bc0c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bce2:	f115 35ff 	adds.w	r5, r5, #4294967295
 801bce6:	d2e3      	bcs.n	801bcb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801bce8:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801bcec:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801bcf0:	2b08      	cmp	r3, #8
 801bcf2:	d108      	bne.n	801bd06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801bcf4:	4629      	mov	r1, r5
 801bcf6:	a806      	add	r0, sp, #24
 801bcf8:	2207      	movs	r2, #7
 801bcfa:	f7ff ff87 	bl	801bc0c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bcfe:	a906      	add	r1, sp, #24
 801bd00:	4620      	mov	r0, r4
 801bd02:	f7fd fefb 	bl	8019afc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bd06:	4628      	mov	r0, r5
 801bd08:	e894 0006 	ldmia.w	r4, {r1, r2}
 801bd0c:	f7ff ff9c 	bl	801bc48 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bd10:	b009      	add	sp, #36	; 0x24
 801bd12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd16:	4621      	mov	r1, r4
 801bd18:	a802      	add	r0, sp, #8
 801bd1a:	f7ff feb7 	bl	801ba8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bd1e:	b150      	cbz	r0, 801bd36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801bd20:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801bd24:	a806      	add	r0, sp, #24
 801bd26:	4642      	mov	r2, r8
 801bd28:	f7ff ff70 	bl	801bc0c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bd2c:	a902      	add	r1, sp, #8
 801bd2e:	4620      	mov	r0, r4
 801bd30:	f7fd fee4 	bl	8019afc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bd34:	e7d5      	b.n	801bce2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801bd36:	e894 0003 	ldmia.w	r4, {r0, r1}
 801bd3a:	e887 0003 	stmia.w	r7, {r0, r1}
 801bd3e:	a902      	add	r1, sp, #8
 801bd40:	4638      	mov	r0, r7
 801bd42:	f7fd fedb 	bl	8019afc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bd46:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801bd4a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801bd4e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801bd52:	fb13 f302 	smulbb	r3, r3, r2
 801bd56:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801bd5a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801bd5e:	fb11 f102 	smulbb	r1, r1, r2
 801bd62:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801bd66:	fb09 f303 	mul.w	r3, r9, r3
 801bd6a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801bd6e:	220b      	movs	r2, #11
 801bd70:	434a      	muls	r2, r1
 801bd72:	4293      	cmp	r3, r2
 801bd74:	dab5      	bge.n	801bce2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801bd76:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801bd7a:	a806      	add	r0, sp, #24
 801bd7c:	4642      	mov	r2, r8
 801bd7e:	f7ff ff45 	bl	801bc0c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bd82:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bd86:	e884 0003 	stmia.w	r4, {r0, r1}
 801bd8a:	e7aa      	b.n	801bce2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801bd8c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801bd8c:	4b1d      	ldr	r3, [pc, #116]	; (801be04 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801bd8e:	b530      	push	{r4, r5, lr}
 801bd90:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bd94:	b085      	sub	sp, #20
 801bd96:	4b1c      	ldr	r3, [pc, #112]	; (801be08 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801bd98:	460c      	mov	r4, r1
 801bd9a:	2100      	movs	r1, #0
 801bd9c:	4605      	mov	r5, r0
 801bd9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bda2:	6820      	ldr	r0, [r4, #0]
 801bda4:	9100      	str	r1, [sp, #0]
 801bda6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bdaa:	ab02      	add	r3, sp, #8
 801bdac:	6861      	ldr	r1, [r4, #4]
 801bdae:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bdb2:	c303      	stmia	r3!, {r0, r1}
 801bdb4:	4669      	mov	r1, sp
 801bdb6:	a802      	add	r0, sp, #8
 801bdb8:	f7fb ffe4 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801bdbc:	ab02      	add	r3, sp, #8
 801bdbe:	cb03      	ldmia	r3!, {r0, r1}
 801bdc0:	4b12      	ldr	r3, [pc, #72]	; (801be0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801bdc2:	6020      	str	r0, [r4, #0]
 801bdc4:	6818      	ldr	r0, [r3, #0]
 801bdc6:	6061      	str	r1, [r4, #4]
 801bdc8:	b138      	cbz	r0, 801bdda <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801bdca:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801bdce:	b133      	cbz	r3, 801bdde <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801bdd0:	6821      	ldr	r1, [r4, #0]
 801bdd2:	4628      	mov	r0, r5
 801bdd4:	6862      	ldr	r2, [r4, #4]
 801bdd6:	f7ff ff59 	bl	801bc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bdda:	b005      	add	sp, #20
 801bddc:	bd30      	pop	{r4, r5, pc}
 801bdde:	6803      	ldr	r3, [r0, #0]
 801bde0:	4621      	mov	r1, r4
 801bde2:	689b      	ldr	r3, [r3, #8]
 801bde4:	4798      	blx	r3
 801bde6:	4b0a      	ldr	r3, [pc, #40]	; (801be10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801bde8:	6818      	ldr	r0, [r3, #0]
 801bdea:	b118      	cbz	r0, 801bdf4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801bdec:	6803      	ldr	r3, [r0, #0]
 801bdee:	4621      	mov	r1, r4
 801bdf0:	689b      	ldr	r3, [r3, #8]
 801bdf2:	4798      	blx	r3
 801bdf4:	4b07      	ldr	r3, [pc, #28]	; (801be14 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801bdf6:	4621      	mov	r1, r4
 801bdf8:	6818      	ldr	r0, [r3, #0]
 801bdfa:	6803      	ldr	r3, [r0, #0]
 801bdfc:	695b      	ldr	r3, [r3, #20]
 801bdfe:	4798      	blx	r3
 801be00:	e7eb      	b.n	801bdda <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801be02:	bf00      	nop
 801be04:	2000b410 	.word	0x2000b410
 801be08:	2000b412 	.word	0x2000b412
 801be0c:	2000b498 	.word	0x2000b498
 801be10:	2000b494 	.word	0x2000b494
 801be14:	2000b41c 	.word	0x2000b41c

0801be18 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be1c:	4604      	mov	r4, r0
 801be1e:	b09b      	sub	sp, #108	; 0x6c
 801be20:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801be24:	b129      	cbz	r1, 801be32 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801be26:	2300      	movs	r3, #0
 801be28:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801be2c:	b01b      	add	sp, #108	; 0x6c
 801be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be32:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801be36:	4630      	mov	r0, r6
 801be38:	f7fb ffe7 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801be3c:	4605      	mov	r5, r0
 801be3e:	b940      	cbnz	r0, 801be52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801be40:	4620      	mov	r0, r4
 801be42:	e896 0006 	ldmia.w	r6, {r1, r2}
 801be46:	f7ff ff21 	bl	801bc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801be4a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801be4e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801be52:	4baf      	ldr	r3, [pc, #700]	; (801c110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	b33b      	cbz	r3, 801bea8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801be58:	4dae      	ldr	r5, [pc, #696]	; (801c114 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 801be5a:	4628      	mov	r0, r5
 801be5c:	f7fb ffd5 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801be60:	4606      	mov	r6, r0
 801be62:	bb08      	cbnz	r0, 801bea8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801be64:	4628      	mov	r0, r5
 801be66:	f7ff fcb7 	bl	801b7d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801be6a:	6829      	ldr	r1, [r5, #0]
 801be6c:	686a      	ldr	r2, [r5, #4]
 801be6e:	4620      	mov	r0, r4
 801be70:	f7ff ff0c 	bl	801bc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801be74:	802e      	strh	r6, [r5, #0]
 801be76:	806e      	strh	r6, [r5, #2]
 801be78:	80ae      	strh	r6, [r5, #4]
 801be7a:	80ee      	strh	r6, [r5, #6]
 801be7c:	4fa6      	ldr	r7, [pc, #664]	; (801c118 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 801be7e:	a809      	add	r0, sp, #36	; 0x24
 801be80:	f7ff fe6f 	bl	801bb62 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801be84:	883d      	ldrh	r5, [r7, #0]
 801be86:	462e      	mov	r6, r5
 801be88:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801be8c:	42b3      	cmp	r3, r6
 801be8e:	d910      	bls.n	801beb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801be90:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801be94:	3601      	adds	r6, #1
 801be96:	a809      	add	r0, sp, #36	; 0x24
 801be98:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801be9c:	b2b6      	uxth	r6, r6
 801be9e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801bea2:	f7ff fed1 	bl	801bc48 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bea6:	e7ef      	b.n	801be88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801bea8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801beac:	2b00      	cmp	r3, #0
 801beae:	d1e5      	bne.n	801be7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801beb0:	e7bc      	b.n	801be2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801beb2:	462e      	mov	r6, r5
 801beb4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801beb8:	42b3      	cmp	r3, r6
 801beba:	d90b      	bls.n	801bed4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801bebc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bec0:	3601      	adds	r6, #1
 801bec2:	4620      	mov	r0, r4
 801bec4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801bec8:	b2b6      	uxth	r6, r6
 801beca:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801bece:	f7ff fedd 	bl	801bc8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bed2:	e7ef      	b.n	801beb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801bed4:	4e91      	ldr	r6, [pc, #580]	; (801c11c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 801bed6:	6833      	ldr	r3, [r6, #0]
 801bed8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801bedc:	2b01      	cmp	r3, #1
 801bede:	f040 8092 	bne.w	801c006 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 801bee2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801bee6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801beea:	f04f 0900 	mov.w	r9, #0
 801beee:	33aa      	adds	r3, #170	; 0xaa
 801bef0:	42a8      	cmp	r0, r5
 801bef2:	f103 0308 	add.w	r3, r3, #8
 801bef6:	dd0a      	ble.n	801bf0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 801bef8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801befc:	3501      	adds	r5, #1
 801befe:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801bf02:	440a      	add	r2, r1
 801bf04:	b212      	sxth	r2, r2
 801bf06:	4591      	cmp	r9, r2
 801bf08:	bfb8      	it	lt
 801bf0a:	4691      	movlt	r9, r2
 801bf0c:	e7f0      	b.n	801bef0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 801bf0e:	4b84      	ldr	r3, [pc, #528]	; (801c120 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 801bf10:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801c128 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 801bf14:	881d      	ldrh	r5, [r3, #0]
 801bf16:	2300      	movs	r3, #0
 801bf18:	2d0f      	cmp	r5, #15
 801bf1a:	bf8c      	ite	hi
 801bf1c:	08ed      	lsrhi	r5, r5, #3
 801bf1e:	2501      	movls	r5, #1
 801bf20:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bf24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801bf28:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801bf2c:	6830      	ldr	r0, [r6, #0]
 801bf2e:	440b      	add	r3, r1
 801bf30:	6802      	ldr	r2, [r0, #0]
 801bf32:	b21b      	sxth	r3, r3
 801bf34:	4599      	cmp	r9, r3
 801bf36:	dd49      	ble.n	801bfcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 801bf38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801bf3c:	4798      	blx	r3
 801bf3e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bf42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801bf46:	4413      	add	r3, r2
 801bf48:	b21b      	sxth	r3, r3
 801bf4a:	195a      	adds	r2, r3, r5
 801bf4c:	4290      	cmp	r0, r2
 801bf4e:	da07      	bge.n	801bf60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801bf50:	4581      	cmp	r9, r0
 801bf52:	dd05      	ble.n	801bf60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801bf54:	4298      	cmp	r0, r3
 801bf56:	da33      	bge.n	801bfc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	dd31      	ble.n	801bfc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 801bf5c:	4648      	mov	r0, r9
 801bf5e:	e004      	b.n	801bf6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 801bf60:	4298      	cmp	r0, r3
 801bf62:	dbfb      	blt.n	801bf5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 801bf64:	4548      	cmp	r0, r9
 801bf66:	bfa8      	it	ge
 801bf68:	4648      	movge	r0, r9
 801bf6a:	f9b8 2000 	ldrsh.w	r2, [r8]
 801bf6e:	2100      	movs	r1, #0
 801bf70:	1ac0      	subs	r0, r0, r3
 801bf72:	f8b7 a000 	ldrh.w	sl, [r7]
 801bf76:	f8ad 1014 	strh.w	r1, [sp, #20]
 801bf7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf7e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bf82:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bf86:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bf8a:	4553      	cmp	r3, sl
 801bf8c:	d9ca      	bls.n	801bf24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801bf8e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801bf92:	ab07      	add	r3, sp, #28
 801bf94:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801bf98:	6851      	ldr	r1, [r2, #4]
 801bf9a:	c303      	stmia	r3!, {r0, r1}
 801bf9c:	a807      	add	r0, sp, #28
 801bf9e:	a905      	add	r1, sp, #20
 801bfa0:	f7fb fef0 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801bfa4:	a807      	add	r0, sp, #28
 801bfa6:	f7fb ff30 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bfaa:	b920      	cbnz	r0, 801bfb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 801bfac:	6823      	ldr	r3, [r4, #0]
 801bfae:	a907      	add	r1, sp, #28
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bfb4:	4798      	blx	r3
 801bfb6:	f10a 0a01 	add.w	sl, sl, #1
 801bfba:	fa1f fa8a 	uxth.w	sl, sl
 801bfbe:	e7e2      	b.n	801bf86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 801bfc0:	6830      	ldr	r0, [r6, #0]
 801bfc2:	2101      	movs	r1, #1
 801bfc4:	6803      	ldr	r3, [r0, #0]
 801bfc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bfc8:	4798      	blx	r3
 801bfca:	e7ab      	b.n	801bf24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801bfcc:	69d3      	ldr	r3, [r2, #28]
 801bfce:	4798      	blx	r3
 801bfd0:	4b54      	ldr	r3, [pc, #336]	; (801c124 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 801bfd2:	781b      	ldrb	r3, [r3, #0]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	f43f af29 	beq.w	801be2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801bfda:	2300      	movs	r3, #0
 801bfdc:	883d      	ldrh	r5, [r7, #0]
 801bfde:	34ea      	adds	r4, #234	; 0xea
 801bfe0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801bfe4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801bfe8:	42ab      	cmp	r3, r5
 801bfea:	f67f af1f 	bls.w	801be2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801bfee:	ab1a      	add	r3, sp, #104	; 0x68
 801bff0:	4620      	mov	r0, r4
 801bff2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bff6:	3501      	adds	r5, #1
 801bff8:	3b44      	subs	r3, #68	; 0x44
 801bffa:	b2ad      	uxth	r5, r5
 801bffc:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c000:	f7ff fe22 	bl	801bc48 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c004:	e7ee      	b.n	801bfe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 801c006:	2b02      	cmp	r3, #2
 801c008:	d16a      	bne.n	801c0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801c00a:	f8df a120 	ldr.w	sl, [pc, #288]	; 801c12c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 801c00e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c012:	42ab      	cmp	r3, r5
 801c014:	d9dc      	bls.n	801bfd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801c016:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c01a:	ab03      	add	r3, sp, #12
 801c01c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c020:	6851      	ldr	r1, [r2, #4]
 801c022:	c303      	stmia	r3!, {r0, r1}
 801c024:	f89a 3000 	ldrb.w	r3, [sl]
 801c028:	2b01      	cmp	r3, #1
 801c02a:	d102      	bne.n	801c032 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 801c02c:	a803      	add	r0, sp, #12
 801c02e:	f7ff fc2d 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c032:	a803      	add	r0, sp, #12
 801c034:	f7fb fee9 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c038:	2800      	cmp	r0, #0
 801c03a:	d14a      	bne.n	801c0d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 801c03c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c040:	f10d 0914 	add.w	r9, sp, #20
 801c044:	f10d 081c 	add.w	r8, sp, #28
 801c048:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c04c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c050:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801c054:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c058:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c05c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c060:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801c064:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801c068:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c06c:	44dc      	add	ip, fp
 801c06e:	6830      	ldr	r0, [r6, #0]
 801c070:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801c074:	ebac 0c02 	sub.w	ip, ip, r2
 801c078:	f8d0 e000 	ldr.w	lr, [r0]
 801c07c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c080:	fa1f fc8c 	uxth.w	ip, ip
 801c084:	f8cd c000 	str.w	ip, [sp]
 801c088:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801c08c:	47d8      	blx	fp
 801c08e:	f89a 3000 	ldrb.w	r3, [sl]
 801c092:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c096:	2b01      	cmp	r3, #1
 801c098:	d11e      	bne.n	801c0d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 801c09a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801c09e:	e888 0003 	stmia.w	r8, {r0, r1}
 801c0a2:	4640      	mov	r0, r8
 801c0a4:	f7ff fb98 	bl	801b7d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c0a8:	6823      	ldr	r3, [r4, #0]
 801c0aa:	4641      	mov	r1, r8
 801c0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0ae:	4620      	mov	r0, r4
 801c0b0:	4798      	blx	r3
 801c0b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c0b6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c0ba:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801c0be:	4413      	add	r3, r2
 801c0c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c0c4:	440a      	add	r2, r1
 801c0c6:	b21b      	sxth	r3, r3
 801c0c8:	b212      	sxth	r2, r2
 801c0ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c0ce:	4293      	cmp	r3, r2
 801c0d0:	dbc6      	blt.n	801c060 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 801c0d2:	3501      	adds	r5, #1
 801c0d4:	b2ad      	uxth	r5, r5
 801c0d6:	e79a      	b.n	801c00e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 801c0d8:	6823      	ldr	r3, [r4, #0]
 801c0da:	4649      	mov	r1, r9
 801c0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0de:	e7e6      	b.n	801c0ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 801c0e0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c0e4:	42ab      	cmp	r3, r5
 801c0e6:	f67f af73 	bls.w	801bfd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801c0ea:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c0ee:	ab07      	add	r3, sp, #28
 801c0f0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c0f4:	6851      	ldr	r1, [r2, #4]
 801c0f6:	c303      	stmia	r3!, {r0, r1}
 801c0f8:	a807      	add	r0, sp, #28
 801c0fa:	f7fb fe86 	bl	8017e0a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c0fe:	b920      	cbnz	r0, 801c10a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 801c100:	6823      	ldr	r3, [r4, #0]
 801c102:	a907      	add	r1, sp, #28
 801c104:	4620      	mov	r0, r4
 801c106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c108:	4798      	blx	r3
 801c10a:	3501      	adds	r5, #1
 801c10c:	b2ad      	uxth	r5, r5
 801c10e:	e7e7      	b.n	801c0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801c110:	2000b494 	.word	0x2000b494
 801c114:	2000b4a0 	.word	0x2000b4a0
 801c118:	20000040 	.word	0x20000040
 801c11c:	2000b41c 	.word	0x2000b41c
 801c120:	2000b412 	.word	0x2000b412
 801c124:	2000b41a 	.word	0x2000b41a
 801c128:	2000b410 	.word	0x2000b410
 801c12c:	2000b414 	.word	0x2000b414

0801c130 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c130:	4b03      	ldr	r3, [pc, #12]	; (801c140 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c132:	2200      	movs	r2, #0
 801c134:	801a      	strh	r2, [r3, #0]
 801c136:	805a      	strh	r2, [r3, #2]
 801c138:	809a      	strh	r2, [r3, #4]
 801c13a:	80da      	strh	r2, [r3, #6]
 801c13c:	4770      	bx	lr
 801c13e:	bf00      	nop
 801c140:	2000b4a0 	.word	0x2000b4a0

0801c144 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c148:	b099      	sub	sp, #100	; 0x64
 801c14a:	4607      	mov	r7, r0
 801c14c:	4614      	mov	r4, r2
 801c14e:	461d      	mov	r5, r3
 801c150:	a802      	add	r0, sp, #8
 801c152:	468a      	mov	sl, r1
 801c154:	f000 fe4b 	bl	801cdee <_ZN8touchgfx12TextProviderC1Ev>
 801c158:	683b      	ldr	r3, [r7, #0]
 801c15a:	4638      	mov	r0, r7
 801c15c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c162:	4798      	blx	r3
 801c164:	462a      	mov	r2, r5
 801c166:	2500      	movs	r5, #0
 801c168:	4621      	mov	r1, r4
 801c16a:	4603      	mov	r3, r0
 801c16c:	a802      	add	r0, sp, #8
 801c16e:	462c      	mov	r4, r5
 801c170:	46a9      	mov	r9, r5
 801c172:	46a8      	mov	r8, r5
 801c174:	f000 fe80 	bl	801ce78 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c178:	2300      	movs	r3, #0
 801c17a:	9301      	str	r3, [sp, #4]
 801c17c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c180:	429c      	cmp	r4, r3
 801c182:	d002      	beq.n	801c18a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801c184:	455c      	cmp	r4, fp
 801c186:	bf18      	it	ne
 801c188:	4625      	movne	r5, r4
 801c18a:	ab01      	add	r3, sp, #4
 801c18c:	463a      	mov	r2, r7
 801c18e:	4651      	mov	r1, sl
 801c190:	a802      	add	r0, sp, #8
 801c192:	f001 f96b 	bl	801d46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c196:	4604      	mov	r4, r0
 801c198:	b108      	cbz	r0, 801c19e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801c19a:	280a      	cmp	r0, #10
 801c19c:	d10a      	bne.n	801c1b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801c19e:	45c1      	cmp	r9, r8
 801c1a0:	bf38      	it	cc
 801c1a2:	46c1      	movcc	r9, r8
 801c1a4:	f04f 0800 	mov.w	r8, #0
 801c1a8:	2c00      	cmp	r4, #0
 801c1aa:	d1e5      	bne.n	801c178 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801c1ac:	4648      	mov	r0, r9
 801c1ae:	b019      	add	sp, #100	; 0x64
 801c1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1b4:	9a01      	ldr	r2, [sp, #4]
 801c1b6:	2a00      	cmp	r2, #0
 801c1b8:	d0de      	beq.n	801c178 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801c1ba:	7b56      	ldrb	r6, [r2, #13]
 801c1bc:	4629      	mov	r1, r5
 801c1be:	683b      	ldr	r3, [r7, #0]
 801c1c0:	0076      	lsls	r6, r6, #1
 801c1c2:	8894      	ldrh	r4, [r2, #4]
 801c1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c1c6:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801c1ca:	7a96      	ldrb	r6, [r2, #10]
 801c1cc:	4306      	orrs	r6, r0
 801c1ce:	4638      	mov	r0, r7
 801c1d0:	4798      	blx	r3
 801c1d2:	4430      	add	r0, r6
 801c1d4:	4480      	add	r8, r0
 801c1d6:	fa1f f888 	uxth.w	r8, r8
 801c1da:	e7e5      	b.n	801c1a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801c1dc <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c1dc:	b508      	push	{r3, lr}
 801c1de:	6803      	ldr	r3, [r0, #0]
 801c1e0:	68db      	ldr	r3, [r3, #12]
 801c1e2:	4798      	blx	r3
 801c1e4:	b128      	cbz	r0, 801c1f2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c1e6:	7b43      	ldrb	r3, [r0, #13]
 801c1e8:	7a80      	ldrb	r0, [r0, #10]
 801c1ea:	005b      	lsls	r3, r3, #1
 801c1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c1f0:	4318      	orrs	r0, r3
 801c1f2:	bd08      	pop	{r3, pc}

0801c1f4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c1f4:	b40e      	push	{r1, r2, r3}
 801c1f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1f8:	b098      	sub	sp, #96	; 0x60
 801c1fa:	4605      	mov	r5, r0
 801c1fc:	ab1d      	add	r3, sp, #116	; 0x74
 801c1fe:	a802      	add	r0, sp, #8
 801c200:	ae18      	add	r6, sp, #96	; 0x60
 801c202:	f853 4b04 	ldr.w	r4, [r3], #4
 801c206:	9300      	str	r3, [sp, #0]
 801c208:	f000 fdf1 	bl	801cdee <_ZN8touchgfx12TextProviderC1Ev>
 801c20c:	682b      	ldr	r3, [r5, #0]
 801c20e:	4628      	mov	r0, r5
 801c210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c212:	4798      	blx	r3
 801c214:	4621      	mov	r1, r4
 801c216:	2400      	movs	r4, #0
 801c218:	4603      	mov	r3, r0
 801c21a:	9a00      	ldr	r2, [sp, #0]
 801c21c:	a802      	add	r0, sp, #8
 801c21e:	f000 fe2b 	bl	801ce78 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c222:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801c226:	462a      	mov	r2, r5
 801c228:	4633      	mov	r3, r6
 801c22a:	4621      	mov	r1, r4
 801c22c:	a802      	add	r0, sp, #8
 801c22e:	f001 f91d 	bl	801d46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c232:	b300      	cbz	r0, 801c276 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801c234:	280a      	cmp	r0, #10
 801c236:	d01a      	beq.n	801c26e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801c238:	9f01      	ldr	r7, [sp, #4]
 801c23a:	b1c7      	cbz	r7, 801c26e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801c23c:	7b78      	ldrb	r0, [r7, #13]
 801c23e:	7a3b      	ldrb	r3, [r7, #8]
 801c240:	00c1      	lsls	r1, r0, #3
 801c242:	88aa      	ldrh	r2, [r5, #4]
 801c244:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c248:	4319      	orrs	r1, r3
 801c24a:	0643      	lsls	r3, r0, #25
 801c24c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c250:	bf48      	it	mi
 801c252:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c256:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c25a:	bf48      	it	mi
 801c25c:	b219      	sxthmi	r1, r3
 801c25e:	79fb      	ldrb	r3, [r7, #7]
 801c260:	4303      	orrs	r3, r0
 801c262:	4413      	add	r3, r2
 801c264:	1a5b      	subs	r3, r3, r1
 801c266:	b29b      	uxth	r3, r3
 801c268:	42a3      	cmp	r3, r4
 801c26a:	bfc8      	it	gt
 801c26c:	b21c      	sxthgt	r4, r3
 801c26e:	4633      	mov	r3, r6
 801c270:	462a      	mov	r2, r5
 801c272:	2100      	movs	r1, #0
 801c274:	e7da      	b.n	801c22c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801c276:	b2a0      	uxth	r0, r4
 801c278:	b018      	add	sp, #96	; 0x60
 801c27a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c27e:	b003      	add	sp, #12
 801c280:	4770      	bx	lr

0801c282 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c282:	b40e      	push	{r1, r2, r3}
 801c284:	b530      	push	{r4, r5, lr}
 801c286:	b098      	sub	sp, #96	; 0x60
 801c288:	4604      	mov	r4, r0
 801c28a:	ab1b      	add	r3, sp, #108	; 0x6c
 801c28c:	a802      	add	r0, sp, #8
 801c28e:	f853 5b04 	ldr.w	r5, [r3], #4
 801c292:	9301      	str	r3, [sp, #4]
 801c294:	f000 fdab 	bl	801cdee <_ZN8touchgfx12TextProviderC1Ev>
 801c298:	6823      	ldr	r3, [r4, #0]
 801c29a:	4620      	mov	r0, r4
 801c29c:	2401      	movs	r4, #1
 801c29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c2a0:	4798      	blx	r3
 801c2a2:	9a01      	ldr	r2, [sp, #4]
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	4629      	mov	r1, r5
 801c2a8:	a802      	add	r0, sp, #8
 801c2aa:	f000 fde5 	bl	801ce78 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c2ae:	a802      	add	r0, sp, #8
 801c2b0:	f001 f9ce 	bl	801d650 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c2b4:	b2a3      	uxth	r3, r4
 801c2b6:	b138      	cbz	r0, 801c2c8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801c2b8:	280a      	cmp	r0, #10
 801c2ba:	a802      	add	r0, sp, #8
 801c2bc:	bf04      	itt	eq
 801c2be:	3301      	addeq	r3, #1
 801c2c0:	b21c      	sxtheq	r4, r3
 801c2c2:	f001 f9c5 	bl	801d650 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c2c6:	e7f5      	b.n	801c2b4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	b018      	add	sp, #96	; 0x60
 801c2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c2d0:	b003      	add	sp, #12
 801c2d2:	4770      	bx	lr

0801c2d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c2d4:	b40e      	push	{r1, r2, r3}
 801c2d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2d8:	b098      	sub	sp, #96	; 0x60
 801c2da:	4604      	mov	r4, r0
 801c2dc:	26ff      	movs	r6, #255	; 0xff
 801c2de:	ab1d      	add	r3, sp, #116	; 0x74
 801c2e0:	a802      	add	r0, sp, #8
 801c2e2:	f853 5b04 	ldr.w	r5, [r3], #4
 801c2e6:	9300      	str	r3, [sp, #0]
 801c2e8:	f000 fd81 	bl	801cdee <_ZN8touchgfx12TextProviderC1Ev>
 801c2ec:	6823      	ldr	r3, [r4, #0]
 801c2ee:	4620      	mov	r0, r4
 801c2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c2f2:	4798      	blx	r3
 801c2f4:	4629      	mov	r1, r5
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	9a00      	ldr	r2, [sp, #0]
 801c2fa:	a802      	add	r0, sp, #8
 801c2fc:	ad18      	add	r5, sp, #96	; 0x60
 801c2fe:	f000 fdbb 	bl	801ce78 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c302:	2100      	movs	r1, #0
 801c304:	4622      	mov	r2, r4
 801c306:	a802      	add	r0, sp, #8
 801c308:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801c30c:	462b      	mov	r3, r5
 801c30e:	f001 f8ad 	bl	801d46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c312:	b1d8      	cbz	r0, 801c34c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c314:	280a      	cmp	r0, #10
 801c316:	d012      	beq.n	801c33e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801c318:	9801      	ldr	r0, [sp, #4]
 801c31a:	b180      	cbz	r0, 801c33e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801c31c:	7b47      	ldrb	r7, [r0, #13]
 801c31e:	7922      	ldrb	r2, [r4, #4]
 801c320:	00fb      	lsls	r3, r7, #3
 801c322:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c326:	7a03      	ldrb	r3, [r0, #8]
 801c328:	430b      	orrs	r3, r1
 801c32a:	0679      	lsls	r1, r7, #25
 801c32c:	bf44      	itt	mi
 801c32e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c332:	b21b      	sxthmi	r3, r3
 801c334:	1ad3      	subs	r3, r2, r3
 801c336:	b2db      	uxtb	r3, r3
 801c338:	429e      	cmp	r6, r3
 801c33a:	bf28      	it	cs
 801c33c:	461e      	movcs	r6, r3
 801c33e:	462b      	mov	r3, r5
 801c340:	4622      	mov	r2, r4
 801c342:	2100      	movs	r1, #0
 801c344:	a802      	add	r0, sp, #8
 801c346:	f001 f891 	bl	801d46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c34a:	e7e2      	b.n	801c312 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801c34c:	4630      	mov	r0, r6
 801c34e:	b018      	add	sp, #96	; 0x60
 801c350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c354:	b003      	add	sp, #12
 801c356:	4770      	bx	lr

0801c358 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c358:	b513      	push	{r0, r1, r4, lr}
 801c35a:	1d01      	adds	r1, r0, #4
 801c35c:	4603      	mov	r3, r0
 801c35e:	466a      	mov	r2, sp
 801c360:	c903      	ldmia	r1, {r0, r1}
 801c362:	e882 0003 	stmia.w	r2, {r0, r1}
 801c366:	2100      	movs	r1, #0
 801c368:	4618      	mov	r0, r3
 801c36a:	9100      	str	r1, [sp, #0]
 801c36c:	6819      	ldr	r1, [r3, #0]
 801c36e:	690c      	ldr	r4, [r1, #16]
 801c370:	4611      	mov	r1, r2
 801c372:	47a0      	blx	r4
 801c374:	b002      	add	sp, #8
 801c376:	bd10      	pop	{r4, pc}

0801c378 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c378:	b538      	push	{r3, r4, r5, lr}
 801c37a:	680b      	ldr	r3, [r1, #0]
 801c37c:	460c      	mov	r4, r1
 801c37e:	4605      	mov	r5, r0
 801c380:	68db      	ldr	r3, [r3, #12]
 801c382:	4798      	blx	r3
 801c384:	6823      	ldr	r3, [r4, #0]
 801c386:	4620      	mov	r0, r4
 801c388:	4629      	mov	r1, r5
 801c38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c38c:	4798      	blx	r3
 801c38e:	4628      	mov	r0, r5
 801c390:	bd38      	pop	{r3, r4, r5, pc}

0801c392 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c392:	b410      	push	{r4}
 801c394:	880a      	ldrh	r2, [r1, #0]
 801c396:	8884      	ldrh	r4, [r0, #4]
 801c398:	4422      	add	r2, r4
 801c39a:	800a      	strh	r2, [r1, #0]
 801c39c:	884a      	ldrh	r2, [r1, #2]
 801c39e:	88c4      	ldrh	r4, [r0, #6]
 801c3a0:	4422      	add	r2, r4
 801c3a2:	804a      	strh	r2, [r1, #2]
 801c3a4:	6940      	ldr	r0, [r0, #20]
 801c3a6:	b120      	cbz	r0, 801c3b2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c3a8:	6803      	ldr	r3, [r0, #0]
 801c3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3b0:	4718      	bx	r3
 801c3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c3b6:	4770      	bx	lr

0801c3b8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3ba:	460b      	mov	r3, r1
 801c3bc:	b085      	sub	sp, #20
 801c3be:	4604      	mov	r4, r0
 801c3c0:	b901      	cbnz	r1, 801c3c4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c3c2:	b1fa      	cbz	r2, 801c404 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801c3c4:	1d27      	adds	r7, r4, #4
 801c3c6:	466e      	mov	r6, sp
 801c3c8:	ad02      	add	r5, sp, #8
 801c3ca:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c3ce:	e886 0003 	stmia.w	r6, {r0, r1}
 801c3d2:	88e1      	ldrh	r1, [r4, #6]
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	440a      	add	r2, r1
 801c3d8:	88a1      	ldrh	r1, [r4, #4]
 801c3da:	4419      	add	r1, r3
 801c3dc:	6823      	ldr	r3, [r4, #0]
 801c3de:	b212      	sxth	r2, r2
 801c3e0:	b209      	sxth	r1, r1
 801c3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c3e4:	4798      	blx	r3
 801c3e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c3ea:	e885 0003 	stmia.w	r5, {r0, r1}
 801c3ee:	6960      	ldr	r0, [r4, #20]
 801c3f0:	b150      	cbz	r0, 801c408 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801c3f2:	6803      	ldr	r3, [r0, #0]
 801c3f4:	4631      	mov	r1, r6
 801c3f6:	691b      	ldr	r3, [r3, #16]
 801c3f8:	4798      	blx	r3
 801c3fa:	6960      	ldr	r0, [r4, #20]
 801c3fc:	6803      	ldr	r3, [r0, #0]
 801c3fe:	691b      	ldr	r3, [r3, #16]
 801c400:	4629      	mov	r1, r5
 801c402:	4798      	blx	r3
 801c404:	b005      	add	sp, #20
 801c406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c408:	f7ff fb84 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801c40c:	6803      	ldr	r3, [r0, #0]
 801c40e:	4631      	mov	r1, r6
 801c410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c412:	4798      	blx	r3
 801c414:	f7ff fb7e 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801c418:	6803      	ldr	r3, [r0, #0]
 801c41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c41c:	e7f0      	b.n	801c400 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801c41e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c41e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c420:	8882      	ldrh	r2, [r0, #4]
 801c422:	4605      	mov	r5, r0
 801c424:	880b      	ldrh	r3, [r1, #0]
 801c426:	460c      	mov	r4, r1
 801c428:	4413      	add	r3, r2
 801c42a:	800b      	strh	r3, [r1, #0]
 801c42c:	884b      	ldrh	r3, [r1, #2]
 801c42e:	88c2      	ldrh	r2, [r0, #6]
 801c430:	4413      	add	r3, r2
 801c432:	4602      	mov	r2, r0
 801c434:	804b      	strh	r3, [r1, #2]
 801c436:	466b      	mov	r3, sp
 801c438:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801c43c:	6851      	ldr	r1, [r2, #4]
 801c43e:	c303      	stmia	r3!, {r0, r1}
 801c440:	4621      	mov	r1, r4
 801c442:	4668      	mov	r0, sp
 801c444:	f7fb fc9e 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801c448:	466b      	mov	r3, sp
 801c44a:	cb03      	ldmia	r3!, {r0, r1}
 801c44c:	6020      	str	r0, [r4, #0]
 801c44e:	6061      	str	r1, [r4, #4]
 801c450:	6968      	ldr	r0, [r5, #20]
 801c452:	b128      	cbz	r0, 801c460 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801c454:	6803      	ldr	r3, [r0, #0]
 801c456:	691b      	ldr	r3, [r3, #16]
 801c458:	4621      	mov	r1, r4
 801c45a:	4798      	blx	r3
 801c45c:	b003      	add	sp, #12
 801c45e:	bd30      	pop	{r4, r5, pc}
 801c460:	f7ff fb58 	bl	801bb14 <_ZN8touchgfx11Application11getInstanceEv>
 801c464:	6803      	ldr	r3, [r0, #0]
 801c466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c468:	e7f6      	b.n	801c458 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801c46a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c46a:	b570      	push	{r4, r5, r6, lr}
 801c46c:	8882      	ldrh	r2, [r0, #4]
 801c46e:	460c      	mov	r4, r1
 801c470:	880b      	ldrh	r3, [r1, #0]
 801c472:	4605      	mov	r5, r0
 801c474:	4413      	add	r3, r2
 801c476:	800b      	strh	r3, [r1, #0]
 801c478:	884b      	ldrh	r3, [r1, #2]
 801c47a:	88c2      	ldrh	r2, [r0, #6]
 801c47c:	4413      	add	r3, r2
 801c47e:	804b      	strh	r3, [r1, #2]
 801c480:	1d01      	adds	r1, r0, #4
 801c482:	4620      	mov	r0, r4
 801c484:	f7fb fc7e 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801c488:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	dd0b      	ble.n	801c4a8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c490:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c494:	2b00      	cmp	r3, #0
 801c496:	dd07      	ble.n	801c4a8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c498:	6968      	ldr	r0, [r5, #20]
 801c49a:	b128      	cbz	r0, 801c4a8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c49c:	6803      	ldr	r3, [r0, #0]
 801c49e:	4621      	mov	r1, r4
 801c4a0:	6a1b      	ldr	r3, [r3, #32]
 801c4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4a6:	4718      	bx	r3
 801c4a8:	bd70      	pop	{r4, r5, r6, pc}

0801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c4aa:	b510      	push	{r4, lr}
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	4604      	mov	r4, r0
 801c4b0:	4608      	mov	r0, r1
 801c4b2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c4b6:	8023      	strh	r3, [r4, #0]
 801c4b8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c4bc:	8063      	strh	r3, [r4, #2]
 801c4be:	6803      	ldr	r3, [r0, #0]
 801c4c0:	80a1      	strh	r1, [r4, #4]
 801c4c2:	4621      	mov	r1, r4
 801c4c4:	80e2      	strh	r2, [r4, #6]
 801c4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4c8:	4798      	blx	r3
 801c4ca:	4620      	mov	r0, r4
 801c4cc:	bd10      	pop	{r4, pc}
	...

0801c4d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c4d0:	b530      	push	{r4, r5, lr}
 801c4d2:	8083      	strh	r3, [r0, #4]
 801c4d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c4d8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c4dc:	7183      	strb	r3, [r0, #6]
 801c4de:	79c3      	ldrb	r3, [r0, #7]
 801c4e0:	6101      	str	r1, [r0, #16]
 801c4e2:	f365 0306 	bfi	r3, r5, #0, #7
 801c4e6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c4ea:	8282      	strh	r2, [r0, #20]
 801c4ec:	f365 13c7 	bfi	r3, r5, #7, #1
 801c4f0:	71c3      	strb	r3, [r0, #7]
 801c4f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c4f6:	7203      	strb	r3, [r0, #8]
 801c4f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c4fc:	7243      	strb	r3, [r0, #9]
 801c4fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c502:	8143      	strh	r3, [r0, #10]
 801c504:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c508:	8183      	strh	r3, [r0, #12]
 801c50a:	4b01      	ldr	r3, [pc, #4]	; (801c510 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c50c:	6003      	str	r3, [r0, #0]
 801c50e:	bd30      	pop	{r4, r5, pc}
 801c510:	0802c230 	.word	0x0802c230

0801c514 <_ZNK8touchgfx9ConstFont4findEt>:
 801c514:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c516:	6904      	ldr	r4, [r0, #16]
 801c518:	8a82      	ldrh	r2, [r0, #20]
 801c51a:	88a3      	ldrh	r3, [r4, #4]
 801c51c:	3a01      	subs	r2, #1
 801c51e:	1acb      	subs	r3, r1, r3
 801c520:	d431      	bmi.n	801c586 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801c522:	4293      	cmp	r3, r2
 801c524:	dd0c      	ble.n	801c540 <_ZNK8touchgfx9ConstFont4findEt+0x2c>
 801c526:	230e      	movs	r3, #14
 801c528:	fb03 4302 	mla	r3, r3, r2, r4
 801c52c:	889b      	ldrh	r3, [r3, #4]
 801c52e:	1a5b      	subs	r3, r3, r1
 801c530:	1ad3      	subs	r3, r2, r3
 801c532:	429a      	cmp	r2, r3
 801c534:	db27      	blt.n	801c586 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801c536:	2b00      	cmp	r3, #0
 801c538:	bfbc      	itt	lt
 801c53a:	2302      	movlt	r3, #2
 801c53c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c540:	2500      	movs	r5, #0
 801c542:	260e      	movs	r6, #14
 801c544:	4295      	cmp	r5, r2
 801c546:	dc1e      	bgt.n	801c586 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801c548:	fb06 4003 	mla	r0, r6, r3, r4
 801c54c:	8887      	ldrh	r7, [r0, #4]
 801c54e:	428f      	cmp	r7, r1
 801c550:	d01a      	beq.n	801c588 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801c552:	d90d      	bls.n	801c570 <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 801c554:	1e5a      	subs	r2, r3, #1
 801c556:	4295      	cmp	r5, r2
 801c558:	dc15      	bgt.n	801c586 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801c55a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c55e:	1a5b      	subs	r3, r3, r1
 801c560:	1ad3      	subs	r3, r2, r3
 801c562:	429a      	cmp	r2, r3
 801c564:	db0f      	blt.n	801c586 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801c566:	429d      	cmp	r5, r3
 801c568:	ddec      	ble.n	801c544 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c56a:	1953      	adds	r3, r2, r5
 801c56c:	105b      	asrs	r3, r3, #1
 801c56e:	e7e9      	b.n	801c544 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c570:	1c5d      	adds	r5, r3, #1
 801c572:	42aa      	cmp	r2, r5
 801c574:	db07      	blt.n	801c586 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801c576:	8a43      	ldrh	r3, [r0, #18]
 801c578:	1acb      	subs	r3, r1, r3
 801c57a:	442b      	add	r3, r5
 801c57c:	429d      	cmp	r5, r3
 801c57e:	dc02      	bgt.n	801c586 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801c580:	429a      	cmp	r2, r3
 801c582:	dadf      	bge.n	801c544 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c584:	e7f1      	b.n	801c56a <_ZNK8touchgfx9ConstFont4findEt+0x56>
 801c586:	2000      	movs	r0, #0
 801c588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c58a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c58c:	4604      	mov	r4, r0
 801c58e:	4617      	mov	r7, r2
 801c590:	461e      	mov	r6, r3
 801c592:	b911      	cbnz	r1, 801c59a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c594:	2500      	movs	r5, #0
 801c596:	4628      	mov	r0, r5
 801c598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c59a:	290a      	cmp	r1, #10
 801c59c:	d0fa      	beq.n	801c594 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c59e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c5a2:	4291      	cmp	r1, r2
 801c5a4:	d0f6      	beq.n	801c594 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c5a6:	f242 020b 	movw	r2, #8203	; 0x200b
 801c5aa:	4291      	cmp	r1, r2
 801c5ac:	d0f2      	beq.n	801c594 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c5ae:	f7ff ffb1 	bl	801c514 <_ZNK8touchgfx9ConstFont4findEt>
 801c5b2:	4605      	mov	r5, r0
 801c5b4:	b950      	cbnz	r0, 801c5cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c5b6:	6823      	ldr	r3, [r4, #0]
 801c5b8:	4620      	mov	r0, r4
 801c5ba:	691b      	ldr	r3, [r3, #16]
 801c5bc:	4798      	blx	r3
 801c5be:	4601      	mov	r1, r0
 801c5c0:	4620      	mov	r0, r4
 801c5c2:	f7ff ffa7 	bl	801c514 <_ZNK8touchgfx9ConstFont4findEt>
 801c5c6:	4605      	mov	r5, r0
 801c5c8:	2800      	cmp	r0, #0
 801c5ca:	d0e3      	beq.n	801c594 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c5cc:	6823      	ldr	r3, [r4, #0]
 801c5ce:	4629      	mov	r1, r5
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5d4:	4798      	blx	r3
 801c5d6:	6038      	str	r0, [r7, #0]
 801c5d8:	6823      	ldr	r3, [r4, #0]
 801c5da:	4620      	mov	r0, r4
 801c5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5de:	4798      	blx	r3
 801c5e0:	7030      	strb	r0, [r6, #0]
 801c5e2:	e7d8      	b.n	801c596 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c5e4 <_ZN8touchgfx6memsetEPvhm>:
 801c5e4:	4402      	add	r2, r0
 801c5e6:	4290      	cmp	r0, r2
 801c5e8:	d002      	beq.n	801c5f0 <_ZN8touchgfx6memsetEPvhm+0xc>
 801c5ea:	f800 1b01 	strb.w	r1, [r0], #1
 801c5ee:	e7fa      	b.n	801c5e6 <_ZN8touchgfx6memsetEPvhm+0x2>
 801c5f0:	4770      	bx	lr

0801c5f2 <_ZN8touchgfx3clzEl>:
 801c5f2:	b1e8      	cbz	r0, 801c630 <_ZN8touchgfx3clzEl+0x3e>
 801c5f4:	2800      	cmp	r0, #0
 801c5f6:	bfb8      	it	lt
 801c5f8:	4240      	neglt	r0, r0
 801c5fa:	0c03      	lsrs	r3, r0, #16
 801c5fc:	041b      	lsls	r3, r3, #16
 801c5fe:	b9ab      	cbnz	r3, 801c62c <_ZN8touchgfx3clzEl+0x3a>
 801c600:	0400      	lsls	r0, r0, #16
 801c602:	2310      	movs	r3, #16
 801c604:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c608:	bf04      	itt	eq
 801c60a:	0200      	lsleq	r0, r0, #8
 801c60c:	3308      	addeq	r3, #8
 801c60e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c612:	bf04      	itt	eq
 801c614:	0100      	lsleq	r0, r0, #4
 801c616:	3304      	addeq	r3, #4
 801c618:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c61c:	bf04      	itt	eq
 801c61e:	0080      	lsleq	r0, r0, #2
 801c620:	3302      	addeq	r3, #2
 801c622:	2800      	cmp	r0, #0
 801c624:	bfa8      	it	ge
 801c626:	3301      	addge	r3, #1
 801c628:	1e58      	subs	r0, r3, #1
 801c62a:	4770      	bx	lr
 801c62c:	2300      	movs	r3, #0
 801c62e:	e7e9      	b.n	801c604 <_ZN8touchgfx3clzEl+0x12>
 801c630:	201f      	movs	r0, #31
 801c632:	4770      	bx	lr

0801c634 <_ZN8touchgfx6muldivElllRl>:
 801c634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c638:	4604      	mov	r4, r0
 801c63a:	4698      	mov	r8, r3
 801c63c:	2601      	movs	r6, #1
 801c63e:	f7ff ffd8 	bl	801c5f2 <_ZN8touchgfx3clzEl>
 801c642:	2c00      	cmp	r4, #0
 801c644:	fa04 f500 	lsl.w	r5, r4, r0
 801c648:	fa06 f600 	lsl.w	r6, r6, r0
 801c64c:	bfba      	itte	lt
 801c64e:	f04f 37ff 	movlt.w	r7, #4294967295
 801c652:	4264      	neglt	r4, r4
 801c654:	2701      	movge	r7, #1
 801c656:	2900      	cmp	r1, #0
 801c658:	f106 36ff 	add.w	r6, r6, #4294967295
 801c65c:	bfbc      	itt	lt
 801c65e:	4249      	neglt	r1, r1
 801c660:	427f      	neglt	r7, r7
 801c662:	2a00      	cmp	r2, #0
 801c664:	fa41 fc00 	asr.w	ip, r1, r0
 801c668:	ea01 0106 	and.w	r1, r1, r6
 801c66c:	bfb8      	it	lt
 801c66e:	427f      	neglt	r7, r7
 801c670:	fb04 f401 	mul.w	r4, r4, r1
 801c674:	fb95 f3f2 	sdiv	r3, r5, r2
 801c678:	fb02 5513 	mls	r5, r2, r3, r5
 801c67c:	bfb8      	it	lt
 801c67e:	4252      	neglt	r2, r2
 801c680:	fb94 f0f2 	sdiv	r0, r4, r2
 801c684:	fb02 4410 	mls	r4, r2, r0, r4
 801c688:	fb0c 4405 	mla	r4, ip, r5, r4
 801c68c:	fb94 f1f2 	sdiv	r1, r4, r2
 801c690:	4408      	add	r0, r1
 801c692:	fb02 4211 	mls	r2, r2, r1, r4
 801c696:	fb0c 0003 	mla	r0, ip, r3, r0
 801c69a:	f8c8 2000 	str.w	r2, [r8]
 801c69e:	4378      	muls	r0, r7
 801c6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c6a4 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801c6a4:	2000      	movs	r0, #0
 801c6a6:	4770      	bx	lr

0801c6a8 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801c6a8:	2001      	movs	r0, #1
 801c6aa:	4770      	bx	lr

0801c6ac <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801c6ac:	2002      	movs	r0, #2
 801c6ae:	4770      	bx	lr

0801c6b0 <_ZN8touchgfx12GestureEventD1Ev>:
 801c6b0:	4770      	bx	lr

0801c6b2 <_ZN8touchgfx9DragEventD1Ev>:
 801c6b2:	4770      	bx	lr

0801c6b4 <_ZN8touchgfx10ClickEventD1Ev>:
 801c6b4:	4770      	bx	lr

0801c6b6 <_ZN8touchgfx10ClickEventD0Ev>:
 801c6b6:	b510      	push	{r4, lr}
 801c6b8:	4604      	mov	r4, r0
 801c6ba:	210c      	movs	r1, #12
 801c6bc:	f00a fffe 	bl	80276bc <_ZdlPvj>
 801c6c0:	4620      	mov	r0, r4
 801c6c2:	bd10      	pop	{r4, pc}

0801c6c4 <_ZN8touchgfx9DragEventD0Ev>:
 801c6c4:	b510      	push	{r4, lr}
 801c6c6:	4604      	mov	r4, r0
 801c6c8:	2110      	movs	r1, #16
 801c6ca:	f00a fff7 	bl	80276bc <_ZdlPvj>
 801c6ce:	4620      	mov	r0, r4
 801c6d0:	bd10      	pop	{r4, pc}

0801c6d2 <_ZN8touchgfx12GestureEventD0Ev>:
 801c6d2:	b510      	push	{r4, lr}
 801c6d4:	4604      	mov	r4, r0
 801c6d6:	210c      	movs	r1, #12
 801c6d8:	f00a fff0 	bl	80276bc <_ZdlPvj>
 801c6dc:	4620      	mov	r0, r4
 801c6de:	bd10      	pop	{r4, pc}

0801c6e0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c6e0:	b530      	push	{r4, r5, lr}
 801c6e2:	460d      	mov	r5, r1
 801c6e4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c6e6:	b087      	sub	sp, #28
 801c6e8:	4604      	mov	r4, r0
 801c6ea:	b301      	cbz	r1, 801c72e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c6ec:	a801      	add	r0, sp, #4
 801c6ee:	f7ff fedc 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6f2:	892a      	ldrh	r2, [r5, #8]
 801c6f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c6f8:	7928      	ldrb	r0, [r5, #4]
 801c6fa:	1ad2      	subs	r2, r2, r3
 801c6fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c6fe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c702:	441a      	add	r2, r3
 801c704:	896b      	ldrh	r3, [r5, #10]
 801c706:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c70a:	f88d 0010 	strb.w	r0, [sp, #16]
 801c70e:	1b5b      	subs	r3, r3, r5
 801c710:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c712:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c714:	442b      	add	r3, r5
 801c716:	4d07      	ldr	r5, [pc, #28]	; (801c734 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c718:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c71c:	a903      	add	r1, sp, #12
 801c71e:	9503      	str	r5, [sp, #12]
 801c720:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c724:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c728:	6803      	ldr	r3, [r0, #0]
 801c72a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c72c:	4798      	blx	r3
 801c72e:	b007      	add	sp, #28
 801c730:	bd30      	pop	{r4, r5, pc}
 801c732:	bf00      	nop
 801c734:	0802c2ac 	.word	0x0802c2ac

0801c738 <_ZNK8touchgfx4Rect9intersectEss>:
 801c738:	b510      	push	{r4, lr}
 801c73a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c73e:	428b      	cmp	r3, r1
 801c740:	dc10      	bgt.n	801c764 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801c742:	8884      	ldrh	r4, [r0, #4]
 801c744:	4423      	add	r3, r4
 801c746:	b21b      	sxth	r3, r3
 801c748:	4299      	cmp	r1, r3
 801c74a:	da0b      	bge.n	801c764 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801c74c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c750:	4293      	cmp	r3, r2
 801c752:	dc07      	bgt.n	801c764 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801c754:	88c0      	ldrh	r0, [r0, #6]
 801c756:	4418      	add	r0, r3
 801c758:	b200      	sxth	r0, r0
 801c75a:	4282      	cmp	r2, r0
 801c75c:	bfac      	ite	ge
 801c75e:	2000      	movge	r0, #0
 801c760:	2001      	movlt	r0, #1
 801c762:	bd10      	pop	{r4, pc}
 801c764:	2000      	movs	r0, #0
 801c766:	e7fc      	b.n	801c762 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801c768 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c76a:	460c      	mov	r4, r1
 801c76c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c76e:	b089      	sub	sp, #36	; 0x24
 801c770:	4605      	mov	r5, r0
 801c772:	2900      	cmp	r1, #0
 801c774:	d054      	beq.n	801c820 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801c776:	4668      	mov	r0, sp
 801c778:	f7ff fe97 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c77c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801c77e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801c780:	4668      	mov	r0, sp
 801c782:	8922      	ldrh	r2, [r4, #8]
 801c784:	88e1      	ldrh	r1, [r4, #6]
 801c786:	443a      	add	r2, r7
 801c788:	4431      	add	r1, r6
 801c78a:	b212      	sxth	r2, r2
 801c78c:	b209      	sxth	r1, r1
 801c78e:	f7ff ffd3 	bl	801c738 <_ZNK8touchgfx4Rect9intersectEss>
 801c792:	b1d0      	cbz	r0, 801c7ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801c794:	89a2      	ldrh	r2, [r4, #12]
 801c796:	4668      	mov	r0, sp
 801c798:	8961      	ldrh	r1, [r4, #10]
 801c79a:	443a      	add	r2, r7
 801c79c:	4431      	add	r1, r6
 801c79e:	b212      	sxth	r2, r2
 801c7a0:	b209      	sxth	r1, r1
 801c7a2:	f7ff ffc9 	bl	801c738 <_ZNK8touchgfx4Rect9intersectEss>
 801c7a6:	4603      	mov	r3, r0
 801c7a8:	b978      	cbnz	r0, 801c7ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801c7aa:	4a1e      	ldr	r2, [pc, #120]	; (801c824 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801c7ac:	a904      	add	r1, sp, #16
 801c7ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c7b0:	9204      	str	r2, [sp, #16]
 801c7b2:	2202      	movs	r2, #2
 801c7b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c7b8:	f88d 2014 	strb.w	r2, [sp, #20]
 801c7bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c7c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c7c4:	6803      	ldr	r3, [r0, #0]
 801c7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c7c8:	4798      	blx	r3
 801c7ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801c7cc:	a802      	add	r0, sp, #8
 801c7ce:	f7ff fe6c 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c7d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c7d6:	88e0      	ldrh	r0, [r4, #6]
 801c7d8:	8961      	ldrh	r1, [r4, #10]
 801c7da:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c7de:	1a80      	subs	r0, r0, r2
 801c7e0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801c7e4:	1a89      	subs	r1, r1, r2
 801c7e6:	8923      	ldrh	r3, [r4, #8]
 801c7e8:	4460      	add	r0, ip
 801c7ea:	89a2      	ldrh	r2, [r4, #12]
 801c7ec:	4461      	add	r1, ip
 801c7ee:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c7f0:	eba3 030e 	sub.w	r3, r3, lr
 801c7f4:	eba2 020e 	sub.w	r2, r2, lr
 801c7f8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c7fc:	7927      	ldrb	r7, [r4, #4]
 801c7fe:	4433      	add	r3, r6
 801c800:	4432      	add	r2, r6
 801c802:	4c09      	ldr	r4, [pc, #36]	; (801c828 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801c804:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c806:	f8ad 101a 	strh.w	r1, [sp, #26]
 801c80a:	a904      	add	r1, sp, #16
 801c80c:	9404      	str	r4, [sp, #16]
 801c80e:	f88d 7014 	strb.w	r7, [sp, #20]
 801c812:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c816:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c81a:	6803      	ldr	r3, [r0, #0]
 801c81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c81e:	4798      	blx	r3
 801c820:	b009      	add	sp, #36	; 0x24
 801c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c824:	0802c284 	.word	0x0802c284
 801c828:	0802c298 	.word	0x0802c298

0801c82c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c830:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801c834:	b0a1      	sub	sp, #132	; 0x84
 801c836:	4604      	mov	r4, r0
 801c838:	460d      	mov	r5, r1
 801c83a:	790b      	ldrb	r3, [r1, #4]
 801c83c:	f1b9 0f00 	cmp.w	r9, #0
 801c840:	d00f      	beq.n	801c862 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801c842:	2b00      	cmp	r3, #0
 801c844:	f040 80a2 	bne.w	801c98c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801c848:	b021      	add	sp, #132	; 0x84
 801c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c84e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c852:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c856:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c85a:	1d20      	adds	r0, r4, #4
 801c85c:	f7fb f9e0 	bl	8017c20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c860:	e094      	b.n	801c98c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801c862:	2b00      	cmp	r3, #0
 801c864:	d1f0      	bne.n	801c848 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c866:	4b5f      	ldr	r3, [pc, #380]	; (801c9e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801c86e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801c872:	f1ba 0f03 	cmp.w	sl, #3
 801c876:	ddea      	ble.n	801c84e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801c878:	f1ba 0f0c 	cmp.w	sl, #12
 801c87c:	f04f 0303 	mov.w	r3, #3
 801c880:	f04f 0600 	mov.w	r6, #0
 801c884:	4958      	ldr	r1, [pc, #352]	; (801c9e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801c886:	bfd8      	it	le
 801c888:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801c88c:	960a      	str	r6, [sp, #40]	; 0x28
 801c88e:	bfd8      	it	le
 801c890:	fb92 f3f3 	sdivle	r3, r2, r3
 801c894:	9301      	str	r3, [sp, #4]
 801c896:	4b55      	ldr	r3, [pc, #340]	; (801c9ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801c898:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c89c:	4b54      	ldr	r3, [pc, #336]	; (801c9f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801c89e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801c8a2:	2248      	movs	r2, #72	; 0x48
 801c8a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c8a8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c8ac:	ab0e      	add	r3, sp, #56	; 0x38
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f00a ffae 	bl	8027810 <memcpy>
 801c8b4:	f04f 32ff 	mov.w	r2, #4294967295
 801c8b8:	f8cd a008 	str.w	sl, [sp, #8]
 801c8bc:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801c8c0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c8c4:	46b3      	mov	fp, r6
 801c8c6:	fb93 f3f2 	sdiv	r3, r3, r2
 801c8ca:	b29b      	uxth	r3, r3
 801c8cc:	9303      	str	r3, [sp, #12]
 801c8ce:	2300      	movs	r3, #0
 801c8d0:	9a03      	ldr	r2, [sp, #12]
 801c8d2:	88ef      	ldrh	r7, [r5, #6]
 801c8d4:	a80a      	add	r0, sp, #40	; 0x28
 801c8d6:	9309      	str	r3, [sp, #36]	; 0x24
 801c8d8:	9b07      	ldr	r3, [sp, #28]
 801c8da:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801c8de:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801c8e2:	fb13 f302 	smulbb	r3, r3, r2
 801c8e6:	b29b      	uxth	r3, r3
 801c8e8:	9304      	str	r3, [sp, #16]
 801c8ea:	9b07      	ldr	r3, [sp, #28]
 801c8ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c8f0:	685b      	ldr	r3, [r3, #4]
 801c8f2:	fb13 f302 	smulbb	r3, r3, r2
 801c8f6:	b29b      	uxth	r3, r3
 801c8f8:	9305      	str	r3, [sp, #20]
 801c8fa:	9b04      	ldr	r3, [sp, #16]
 801c8fc:	441f      	add	r7, r3
 801c8fe:	9b05      	ldr	r3, [sp, #20]
 801c900:	4498      	add	r8, r3
 801c902:	b23f      	sxth	r7, r7
 801c904:	fa0f f888 	sxth.w	r8, r8
 801c908:	4639      	mov	r1, r7
 801c90a:	4642      	mov	r2, r8
 801c90c:	f7ff ff14 	bl	801c738 <_ZNK8touchgfx4Rect9intersectEss>
 801c910:	b380      	cbz	r0, 801c974 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801c912:	4639      	mov	r1, r7
 801c914:	ab09      	add	r3, sp, #36	; 0x24
 801c916:	4642      	mov	r2, r8
 801c918:	1d20      	adds	r0, r4, #4
 801c91a:	f7fb f981 	bl	8017c20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c91e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c920:	b341      	cbz	r1, 801c974 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801c922:	4549      	cmp	r1, r9
 801c924:	d026      	beq.n	801c974 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801c926:	a80c      	add	r0, sp, #48	; 0x30
 801c928:	f7ff fdbf 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c92c:	2002      	movs	r0, #2
 801c92e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c932:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c936:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c93a:	fb92 f2f0 	sdiv	r2, r2, r0
 801c93e:	440a      	add	r2, r1
 801c940:	1a99      	subs	r1, r3, r2
 801c942:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c946:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c94a:	fb93 f3f0 	sdiv	r3, r3, r0
 801c94e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801c952:	4403      	add	r3, r0
 801c954:	1ad3      	subs	r3, r2, r3
 801c956:	9a06      	ldr	r2, [sp, #24]
 801c958:	435b      	muls	r3, r3
 801c95a:	fb01 3301 	mla	r3, r1, r1, r3
 801c95e:	4293      	cmp	r3, r2
 801c960:	d208      	bcs.n	801c974 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801c962:	9a04      	ldr	r2, [sp, #16]
 801c964:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c968:	86a2      	strh	r2, [r4, #52]	; 0x34
 801c96a:	9a05      	ldr	r2, [sp, #20]
 801c96c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801c970:	86e2      	strh	r2, [r4, #54]	; 0x36
 801c972:	9306      	str	r3, [sp, #24]
 801c974:	f10b 0b02 	add.w	fp, fp, #2
 801c978:	f1bb 0f08 	cmp.w	fp, #8
 801c97c:	dda7      	ble.n	801c8ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801c97e:	9b02      	ldr	r3, [sp, #8]
 801c980:	3601      	adds	r6, #1
 801c982:	4453      	add	r3, sl
 801c984:	9302      	str	r3, [sp, #8]
 801c986:	9b01      	ldr	r3, [sp, #4]
 801c988:	42b3      	cmp	r3, r6
 801c98a:	d199      	bne.n	801c8c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801c98c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c98e:	2900      	cmp	r1, #0
 801c990:	f43f af5a 	beq.w	801c848 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c994:	a80c      	add	r0, sp, #48	; 0x30
 801c996:	2600      	movs	r6, #0
 801c998:	f7ff fd87 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c99c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c9a0:	88ea      	ldrh	r2, [r5, #6]
 801c9a2:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c9a6:	1ad2      	subs	r2, r2, r3
 801c9a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c9aa:	7929      	ldrb	r1, [r5, #4]
 801c9ac:	441a      	add	r2, r3
 801c9ae:	892b      	ldrh	r3, [r5, #8]
 801c9b0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c9b4:	a90e      	add	r1, sp, #56	; 0x38
 801c9b6:	1a1b      	subs	r3, r3, r0
 801c9b8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801c9ba:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c9be:	4403      	add	r3, r0
 801c9c0:	480c      	ldr	r0, [pc, #48]	; (801c9f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801c9c2:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801c9c6:	900e      	str	r0, [sp, #56]	; 0x38
 801c9c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c9ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c9ce:	6803      	ldr	r3, [r0, #0]
 801c9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9d2:	4798      	blx	r3
 801c9d4:	792b      	ldrb	r3, [r5, #4]
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	f43f af36 	beq.w	801c848 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c9dc:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c9e0:	e732      	b.n	801c848 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c9e2:	bf00      	nop
 801c9e4:	2000b41c 	.word	0x2000b41c
 801c9e8:	08028ffc 	.word	0x08028ffc
 801c9ec:	2000b410 	.word	0x2000b410
 801c9f0:	2000b412 	.word	0x2000b412
 801c9f4:	0802c284 	.word	0x0802c284

0801c9f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c9fa:	4604      	mov	r4, r0
 801c9fc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801ca00:	3201      	adds	r2, #1
 801ca02:	d112      	bne.n	801ca2a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801ca04:	2500      	movs	r5, #0
 801ca06:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ca0a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ca0e:	6803      	ldr	r3, [r0, #0]
 801ca10:	9500      	str	r5, [sp, #0]
 801ca12:	466d      	mov	r5, sp
 801ca14:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ca18:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ca1c:	4629      	mov	r1, r5
 801ca1e:	6a1b      	ldr	r3, [r3, #32]
 801ca20:	4798      	blx	r3
 801ca22:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ca26:	e884 0003 	stmia.w	r4, {r0, r1}
 801ca2a:	4620      	mov	r0, r4
 801ca2c:	b003      	add	sp, #12
 801ca2e:	bd30      	pop	{r4, r5, pc}

0801ca30 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801ca30:	b513      	push	{r0, r1, r4, lr}
 801ca32:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801ca36:	4604      	mov	r4, r0
 801ca38:	3301      	adds	r3, #1
 801ca3a:	d109      	bne.n	801ca50 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801ca3c:	4601      	mov	r1, r0
 801ca3e:	4668      	mov	r0, sp
 801ca40:	f7ff fd33 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca44:	f8bd 3000 	ldrh.w	r3, [sp]
 801ca48:	8423      	strh	r3, [r4, #32]
 801ca4a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca4e:	8463      	strh	r3, [r4, #34]	; 0x22
 801ca50:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801ca54:	b002      	add	sp, #8
 801ca56:	bd10      	pop	{r4, pc}

0801ca58 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801ca58:	b513      	push	{r0, r1, r4, lr}
 801ca5a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801ca5e:	4604      	mov	r4, r0
 801ca60:	3301      	adds	r3, #1
 801ca62:	d109      	bne.n	801ca78 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801ca64:	4601      	mov	r1, r0
 801ca66:	4668      	mov	r0, sp
 801ca68:	f7ff fd1f 	bl	801c4aa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca6c:	f8bd 3000 	ldrh.w	r3, [sp]
 801ca70:	8423      	strh	r3, [r4, #32]
 801ca72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca76:	8463      	strh	r3, [r4, #34]	; 0x22
 801ca78:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ca7c:	b002      	add	sp, #8
 801ca7e:	bd10      	pop	{r4, pc}

0801ca80 <_ZN8touchgfx6ScreenC1Ev>:
 801ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca82:	4605      	mov	r5, r0
 801ca84:	4b17      	ldr	r3, [pc, #92]	; (801cae4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801ca86:	2200      	movs	r2, #0
 801ca88:	4917      	ldr	r1, [pc, #92]	; (801cae8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801ca8a:	f845 3b04 	str.w	r3, [r5], #4
 801ca8e:	2301      	movs	r3, #1
 801ca90:	8102      	strh	r2, [r0, #8]
 801ca92:	4604      	mov	r4, r0
 801ca94:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801ca98:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801ca9c:	4b13      	ldr	r3, [pc, #76]	; (801caec <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801ca9e:	8142      	strh	r2, [r0, #10]
 801caa0:	f9b3 7000 	ldrsh.w	r7, [r3]
 801caa4:	4b12      	ldr	r3, [pc, #72]	; (801caf0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801caa6:	8182      	strh	r2, [r0, #12]
 801caa8:	81c2      	strh	r2, [r0, #14]
 801caaa:	8202      	strh	r2, [r0, #16]
 801caac:	8242      	strh	r2, [r0, #18]
 801caae:	8282      	strh	r2, [r0, #20]
 801cab0:	82c2      	strh	r2, [r0, #22]
 801cab2:	6202      	str	r2, [r0, #32]
 801cab4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801cab8:	6342      	str	r2, [r0, #52]	; 0x34
 801caba:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cabe:	6041      	str	r1, [r0, #4]
 801cac0:	4611      	mov	r1, r2
 801cac2:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801cac6:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801caca:	4628      	mov	r0, r5
 801cacc:	f7f2 fd9d 	bl	800f60a <_ZN8touchgfx8Drawable5setXYEss>
 801cad0:	4639      	mov	r1, r7
 801cad2:	4628      	mov	r0, r5
 801cad4:	f7f2 fdb7 	bl	800f646 <_ZN8touchgfx8Drawable8setWidthEs>
 801cad8:	4628      	mov	r0, r5
 801cada:	4631      	mov	r1, r6
 801cadc:	f7f2 fdc2 	bl	800f664 <_ZN8touchgfx8Drawable9setHeightEs>
 801cae0:	4620      	mov	r0, r4
 801cae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cae4:	0802c2c0 	.word	0x0802c2c0
 801cae8:	0802ad38 	.word	0x0802ad38
 801caec:	2000b410 	.word	0x2000b410
 801caf0:	2000b412 	.word	0x2000b412

0801caf4 <_ZN8touchgfx6Screen4drawEv>:
 801caf4:	4b09      	ldr	r3, [pc, #36]	; (801cb1c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801caf6:	b507      	push	{r0, r1, r2, lr}
 801caf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cafc:	2100      	movs	r1, #0
 801cafe:	4b08      	ldr	r3, [pc, #32]	; (801cb20 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801cb00:	9100      	str	r1, [sp, #0]
 801cb02:	4669      	mov	r1, sp
 801cb04:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cb08:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cb0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cb10:	6803      	ldr	r3, [r0, #0]
 801cb12:	689b      	ldr	r3, [r3, #8]
 801cb14:	4798      	blx	r3
 801cb16:	b003      	add	sp, #12
 801cb18:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb1c:	2000b410 	.word	0x2000b410
 801cb20:	2000b412 	.word	0x2000b412

0801cb24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb28:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cb2c:	b089      	sub	sp, #36	; 0x24
 801cb2e:	4680      	mov	r8, r0
 801cb30:	460c      	mov	r4, r1
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	4615      	mov	r5, r2
 801cb36:	dd0e      	ble.n	801cb56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cb38:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	dd0a      	ble.n	801cb56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cb40:	4628      	mov	r0, r5
 801cb42:	f7ff ff59 	bl	801c9f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cb46:	4621      	mov	r1, r4
 801cb48:	f7fe ffa0 	bl	801ba8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cb4c:	69eb      	ldr	r3, [r5, #28]
 801cb4e:	b928      	cbnz	r0, 801cb5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801cb50:	461d      	mov	r5, r3
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d1f4      	bne.n	801cb40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801cb56:	b009      	add	sp, #36	; 0x24
 801cb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb5c:	ae04      	add	r6, sp, #16
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d051      	beq.n	801cc06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801cb62:	682b      	ldr	r3, [r5, #0]
 801cb64:	4629      	mov	r1, r5
 801cb66:	a802      	add	r0, sp, #8
 801cb68:	68db      	ldr	r3, [r3, #12]
 801cb6a:	4798      	blx	r3
 801cb6c:	4628      	mov	r0, r5
 801cb6e:	f7ff ff5f 	bl	801ca30 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cb72:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801cb76:	4407      	add	r7, r0
 801cb78:	4628      	mov	r0, r5
 801cb7a:	f7ff ff6d 	bl	801ca58 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cb7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cb82:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801cb86:	b23f      	sxth	r7, r7
 801cb88:	4418      	add	r0, r3
 801cb8a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cb8e:	4621      	mov	r1, r4
 801cb90:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cb94:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cb98:	4630      	mov	r0, r6
 801cb9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb9e:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cba2:	f7fb f8ef 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801cba6:	4628      	mov	r0, r5
 801cba8:	f7ff ff26 	bl	801c9f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cbac:	ab06      	add	r3, sp, #24
 801cbae:	4602      	mov	r2, r0
 801cbb0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cbb4:	e883 0003 	stmia.w	r3, {r0, r1}
 801cbb8:	4611      	mov	r1, r2
 801cbba:	4618      	mov	r0, r3
 801cbbc:	f7fb f8e2 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801cbc0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cbc4:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cbc8:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801cbcc:	4299      	cmp	r1, r3
 801cbce:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801cbd2:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801cbd6:	d10b      	bne.n	801cbf0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801cbd8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cbdc:	4552      	cmp	r2, sl
 801cbde:	d107      	bne.n	801cbf0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801cbe0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cbe4:	455a      	cmp	r2, fp
 801cbe6:	d103      	bne.n	801cbf0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801cbe8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cbec:	454a      	cmp	r2, r9
 801cbee:	d00a      	beq.n	801cc06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801cbf0:	f1bb 0f00 	cmp.w	fp, #0
 801cbf4:	d002      	beq.n	801cbfc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801cbf6:	f1b9 0f00 	cmp.w	r9, #0
 801cbfa:	d12e      	bne.n	801cc5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 801cbfc:	69ea      	ldr	r2, [r5, #28]
 801cbfe:	4621      	mov	r1, r4
 801cc00:	4640      	mov	r0, r8
 801cc02:	f7ff ff8f 	bl	801cb24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc06:	4628      	mov	r0, r5
 801cc08:	f7ff fef6 	bl	801c9f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cc0c:	6861      	ldr	r1, [r4, #4]
 801cc0e:	4602      	mov	r2, r0
 801cc10:	4633      	mov	r3, r6
 801cc12:	6820      	ldr	r0, [r4, #0]
 801cc14:	c303      	stmia	r3!, {r0, r1}
 801cc16:	4611      	mov	r1, r2
 801cc18:	4630      	mov	r0, r6
 801cc1a:	f7fb f8b3 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801cc1e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	dd97      	ble.n	801cb56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cc26:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	dd93      	ble.n	801cb56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cc2e:	4628      	mov	r0, r5
 801cc30:	f7ff fefe 	bl	801ca30 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cc34:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cc38:	1a18      	subs	r0, r3, r0
 801cc3a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cc3e:	4628      	mov	r0, r5
 801cc40:	f7ff ff0a 	bl	801ca58 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cc44:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cc48:	4631      	mov	r1, r6
 801cc4a:	1a18      	subs	r0, r3, r0
 801cc4c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cc50:	4628      	mov	r0, r5
 801cc52:	682b      	ldr	r3, [r5, #0]
 801cc54:	689b      	ldr	r3, [r3, #8]
 801cc56:	4798      	blx	r3
 801cc58:	e77d      	b.n	801cb56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cc5a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cc5e:	fa1f f08a 	uxth.w	r0, sl
 801cc62:	4552      	cmp	r2, sl
 801cc64:	9000      	str	r0, [sp, #0]
 801cc66:	da12      	bge.n	801cc8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801cc68:	9301      	str	r3, [sp, #4]
 801cc6a:	9b00      	ldr	r3, [sp, #0]
 801cc6c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cc70:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cc74:	1a9a      	subs	r2, r3, r2
 801cc76:	f8ad 1010 	strh.w	r1, [sp, #16]
 801cc7a:	4631      	mov	r1, r6
 801cc7c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cc80:	4640      	mov	r0, r8
 801cc82:	f8ad 2016 	strh.w	r2, [sp, #22]
 801cc86:	69ea      	ldr	r2, [r5, #28]
 801cc88:	f7ff ff4c 	bl	801cb24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc8c:	9b01      	ldr	r3, [sp, #4]
 801cc8e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cc92:	b29f      	uxth	r7, r3
 801cc94:	429a      	cmp	r2, r3
 801cc96:	da0d      	bge.n	801ccb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801cc98:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cc9c:	1aba      	subs	r2, r7, r2
 801cc9e:	f8ad a012 	strh.w	sl, [sp, #18]
 801cca2:	4631      	mov	r1, r6
 801cca4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cca8:	4640      	mov	r0, r8
 801ccaa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ccae:	69ea      	ldr	r2, [r5, #28]
 801ccb0:	f7ff ff38 	bl	801cb24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ccb4:	8822      	ldrh	r2, [r4, #0]
 801ccb6:	445f      	add	r7, fp
 801ccb8:	88a3      	ldrh	r3, [r4, #4]
 801ccba:	b2bf      	uxth	r7, r7
 801ccbc:	4413      	add	r3, r2
 801ccbe:	b23a      	sxth	r2, r7
 801ccc0:	b29b      	uxth	r3, r3
 801ccc2:	b219      	sxth	r1, r3
 801ccc4:	4291      	cmp	r1, r2
 801ccc6:	dd0d      	ble.n	801cce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801ccc8:	1bdb      	subs	r3, r3, r7
 801ccca:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ccce:	f8ad a012 	strh.w	sl, [sp, #18]
 801ccd2:	4631      	mov	r1, r6
 801ccd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ccd8:	4640      	mov	r0, r8
 801ccda:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ccde:	69ea      	ldr	r2, [r5, #28]
 801cce0:	f7ff ff20 	bl	801cb24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cce4:	88e2      	ldrh	r2, [r4, #6]
 801cce6:	8863      	ldrh	r3, [r4, #2]
 801cce8:	4413      	add	r3, r2
 801ccea:	9a00      	ldr	r2, [sp, #0]
 801ccec:	444a      	add	r2, r9
 801ccee:	b29b      	uxth	r3, r3
 801ccf0:	fa1f f982 	uxth.w	r9, r2
 801ccf4:	b219      	sxth	r1, r3
 801ccf6:	fa0f f289 	sxth.w	r2, r9
 801ccfa:	428a      	cmp	r2, r1
 801ccfc:	da83      	bge.n	801cc06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801ccfe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cd02:	eba3 0309 	sub.w	r3, r3, r9
 801cd06:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cd0a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801cd0e:	4631      	mov	r1, r6
 801cd10:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cd14:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cd18:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd1c:	69ea      	ldr	r2, [r5, #28]
 801cd1e:	e76f      	b.n	801cc00 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801cd20 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801cd20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cd22:	2300      	movs	r3, #0
 801cd24:	aa02      	add	r2, sp, #8
 801cd26:	4604      	mov	r4, r0
 801cd28:	3004      	adds	r0, #4
 801cd2a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801cd2e:	460d      	mov	r5, r1
 801cd30:	f7fb f900 	bl	8017f34 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cd34:	9a01      	ldr	r2, [sp, #4]
 801cd36:	b11a      	cbz	r2, 801cd40 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801cd38:	4629      	mov	r1, r5
 801cd3a:	4620      	mov	r0, r4
 801cd3c:	f7ff fef2 	bl	801cb24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cd40:	b003      	add	sp, #12
 801cd42:	bd30      	pop	{r4, r5, pc}

0801cd44 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cd44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cd46:	4602      	mov	r2, r0
 801cd48:	4604      	mov	r4, r0
 801cd4a:	460d      	mov	r5, r1
 801cd4c:	466b      	mov	r3, sp
 801cd4e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cd52:	6851      	ldr	r1, [r2, #4]
 801cd54:	c303      	stmia	r3!, {r0, r1}
 801cd56:	4629      	mov	r1, r5
 801cd58:	4668      	mov	r0, sp
 801cd5a:	f7fb f813 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801cd5e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cd62:	4669      	mov	r1, sp
 801cd64:	b123      	cbz	r3, 801cd70 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801cd66:	4620      	mov	r0, r4
 801cd68:	f7ff ffda 	bl	801cd20 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cd6c:	b003      	add	sp, #12
 801cd6e:	bd30      	pop	{r4, r5, pc}
 801cd70:	1d20      	adds	r0, r4, #4
 801cd72:	f7fb f8a6 	bl	8017ec2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cd76:	e7f9      	b.n	801cd6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801cd78 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cd78:	460b      	mov	r3, r1
 801cd7a:	680a      	ldr	r2, [r1, #0]
 801cd7c:	1d01      	adds	r1, r0, #4
 801cd7e:	6952      	ldr	r2, [r2, #20]
 801cd80:	4618      	mov	r0, r3
 801cd82:	4710      	bx	r2

0801cd84 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cd84:	b510      	push	{r4, lr}
 801cd86:	4298      	cmp	r0, r3
 801cd88:	eb01 0402 	add.w	r4, r1, r2
 801cd8c:	b224      	sxth	r4, r4
 801cd8e:	d22c      	bcs.n	801cdea <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801cd90:	b35b      	cbz	r3, 801cdea <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801cd92:	ee07 0a90 	vmov	s15, r0
 801cd96:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801cd9a:	ee07 3a90 	vmov	s15, r3
 801cd9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801cda2:	ee07 2a90 	vmov	s15, r2
 801cda6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801cdaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cdae:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cdb2:	ee07 1a90 	vmov	s15, r1
 801cdb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cdba:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cdbe:	ee67 5a07 	vmul.f32	s11, s14, s14
 801cdc2:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cdc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cdca:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cdce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdd6:	bfcc      	ite	gt
 801cdd8:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cddc:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cde0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cde4:	ee17 3a90 	vmov	r3, s15
 801cde8:	b21c      	sxth	r4, r3
 801cdea:	4620      	mov	r0, r4
 801cdec:	bd10      	pop	{r4, pc}

0801cdee <_ZN8touchgfx12TextProviderC1Ev>:
 801cdee:	2300      	movs	r3, #0
 801cdf0:	2201      	movs	r2, #1
 801cdf2:	b510      	push	{r4, lr}
 801cdf4:	4604      	mov	r4, r0
 801cdf6:	60c3      	str	r3, [r0, #12]
 801cdf8:	7403      	strb	r3, [r0, #16]
 801cdfa:	82c3      	strh	r3, [r0, #22]
 801cdfc:	8303      	strh	r3, [r0, #24]
 801cdfe:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801ce00:	8603      	strh	r3, [r0, #48]	; 0x30
 801ce02:	86c3      	strh	r3, [r0, #54]	; 0x36
 801ce04:	8703      	strh	r3, [r0, #56]	; 0x38
 801ce06:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ce08:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801ce0c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801ce10:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801ce14:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801ce18:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801ce1c:	e9c0 3300 	strd	r3, r3, [r0]
 801ce20:	f7f7 fe0e 	bl	8014a40 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ce24:	4620      	mov	r0, r4
 801ce26:	bd10      	pop	{r4, pc}

0801ce28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ce28:	b530      	push	{r4, r5, lr}
 801ce2a:	2500      	movs	r5, #0
 801ce2c:	2401      	movs	r4, #1
 801ce2e:	6843      	ldr	r3, [r0, #4]
 801ce30:	b913      	cbnz	r3, 801ce38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ce32:	6803      	ldr	r3, [r0, #0]
 801ce34:	b1f3      	cbz	r3, 801ce74 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801ce36:	6043      	str	r3, [r0, #4]
 801ce38:	7c03      	ldrb	r3, [r0, #16]
 801ce3a:	b143      	cbz	r3, 801ce4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ce3c:	68c3      	ldr	r3, [r0, #12]
 801ce3e:	b12b      	cbz	r3, 801ce4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ce40:	881a      	ldrh	r2, [r3, #0]
 801ce42:	b11a      	cbz	r2, 801ce4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ce44:	1c9a      	adds	r2, r3, #2
 801ce46:	60c2      	str	r2, [r0, #12]
 801ce48:	8818      	ldrh	r0, [r3, #0]
 801ce4a:	bd30      	pop	{r4, r5, pc}
 801ce4c:	7405      	strb	r5, [r0, #16]
 801ce4e:	6843      	ldr	r3, [r0, #4]
 801ce50:	8819      	ldrh	r1, [r3, #0]
 801ce52:	b179      	cbz	r1, 801ce74 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801ce54:	1c9a      	adds	r2, r3, #2
 801ce56:	2902      	cmp	r1, #2
 801ce58:	6042      	str	r2, [r0, #4]
 801ce5a:	d1f5      	bne.n	801ce48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ce5c:	6883      	ldr	r3, [r0, #8]
 801ce5e:	1d1a      	adds	r2, r3, #4
 801ce60:	6082      	str	r2, [r0, #8]
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	60c3      	str	r3, [r0, #12]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d0e1      	beq.n	801ce2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce6a:	881b      	ldrh	r3, [r3, #0]
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d0de      	beq.n	801ce2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce70:	7404      	strb	r4, [r0, #16]
 801ce72:	e7dc      	b.n	801ce2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce74:	2000      	movs	r0, #0
 801ce76:	e7e8      	b.n	801ce4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ce78 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801ce78:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	6082      	str	r2, [r0, #8]
 801ce7e:	6001      	str	r1, [r0, #0]
 801ce80:	6043      	str	r3, [r0, #4]
 801ce82:	60c3      	str	r3, [r0, #12]
 801ce84:	7403      	strb	r3, [r0, #16]
 801ce86:	8603      	strh	r3, [r0, #48]	; 0x30
 801ce88:	8303      	strh	r3, [r0, #24]
 801ce8a:	8703      	strh	r3, [r0, #56]	; 0x38
 801ce8c:	b410      	push	{r4}
 801ce8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce92:	f7f7 bdd5 	b.w	8014a40 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ce96 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ce96:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce98:	4605      	mov	r5, r0
 801ce9a:	4608      	mov	r0, r1
 801ce9c:	b1f1      	cbz	r1, 801cedc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ce9e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801cea2:	460b      	mov	r3, r1
 801cea4:	f101 0708 	add.w	r7, r1, #8
 801cea8:	4622      	mov	r2, r4
 801ceaa:	6818      	ldr	r0, [r3, #0]
 801ceac:	3308      	adds	r3, #8
 801ceae:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ceb2:	4626      	mov	r6, r4
 801ceb4:	42bb      	cmp	r3, r7
 801ceb6:	c603      	stmia	r6!, {r0, r1}
 801ceb8:	4634      	mov	r4, r6
 801ceba:	d1f6      	bne.n	801ceaa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801cebc:	6818      	ldr	r0, [r3, #0]
 801cebe:	6030      	str	r0, [r6, #0]
 801cec0:	4610      	mov	r0, r2
 801cec2:	889b      	ldrh	r3, [r3, #4]
 801cec4:	80b3      	strh	r3, [r6, #4]
 801cec6:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801ceca:	015b      	lsls	r3, r3, #5
 801cecc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ced0:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801ced4:	430b      	orrs	r3, r1
 801ced6:	425b      	negs	r3, r3
 801ced8:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801cedc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cede <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801cede:	b538      	push	{r3, r4, r5, lr}
 801cee0:	460c      	mov	r4, r1
 801cee2:	6811      	ldr	r1, [r2, #0]
 801cee4:	4610      	mov	r0, r2
 801cee6:	68cd      	ldr	r5, [r1, #12]
 801cee8:	4619      	mov	r1, r3
 801ceea:	47a8      	blx	r5
 801ceec:	2800      	cmp	r0, #0
 801ceee:	bf08      	it	eq
 801cef0:	4620      	moveq	r0, r4
 801cef2:	bd38      	pop	{r3, r4, r5, pc}

0801cef4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cef6:	4604      	mov	r4, r0
 801cef8:	4615      	mov	r5, r2
 801cefa:	4608      	mov	r0, r1
 801cefc:	b93a      	cbnz	r2, 801cf0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801cefe:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801cf02:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801cf06:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801cf0a:	4628      	mov	r0, r5
 801cf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf0e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801cf12:	8893      	ldrh	r3, [r2, #4]
 801cf14:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801cf18:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801cf1c:	79ee      	ldrb	r6, [r5, #7]
 801cf1e:	4316      	orrs	r6, r2
 801cf20:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801cf24:	189a      	adds	r2, r3, r2
 801cf26:	b2b7      	uxth	r7, r6
 801cf28:	b291      	uxth	r1, r2
 801cf2a:	291d      	cmp	r1, #29
 801cf2c:	f200 8084 	bhi.w	801d038 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801cf30:	2201      	movs	r2, #1
 801cf32:	10f6      	asrs	r6, r6, #3
 801cf34:	408a      	lsls	r2, r1
 801cf36:	4978      	ldr	r1, [pc, #480]	; (801d118 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801cf38:	420a      	tst	r2, r1
 801cf3a:	d12e      	bne.n	801cf9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801cf3c:	f412 7f60 	tst.w	r2, #896	; 0x380
 801cf40:	d07a      	beq.n	801d038 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801cf42:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801cf46:	462b      	mov	r3, r5
 801cf48:	f105 0e08 	add.w	lr, r5, #8
 801cf4c:	4615      	mov	r5, r2
 801cf4e:	6818      	ldr	r0, [r3, #0]
 801cf50:	3308      	adds	r3, #8
 801cf52:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cf56:	4694      	mov	ip, r2
 801cf58:	4573      	cmp	r3, lr
 801cf5a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cf5e:	4662      	mov	r2, ip
 801cf60:	d1f5      	bne.n	801cf4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801cf62:	6818      	ldr	r0, [r3, #0]
 801cf64:	f8cc 0000 	str.w	r0, [ip]
 801cf68:	889b      	ldrh	r3, [r3, #4]
 801cf6a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801cf6e:	b2b3      	uxth	r3, r6
 801cf70:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801cf74:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801cf78:	1aca      	subs	r2, r1, r3
 801cf7a:	1bcf      	subs	r7, r1, r7
 801cf7c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801cf80:	b292      	uxth	r2, r2
 801cf82:	1afb      	subs	r3, r7, r3
 801cf84:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801cf88:	10d2      	asrs	r2, r2, #3
 801cf8a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801cf8e:	4302      	orrs	r2, r0
 801cf90:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801cf94:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801cf98:	e7b7      	b.n	801cf0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801cf9a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cf9c:	b92b      	cbnz	r3, 801cfaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801cf9e:	4b5f      	ldr	r3, [pc, #380]	; (801d11c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801cfa0:	21c0      	movs	r1, #192	; 0xc0
 801cfa2:	4a5f      	ldr	r2, [pc, #380]	; (801d120 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801cfa4:	485f      	ldr	r0, [pc, #380]	; (801d124 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801cfa6:	f00a fbb5 	bl	8027714 <__assert_func>
 801cfaa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801cfac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cfb0:	8b59      	ldrh	r1, [r3, #26]
 801cfb2:	f640 6333 	movw	r3, #3635	; 0xe33
 801cfb6:	4299      	cmp	r1, r3
 801cfb8:	d110      	bne.n	801cfdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801cfba:	6803      	ldr	r3, [r0, #0]
 801cfbc:	68db      	ldr	r3, [r3, #12]
 801cfbe:	4798      	blx	r3
 801cfc0:	7b41      	ldrb	r1, [r0, #13]
 801cfc2:	00cb      	lsls	r3, r1, #3
 801cfc4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cfc8:	7a03      	ldrb	r3, [r0, #8]
 801cfca:	0648      	lsls	r0, r1, #25
 801cfcc:	ea43 0302 	orr.w	r3, r3, r2
 801cfd0:	bf44      	itt	mi
 801cfd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cfd6:	b21b      	sxthmi	r3, r3
 801cfd8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801cfdc:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801cfe0:	462a      	mov	r2, r5
 801cfe2:	f105 0c08 	add.w	ip, r5, #8
 801cfe6:	443b      	add	r3, r7
 801cfe8:	4433      	add	r3, r6
 801cfea:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801cfee:	b29b      	uxth	r3, r3
 801cff0:	4635      	mov	r5, r6
 801cff2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801cff6:	6810      	ldr	r0, [r2, #0]
 801cff8:	3208      	adds	r2, #8
 801cffa:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801cffe:	4637      	mov	r7, r6
 801d000:	4562      	cmp	r2, ip
 801d002:	c703      	stmia	r7!, {r0, r1}
 801d004:	463e      	mov	r6, r7
 801d006:	d1f6      	bne.n	801cff6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801d008:	6810      	ldr	r0, [r2, #0]
 801d00a:	6038      	str	r0, [r7, #0]
 801d00c:	8892      	ldrh	r2, [r2, #4]
 801d00e:	80ba      	strh	r2, [r7, #4]
 801d010:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801d014:	10db      	asrs	r3, r3, #3
 801d016:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801d01a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d01e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d022:	4313      	orrs	r3, r2
 801d024:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801d028:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801d02c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801d030:	1a9b      	subs	r3, r3, r2
 801d032:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801d036:	e768      	b.n	801cf0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d038:	f023 0204 	bic.w	r2, r3, #4
 801d03c:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d040:	428a      	cmp	r2, r1
 801d042:	d003      	beq.n	801d04c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801d044:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d048:	4293      	cmp	r3, r2
 801d04a:	d120      	bne.n	801d08e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d04c:	3b01      	subs	r3, #1
 801d04e:	4602      	mov	r2, r0
 801d050:	4629      	mov	r1, r5
 801d052:	4620      	mov	r0, r4
 801d054:	b29b      	uxth	r3, r3
 801d056:	f7ff ff42 	bl	801cede <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d05a:	7b41      	ldrb	r1, [r0, #13]
 801d05c:	00cb      	lsls	r3, r1, #3
 801d05e:	0649      	lsls	r1, r1, #25
 801d060:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d064:	7a03      	ldrb	r3, [r0, #8]
 801d066:	ea43 0302 	orr.w	r3, r3, r2
 801d06a:	bf44      	itt	mi
 801d06c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d070:	b21b      	sxthmi	r3, r3
 801d072:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d076:	7b6b      	ldrb	r3, [r5, #13]
 801d078:	7aaa      	ldrb	r2, [r5, #10]
 801d07a:	005b      	lsls	r3, r3, #1
 801d07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d080:	4313      	orrs	r3, r2
 801d082:	115a      	asrs	r2, r3, #5
 801d084:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d088:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801d08c:	e035      	b.n	801d0fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801d08e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d092:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d096:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d09a:	7a2a      	ldrb	r2, [r5, #8]
 801d09c:	ea42 0201 	orr.w	r2, r2, r1
 801d0a0:	f640 6109 	movw	r1, #3593	; 0xe09
 801d0a4:	bf1c      	itt	ne
 801d0a6:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d0aa:	b212      	sxthne	r2, r2
 801d0ac:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801d0b0:	f023 0210 	bic.w	r2, r3, #16
 801d0b4:	428a      	cmp	r2, r1
 801d0b6:	d003      	beq.n	801d0c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801d0b8:	f640 6213 	movw	r2, #3603	; 0xe13
 801d0bc:	4293      	cmp	r3, r2
 801d0be:	d129      	bne.n	801d114 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801d0c0:	7b6e      	ldrb	r6, [r5, #13]
 801d0c2:	4629      	mov	r1, r5
 801d0c4:	0076      	lsls	r6, r6, #1
 801d0c6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d0ca:	7aae      	ldrb	r6, [r5, #10]
 801d0cc:	4316      	orrs	r6, r2
 801d0ce:	f640 6213 	movw	r2, #3603	; 0xe13
 801d0d2:	4293      	cmp	r3, r2
 801d0d4:	4602      	mov	r2, r0
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	bf16      	itet	ne
 801d0da:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d0de:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d0e2:	b29b      	uxthne	r3, r3
 801d0e4:	f7ff fefb 	bl	801cede <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d0e8:	7b43      	ldrb	r3, [r0, #13]
 801d0ea:	7a82      	ldrb	r2, [r0, #10]
 801d0ec:	005b      	lsls	r3, r3, #1
 801d0ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d0f2:	4313      	orrs	r3, r2
 801d0f4:	1af6      	subs	r6, r6, r3
 801d0f6:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801d0fa:	7b69      	ldrb	r1, [r5, #13]
 801d0fc:	00cb      	lsls	r3, r1, #3
 801d0fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d102:	7a2b      	ldrb	r3, [r5, #8]
 801d104:	4313      	orrs	r3, r2
 801d106:	064a      	lsls	r2, r1, #25
 801d108:	bf44      	itt	mi
 801d10a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d10e:	b21b      	sxthmi	r3, r3
 801d110:	1bdb      	subs	r3, r3, r7
 801d112:	e73f      	b.n	801cf94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801d114:	2300      	movs	r3, #0
 801d116:	e7b7      	b.n	801d088 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801d118:	3fc00079 	.word	0x3fc00079
 801d11c:	0802c2ec 	.word	0x0802c2ec
 801d120:	0802c55e 	.word	0x0802c55e
 801d124:	0802c2f5 	.word	0x0802c2f5

0801d128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d12c:	4604      	mov	r4, r0
 801d12e:	b942      	cbnz	r2, 801d142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d134:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801d138:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801d13c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801d140:	e046      	b.n	801d1d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d142:	7b51      	ldrb	r1, [r2, #13]
 801d144:	8893      	ldrh	r3, [r2, #4]
 801d146:	010f      	lsls	r7, r1, #4
 801d148:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d14c:	79d7      	ldrb	r7, [r2, #7]
 801d14e:	4307      	orrs	r7, r0
 801d150:	2f04      	cmp	r7, #4
 801d152:	b2bd      	uxth	r5, r7
 801d154:	bfcc      	ite	gt
 801d156:	08bf      	lsrgt	r7, r7, #2
 801d158:	2701      	movle	r7, #1
 801d15a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d15e:	f200 80ab 	bhi.w	801d2b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801d162:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d166:	4283      	cmp	r3, r0
 801d168:	d216      	bcs.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d16a:	f240 605b 	movw	r0, #1627	; 0x65b
 801d16e:	4283      	cmp	r3, r0
 801d170:	d859      	bhi.n	801d226 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801d172:	f240 6057 	movw	r0, #1623	; 0x657
 801d176:	4283      	cmp	r3, r0
 801d178:	d20e      	bcs.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d17a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d17e:	d24a      	bcs.n	801d216 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801d180:	f240 604e 	movw	r0, #1614	; 0x64e
 801d184:	4283      	cmp	r3, r0
 801d186:	d207      	bcs.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d188:	f240 601a 	movw	r0, #1562	; 0x61a
 801d18c:	4283      	cmp	r3, r0
 801d18e:	d02a      	beq.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d190:	d821      	bhi.n	801d1d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801d192:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d196:	d35b      	bcc.n	801d250 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d198:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801d19c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d1a0:	f040 80d0 	bne.w	801d344 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d1a4:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801d1a8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d1ac:	f040 80ca 	bne.w	801d344 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d1b0:	00cb      	lsls	r3, r1, #3
 801d1b2:	0649      	lsls	r1, r1, #25
 801d1b4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d1b8:	7a13      	ldrb	r3, [r2, #8]
 801d1ba:	ea43 0300 	orr.w	r3, r3, r0
 801d1be:	bf44      	itt	mi
 801d1c0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d1c4:	b21b      	sxthmi	r3, r3
 801d1c6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d1ca:	1b5d      	subs	r5, r3, r5
 801d1cc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801d1d0:	4610      	mov	r0, r2
 801d1d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1d6:	f240 604b 	movw	r0, #1611	; 0x64b
 801d1da:	4283      	cmp	r3, r0
 801d1dc:	d338      	bcc.n	801d250 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d1de:	f240 604c 	movw	r0, #1612	; 0x64c
 801d1e2:	4283      	cmp	r3, r0
 801d1e4:	d9d8      	bls.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d1e6:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801d1ea:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801d1ee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d1f2:	f040 80f2 	bne.w	801d3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d1f6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d1fa:	f040 80ee 	bne.w	801d3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d1fe:	00cb      	lsls	r3, r1, #3
 801d200:	064e      	lsls	r6, r1, #25
 801d202:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d206:	7a13      	ldrb	r3, [r2, #8]
 801d208:	ea43 0300 	orr.w	r3, r3, r0
 801d20c:	bf44      	itt	mi
 801d20e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d212:	b21b      	sxthmi	r3, r3
 801d214:	e7d9      	b.n	801d1ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801d216:	f240 6054 	movw	r0, #1620	; 0x654
 801d21a:	4283      	cmp	r3, r0
 801d21c:	d8e3      	bhi.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d21e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d222:	d9e0      	bls.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d224:	e7b8      	b.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d226:	f240 6074 	movw	r0, #1652	; 0x674
 801d22a:	4283      	cmp	r3, r0
 801d22c:	d0b4      	beq.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d22e:	d82d      	bhi.n	801d28c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801d230:	f240 605e 	movw	r0, #1630	; 0x65e
 801d234:	4283      	cmp	r3, r0
 801d236:	d804      	bhi.n	801d242 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801d238:	f240 605d 	movw	r0, #1629	; 0x65d
 801d23c:	4283      	cmp	r3, r0
 801d23e:	d3d2      	bcc.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d240:	e7aa      	b.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d242:	f240 605f 	movw	r0, #1631	; 0x65f
 801d246:	4283      	cmp	r3, r0
 801d248:	d0cd      	beq.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d24a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d24e:	d0a3      	beq.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d250:	00cb      	lsls	r3, r1, #3
 801d252:	0649      	lsls	r1, r1, #25
 801d254:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d258:	7a13      	ldrb	r3, [r2, #8]
 801d25a:	ea43 0300 	orr.w	r3, r3, r0
 801d25e:	bf44      	itt	mi
 801d260:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d264:	b21b      	sxthmi	r3, r3
 801d266:	1b5d      	subs	r5, r3, r5
 801d268:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d26c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801d270:	7b53      	ldrb	r3, [r2, #13]
 801d272:	015b      	lsls	r3, r3, #5
 801d274:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d278:	7993      	ldrb	r3, [r2, #6]
 801d27a:	430b      	orrs	r3, r1
 801d27c:	2105      	movs	r1, #5
 801d27e:	005b      	lsls	r3, r3, #1
 801d280:	fb93 f3f1 	sdiv	r3, r3, r1
 801d284:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d288:	440b      	add	r3, r1
 801d28a:	e757      	b.n	801d13c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d28c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d290:	4283      	cmp	r3, r0
 801d292:	d809      	bhi.n	801d2a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801d294:	f240 60df 	movw	r0, #1759	; 0x6df
 801d298:	4283      	cmp	r3, r0
 801d29a:	f4bf af7d 	bcs.w	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d29e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d2a2:	2b05      	cmp	r3, #5
 801d2a4:	d8d4      	bhi.n	801d250 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d2a6:	e777      	b.n	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d2a8:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d2ac:	4283      	cmp	r3, r0
 801d2ae:	d09a      	beq.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d2b0:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d2b4:	4283      	cmp	r3, r0
 801d2b6:	e7ca      	b.n	801d24e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801d2b8:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d2bc:	d22b      	bcs.n	801d316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801d2be:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d2c2:	4283      	cmp	r3, r0
 801d2c4:	d28f      	bcs.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d2c6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d2ca:	4283      	cmp	r3, r0
 801d2cc:	d816      	bhi.n	801d2fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801d2ce:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d2d2:	4283      	cmp	r3, r0
 801d2d4:	f4bf af60 	bcs.w	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d2d8:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d2dc:	4283      	cmp	r3, r0
 801d2de:	d80a      	bhi.n	801d2f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801d2e0:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d2e4:	4283      	cmp	r3, r0
 801d2e6:	f4bf af57 	bcs.w	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d2ea:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d2ee:	4283      	cmp	r3, r0
 801d2f0:	f43f af79 	beq.w	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d2f4:	e7ac      	b.n	801d250 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d2f6:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d2fa:	e7f8      	b.n	801d2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801d2fc:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d300:	4283      	cmp	r3, r0
 801d302:	d802      	bhi.n	801d30a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801d304:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d308:	e798      	b.n	801d23c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801d30a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d30e:	4283      	cmp	r3, r0
 801d310:	f47f af42 	bne.w	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d314:	e767      	b.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d316:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d31a:	4283      	cmp	r3, r0
 801d31c:	f43f af63 	beq.w	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d320:	d802      	bhi.n	801d328 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801d322:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d326:	e7f2      	b.n	801d30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801d328:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d32c:	4283      	cmp	r3, r0
 801d32e:	d805      	bhi.n	801d33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801d330:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d334:	4283      	cmp	r3, r0
 801d336:	f4ff af2f 	bcc.w	801d198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d33a:	e754      	b.n	801d1e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d33c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d340:	4283      	cmp	r3, r0
 801d342:	e7af      	b.n	801d2a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801d344:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801d348:	4617      	mov	r7, r2
 801d34a:	f102 0808 	add.w	r8, r2, #8
 801d34e:	4666      	mov	r6, ip
 801d350:	6838      	ldr	r0, [r7, #0]
 801d352:	3708      	adds	r7, #8
 801d354:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d358:	46e6      	mov	lr, ip
 801d35a:	4547      	cmp	r7, r8
 801d35c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d360:	46f4      	mov	ip, lr
 801d362:	d1f5      	bne.n	801d350 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801d364:	6838      	ldr	r0, [r7, #0]
 801d366:	f8ce 0000 	str.w	r0, [lr]
 801d36a:	88b9      	ldrh	r1, [r7, #4]
 801d36c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d370:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801d374:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d378:	d009      	beq.n	801d38e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d37a:	7b51      	ldrb	r1, [r2, #13]
 801d37c:	7992      	ldrb	r2, [r2, #6]
 801d37e:	0149      	lsls	r1, r1, #5
 801d380:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d384:	4311      	orrs	r1, r2
 801d386:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d38a:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801d38e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d392:	d00d      	beq.n	801d3b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801d394:	442b      	add	r3, r5
 801d396:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801d39a:	b29b      	uxth	r3, r3
 801d39c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d3a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801d3a4:	10db      	asrs	r3, r3, #3
 801d3a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d3aa:	4313      	orrs	r3, r2
 801d3ac:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801d3b0:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801d3b4:	00cb      	lsls	r3, r1, #3
 801d3b6:	064f      	lsls	r7, r1, #25
 801d3b8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d3bc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d3c0:	ea43 0302 	orr.w	r3, r3, r2
 801d3c4:	bf44      	itt	mi
 801d3c6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d3ca:	b21b      	sxthmi	r3, r3
 801d3cc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d3d0:	1b5d      	subs	r5, r3, r5
 801d3d2:	4632      	mov	r2, r6
 801d3d4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801d3d8:	e6fa      	b.n	801d1d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d3da:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801d3de:	4694      	mov	ip, r2
 801d3e0:	f102 0908 	add.w	r9, r2, #8
 801d3e4:	4676      	mov	r6, lr
 801d3e6:	f8dc 0000 	ldr.w	r0, [ip]
 801d3ea:	f10c 0c08 	add.w	ip, ip, #8
 801d3ee:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801d3f2:	46f0      	mov	r8, lr
 801d3f4:	45cc      	cmp	ip, r9
 801d3f6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d3fa:	46c6      	mov	lr, r8
 801d3fc:	d1f3      	bne.n	801d3e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801d3fe:	f8dc 0000 	ldr.w	r0, [ip]
 801d402:	f8c8 0000 	str.w	r0, [r8]
 801d406:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801d40a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d40e:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801d412:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d416:	d009      	beq.n	801d42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801d418:	7b51      	ldrb	r1, [r2, #13]
 801d41a:	7992      	ldrb	r2, [r2, #6]
 801d41c:	0149      	lsls	r1, r1, #5
 801d41e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d422:	4311      	orrs	r1, r2
 801d424:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d428:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801d42c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d430:	d00d      	beq.n	801d44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801d432:	1bdb      	subs	r3, r3, r7
 801d434:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801d438:	b29b      	uxth	r3, r3
 801d43a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d43e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801d442:	10db      	asrs	r3, r3, #3
 801d444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d448:	4313      	orrs	r3, r2
 801d44a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801d44e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801d452:	00cb      	lsls	r3, r1, #3
 801d454:	0648      	lsls	r0, r1, #25
 801d456:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d45a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d45e:	ea43 0302 	orr.w	r3, r3, r2
 801d462:	bf44      	itt	mi
 801d464:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d468:	b21b      	sxthmi	r3, r3
 801d46a:	e7b1      	b.n	801d3d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801d46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d470:	461d      	mov	r5, r3
 801d472:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801d474:	4604      	mov	r4, r0
 801d476:	4617      	mov	r7, r2
 801d478:	b92b      	cbnz	r3, 801d486 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801d47a:	4b23      	ldr	r3, [pc, #140]	; (801d508 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 801d47c:	21c0      	movs	r1, #192	; 0xc0
 801d47e:	4a23      	ldr	r2, [pc, #140]	; (801d50c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 801d480:	4823      	ldr	r0, [pc, #140]	; (801d510 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801d482:	f00a f947 	bl	8027714 <__assert_func>
 801d486:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801d488:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d48c:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801d490:	f7f7 fa32 	bl	80148f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d494:	683b      	ldr	r3, [r7, #0]
 801d496:	4601      	mov	r1, r0
 801d498:	4606      	mov	r6, r0
 801d49a:	4638      	mov	r0, r7
 801d49c:	68db      	ldr	r3, [r3, #12]
 801d49e:	4798      	blx	r3
 801d4a0:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d4a4:	4602      	mov	r2, r0
 801d4a6:	6028      	str	r0, [r5, #0]
 801d4a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d4ac:	d215      	bcs.n	801d4da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801d4ae:	4643      	mov	r3, r8
 801d4b0:	4639      	mov	r1, r7
 801d4b2:	4620      	mov	r0, r4
 801d4b4:	f7ff fe38 	bl	801d128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d4b8:	6028      	str	r0, [r5, #0]
 801d4ba:	682b      	ldr	r3, [r5, #0]
 801d4bc:	b143      	cbz	r3, 801d4d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d4be:	7b5a      	ldrb	r2, [r3, #13]
 801d4c0:	7a9b      	ldrb	r3, [r3, #10]
 801d4c2:	0052      	lsls	r2, r2, #1
 801d4c4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d4c8:	4313      	orrs	r3, r2
 801d4ca:	bf0c      	ite	eq
 801d4cc:	2301      	moveq	r3, #1
 801d4ce:	2300      	movne	r3, #0
 801d4d0:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d4d4:	4630      	mov	r0, r6
 801d4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4da:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801d4de:	b29b      	uxth	r3, r3
 801d4e0:	2b7f      	cmp	r3, #127	; 0x7f
 801d4e2:	d804      	bhi.n	801d4ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801d4e4:	4639      	mov	r1, r7
 801d4e6:	4620      	mov	r0, r4
 801d4e8:	f7ff fd04 	bl	801cef4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d4ec:	e7e4      	b.n	801d4b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801d4ee:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d0e1      	beq.n	801d4ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801d4f6:	f640 1302 	movw	r3, #2306	; 0x902
 801d4fa:	429e      	cmp	r6, r3
 801d4fc:	d1dd      	bne.n	801d4ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801d4fe:	4601      	mov	r1, r0
 801d500:	4620      	mov	r0, r4
 801d502:	f7ff fcc8 	bl	801ce96 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d506:	e7d7      	b.n	801d4b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801d508:	0802c2ec 	.word	0x0802c2ec
 801d50c:	0802c55e 	.word	0x0802c55e
 801d510:	0802c2f5 	.word	0x0802c2f5

0801d514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d518:	461d      	mov	r5, r3
 801d51a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801d51c:	4604      	mov	r4, r0
 801d51e:	4617      	mov	r7, r2
 801d520:	b92b      	cbnz	r3, 801d52e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801d522:	4b25      	ldr	r3, [pc, #148]	; (801d5b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 801d524:	21c0      	movs	r1, #192	; 0xc0
 801d526:	4a25      	ldr	r2, [pc, #148]	; (801d5bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801d528:	4825      	ldr	r0, [pc, #148]	; (801d5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801d52a:	f00a f8f3 	bl	8027714 <__assert_func>
 801d52e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801d530:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d534:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801d538:	f7f7 f9de 	bl	80148f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d53c:	683b      	ldr	r3, [r7, #0]
 801d53e:	4601      	mov	r1, r0
 801d540:	4606      	mov	r6, r0
 801d542:	4638      	mov	r0, r7
 801d544:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d548:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d54c:	47c8      	blx	r9
 801d54e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d552:	4602      	mov	r2, r0
 801d554:	6028      	str	r0, [r5, #0]
 801d556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d55a:	d215      	bcs.n	801d588 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801d55c:	4643      	mov	r3, r8
 801d55e:	4639      	mov	r1, r7
 801d560:	4620      	mov	r0, r4
 801d562:	f7ff fde1 	bl	801d128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d566:	6028      	str	r0, [r5, #0]
 801d568:	682b      	ldr	r3, [r5, #0]
 801d56a:	b143      	cbz	r3, 801d57e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801d56c:	7b5a      	ldrb	r2, [r3, #13]
 801d56e:	7a9b      	ldrb	r3, [r3, #10]
 801d570:	0052      	lsls	r2, r2, #1
 801d572:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d576:	4313      	orrs	r3, r2
 801d578:	bf0c      	ite	eq
 801d57a:	2301      	moveq	r3, #1
 801d57c:	2300      	movne	r3, #0
 801d57e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d582:	4630      	mov	r0, r6
 801d584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d588:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801d58c:	b29b      	uxth	r3, r3
 801d58e:	2b7f      	cmp	r3, #127	; 0x7f
 801d590:	d804      	bhi.n	801d59c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801d592:	4639      	mov	r1, r7
 801d594:	4620      	mov	r0, r4
 801d596:	f7ff fcad 	bl	801cef4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d59a:	e7e4      	b.n	801d566 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801d59c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d0e1      	beq.n	801d568 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801d5a4:	f640 1302 	movw	r3, #2306	; 0x902
 801d5a8:	429e      	cmp	r6, r3
 801d5aa:	d1dd      	bne.n	801d568 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801d5ac:	4601      	mov	r1, r0
 801d5ae:	4620      	mov	r0, r4
 801d5b0:	f7ff fc71 	bl	801ce96 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d5b4:	e7d7      	b.n	801d566 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801d5b6:	bf00      	nop
 801d5b8:	0802c2ec 	.word	0x0802c2ec
 801d5bc:	0802c55e 	.word	0x0802c55e
 801d5c0:	0802c2f5 	.word	0x0802c2f5

0801d5c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d5c4:	b510      	push	{r4, lr}
 801d5c6:	4604      	mov	r4, r0
 801d5c8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801d5ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d5cc:	b9d9      	cbnz	r1, 801d606 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801d5ce:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d5d0:	2b0a      	cmp	r3, #10
 801d5d2:	d036      	beq.n	801d642 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801d5d4:	4620      	mov	r0, r4
 801d5d6:	f7ff fc27 	bl	801ce28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d5da:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d5dc:	2b09      	cmp	r3, #9
 801d5de:	d906      	bls.n	801d5ee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801d5e0:	4b18      	ldr	r3, [pc, #96]	; (801d644 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801d5e2:	f44f 7182 	mov.w	r1, #260	; 0x104
 801d5e6:	4a18      	ldr	r2, [pc, #96]	; (801d648 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801d5e8:	4818      	ldr	r0, [pc, #96]	; (801d64c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801d5ea:	f00a f893 	bl	8027714 <__assert_func>
 801d5ee:	1c5a      	adds	r2, r3, #1
 801d5f0:	8622      	strh	r2, [r4, #48]	; 0x30
 801d5f2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801d5f4:	4413      	add	r3, r2
 801d5f6:	b29b      	uxth	r3, r3
 801d5f8:	2b09      	cmp	r3, #9
 801d5fa:	bf88      	it	hi
 801d5fc:	3b0a      	subhi	r3, #10
 801d5fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d602:	8358      	strh	r0, [r3, #26]
 801d604:	e7e3      	b.n	801d5ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801d606:	2b0a      	cmp	r3, #10
 801d608:	d01b      	beq.n	801d642 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801d60a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d60c:	3901      	subs	r1, #1
 801d60e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d612:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801d614:	8721      	strh	r1, [r4, #56]	; 0x38
 801d616:	1c51      	adds	r1, r2, #1
 801d618:	b289      	uxth	r1, r1
 801d61a:	2901      	cmp	r1, #1
 801d61c:	bf8a      	itet	hi
 801d61e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d622:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801d624:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801d626:	2b09      	cmp	r3, #9
 801d628:	d8da      	bhi.n	801d5e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801d62a:	1c5a      	adds	r2, r3, #1
 801d62c:	8622      	strh	r2, [r4, #48]	; 0x30
 801d62e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801d630:	4413      	add	r3, r2
 801d632:	b29b      	uxth	r3, r3
 801d634:	2b09      	cmp	r3, #9
 801d636:	bf88      	it	hi
 801d638:	3b0a      	subhi	r3, #10
 801d63a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d63e:	8358      	strh	r0, [r3, #26]
 801d640:	e7c2      	b.n	801d5c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d642:	bd10      	pop	{r4, pc}
 801d644:	0802c321 	.word	0x0802c321
 801d648:	0802c6b4 	.word	0x0802c6b4
 801d64c:	0802c2f5 	.word	0x0802c2f5

0801d650 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d650:	b538      	push	{r3, r4, r5, lr}
 801d652:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801d654:	4604      	mov	r4, r0
 801d656:	b92a      	cbnz	r2, 801d664 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801d658:	4b13      	ldr	r3, [pc, #76]	; (801d6a8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801d65a:	21d5      	movs	r1, #213	; 0xd5
 801d65c:	4a13      	ldr	r2, [pc, #76]	; (801d6ac <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801d65e:	4814      	ldr	r0, [pc, #80]	; (801d6b0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801d660:	f00a f858 	bl	8027714 <__assert_func>
 801d664:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801d666:	3a01      	subs	r2, #1
 801d668:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801d66c:	8b4d      	ldrh	r5, [r1, #26]
 801d66e:	8602      	strh	r2, [r0, #48]	; 0x30
 801d670:	1c5a      	adds	r2, r3, #1
 801d672:	b292      	uxth	r2, r2
 801d674:	2a09      	cmp	r2, #9
 801d676:	bf8a      	itet	hi
 801d678:	3b09      	subhi	r3, #9
 801d67a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801d67c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801d67e:	f7ff ffa1 	bl	801d5c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d682:	8b23      	ldrh	r3, [r4, #24]
 801d684:	2b01      	cmp	r3, #1
 801d686:	bf9c      	itt	ls
 801d688:	3301      	addls	r3, #1
 801d68a:	8323      	strhls	r3, [r4, #24]
 801d68c:	8ae3      	ldrh	r3, [r4, #22]
 801d68e:	b90b      	cbnz	r3, 801d694 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801d690:	2302      	movs	r3, #2
 801d692:	82e3      	strh	r3, [r4, #22]
 801d694:	8ae3      	ldrh	r3, [r4, #22]
 801d696:	4628      	mov	r0, r5
 801d698:	3b01      	subs	r3, #1
 801d69a:	b29b      	uxth	r3, r3
 801d69c:	82e3      	strh	r3, [r4, #22]
 801d69e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d6a2:	8265      	strh	r5, [r4, #18]
 801d6a4:	bd38      	pop	{r3, r4, r5, pc}
 801d6a6:	bf00      	nop
 801d6a8:	0802c2ec 	.word	0x0802c2ec
 801d6ac:	0802c609 	.word	0x0802c609
 801d6b0:	0802c2f5 	.word	0x0802c2f5

0801d6b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d6b4:	428a      	cmp	r2, r1
 801d6b6:	b538      	push	{r3, r4, r5, lr}
 801d6b8:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801d6ba:	d90c      	bls.n	801d6d6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801d6bc:	b92c      	cbnz	r4, 801d6ca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801d6be:	4b1c      	ldr	r3, [pc, #112]	; (801d730 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801d6c0:	21e1      	movs	r1, #225	; 0xe1
 801d6c2:	4a1c      	ldr	r2, [pc, #112]	; (801d734 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801d6c4:	481c      	ldr	r0, [pc, #112]	; (801d738 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801d6c6:	f00a f825 	bl	8027714 <__assert_func>
 801d6ca:	3c01      	subs	r4, #1
 801d6cc:	4b1b      	ldr	r3, [pc, #108]	; (801d73c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801d6ce:	4a1c      	ldr	r2, [pc, #112]	; (801d740 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801d6d0:	21c5      	movs	r1, #197	; 0xc5
 801d6d2:	8604      	strh	r4, [r0, #48]	; 0x30
 801d6d4:	e7f6      	b.n	801d6c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d6d6:	428c      	cmp	r4, r1
 801d6d8:	d203      	bcs.n	801d6e2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801d6da:	4b1a      	ldr	r3, [pc, #104]	; (801d744 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801d6dc:	21cb      	movs	r1, #203	; 0xcb
 801d6de:	4a1a      	ldr	r2, [pc, #104]	; (801d748 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801d6e0:	e7f0      	b.n	801d6c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d6e2:	1a64      	subs	r4, r4, r1
 801d6e4:	250a      	movs	r5, #10
 801d6e6:	8604      	strh	r4, [r0, #48]	; 0x30
 801d6e8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801d6ea:	4421      	add	r1, r4
 801d6ec:	b289      	uxth	r1, r1
 801d6ee:	2909      	cmp	r1, #9
 801d6f0:	bf88      	it	hi
 801d6f2:	390a      	subhi	r1, #10
 801d6f4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801d6f6:	b1ba      	cbz	r2, 801d728 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801d6f8:	3a01      	subs	r2, #1
 801d6fa:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801d6fc:	b292      	uxth	r2, r2
 801d6fe:	2909      	cmp	r1, #9
 801d700:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d704:	d903      	bls.n	801d70e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801d706:	4b11      	ldr	r3, [pc, #68]	; (801d74c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801d708:	21e6      	movs	r1, #230	; 0xe6
 801d70a:	4a11      	ldr	r2, [pc, #68]	; (801d750 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801d70c:	e7da      	b.n	801d6c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d70e:	3101      	adds	r1, #1
 801d710:	8601      	strh	r1, [r0, #48]	; 0x30
 801d712:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801d714:	b901      	cbnz	r1, 801d718 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801d716:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801d718:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801d71a:	3901      	subs	r1, #1
 801d71c:	b289      	uxth	r1, r1
 801d71e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801d720:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d724:	834c      	strh	r4, [r1, #26]
 801d726:	e7e6      	b.n	801d6f6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801d728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d72c:	f7ff bf4a 	b.w	801d5c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d730:	0802c2ec 	.word	0x0802c2ec
 801d734:	0802c3e2 	.word	0x0802c3e2
 801d738:	0802c2f5 	.word	0x0802c2f5
 801d73c:	0802c32d 	.word	0x0802c32d
 801d740:	0802c48c 	.word	0x0802c48c
 801d744:	0802c33b 	.word	0x0802c33b
 801d748:	0802c763 	.word	0x0802c763
 801d74c:	0802c347 	.word	0x0802c347
 801d750:	0802c35a 	.word	0x0802c35a

0801d754 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d754:	3a01      	subs	r2, #1
 801d756:	b570      	push	{r4, r5, r6, lr}
 801d758:	b292      	uxth	r2, r2
 801d75a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801d75e:	42b2      	cmp	r2, r6
 801d760:	d019      	beq.n	801d796 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801d762:	8b04      	ldrh	r4, [r0, #24]
 801d764:	f831 5b02 	ldrh.w	r5, [r1], #2
 801d768:	4294      	cmp	r4, r2
 801d76a:	d805      	bhi.n	801d778 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801d76c:	4b19      	ldr	r3, [pc, #100]	; (801d7d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801d76e:	4a1a      	ldr	r2, [pc, #104]	; (801d7d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801d770:	21c5      	movs	r1, #197	; 0xc5
 801d772:	481a      	ldr	r0, [pc, #104]	; (801d7dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801d774:	f009 ffce 	bl	8027714 <__assert_func>
 801d778:	8ac4      	ldrh	r4, [r0, #22]
 801d77a:	4414      	add	r4, r2
 801d77c:	3a01      	subs	r2, #1
 801d77e:	b2a4      	uxth	r4, r4
 801d780:	b292      	uxth	r2, r2
 801d782:	2c01      	cmp	r4, #1
 801d784:	bf88      	it	hi
 801d786:	3c02      	subhi	r4, #2
 801d788:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d78c:	8a64      	ldrh	r4, [r4, #18]
 801d78e:	42ac      	cmp	r4, r5
 801d790:	d0e5      	beq.n	801d75e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801d792:	2000      	movs	r0, #0
 801d794:	bd70      	pop	{r4, r5, r6, pc}
 801d796:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d79a:	2400      	movs	r4, #0
 801d79c:	4413      	add	r3, r2
 801d79e:	b2a2      	uxth	r2, r4
 801d7a0:	429a      	cmp	r2, r3
 801d7a2:	da14      	bge.n	801d7ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801d7a4:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801d7a6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d7aa:	4296      	cmp	r6, r2
 801d7ac:	d802      	bhi.n	801d7b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801d7ae:	4b09      	ldr	r3, [pc, #36]	; (801d7d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801d7b0:	4a0b      	ldr	r2, [pc, #44]	; (801d7e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801d7b2:	e7dd      	b.n	801d770 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801d7b4:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801d7b6:	3401      	adds	r4, #1
 801d7b8:	4432      	add	r2, r6
 801d7ba:	b292      	uxth	r2, r2
 801d7bc:	2a09      	cmp	r2, #9
 801d7be:	bf88      	it	hi
 801d7c0:	3a0a      	subhi	r2, #10
 801d7c2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d7c6:	8b52      	ldrh	r2, [r2, #26]
 801d7c8:	42aa      	cmp	r2, r5
 801d7ca:	d0e8      	beq.n	801d79e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801d7cc:	e7e1      	b.n	801d792 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801d7ce:	2001      	movs	r0, #1
 801d7d0:	e7e0      	b.n	801d794 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801d7d2:	bf00      	nop
 801d7d4:	0802c32d 	.word	0x0802c32d
 801d7d8:	0802c7e7 	.word	0x0802c7e7
 801d7dc:	0802c2f5 	.word	0x0802c2f5
 801d7e0:	0802c48c 	.word	0x0802c48c

0801d7e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d7e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7e8:	4605      	mov	r5, r0
 801d7ea:	4616      	mov	r6, r2
 801d7ec:	1c8c      	adds	r4, r1, #2
 801d7ee:	8809      	ldrh	r1, [r1, #0]
 801d7f0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d7f4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d7f8:	42b3      	cmp	r3, r6
 801d7fa:	d124      	bne.n	801d846 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d7fc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d800:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d804:	f001 070f 	and.w	r7, r1, #15
 801d808:	4652      	mov	r2, sl
 801d80a:	f8cd 8000 	str.w	r8, [sp]
 801d80e:	464b      	mov	r3, r9
 801d810:	4621      	mov	r1, r4
 801d812:	4628      	mov	r0, r5
 801d814:	f7ff ff9e 	bl	801d754 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d818:	4683      	mov	fp, r0
 801d81a:	b168      	cbz	r0, 801d838 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d81c:	eb0a 0109 	add.w	r1, sl, r9
 801d820:	463a      	mov	r2, r7
 801d822:	4628      	mov	r0, r5
 801d824:	4441      	add	r1, r8
 801d826:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d82a:	4649      	mov	r1, r9
 801d82c:	f7ff ff42 	bl	801d6b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d830:	4658      	mov	r0, fp
 801d832:	b003      	add	sp, #12
 801d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d838:	eb07 010a 	add.w	r1, r7, sl
 801d83c:	4449      	add	r1, r9
 801d83e:	4441      	add	r1, r8
 801d840:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d844:	e7d2      	b.n	801d7ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d846:	f04f 0b00 	mov.w	fp, #0
 801d84a:	e7f1      	b.n	801d830 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d84c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d84c:	b570      	push	{r4, r5, r6, lr}
 801d84e:	8810      	ldrh	r0, [r2, #0]
 801d850:	4298      	cmp	r0, r3
 801d852:	d817      	bhi.n	801d884 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d854:	1e48      	subs	r0, r1, #1
 801d856:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d85a:	4298      	cmp	r0, r3
 801d85c:	d312      	bcc.n	801d884 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d85e:	2400      	movs	r4, #0
 801d860:	428c      	cmp	r4, r1
 801d862:	d20f      	bcs.n	801d884 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d864:	1860      	adds	r0, r4, r1
 801d866:	1040      	asrs	r0, r0, #1
 801d868:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d86c:	0085      	lsls	r5, r0, #2
 801d86e:	42b3      	cmp	r3, r6
 801d870:	d902      	bls.n	801d878 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d872:	3001      	adds	r0, #1
 801d874:	b284      	uxth	r4, r0
 801d876:	e7f3      	b.n	801d860 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d878:	d201      	bcs.n	801d87e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d87a:	b281      	uxth	r1, r0
 801d87c:	e7f0      	b.n	801d860 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d87e:	442a      	add	r2, r5
 801d880:	8850      	ldrh	r0, [r2, #2]
 801d882:	bd70      	pop	{r4, r5, r6, pc}
 801d884:	2000      	movs	r0, #0
 801d886:	e7fc      	b.n	801d882 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d888 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d88c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801d88e:	4604      	mov	r4, r0
 801d890:	260b      	movs	r6, #11
 801d892:	886f      	ldrh	r7, [r5, #2]
 801d894:	087f      	lsrs	r7, r7, #1
 801d896:	3e01      	subs	r6, #1
 801d898:	d01b      	beq.n	801d8d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d89a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d89c:	b92b      	cbnz	r3, 801d8aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801d89e:	4b0e      	ldr	r3, [pc, #56]	; (801d8d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801d8a0:	21c0      	movs	r1, #192	; 0xc0
 801d8a2:	4a0e      	ldr	r2, [pc, #56]	; (801d8dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801d8a4:	480e      	ldr	r0, [pc, #56]	; (801d8e0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801d8a6:	f009 ff35 	bl	8027714 <__assert_func>
 801d8aa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801d8ac:	462a      	mov	r2, r5
 801d8ae:	4639      	mov	r1, r7
 801d8b0:	4620      	mov	r0, r4
 801d8b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d8b6:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801d8ba:	4643      	mov	r3, r8
 801d8bc:	f7ff ffc6 	bl	801d84c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d8c0:	b138      	cbz	r0, 801d8d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d8c2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d8c6:	4642      	mov	r2, r8
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	f7ff ff8b 	bl	801d7e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d8ce:	2800      	cmp	r0, #0
 801d8d0:	d1e1      	bne.n	801d896 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8d6:	bf00      	nop
 801d8d8:	0802c2ec 	.word	0x0802c2ec
 801d8dc:	0802c55e 	.word	0x0802c55e
 801d8e0:	0802c2f5 	.word	0x0802c2f5

0801d8e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d8e4:	4b01      	ldr	r3, [pc, #4]	; (801d8ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d8e6:	6018      	str	r0, [r3, #0]
 801d8e8:	4770      	bx	lr
 801d8ea:	bf00      	nop
 801d8ec:	2000b4bc 	.word	0x2000b4bc

0801d8f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d8f0:	4b07      	ldr	r3, [pc, #28]	; (801d910 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801d8f2:	881a      	ldrh	r2, [r3, #0]
 801d8f4:	4282      	cmp	r2, r0
 801d8f6:	d809      	bhi.n	801d90c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801d8f8:	4b06      	ldr	r3, [pc, #24]	; (801d914 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801d8fa:	881b      	ldrh	r3, [r3, #0]
 801d8fc:	4413      	add	r3, r2
 801d8fe:	4298      	cmp	r0, r3
 801d900:	da04      	bge.n	801d90c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801d902:	4b05      	ldr	r3, [pc, #20]	; (801d918 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801d90a:	4770      	bx	lr
 801d90c:	2000      	movs	r0, #0
 801d90e:	4770      	bx	lr
 801d910:	2000b4dc 	.word	0x2000b4dc
 801d914:	2000b4e0 	.word	0x2000b4e0
 801d918:	2000b4c0 	.word	0x2000b4c0

0801d91c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d920:	4d28      	ldr	r5, [pc, #160]	; (801d9c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d922:	682b      	ldr	r3, [r5, #0]
 801d924:	2b00      	cmp	r3, #0
 801d926:	d04a      	beq.n	801d9be <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d928:	4a27      	ldr	r2, [pc, #156]	; (801d9c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d92a:	4e28      	ldr	r6, [pc, #160]	; (801d9cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d92c:	8810      	ldrh	r0, [r2, #0]
 801d92e:	f8b6 8000 	ldrh.w	r8, [r6]
 801d932:	4c27      	ldr	r4, [pc, #156]	; (801d9d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d934:	4440      	add	r0, r8
 801d936:	4f27      	ldr	r7, [pc, #156]	; (801d9d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d938:	1c41      	adds	r1, r0, #1
 801d93a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801d93e:	f021 0101 	bic.w	r1, r1, #1
 801d942:	eb03 020e 	add.w	r2, r3, lr
 801d946:	0409      	lsls	r1, r1, #16
 801d948:	6022      	str	r2, [r4, #0]
 801d94a:	0c09      	lsrs	r1, r1, #16
 801d94c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801d950:	eb0e 010c 	add.w	r1, lr, ip
 801d954:	185a      	adds	r2, r3, r1
 801d956:	603a      	str	r2, [r7, #0]
 801d958:	220e      	movs	r2, #14
 801d95a:	fb02 f208 	mul.w	r2, r2, r8
 801d95e:	3203      	adds	r2, #3
 801d960:	f022 0203 	bic.w	r2, r2, #3
 801d964:	4411      	add	r1, r2
 801d966:	440b      	add	r3, r1
 801d968:	491b      	ldr	r1, [pc, #108]	; (801d9d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801d96a:	600b      	str	r3, [r1, #0]
 801d96c:	2300      	movs	r3, #0
 801d96e:	491b      	ldr	r1, [pc, #108]	; (801d9dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801d970:	800b      	strh	r3, [r1, #0]
 801d972:	491b      	ldr	r1, [pc, #108]	; (801d9e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801d974:	6809      	ldr	r1, [r1, #0]
 801d976:	eba1 010e 	sub.w	r1, r1, lr
 801d97a:	eba1 010c 	sub.w	r1, r1, ip
 801d97e:	469c      	mov	ip, r3
 801d980:	1a8a      	subs	r2, r1, r2
 801d982:	4918      	ldr	r1, [pc, #96]	; (801d9e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801d984:	600a      	str	r2, [r1, #0]
 801d986:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d98a:	4a17      	ldr	r2, [pc, #92]	; (801d9e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801d98c:	8013      	strh	r3, [r2, #0]
 801d98e:	4283      	cmp	r3, r0
 801d990:	d10d      	bne.n	801d9ae <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801d992:	8835      	ldrh	r5, [r6, #0]
 801d994:	2300      	movs	r3, #0
 801d996:	6838      	ldr	r0, [r7, #0]
 801d998:	240e      	movs	r4, #14
 801d99a:	429d      	cmp	r5, r3
 801d99c:	d90f      	bls.n	801d9be <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d99e:	fb04 0203 	mla	r2, r4, r3, r0
 801d9a2:	3301      	adds	r3, #1
 801d9a4:	7b11      	ldrb	r1, [r2, #12]
 801d9a6:	f36f 1145 	bfc	r1, #5, #1
 801d9aa:	7311      	strb	r1, [r2, #12]
 801d9ac:	e7f5      	b.n	801d99a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801d9ae:	682a      	ldr	r2, [r5, #0]
 801d9b0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d9b4:	6822      	ldr	r2, [r4, #0]
 801d9b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801d9ba:	3301      	adds	r3, #1
 801d9bc:	e7e7      	b.n	801d98e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801d9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9c2:	bf00      	nop
 801d9c4:	2000b4c0 	.word	0x2000b4c0
 801d9c8:	2000b4dc 	.word	0x2000b4dc
 801d9cc:	2000b4e0 	.word	0x2000b4e0
 801d9d0:	2000b4d4 	.word	0x2000b4d4
 801d9d4:	2000b4c4 	.word	0x2000b4c4
 801d9d8:	2000b4cc 	.word	0x2000b4cc
 801d9dc:	2000b4de 	.word	0x2000b4de
 801d9e0:	2000b4c8 	.word	0x2000b4c8
 801d9e4:	2000b4d8 	.word	0x2000b4d8
 801d9e8:	2000b4d0 	.word	0x2000b4d0

0801d9ec <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d9ec:	4b10      	ldr	r3, [pc, #64]	; (801da30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801d9ee:	b510      	push	{r4, lr}
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	b9db      	cbnz	r3, 801da2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d9f4:	b1d1      	cbz	r1, 801da2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d9f6:	4b0f      	ldr	r3, [pc, #60]	; (801da34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801d9f8:	240e      	movs	r4, #14
 801d9fa:	801a      	strh	r2, [r3, #0]
 801d9fc:	b292      	uxth	r2, r2
 801d9fe:	4b0e      	ldr	r3, [pc, #56]	; (801da38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801da00:	881b      	ldrh	r3, [r3, #0]
 801da02:	4413      	add	r3, r2
 801da04:	4362      	muls	r2, r4
 801da06:	2406      	movs	r4, #6
 801da08:	fb04 2203 	mla	r2, r4, r3, r2
 801da0c:	428a      	cmp	r2, r1
 801da0e:	d305      	bcc.n	801da1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801da10:	4b0a      	ldr	r3, [pc, #40]	; (801da3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801da12:	2137      	movs	r1, #55	; 0x37
 801da14:	4a0a      	ldr	r2, [pc, #40]	; (801da40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801da16:	480b      	ldr	r0, [pc, #44]	; (801da44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801da18:	f009 fe7c 	bl	8027714 <__assert_func>
 801da1c:	4b0a      	ldr	r3, [pc, #40]	; (801da48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801da1e:	6019      	str	r1, [r3, #0]
 801da20:	4b0a      	ldr	r3, [pc, #40]	; (801da4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801da22:	6018      	str	r0, [r3, #0]
 801da24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da28:	f7ff bf78 	b.w	801d91c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801da2c:	bd10      	pop	{r4, pc}
 801da2e:	bf00      	nop
 801da30:	2000b4cc 	.word	0x2000b4cc
 801da34:	2000b4e0 	.word	0x2000b4e0
 801da38:	2000b4dc 	.word	0x2000b4dc
 801da3c:	0802c915 	.word	0x0802c915
 801da40:	0802c96e 	.word	0x0802c96e
 801da44:	0802c8f0 	.word	0x0802c8f0
 801da48:	2000b4c8 	.word	0x2000b4c8
 801da4c:	2000b4c0 	.word	0x2000b4c0

0801da50 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801da50:	b470      	push	{r4, r5, r6}
 801da52:	4c07      	ldr	r4, [pc, #28]	; (801da70 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801da54:	4605      	mov	r5, r0
 801da56:	4610      	mov	r0, r2
 801da58:	9a03      	ldr	r2, [sp, #12]
 801da5a:	6826      	ldr	r6, [r4, #0]
 801da5c:	b936      	cbnz	r6, 801da6c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801da5e:	6025      	str	r5, [r4, #0]
 801da60:	4c04      	ldr	r4, [pc, #16]	; (801da74 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801da62:	8021      	strh	r1, [r4, #0]
 801da64:	4619      	mov	r1, r3
 801da66:	bc70      	pop	{r4, r5, r6}
 801da68:	f7ff bfc0 	b.w	801d9ec <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801da6c:	bc70      	pop	{r4, r5, r6}
 801da6e:	4770      	bx	lr
 801da70:	2000b4e4 	.word	0x2000b4e4
 801da74:	2000b4dc 	.word	0x2000b4dc

0801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801da78:	b508      	push	{r3, lr}
 801da7a:	4b14      	ldr	r3, [pc, #80]	; (801dacc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801da7c:	6819      	ldr	r1, [r3, #0]
 801da7e:	b931      	cbnz	r1, 801da8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801da80:	4b13      	ldr	r3, [pc, #76]	; (801dad0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801da82:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801da86:	4a13      	ldr	r2, [pc, #76]	; (801dad4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801da88:	4813      	ldr	r0, [pc, #76]	; (801dad8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801da8a:	f009 fe43 	bl	8027714 <__assert_func>
 801da8e:	4a13      	ldr	r2, [pc, #76]	; (801dadc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801da90:	8803      	ldrh	r3, [r0, #0]
 801da92:	8812      	ldrh	r2, [r2, #0]
 801da94:	4293      	cmp	r3, r2
 801da96:	d204      	bcs.n	801daa2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801da98:	2214      	movs	r2, #20
 801da9a:	fb02 1303 	mla	r3, r2, r3, r1
 801da9e:	8918      	ldrh	r0, [r3, #8]
 801daa0:	bd08      	pop	{r3, pc}
 801daa2:	490f      	ldr	r1, [pc, #60]	; (801dae0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801daa4:	8809      	ldrh	r1, [r1, #0]
 801daa6:	4411      	add	r1, r2
 801daa8:	428b      	cmp	r3, r1
 801daaa:	da06      	bge.n	801daba <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801daac:	1a9b      	subs	r3, r3, r2
 801daae:	4a0d      	ldr	r2, [pc, #52]	; (801dae4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801dab0:	210e      	movs	r1, #14
 801dab2:	6812      	ldr	r2, [r2, #0]
 801dab4:	fb01 2303 	mla	r3, r1, r3, r2
 801dab8:	e7f1      	b.n	801da9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801daba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dabe:	4293      	cmp	r3, r2
 801dac0:	bf0a      	itet	eq
 801dac2:	4b09      	ldreq	r3, [pc, #36]	; (801dae8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801dac4:	2000      	movne	r0, #0
 801dac6:	8818      	ldrheq	r0, [r3, #0]
 801dac8:	e7ea      	b.n	801daa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801daca:	bf00      	nop
 801dacc:	2000b4e4 	.word	0x2000b4e4
 801dad0:	0802bcd0 	.word	0x0802bcd0
 801dad4:	0802ca1b 	.word	0x0802ca1b
 801dad8:	0802c8f0 	.word	0x0802c8f0
 801dadc:	2000b4dc 	.word	0x2000b4dc
 801dae0:	2000b4e0 	.word	0x2000b4e0
 801dae4:	2000b4c4 	.word	0x2000b4c4
 801dae8:	2000b410 	.word	0x2000b410

0801daec <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801daec:	b508      	push	{r3, lr}
 801daee:	4b14      	ldr	r3, [pc, #80]	; (801db40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801daf0:	6819      	ldr	r1, [r3, #0]
 801daf2:	b931      	cbnz	r1, 801db02 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801daf4:	4b13      	ldr	r3, [pc, #76]	; (801db44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801daf6:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801dafa:	4a13      	ldr	r2, [pc, #76]	; (801db48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dafc:	4813      	ldr	r0, [pc, #76]	; (801db4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dafe:	f009 fe09 	bl	8027714 <__assert_func>
 801db02:	4a13      	ldr	r2, [pc, #76]	; (801db50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801db04:	8803      	ldrh	r3, [r0, #0]
 801db06:	8812      	ldrh	r2, [r2, #0]
 801db08:	4293      	cmp	r3, r2
 801db0a:	d204      	bcs.n	801db16 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801db0c:	2214      	movs	r2, #20
 801db0e:	fb02 1303 	mla	r3, r2, r3, r1
 801db12:	8958      	ldrh	r0, [r3, #10]
 801db14:	bd08      	pop	{r3, pc}
 801db16:	490f      	ldr	r1, [pc, #60]	; (801db54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801db18:	8809      	ldrh	r1, [r1, #0]
 801db1a:	4411      	add	r1, r2
 801db1c:	428b      	cmp	r3, r1
 801db1e:	da06      	bge.n	801db2e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801db20:	1a9b      	subs	r3, r3, r2
 801db22:	4a0d      	ldr	r2, [pc, #52]	; (801db58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801db24:	210e      	movs	r1, #14
 801db26:	6812      	ldr	r2, [r2, #0]
 801db28:	fb01 2303 	mla	r3, r1, r3, r2
 801db2c:	e7f1      	b.n	801db12 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801db2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801db32:	4293      	cmp	r3, r2
 801db34:	bf0a      	itet	eq
 801db36:	4b09      	ldreq	r3, [pc, #36]	; (801db5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801db38:	2000      	movne	r0, #0
 801db3a:	8818      	ldrheq	r0, [r3, #0]
 801db3c:	e7ea      	b.n	801db14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801db3e:	bf00      	nop
 801db40:	2000b4e4 	.word	0x2000b4e4
 801db44:	0802bcd0 	.word	0x0802bcd0
 801db48:	0802ca47 	.word	0x0802ca47
 801db4c:	0802c8f0 	.word	0x0802c8f0
 801db50:	2000b4dc 	.word	0x2000b4dc
 801db54:	2000b4e0 	.word	0x2000b4e0
 801db58:	2000b4c4 	.word	0x2000b4c4
 801db5c:	2000b412 	.word	0x2000b412

0801db60 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801db60:	4b23      	ldr	r3, [pc, #140]	; (801dbf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801db62:	b510      	push	{r4, lr}
 801db64:	681c      	ldr	r4, [r3, #0]
 801db66:	b934      	cbnz	r4, 801db76 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801db68:	4b22      	ldr	r3, [pc, #136]	; (801dbf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801db6a:	f44f 7148 	mov.w	r1, #800	; 0x320
 801db6e:	4a22      	ldr	r2, [pc, #136]	; (801dbf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801db70:	4822      	ldr	r0, [pc, #136]	; (801dbfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801db72:	f009 fdcf 	bl	8027714 <__assert_func>
 801db76:	4a22      	ldr	r2, [pc, #136]	; (801dc00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801db78:	880b      	ldrh	r3, [r1, #0]
 801db7a:	8812      	ldrh	r2, [r2, #0]
 801db7c:	4293      	cmp	r3, r2
 801db7e:	d211      	bcs.n	801dba4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801db80:	2214      	movs	r2, #20
 801db82:	fb02 4303 	mla	r3, r2, r3, r4
 801db86:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801db8a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801db8e:	8a1a      	ldrh	r2, [r3, #16]
 801db90:	8a5b      	ldrh	r3, [r3, #18]
 801db92:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801db96:	8004      	strh	r4, [r0, #0]
 801db98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801db9c:	8041      	strh	r1, [r0, #2]
 801db9e:	8082      	strh	r2, [r0, #4]
 801dba0:	80c3      	strh	r3, [r0, #6]
 801dba2:	e00e      	b.n	801dbc2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801dba4:	4917      	ldr	r1, [pc, #92]	; (801dc04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801dba6:	8809      	ldrh	r1, [r1, #0]
 801dba8:	4411      	add	r1, r2
 801dbaa:	428b      	cmp	r3, r1
 801dbac:	da0a      	bge.n	801dbc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801dbae:	1a9b      	subs	r3, r3, r2
 801dbb0:	4a15      	ldr	r2, [pc, #84]	; (801dc08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801dbb2:	210e      	movs	r1, #14
 801dbb4:	6812      	ldr	r2, [r2, #0]
 801dbb6:	fb01 2303 	mla	r3, r1, r3, r2
 801dbba:	681a      	ldr	r2, [r3, #0]
 801dbbc:	6002      	str	r2, [r0, #0]
 801dbbe:	685a      	ldr	r2, [r3, #4]
 801dbc0:	6042      	str	r2, [r0, #4]
 801dbc2:	bd10      	pop	{r4, pc}
 801dbc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dbc8:	4293      	cmp	r3, r2
 801dbca:	d10b      	bne.n	801dbe4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801dbcc:	4b0f      	ldr	r3, [pc, #60]	; (801dc0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801dbce:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dbd2:	4b0f      	ldr	r3, [pc, #60]	; (801dc10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801dbd4:	8081      	strh	r1, [r0, #4]
 801dbd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dbda:	2300      	movs	r3, #0
 801dbdc:	80c2      	strh	r2, [r0, #6]
 801dbde:	8003      	strh	r3, [r0, #0]
 801dbe0:	8043      	strh	r3, [r0, #2]
 801dbe2:	e7ee      	b.n	801dbc2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801dbe4:	2300      	movs	r3, #0
 801dbe6:	8003      	strh	r3, [r0, #0]
 801dbe8:	8043      	strh	r3, [r0, #2]
 801dbea:	8083      	strh	r3, [r0, #4]
 801dbec:	e7d8      	b.n	801dba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801dbee:	bf00      	nop
 801dbf0:	2000b4e4 	.word	0x2000b4e4
 801dbf4:	0802bcd0 	.word	0x0802bcd0
 801dbf8:	0802c9b4 	.word	0x0802c9b4
 801dbfc:	0802c8f0 	.word	0x0802c8f0
 801dc00:	2000b4dc 	.word	0x2000b4dc
 801dc04:	2000b4e0 	.word	0x2000b4e0
 801dc08:	2000b4c4 	.word	0x2000b4c4
 801dc0c:	2000b410 	.word	0x2000b410
 801dc10:	2000b412 	.word	0x2000b412

0801dc14 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801dc14:	b508      	push	{r3, lr}
 801dc16:	4b12      	ldr	r3, [pc, #72]	; (801dc60 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801dc18:	6819      	ldr	r1, [r3, #0]
 801dc1a:	b931      	cbnz	r1, 801dc2a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801dc1c:	4b11      	ldr	r3, [pc, #68]	; (801dc64 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dc1e:	f44f 7151 	mov.w	r1, #836	; 0x344
 801dc22:	4a11      	ldr	r2, [pc, #68]	; (801dc68 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801dc24:	4811      	ldr	r0, [pc, #68]	; (801dc6c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801dc26:	f009 fd75 	bl	8027714 <__assert_func>
 801dc2a:	8803      	ldrh	r3, [r0, #0]
 801dc2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dc30:	4293      	cmp	r3, r2
 801dc32:	d012      	beq.n	801dc5a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801dc34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dc38:	4293      	cmp	r3, r2
 801dc3a:	d103      	bne.n	801dc44 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801dc3c:	4b0c      	ldr	r3, [pc, #48]	; (801dc70 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801dc42:	bd08      	pop	{r3, pc}
 801dc44:	4a0b      	ldr	r2, [pc, #44]	; (801dc74 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801dc46:	6812      	ldr	r2, [r2, #0]
 801dc48:	b11a      	cbz	r2, 801dc52 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801dc4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dc4e:	2800      	cmp	r0, #0
 801dc50:	d1f7      	bne.n	801dc42 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801dc52:	2214      	movs	r2, #20
 801dc54:	4353      	muls	r3, r2
 801dc56:	58c8      	ldr	r0, [r1, r3]
 801dc58:	e7f3      	b.n	801dc42 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801dc5a:	2000      	movs	r0, #0
 801dc5c:	e7f1      	b.n	801dc42 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801dc5e:	bf00      	nop
 801dc60:	2000b4e4 	.word	0x2000b4e4
 801dc64:	0802bcd0 	.word	0x0802bcd0
 801dc68:	0802c9ea 	.word	0x0802c9ea
 801dc6c:	0802c8f0 	.word	0x0802c8f0
 801dc70:	2000b41c 	.word	0x2000b41c
 801dc74:	2000b4c0 	.word	0x2000b4c0

0801dc78 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801dc78:	8802      	ldrh	r2, [r0, #0]
 801dc7a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801dc7e:	429a      	cmp	r2, r3
 801dc80:	d840      	bhi.n	801dd04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801dc82:	4b21      	ldr	r3, [pc, #132]	; (801dd08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801dc84:	881b      	ldrh	r3, [r3, #0]
 801dc86:	429a      	cmp	r2, r3
 801dc88:	d220      	bcs.n	801dccc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801dc8a:	4b20      	ldr	r3, [pc, #128]	; (801dd0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801dc8c:	6819      	ldr	r1, [r3, #0]
 801dc8e:	2314      	movs	r3, #20
 801dc90:	fb03 1302 	mla	r3, r3, r2, r1
 801dc94:	6858      	ldr	r0, [r3, #4]
 801dc96:	2800      	cmp	r0, #0
 801dc98:	d035      	beq.n	801dd06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801dc9a:	491d      	ldr	r1, [pc, #116]	; (801dd10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801dc9c:	6809      	ldr	r1, [r1, #0]
 801dc9e:	2900      	cmp	r1, #0
 801dca0:	d031      	beq.n	801dd06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801dca2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801dca6:	b371      	cbz	r1, 801dd06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801dca8:	895a      	ldrh	r2, [r3, #10]
 801dcaa:	8918      	ldrh	r0, [r3, #8]
 801dcac:	4350      	muls	r0, r2
 801dcae:	7c5a      	ldrb	r2, [r3, #17]
 801dcb0:	7cdb      	ldrb	r3, [r3, #19]
 801dcb2:	0952      	lsrs	r2, r2, #5
 801dcb4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801dcb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801dcbc:	2b0b      	cmp	r3, #11
 801dcbe:	bf18      	it	ne
 801dcc0:	0040      	lslne	r0, r0, #1
 801dcc2:	3003      	adds	r0, #3
 801dcc4:	f020 0003 	bic.w	r0, r0, #3
 801dcc8:	4408      	add	r0, r1
 801dcca:	4770      	bx	lr
 801dccc:	4911      	ldr	r1, [pc, #68]	; (801dd14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801dcce:	8809      	ldrh	r1, [r1, #0]
 801dcd0:	4419      	add	r1, r3
 801dcd2:	428a      	cmp	r2, r1
 801dcd4:	da16      	bge.n	801dd04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801dcd6:	4910      	ldr	r1, [pc, #64]	; (801dd18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801dcd8:	1ad3      	subs	r3, r2, r3
 801dcda:	200e      	movs	r0, #14
 801dcdc:	6809      	ldr	r1, [r1, #0]
 801dcde:	fb00 1303 	mla	r3, r0, r3, r1
 801dce2:	7b19      	ldrb	r1, [r3, #12]
 801dce4:	f001 011f 	and.w	r1, r1, #31
 801dce8:	290b      	cmp	r1, #11
 801dcea:	d10b      	bne.n	801dd04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801dcec:	8919      	ldrh	r1, [r3, #8]
 801dcee:	8958      	ldrh	r0, [r3, #10]
 801dcf0:	4b07      	ldr	r3, [pc, #28]	; (801dd10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801dcf2:	4348      	muls	r0, r1
 801dcf4:	6819      	ldr	r1, [r3, #0]
 801dcf6:	3003      	adds	r0, #3
 801dcf8:	f020 0303 	bic.w	r3, r0, #3
 801dcfc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801dd00:	4418      	add	r0, r3
 801dd02:	4770      	bx	lr
 801dd04:	2000      	movs	r0, #0
 801dd06:	4770      	bx	lr
 801dd08:	2000b4dc 	.word	0x2000b4dc
 801dd0c:	2000b4e4 	.word	0x2000b4e4
 801dd10:	2000b4c0 	.word	0x2000b4c0
 801dd14:	2000b4e0 	.word	0x2000b4e0
 801dd18:	2000b4c4 	.word	0x2000b4c4

0801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801dd1c:	4b19      	ldr	r3, [pc, #100]	; (801dd84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801dd1e:	6819      	ldr	r1, [r3, #0]
 801dd20:	8803      	ldrh	r3, [r0, #0]
 801dd22:	b1e9      	cbz	r1, 801dd60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801dd24:	4a18      	ldr	r2, [pc, #96]	; (801dd88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801dd26:	8812      	ldrh	r2, [r2, #0]
 801dd28:	429a      	cmp	r2, r3
 801dd2a:	d90a      	bls.n	801dd42 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801dd2c:	2214      	movs	r2, #20
 801dd2e:	fb02 1303 	mla	r3, r2, r3, r1
 801dd32:	7c58      	ldrb	r0, [r3, #17]
 801dd34:	0942      	lsrs	r2, r0, #5
 801dd36:	7cd8      	ldrb	r0, [r3, #19]
 801dd38:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801dd3c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801dd40:	4770      	bx	lr
 801dd42:	4912      	ldr	r1, [pc, #72]	; (801dd8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801dd44:	8809      	ldrh	r1, [r1, #0]
 801dd46:	4411      	add	r1, r2
 801dd48:	428b      	cmp	r3, r1
 801dd4a:	da09      	bge.n	801dd60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801dd4c:	1a9b      	subs	r3, r3, r2
 801dd4e:	4a10      	ldr	r2, [pc, #64]	; (801dd90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801dd50:	210e      	movs	r1, #14
 801dd52:	6812      	ldr	r2, [r2, #0]
 801dd54:	fb01 2303 	mla	r3, r1, r3, r2
 801dd58:	7b18      	ldrb	r0, [r3, #12]
 801dd5a:	f000 001f 	and.w	r0, r0, #31
 801dd5e:	4770      	bx	lr
 801dd60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd64:	4293      	cmp	r3, r2
 801dd66:	d10a      	bne.n	801dd7e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801dd68:	4b0a      	ldr	r3, [pc, #40]	; (801dd94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801dd70:	b10a      	cbz	r2, 801dd76 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801dd72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dd74:	b900      	cbnz	r0, 801dd78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801dd76:	6898      	ldr	r0, [r3, #8]
 801dd78:	6803      	ldr	r3, [r0, #0]
 801dd7a:	6a1b      	ldr	r3, [r3, #32]
 801dd7c:	4718      	bx	r3
 801dd7e:	2000      	movs	r0, #0
 801dd80:	4770      	bx	lr
 801dd82:	bf00      	nop
 801dd84:	2000b4e4 	.word	0x2000b4e4
 801dd88:	2000b4dc 	.word	0x2000b4dc
 801dd8c:	2000b4e0 	.word	0x2000b4e0
 801dd90:	2000b4c4 	.word	0x2000b4c4
 801dd94:	2000b41c 	.word	0x2000b41c

0801dd98 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801dd98:	2018      	movs	r0, #24
 801dd9a:	4770      	bx	lr

0801dd9c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801dd9c:	2001      	movs	r0, #1
 801dd9e:	4770      	bx	lr

0801dda0 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801dda0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801dda4:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801dda8:	4770      	bx	lr

0801ddaa <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801ddaa:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801ddae:	4770      	bx	lr

0801ddb0 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801ddb0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801ddb4:	4770      	bx	lr

0801ddb6 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801ddb6:	b2c8      	uxtb	r0, r1
 801ddb8:	4770      	bx	lr

0801ddba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ddba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddbe:	b085      	sub	sp, #20
 801ddc0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ddc2:	9203      	str	r2, [sp, #12]
 801ddc4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ddc8:	6878      	ldr	r0, [r7, #4]
 801ddca:	9201      	str	r2, [sp, #4]
 801ddcc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801ddce:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801ddd2:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801ddd6:	fa1f fc84 	uxth.w	ip, r4
 801ddda:	43e4      	mvns	r4, r4
 801dddc:	9100      	str	r1, [sp, #0]
 801ddde:	b2e4      	uxtb	r4, r4
 801dde0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801dde4:	fb00 2505 	mla	r5, r0, r5, r2
 801dde8:	683a      	ldr	r2, [r7, #0]
 801ddea:	6877      	ldr	r7, [r6, #4]
 801ddec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ddf0:	3704      	adds	r7, #4
 801ddf2:	4415      	add	r5, r2
 801ddf4:	6832      	ldr	r2, [r6, #0]
 801ddf6:	9202      	str	r2, [sp, #8]
 801ddf8:	9a00      	ldr	r2, [sp, #0]
 801ddfa:	2a00      	cmp	r2, #0
 801ddfc:	dc03      	bgt.n	801de06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801ddfe:	9a03      	ldr	r2, [sp, #12]
 801de00:	2a00      	cmp	r2, #0
 801de02:	f340 8116 	ble.w	801e032 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801de06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801de0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801de0e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801de12:	2b00      	cmp	r3, #0
 801de14:	dd0f      	ble.n	801de36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801de16:	1406      	asrs	r6, r0, #16
 801de18:	d406      	bmi.n	801de28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801de1a:	4546      	cmp	r6, r8
 801de1c:	da04      	bge.n	801de28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801de1e:	1416      	asrs	r6, r2, #16
 801de20:	d402      	bmi.n	801de28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801de22:	9901      	ldr	r1, [sp, #4]
 801de24:	428e      	cmp	r6, r1
 801de26:	db07      	blt.n	801de38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801de28:	9911      	ldr	r1, [sp, #68]	; 0x44
 801de2a:	3b01      	subs	r3, #1
 801de2c:	3503      	adds	r5, #3
 801de2e:	4408      	add	r0, r1
 801de30:	9912      	ldr	r1, [sp, #72]	; 0x48
 801de32:	440a      	add	r2, r1
 801de34:	e7ed      	b.n	801de12 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801de36:	d011      	beq.n	801de5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801de38:	1e5e      	subs	r6, r3, #1
 801de3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801de3c:	fb01 0e06 	mla	lr, r1, r6, r0
 801de40:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801de44:	d548      	bpl.n	801ded8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801de46:	4699      	mov	r9, r3
 801de48:	462e      	mov	r6, r5
 801de4a:	f1b9 0f00 	cmp.w	r9, #0
 801de4e:	f300 809e 	bgt.w	801df8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801de52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de5a:	441d      	add	r5, r3
 801de5c:	9b00      	ldr	r3, [sp, #0]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	f340 80e7 	ble.w	801e032 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801de64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de72:	eef0 6a62 	vmov.f32	s13, s5
 801de76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de82:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801de86:	eef0 6a43 	vmov.f32	s13, s6
 801de8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de8e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801de92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de96:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dea2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dea6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801deaa:	ee12 2a90 	vmov	r2, s5
 801deae:	eef0 2a47 	vmov.f32	s5, s14
 801deb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801deb6:	ee13 2a10 	vmov	r2, s6
 801deba:	9311      	str	r3, [sp, #68]	; 0x44
 801debc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801debe:	eeb0 3a67 	vmov.f32	s6, s15
 801dec2:	fb92 f3f3 	sdiv	r3, r2, r3
 801dec6:	9312      	str	r3, [sp, #72]	; 0x48
 801dec8:	9b00      	ldr	r3, [sp, #0]
 801deca:	9a03      	ldr	r2, [sp, #12]
 801decc:	3b01      	subs	r3, #1
 801dece:	9300      	str	r3, [sp, #0]
 801ded0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ded2:	bf08      	it	eq
 801ded4:	4613      	moveq	r3, r2
 801ded6:	e78f      	b.n	801ddf8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801ded8:	45c6      	cmp	lr, r8
 801deda:	dab4      	bge.n	801de46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801dedc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dede:	fb01 2606 	mla	r6, r1, r6, r2
 801dee2:	1436      	asrs	r6, r6, #16
 801dee4:	d4af      	bmi.n	801de46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801dee6:	9901      	ldr	r1, [sp, #4]
 801dee8:	428e      	cmp	r6, r1
 801deea:	daac      	bge.n	801de46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801deec:	1cee      	adds	r6, r5, #3
 801deee:	4699      	mov	r9, r3
 801def0:	f1b9 0f00 	cmp.w	r9, #0
 801def4:	f106 0603 	add.w	r6, r6, #3
 801def8:	ddab      	ble.n	801de52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801defa:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801defe:	9902      	ldr	r1, [sp, #8]
 801df00:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801df04:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801df08:	fb08 1e0e 	mla	lr, r8, lr, r1
 801df0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801df0e:	fb1b fb04 	smulbb	fp, fp, r4
 801df12:	f109 39ff 	add.w	r9, r9, #4294967295
 801df16:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801df1a:	4408      	add	r0, r1
 801df1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801df1e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801df22:	440a      	add	r2, r1
 801df24:	eb07 0a0e 	add.w	sl, r7, lr
 801df28:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801df2c:	fb0e be0c 	mla	lr, lr, ip, fp
 801df30:	fa1f fe8e 	uxth.w	lr, lr
 801df34:	f10e 0b01 	add.w	fp, lr, #1
 801df38:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801df3c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801df40:	fb1b fb04 	smulbb	fp, fp, r4
 801df44:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801df48:	f806 ec06 	strb.w	lr, [r6, #-6]
 801df4c:	f89a e001 	ldrb.w	lr, [sl, #1]
 801df50:	fb0e be0c 	mla	lr, lr, ip, fp
 801df54:	fa1f fe8e 	uxth.w	lr, lr
 801df58:	f10e 0b01 	add.w	fp, lr, #1
 801df5c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801df60:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801df64:	f806 ec05 	strb.w	lr, [r6, #-5]
 801df68:	f89a e002 	ldrb.w	lr, [sl, #2]
 801df6c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801df70:	fb1a fa04 	smulbb	sl, sl, r4
 801df74:	fb0e ae0c 	mla	lr, lr, ip, sl
 801df78:	fa1f fe8e 	uxth.w	lr, lr
 801df7c:	f10e 0a01 	add.w	sl, lr, #1
 801df80:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801df84:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801df88:	f806 ec04 	strb.w	lr, [r6, #-4]
 801df8c:	e7b0      	b.n	801def0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801df8e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801df92:	d446      	bmi.n	801e022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801df94:	45c2      	cmp	sl, r8
 801df96:	da44      	bge.n	801e022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801df98:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801df9c:	d441      	bmi.n	801e022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801df9e:	9901      	ldr	r1, [sp, #4]
 801dfa0:	458e      	cmp	lr, r1
 801dfa2:	da3e      	bge.n	801e022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801dfa4:	9902      	ldr	r1, [sp, #8]
 801dfa6:	f896 b000 	ldrb.w	fp, [r6]
 801dfaa:	fb08 1e0e 	mla	lr, r8, lr, r1
 801dfae:	fb1b fb04 	smulbb	fp, fp, r4
 801dfb2:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801dfb6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801dfba:	eb07 0a0e 	add.w	sl, r7, lr
 801dfbe:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801dfc2:	fb0e be0c 	mla	lr, lr, ip, fp
 801dfc6:	fa1f fe8e 	uxth.w	lr, lr
 801dfca:	f10e 0b01 	add.w	fp, lr, #1
 801dfce:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801dfd2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801dfd6:	fb1b fb04 	smulbb	fp, fp, r4
 801dfda:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801dfde:	f886 e000 	strb.w	lr, [r6]
 801dfe2:	f89a e001 	ldrb.w	lr, [sl, #1]
 801dfe6:	fb0e be0c 	mla	lr, lr, ip, fp
 801dfea:	fa1f fe8e 	uxth.w	lr, lr
 801dfee:	f10e 0b01 	add.w	fp, lr, #1
 801dff2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801dff6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801dffa:	f886 e001 	strb.w	lr, [r6, #1]
 801dffe:	f89a e002 	ldrb.w	lr, [sl, #2]
 801e002:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e006:	fb1a fa04 	smulbb	sl, sl, r4
 801e00a:	fb0e ae0c 	mla	lr, lr, ip, sl
 801e00e:	fa1f fe8e 	uxth.w	lr, lr
 801e012:	f10e 0a01 	add.w	sl, lr, #1
 801e016:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801e01a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e01e:	f886 e002 	strb.w	lr, [r6, #2]
 801e022:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e024:	3603      	adds	r6, #3
 801e026:	f109 39ff 	add.w	r9, r9, #4294967295
 801e02a:	4408      	add	r0, r1
 801e02c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e02e:	440a      	add	r2, r1
 801e030:	e70b      	b.n	801de4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801e032:	b005      	add	sp, #20
 801e034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e038 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e03c:	b085      	sub	sp, #20
 801e03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e042:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e044:	9203      	str	r2, [sp, #12]
 801e046:	6870      	ldr	r0, [r6, #4]
 801e048:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801e04a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e04e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801e052:	9101      	str	r1, [sp, #4]
 801e054:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e058:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801e05c:	fb00 2404 	mla	r4, r0, r4, r2
 801e060:	6832      	ldr	r2, [r6, #0]
 801e062:	686e      	ldr	r6, [r5, #4]
 801e064:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e068:	3604      	adds	r6, #4
 801e06a:	4414      	add	r4, r2
 801e06c:	682a      	ldr	r2, [r5, #0]
 801e06e:	9202      	str	r2, [sp, #8]
 801e070:	9a01      	ldr	r2, [sp, #4]
 801e072:	2a00      	cmp	r2, #0
 801e074:	dc03      	bgt.n	801e07e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801e076:	9a03      	ldr	r2, [sp, #12]
 801e078:	2a00      	cmp	r2, #0
 801e07a:	f340 80b2 	ble.w	801e1e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801e07e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e080:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e086:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e08a:	2b00      	cmp	r3, #0
 801e08c:	dd0c      	ble.n	801e0a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801e08e:	1405      	asrs	r5, r0, #16
 801e090:	d405      	bmi.n	801e09e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801e092:	4575      	cmp	r5, lr
 801e094:	da03      	bge.n	801e09e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801e096:	1415      	asrs	r5, r2, #16
 801e098:	d401      	bmi.n	801e09e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801e09a:	4545      	cmp	r5, r8
 801e09c:	db05      	blt.n	801e0aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801e09e:	4460      	add	r0, ip
 801e0a0:	443a      	add	r2, r7
 801e0a2:	3b01      	subs	r3, #1
 801e0a4:	3403      	adds	r4, #3
 801e0a6:	e7f0      	b.n	801e08a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801e0a8:	d03d      	beq.n	801e126 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801e0aa:	1e5d      	subs	r5, r3, #1
 801e0ac:	fb0c 0905 	mla	r9, ip, r5, r0
 801e0b0:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e0b4:	d42c      	bmi.n	801e110 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e0b6:	45f1      	cmp	r9, lr
 801e0b8:	da2a      	bge.n	801e110 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e0ba:	fb07 2505 	mla	r5, r7, r5, r2
 801e0be:	142d      	asrs	r5, r5, #16
 801e0c0:	d426      	bmi.n	801e110 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e0c2:	4545      	cmp	r5, r8
 801e0c4:	da24      	bge.n	801e110 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e0c6:	1ce5      	adds	r5, r4, #3
 801e0c8:	469a      	mov	sl, r3
 801e0ca:	f1ba 0f00 	cmp.w	sl, #0
 801e0ce:	f105 0503 	add.w	r5, r5, #3
 801e0d2:	dd23      	ble.n	801e11c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e0d4:	ea4f 4922 	mov.w	r9, r2, asr #16
 801e0d8:	9902      	ldr	r1, [sp, #8]
 801e0da:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801e0de:	443a      	add	r2, r7
 801e0e0:	fb0e 1909 	mla	r9, lr, r9, r1
 801e0e4:	4460      	add	r0, ip
 801e0e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e0ea:	f819 900b 	ldrb.w	r9, [r9, fp]
 801e0ee:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e0f2:	eb06 0b09 	add.w	fp, r6, r9
 801e0f6:	f816 9009 	ldrb.w	r9, [r6, r9]
 801e0fa:	f805 9c06 	strb.w	r9, [r5, #-6]
 801e0fe:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801e102:	f805 9c05 	strb.w	r9, [r5, #-5]
 801e106:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e10a:	f805 9c04 	strb.w	r9, [r5, #-4]
 801e10e:	e7dc      	b.n	801e0ca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e110:	2500      	movs	r5, #0
 801e112:	eba3 0905 	sub.w	r9, r3, r5
 801e116:	f1b9 0f00 	cmp.w	r9, #0
 801e11a:	dc3c      	bgt.n	801e196 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801e11c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e124:	441c      	add	r4, r3
 801e126:	9b01      	ldr	r3, [sp, #4]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	dd5a      	ble.n	801e1e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801e12c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e132:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e136:	eeb0 6a62 	vmov.f32	s12, s5
 801e13a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e13e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e142:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e146:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e14a:	eeb0 6a43 	vmov.f32	s12, s6
 801e14e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e152:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e156:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e15a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e15e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e162:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e166:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e16a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e16e:	ee12 2a90 	vmov	r2, s5
 801e172:	eef0 2a47 	vmov.f32	s5, s14
 801e176:	fb92 fcf3 	sdiv	ip, r2, r3
 801e17a:	ee13 2a10 	vmov	r2, s6
 801e17e:	eeb0 3a67 	vmov.f32	s6, s15
 801e182:	fb92 f7f3 	sdiv	r7, r2, r3
 801e186:	9b01      	ldr	r3, [sp, #4]
 801e188:	9a03      	ldr	r2, [sp, #12]
 801e18a:	3b01      	subs	r3, #1
 801e18c:	9301      	str	r3, [sp, #4]
 801e18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e190:	bf08      	it	eq
 801e192:	4613      	moveq	r3, r2
 801e194:	e76c      	b.n	801e070 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801e196:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e19a:	d41e      	bmi.n	801e1da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801e19c:	45f2      	cmp	sl, lr
 801e19e:	da1c      	bge.n	801e1da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801e1a0:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e1a4:	d419      	bmi.n	801e1da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801e1a6:	45c1      	cmp	r9, r8
 801e1a8:	da17      	bge.n	801e1da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801e1aa:	9902      	ldr	r1, [sp, #8]
 801e1ac:	fb0e 1909 	mla	r9, lr, r9, r1
 801e1b0:	f819 900a 	ldrb.w	r9, [r9, sl]
 801e1b4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e1b8:	f816 b009 	ldrb.w	fp, [r6, r9]
 801e1bc:	eb06 0a09 	add.w	sl, r6, r9
 801e1c0:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801e1c4:	f804 b009 	strb.w	fp, [r4, r9]
 801e1c8:	44a1      	add	r9, r4
 801e1ca:	f89a b001 	ldrb.w	fp, [sl, #1]
 801e1ce:	f889 b001 	strb.w	fp, [r9, #1]
 801e1d2:	f89a a002 	ldrb.w	sl, [sl, #2]
 801e1d6:	f889 a002 	strb.w	sl, [r9, #2]
 801e1da:	4460      	add	r0, ip
 801e1dc:	443a      	add	r2, r7
 801e1de:	3501      	adds	r5, #1
 801e1e0:	e797      	b.n	801e112 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e1e2:	b005      	add	sp, #20
 801e1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e1e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1ec:	b087      	sub	sp, #28
 801e1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1f2:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801e1f4:	9204      	str	r2, [sp, #16]
 801e1f6:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801e1fa:	6870      	ldr	r0, [r6, #4]
 801e1fc:	9205      	str	r2, [sp, #20]
 801e1fe:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e200:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801e204:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801e208:	9101      	str	r1, [sp, #4]
 801e20a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e20e:	fb00 2505 	mla	r5, r0, r5, r2
 801e212:	6832      	ldr	r2, [r6, #0]
 801e214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e218:	4415      	add	r5, r2
 801e21a:	6822      	ldr	r2, [r4, #0]
 801e21c:	9202      	str	r2, [sp, #8]
 801e21e:	6862      	ldr	r2, [r4, #4]
 801e220:	3204      	adds	r2, #4
 801e222:	9203      	str	r2, [sp, #12]
 801e224:	9a01      	ldr	r2, [sp, #4]
 801e226:	2a00      	cmp	r2, #0
 801e228:	dc03      	bgt.n	801e232 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801e22a:	9a04      	ldr	r2, [sp, #16]
 801e22c:	2a00      	cmp	r2, #0
 801e22e:	f340 8124 	ble.w	801e47a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e232:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e234:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e238:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e23a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e23e:	2b00      	cmp	r3, #0
 801e240:	dd0e      	ble.n	801e260 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801e242:	1422      	asrs	r2, r4, #16
 801e244:	d405      	bmi.n	801e252 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e246:	4572      	cmp	r2, lr
 801e248:	da03      	bge.n	801e252 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e24a:	1402      	asrs	r2, r0, #16
 801e24c:	d401      	bmi.n	801e252 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e24e:	4542      	cmp	r2, r8
 801e250:	db07      	blt.n	801e262 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e252:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e254:	3b01      	subs	r3, #1
 801e256:	3503      	adds	r5, #3
 801e258:	4414      	add	r4, r2
 801e25a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e25c:	4410      	add	r0, r2
 801e25e:	e7ee      	b.n	801e23e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801e260:	d010      	beq.n	801e284 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801e262:	1e5a      	subs	r2, r3, #1
 801e264:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e266:	fb06 4602 	mla	r6, r6, r2, r4
 801e26a:	1436      	asrs	r6, r6, #16
 801e26c:	d546      	bpl.n	801e2fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801e26e:	4699      	mov	r9, r3
 801e270:	462f      	mov	r7, r5
 801e272:	f1b9 0f00 	cmp.w	r9, #0
 801e276:	f300 80a5 	bgt.w	801e3c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801e27a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e27e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e282:	441d      	add	r5, r3
 801e284:	9b01      	ldr	r3, [sp, #4]
 801e286:	2b00      	cmp	r3, #0
 801e288:	f340 80f7 	ble.w	801e47a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e28c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e290:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e292:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e296:	eeb0 6a62 	vmov.f32	s12, s5
 801e29a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e29e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2a6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e2aa:	eeb0 6a43 	vmov.f32	s12, s6
 801e2ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2b2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e2b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e2be:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e2c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e2c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e2ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e2ce:	ee12 2a90 	vmov	r2, s5
 801e2d2:	eef0 2a47 	vmov.f32	s5, s14
 801e2d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2da:	ee13 2a10 	vmov	r2, s6
 801e2de:	9313      	str	r3, [sp, #76]	; 0x4c
 801e2e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e2e2:	eeb0 3a67 	vmov.f32	s6, s15
 801e2e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2ea:	9314      	str	r3, [sp, #80]	; 0x50
 801e2ec:	9b01      	ldr	r3, [sp, #4]
 801e2ee:	9a04      	ldr	r2, [sp, #16]
 801e2f0:	3b01      	subs	r3, #1
 801e2f2:	9301      	str	r3, [sp, #4]
 801e2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e2f6:	bf08      	it	eq
 801e2f8:	4613      	moveq	r3, r2
 801e2fa:	e793      	b.n	801e224 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e2fc:	4576      	cmp	r6, lr
 801e2fe:	dab6      	bge.n	801e26e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801e300:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e302:	fb06 0202 	mla	r2, r6, r2, r0
 801e306:	1412      	asrs	r2, r2, #16
 801e308:	d4b1      	bmi.n	801e26e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801e30a:	4542      	cmp	r2, r8
 801e30c:	daaf      	bge.n	801e26e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801e30e:	1cef      	adds	r7, r5, #3
 801e310:	4699      	mov	r9, r3
 801e312:	f1b9 0f00 	cmp.w	r9, #0
 801e316:	ddb0      	ble.n	801e27a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e318:	9902      	ldr	r1, [sp, #8]
 801e31a:	1402      	asrs	r2, r0, #16
 801e31c:	1426      	asrs	r6, r4, #16
 801e31e:	fb0e 1202 	mla	r2, lr, r2, r1
 801e322:	9903      	ldr	r1, [sp, #12]
 801e324:	5d92      	ldrb	r2, [r2, r6]
 801e326:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801e32a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801e32e:	d041      	beq.n	801e3b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801e330:	9a05      	ldr	r2, [sp, #20]
 801e332:	fa5f fb86 	uxtb.w	fp, r6
 801e336:	fb02 fc0c 	mul.w	ip, r2, ip
 801e33a:	f10c 0201 	add.w	r2, ip, #1
 801e33e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801e342:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801e346:	1212      	asrs	r2, r2, #8
 801e348:	fa1f fa82 	uxth.w	sl, r2
 801e34c:	43d2      	mvns	r2, r2
 801e34e:	fb1b fb0a 	smulbb	fp, fp, sl
 801e352:	b2d2      	uxtb	r2, r2
 801e354:	fb0c bc02 	mla	ip, ip, r2, fp
 801e358:	fa1f fc8c 	uxth.w	ip, ip
 801e35c:	f10c 0b01 	add.w	fp, ip, #1
 801e360:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e364:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e368:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e36c:	fb1b fb0a 	smulbb	fp, fp, sl
 801e370:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e374:	fb16 fa0a 	smulbb	sl, r6, sl
 801e378:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801e37c:	f807 cc03 	strb.w	ip, [r7, #-3]
 801e380:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801e384:	fb06 aa02 	mla	sl, r6, r2, sl
 801e388:	fb0c bc02 	mla	ip, ip, r2, fp
 801e38c:	fa1f fa8a 	uxth.w	sl, sl
 801e390:	fa1f fc8c 	uxth.w	ip, ip
 801e394:	f10a 0601 	add.w	r6, sl, #1
 801e398:	f10c 0b01 	add.w	fp, ip, #1
 801e39c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e3a0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e3a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e3a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e3ac:	f807 ac01 	strb.w	sl, [r7, #-1]
 801e3b0:	f807 cc02 	strb.w	ip, [r7, #-2]
 801e3b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e3b6:	3703      	adds	r7, #3
 801e3b8:	f109 39ff 	add.w	r9, r9, #4294967295
 801e3bc:	4414      	add	r4, r2
 801e3be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e3c0:	4410      	add	r0, r2
 801e3c2:	e7a6      	b.n	801e312 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801e3c4:	1426      	asrs	r6, r4, #16
 801e3c6:	d450      	bmi.n	801e46a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e3c8:	4576      	cmp	r6, lr
 801e3ca:	da4e      	bge.n	801e46a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e3cc:	1402      	asrs	r2, r0, #16
 801e3ce:	d44c      	bmi.n	801e46a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e3d0:	4542      	cmp	r2, r8
 801e3d2:	da4a      	bge.n	801e46a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e3d4:	9902      	ldr	r1, [sp, #8]
 801e3d6:	fb0e 1202 	mla	r2, lr, r2, r1
 801e3da:	9903      	ldr	r1, [sp, #12]
 801e3dc:	5d92      	ldrb	r2, [r2, r6]
 801e3de:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801e3e2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801e3e6:	d040      	beq.n	801e46a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e3e8:	9a05      	ldr	r2, [sp, #20]
 801e3ea:	fa5f fb86 	uxtb.w	fp, r6
 801e3ee:	fb02 fc0c 	mul.w	ip, r2, ip
 801e3f2:	f10c 0201 	add.w	r2, ip, #1
 801e3f6:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801e3fa:	f897 c000 	ldrb.w	ip, [r7]
 801e3fe:	1212      	asrs	r2, r2, #8
 801e400:	fa1f fa82 	uxth.w	sl, r2
 801e404:	43d2      	mvns	r2, r2
 801e406:	fb1b fb0a 	smulbb	fp, fp, sl
 801e40a:	b2d2      	uxtb	r2, r2
 801e40c:	fb0c bc02 	mla	ip, ip, r2, fp
 801e410:	fa1f fc8c 	uxth.w	ip, ip
 801e414:	f10c 0b01 	add.w	fp, ip, #1
 801e418:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e41c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e420:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e424:	fb1b fb0a 	smulbb	fp, fp, sl
 801e428:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e42c:	fb16 fa0a 	smulbb	sl, r6, sl
 801e430:	78be      	ldrb	r6, [r7, #2]
 801e432:	f887 c000 	strb.w	ip, [r7]
 801e436:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e43a:	fb06 aa02 	mla	sl, r6, r2, sl
 801e43e:	fb0c bc02 	mla	ip, ip, r2, fp
 801e442:	fa1f fa8a 	uxth.w	sl, sl
 801e446:	fa1f fc8c 	uxth.w	ip, ip
 801e44a:	f10a 0601 	add.w	r6, sl, #1
 801e44e:	f10c 0b01 	add.w	fp, ip, #1
 801e452:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e456:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e45a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e45e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e462:	f887 a002 	strb.w	sl, [r7, #2]
 801e466:	f887 c001 	strb.w	ip, [r7, #1]
 801e46a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e46c:	3703      	adds	r7, #3
 801e46e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e472:	4414      	add	r4, r2
 801e474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e476:	4410      	add	r0, r2
 801e478:	e6fb      	b.n	801e272 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e47a:	b007      	add	sp, #28
 801e47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e480 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e484:	b085      	sub	sp, #20
 801e486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e48a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e48c:	9203      	str	r2, [sp, #12]
 801e48e:	6870      	ldr	r0, [r6, #4]
 801e490:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801e492:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e496:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801e49a:	9100      	str	r1, [sp, #0]
 801e49c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e4a0:	fb00 2404 	mla	r4, r0, r4, r2
 801e4a4:	6832      	ldr	r2, [r6, #0]
 801e4a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e4aa:	4414      	add	r4, r2
 801e4ac:	682a      	ldr	r2, [r5, #0]
 801e4ae:	9201      	str	r2, [sp, #4]
 801e4b0:	686a      	ldr	r2, [r5, #4]
 801e4b2:	3204      	adds	r2, #4
 801e4b4:	9202      	str	r2, [sp, #8]
 801e4b6:	9a00      	ldr	r2, [sp, #0]
 801e4b8:	2a00      	cmp	r2, #0
 801e4ba:	dc03      	bgt.n	801e4c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801e4bc:	9a03      	ldr	r2, [sp, #12]
 801e4be:	2a00      	cmp	r2, #0
 801e4c0:	f340 8131 	ble.w	801e726 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801e4c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e4c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e4ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e4cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	dd0e      	ble.n	801e4f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801e4d4:	1405      	asrs	r5, r0, #16
 801e4d6:	d405      	bmi.n	801e4e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e4d8:	4575      	cmp	r5, lr
 801e4da:	da03      	bge.n	801e4e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e4dc:	1415      	asrs	r5, r2, #16
 801e4de:	d401      	bmi.n	801e4e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e4e0:	4545      	cmp	r5, r8
 801e4e2:	db07      	blt.n	801e4f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801e4e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e4e6:	3b01      	subs	r3, #1
 801e4e8:	3403      	adds	r4, #3
 801e4ea:	4428      	add	r0, r5
 801e4ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e4ee:	442a      	add	r2, r5
 801e4f0:	e7ee      	b.n	801e4d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801e4f2:	d06f      	beq.n	801e5d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801e4f4:	1e5d      	subs	r5, r3, #1
 801e4f6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e4f8:	fb06 0605 	mla	r6, r6, r5, r0
 801e4fc:	1436      	asrs	r6, r6, #16
 801e4fe:	d460      	bmi.n	801e5c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e500:	4576      	cmp	r6, lr
 801e502:	da5e      	bge.n	801e5c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e504:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e506:	fb06 2505 	mla	r5, r6, r5, r2
 801e50a:	142d      	asrs	r5, r5, #16
 801e50c:	d459      	bmi.n	801e5c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e50e:	4545      	cmp	r5, r8
 801e510:	da57      	bge.n	801e5c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e512:	1ce5      	adds	r5, r4, #3
 801e514:	469a      	mov	sl, r3
 801e516:	f1ba 0f00 	cmp.w	sl, #0
 801e51a:	dd56      	ble.n	801e5ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801e51c:	9901      	ldr	r1, [sp, #4]
 801e51e:	1416      	asrs	r6, r2, #16
 801e520:	1407      	asrs	r7, r0, #16
 801e522:	fb0e 1606 	mla	r6, lr, r6, r1
 801e526:	9902      	ldr	r1, [sp, #8]
 801e528:	5df6      	ldrb	r6, [r6, r7]
 801e52a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801e52e:	0e37      	lsrs	r7, r6, #24
 801e530:	2fff      	cmp	r7, #255	; 0xff
 801e532:	f000 80ef 	beq.w	801e714 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801e536:	fa5f fc87 	uxtb.w	ip, r7
 801e53a:	b3d7      	cbz	r7, 801e5b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801e53c:	fa1f f78c 	uxth.w	r7, ip
 801e540:	ea6f 0c0c 	mvn.w	ip, ip
 801e544:	fa5f fb86 	uxtb.w	fp, r6
 801e548:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801e54c:	fa5f fc8c 	uxtb.w	ip, ip
 801e550:	fb1b fb07 	smulbb	fp, fp, r7
 801e554:	fb09 b90c 	mla	r9, r9, ip, fp
 801e558:	fa1f f989 	uxth.w	r9, r9
 801e55c:	f109 0b01 	add.w	fp, r9, #1
 801e560:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e564:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e568:	fb1b fb0c 	smulbb	fp, fp, ip
 801e56c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e570:	f805 9c03 	strb.w	r9, [r5, #-3]
 801e574:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801e578:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e57c:	fb09 b907 	mla	r9, r9, r7, fp
 801e580:	fa1f f989 	uxth.w	r9, r9
 801e584:	f109 0b01 	add.w	fp, r9, #1
 801e588:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e58c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e590:	f805 9c02 	strb.w	r9, [r5, #-2]
 801e594:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801e598:	fb19 fc0c 	smulbb	ip, r9, ip
 801e59c:	fb06 c607 	mla	r6, r6, r7, ip
 801e5a0:	b2b6      	uxth	r6, r6
 801e5a2:	f106 0c01 	add.w	ip, r6, #1
 801e5a6:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801e5aa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e5ae:	f805 cc01 	strb.w	ip, [r5, #-1]
 801e5b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e5b4:	3503      	adds	r5, #3
 801e5b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e5ba:	4408      	add	r0, r1
 801e5bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e5be:	440a      	add	r2, r1
 801e5c0:	e7a9      	b.n	801e516 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801e5c2:	2600      	movs	r6, #0
 801e5c4:	1b9d      	subs	r5, r3, r6
 801e5c6:	2d00      	cmp	r5, #0
 801e5c8:	dc40      	bgt.n	801e64c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801e5ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5d2:	441c      	add	r4, r3
 801e5d4:	9b00      	ldr	r3, [sp, #0]
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	f340 80a5 	ble.w	801e726 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801e5dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e5e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5e6:	eeb0 6a62 	vmov.f32	s12, s5
 801e5ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e5ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5f6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e5fa:	eeb0 6a43 	vmov.f32	s12, s6
 801e5fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e602:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e606:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e60a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e60e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e612:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e616:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e61a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e61e:	ee12 2a90 	vmov	r2, s5
 801e622:	eef0 2a47 	vmov.f32	s5, s14
 801e626:	fb92 f3f3 	sdiv	r3, r2, r3
 801e62a:	ee13 2a10 	vmov	r2, s6
 801e62e:	9311      	str	r3, [sp, #68]	; 0x44
 801e630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e632:	eeb0 3a67 	vmov.f32	s6, s15
 801e636:	fb92 f3f3 	sdiv	r3, r2, r3
 801e63a:	9312      	str	r3, [sp, #72]	; 0x48
 801e63c:	9b00      	ldr	r3, [sp, #0]
 801e63e:	9a03      	ldr	r2, [sp, #12]
 801e640:	3b01      	subs	r3, #1
 801e642:	9300      	str	r3, [sp, #0]
 801e644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e646:	bf08      	it	eq
 801e648:	4613      	moveq	r3, r2
 801e64a:	e734      	b.n	801e4b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801e64c:	1407      	asrs	r7, r0, #16
 801e64e:	d450      	bmi.n	801e6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e650:	4577      	cmp	r7, lr
 801e652:	da4e      	bge.n	801e6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e654:	1415      	asrs	r5, r2, #16
 801e656:	d44c      	bmi.n	801e6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e658:	4545      	cmp	r5, r8
 801e65a:	da4a      	bge.n	801e6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e65c:	9901      	ldr	r1, [sp, #4]
 801e65e:	fb0e 1505 	mla	r5, lr, r5, r1
 801e662:	9902      	ldr	r1, [sp, #8]
 801e664:	5ded      	ldrb	r5, [r5, r7]
 801e666:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801e66a:	0e2f      	lsrs	r7, r5, #24
 801e66c:	2fff      	cmp	r7, #255	; 0xff
 801e66e:	d046      	beq.n	801e6fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801e670:	fa5f f987 	uxtb.w	r9, r7
 801e674:	b3ef      	cbz	r7, 801e6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e676:	fa1f fc89 	uxth.w	ip, r9
 801e67a:	ea6f 0909 	mvn.w	r9, r9
 801e67e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e682:	fa5f fb85 	uxtb.w	fp, r5
 801e686:	f814 a007 	ldrb.w	sl, [r4, r7]
 801e68a:	fa5f f989 	uxtb.w	r9, r9
 801e68e:	fb1b fb0c 	smulbb	fp, fp, ip
 801e692:	fb0a ba09 	mla	sl, sl, r9, fp
 801e696:	fa1f fa8a 	uxth.w	sl, sl
 801e69a:	f10a 0b01 	add.w	fp, sl, #1
 801e69e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e6a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e6a6:	f804 a007 	strb.w	sl, [r4, r7]
 801e6aa:	4427      	add	r7, r4
 801e6ac:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e6b0:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801e6b4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e6b8:	fb1b fb09 	smulbb	fp, fp, r9
 801e6bc:	fb0a ba0c 	mla	sl, sl, ip, fp
 801e6c0:	fa1f fa8a 	uxth.w	sl, sl
 801e6c4:	f10a 0b01 	add.w	fp, sl, #1
 801e6c8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e6cc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e6d0:	f887 a001 	strb.w	sl, [r7, #1]
 801e6d4:	f897 a002 	ldrb.w	sl, [r7, #2]
 801e6d8:	fb1a f909 	smulbb	r9, sl, r9
 801e6dc:	fb05 950c 	mla	r5, r5, ip, r9
 801e6e0:	b2ad      	uxth	r5, r5
 801e6e2:	f105 0901 	add.w	r9, r5, #1
 801e6e6:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801e6ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e6ee:	f887 9002 	strb.w	r9, [r7, #2]
 801e6f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e6f4:	3601      	adds	r6, #1
 801e6f6:	4408      	add	r0, r1
 801e6f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e6fa:	440a      	add	r2, r1
 801e6fc:	e762      	b.n	801e5c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801e6fe:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e702:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801e706:	55e5      	strb	r5, [r4, r7]
 801e708:	4427      	add	r7, r4
 801e70a:	0c2d      	lsrs	r5, r5, #16
 801e70c:	f887 c001 	strb.w	ip, [r7, #1]
 801e710:	70bd      	strb	r5, [r7, #2]
 801e712:	e7ee      	b.n	801e6f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e714:	0a37      	lsrs	r7, r6, #8
 801e716:	f805 6c03 	strb.w	r6, [r5, #-3]
 801e71a:	0c36      	lsrs	r6, r6, #16
 801e71c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e720:	f805 6c01 	strb.w	r6, [r5, #-1]
 801e724:	e745      	b.n	801e5b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801e726:	b005      	add	sp, #20
 801e728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e72c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e730:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e732:	9201      	str	r2, [sp, #4]
 801e734:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801e738:	6870      	ldr	r0, [r6, #4]
 801e73a:	9200      	str	r2, [sp, #0]
 801e73c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801e740:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801e744:	fa1f fc85 	uxth.w	ip, r5
 801e748:	43ed      	mvns	r5, r5
 801e74a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e74e:	b2ed      	uxtb	r5, r5
 801e750:	fb00 2404 	mla	r4, r0, r4, r2
 801e754:	6832      	ldr	r2, [r6, #0]
 801e756:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e75a:	4414      	add	r4, r2
 801e75c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e75e:	f8d2 8000 	ldr.w	r8, [r2]
 801e762:	2900      	cmp	r1, #0
 801e764:	dc03      	bgt.n	801e76e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801e766:	9a01      	ldr	r2, [sp, #4]
 801e768:	2a00      	cmp	r2, #0
 801e76a:	f340 8104 	ble.w	801e976 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801e76e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e770:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e776:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	dd0f      	ble.n	801e79e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801e77e:	1406      	asrs	r6, r0, #16
 801e780:	d406      	bmi.n	801e790 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e782:	4576      	cmp	r6, lr
 801e784:	da04      	bge.n	801e790 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e786:	1416      	asrs	r6, r2, #16
 801e788:	d402      	bmi.n	801e790 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e78a:	9f00      	ldr	r7, [sp, #0]
 801e78c:	42be      	cmp	r6, r7
 801e78e:	db07      	blt.n	801e7a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801e790:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e792:	3b01      	subs	r3, #1
 801e794:	3403      	adds	r4, #3
 801e796:	4430      	add	r0, r6
 801e798:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e79a:	4432      	add	r2, r6
 801e79c:	e7ed      	b.n	801e77a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801e79e:	d05f      	beq.n	801e860 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801e7a0:	1e5e      	subs	r6, r3, #1
 801e7a2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e7a4:	fb07 0706 	mla	r7, r7, r6, r0
 801e7a8:	143f      	asrs	r7, r7, #16
 801e7aa:	d450      	bmi.n	801e84e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801e7ac:	4577      	cmp	r7, lr
 801e7ae:	da4e      	bge.n	801e84e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801e7b0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e7b2:	fb07 2606 	mla	r6, r7, r6, r2
 801e7b6:	1436      	asrs	r6, r6, #16
 801e7b8:	d449      	bmi.n	801e84e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801e7ba:	9f00      	ldr	r7, [sp, #0]
 801e7bc:	42be      	cmp	r6, r7
 801e7be:	da46      	bge.n	801e84e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801e7c0:	1ce6      	adds	r6, r4, #3
 801e7c2:	4699      	mov	r9, r3
 801e7c4:	f1b9 0f00 	cmp.w	r9, #0
 801e7c8:	f106 0603 	add.w	r6, r6, #3
 801e7cc:	dd43      	ble.n	801e856 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801e7ce:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e7d2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e7d6:	1417      	asrs	r7, r2, #16
 801e7d8:	f109 39ff 	add.w	r9, r9, #4294967295
 801e7dc:	fb1b fb05 	smulbb	fp, fp, r5
 801e7e0:	fb0e a707 	mla	r7, lr, r7, sl
 801e7e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e7e8:	eb08 0a07 	add.w	sl, r8, r7
 801e7ec:	f818 7007 	ldrb.w	r7, [r8, r7]
 801e7f0:	fb07 b70c 	mla	r7, r7, ip, fp
 801e7f4:	b2bf      	uxth	r7, r7
 801e7f6:	f107 0b01 	add.w	fp, r7, #1
 801e7fa:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e7fe:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e802:	fb1b fb05 	smulbb	fp, fp, r5
 801e806:	123f      	asrs	r7, r7, #8
 801e808:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e80c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e810:	fb07 b70c 	mla	r7, r7, ip, fp
 801e814:	b2bf      	uxth	r7, r7
 801e816:	f107 0b01 	add.w	fp, r7, #1
 801e81a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e81e:	123f      	asrs	r7, r7, #8
 801e820:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e824:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e828:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e82c:	fb1a fa05 	smulbb	sl, sl, r5
 801e830:	fb07 a70c 	mla	r7, r7, ip, sl
 801e834:	b2bf      	uxth	r7, r7
 801e836:	f107 0a01 	add.w	sl, r7, #1
 801e83a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e83e:	123f      	asrs	r7, r7, #8
 801e840:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e844:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e846:	4438      	add	r0, r7
 801e848:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e84a:	443a      	add	r2, r7
 801e84c:	e7ba      	b.n	801e7c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801e84e:	2700      	movs	r7, #0
 801e850:	1bde      	subs	r6, r3, r7
 801e852:	2e00      	cmp	r6, #0
 801e854:	dc3f      	bgt.n	801e8d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801e856:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e85a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e85e:	441c      	add	r4, r3
 801e860:	2900      	cmp	r1, #0
 801e862:	f340 8088 	ble.w	801e976 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801e866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e86a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e86c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e870:	3901      	subs	r1, #1
 801e872:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e876:	eef0 6a62 	vmov.f32	s13, s5
 801e87a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e87e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e886:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801e88a:	eef0 6a43 	vmov.f32	s13, s6
 801e88e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e892:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801e896:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e89a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e89e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e8ae:	ee12 2a90 	vmov	r2, s5
 801e8b2:	eef0 2a47 	vmov.f32	s5, s14
 801e8b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8ba:	ee13 2a10 	vmov	r2, s6
 801e8be:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8c2:	eeb0 3a67 	vmov.f32	s6, s15
 801e8c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8ca:	9a01      	ldr	r2, [sp, #4]
 801e8cc:	9310      	str	r3, [sp, #64]	; 0x40
 801e8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8d0:	bf08      	it	eq
 801e8d2:	4613      	moveq	r3, r2
 801e8d4:	e745      	b.n	801e762 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801e8d6:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e8da:	d446      	bmi.n	801e96a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e8dc:	45f2      	cmp	sl, lr
 801e8de:	da44      	bge.n	801e96a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e8e0:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e8e4:	d441      	bmi.n	801e96a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e8e6:	9e00      	ldr	r6, [sp, #0]
 801e8e8:	45b1      	cmp	r9, r6
 801e8ea:	da3e      	bge.n	801e96a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e8ec:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e8f0:	fb0e a909 	mla	r9, lr, r9, sl
 801e8f4:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e8f8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e8fc:	fb1b fb05 	smulbb	fp, fp, r5
 801e900:	eb08 0a09 	add.w	sl, r8, r9
 801e904:	f818 9009 	ldrb.w	r9, [r8, r9]
 801e908:	fb09 b90c 	mla	r9, r9, ip, fp
 801e90c:	fa1f f989 	uxth.w	r9, r9
 801e910:	f109 0b01 	add.w	fp, r9, #1
 801e914:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e918:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e91c:	f804 9006 	strb.w	r9, [r4, r6]
 801e920:	4426      	add	r6, r4
 801e922:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e926:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e92a:	fb1b fb05 	smulbb	fp, fp, r5
 801e92e:	fb09 b90c 	mla	r9, r9, ip, fp
 801e932:	fa1f f989 	uxth.w	r9, r9
 801e936:	f109 0b01 	add.w	fp, r9, #1
 801e93a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e93e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e942:	f886 9001 	strb.w	r9, [r6, #1]
 801e946:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e94a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e94e:	fb1a fa05 	smulbb	sl, sl, r5
 801e952:	fb09 a90c 	mla	r9, r9, ip, sl
 801e956:	fa1f f989 	uxth.w	r9, r9
 801e95a:	f109 0a01 	add.w	sl, r9, #1
 801e95e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e962:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e966:	f886 9002 	strb.w	r9, [r6, #2]
 801e96a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e96c:	3701      	adds	r7, #1
 801e96e:	4430      	add	r0, r6
 801e970:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e972:	4432      	add	r2, r6
 801e974:	e76c      	b.n	801e850 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801e976:	b003      	add	sp, #12
 801e978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e97c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e980:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e986:	9201      	str	r2, [sp, #4]
 801e988:	6868      	ldr	r0, [r5, #4]
 801e98a:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801e98e:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801e992:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e996:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801e99a:	fb00 2404 	mla	r4, r0, r4, r2
 801e99e:	682a      	ldr	r2, [r5, #0]
 801e9a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e9a4:	4414      	add	r4, r2
 801e9a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e9a8:	f8d2 9000 	ldr.w	r9, [r2]
 801e9ac:	2900      	cmp	r1, #0
 801e9ae:	dc03      	bgt.n	801e9b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e9b0:	9a01      	ldr	r2, [sp, #4]
 801e9b2:	2a00      	cmp	r2, #0
 801e9b4:	f340 80a8 	ble.w	801eb08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801e9b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e9ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e9be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e9c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	dd0c      	ble.n	801e9e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801e9c8:	1405      	asrs	r5, r0, #16
 801e9ca:	d405      	bmi.n	801e9d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e9cc:	4565      	cmp	r5, ip
 801e9ce:	da03      	bge.n	801e9d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e9d0:	1415      	asrs	r5, r2, #16
 801e9d2:	d401      	bmi.n	801e9d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e9d4:	4575      	cmp	r5, lr
 801e9d6:	db05      	blt.n	801e9e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801e9d8:	4438      	add	r0, r7
 801e9da:	4432      	add	r2, r6
 801e9dc:	3b01      	subs	r3, #1
 801e9de:	3403      	adds	r4, #3
 801e9e0:	e7f0      	b.n	801e9c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801e9e2:	d03a      	beq.n	801ea5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e9e4:	1e5d      	subs	r5, r3, #1
 801e9e6:	fb07 0805 	mla	r8, r7, r5, r0
 801e9ea:	ea5f 4828 	movs.w	r8, r8, asr #16
 801e9ee:	d429      	bmi.n	801ea44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e9f0:	45e0      	cmp	r8, ip
 801e9f2:	da27      	bge.n	801ea44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e9f4:	fb06 2505 	mla	r5, r6, r5, r2
 801e9f8:	142d      	asrs	r5, r5, #16
 801e9fa:	d423      	bmi.n	801ea44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e9fc:	4575      	cmp	r5, lr
 801e9fe:	da21      	bge.n	801ea44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801ea00:	f104 0803 	add.w	r8, r4, #3
 801ea04:	469a      	mov	sl, r3
 801ea06:	f1ba 0f00 	cmp.w	sl, #0
 801ea0a:	f108 0803 	add.w	r8, r8, #3
 801ea0e:	dd1f      	ble.n	801ea50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801ea10:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801ea14:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ea18:	1415      	asrs	r5, r2, #16
 801ea1a:	4438      	add	r0, r7
 801ea1c:	4432      	add	r2, r6
 801ea1e:	fb0c b505 	mla	r5, ip, r5, fp
 801ea22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ea26:	eb09 0b05 	add.w	fp, r9, r5
 801ea2a:	f819 5005 	ldrb.w	r5, [r9, r5]
 801ea2e:	f808 5c06 	strb.w	r5, [r8, #-6]
 801ea32:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801ea36:	f808 5c05 	strb.w	r5, [r8, #-5]
 801ea3a:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801ea3e:	f808 5c04 	strb.w	r5, [r8, #-4]
 801ea42:	e7e0      	b.n	801ea06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ea44:	2500      	movs	r5, #0
 801ea46:	eba3 0805 	sub.w	r8, r3, r5
 801ea4a:	f1b8 0f00 	cmp.w	r8, #0
 801ea4e:	dc38      	bgt.n	801eac2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801ea50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea58:	441c      	add	r4, r3
 801ea5a:	2900      	cmp	r1, #0
 801ea5c:	dd54      	ble.n	801eb08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801ea5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea68:	3901      	subs	r1, #1
 801ea6a:	eeb0 6a62 	vmov.f32	s12, s5
 801ea6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ea72:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea7a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ea7e:	eeb0 6a43 	vmov.f32	s12, s6
 801ea82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea86:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ea8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eaa2:	ee12 2a90 	vmov	r2, s5
 801eaa6:	eef0 2a47 	vmov.f32	s5, s14
 801eaaa:	fb92 f7f3 	sdiv	r7, r2, r3
 801eaae:	ee13 2a10 	vmov	r2, s6
 801eab2:	eeb0 3a67 	vmov.f32	s6, s15
 801eab6:	fb92 f6f3 	sdiv	r6, r2, r3
 801eaba:	9a01      	ldr	r2, [sp, #4]
 801eabc:	bf08      	it	eq
 801eabe:	4613      	moveq	r3, r2
 801eac0:	e774      	b.n	801e9ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801eac2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801eac6:	d41b      	bmi.n	801eb00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801eac8:	45e2      	cmp	sl, ip
 801eaca:	da19      	bge.n	801eb00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801eacc:	ea5f 4822 	movs.w	r8, r2, asr #16
 801ead0:	d416      	bmi.n	801eb00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ead2:	45f0      	cmp	r8, lr
 801ead4:	da14      	bge.n	801eb00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ead6:	fb0c a808 	mla	r8, ip, r8, sl
 801eada:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801eade:	f819 b008 	ldrb.w	fp, [r9, r8]
 801eae2:	eb09 0a08 	add.w	sl, r9, r8
 801eae6:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801eaea:	f804 b008 	strb.w	fp, [r4, r8]
 801eaee:	44a0      	add	r8, r4
 801eaf0:	f89a b001 	ldrb.w	fp, [sl, #1]
 801eaf4:	f888 b001 	strb.w	fp, [r8, #1]
 801eaf8:	f89a a002 	ldrb.w	sl, [sl, #2]
 801eafc:	f888 a002 	strb.w	sl, [r8, #2]
 801eb00:	4438      	add	r0, r7
 801eb02:	4432      	add	r2, r6
 801eb04:	3501      	adds	r5, #1
 801eb06:	e79e      	b.n	801ea46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801eb08:	b003      	add	sp, #12
 801eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eb0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb12:	b085      	sub	sp, #20
 801eb14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb1a:	9202      	str	r2, [sp, #8]
 801eb1c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801eb20:	6860      	ldr	r0, [r4, #4]
 801eb22:	9203      	str	r2, [sp, #12]
 801eb24:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801eb28:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801eb2c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801eb30:	fb00 2505 	mla	r5, r0, r5, r2
 801eb34:	6822      	ldr	r2, [r4, #0]
 801eb36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb3a:	4415      	add	r5, r2
 801eb3c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801eb3e:	6812      	ldr	r2, [r2, #0]
 801eb40:	9201      	str	r2, [sp, #4]
 801eb42:	2900      	cmp	r1, #0
 801eb44:	dc03      	bgt.n	801eb4e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801eb46:	9a02      	ldr	r2, [sp, #8]
 801eb48:	2a00      	cmp	r2, #0
 801eb4a:	f340 811c 	ble.w	801ed86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801eb4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb50:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801eb54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb56:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eb5a:	2b00      	cmp	r3, #0
 801eb5c:	dd0e      	ble.n	801eb7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801eb5e:	1422      	asrs	r2, r4, #16
 801eb60:	d405      	bmi.n	801eb6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801eb62:	4572      	cmp	r2, lr
 801eb64:	da03      	bge.n	801eb6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801eb66:	1402      	asrs	r2, r0, #16
 801eb68:	d401      	bmi.n	801eb6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801eb6a:	4542      	cmp	r2, r8
 801eb6c:	db07      	blt.n	801eb7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801eb6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eb70:	3b01      	subs	r3, #1
 801eb72:	3503      	adds	r5, #3
 801eb74:	4414      	add	r4, r2
 801eb76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eb78:	4410      	add	r0, r2
 801eb7a:	e7ee      	b.n	801eb5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801eb7c:	d072      	beq.n	801ec64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801eb7e:	1e5a      	subs	r2, r3, #1
 801eb80:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801eb82:	fb06 4602 	mla	r6, r6, r2, r4
 801eb86:	1436      	asrs	r6, r6, #16
 801eb88:	d461      	bmi.n	801ec4e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801eb8a:	4576      	cmp	r6, lr
 801eb8c:	da5f      	bge.n	801ec4e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801eb8e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801eb90:	fb06 0202 	mla	r2, r6, r2, r0
 801eb94:	1412      	asrs	r2, r2, #16
 801eb96:	d45a      	bmi.n	801ec4e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801eb98:	4542      	cmp	r2, r8
 801eb9a:	da58      	bge.n	801ec4e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801eb9c:	1cef      	adds	r7, r5, #3
 801eb9e:	4699      	mov	r9, r3
 801eba0:	f1b9 0f00 	cmp.w	r9, #0
 801eba4:	dd59      	ble.n	801ec5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801eba6:	1426      	asrs	r6, r4, #16
 801eba8:	1402      	asrs	r2, r0, #16
 801ebaa:	fb0e 6202 	mla	r2, lr, r2, r6
 801ebae:	9e01      	ldr	r6, [sp, #4]
 801ebb0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ebb4:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801ebb8:	d041      	beq.n	801ec3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801ebba:	9a03      	ldr	r2, [sp, #12]
 801ebbc:	fa5f fb86 	uxtb.w	fp, r6
 801ebc0:	fb02 fc0c 	mul.w	ip, r2, ip
 801ebc4:	f10c 0201 	add.w	r2, ip, #1
 801ebc8:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801ebcc:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801ebd0:	1212      	asrs	r2, r2, #8
 801ebd2:	fa1f fa82 	uxth.w	sl, r2
 801ebd6:	43d2      	mvns	r2, r2
 801ebd8:	fb1b fb0a 	smulbb	fp, fp, sl
 801ebdc:	b2d2      	uxtb	r2, r2
 801ebde:	fb0c bc02 	mla	ip, ip, r2, fp
 801ebe2:	fa1f fc8c 	uxth.w	ip, ip
 801ebe6:	f10c 0b01 	add.w	fp, ip, #1
 801ebea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ebee:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ebf2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ebf6:	fb1b fb0a 	smulbb	fp, fp, sl
 801ebfa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ebfe:	fb16 fa0a 	smulbb	sl, r6, sl
 801ec02:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ec06:	f807 cc03 	strb.w	ip, [r7, #-3]
 801ec0a:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801ec0e:	fb06 aa02 	mla	sl, r6, r2, sl
 801ec12:	fb0c bc02 	mla	ip, ip, r2, fp
 801ec16:	fa1f fa8a 	uxth.w	sl, sl
 801ec1a:	fa1f fc8c 	uxth.w	ip, ip
 801ec1e:	f10a 0601 	add.w	r6, sl, #1
 801ec22:	f10c 0b01 	add.w	fp, ip, #1
 801ec26:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ec2a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ec2e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ec32:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ec36:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ec3a:	f807 cc02 	strb.w	ip, [r7, #-2]
 801ec3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec40:	3703      	adds	r7, #3
 801ec42:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec46:	4414      	add	r4, r2
 801ec48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ec4a:	4410      	add	r0, r2
 801ec4c:	e7a8      	b.n	801eba0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ec4e:	f04f 0c00 	mov.w	ip, #0
 801ec52:	eba3 020c 	sub.w	r2, r3, ip
 801ec56:	2a00      	cmp	r2, #0
 801ec58:	dc3d      	bgt.n	801ecd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801ec5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec62:	441d      	add	r5, r3
 801ec64:	2900      	cmp	r1, #0
 801ec66:	f340 808e 	ble.w	801ed86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ec6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec74:	3901      	subs	r1, #1
 801ec76:	eeb0 6a62 	vmov.f32	s12, s5
 801ec7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ec7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ec8a:	eeb0 6a43 	vmov.f32	s12, s6
 801ec8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec92:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ec96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ec9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eca2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eca6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecae:	ee12 2a90 	vmov	r2, s5
 801ecb2:	eef0 2a47 	vmov.f32	s5, s14
 801ecb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecba:	ee13 2a10 	vmov	r2, s6
 801ecbe:	9311      	str	r3, [sp, #68]	; 0x44
 801ecc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecc2:	eeb0 3a67 	vmov.f32	s6, s15
 801ecc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecca:	9a02      	ldr	r2, [sp, #8]
 801eccc:	9312      	str	r3, [sp, #72]	; 0x48
 801ecce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecd0:	bf08      	it	eq
 801ecd2:	4613      	moveq	r3, r2
 801ecd4:	e735      	b.n	801eb42 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801ecd6:	1426      	asrs	r6, r4, #16
 801ecd8:	d44e      	bmi.n	801ed78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ecda:	4576      	cmp	r6, lr
 801ecdc:	da4c      	bge.n	801ed78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ecde:	1402      	asrs	r2, r0, #16
 801ece0:	d44a      	bmi.n	801ed78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ece2:	4542      	cmp	r2, r8
 801ece4:	da48      	bge.n	801ed78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ece6:	fb0e 6202 	mla	r2, lr, r2, r6
 801ecea:	9e01      	ldr	r6, [sp, #4]
 801ecec:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ecf0:	0e3a      	lsrs	r2, r7, #24
 801ecf2:	d041      	beq.n	801ed78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ecf4:	9e03      	ldr	r6, [sp, #12]
 801ecf6:	fa5f fb87 	uxtb.w	fp, r7
 801ecfa:	4372      	muls	r2, r6
 801ecfc:	1c56      	adds	r6, r2, #1
 801ecfe:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ed02:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801ed06:	1212      	asrs	r2, r2, #8
 801ed08:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ed0c:	fa1f fa82 	uxth.w	sl, r2
 801ed10:	43d2      	mvns	r2, r2
 801ed12:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed16:	b2d2      	uxtb	r2, r2
 801ed18:	fb09 b902 	mla	r9, r9, r2, fp
 801ed1c:	fa1f f989 	uxth.w	r9, r9
 801ed20:	f109 0b01 	add.w	fp, r9, #1
 801ed24:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ed28:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ed2c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ed30:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed34:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ed38:	fb17 fa0a 	smulbb	sl, r7, sl
 801ed3c:	f805 9006 	strb.w	r9, [r5, r6]
 801ed40:	442e      	add	r6, r5
 801ed42:	78b7      	ldrb	r7, [r6, #2]
 801ed44:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ed48:	fb07 aa02 	mla	sl, r7, r2, sl
 801ed4c:	fb09 b902 	mla	r9, r9, r2, fp
 801ed50:	fa1f fa8a 	uxth.w	sl, sl
 801ed54:	fa1f f989 	uxth.w	r9, r9
 801ed58:	f10a 0701 	add.w	r7, sl, #1
 801ed5c:	f109 0b01 	add.w	fp, r9, #1
 801ed60:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ed64:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ed68:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ed6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ed70:	f886 a002 	strb.w	sl, [r6, #2]
 801ed74:	f886 9001 	strb.w	r9, [r6, #1]
 801ed78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed7a:	f10c 0c01 	add.w	ip, ip, #1
 801ed7e:	4414      	add	r4, r2
 801ed80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ed82:	4410      	add	r0, r2
 801ed84:	e765      	b.n	801ec52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ed86:	b005      	add	sp, #20
 801ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed90:	b085      	sub	sp, #20
 801ed92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ed96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ed98:	9203      	str	r2, [sp, #12]
 801ed9a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ed9e:	6860      	ldr	r0, [r4, #4]
 801eda0:	9201      	str	r2, [sp, #4]
 801eda2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801eda6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801edaa:	fb00 2505 	mla	r5, r0, r5, r2
 801edae:	6822      	ldr	r2, [r4, #0]
 801edb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801edb4:	4415      	add	r5, r2
 801edb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801edb8:	6812      	ldr	r2, [r2, #0]
 801edba:	9202      	str	r2, [sp, #8]
 801edbc:	2900      	cmp	r1, #0
 801edbe:	dc03      	bgt.n	801edc8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801edc0:	9a03      	ldr	r2, [sp, #12]
 801edc2:	2a00      	cmp	r2, #0
 801edc4:	f340 8122 	ble.w	801f00c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801edc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801edca:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801edce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801edd0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	dd0f      	ble.n	801edf8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801edd8:	1422      	asrs	r2, r4, #16
 801edda:	d406      	bmi.n	801edea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801eddc:	4572      	cmp	r2, lr
 801edde:	da04      	bge.n	801edea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ede0:	1402      	asrs	r2, r0, #16
 801ede2:	d402      	bmi.n	801edea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ede4:	9e01      	ldr	r6, [sp, #4]
 801ede6:	42b2      	cmp	r2, r6
 801ede8:	db07      	blt.n	801edfa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801edea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801edec:	3b01      	subs	r3, #1
 801edee:	3503      	adds	r5, #3
 801edf0:	4414      	add	r4, r2
 801edf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801edf4:	4410      	add	r0, r2
 801edf6:	e7ed      	b.n	801edd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801edf8:	d06e      	beq.n	801eed8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801edfa:	1e5a      	subs	r2, r3, #1
 801edfc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801edfe:	fb06 4602 	mla	r6, r6, r2, r4
 801ee02:	1436      	asrs	r6, r6, #16
 801ee04:	d45d      	bmi.n	801eec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ee06:	4576      	cmp	r6, lr
 801ee08:	da5b      	bge.n	801eec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ee0a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ee0c:	fb06 0202 	mla	r2, r6, r2, r0
 801ee10:	1412      	asrs	r2, r2, #16
 801ee12:	d456      	bmi.n	801eec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ee14:	9e01      	ldr	r6, [sp, #4]
 801ee16:	42b2      	cmp	r2, r6
 801ee18:	da53      	bge.n	801eec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ee1a:	1cee      	adds	r6, r5, #3
 801ee1c:	469a      	mov	sl, r3
 801ee1e:	f1ba 0f00 	cmp.w	sl, #0
 801ee22:	dd54      	ble.n	801eece <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ee24:	1427      	asrs	r7, r4, #16
 801ee26:	1402      	asrs	r2, r0, #16
 801ee28:	fb0e 7202 	mla	r2, lr, r2, r7
 801ee2c:	9f02      	ldr	r7, [sp, #8]
 801ee2e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ee32:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801ee36:	d03c      	beq.n	801eeb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ee38:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ee3c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ee40:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ee44:	fa5f f28c 	uxtb.w	r2, ip
 801ee48:	b2ff      	uxtb	r7, r7
 801ee4a:	f000 80d8 	beq.w	801effe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ee4e:	fa1f f882 	uxth.w	r8, r2
 801ee52:	43d2      	mvns	r2, r2
 801ee54:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801ee58:	fb17 f708 	smulbb	r7, r7, r8
 801ee5c:	b2d2      	uxtb	r2, r2
 801ee5e:	fb19 f908 	smulbb	r9, r9, r8
 801ee62:	fb0c 7702 	mla	r7, ip, r2, r7
 801ee66:	fb1b f808 	smulbb	r8, fp, r8
 801ee6a:	b2bf      	uxth	r7, r7
 801ee6c:	f107 0c01 	add.w	ip, r7, #1
 801ee70:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ee74:	123f      	asrs	r7, r7, #8
 801ee76:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ee7a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ee7e:	fb07 9902 	mla	r9, r7, r2, r9
 801ee82:	fa1f f989 	uxth.w	r9, r9
 801ee86:	f109 0701 	add.w	r7, r9, #1
 801ee8a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ee8e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ee92:	fb07 8802 	mla	r8, r7, r2, r8
 801ee96:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ee9a:	fa1f f888 	uxth.w	r8, r8
 801ee9e:	f806 9c02 	strb.w	r9, [r6, #-2]
 801eea2:	f108 0201 	add.w	r2, r8, #1
 801eea6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801eeaa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eeae:	f806 8c01 	strb.w	r8, [r6, #-1]
 801eeb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eeb4:	3603      	adds	r6, #3
 801eeb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eeba:	4414      	add	r4, r2
 801eebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eebe:	4410      	add	r0, r2
 801eec0:	e7ad      	b.n	801ee1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801eec2:	f04f 0c00 	mov.w	ip, #0
 801eec6:	eba3 020c 	sub.w	r2, r3, ip
 801eeca:	2a00      	cmp	r2, #0
 801eecc:	dc3d      	bgt.n	801ef4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801eece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eed2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eed6:	441d      	add	r5, r3
 801eed8:	2900      	cmp	r1, #0
 801eeda:	f340 8097 	ble.w	801f00c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801eede:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eee4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eee8:	3901      	subs	r1, #1
 801eeea:	eeb0 6a62 	vmov.f32	s12, s5
 801eeee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eef2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eef6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eefa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eefe:	eeb0 6a43 	vmov.f32	s12, s6
 801ef02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef06:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ef0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef12:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef22:	ee12 2a90 	vmov	r2, s5
 801ef26:	eef0 2a47 	vmov.f32	s5, s14
 801ef2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef2e:	ee13 2a10 	vmov	r2, s6
 801ef32:	9311      	str	r3, [sp, #68]	; 0x44
 801ef34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef36:	eeb0 3a67 	vmov.f32	s6, s15
 801ef3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef3e:	9a03      	ldr	r2, [sp, #12]
 801ef40:	9312      	str	r3, [sp, #72]	; 0x48
 801ef42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef44:	bf08      	it	eq
 801ef46:	4613      	moveq	r3, r2
 801ef48:	e738      	b.n	801edbc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801ef4a:	1426      	asrs	r6, r4, #16
 801ef4c:	d448      	bmi.n	801efe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ef4e:	4576      	cmp	r6, lr
 801ef50:	da46      	bge.n	801efe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ef52:	1402      	asrs	r2, r0, #16
 801ef54:	d444      	bmi.n	801efe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ef56:	9f01      	ldr	r7, [sp, #4]
 801ef58:	42ba      	cmp	r2, r7
 801ef5a:	da41      	bge.n	801efe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ef5c:	fb0e 6202 	mla	r2, lr, r2, r6
 801ef60:	9e02      	ldr	r6, [sp, #8]
 801ef62:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ef66:	0e3a      	lsrs	r2, r7, #24
 801ef68:	d03a      	beq.n	801efe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ef6a:	2aff      	cmp	r2, #255	; 0xff
 801ef6c:	b2d6      	uxtb	r6, r2
 801ef6e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ef72:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ef76:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801ef7a:	b2ff      	uxtb	r7, r7
 801ef7c:	d037      	beq.n	801efee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801ef7e:	fa1f f986 	uxth.w	r9, r6
 801ef82:	4462      	add	r2, ip
 801ef84:	43f6      	mvns	r6, r6
 801ef86:	f815 8002 	ldrb.w	r8, [r5, r2]
 801ef8a:	fb17 f709 	smulbb	r7, r7, r9
 801ef8e:	fb1a fa09 	smulbb	sl, sl, r9
 801ef92:	b2f6      	uxtb	r6, r6
 801ef94:	fb1b f909 	smulbb	r9, fp, r9
 801ef98:	fb08 7706 	mla	r7, r8, r6, r7
 801ef9c:	b2bf      	uxth	r7, r7
 801ef9e:	f107 0801 	add.w	r8, r7, #1
 801efa2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801efa6:	123f      	asrs	r7, r7, #8
 801efa8:	54af      	strb	r7, [r5, r2]
 801efaa:	442a      	add	r2, r5
 801efac:	7857      	ldrb	r7, [r2, #1]
 801efae:	fb07 aa06 	mla	sl, r7, r6, sl
 801efb2:	fa1f fa8a 	uxth.w	sl, sl
 801efb6:	f10a 0701 	add.w	r7, sl, #1
 801efba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801efbe:	7897      	ldrb	r7, [r2, #2]
 801efc0:	fb07 9906 	mla	r9, r7, r6, r9
 801efc4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801efc8:	fa1f f989 	uxth.w	r9, r9
 801efcc:	f882 a001 	strb.w	sl, [r2, #1]
 801efd0:	f109 0601 	add.w	r6, r9, #1
 801efd4:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801efd8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801efdc:	f882 9002 	strb.w	r9, [r2, #2]
 801efe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801efe2:	f10c 0c01 	add.w	ip, ip, #1
 801efe6:	4414      	add	r4, r2
 801efe8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801efea:	4410      	add	r0, r2
 801efec:	e76b      	b.n	801eec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801efee:	4462      	add	r2, ip
 801eff0:	54af      	strb	r7, [r5, r2]
 801eff2:	442a      	add	r2, r5
 801eff4:	f882 a001 	strb.w	sl, [r2, #1]
 801eff8:	f882 b002 	strb.w	fp, [r2, #2]
 801effc:	e7f0      	b.n	801efe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801effe:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f002:	f806 9c02 	strb.w	r9, [r6, #-2]
 801f006:	f806 bc01 	strb.w	fp, [r6, #-1]
 801f00a:	e752      	b.n	801eeb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801f00c:	b005      	add	sp, #20
 801f00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f014 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f018:	b087      	sub	sp, #28
 801f01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f01e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f020:	9204      	str	r2, [sp, #16]
 801f022:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801f026:	6860      	ldr	r0, [r4, #4]
 801f028:	9205      	str	r2, [sp, #20]
 801f02a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801f02e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801f032:	9101      	str	r1, [sp, #4]
 801f034:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f038:	fb00 2505 	mla	r5, r0, r5, r2
 801f03c:	6822      	ldr	r2, [r4, #0]
 801f03e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f042:	4415      	add	r5, r2
 801f044:	f10e 0201 	add.w	r2, lr, #1
 801f048:	f022 0201 	bic.w	r2, r2, #1
 801f04c:	9202      	str	r2, [sp, #8]
 801f04e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f050:	6812      	ldr	r2, [r2, #0]
 801f052:	9203      	str	r2, [sp, #12]
 801f054:	9a01      	ldr	r2, [sp, #4]
 801f056:	2a00      	cmp	r2, #0
 801f058:	dc03      	bgt.n	801f062 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801f05a:	9a04      	ldr	r2, [sp, #16]
 801f05c:	2a00      	cmp	r2, #0
 801f05e:	f340 8132 	ble.w	801f2c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801f062:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f064:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f068:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f06a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f06e:	2b00      	cmp	r3, #0
 801f070:	dd0e      	ble.n	801f090 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801f072:	1422      	asrs	r2, r4, #16
 801f074:	d405      	bmi.n	801f082 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f076:	4596      	cmp	lr, r2
 801f078:	dd03      	ble.n	801f082 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f07a:	1402      	asrs	r2, r0, #16
 801f07c:	d401      	bmi.n	801f082 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f07e:	4542      	cmp	r2, r8
 801f080:	db07      	blt.n	801f092 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801f082:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f084:	3b01      	subs	r3, #1
 801f086:	3503      	adds	r5, #3
 801f088:	4414      	add	r4, r2
 801f08a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f08c:	4410      	add	r0, r2
 801f08e:	e7ee      	b.n	801f06e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801f090:	d010      	beq.n	801f0b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f092:	1e5a      	subs	r2, r3, #1
 801f094:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f096:	fb06 4602 	mla	r6, r6, r2, r4
 801f09a:	1436      	asrs	r6, r6, #16
 801f09c:	d546      	bpl.n	801f12c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801f09e:	4699      	mov	r9, r3
 801f0a0:	462e      	mov	r6, r5
 801f0a2:	f1b9 0f00 	cmp.w	r9, #0
 801f0a6:	f300 80ac 	bgt.w	801f202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801f0aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f0ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0b2:	441d      	add	r5, r3
 801f0b4:	9b01      	ldr	r3, [sp, #4]
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	f340 8105 	ble.w	801f2c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801f0bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0c6:	eeb0 6a62 	vmov.f32	s12, s5
 801f0ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f0ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0d6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f0da:	eeb0 6a43 	vmov.f32	s12, s6
 801f0de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0e2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f0e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0fe:	ee12 2a90 	vmov	r2, s5
 801f102:	eef0 2a47 	vmov.f32	s5, s14
 801f106:	fb92 f3f3 	sdiv	r3, r2, r3
 801f10a:	ee13 2a10 	vmov	r2, s6
 801f10e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f112:	eeb0 3a67 	vmov.f32	s6, s15
 801f116:	fb92 f3f3 	sdiv	r3, r2, r3
 801f11a:	9314      	str	r3, [sp, #80]	; 0x50
 801f11c:	9b01      	ldr	r3, [sp, #4]
 801f11e:	9a04      	ldr	r2, [sp, #16]
 801f120:	3b01      	subs	r3, #1
 801f122:	9301      	str	r3, [sp, #4]
 801f124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f126:	bf08      	it	eq
 801f128:	4613      	moveq	r3, r2
 801f12a:	e793      	b.n	801f054 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801f12c:	45b6      	cmp	lr, r6
 801f12e:	ddb6      	ble.n	801f09e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f130:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f132:	fb06 0202 	mla	r2, r6, r2, r0
 801f136:	1412      	asrs	r2, r2, #16
 801f138:	d4b1      	bmi.n	801f09e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f13a:	4542      	cmp	r2, r8
 801f13c:	daaf      	bge.n	801f09e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f13e:	1cee      	adds	r6, r5, #3
 801f140:	4699      	mov	r9, r3
 801f142:	f1b9 0f00 	cmp.w	r9, #0
 801f146:	ddb0      	ble.n	801f0aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801f148:	1422      	asrs	r2, r4, #16
 801f14a:	9902      	ldr	r1, [sp, #8]
 801f14c:	1407      	asrs	r7, r0, #16
 801f14e:	fb01 2707 	mla	r7, r1, r7, r2
 801f152:	9903      	ldr	r1, [sp, #12]
 801f154:	087a      	lsrs	r2, r7, #1
 801f156:	5c8a      	ldrb	r2, [r1, r2]
 801f158:	07f9      	lsls	r1, r7, #31
 801f15a:	bf54      	ite	pl
 801f15c:	f002 020f 	andpl.w	r2, r2, #15
 801f160:	1112      	asrmi	r2, r2, #4
 801f162:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f166:	b2d2      	uxtb	r2, r2
 801f168:	2a00      	cmp	r2, #0
 801f16a:	d042      	beq.n	801f1f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801f16c:	4957      	ldr	r1, [pc, #348]	; (801f2cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801f16e:	680f      	ldr	r7, [r1, #0]
 801f170:	9905      	ldr	r1, [sp, #20]
 801f172:	fa5f fb87 	uxtb.w	fp, r7
 801f176:	434a      	muls	r2, r1
 801f178:	f102 0c01 	add.w	ip, r2, #1
 801f17c:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801f180:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801f184:	1212      	asrs	r2, r2, #8
 801f186:	fa1f fa82 	uxth.w	sl, r2
 801f18a:	43d2      	mvns	r2, r2
 801f18c:	fb1b fb0a 	smulbb	fp, fp, sl
 801f190:	b2d2      	uxtb	r2, r2
 801f192:	fb0c bc02 	mla	ip, ip, r2, fp
 801f196:	fa1f fc8c 	uxth.w	ip, ip
 801f19a:	f10c 0b01 	add.w	fp, ip, #1
 801f19e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f1a2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f1a6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f1aa:	fb1b fb0a 	smulbb	fp, fp, sl
 801f1ae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f1b2:	fb17 fa0a 	smulbb	sl, r7, sl
 801f1b6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f1ba:	f806 cc03 	strb.w	ip, [r6, #-3]
 801f1be:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801f1c2:	fb07 aa02 	mla	sl, r7, r2, sl
 801f1c6:	fb0c bc02 	mla	ip, ip, r2, fp
 801f1ca:	fa1f fa8a 	uxth.w	sl, sl
 801f1ce:	fa1f fc8c 	uxth.w	ip, ip
 801f1d2:	f10a 0701 	add.w	r7, sl, #1
 801f1d6:	f10c 0b01 	add.w	fp, ip, #1
 801f1da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f1de:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f1e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f1e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f1ea:	f806 ac01 	strb.w	sl, [r6, #-1]
 801f1ee:	f806 cc02 	strb.w	ip, [r6, #-2]
 801f1f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f1f4:	3603      	adds	r6, #3
 801f1f6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f1fa:	4414      	add	r4, r2
 801f1fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f1fe:	4410      	add	r0, r2
 801f200:	e79f      	b.n	801f142 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801f202:	1422      	asrs	r2, r4, #16
 801f204:	d457      	bmi.n	801f2b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f206:	4596      	cmp	lr, r2
 801f208:	dd55      	ble.n	801f2b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f20a:	1407      	asrs	r7, r0, #16
 801f20c:	d453      	bmi.n	801f2b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f20e:	4547      	cmp	r7, r8
 801f210:	da51      	bge.n	801f2b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f212:	9902      	ldr	r1, [sp, #8]
 801f214:	fb07 2701 	mla	r7, r7, r1, r2
 801f218:	9903      	ldr	r1, [sp, #12]
 801f21a:	087a      	lsrs	r2, r7, #1
 801f21c:	07ff      	lsls	r7, r7, #31
 801f21e:	5c8a      	ldrb	r2, [r1, r2]
 801f220:	bf54      	ite	pl
 801f222:	f002 020f 	andpl.w	r2, r2, #15
 801f226:	1112      	asrmi	r2, r2, #4
 801f228:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f22c:	b2d2      	uxtb	r2, r2
 801f22e:	2a00      	cmp	r2, #0
 801f230:	d041      	beq.n	801f2b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801f232:	4926      	ldr	r1, [pc, #152]	; (801f2cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801f234:	680f      	ldr	r7, [r1, #0]
 801f236:	9905      	ldr	r1, [sp, #20]
 801f238:	fa5f fb87 	uxtb.w	fp, r7
 801f23c:	434a      	muls	r2, r1
 801f23e:	f102 0c01 	add.w	ip, r2, #1
 801f242:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801f246:	f896 c000 	ldrb.w	ip, [r6]
 801f24a:	1212      	asrs	r2, r2, #8
 801f24c:	fa1f fa82 	uxth.w	sl, r2
 801f250:	43d2      	mvns	r2, r2
 801f252:	fb1b fb0a 	smulbb	fp, fp, sl
 801f256:	b2d2      	uxtb	r2, r2
 801f258:	fb0c bc02 	mla	ip, ip, r2, fp
 801f25c:	fa1f fc8c 	uxth.w	ip, ip
 801f260:	f10c 0b01 	add.w	fp, ip, #1
 801f264:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f268:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f26c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f270:	fb1b fb0a 	smulbb	fp, fp, sl
 801f274:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f278:	fb17 fa0a 	smulbb	sl, r7, sl
 801f27c:	78b7      	ldrb	r7, [r6, #2]
 801f27e:	f886 c000 	strb.w	ip, [r6]
 801f282:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f286:	fb07 aa02 	mla	sl, r7, r2, sl
 801f28a:	fb0c bc02 	mla	ip, ip, r2, fp
 801f28e:	fa1f fa8a 	uxth.w	sl, sl
 801f292:	fa1f fc8c 	uxth.w	ip, ip
 801f296:	f10a 0701 	add.w	r7, sl, #1
 801f29a:	f10c 0b01 	add.w	fp, ip, #1
 801f29e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f2a2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f2a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f2aa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f2ae:	f886 a002 	strb.w	sl, [r6, #2]
 801f2b2:	f886 c001 	strb.w	ip, [r6, #1]
 801f2b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f2b8:	3603      	adds	r6, #3
 801f2ba:	f109 39ff 	add.w	r9, r9, #4294967295
 801f2be:	4414      	add	r4, r2
 801f2c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2c2:	4410      	add	r0, r2
 801f2c4:	e6ed      	b.n	801f0a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801f2c6:	b007      	add	sp, #28
 801f2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2cc:	2000b444 	.word	0x2000b444

0801f2d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2d4:	b087      	sub	sp, #28
 801f2d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f2da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f2dc:	9205      	str	r2, [sp, #20]
 801f2de:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801f2e2:	6860      	ldr	r0, [r4, #4]
 801f2e4:	9202      	str	r2, [sp, #8]
 801f2e6:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801f2ea:	9101      	str	r1, [sp, #4]
 801f2ec:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801f2f0:	fb00 2606 	mla	r6, r0, r6, r2
 801f2f4:	6822      	ldr	r2, [r4, #0]
 801f2f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f2fa:	4416      	add	r6, r2
 801f2fc:	f108 0201 	add.w	r2, r8, #1
 801f300:	f022 0201 	bic.w	r2, r2, #1
 801f304:	9203      	str	r2, [sp, #12]
 801f306:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f308:	6812      	ldr	r2, [r2, #0]
 801f30a:	9204      	str	r2, [sp, #16]
 801f30c:	9a01      	ldr	r2, [sp, #4]
 801f30e:	2a00      	cmp	r2, #0
 801f310:	dc03      	bgt.n	801f31a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801f312:	9a05      	ldr	r2, [sp, #20]
 801f314:	2a00      	cmp	r2, #0
 801f316:	f340 813a 	ble.w	801f58e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801f31a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f31c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801f320:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f322:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f326:	2b00      	cmp	r3, #0
 801f328:	dd0f      	ble.n	801f34a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f32a:	142a      	asrs	r2, r5, #16
 801f32c:	d406      	bmi.n	801f33c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f32e:	4590      	cmp	r8, r2
 801f330:	dd04      	ble.n	801f33c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f332:	1422      	asrs	r2, r4, #16
 801f334:	d402      	bmi.n	801f33c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f336:	9802      	ldr	r0, [sp, #8]
 801f338:	4282      	cmp	r2, r0
 801f33a:	db07      	blt.n	801f34c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801f33c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f33e:	3b01      	subs	r3, #1
 801f340:	3603      	adds	r6, #3
 801f342:	4415      	add	r5, r2
 801f344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f346:	4414      	add	r4, r2
 801f348:	e7ed      	b.n	801f326 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801f34a:	d073      	beq.n	801f434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801f34c:	1e5a      	subs	r2, r3, #1
 801f34e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f350:	fb00 5002 	mla	r0, r0, r2, r5
 801f354:	1400      	asrs	r0, r0, #16
 801f356:	d464      	bmi.n	801f422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801f358:	4580      	cmp	r8, r0
 801f35a:	dd62      	ble.n	801f422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801f35c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f35e:	fb00 4202 	mla	r2, r0, r2, r4
 801f362:	1412      	asrs	r2, r2, #16
 801f364:	d45d      	bmi.n	801f422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801f366:	9802      	ldr	r0, [sp, #8]
 801f368:	4282      	cmp	r2, r0
 801f36a:	da5a      	bge.n	801f422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801f36c:	1cf0      	adds	r0, r6, #3
 801f36e:	469a      	mov	sl, r3
 801f370:	f1ba 0f00 	cmp.w	sl, #0
 801f374:	dd59      	ble.n	801f42a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801f376:	142a      	asrs	r2, r5, #16
 801f378:	9903      	ldr	r1, [sp, #12]
 801f37a:	1427      	asrs	r7, r4, #16
 801f37c:	fb01 2707 	mla	r7, r1, r7, r2
 801f380:	9904      	ldr	r1, [sp, #16]
 801f382:	087a      	lsrs	r2, r7, #1
 801f384:	5c8a      	ldrb	r2, [r1, r2]
 801f386:	07f9      	lsls	r1, r7, #31
 801f388:	bf54      	ite	pl
 801f38a:	f002 020f 	andpl.w	r2, r2, #15
 801f38e:	1112      	asrmi	r2, r2, #4
 801f390:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f394:	b2d2      	uxtb	r2, r2
 801f396:	2a00      	cmp	r2, #0
 801f398:	d03b      	beq.n	801f412 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f39a:	497e      	ldr	r1, [pc, #504]	; (801f594 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801f39c:	2aff      	cmp	r2, #255	; 0xff
 801f39e:	680f      	ldr	r7, [r1, #0]
 801f3a0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f3a4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f3a8:	b2ff      	uxtb	r7, r7
 801f3aa:	f000 80e9 	beq.w	801f580 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f3ae:	fa1f fe82 	uxth.w	lr, r2
 801f3b2:	43d2      	mvns	r2, r2
 801f3b4:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801f3b8:	fb17 f70e 	smulbb	r7, r7, lr
 801f3bc:	b2d2      	uxtb	r2, r2
 801f3be:	fb19 f90e 	smulbb	r9, r9, lr
 801f3c2:	fb0c 7702 	mla	r7, ip, r2, r7
 801f3c6:	fb1b fe0e 	smulbb	lr, fp, lr
 801f3ca:	b2bf      	uxth	r7, r7
 801f3cc:	f107 0c01 	add.w	ip, r7, #1
 801f3d0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f3d4:	123f      	asrs	r7, r7, #8
 801f3d6:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f3da:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801f3de:	fb07 9902 	mla	r9, r7, r2, r9
 801f3e2:	fa1f f989 	uxth.w	r9, r9
 801f3e6:	f109 0701 	add.w	r7, r9, #1
 801f3ea:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f3ee:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801f3f2:	fb07 ee02 	mla	lr, r7, r2, lr
 801f3f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3fa:	fa1f fe8e 	uxth.w	lr, lr
 801f3fe:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f402:	f10e 0201 	add.w	r2, lr, #1
 801f406:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801f40a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f40e:	f800 ec01 	strb.w	lr, [r0, #-1]
 801f412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f414:	3003      	adds	r0, #3
 801f416:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f41a:	4415      	add	r5, r2
 801f41c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f41e:	4414      	add	r4, r2
 801f420:	e7a6      	b.n	801f370 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f422:	2700      	movs	r7, #0
 801f424:	1bda      	subs	r2, r3, r7
 801f426:	2a00      	cmp	r2, #0
 801f428:	dc40      	bgt.n	801f4ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801f42a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f42e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f432:	441e      	add	r6, r3
 801f434:	9b01      	ldr	r3, [sp, #4]
 801f436:	2b00      	cmp	r3, #0
 801f438:	f340 80a9 	ble.w	801f58e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801f43c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f442:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f446:	eeb0 6a62 	vmov.f32	s12, s5
 801f44a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f44e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f452:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f456:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f45a:	eeb0 6a43 	vmov.f32	s12, s6
 801f45e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f462:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f466:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f46a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f46e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f472:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f476:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f47a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f47e:	ee12 2a90 	vmov	r2, s5
 801f482:	eef0 2a47 	vmov.f32	s5, s14
 801f486:	fb92 f3f3 	sdiv	r3, r2, r3
 801f48a:	ee13 2a10 	vmov	r2, s6
 801f48e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f492:	eeb0 3a67 	vmov.f32	s6, s15
 801f496:	fb92 f3f3 	sdiv	r3, r2, r3
 801f49a:	9314      	str	r3, [sp, #80]	; 0x50
 801f49c:	9b01      	ldr	r3, [sp, #4]
 801f49e:	9a05      	ldr	r2, [sp, #20]
 801f4a0:	3b01      	subs	r3, #1
 801f4a2:	9301      	str	r3, [sp, #4]
 801f4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4a6:	bf08      	it	eq
 801f4a8:	4613      	moveq	r3, r2
 801f4aa:	e72f      	b.n	801f30c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f4ac:	142a      	asrs	r2, r5, #16
 801f4ae:	d458      	bmi.n	801f562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f4b0:	4590      	cmp	r8, r2
 801f4b2:	dd56      	ble.n	801f562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f4b4:	1420      	asrs	r0, r4, #16
 801f4b6:	d454      	bmi.n	801f562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f4b8:	9902      	ldr	r1, [sp, #8]
 801f4ba:	4288      	cmp	r0, r1
 801f4bc:	da51      	bge.n	801f562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f4be:	9903      	ldr	r1, [sp, #12]
 801f4c0:	fb00 2001 	mla	r0, r0, r1, r2
 801f4c4:	9904      	ldr	r1, [sp, #16]
 801f4c6:	0842      	lsrs	r2, r0, #1
 801f4c8:	07c0      	lsls	r0, r0, #31
 801f4ca:	5c8a      	ldrb	r2, [r1, r2]
 801f4cc:	bf54      	ite	pl
 801f4ce:	f002 020f 	andpl.w	r2, r2, #15
 801f4d2:	1112      	asrmi	r2, r2, #4
 801f4d4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f4d8:	b2d2      	uxtb	r2, r2
 801f4da:	2a00      	cmp	r2, #0
 801f4dc:	d041      	beq.n	801f562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f4de:	492d      	ldr	r1, [pc, #180]	; (801f594 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801f4e0:	2aff      	cmp	r2, #255	; 0xff
 801f4e2:	6808      	ldr	r0, [r1, #0]
 801f4e4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801f4e8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f4ec:	fa5f fc80 	uxtb.w	ip, r0
 801f4f0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801f4f4:	d03b      	beq.n	801f56e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801f4f6:	fa1f f982 	uxth.w	r9, r2
 801f4fa:	4438      	add	r0, r7
 801f4fc:	43d2      	mvns	r2, r2
 801f4fe:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f502:	fb1c fc09 	smulbb	ip, ip, r9
 801f506:	fb1a fa09 	smulbb	sl, sl, r9
 801f50a:	b2d2      	uxtb	r2, r2
 801f50c:	fb1b f909 	smulbb	r9, fp, r9
 801f510:	fb0e cc02 	mla	ip, lr, r2, ip
 801f514:	fa1f fc8c 	uxth.w	ip, ip
 801f518:	f10c 0e01 	add.w	lr, ip, #1
 801f51c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801f520:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f524:	f806 c000 	strb.w	ip, [r6, r0]
 801f528:	4430      	add	r0, r6
 801f52a:	f890 c001 	ldrb.w	ip, [r0, #1]
 801f52e:	fb0c aa02 	mla	sl, ip, r2, sl
 801f532:	fa1f fa8a 	uxth.w	sl, sl
 801f536:	f10a 0c01 	add.w	ip, sl, #1
 801f53a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f53e:	f890 c002 	ldrb.w	ip, [r0, #2]
 801f542:	fb0c 9902 	mla	r9, ip, r2, r9
 801f546:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f54a:	fa1f f989 	uxth.w	r9, r9
 801f54e:	f880 a001 	strb.w	sl, [r0, #1]
 801f552:	f109 0201 	add.w	r2, r9, #1
 801f556:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801f55a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f55e:	f880 9002 	strb.w	r9, [r0, #2]
 801f562:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f564:	3701      	adds	r7, #1
 801f566:	4415      	add	r5, r2
 801f568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f56a:	4414      	add	r4, r2
 801f56c:	e75a      	b.n	801f424 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801f56e:	4438      	add	r0, r7
 801f570:	f806 c000 	strb.w	ip, [r6, r0]
 801f574:	4430      	add	r0, r6
 801f576:	f880 a001 	strb.w	sl, [r0, #1]
 801f57a:	f880 b002 	strb.w	fp, [r0, #2]
 801f57e:	e7f0      	b.n	801f562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f580:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f584:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f588:	f800 bc01 	strb.w	fp, [r0, #-1]
 801f58c:	e741      	b.n	801f412 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f58e:	b007      	add	sp, #28
 801f590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f594:	2000b444 	.word	0x2000b444

0801f598 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f598:	4770      	bx	lr

0801f59a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f59a:	4770      	bx	lr

0801f59c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f59c:	4770      	bx	lr

0801f59e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f59e:	4770      	bx	lr

0801f5a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f5a0:	4770      	bx	lr

0801f5a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f5a2:	4770      	bx	lr

0801f5a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f5a4:	4770      	bx	lr

0801f5a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f5a6:	4770      	bx	lr

0801f5a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f5a8:	4770      	bx	lr

0801f5aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f5aa:	4770      	bx	lr

0801f5ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f5ac:	4770      	bx	lr

0801f5ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f5ae:	4770      	bx	lr

0801f5b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f5b0:	4770      	bx	lr

0801f5b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f5b2:	4770      	bx	lr

0801f5b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f5b4:	4770      	bx	lr

0801f5b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f5b6:	4770      	bx	lr

0801f5b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f5b8:	4770      	bx	lr

0801f5ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f5ba:	4770      	bx	lr

0801f5bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f5bc:	4770      	bx	lr

0801f5be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f5be:	4770      	bx	lr

0801f5c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f5c0:	2bff      	cmp	r3, #255	; 0xff
 801f5c2:	b508      	push	{r3, lr}
 801f5c4:	d04f      	beq.n	801f666 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801f5c6:	2a2c      	cmp	r2, #44	; 0x2c
 801f5c8:	d032      	beq.n	801f630 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801f5ca:	d80f      	bhi.n	801f5ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801f5cc:	2a08      	cmp	r2, #8
 801f5ce:	d046      	beq.n	801f65e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f5d0:	d805      	bhi.n	801f5de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801f5d2:	2a04      	cmp	r2, #4
 801f5d4:	d041      	beq.n	801f65a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f5d6:	2a05      	cmp	r2, #5
 801f5d8:	d03d      	beq.n	801f656 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f5da:	2000      	movs	r0, #0
 801f5dc:	e027      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f5de:	2a0a      	cmp	r2, #10
 801f5e0:	d03d      	beq.n	801f65e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f5e2:	d301      	bcc.n	801f5e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801f5e4:	2a0b      	cmp	r2, #11
 801f5e6:	d1f8      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f5e8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f5ea:	e020      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f5ec:	2a30      	cmp	r2, #48	; 0x30
 801f5ee:	d038      	beq.n	801f662 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f5f0:	d808      	bhi.n	801f604 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801f5f2:	2a2e      	cmp	r2, #46	; 0x2e
 801f5f4:	684b      	ldr	r3, [r1, #4]
 801f5f6:	d029      	beq.n	801f64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801f5f8:	d90b      	bls.n	801f612 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801f5fa:	781b      	ldrb	r3, [r3, #0]
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d1ec      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f600:	6a00      	ldr	r0, [r0, #32]
 801f602:	e014      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f604:	2a32      	cmp	r2, #50	; 0x32
 801f606:	d02c      	beq.n	801f662 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f608:	d301      	bcc.n	801f60e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801f60a:	2a33      	cmp	r2, #51	; 0x33
 801f60c:	d1e5      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f60e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f610:	e00d      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f612:	781b      	ldrb	r3, [r3, #0]
 801f614:	2b01      	cmp	r3, #1
 801f616:	d009      	beq.n	801f62c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801f618:	d3f2      	bcc.n	801f600 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801f61a:	2b02      	cmp	r3, #2
 801f61c:	d1dd      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f61e:	4b39      	ldr	r3, [pc, #228]	; (801f704 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f620:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 801f624:	4a38      	ldr	r2, [pc, #224]	; (801f708 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f626:	4839      	ldr	r0, [pc, #228]	; (801f70c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801f628:	f008 f874 	bl	8027714 <__assert_func>
 801f62c:	6900      	ldr	r0, [r0, #16]
 801f62e:	bd08      	pop	{r3, pc}
 801f630:	684b      	ldr	r3, [r1, #4]
 801f632:	781b      	ldrb	r3, [r3, #0]
 801f634:	2b01      	cmp	r3, #1
 801f636:	d007      	beq.n	801f648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801f638:	d30b      	bcc.n	801f652 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f63a:	2b02      	cmp	r3, #2
 801f63c:	d1cd      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f63e:	4b31      	ldr	r3, [pc, #196]	; (801f704 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f640:	f44f 6181 	mov.w	r1, #1032	; 0x408
 801f644:	4a30      	ldr	r2, [pc, #192]	; (801f708 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f646:	e7ee      	b.n	801f626 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f648:	6880      	ldr	r0, [r0, #8]
 801f64a:	e7f0      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f64c:	781b      	ldrb	r3, [r3, #0]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	d1c3      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f652:	6980      	ldr	r0, [r0, #24]
 801f654:	e7eb      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f656:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f658:	e7e9      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f65a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f65c:	e7e7      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f65e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f660:	e7e5      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f662:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f664:	e7e3      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f666:	2a2c      	cmp	r2, #44	; 0x2c
 801f668:	d030      	beq.n	801f6cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801f66a:	d80f      	bhi.n	801f68c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801f66c:	2a08      	cmp	r2, #8
 801f66e:	d044      	beq.n	801f6fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f670:	d805      	bhi.n	801f67e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801f672:	2a04      	cmp	r2, #4
 801f674:	d03f      	beq.n	801f6f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f676:	2a05      	cmp	r2, #5
 801f678:	d1af      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f67a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f67c:	e7d7      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f67e:	2a0a      	cmp	r2, #10
 801f680:	d03b      	beq.n	801f6fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f682:	d301      	bcc.n	801f688 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801f684:	2a0b      	cmp	r2, #11
 801f686:	d1a8      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f688:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f68a:	e7d0      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f68c:	2a30      	cmp	r2, #48	; 0x30
 801f68e:	d036      	beq.n	801f6fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f690:	d808      	bhi.n	801f6a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801f692:	2a2e      	cmp	r2, #46	; 0x2e
 801f694:	684b      	ldr	r3, [r1, #4]
 801f696:	d028      	beq.n	801f6ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801f698:	d90b      	bls.n	801f6b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801f69a:	781b      	ldrb	r3, [r3, #0]
 801f69c:	2b00      	cmp	r3, #0
 801f69e:	d19c      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f6a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f6a2:	e7c4      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f6a4:	2a32      	cmp	r2, #50	; 0x32
 801f6a6:	d02a      	beq.n	801f6fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f6a8:	d301      	bcc.n	801f6ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801f6aa:	2a33      	cmp	r2, #51	; 0x33
 801f6ac:	d195      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f6ae:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f6b0:	e7bd      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f6b2:	781b      	ldrb	r3, [r3, #0]
 801f6b4:	2b01      	cmp	r3, #1
 801f6b6:	d007      	beq.n	801f6c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801f6b8:	d3f2      	bcc.n	801f6a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801f6ba:	2b02      	cmp	r3, #2
 801f6bc:	d18d      	bne.n	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f6be:	4b11      	ldr	r3, [pc, #68]	; (801f704 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f6c0:	f240 4139 	movw	r1, #1081	; 0x439
 801f6c4:	4a10      	ldr	r2, [pc, #64]	; (801f708 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f6c6:	e7ae      	b.n	801f626 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f6c8:	6940      	ldr	r0, [r0, #20]
 801f6ca:	e7b0      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f6cc:	684b      	ldr	r3, [r1, #4]
 801f6ce:	781b      	ldrb	r3, [r3, #0]
 801f6d0:	2b01      	cmp	r3, #1
 801f6d2:	d008      	beq.n	801f6e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801f6d4:	d30d      	bcc.n	801f6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f6d6:	2b02      	cmp	r3, #2
 801f6d8:	f47f af7f 	bne.w	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f6dc:	4b09      	ldr	r3, [pc, #36]	; (801f704 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801f6de:	f240 4145 	movw	r1, #1093	; 0x445
 801f6e2:	4a09      	ldr	r2, [pc, #36]	; (801f708 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801f6e4:	e79f      	b.n	801f626 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f6e6:	68c0      	ldr	r0, [r0, #12]
 801f6e8:	e7a1      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f6ea:	781b      	ldrb	r3, [r3, #0]
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	f47f af74 	bne.w	801f5da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f6f2:	69c0      	ldr	r0, [r0, #28]
 801f6f4:	e79b      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f6f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f6f8:	e799      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f6fa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f6fc:	e797      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f6fe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f700:	e795      	b.n	801f62e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f702:	bf00      	nop
 801f704:	0802cc2b 	.word	0x0802cc2b
 801f708:	0802d3db 	.word	0x0802d3db
 801f70c:	0802cc77 	.word	0x0802cc77

0801f710 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801f710:	b508      	push	{r3, lr}
 801f712:	4b06      	ldr	r3, [pc, #24]	; (801f72c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801f714:	8818      	ldrh	r0, [r3, #0]
 801f716:	b928      	cbnz	r0, 801f724 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801f718:	4b05      	ldr	r3, [pc, #20]	; (801f730 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801f71a:	2155      	movs	r1, #85	; 0x55
 801f71c:	4a05      	ldr	r2, [pc, #20]	; (801f734 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801f71e:	4806      	ldr	r0, [pc, #24]	; (801f738 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801f720:	f007 fff8 	bl	8027714 <__assert_func>
 801f724:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f728:	b280      	uxth	r0, r0
 801f72a:	bd08      	pop	{r3, pc}
 801f72c:	2000b416 	.word	0x2000b416
 801f730:	0802cec4 	.word	0x0802cec4
 801f734:	0802d3a0 	.word	0x0802d3a0
 801f738:	0802cf06 	.word	0x0802cf06

0801f73c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f740:	4616      	mov	r6, r2
 801f742:	b087      	sub	sp, #28
 801f744:	461f      	mov	r7, r3
 801f746:	b34b      	cbz	r3, 801f79c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f748:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f74c:	2b00      	cmp	r3, #0
 801f74e:	dd25      	ble.n	801f79c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f750:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f754:	2b00      	cmp	r3, #0
 801f756:	dd21      	ble.n	801f79c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f758:	6808      	ldr	r0, [r1, #0]
 801f75a:	ab04      	add	r3, sp, #16
 801f75c:	6849      	ldr	r1, [r1, #4]
 801f75e:	4c5a      	ldr	r4, [pc, #360]	; (801f8c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801f760:	c303      	stmia	r3!, {r0, r1}
 801f762:	a804      	add	r0, sp, #16
 801f764:	f7fc f892 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f768:	6820      	ldr	r0, [r4, #0]
 801f76a:	6803      	ldr	r3, [r0, #0]
 801f76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f76e:	4798      	blx	r3
 801f770:	2fff      	cmp	r7, #255	; 0xff
 801f772:	4623      	mov	r3, r4
 801f774:	d015      	beq.n	801f7a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f776:	f010 0f08 	tst.w	r0, #8
 801f77a:	d015      	beq.n	801f7a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801f77c:	6818      	ldr	r0, [r3, #0]
 801f77e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f782:	6801      	ldr	r1, [r0, #0]
 801f784:	9401      	str	r4, [sp, #4]
 801f786:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f78a:	9702      	str	r7, [sp, #8]
 801f78c:	9400      	str	r4, [sp, #0]
 801f78e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f792:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801f794:	4631      	mov	r1, r6
 801f796:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f79a:	47a0      	blx	r4
 801f79c:	b007      	add	sp, #28
 801f79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7a2:	f010 0f02 	tst.w	r0, #2
 801f7a6:	e7e8      	b.n	801f77a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801f7a8:	6818      	ldr	r0, [r3, #0]
 801f7aa:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801f7ae:	6803      	ldr	r3, [r0, #0]
 801f7b0:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801f7b4:	6a1b      	ldr	r3, [r3, #32]
 801f7b6:	4798      	blx	r3
 801f7b8:	4944      	ldr	r1, [pc, #272]	; (801f8cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801f7ba:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f7be:	2fff      	cmp	r7, #255	; 0xff
 801f7c0:	f8b1 c000 	ldrh.w	ip, [r1]
 801f7c4:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801f7c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f7cc:	4688      	mov	r8, r1
 801f7ce:	fb0c 2303 	mla	r3, ip, r3, r2
 801f7d2:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801f7d6:	b2f2      	uxtb	r2, r6
 801f7d8:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801f7dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7e0:	4418      	add	r0, r3
 801f7e2:	d112      	bne.n	801f80a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801f7e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f7e8:	2100      	movs	r1, #0
 801f7ea:	42a9      	cmp	r1, r5
 801f7ec:	da66      	bge.n	801f8bc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801f7ee:	4603      	mov	r3, r0
 801f7f0:	2700      	movs	r7, #0
 801f7f2:	42a7      	cmp	r7, r4
 801f7f4:	f103 0303 	add.w	r3, r3, #3
 801f7f8:	da57      	bge.n	801f8aa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801f7fa:	f803 2c03 	strb.w	r2, [r3, #-3]
 801f7fe:	3701      	adds	r7, #1
 801f800:	f803 ec02 	strb.w	lr, [r3, #-2]
 801f804:	f803 cc01 	strb.w	ip, [r3, #-1]
 801f808:	e7f3      	b.n	801f7f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801f80a:	b2bb      	uxth	r3, r7
 801f80c:	f04f 0800 	mov.w	r8, #0
 801f810:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f814:	fb0c fc03 	mul.w	ip, ip, r3
 801f818:	fb0e fe03 	mul.w	lr, lr, r3
 801f81c:	435a      	muls	r2, r3
 801f81e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801f822:	460f      	mov	r7, r1
 801f824:	b29b      	uxth	r3, r3
 801f826:	45a8      	cmp	r8, r5
 801f828:	da48      	bge.n	801f8bc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801f82a:	4601      	mov	r1, r0
 801f82c:	f04f 0a00 	mov.w	sl, #0
 801f830:	45a2      	cmp	sl, r4
 801f832:	f101 0103 	add.w	r1, r1, #3
 801f836:	da2f      	bge.n	801f898 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801f838:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801f83c:	f10a 0a01 	add.w	sl, sl, #1
 801f840:	fb19 f903 	smulbb	r9, r9, r3
 801f844:	4491      	add	r9, r2
 801f846:	fa1f f989 	uxth.w	r9, r9
 801f84a:	f109 0b01 	add.w	fp, r9, #1
 801f84e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f852:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f856:	f801 9c03 	strb.w	r9, [r1, #-3]
 801f85a:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801f85e:	fb19 f903 	smulbb	r9, r9, r3
 801f862:	44f1      	add	r9, lr
 801f864:	fa1f f989 	uxth.w	r9, r9
 801f868:	f109 0b01 	add.w	fp, r9, #1
 801f86c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f870:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f874:	f801 9c02 	strb.w	r9, [r1, #-2]
 801f878:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801f87c:	fb19 f903 	smulbb	r9, r9, r3
 801f880:	44e1      	add	r9, ip
 801f882:	fa1f f989 	uxth.w	r9, r9
 801f886:	f109 0b01 	add.w	fp, r9, #1
 801f88a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f88e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f892:	f801 9c01 	strb.w	r9, [r1, #-1]
 801f896:	e7cb      	b.n	801f830 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801f898:	8839      	ldrh	r1, [r7, #0]
 801f89a:	f108 0801 	add.w	r8, r8, #1
 801f89e:	1b09      	subs	r1, r1, r4
 801f8a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f8a4:	4431      	add	r1, r6
 801f8a6:	4408      	add	r0, r1
 801f8a8:	e7bd      	b.n	801f826 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801f8aa:	f8b8 3000 	ldrh.w	r3, [r8]
 801f8ae:	3101      	adds	r1, #1
 801f8b0:	1b1b      	subs	r3, r3, r4
 801f8b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8b6:	4433      	add	r3, r6
 801f8b8:	4418      	add	r0, r3
 801f8ba:	e796      	b.n	801f7ea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801f8bc:	4b02      	ldr	r3, [pc, #8]	; (801f8c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801f8be:	6818      	ldr	r0, [r3, #0]
 801f8c0:	6803      	ldr	r3, [r0, #0]
 801f8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8c4:	4798      	blx	r3
 801f8c6:	e769      	b.n	801f79c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f8c8:	2000b41c 	.word	0x2000b41c
 801f8cc:	2000b416 	.word	0x2000b416

0801f8d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8d4:	b08d      	sub	sp, #52	; 0x34
 801f8d6:	460c      	mov	r4, r1
 801f8d8:	4617      	mov	r7, r2
 801f8da:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801f8de:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801f8e2:	2e00      	cmp	r6, #0
 801f8e4:	d04a      	beq.n	801f97c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f8e6:	6810      	ldr	r0, [r2, #0]
 801f8e8:	ad08      	add	r5, sp, #32
 801f8ea:	6851      	ldr	r1, [r2, #4]
 801f8ec:	c503      	stmia	r5!, {r0, r1}
 801f8ee:	6818      	ldr	r0, [r3, #0]
 801f8f0:	ad0a      	add	r5, sp, #40	; 0x28
 801f8f2:	6859      	ldr	r1, [r3, #4]
 801f8f4:	c503      	stmia	r5!, {r0, r1}
 801f8f6:	a808      	add	r0, sp, #32
 801f8f8:	f7fb ffc8 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8fc:	4639      	mov	r1, r7
 801f8fe:	a80a      	add	r0, sp, #40	; 0x28
 801f900:	4f59      	ldr	r7, [pc, #356]	; (801fa68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801f902:	f7fb ffab 	bl	801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f906:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f90a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f90e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f912:	6838      	ldr	r0, [r7, #0]
 801f914:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f918:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801f91c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801f920:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f924:	440c      	add	r4, r1
 801f926:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f92a:	440a      	add	r2, r1
 801f92c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f930:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f934:	4413      	add	r3, r2
 801f936:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f93a:	6803      	ldr	r3, [r0, #0]
 801f93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f93e:	4798      	blx	r3
 801f940:	2eff      	cmp	r6, #255	; 0xff
 801f942:	f000 8089 	beq.w	801fa58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801f946:	0743      	lsls	r3, r0, #29
 801f948:	d405      	bmi.n	801f956 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801f94a:	f1b9 0f00 	cmp.w	r9, #0
 801f94e:	d018      	beq.n	801f982 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801f950:	f010 0f10 	tst.w	r0, #16
 801f954:	d015      	beq.n	801f982 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801f956:	6838      	ldr	r0, [r7, #0]
 801f958:	b2ad      	uxth	r5, r5
 801f95a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f95e:	6801      	ldr	r1, [r0, #0]
 801f960:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f964:	9500      	str	r5, [sp, #0]
 801f966:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801f96a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801f96e:	9602      	str	r6, [sp, #8]
 801f970:	fa1f f688 	uxth.w	r6, r8
 801f974:	9601      	str	r6, [sp, #4]
 801f976:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801f978:	4621      	mov	r1, r4
 801f97a:	47a8      	blx	r5
 801f97c:	b00d      	add	sp, #52	; 0x34
 801f97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f982:	6838      	ldr	r0, [r7, #0]
 801f984:	6803      	ldr	r3, [r0, #0]
 801f986:	6a1b      	ldr	r3, [r3, #32]
 801f988:	4798      	blx	r3
 801f98a:	4a38      	ldr	r2, [pc, #224]	; (801fa6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801f98c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801f990:	2eff      	cmp	r6, #255	; 0xff
 801f992:	8813      	ldrh	r3, [r2, #0]
 801f994:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801f998:	fb0c 1303 	mla	r3, ip, r3, r1
 801f99c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801f9a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f9a4:	4418      	add	r0, r3
 801f9a6:	d032      	beq.n	801fa0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801f9a8:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801f9ac:	f04f 0c00 	mov.w	ip, #0
 801f9b0:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801f9b4:	9306      	str	r3, [sp, #24]
 801f9b6:	45c4      	cmp	ip, r8
 801f9b8:	da49      	bge.n	801fa4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801f9ba:	4686      	mov	lr, r0
 801f9bc:	46a1      	mov	r9, r4
 801f9be:	eba9 0304 	sub.w	r3, r9, r4
 801f9c2:	428b      	cmp	r3, r1
 801f9c4:	da13      	bge.n	801f9ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801f9c6:	f819 3b01 	ldrb.w	r3, [r9], #1
 801f9ca:	f89e b000 	ldrb.w	fp, [lr]
 801f9ce:	9307      	str	r3, [sp, #28]
 801f9d0:	9b06      	ldr	r3, [sp, #24]
 801f9d2:	fb1b fb03 	smulbb	fp, fp, r3
 801f9d6:	9b07      	ldr	r3, [sp, #28]
 801f9d8:	fb03 b306 	mla	r3, r3, r6, fp
 801f9dc:	b29b      	uxth	r3, r3
 801f9de:	f103 0b01 	add.w	fp, r3, #1
 801f9e2:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801f9e6:	121b      	asrs	r3, r3, #8
 801f9e8:	f80e 3b01 	strb.w	r3, [lr], #1
 801f9ec:	e7e7      	b.n	801f9be <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801f9ee:	8813      	ldrh	r3, [r2, #0]
 801f9f0:	f10c 0c01 	add.w	ip, ip, #1
 801f9f4:	1b5b      	subs	r3, r3, r5
 801f9f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f9fa:	4453      	add	r3, sl
 801f9fc:	4418      	add	r0, r3
 801f9fe:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801fa02:	1b5b      	subs	r3, r3, r5
 801fa04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa08:	4453      	add	r3, sl
 801fa0a:	441c      	add	r4, r3
 801fa0c:	e7d3      	b.n	801f9b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801fa0e:	2600      	movs	r6, #0
 801fa10:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801fa14:	4546      	cmp	r6, r8
 801fa16:	da1a      	bge.n	801fa4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801fa18:	f100 3eff 	add.w	lr, r0, #4294967295
 801fa1c:	4623      	mov	r3, r4
 801fa1e:	eba3 0904 	sub.w	r9, r3, r4
 801fa22:	4589      	cmp	r9, r1
 801fa24:	da04      	bge.n	801fa30 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801fa26:	f813 9b01 	ldrb.w	r9, [r3], #1
 801fa2a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801fa2e:	e7f6      	b.n	801fa1e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801fa30:	8813      	ldrh	r3, [r2, #0]
 801fa32:	3601      	adds	r6, #1
 801fa34:	1b5b      	subs	r3, r3, r5
 801fa36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa3a:	4463      	add	r3, ip
 801fa3c:	4418      	add	r0, r3
 801fa3e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801fa42:	1b5b      	subs	r3, r3, r5
 801fa44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa48:	4463      	add	r3, ip
 801fa4a:	441c      	add	r4, r3
 801fa4c:	e7e2      	b.n	801fa14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801fa4e:	6838      	ldr	r0, [r7, #0]
 801fa50:	6803      	ldr	r3, [r0, #0]
 801fa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa54:	4798      	blx	r3
 801fa56:	e791      	b.n	801f97c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801fa58:	f1b9 0f00 	cmp.w	r9, #0
 801fa5c:	f47f af78 	bne.w	801f950 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801fa60:	f010 0f01 	tst.w	r0, #1
 801fa64:	e776      	b.n	801f954 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801fa66:	bf00      	nop
 801fa68:	2000b41c 	.word	0x2000b41c
 801fa6c:	2000b416 	.word	0x2000b416

0801fa70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fa70:	b510      	push	{r4, lr}
 801fa72:	4604      	mov	r4, r0
 801fa74:	2104      	movs	r1, #4
 801fa76:	f007 fe21 	bl	80276bc <_ZdlPvj>
 801fa7a:	4620      	mov	r0, r4
 801fa7c:	bd10      	pop	{r4, pc}

0801fa7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801fa7e:	b510      	push	{r4, lr}
 801fa80:	4604      	mov	r4, r0
 801fa82:	2104      	movs	r1, #4
 801fa84:	f007 fe1a 	bl	80276bc <_ZdlPvj>
 801fa88:	4620      	mov	r0, r4
 801fa8a:	bd10      	pop	{r4, pc}

0801fa8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fa8c:	b510      	push	{r4, lr}
 801fa8e:	4604      	mov	r4, r0
 801fa90:	2104      	movs	r1, #4
 801fa92:	f007 fe13 	bl	80276bc <_ZdlPvj>
 801fa96:	4620      	mov	r0, r4
 801fa98:	bd10      	pop	{r4, pc}

0801fa9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fa9a:	b510      	push	{r4, lr}
 801fa9c:	4604      	mov	r4, r0
 801fa9e:	2104      	movs	r1, #4
 801faa0:	f007 fe0c 	bl	80276bc <_ZdlPvj>
 801faa4:	4620      	mov	r0, r4
 801faa6:	bd10      	pop	{r4, pc}

0801faa8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801faa8:	b510      	push	{r4, lr}
 801faaa:	4604      	mov	r4, r0
 801faac:	2104      	movs	r1, #4
 801faae:	f007 fe05 	bl	80276bc <_ZdlPvj>
 801fab2:	4620      	mov	r0, r4
 801fab4:	bd10      	pop	{r4, pc}

0801fab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fab6:	b510      	push	{r4, lr}
 801fab8:	4604      	mov	r4, r0
 801faba:	2104      	movs	r1, #4
 801fabc:	f007 fdfe 	bl	80276bc <_ZdlPvj>
 801fac0:	4620      	mov	r0, r4
 801fac2:	bd10      	pop	{r4, pc}

0801fac4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801fac4:	b510      	push	{r4, lr}
 801fac6:	4604      	mov	r4, r0
 801fac8:	2104      	movs	r1, #4
 801faca:	f007 fdf7 	bl	80276bc <_ZdlPvj>
 801face:	4620      	mov	r0, r4
 801fad0:	bd10      	pop	{r4, pc}

0801fad2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fad2:	b510      	push	{r4, lr}
 801fad4:	4604      	mov	r4, r0
 801fad6:	2104      	movs	r1, #4
 801fad8:	f007 fdf0 	bl	80276bc <_ZdlPvj>
 801fadc:	4620      	mov	r0, r4
 801fade:	bd10      	pop	{r4, pc}

0801fae0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fae0:	b510      	push	{r4, lr}
 801fae2:	4604      	mov	r4, r0
 801fae4:	2104      	movs	r1, #4
 801fae6:	f007 fde9 	bl	80276bc <_ZdlPvj>
 801faea:	4620      	mov	r0, r4
 801faec:	bd10      	pop	{r4, pc}

0801faee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801faee:	b510      	push	{r4, lr}
 801faf0:	4604      	mov	r4, r0
 801faf2:	2104      	movs	r1, #4
 801faf4:	f007 fde2 	bl	80276bc <_ZdlPvj>
 801faf8:	4620      	mov	r0, r4
 801fafa:	bd10      	pop	{r4, pc}

0801fafc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fafc:	b510      	push	{r4, lr}
 801fafe:	4604      	mov	r4, r0
 801fb00:	2104      	movs	r1, #4
 801fb02:	f007 fddb 	bl	80276bc <_ZdlPvj>
 801fb06:	4620      	mov	r0, r4
 801fb08:	bd10      	pop	{r4, pc}

0801fb0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fb0a:	b510      	push	{r4, lr}
 801fb0c:	4604      	mov	r4, r0
 801fb0e:	2104      	movs	r1, #4
 801fb10:	f007 fdd4 	bl	80276bc <_ZdlPvj>
 801fb14:	4620      	mov	r0, r4
 801fb16:	bd10      	pop	{r4, pc}

0801fb18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fb18:	b510      	push	{r4, lr}
 801fb1a:	4604      	mov	r4, r0
 801fb1c:	2104      	movs	r1, #4
 801fb1e:	f007 fdcd 	bl	80276bc <_ZdlPvj>
 801fb22:	4620      	mov	r0, r4
 801fb24:	bd10      	pop	{r4, pc}

0801fb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fb26:	b510      	push	{r4, lr}
 801fb28:	4604      	mov	r4, r0
 801fb2a:	2104      	movs	r1, #4
 801fb2c:	f007 fdc6 	bl	80276bc <_ZdlPvj>
 801fb30:	4620      	mov	r0, r4
 801fb32:	bd10      	pop	{r4, pc}

0801fb34 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801fb34:	b510      	push	{r4, lr}
 801fb36:	4604      	mov	r4, r0
 801fb38:	2104      	movs	r1, #4
 801fb3a:	f007 fdbf 	bl	80276bc <_ZdlPvj>
 801fb3e:	4620      	mov	r0, r4
 801fb40:	bd10      	pop	{r4, pc}

0801fb42 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fb42:	b510      	push	{r4, lr}
 801fb44:	4604      	mov	r4, r0
 801fb46:	2104      	movs	r1, #4
 801fb48:	f007 fdb8 	bl	80276bc <_ZdlPvj>
 801fb4c:	4620      	mov	r0, r4
 801fb4e:	bd10      	pop	{r4, pc}

0801fb50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801fb50:	b510      	push	{r4, lr}
 801fb52:	4604      	mov	r4, r0
 801fb54:	2104      	movs	r1, #4
 801fb56:	f007 fdb1 	bl	80276bc <_ZdlPvj>
 801fb5a:	4620      	mov	r0, r4
 801fb5c:	bd10      	pop	{r4, pc}

0801fb5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801fb5e:	b510      	push	{r4, lr}
 801fb60:	4604      	mov	r4, r0
 801fb62:	2104      	movs	r1, #4
 801fb64:	f007 fdaa 	bl	80276bc <_ZdlPvj>
 801fb68:	4620      	mov	r0, r4
 801fb6a:	bd10      	pop	{r4, pc}

0801fb6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801fb6c:	b510      	push	{r4, lr}
 801fb6e:	4604      	mov	r4, r0
 801fb70:	2104      	movs	r1, #4
 801fb72:	f007 fda3 	bl	80276bc <_ZdlPvj>
 801fb76:	4620      	mov	r0, r4
 801fb78:	bd10      	pop	{r4, pc}

0801fb7a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801fb7a:	b510      	push	{r4, lr}
 801fb7c:	4604      	mov	r4, r0
 801fb7e:	2104      	movs	r1, #4
 801fb80:	f007 fd9c 	bl	80276bc <_ZdlPvj>
 801fb84:	4620      	mov	r0, r4
 801fb86:	bd10      	pop	{r4, pc}

0801fb88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb8c:	4d9e      	ldr	r5, [pc, #632]	; (801fe08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801fb8e:	4690      	mov	r8, r2
 801fb90:	b08f      	sub	sp, #60	; 0x3c
 801fb92:	4604      	mov	r4, r0
 801fb94:	682a      	ldr	r2, [r5, #0]
 801fb96:	4689      	mov	r9, r1
 801fb98:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801fb9c:	2a02      	cmp	r2, #2
 801fb9e:	d106      	bne.n	801fbae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801fba0:	4b9a      	ldr	r3, [pc, #616]	; (801fe0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801fba2:	f240 11ef 	movw	r1, #495	; 0x1ef
 801fba6:	4a9a      	ldr	r2, [pc, #616]	; (801fe10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fba8:	489a      	ldr	r0, [pc, #616]	; (801fe14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801fbaa:	f007 fdb3 	bl	8027714 <__assert_func>
 801fbae:	ae0e      	add	r6, sp, #56	; 0x38
 801fbb0:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801fbb4:	4630      	mov	r0, r6
 801fbb6:	f7fe f8b1 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fbba:	6823      	ldr	r3, [r4, #0]
 801fbbc:	4607      	mov	r7, r0
 801fbbe:	4620      	mov	r0, r4
 801fbc0:	6a1b      	ldr	r3, [r3, #32]
 801fbc2:	4798      	blx	r3
 801fbc4:	4287      	cmp	r7, r0
 801fbc6:	d004      	beq.n	801fbd2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801fbc8:	4b93      	ldr	r3, [pc, #588]	; (801fe18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801fbca:	f240 11f1 	movw	r1, #497	; 0x1f1
 801fbce:	4a90      	ldr	r2, [pc, #576]	; (801fe10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fbd0:	e7ea      	b.n	801fba8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801fbd2:	4630      	mov	r0, r6
 801fbd4:	f7fe f81e 	bl	801dc14 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fbd8:	4607      	mov	r7, r0
 801fbda:	b920      	cbnz	r0, 801fbe6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801fbdc:	4b8f      	ldr	r3, [pc, #572]	; (801fe1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801fbde:	f240 11f3 	movw	r1, #499	; 0x1f3
 801fbe2:	4a8b      	ldr	r2, [pc, #556]	; (801fe10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fbe4:	e7e0      	b.n	801fba8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801fbe6:	f8d8 0000 	ldr.w	r0, [r8]
 801fbea:	ab06      	add	r3, sp, #24
 801fbec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fbf0:	f9b8 a000 	ldrsh.w	sl, [r8]
 801fbf4:	c303      	stmia	r3!, {r0, r1}
 801fbf6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801fbfa:	ab08      	add	r3, sp, #32
 801fbfc:	f8d9 0000 	ldr.w	r0, [r9]
 801fc00:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801fc04:	c303      	stmia	r3!, {r0, r1}
 801fc06:	4630      	mov	r0, r6
 801fc08:	f7fd ff36 	bl	801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fc0c:	4680      	mov	r8, r0
 801fc0e:	4630      	mov	r0, r6
 801fc10:	4e83      	ldr	r6, [pc, #524]	; (801fe20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801fc12:	f7fd ff6b 	bl	801daec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801fc16:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801fc1a:	f10d 0920 	add.w	r9, sp, #32
 801fc1e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801fc22:	a806      	add	r0, sp, #24
 801fc24:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801fc28:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801fc2c:	f7fb fe2e 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc30:	4648      	mov	r0, r9
 801fc32:	f7fb fe2b 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc36:	a80a      	add	r0, sp, #40	; 0x28
 801fc38:	f7fb fe28 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc3c:	4b79      	ldr	r3, [pc, #484]	; (801fe24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801fc3e:	2100      	movs	r1, #0
 801fc40:	f9b6 2000 	ldrsh.w	r2, [r6]
 801fc44:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fc48:	4648      	mov	r0, r9
 801fc4a:	910c      	str	r1, [sp, #48]	; 0x30
 801fc4c:	a90c      	add	r1, sp, #48	; 0x30
 801fc4e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801fc52:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801fc56:	f7f8 f895 	bl	8017d84 <_ZN8touchgfx4RectaNERKS0_>
 801fc5a:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801fc5e:	9602      	str	r6, [sp, #8]
 801fc60:	f1bc 0f00 	cmp.w	ip, #0
 801fc64:	f340 80a4 	ble.w	801fdb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fc68:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801fc6c:	2e00      	cmp	r6, #0
 801fc6e:	f340 809f 	ble.w	801fdb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fc72:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801fc76:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801fc7a:	4288      	cmp	r0, r1
 801fc7c:	db36      	blt.n	801fcec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fc7e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801fc82:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801fc86:	429a      	cmp	r2, r3
 801fc88:	db30      	blt.n	801fcec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fc8a:	4460      	add	r0, ip
 801fc8c:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801fc90:	4461      	add	r1, ip
 801fc92:	b200      	sxth	r0, r0
 801fc94:	b209      	sxth	r1, r1
 801fc96:	4288      	cmp	r0, r1
 801fc98:	dc28      	bgt.n	801fcec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fc9a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801fc9e:	4432      	add	r2, r6
 801fca0:	440b      	add	r3, r1
 801fca2:	b212      	sxth	r2, r2
 801fca4:	b21b      	sxth	r3, r3
 801fca6:	429a      	cmp	r2, r3
 801fca8:	dc20      	bgt.n	801fcec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801fcaa:	6823      	ldr	r3, [r4, #0]
 801fcac:	4620      	mov	r0, r4
 801fcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fcb0:	4798      	blx	r3
 801fcb2:	4682      	mov	sl, r0
 801fcb4:	6828      	ldr	r0, [r5, #0]
 801fcb6:	6803      	ldr	r3, [r0, #0]
 801fcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fcba:	4798      	blx	r3
 801fcbc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801fcc0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801fcc4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801fcc8:	9303      	str	r3, [sp, #12]
 801fcca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fcce:	1a9b      	subs	r3, r3, r2
 801fcd0:	b29b      	uxth	r3, r3
 801fcd2:	b21c      	sxth	r4, r3
 801fcd4:	2c00      	cmp	r4, #0
 801fcd6:	dc0e      	bgt.n	801fcf6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801fcd8:	b134      	cbz	r4, 801fce8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801fcda:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fcde:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801fce2:	4413      	add	r3, r2
 801fce4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801fce8:	463c      	mov	r4, r7
 801fcea:	e00b      	b.n	801fd04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801fcec:	4b4e      	ldr	r3, [pc, #312]	; (801fe28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801fcee:	f240 2101 	movw	r1, #513	; 0x201
 801fcf2:	4a47      	ldr	r2, [pc, #284]	; (801fe10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801fcf4:	e758      	b.n	801fba8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801fcf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcfa:	ebab 0303 	sub.w	r3, fp, r3
 801fcfe:	443c      	add	r4, r7
 801fd00:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801fd04:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801fd08:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fd0c:	1a9b      	subs	r3, r3, r2
 801fd0e:	b29b      	uxth	r3, r3
 801fd10:	b219      	sxth	r1, r3
 801fd12:	2900      	cmp	r1, #0
 801fd14:	dd50      	ble.n	801fdb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801fd16:	9a03      	ldr	r2, [sp, #12]
 801fd18:	fb02 4401 	mla	r4, r2, r1, r4
 801fd1c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801fd20:	1ad3      	subs	r3, r2, r3
 801fd22:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801fd26:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801fd2a:	f1bc 0f00 	cmp.w	ip, #0
 801fd2e:	dd3f      	ble.n	801fdb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fd30:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801fd34:	2e00      	cmp	r6, #0
 801fd36:	dd3b      	ble.n	801fdb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fd38:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801fd3c:	2203      	movs	r2, #3
 801fd3e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801fd42:	fb0a f801 	mul.w	r8, sl, r1
 801fd46:	fb13 8802 	smlabb	r8, r3, r2, r8
 801fd4a:	9a02      	ldr	r2, [sp, #8]
 801fd4c:	4480      	add	r8, r0
 801fd4e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801fd52:	8812      	ldrh	r2, [r2, #0]
 801fd54:	4584      	cmp	ip, r0
 801fd56:	eba2 0303 	sub.w	r3, r2, r3
 801fd5a:	bfa8      	it	ge
 801fd5c:	4684      	movge	ip, r0
 801fd5e:	459c      	cmp	ip, r3
 801fd60:	bfa8      	it	ge
 801fd62:	469c      	movge	ip, r3
 801fd64:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801fd68:	429e      	cmp	r6, r3
 801fd6a:	bfa8      	it	ge
 801fd6c:	461e      	movge	r6, r3
 801fd6e:	4b2d      	ldr	r3, [pc, #180]	; (801fe24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801fd70:	881b      	ldrh	r3, [r3, #0]
 801fd72:	1a59      	subs	r1, r3, r1
 801fd74:	4633      	mov	r3, r6
 801fd76:	428e      	cmp	r6, r1
 801fd78:	bfa8      	it	ge
 801fd7a:	460b      	movge	r3, r1
 801fd7c:	4562      	cmp	r2, ip
 801fd7e:	9302      	str	r3, [sp, #8]
 801fd80:	d12d      	bne.n	801fdde <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801fd82:	455a      	cmp	r2, fp
 801fd84:	d12b      	bne.n	801fdde <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801fd86:	6828      	ldr	r0, [r5, #0]
 801fd88:	6803      	ldr	r3, [r0, #0]
 801fd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd8c:	4798      	blx	r3
 801fd8e:	07c3      	lsls	r3, r0, #31
 801fd90:	d51b      	bpl.n	801fdca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801fd92:	6828      	ldr	r0, [r5, #0]
 801fd94:	9b02      	ldr	r3, [sp, #8]
 801fd96:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801fd9a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801fd9e:	6803      	ldr	r3, [r0, #0]
 801fda0:	f8cd b000 	str.w	fp, [sp]
 801fda4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801fda6:	4623      	mov	r3, r4
 801fda8:	e899 0006 	ldmia.w	r9, {r1, r2}
 801fdac:	47a8      	blx	r5
 801fdae:	4607      	mov	r7, r0
 801fdb0:	4638      	mov	r0, r7
 801fdb2:	b00f      	add	sp, #60	; 0x3c
 801fdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb8:	bf1f      	itttt	ne
 801fdba:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801fdbe:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801fdc2:	189b      	addne	r3, r3, r2
 801fdc4:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801fdc8:	e7ad      	b.n	801fd26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801fdca:	6828      	ldr	r0, [r5, #0]
 801fdcc:	4642      	mov	r2, r8
 801fdce:	4621      	mov	r1, r4
 801fdd0:	6803      	ldr	r3, [r0, #0]
 801fdd2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801fdd4:	9b02      	ldr	r3, [sp, #8]
 801fdd6:	fb03 f30a 	mul.w	r3, r3, sl
 801fdda:	47a8      	blx	r5
 801fddc:	e7e8      	b.n	801fdb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fdde:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801fde2:	f04f 0900 	mov.w	r9, #0
 801fde6:	9b02      	ldr	r3, [sp, #8]
 801fde8:	454b      	cmp	r3, r9
 801fdea:	dde1      	ble.n	801fdb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fdec:	6828      	ldr	r0, [r5, #0]
 801fdee:	4642      	mov	r2, r8
 801fdf0:	4621      	mov	r1, r4
 801fdf2:	44d0      	add	r8, sl
 801fdf4:	6803      	ldr	r3, [r0, #0]
 801fdf6:	f109 0901 	add.w	r9, r9, #1
 801fdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdfc:	461e      	mov	r6, r3
 801fdfe:	465b      	mov	r3, fp
 801fe00:	47b0      	blx	r6
 801fe02:	9b03      	ldr	r3, [sp, #12]
 801fe04:	441c      	add	r4, r3
 801fe06:	e7ee      	b.n	801fde6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801fe08:	2000b41c 	.word	0x2000b41c
 801fe0c:	0802cca9 	.word	0x0802cca9
 801fe10:	0802d485 	.word	0x0802d485
 801fe14:	0802cc77 	.word	0x0802cc77
 801fe18:	0802cd5b 	.word	0x0802cd5b
 801fe1c:	0802cdb0 	.word	0x0802cdb0
 801fe20:	2000b416 	.word	0x2000b416
 801fe24:	2000b418 	.word	0x2000b418
 801fe28:	0802cdee 	.word	0x0802cdee

0801fe2c <_ZN8touchgfx8LCD24bppC1Ev>:
 801fe2c:	4a0b      	ldr	r2, [pc, #44]	; (801fe5c <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801fe2e:	6002      	str	r2, [r0, #0]
 801fe30:	2200      	movs	r2, #0
 801fe32:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801fe36:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801fe3a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801fe3e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801fe42:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801fe46:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801fe4a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801fe4e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801fe52:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801fe56:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801fe5a:	4770      	bx	lr
 801fe5c:	0802d0d4 	.word	0x0802d0d4

0801fe60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe64:	b093      	sub	sp, #76	; 0x4c
 801fe66:	880c      	ldrh	r4, [r1, #0]
 801fe68:	4605      	mov	r5, r0
 801fe6a:	460f      	mov	r7, r1
 801fe6c:	4691      	mov	r9, r2
 801fe6e:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801fe72:	b12c      	cbz	r4, 801fe80 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801fe74:	4b71      	ldr	r3, [pc, #452]	; (802003c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801fe76:	2168      	movs	r1, #104	; 0x68
 801fe78:	4a71      	ldr	r2, [pc, #452]	; (8020040 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801fe7a:	4872      	ldr	r0, [pc, #456]	; (8020044 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801fe7c:	f007 fc4a 	bl	8027714 <__assert_func>
 801fe80:	6810      	ldr	r0, [r2, #0]
 801fe82:	ae0e      	add	r6, sp, #56	; 0x38
 801fe84:	6851      	ldr	r1, [r2, #4]
 801fe86:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 802004c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801fe8a:	c603      	stmia	r6!, {r0, r1}
 801fe8c:	6818      	ldr	r0, [r3, #0]
 801fe8e:	ae10      	add	r6, sp, #64	; 0x40
 801fe90:	6859      	ldr	r1, [r3, #4]
 801fe92:	c603      	stmia	r6!, {r0, r1}
 801fe94:	a80e      	add	r0, sp, #56	; 0x38
 801fe96:	f7fb fcf9 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe9a:	4649      	mov	r1, r9
 801fe9c:	a810      	add	r0, sp, #64	; 0x40
 801fe9e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8020048 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801fea2:	f7fb fcdb 	bl	801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fea6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801feaa:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801feae:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801feb2:	f8d9 0000 	ldr.w	r0, [r9]
 801feb6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801feba:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801febe:	440d      	add	r5, r1
 801fec0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801fec4:	440a      	add	r2, r1
 801fec6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801feca:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801fece:	4413      	add	r3, r2
 801fed0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801fed4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801fed8:	930b      	str	r3, [sp, #44]	; 0x2c
 801feda:	6803      	ldr	r3, [r0, #0]
 801fedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fee0:	4798      	blx	r3
 801fee2:	2801      	cmp	r0, #1
 801fee4:	d11e      	bne.n	801ff24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801fee6:	220b      	movs	r2, #11
 801fee8:	9008      	str	r0, [sp, #32]
 801feea:	b2b6      	uxth	r6, r6
 801feec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801fef0:	9207      	str	r2, [sp, #28]
 801fef2:	4629      	mov	r1, r5
 801fef4:	f8ba 2000 	ldrh.w	r2, [sl]
 801fef8:	f8cd 8010 	str.w	r8, [sp, #16]
 801fefc:	9601      	str	r6, [sp, #4]
 801fefe:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801ff02:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801ff06:	9203      	str	r2, [sp, #12]
 801ff08:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ff0c:	9202      	str	r2, [sp, #8]
 801ff0e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ff12:	9200      	str	r2, [sp, #0]
 801ff14:	463a      	mov	r2, r7
 801ff16:	f8d9 0000 	ldr.w	r0, [r9]
 801ff1a:	f7f8 fb81 	bl	8018620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ff1e:	b013      	add	sp, #76	; 0x4c
 801ff20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff24:	f8d9 0000 	ldr.w	r0, [r9]
 801ff28:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801ff2c:	6803      	ldr	r3, [r0, #0]
 801ff2e:	6a1b      	ldr	r3, [r3, #32]
 801ff30:	4798      	blx	r3
 801ff32:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801ff36:	f8ba 3000 	ldrh.w	r3, [sl]
 801ff3a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ff3e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ff42:	fb01 2303 	mla	r3, r1, r3, r2
 801ff46:	4621      	mov	r1, r4
 801ff48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff4c:	4418      	add	r0, r3
 801ff4e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801ff52:	930c      	str	r3, [sp, #48]	; 0x30
 801ff54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff56:	4299      	cmp	r1, r3
 801ff58:	da6a      	bge.n	8020030 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801ff5a:	1cc2      	adds	r2, r0, #3
 801ff5c:	46aa      	mov	sl, r5
 801ff5e:	ebaa 0305 	sub.w	r3, sl, r5
 801ff62:	429e      	cmp	r6, r3
 801ff64:	dd55      	ble.n	8020012 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801ff66:	2404      	movs	r4, #4
 801ff68:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801ff6c:	fb14 4303 	smlabb	r3, r4, r3, r4
 801ff70:	eb07 0e03 	add.w	lr, r7, r3
 801ff74:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801ff78:	b184      	cbz	r4, 801ff9c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801ff7a:	2cff      	cmp	r4, #255	; 0xff
 801ff7c:	f817 b003 	ldrb.w	fp, [r7, r3]
 801ff80:	d10e      	bne.n	801ffa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801ff82:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ff86:	d10b      	bne.n	801ffa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801ff88:	f802 bc03 	strb.w	fp, [r2, #-3]
 801ff8c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801ff90:	f802 3c02 	strb.w	r3, [r2, #-2]
 801ff94:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801ff98:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ff9c:	3203      	adds	r2, #3
 801ff9e:	e7de      	b.n	801ff5e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801ffa0:	fb08 f404 	mul.w	r4, r8, r4
 801ffa4:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801ffa8:	1c63      	adds	r3, r4, #1
 801ffaa:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801ffae:	121b      	asrs	r3, r3, #8
 801ffb0:	b29c      	uxth	r4, r3
 801ffb2:	43db      	mvns	r3, r3
 801ffb4:	fb1b fb04 	smulbb	fp, fp, r4
 801ffb8:	b2db      	uxtb	r3, r3
 801ffba:	fb0c bc03 	mla	ip, ip, r3, fp
 801ffbe:	fa1f fc8c 	uxth.w	ip, ip
 801ffc2:	f10c 0b01 	add.w	fp, ip, #1
 801ffc6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ffca:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801ffce:	fb1b fb03 	smulbb	fp, fp, r3
 801ffd2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ffd6:	f802 cc03 	strb.w	ip, [r2, #-3]
 801ffda:	f89e c001 	ldrb.w	ip, [lr, #1]
 801ffde:	fb0c bc04 	mla	ip, ip, r4, fp
 801ffe2:	fa1f fc8c 	uxth.w	ip, ip
 801ffe6:	f10c 0b01 	add.w	fp, ip, #1
 801ffea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ffee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fff2:	f802 cc02 	strb.w	ip, [r2, #-2]
 801fff6:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801fffa:	f89e e002 	ldrb.w	lr, [lr, #2]
 801fffe:	fb1c f303 	smulbb	r3, ip, r3
 8020002:	fb0e 3304 	mla	r3, lr, r4, r3
 8020006:	b29b      	uxth	r3, r3
 8020008:	1c5c      	adds	r4, r3, #1
 802000a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802000e:	121b      	asrs	r3, r3, #8
 8020010:	e7c2      	b.n	801ff98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020014:	3101      	adds	r1, #1
 8020016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020018:	881b      	ldrh	r3, [r3, #0]
 802001a:	1b9b      	subs	r3, r3, r6
 802001c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020020:	4413      	add	r3, r2
 8020022:	4418      	add	r0, r3
 8020024:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8020028:	1b9b      	subs	r3, r3, r6
 802002a:	444b      	add	r3, r9
 802002c:	441d      	add	r5, r3
 802002e:	e791      	b.n	801ff54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8020030:	4b05      	ldr	r3, [pc, #20]	; (8020048 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8020032:	6818      	ldr	r0, [r3, #0]
 8020034:	6803      	ldr	r3, [r0, #0]
 8020036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020038:	4798      	blx	r3
 802003a:	e770      	b.n	801ff1e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 802003c:	0802cbdb 	.word	0x0802cbdb
 8020040:	0802d2a7 	.word	0x0802d2a7
 8020044:	0802cc77 	.word	0x0802cc77
 8020048:	2000b41c 	.word	0x2000b41c
 802004c:	2000b416 	.word	0x2000b416

08020050 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020054:	4614      	mov	r4, r2
 8020056:	880a      	ldrh	r2, [r1, #0]
 8020058:	b091      	sub	sp, #68	; 0x44
 802005a:	4680      	mov	r8, r0
 802005c:	2a01      	cmp	r2, #1
 802005e:	460e      	mov	r6, r1
 8020060:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020064:	d005      	beq.n	8020072 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8020066:	4b6d      	ldr	r3, [pc, #436]	; (802021c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8020068:	21b6      	movs	r1, #182	; 0xb6
 802006a:	4a6d      	ldr	r2, [pc, #436]	; (8020220 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 802006c:	486d      	ldr	r0, [pc, #436]	; (8020224 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 802006e:	f007 fb51 	bl	8027714 <__assert_func>
 8020072:	6820      	ldr	r0, [r4, #0]
 8020074:	ad0c      	add	r5, sp, #48	; 0x30
 8020076:	6861      	ldr	r1, [r4, #4]
 8020078:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8020228 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 802007c:	c503      	stmia	r5!, {r0, r1}
 802007e:	6818      	ldr	r0, [r3, #0]
 8020080:	ad0e      	add	r5, sp, #56	; 0x38
 8020082:	6859      	ldr	r1, [r3, #4]
 8020084:	c503      	stmia	r5!, {r0, r1}
 8020086:	a80c      	add	r0, sp, #48	; 0x30
 8020088:	f7fb fc00 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802008c:	4621      	mov	r1, r4
 802008e:	a80e      	add	r0, sp, #56	; 0x38
 8020090:	f7fb fbe4 	bl	801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020094:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020098:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802009c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80200a0:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80200a4:	fb11 2103 	smlabb	r1, r1, r3, r2
 80200a8:	eb08 0401 	add.w	r4, r8, r1
 80200ac:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80200b0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 802022c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 80200b4:	440a      	add	r2, r1
 80200b6:	f8d8 0000 	ldr.w	r0, [r8]
 80200ba:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80200be:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80200c2:	4413      	add	r3, r2
 80200c4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80200c8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80200cc:	930a      	str	r3, [sp, #40]	; 0x28
 80200ce:	6803      	ldr	r3, [r0, #0]
 80200d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80200d4:	4798      	blx	r3
 80200d6:	2801      	cmp	r0, #1
 80200d8:	d11e      	bne.n	8020118 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 80200da:	220b      	movs	r2, #11
 80200dc:	9008      	str	r0, [sp, #32]
 80200de:	b2ad      	uxth	r5, r5
 80200e0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80200e4:	9207      	str	r2, [sp, #28]
 80200e6:	4621      	mov	r1, r4
 80200e8:	f8b9 2000 	ldrh.w	r2, [r9]
 80200ec:	9501      	str	r5, [sp, #4]
 80200ee:	9206      	str	r2, [sp, #24]
 80200f0:	2200      	movs	r2, #0
 80200f2:	e9cd 7204 	strd	r7, r2, [sp, #16]
 80200f6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80200fa:	9203      	str	r2, [sp, #12]
 80200fc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020100:	9202      	str	r2, [sp, #8]
 8020102:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020106:	9200      	str	r2, [sp, #0]
 8020108:	4632      	mov	r2, r6
 802010a:	f8d8 0000 	ldr.w	r0, [r8]
 802010e:	f7f8 fa87 	bl	8018620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020112:	b011      	add	sp, #68	; 0x44
 8020114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020118:	f8d8 0000 	ldr.w	r0, [r8]
 802011c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8020120:	6803      	ldr	r3, [r0, #0]
 8020122:	6a1b      	ldr	r3, [r3, #32]
 8020124:	4798      	blx	r3
 8020126:	f8b9 3000 	ldrh.w	r3, [r9]
 802012a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 802012e:	f04f 0e00 	mov.w	lr, #0
 8020132:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020136:	fa1f f987 	uxth.w	r9, r7
 802013a:	fb01 2303 	mla	r3, r1, r3, r2
 802013e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8020142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020146:	b289      	uxth	r1, r1
 8020148:	4418      	add	r0, r3
 802014a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 802014e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020152:	459e      	cmp	lr, r3
 8020154:	da5c      	bge.n	8020210 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8020156:	1cc3      	adds	r3, r0, #3
 8020158:	46a2      	mov	sl, r4
 802015a:	ebaa 0204 	sub.w	r2, sl, r4
 802015e:	4295      	cmp	r5, r2
 8020160:	dd46      	ble.n	80201f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 8020162:	f04f 0c03 	mov.w	ip, #3
 8020166:	f04f 0b04 	mov.w	fp, #4
 802016a:	f81a 2b01 	ldrb.w	r2, [sl], #1
 802016e:	2fff      	cmp	r7, #255	; 0xff
 8020170:	fb1c b202 	smlabb	r2, ip, r2, fp
 8020174:	eb06 0c02 	add.w	ip, r6, r2
 8020178:	f816 b002 	ldrb.w	fp, [r6, r2]
 802017c:	d02f      	beq.n	80201de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 802017e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8020182:	fb12 f201 	smulbb	r2, r2, r1
 8020186:	fb0b 2209 	mla	r2, fp, r9, r2
 802018a:	b292      	uxth	r2, r2
 802018c:	f102 0b01 	add.w	fp, r2, #1
 8020190:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020194:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 8020198:	fb1b fb01 	smulbb	fp, fp, r1
 802019c:	1212      	asrs	r2, r2, #8
 802019e:	f803 2c03 	strb.w	r2, [r3, #-3]
 80201a2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80201a6:	fb02 b209 	mla	r2, r2, r9, fp
 80201aa:	b292      	uxth	r2, r2
 80201ac:	f102 0b01 	add.w	fp, r2, #1
 80201b0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80201b4:	1212      	asrs	r2, r2, #8
 80201b6:	f803 2c02 	strb.w	r2, [r3, #-2]
 80201ba:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80201be:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 80201c2:	fb1c fc01 	smulbb	ip, ip, r1
 80201c6:	fb02 c209 	mla	r2, r2, r9, ip
 80201ca:	b292      	uxth	r2, r2
 80201cc:	f102 0c01 	add.w	ip, r2, #1
 80201d0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80201d4:	1212      	asrs	r2, r2, #8
 80201d6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80201da:	3303      	adds	r3, #3
 80201dc:	e7bd      	b.n	802015a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 80201de:	f803 bc03 	strb.w	fp, [r3, #-3]
 80201e2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80201e6:	f803 2c02 	strb.w	r2, [r3, #-2]
 80201ea:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80201ee:	e7f2      	b.n	80201d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 80201f0:	4b0d      	ldr	r3, [pc, #52]	; (8020228 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80201f2:	f10e 0e01 	add.w	lr, lr, #1
 80201f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80201f8:	881b      	ldrh	r3, [r3, #0]
 80201fa:	1b5b      	subs	r3, r3, r5
 80201fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020200:	4413      	add	r3, r2
 8020202:	4418      	add	r0, r3
 8020204:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020208:	1b5b      	subs	r3, r3, r5
 802020a:	4443      	add	r3, r8
 802020c:	441c      	add	r4, r3
 802020e:	e79f      	b.n	8020150 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8020210:	4b06      	ldr	r3, [pc, #24]	; (802022c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020212:	6818      	ldr	r0, [r3, #0]
 8020214:	6803      	ldr	r3, [r0, #0]
 8020216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020218:	4798      	blx	r3
 802021a:	e77a      	b.n	8020112 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 802021c:	0802cabf 	.word	0x0802cabf
 8020220:	0802d19a 	.word	0x0802d19a
 8020224:	0802cc77 	.word	0x0802cc77
 8020228:	2000b416 	.word	0x2000b416
 802022c:	2000b41c 	.word	0x2000b41c

08020230 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020230:	b570      	push	{r4, r5, r6, lr}
 8020232:	780d      	ldrb	r5, [r1, #0]
 8020234:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8020238:	2d01      	cmp	r5, #1
 802023a:	d00d      	beq.n	8020258 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 802023c:	d307      	bcc.n	802024e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 802023e:	2d02      	cmp	r5, #2
 8020240:	d10f      	bne.n	8020262 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8020242:	4b08      	ldr	r3, [pc, #32]	; (8020264 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8020244:	215b      	movs	r1, #91	; 0x5b
 8020246:	4a08      	ldr	r2, [pc, #32]	; (8020268 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8020248:	4808      	ldr	r0, [pc, #32]	; (802026c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 802024a:	f007 fa63 	bl	8027714 <__assert_func>
 802024e:	9404      	str	r4, [sp, #16]
 8020250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020254:	f7ff be04 	b.w	801fe60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020258:	9404      	str	r4, [sp, #16]
 802025a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802025e:	f7ff bef7 	b.w	8020050 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020262:	bd70      	pop	{r4, r5, r6, pc}
 8020264:	0802ca74 	.word	0x0802ca74
 8020268:	0802d118 	.word	0x0802d118
 802026c:	0802cc77 	.word	0x0802cc77

08020270 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8020270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020274:	4605      	mov	r5, r0
 8020276:	b08f      	sub	sp, #60	; 0x3c
 8020278:	460c      	mov	r4, r1
 802027a:	461f      	mov	r7, r3
 802027c:	2b00      	cmp	r3, #0
 802027e:	d04e      	beq.n	802031e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 8020280:	6808      	ldr	r0, [r1, #0]
 8020282:	ab0a      	add	r3, sp, #40	; 0x28
 8020284:	6849      	ldr	r1, [r1, #4]
 8020286:	4e81      	ldr	r6, [pc, #516]	; (802048c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8020288:	c303      	stmia	r3!, {r0, r1}
 802028a:	6810      	ldr	r0, [r2, #0]
 802028c:	ab0c      	add	r3, sp, #48	; 0x30
 802028e:	6851      	ldr	r1, [r2, #4]
 8020290:	c303      	stmia	r3!, {r0, r1}
 8020292:	a80a      	add	r0, sp, #40	; 0x28
 8020294:	f7fb fafa 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020298:	4621      	mov	r1, r4
 802029a:	a80c      	add	r0, sp, #48	; 0x30
 802029c:	f7fb fade 	bl	801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80202a0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80202a4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80202a8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80202ac:	6830      	ldr	r0, [r6, #0]
 80202ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80202b2:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 80202b6:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 80202ba:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80202be:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80202c2:	440a      	add	r2, r1
 80202c4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80202c8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80202cc:	4413      	add	r3, r2
 80202ce:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80202d2:	6803      	ldr	r3, [r0, #0]
 80202d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80202d6:	4798      	blx	r3
 80202d8:	2fff      	cmp	r7, #255	; 0xff
 80202da:	4633      	mov	r3, r6
 80202dc:	4e6c      	ldr	r6, [pc, #432]	; (8020490 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 80202de:	d021      	beq.n	8020324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 80202e0:	f010 0f04 	tst.w	r0, #4
 80202e4:	6818      	ldr	r0, [r3, #0]
 80202e6:	d020      	beq.n	802032a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 80202e8:	2100      	movs	r1, #0
 80202ea:	f04f 0e01 	mov.w	lr, #1
 80202ee:	f8d0 c000 	ldr.w	ip, [r0]
 80202f2:	b2a4      	uxth	r4, r4
 80202f4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80202f8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80202fc:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 8020300:	8836      	ldrh	r6, [r6, #0]
 8020302:	9703      	str	r7, [sp, #12]
 8020304:	9400      	str	r4, [sp, #0]
 8020306:	e9cd 1604 	strd	r1, r6, [sp, #16]
 802030a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802030e:	9102      	str	r1, [sp, #8]
 8020310:	fa1f f188 	uxth.w	r1, r8
 8020314:	9101      	str	r1, [sp, #4]
 8020316:	4629      	mov	r1, r5
 8020318:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 802031c:	47a0      	blx	r4
 802031e:	b00f      	add	sp, #60	; 0x3c
 8020320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020324:	f010 0f01 	tst.w	r0, #1
 8020328:	e7dc      	b.n	80202e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 802032a:	6803      	ldr	r3, [r0, #0]
 802032c:	6a1b      	ldr	r3, [r3, #32]
 802032e:	4798      	blx	r3
 8020330:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8020334:	8833      	ldrh	r3, [r6, #0]
 8020336:	2fff      	cmp	r7, #255	; 0xff
 8020338:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802033c:	fb01 2303 	mla	r3, r1, r3, r2
 8020340:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8020344:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020348:	4418      	add	r0, r3
 802034a:	d128      	bne.n	802039e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 802034c:	0051      	lsls	r1, r2, #1
 802034e:	2700      	movs	r7, #0
 8020350:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020354:	4547      	cmp	r7, r8
 8020356:	f280 8092 	bge.w	802047e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 802035a:	4684      	mov	ip, r0
 802035c:	f04f 0e00 	mov.w	lr, #0
 8020360:	45a6      	cmp	lr, r4
 8020362:	f10c 0c03 	add.w	ip, ip, #3
 8020366:	da7c      	bge.n	8020462 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 8020368:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 802036c:	f10e 0e01 	add.w	lr, lr, #1
 8020370:	ea4f 2a29 	mov.w	sl, r9, asr #8
 8020374:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 8020378:	ea4f 03e9 	mov.w	r3, r9, asr #3
 802037c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8020380:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 8020384:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020388:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 802038c:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8020390:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8020394:	f80c ac01 	strb.w	sl, [ip, #-1]
 8020398:	f80c 3c02 	strb.w	r3, [ip, #-2]
 802039c:	e7e0      	b.n	8020360 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 802039e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80203a2:	ea6f 0c07 	mvn.w	ip, r7
 80203a6:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 80203aa:	f04f 0900 	mov.w	r9, #0
 80203ae:	9309      	str	r3, [sp, #36]	; 0x24
 80203b0:	fa5f fc8c 	uxtb.w	ip, ip
 80203b4:	b2bb      	uxth	r3, r7
 80203b6:	45c1      	cmp	r9, r8
 80203b8:	da61      	bge.n	802047e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 80203ba:	4601      	mov	r1, r0
 80203bc:	f04f 0e00 	mov.w	lr, #0
 80203c0:	45a6      	cmp	lr, r4
 80203c2:	f101 0103 	add.w	r1, r1, #3
 80203c6:	da3b      	bge.n	8020440 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 80203c8:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 80203cc:	f10e 0e01 	add.w	lr, lr, #1
 80203d0:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 80203d4:	1216      	asrs	r6, r2, #8
 80203d6:	10d7      	asrs	r7, r2, #3
 80203d8:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 80203dc:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 80203e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80203e4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80203e8:	fb1b fb0c 	smulbb	fp, fp, ip
 80203ec:	b2d2      	uxtb	r2, r2
 80203ee:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80203f2:	fb02 b203 	mla	r2, r2, r3, fp
 80203f6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80203fa:	fb17 f703 	smulbb	r7, r7, r3
 80203fe:	fb16 f603 	smulbb	r6, r6, r3
 8020402:	b292      	uxth	r2, r2
 8020404:	f102 0b01 	add.w	fp, r2, #1
 8020408:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802040c:	1212      	asrs	r2, r2, #8
 802040e:	f801 2c03 	strb.w	r2, [r1, #-3]
 8020412:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 8020416:	fb02 770c 	mla	r7, r2, ip, r7
 802041a:	b2bf      	uxth	r7, r7
 802041c:	1c7a      	adds	r2, r7, #1
 802041e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020422:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8020426:	fb02 660c 	mla	r6, r2, ip, r6
 802042a:	123f      	asrs	r7, r7, #8
 802042c:	b2b6      	uxth	r6, r6
 802042e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8020432:	1c72      	adds	r2, r6, #1
 8020434:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020438:	1236      	asrs	r6, r6, #8
 802043a:	f801 6c01 	strb.w	r6, [r1, #-1]
 802043e:	e7bf      	b.n	80203c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 8020440:	4a13      	ldr	r2, [pc, #76]	; (8020490 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 8020442:	f109 0901 	add.w	r9, r9, #1
 8020446:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020448:	8812      	ldrh	r2, [r2, #0]
 802044a:	1b12      	subs	r2, r2, r4
 802044c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020450:	440a      	add	r2, r1
 8020452:	4410      	add	r0, r2
 8020454:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020458:	1b12      	subs	r2, r2, r4
 802045a:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 802045e:	4415      	add	r5, r2
 8020460:	e7a9      	b.n	80203b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 8020462:	8833      	ldrh	r3, [r6, #0]
 8020464:	3701      	adds	r7, #1
 8020466:	1b1b      	subs	r3, r3, r4
 8020468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802046c:	4413      	add	r3, r2
 802046e:	4418      	add	r0, r3
 8020470:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8020474:	1b1b      	subs	r3, r3, r4
 8020476:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802047a:	441d      	add	r5, r3
 802047c:	e76a      	b.n	8020354 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 802047e:	4b03      	ldr	r3, [pc, #12]	; (802048c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8020480:	6818      	ldr	r0, [r3, #0]
 8020482:	6803      	ldr	r3, [r0, #0]
 8020484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020486:	4798      	blx	r3
 8020488:	e749      	b.n	802031e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 802048a:	bf00      	nop
 802048c:	2000b41c 	.word	0x2000b41c
 8020490:	2000b416 	.word	0x2000b416

08020494 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020498:	b08b      	sub	sp, #44	; 0x2c
 802049a:	460c      	mov	r4, r1
 802049c:	4680      	mov	r8, r0
 802049e:	469a      	mov	sl, r3
 80204a0:	6808      	ldr	r0, [r1, #0]
 80204a2:	ab06      	add	r3, sp, #24
 80204a4:	6849      	ldr	r1, [r1, #4]
 80204a6:	c303      	stmia	r3!, {r0, r1}
 80204a8:	6810      	ldr	r0, [r2, #0]
 80204aa:	ab08      	add	r3, sp, #32
 80204ac:	6851      	ldr	r1, [r2, #4]
 80204ae:	c303      	stmia	r3!, {r0, r1}
 80204b0:	a806      	add	r0, sp, #24
 80204b2:	f7fb f9eb 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204b6:	4621      	mov	r1, r4
 80204b8:	a808      	add	r0, sp, #32
 80204ba:	4c61      	ldr	r4, [pc, #388]	; (8020640 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80204bc:	f7fb f9ce 	bl	801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80204c0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80204c4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80204c8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80204cc:	6820      	ldr	r0, [r4, #0]
 80204ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80204d2:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80204d6:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80204da:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80204de:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80204e2:	440a      	add	r2, r1
 80204e4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80204e8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80204ec:	4413      	add	r3, r2
 80204ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80204f2:	6803      	ldr	r3, [r0, #0]
 80204f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204f6:	4798      	blx	r3
 80204f8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80204fc:	d118      	bne.n	8020530 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80204fe:	f010 0f20 	tst.w	r0, #32
 8020502:	6820      	ldr	r0, [r4, #0]
 8020504:	d017      	beq.n	8020536 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8020506:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802050a:	b2bf      	uxth	r7, r7
 802050c:	6801      	ldr	r1, [r0, #0]
 802050e:	9402      	str	r4, [sp, #8]
 8020510:	fa1f f489 	uxth.w	r4, r9
 8020514:	f8cd a00c 	str.w	sl, [sp, #12]
 8020518:	9401      	str	r4, [sp, #4]
 802051a:	9700      	str	r7, [sp, #0]
 802051c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020520:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8020522:	4641      	mov	r1, r8
 8020524:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020528:	47a0      	blx	r4
 802052a:	b00b      	add	sp, #44	; 0x2c
 802052c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020530:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020534:	e7e5      	b.n	8020502 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020536:	6803      	ldr	r3, [r0, #0]
 8020538:	6a1b      	ldr	r3, [r3, #32]
 802053a:	4798      	blx	r3
 802053c:	4b41      	ldr	r3, [pc, #260]	; (8020644 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 802053e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020542:	f04f 0c00 	mov.w	ip, #0
 8020546:	881a      	ldrh	r2, [r3, #0]
 8020548:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802054c:	fb04 1202 	mla	r2, r4, r2, r1
 8020550:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020554:	4410      	add	r0, r2
 8020556:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 802055a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 802055e:	0092      	lsls	r2, r2, #2
 8020560:	9105      	str	r1, [sp, #20]
 8020562:	9204      	str	r2, [sp, #16]
 8020564:	45cc      	cmp	ip, r9
 8020566:	da65      	bge.n	8020634 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8020568:	1cc4      	adds	r4, r0, #3
 802056a:	f108 0504 	add.w	r5, r8, #4
 802056e:	f04f 0e00 	mov.w	lr, #0
 8020572:	45be      	cmp	lr, r7
 8020574:	da4d      	bge.n	8020612 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 8020576:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802057a:	b181      	cbz	r1, 802059e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 802057c:	29ff      	cmp	r1, #255	; 0xff
 802057e:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8020582:	d111      	bne.n	80205a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8020584:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020588:	d10e      	bne.n	80205a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 802058a:	f804 bc03 	strb.w	fp, [r4, #-3]
 802058e:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8020592:	f804 2c02 	strb.w	r2, [r4, #-2]
 8020596:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 802059a:	f804 2c01 	strb.w	r2, [r4, #-1]
 802059e:	f10e 0e01 	add.w	lr, lr, #1
 80205a2:	3403      	adds	r4, #3
 80205a4:	3504      	adds	r5, #4
 80205a6:	e7e4      	b.n	8020572 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 80205a8:	fb0a f101 	mul.w	r1, sl, r1
 80205ac:	1c4a      	adds	r2, r1, #1
 80205ae:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80205b2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80205b6:	1212      	asrs	r2, r2, #8
 80205b8:	b296      	uxth	r6, r2
 80205ba:	43d2      	mvns	r2, r2
 80205bc:	fb1b fb06 	smulbb	fp, fp, r6
 80205c0:	b2d2      	uxtb	r2, r2
 80205c2:	fb01 b102 	mla	r1, r1, r2, fp
 80205c6:	b289      	uxth	r1, r1
 80205c8:	f101 0b01 	add.w	fp, r1, #1
 80205cc:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80205d0:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 80205d4:	fb1b fb02 	smulbb	fp, fp, r2
 80205d8:	1209      	asrs	r1, r1, #8
 80205da:	f804 1c03 	strb.w	r1, [r4, #-3]
 80205de:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 80205e2:	fb01 b106 	mla	r1, r1, r6, fp
 80205e6:	b289      	uxth	r1, r1
 80205e8:	f101 0b01 	add.w	fp, r1, #1
 80205ec:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80205f0:	1209      	asrs	r1, r1, #8
 80205f2:	f804 1c02 	strb.w	r1, [r4, #-2]
 80205f6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80205fa:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80205fe:	fb11 f202 	smulbb	r2, r1, r2
 8020602:	fb0b 2206 	mla	r2, fp, r6, r2
 8020606:	b292      	uxth	r2, r2
 8020608:	1c56      	adds	r6, r2, #1
 802060a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802060e:	1212      	asrs	r2, r2, #8
 8020610:	e7c3      	b.n	802059a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8020612:	881a      	ldrh	r2, [r3, #0]
 8020614:	f10c 0c01 	add.w	ip, ip, #1
 8020618:	9905      	ldr	r1, [sp, #20]
 802061a:	1bd2      	subs	r2, r2, r7
 802061c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020620:	440a      	add	r2, r1
 8020622:	9904      	ldr	r1, [sp, #16]
 8020624:	4410      	add	r0, r2
 8020626:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802062a:	1bd2      	subs	r2, r2, r7
 802062c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8020630:	4490      	add	r8, r2
 8020632:	e797      	b.n	8020564 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8020634:	4b02      	ldr	r3, [pc, #8]	; (8020640 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8020636:	6818      	ldr	r0, [r3, #0]
 8020638:	6803      	ldr	r3, [r0, #0]
 802063a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802063c:	4798      	blx	r3
 802063e:	e774      	b.n	802052a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8020640:	2000b41c 	.word	0x2000b41c
 8020644:	2000b416 	.word	0x2000b416

08020648 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802064c:	b085      	sub	sp, #20
 802064e:	4606      	mov	r6, r0
 8020650:	460c      	mov	r4, r1
 8020652:	4691      	mov	r9, r2
 8020654:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8020658:	4698      	mov	r8, r3
 802065a:	b3a5      	cbz	r5, 80206c6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 802065c:	4608      	mov	r0, r1
 802065e:	f7fd fa0b 	bl	801da78 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020662:	4607      	mov	r7, r0
 8020664:	4620      	mov	r0, r4
 8020666:	f7fd fa41 	bl	801daec <_ZNK8touchgfx6Bitmap9getHeightEv>
 802066a:	f8ad 000e 	strh.w	r0, [sp, #14]
 802066e:	4620      	mov	r0, r4
 8020670:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020674:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020678:	f8ad 700c 	strh.w	r7, [sp, #12]
 802067c:	f7fd fb4e 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020680:	b1a0      	cbz	r0, 80206ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8020682:	4620      	mov	r0, r4
 8020684:	f7fd fb4a 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020688:	2801      	cmp	r0, #1
 802068a:	d00f      	beq.n	80206ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 802068c:	4620      	mov	r0, r4
 802068e:	f7fd fb45 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020692:	2802      	cmp	r0, #2
 8020694:	d00a      	beq.n	80206ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8020696:	4620      	mov	r0, r4
 8020698:	f7fd fb40 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 802069c:	280b      	cmp	r0, #11
 802069e:	d005      	beq.n	80206ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80206a0:	4b21      	ldr	r3, [pc, #132]	; (8020728 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 80206a2:	213f      	movs	r1, #63	; 0x3f
 80206a4:	4a21      	ldr	r2, [pc, #132]	; (802072c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 80206a6:	4822      	ldr	r0, [pc, #136]	; (8020730 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 80206a8:	f007 f834 	bl	8027714 <__assert_func>
 80206ac:	4620      	mov	r0, r4
 80206ae:	f7fd fb35 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80206b2:	2802      	cmp	r0, #2
 80206b4:	4620      	mov	r0, r4
 80206b6:	d109      	bne.n	80206cc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 80206b8:	f7fd faac 	bl	801dc14 <_ZNK8touchgfx6Bitmap7getDataEv>
 80206bc:	462b      	mov	r3, r5
 80206be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80206c0:	a902      	add	r1, sp, #8
 80206c2:	f7ff fee7 	bl	8020494 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80206c6:	b005      	add	sp, #20
 80206c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80206cc:	f7fd fb26 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80206d0:	280b      	cmp	r0, #11
 80206d2:	4620      	mov	r0, r4
 80206d4:	d10d      	bne.n	80206f2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80206d6:	f7fd fa9d 	bl	801dc14 <_ZNK8touchgfx6Bitmap7getDataEv>
 80206da:	4606      	mov	r6, r0
 80206dc:	4620      	mov	r0, r4
 80206de:	f7fd facb 	bl	801dc78 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80206e2:	9500      	str	r5, [sp, #0]
 80206e4:	4601      	mov	r1, r0
 80206e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80206e8:	aa02      	add	r2, sp, #8
 80206ea:	4630      	mov	r0, r6
 80206ec:	f7ff fda0 	bl	8020230 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80206f0:	e7e9      	b.n	80206c6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 80206f2:	f7fd fb13 	bl	801dd1c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80206f6:	b940      	cbnz	r0, 802070a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 80206f8:	4620      	mov	r0, r4
 80206fa:	f7fd fa8b 	bl	801dc14 <_ZNK8touchgfx6Bitmap7getDataEv>
 80206fe:	462b      	mov	r3, r5
 8020700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020702:	a902      	add	r1, sp, #8
 8020704:	f7ff fdb4 	bl	8020270 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020708:	e7dd      	b.n	80206c6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 802070a:	6833      	ldr	r3, [r6, #0]
 802070c:	4620      	mov	r0, r4
 802070e:	68df      	ldr	r7, [r3, #12]
 8020710:	f7fd fa80 	bl	801dc14 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020714:	2300      	movs	r3, #0
 8020716:	4601      	mov	r1, r0
 8020718:	aa02      	add	r2, sp, #8
 802071a:	4630      	mov	r0, r6
 802071c:	e9cd 5300 	strd	r5, r3, [sp]
 8020720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020722:	47b8      	blx	r7
 8020724:	e7cf      	b.n	80206c6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8020726:	bf00      	nop
 8020728:	0802cb0d 	.word	0x0802cb0d
 802072c:	0802d223 	.word	0x0802d223
 8020730:	0802cc77 	.word	0x0802cc77

08020734 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020734:	b570      	push	{r4, r5, r6, lr}
 8020736:	9d04      	ldr	r5, [sp, #16]
 8020738:	460c      	mov	r4, r1
 802073a:	4619      	mov	r1, r3
 802073c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020740:	2a0c      	cmp	r2, #12
 8020742:	d826      	bhi.n	8020792 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8020744:	e8df f002 	tbb	[pc, r2]
 8020748:	200e1407 	.word	0x200e1407
 802074c:	20202020 	.word	0x20202020
 8020750:	20202020 	.word	0x20202020
 8020754:	20          	.byte	0x20
 8020755:	00          	.byte	0x00
 8020756:	4b0f      	ldr	r3, [pc, #60]	; (8020794 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8020758:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 802075c:	4a0e      	ldr	r2, [pc, #56]	; (8020798 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 802075e:	480f      	ldr	r0, [pc, #60]	; (802079c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8020760:	f006 ffd8 	bl	8027714 <__assert_func>
 8020764:	462a      	mov	r2, r5
 8020766:	4620      	mov	r0, r4
 8020768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802076c:	f7ff be92 	b.w	8020494 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020770:	6802      	ldr	r2, [r0, #0]
 8020772:	2600      	movs	r6, #0
 8020774:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8020778:	68d6      	ldr	r6, [r2, #12]
 802077a:	462b      	mov	r3, r5
 802077c:	460a      	mov	r2, r1
 802077e:	4621      	mov	r1, r4
 8020780:	46b4      	mov	ip, r6
 8020782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020786:	4760      	bx	ip
 8020788:	4b05      	ldr	r3, [pc, #20]	; (80207a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 802078a:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 802078e:	4a02      	ldr	r2, [pc, #8]	; (8020798 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8020790:	e7e5      	b.n	802075e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8020792:	bd70      	pop	{r4, r5, r6, pc}
 8020794:	0802ce4e 	.word	0x0802ce4e
 8020798:	0802d50b 	.word	0x0802d50b
 802079c:	0802cc77 	.word	0x0802cc77
 80207a0:	0802ce8f 	.word	0x0802ce8f

080207a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80207a4:	b158      	cbz	r0, 80207be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80207a6:	2902      	cmp	r1, #2
 80207a8:	d00f      	beq.n	80207ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80207aa:	2903      	cmp	r1, #3
 80207ac:	d010      	beq.n	80207d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80207ae:	2901      	cmp	r1, #1
 80207b0:	d101      	bne.n	80207b6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80207b2:	2001      	movs	r0, #1
 80207b4:	4770      	bx	lr
 80207b6:	4b08      	ldr	r3, [pc, #32]	; (80207d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80207b8:	8819      	ldrh	r1, [r3, #0]
 80207ba:	4248      	negs	r0, r1
 80207bc:	4770      	bx	lr
 80207be:	2902      	cmp	r1, #2
 80207c0:	d006      	beq.n	80207d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80207c2:	2903      	cmp	r1, #3
 80207c4:	d0f7      	beq.n	80207b6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80207c6:	2901      	cmp	r1, #1
 80207c8:	d1f3      	bne.n	80207b2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80207ca:	4b03      	ldr	r3, [pc, #12]	; (80207d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80207cc:	8818      	ldrh	r0, [r3, #0]
 80207ce:	4770      	bx	lr
 80207d0:	f04f 30ff 	mov.w	r0, #4294967295
 80207d4:	4770      	bx	lr
 80207d6:	bf00      	nop
 80207d8:	2000b416 	.word	0x2000b416

080207dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80207dc:	b170      	cbz	r0, 80207fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80207de:	2902      	cmp	r1, #2
 80207e0:	d012      	beq.n	8020808 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80207e2:	2903      	cmp	r1, #3
 80207e4:	d006      	beq.n	80207f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80207e6:	2901      	cmp	r1, #1
 80207e8:	d001      	beq.n	80207ee <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80207ea:	2001      	movs	r0, #1
 80207ec:	4770      	bx	lr
 80207ee:	4b08      	ldr	r3, [pc, #32]	; (8020810 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80207f0:	8818      	ldrh	r0, [r3, #0]
 80207f2:	4770      	bx	lr
 80207f4:	4b06      	ldr	r3, [pc, #24]	; (8020810 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80207f6:	8818      	ldrh	r0, [r3, #0]
 80207f8:	4240      	negs	r0, r0
 80207fa:	4770      	bx	lr
 80207fc:	2902      	cmp	r1, #2
 80207fe:	d0f9      	beq.n	80207f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8020800:	2903      	cmp	r1, #3
 8020802:	d0f2      	beq.n	80207ea <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8020804:	2901      	cmp	r1, #1
 8020806:	d1f2      	bne.n	80207ee <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8020808:	f04f 30ff 	mov.w	r0, #4294967295
 802080c:	4770      	bx	lr
 802080e:	bf00      	nop
 8020810:	2000b416 	.word	0x2000b416

08020814 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020818:	b097      	sub	sp, #92	; 0x5c
 802081a:	910b      	str	r1, [sp, #44]	; 0x2c
 802081c:	a912      	add	r1, sp, #72	; 0x48
 802081e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8020822:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8020826:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 802082a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 802082e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8020832:	e881 000c 	stmia.w	r1, {r2, r3}
 8020836:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 802083a:	9308      	str	r3, [sp, #32]
 802083c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8020840:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8020844:	9310      	str	r3, [sp, #64]	; 0x40
 8020846:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 802084a:	798d      	ldrb	r5, [r1, #6]
 802084c:	930c      	str	r3, [sp, #48]	; 0x30
 802084e:	7b4b      	ldrb	r3, [r1, #13]
 8020850:	0158      	lsls	r0, r3, #5
 8020852:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8020856:	4328      	orrs	r0, r5
 8020858:	9007      	str	r0, [sp, #28]
 802085a:	f000 8184 	beq.w	8020b66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 802085e:	011b      	lsls	r3, r3, #4
 8020860:	79c8      	ldrb	r0, [r1, #7]
 8020862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020866:	4303      	orrs	r3, r0
 8020868:	9309      	str	r3, [sp, #36]	; 0x24
 802086a:	f000 817c 	beq.w	8020b66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 802086e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020872:	b29b      	uxth	r3, r3
 8020874:	2f00      	cmp	r7, #0
 8020876:	f000 8122 	beq.w	8020abe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 802087a:	1aff      	subs	r7, r7, r3
 802087c:	b2bf      	uxth	r7, r7
 802087e:	043b      	lsls	r3, r7, #16
 8020880:	d502      	bpl.n	8020888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8020882:	1bf6      	subs	r6, r6, r7
 8020884:	2700      	movs	r7, #0
 8020886:	b236      	sxth	r6, r6
 8020888:	f9b2 1000 	ldrsh.w	r1, [r2]
 802088c:	a812      	add	r0, sp, #72	; 0x48
 802088e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8020892:	428e      	cmp	r6, r1
 8020894:	b28b      	uxth	r3, r1
 8020896:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 802089a:	bfbf      	itttt	lt
 802089c:	18ff      	addlt	r7, r7, r3
 802089e:	1bbe      	sublt	r6, r7, r6
 80208a0:	b2b7      	uxthlt	r7, r6
 80208a2:	460e      	movlt	r6, r1
 80208a4:	8891      	ldrh	r1, [r2, #4]
 80208a6:	440b      	add	r3, r1
 80208a8:	4631      	mov	r1, r6
 80208aa:	b21b      	sxth	r3, r3
 80208ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80208ae:	88d3      	ldrh	r3, [r2, #6]
 80208b0:	9a08      	ldr	r2, [sp, #32]
 80208b2:	449a      	add	sl, r3
 80208b4:	fa0f f38a 	sxth.w	r3, sl
 80208b8:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 80208bc:	930e      	str	r3, [sp, #56]	; 0x38
 80208be:	4bb2      	ldr	r3, [pc, #712]	; (8020b88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 80208c0:	f893 b000 	ldrb.w	fp, [r3]
 80208c4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80208c8:	f1dc 0300 	rsbs	r3, ip, #0
 80208cc:	eb43 030c 	adc.w	r3, r3, ip
 80208d0:	930d      	str	r3, [sp, #52]	; 0x34
 80208d2:	464b      	mov	r3, r9
 80208d4:	f7fa feb4 	bl	801b640 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80208d8:	4631      	mov	r1, r6
 80208da:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80208de:	464b      	mov	r3, r9
 80208e0:	9a08      	ldr	r2, [sp, #32]
 80208e2:	a812      	add	r0, sp, #72	; 0x48
 80208e4:	f7fa fec4 	bl	801b670 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80208e8:	a916      	add	r1, sp, #88	; 0x58
 80208ea:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80208ee:	a815      	add	r0, sp, #84	; 0x54
 80208f0:	f7fa ff9e 	bl	801b830 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80208f4:	f1b9 0f00 	cmp.w	r9, #0
 80208f8:	f040 80e4 	bne.w	8020ac4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 80208fc:	f1bb 0f01 	cmp.w	fp, #1
 8020900:	f040 80e8 	bne.w	8020ad4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 8020904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020906:	2b00      	cmp	r3, #0
 8020908:	f040 8132 	bne.w	8020b70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 802090c:	4b9f      	ldr	r3, [pc, #636]	; (8020b8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 802090e:	6818      	ldr	r0, [r3, #0]
 8020910:	6803      	ldr	r3, [r0, #0]
 8020912:	6a1b      	ldr	r3, [r3, #32]
 8020914:	4798      	blx	r3
 8020916:	4a9e      	ldr	r2, [pc, #632]	; (8020b90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8020918:	f1b8 0f01 	cmp.w	r8, #1
 802091c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8020920:	8811      	ldrh	r1, [r2, #0]
 8020922:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8020926:	fb01 2303 	mla	r3, r1, r3, r2
 802092a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802092e:	4403      	add	r3, r0
 8020930:	9309      	str	r3, [sp, #36]	; 0x24
 8020932:	f04f 0301 	mov.w	r3, #1
 8020936:	fa03 f308 	lsl.w	r3, r3, r8
 802093a:	f103 33ff 	add.w	r3, r3, #4294967295
 802093e:	b2db      	uxtb	r3, r3
 8020940:	9311      	str	r3, [sp, #68]	; 0x44
 8020942:	f000 8117 	beq.w	8020b74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8020946:	f1b8 0f02 	cmp.w	r8, #2
 802094a:	f000 8115 	beq.w	8020b78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 802094e:	f1b8 0f04 	cmp.w	r8, #4
 8020952:	bf14      	ite	ne
 8020954:	2301      	movne	r3, #1
 8020956:	2311      	moveq	r3, #17
 8020958:	930a      	str	r3, [sp, #40]	; 0x28
 802095a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802095c:	b153      	cbz	r3, 8020974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 802095e:	2508      	movs	r5, #8
 8020960:	9a07      	ldr	r2, [sp, #28]
 8020962:	fb95 f3f8 	sdiv	r3, r5, r8
 8020966:	1e5d      	subs	r5, r3, #1
 8020968:	4415      	add	r5, r2
 802096a:	fb95 f5f3 	sdiv	r5, r5, r3
 802096e:	fb15 f503 	smulbb	r5, r5, r3
 8020972:	b2ad      	uxth	r5, r5
 8020974:	b907      	cbnz	r7, 8020978 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 8020976:	b174      	cbz	r4, 8020996 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x182>
 8020978:	fb15 7304 	smlabb	r3, r5, r4, r7
 802097c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802097e:	ebaa 0a04 	sub.w	sl, sl, r4
 8020982:	fb13 f308 	smulbb	r3, r3, r8
 8020986:	fa1f fa8a 	uxth.w	sl, sl
 802098a:	b29b      	uxth	r3, r3
 802098c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8020990:	f003 0407 	and.w	r4, r3, #7
 8020994:	9226      	str	r2, [sp, #152]	; 0x98
 8020996:	4649      	mov	r1, r9
 8020998:	980d      	ldr	r0, [sp, #52]	; 0x34
 802099a:	f7ff ff03 	bl	80207a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 802099e:	4649      	mov	r1, r9
 80209a0:	4683      	mov	fp, r0
 80209a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80209a4:	f7ff ff1a 	bl	80207dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80209a8:	9a08      	ldr	r2, [sp, #32]
 80209aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209ac:	1bf6      	subs	r6, r6, r7
 80209ae:	1a9b      	subs	r3, r3, r2
 80209b0:	459a      	cmp	sl, r3
 80209b2:	bfa8      	it	ge
 80209b4:	469a      	movge	sl, r3
 80209b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80209b8:	1b9e      	subs	r6, r3, r6
 80209ba:	9b07      	ldr	r3, [sp, #28]
 80209bc:	429e      	cmp	r6, r3
 80209be:	bfd4      	ite	le
 80209c0:	ebc7 0706 	rsble	r7, r7, r6
 80209c4:	ebc7 0703 	rsbgt	r7, r7, r3
 80209c8:	1bed      	subs	r5, r5, r7
 80209ca:	fb0b 0017 	mls	r0, fp, r7, r0
 80209ce:	fb08 f305 	mul.w	r3, r8, r5
 80209d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80209d6:	9308      	str	r3, [sp, #32]
 80209d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80209da:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80209de:	930d      	str	r3, [sp, #52]	; 0x34
 80209e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80209e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80209e6:	930e      	str	r3, [sp, #56]	; 0x38
 80209e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80209ea:	b2de      	uxtb	r6, r3
 80209ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80209ee:	781a      	ldrb	r2, [r3, #0]
 80209f0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80209f4:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 80209f8:	4122      	asrs	r2, r4
 80209fa:	9307      	str	r3, [sp, #28]
 80209fc:	fb03 0b0b 	mla	fp, r3, fp, r0
 8020a00:	b2d2      	uxtb	r2, r2
 8020a02:	f1ba 0f00 	cmp.w	sl, #0
 8020a06:	f340 80d8 	ble.w	8020bba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 8020a0a:	46be      	mov	lr, r7
 8020a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020a0e:	f1be 0f00 	cmp.w	lr, #0
 8020a12:	f340 80bf 	ble.w	8020b94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8020a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020a18:	4013      	ands	r3, r2
 8020a1a:	d03e      	beq.n	8020a9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8020a1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020a1e:	fb13 f300 	smulbb	r3, r3, r0
 8020a22:	2bfe      	cmp	r3, #254	; 0xfe
 8020a24:	dd03      	ble.n	8020a2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 8020a26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020a28:	28ff      	cmp	r0, #255	; 0xff
 8020a2a:	f000 80a7 	beq.w	8020b7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x368>
 8020a2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020a30:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020a32:	fb10 f303 	smulbb	r3, r0, r3
 8020a36:	b29b      	uxth	r3, r3
 8020a38:	1c58      	adds	r0, r3, #1
 8020a3a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020a3e:	7808      	ldrb	r0, [r1, #0]
 8020a40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020a44:	fa1f fc83 	uxth.w	ip, r3
 8020a48:	43db      	mvns	r3, r3
 8020a4a:	fb16 f90c 	smulbb	r9, r6, ip
 8020a4e:	b2db      	uxtb	r3, r3
 8020a50:	fb00 9003 	mla	r0, r0, r3, r9
 8020a54:	b280      	uxth	r0, r0
 8020a56:	f100 0901 	add.w	r9, r0, #1
 8020a5a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020a5e:	fb15 f90c 	smulbb	r9, r5, ip
 8020a62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020a64:	1200      	asrs	r0, r0, #8
 8020a66:	fb15 fc0c 	smulbb	ip, r5, ip
 8020a6a:	7008      	strb	r0, [r1, #0]
 8020a6c:	7848      	ldrb	r0, [r1, #1]
 8020a6e:	fb00 9003 	mla	r0, r0, r3, r9
 8020a72:	b280      	uxth	r0, r0
 8020a74:	f100 0901 	add.w	r9, r0, #1
 8020a78:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020a7c:	1200      	asrs	r0, r0, #8
 8020a7e:	7048      	strb	r0, [r1, #1]
 8020a80:	7888      	ldrb	r0, [r1, #2]
 8020a82:	fb00 cc03 	mla	ip, r0, r3, ip
 8020a86:	fa1f fc8c 	uxth.w	ip, ip
 8020a8a:	f10c 0301 	add.w	r3, ip, #1
 8020a8e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020a92:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020a96:	f881 c002 	strb.w	ip, [r1, #2]
 8020a9a:	4444      	add	r4, r8
 8020a9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020aa0:	b2a4      	uxth	r4, r4
 8020aa2:	2c07      	cmp	r4, #7
 8020aa4:	bf89      	itett	hi
 8020aa6:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8020aa8:	fa42 f208 	asrls.w	r2, r2, r8
 8020aac:	2400      	movhi	r4, #0
 8020aae:	785a      	ldrbhi	r2, [r3, #1]
 8020ab0:	bf8a      	itet	hi
 8020ab2:	3301      	addhi	r3, #1
 8020ab4:	b2d2      	uxtbls	r2, r2
 8020ab6:	9326      	strhi	r3, [sp, #152]	; 0x98
 8020ab8:	9b07      	ldr	r3, [sp, #28]
 8020aba:	4419      	add	r1, r3
 8020abc:	e7a7      	b.n	8020a0e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8020abe:	441e      	add	r6, r3
 8020ac0:	b236      	sxth	r6, r6
 8020ac2:	e6e1      	b.n	8020888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8020ac4:	f1b9 0f01 	cmp.w	r9, #1
 8020ac8:	f47f af1c 	bne.w	8020904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020acc:	f1bb 0f01 	cmp.w	fp, #1
 8020ad0:	f47f af18 	bne.w	8020904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020ad4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8020b8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8020ad8:	f8db 0000 	ldr.w	r0, [fp]
 8020adc:	6803      	ldr	r3, [r0, #0]
 8020ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ae0:	4798      	blx	r3
 8020ae2:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8020ae6:	465a      	mov	r2, fp
 8020ae8:	d006      	beq.n	8020af8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8020aea:	f1b8 0f04 	cmp.w	r8, #4
 8020aee:	d13d      	bne.n	8020b6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 8020af0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020af2:	3300      	adds	r3, #0
 8020af4:	bf18      	it	ne
 8020af6:	2301      	movne	r3, #1
 8020af8:	05c0      	lsls	r0, r0, #23
 8020afa:	d567      	bpl.n	8020bcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 8020afc:	f1b8 0f08 	cmp.w	r8, #8
 8020b00:	d164      	bne.n	8020bcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	bf0c      	ite	eq
 8020b06:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8020b0a:	2180      	movne	r1, #128	; 0x80
 8020b0c:	2f00      	cmp	r7, #0
 8020b0e:	f47f aef9 	bne.w	8020904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020b12:	2c00      	cmp	r4, #0
 8020b14:	f47f aef6 	bne.w	8020904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020b18:	9b07      	ldr	r3, [sp, #28]
 8020b1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020b1c:	18f3      	adds	r3, r6, r3
 8020b1e:	4283      	cmp	r3, r0
 8020b20:	f73f aef0 	bgt.w	8020904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020b24:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 8020b28:	4403      	add	r3, r0
 8020b2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020b2c:	4283      	cmp	r3, r0
 8020b2e:	f73f aee9 	bgt.w	8020904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020b32:	f1b8 0f08 	cmp.w	r8, #8
 8020b36:	6810      	ldr	r0, [r2, #0]
 8020b38:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8020b3c:	bf18      	it	ne
 8020b3e:	3501      	addne	r5, #1
 8020b40:	6804      	ldr	r4, [r0, #0]
 8020b42:	9105      	str	r1, [sp, #20]
 8020b44:	bf18      	it	ne
 8020b46:	f025 0501 	bicne.w	r5, r5, #1
 8020b4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020b4c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8020b50:	bf18      	it	ne
 8020b52:	b2ad      	uxthne	r5, r5
 8020b54:	9104      	str	r1, [sp, #16]
 8020b56:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020b58:	e9cd 5a00 	strd	r5, sl, [sp]
 8020b5c:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8020b60:	9926      	ldr	r1, [sp, #152]	; 0x98
 8020b62:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8020b64:	47a0      	blx	r4
 8020b66:	b017      	add	sp, #92	; 0x5c
 8020b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	e7c3      	b.n	8020af8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8020b70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020b72:	e6d0      	b.n	8020916 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8020b74:	23ff      	movs	r3, #255	; 0xff
 8020b76:	e6ef      	b.n	8020958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 8020b78:	2355      	movs	r3, #85	; 0x55
 8020b7a:	e6ed      	b.n	8020958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 8020b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b7e:	700e      	strb	r6, [r1, #0]
 8020b80:	704b      	strb	r3, [r1, #1]
 8020b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020b84:	708b      	strb	r3, [r1, #2]
 8020b86:	e788      	b.n	8020a9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8020b88:	2000b414 	.word	0x2000b414
 8020b8c:	2000b41c 	.word	0x2000b41c
 8020b90:	2000b416 	.word	0x2000b416
 8020b94:	9b08      	ldr	r3, [sp, #32]
 8020b96:	b153      	cbz	r3, 8020bae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020b98:	441c      	add	r4, r3
 8020b9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020b9c:	b2a4      	uxth	r4, r4
 8020b9e:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8020ba2:	f004 0407 	and.w	r4, r4, #7
 8020ba6:	781a      	ldrb	r2, [r3, #0]
 8020ba8:	9326      	str	r3, [sp, #152]	; 0x98
 8020baa:	4122      	asrs	r2, r4
 8020bac:	b2d2      	uxtb	r2, r2
 8020bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020bb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020bb4:	445b      	add	r3, fp
 8020bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8020bb8:	e723      	b.n	8020a02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8020bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d1d2      	bne.n	8020b66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8020bc0:	4b05      	ldr	r3, [pc, #20]	; (8020bd8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 8020bc2:	6818      	ldr	r0, [r3, #0]
 8020bc4:	6803      	ldr	r3, [r0, #0]
 8020bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020bc8:	4798      	blx	r3
 8020bca:	e7cc      	b.n	8020b66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	f43f ae99 	beq.w	8020904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020bd2:	2180      	movs	r1, #128	; 0x80
 8020bd4:	e79a      	b.n	8020b0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8020bd6:	bf00      	nop
 8020bd8:	2000b41c 	.word	0x2000b41c

08020bdc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020bdc:	b538      	push	{r3, r4, r5, lr}
 8020bde:	4c15      	ldr	r4, [pc, #84]	; (8020c34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020be0:	4605      	mov	r5, r0
 8020be2:	7823      	ldrb	r3, [r4, #0]
 8020be4:	f3bf 8f5b 	dmb	ish
 8020be8:	07da      	lsls	r2, r3, #31
 8020bea:	d40b      	bmi.n	8020c04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020bec:	4620      	mov	r0, r4
 8020bee:	f006 fd67 	bl	80276c0 <__cxa_guard_acquire>
 8020bf2:	b138      	cbz	r0, 8020c04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020bf4:	4620      	mov	r0, r4
 8020bf6:	f006 fd6f 	bl	80276d8 <__cxa_guard_release>
 8020bfa:	4a0f      	ldr	r2, [pc, #60]	; (8020c38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020bfc:	490f      	ldr	r1, [pc, #60]	; (8020c3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020bfe:	4810      	ldr	r0, [pc, #64]	; (8020c40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020c00:	f006 fd54 	bl	80276ac <__aeabi_atexit>
 8020c04:	4c0f      	ldr	r4, [pc, #60]	; (8020c44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8020c06:	7823      	ldrb	r3, [r4, #0]
 8020c08:	f3bf 8f5b 	dmb	ish
 8020c0c:	07db      	lsls	r3, r3, #31
 8020c0e:	d40b      	bmi.n	8020c28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020c10:	4620      	mov	r0, r4
 8020c12:	f006 fd55 	bl	80276c0 <__cxa_guard_acquire>
 8020c16:	b138      	cbz	r0, 8020c28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020c18:	4620      	mov	r0, r4
 8020c1a:	f006 fd5d 	bl	80276d8 <__cxa_guard_release>
 8020c1e:	4a06      	ldr	r2, [pc, #24]	; (8020c38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020c20:	4909      	ldr	r1, [pc, #36]	; (8020c48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8020c22:	480a      	ldr	r0, [pc, #40]	; (8020c4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020c24:	f006 fd42 	bl	80276ac <__aeabi_atexit>
 8020c28:	4b05      	ldr	r3, [pc, #20]	; (8020c40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020c2a:	612b      	str	r3, [r5, #16]
 8020c2c:	4b07      	ldr	r3, [pc, #28]	; (8020c4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020c2e:	616b      	str	r3, [r5, #20]
 8020c30:	bd38      	pop	{r3, r4, r5, pc}
 8020c32:	bf00      	nop
 8020c34:	2000b528 	.word	0x2000b528
 8020c38:	20000000 	.word	0x20000000
 8020c3c:	0801f5bb 	.word	0x0801f5bb
 8020c40:	20000084 	.word	0x20000084
 8020c44:	2000b52c 	.word	0x2000b52c
 8020c48:	0801f5b9 	.word	0x0801f5b9
 8020c4c:	20000088 	.word	0x20000088

08020c50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020c50:	b538      	push	{r3, r4, r5, lr}
 8020c52:	4c15      	ldr	r4, [pc, #84]	; (8020ca8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020c54:	4605      	mov	r5, r0
 8020c56:	7823      	ldrb	r3, [r4, #0]
 8020c58:	f3bf 8f5b 	dmb	ish
 8020c5c:	07da      	lsls	r2, r3, #31
 8020c5e:	d40b      	bmi.n	8020c78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020c60:	4620      	mov	r0, r4
 8020c62:	f006 fd2d 	bl	80276c0 <__cxa_guard_acquire>
 8020c66:	b138      	cbz	r0, 8020c78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020c68:	4620      	mov	r0, r4
 8020c6a:	f006 fd35 	bl	80276d8 <__cxa_guard_release>
 8020c6e:	4a0f      	ldr	r2, [pc, #60]	; (8020cac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020c70:	490f      	ldr	r1, [pc, #60]	; (8020cb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8020c72:	4810      	ldr	r0, [pc, #64]	; (8020cb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020c74:	f006 fd1a 	bl	80276ac <__aeabi_atexit>
 8020c78:	4c0f      	ldr	r4, [pc, #60]	; (8020cb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020c7a:	7823      	ldrb	r3, [r4, #0]
 8020c7c:	f3bf 8f5b 	dmb	ish
 8020c80:	07db      	lsls	r3, r3, #31
 8020c82:	d40b      	bmi.n	8020c9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020c84:	4620      	mov	r0, r4
 8020c86:	f006 fd1b 	bl	80276c0 <__cxa_guard_acquire>
 8020c8a:	b138      	cbz	r0, 8020c9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020c8c:	4620      	mov	r0, r4
 8020c8e:	f006 fd23 	bl	80276d8 <__cxa_guard_release>
 8020c92:	4a06      	ldr	r2, [pc, #24]	; (8020cac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020c94:	4909      	ldr	r1, [pc, #36]	; (8020cbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8020c96:	480a      	ldr	r0, [pc, #40]	; (8020cc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020c98:	f006 fd08 	bl	80276ac <__aeabi_atexit>
 8020c9c:	4b05      	ldr	r3, [pc, #20]	; (8020cb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020c9e:	60ab      	str	r3, [r5, #8]
 8020ca0:	4b07      	ldr	r3, [pc, #28]	; (8020cc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020ca2:	60eb      	str	r3, [r5, #12]
 8020ca4:	bd38      	pop	{r3, r4, r5, pc}
 8020ca6:	bf00      	nop
 8020ca8:	2000b508 	.word	0x2000b508
 8020cac:	20000000 	.word	0x20000000
 8020cb0:	0801f5bf 	.word	0x0801f5bf
 8020cb4:	20000064 	.word	0x20000064
 8020cb8:	2000b50c 	.word	0x2000b50c
 8020cbc:	0801f5bd 	.word	0x0801f5bd
 8020cc0:	20000068 	.word	0x20000068

08020cc4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8020cc4:	b510      	push	{r4, lr}
 8020cc6:	4604      	mov	r4, r0
 8020cc8:	f7ff ff88 	bl	8020bdc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020ccc:	4620      	mov	r0, r4
 8020cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020cd2:	f7ff bfbd 	b.w	8020c50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08020cd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8020cd8:	b538      	push	{r3, r4, r5, lr}
 8020cda:	4c15      	ldr	r4, [pc, #84]	; (8020d30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8020cdc:	4605      	mov	r5, r0
 8020cde:	7823      	ldrb	r3, [r4, #0]
 8020ce0:	f3bf 8f5b 	dmb	ish
 8020ce4:	07da      	lsls	r2, r3, #31
 8020ce6:	d40b      	bmi.n	8020d00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020ce8:	4620      	mov	r0, r4
 8020cea:	f006 fce9 	bl	80276c0 <__cxa_guard_acquire>
 8020cee:	b138      	cbz	r0, 8020d00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020cf0:	4620      	mov	r0, r4
 8020cf2:	f006 fcf1 	bl	80276d8 <__cxa_guard_release>
 8020cf6:	4a0f      	ldr	r2, [pc, #60]	; (8020d34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020cf8:	490f      	ldr	r1, [pc, #60]	; (8020d38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8020cfa:	4810      	ldr	r0, [pc, #64]	; (8020d3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020cfc:	f006 fcd6 	bl	80276ac <__aeabi_atexit>
 8020d00:	4c0f      	ldr	r4, [pc, #60]	; (8020d40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8020d02:	7823      	ldrb	r3, [r4, #0]
 8020d04:	f3bf 8f5b 	dmb	ish
 8020d08:	07db      	lsls	r3, r3, #31
 8020d0a:	d40b      	bmi.n	8020d24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020d0c:	4620      	mov	r0, r4
 8020d0e:	f006 fcd7 	bl	80276c0 <__cxa_guard_acquire>
 8020d12:	b138      	cbz	r0, 8020d24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020d14:	4620      	mov	r0, r4
 8020d16:	f006 fcdf 	bl	80276d8 <__cxa_guard_release>
 8020d1a:	4a06      	ldr	r2, [pc, #24]	; (8020d34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020d1c:	4909      	ldr	r1, [pc, #36]	; (8020d44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8020d1e:	480a      	ldr	r0, [pc, #40]	; (8020d48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020d20:	f006 fcc4 	bl	80276ac <__aeabi_atexit>
 8020d24:	4b05      	ldr	r3, [pc, #20]	; (8020d3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020d26:	622b      	str	r3, [r5, #32]
 8020d28:	4b07      	ldr	r3, [pc, #28]	; (8020d48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020d2a:	626b      	str	r3, [r5, #36]	; 0x24
 8020d2c:	bd38      	pop	{r3, r4, r5, pc}
 8020d2e:	bf00      	nop
 8020d30:	2000b530 	.word	0x2000b530
 8020d34:	20000000 	.word	0x20000000
 8020d38:	0801f5b3 	.word	0x0801f5b3
 8020d3c:	2000008c 	.word	0x2000008c
 8020d40:	2000b534 	.word	0x2000b534
 8020d44:	0801f5b1 	.word	0x0801f5b1
 8020d48:	20000090 	.word	0x20000090

08020d4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020d4c:	b538      	push	{r3, r4, r5, lr}
 8020d4e:	4c15      	ldr	r4, [pc, #84]	; (8020da4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020d50:	4605      	mov	r5, r0
 8020d52:	7823      	ldrb	r3, [r4, #0]
 8020d54:	f3bf 8f5b 	dmb	ish
 8020d58:	07da      	lsls	r2, r3, #31
 8020d5a:	d40b      	bmi.n	8020d74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020d5c:	4620      	mov	r0, r4
 8020d5e:	f006 fcaf 	bl	80276c0 <__cxa_guard_acquire>
 8020d62:	b138      	cbz	r0, 8020d74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020d64:	4620      	mov	r0, r4
 8020d66:	f006 fcb7 	bl	80276d8 <__cxa_guard_release>
 8020d6a:	4a0f      	ldr	r2, [pc, #60]	; (8020da8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020d6c:	490f      	ldr	r1, [pc, #60]	; (8020dac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8020d6e:	4810      	ldr	r0, [pc, #64]	; (8020db0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020d70:	f006 fc9c 	bl	80276ac <__aeabi_atexit>
 8020d74:	4c0f      	ldr	r4, [pc, #60]	; (8020db4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8020d76:	7823      	ldrb	r3, [r4, #0]
 8020d78:	f3bf 8f5b 	dmb	ish
 8020d7c:	07db      	lsls	r3, r3, #31
 8020d7e:	d40b      	bmi.n	8020d98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020d80:	4620      	mov	r0, r4
 8020d82:	f006 fc9d 	bl	80276c0 <__cxa_guard_acquire>
 8020d86:	b138      	cbz	r0, 8020d98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020d88:	4620      	mov	r0, r4
 8020d8a:	f006 fca5 	bl	80276d8 <__cxa_guard_release>
 8020d8e:	4a06      	ldr	r2, [pc, #24]	; (8020da8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020d90:	4909      	ldr	r1, [pc, #36]	; (8020db8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8020d92:	480a      	ldr	r0, [pc, #40]	; (8020dbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020d94:	f006 fc8a 	bl	80276ac <__aeabi_atexit>
 8020d98:	4b05      	ldr	r3, [pc, #20]	; (8020db0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020d9a:	61ab      	str	r3, [r5, #24]
 8020d9c:	4b07      	ldr	r3, [pc, #28]	; (8020dbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020d9e:	61eb      	str	r3, [r5, #28]
 8020da0:	bd38      	pop	{r3, r4, r5, pc}
 8020da2:	bf00      	nop
 8020da4:	2000b510 	.word	0x2000b510
 8020da8:	20000000 	.word	0x20000000
 8020dac:	0801f5b7 	.word	0x0801f5b7
 8020db0:	2000006c 	.word	0x2000006c
 8020db4:	2000b514 	.word	0x2000b514
 8020db8:	0801f5b5 	.word	0x0801f5b5
 8020dbc:	20000070 	.word	0x20000070

08020dc0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8020dc0:	b510      	push	{r4, lr}
 8020dc2:	4604      	mov	r4, r0
 8020dc4:	f7ff ff88 	bl	8020cd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8020dc8:	4620      	mov	r0, r4
 8020dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020dce:	f7ff bfbd 	b.w	8020d4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08020dd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8020dd4:	b538      	push	{r3, r4, r5, lr}
 8020dd6:	4c15      	ldr	r4, [pc, #84]	; (8020e2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8020dd8:	4605      	mov	r5, r0
 8020dda:	7823      	ldrb	r3, [r4, #0]
 8020ddc:	f3bf 8f5b 	dmb	ish
 8020de0:	07da      	lsls	r2, r3, #31
 8020de2:	d40b      	bmi.n	8020dfc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020de4:	4620      	mov	r0, r4
 8020de6:	f006 fc6b 	bl	80276c0 <__cxa_guard_acquire>
 8020dea:	b138      	cbz	r0, 8020dfc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020dec:	4620      	mov	r0, r4
 8020dee:	f006 fc73 	bl	80276d8 <__cxa_guard_release>
 8020df2:	4a0f      	ldr	r2, [pc, #60]	; (8020e30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020df4:	490f      	ldr	r1, [pc, #60]	; (8020e34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8020df6:	4810      	ldr	r0, [pc, #64]	; (8020e38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8020df8:	f006 fc58 	bl	80276ac <__aeabi_atexit>
 8020dfc:	4c0f      	ldr	r4, [pc, #60]	; (8020e3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8020dfe:	7823      	ldrb	r3, [r4, #0]
 8020e00:	f3bf 8f5b 	dmb	ish
 8020e04:	07db      	lsls	r3, r3, #31
 8020e06:	d40b      	bmi.n	8020e20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020e08:	4620      	mov	r0, r4
 8020e0a:	f006 fc59 	bl	80276c0 <__cxa_guard_acquire>
 8020e0e:	b138      	cbz	r0, 8020e20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020e10:	4620      	mov	r0, r4
 8020e12:	f006 fc61 	bl	80276d8 <__cxa_guard_release>
 8020e16:	4a06      	ldr	r2, [pc, #24]	; (8020e30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020e18:	4909      	ldr	r1, [pc, #36]	; (8020e40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8020e1a:	480a      	ldr	r0, [pc, #40]	; (8020e44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020e1c:	f006 fc46 	bl	80276ac <__aeabi_atexit>
 8020e20:	4b05      	ldr	r3, [pc, #20]	; (8020e38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8020e22:	632b      	str	r3, [r5, #48]	; 0x30
 8020e24:	4b07      	ldr	r3, [pc, #28]	; (8020e44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020e26:	636b      	str	r3, [r5, #52]	; 0x34
 8020e28:	bd38      	pop	{r3, r4, r5, pc}
 8020e2a:	bf00      	nop
 8020e2c:	2000b518 	.word	0x2000b518
 8020e30:	20000000 	.word	0x20000000
 8020e34:	0801f5ab 	.word	0x0801f5ab
 8020e38:	20000074 	.word	0x20000074
 8020e3c:	2000b51c 	.word	0x2000b51c
 8020e40:	0801f5a9 	.word	0x0801f5a9
 8020e44:	20000078 	.word	0x20000078

08020e48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8020e48:	b538      	push	{r3, r4, r5, lr}
 8020e4a:	4c15      	ldr	r4, [pc, #84]	; (8020ea0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8020e4c:	4605      	mov	r5, r0
 8020e4e:	7823      	ldrb	r3, [r4, #0]
 8020e50:	f3bf 8f5b 	dmb	ish
 8020e54:	07da      	lsls	r2, r3, #31
 8020e56:	d40b      	bmi.n	8020e70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020e58:	4620      	mov	r0, r4
 8020e5a:	f006 fc31 	bl	80276c0 <__cxa_guard_acquire>
 8020e5e:	b138      	cbz	r0, 8020e70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020e60:	4620      	mov	r0, r4
 8020e62:	f006 fc39 	bl	80276d8 <__cxa_guard_release>
 8020e66:	4a0f      	ldr	r2, [pc, #60]	; (8020ea4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8020e68:	490f      	ldr	r1, [pc, #60]	; (8020ea8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8020e6a:	4810      	ldr	r0, [pc, #64]	; (8020eac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8020e6c:	f006 fc1e 	bl	80276ac <__aeabi_atexit>
 8020e70:	4c0f      	ldr	r4, [pc, #60]	; (8020eb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8020e72:	7823      	ldrb	r3, [r4, #0]
 8020e74:	f3bf 8f5b 	dmb	ish
 8020e78:	07db      	lsls	r3, r3, #31
 8020e7a:	d40b      	bmi.n	8020e94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8020e7c:	4620      	mov	r0, r4
 8020e7e:	f006 fc1f 	bl	80276c0 <__cxa_guard_acquire>
 8020e82:	b138      	cbz	r0, 8020e94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8020e84:	4620      	mov	r0, r4
 8020e86:	f006 fc27 	bl	80276d8 <__cxa_guard_release>
 8020e8a:	4a06      	ldr	r2, [pc, #24]	; (8020ea4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8020e8c:	4909      	ldr	r1, [pc, #36]	; (8020eb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8020e8e:	480a      	ldr	r0, [pc, #40]	; (8020eb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8020e90:	f006 fc0c 	bl	80276ac <__aeabi_atexit>
 8020e94:	4b05      	ldr	r3, [pc, #20]	; (8020eac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8020e96:	62ab      	str	r3, [r5, #40]	; 0x28
 8020e98:	4b07      	ldr	r3, [pc, #28]	; (8020eb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8020e9a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8020e9c:	bd38      	pop	{r3, r4, r5, pc}
 8020e9e:	bf00      	nop
 8020ea0:	2000b4f0 	.word	0x2000b4f0
 8020ea4:	20000000 	.word	0x20000000
 8020ea8:	0801f5af 	.word	0x0801f5af
 8020eac:	2000004c 	.word	0x2000004c
 8020eb0:	2000b4f4 	.word	0x2000b4f4
 8020eb4:	0801f5ad 	.word	0x0801f5ad
 8020eb8:	20000050 	.word	0x20000050

08020ebc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8020ebc:	b510      	push	{r4, lr}
 8020ebe:	4604      	mov	r4, r0
 8020ec0:	f7ff ff88 	bl	8020dd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8020ec4:	4620      	mov	r0, r4
 8020ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020eca:	f7ff bfbd 	b.w	8020e48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08020ed0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8020ed0:	b538      	push	{r3, r4, r5, lr}
 8020ed2:	4c15      	ldr	r4, [pc, #84]	; (8020f28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8020ed4:	4605      	mov	r5, r0
 8020ed6:	7823      	ldrb	r3, [r4, #0]
 8020ed8:	f3bf 8f5b 	dmb	ish
 8020edc:	07da      	lsls	r2, r3, #31
 8020ede:	d40b      	bmi.n	8020ef8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020ee0:	4620      	mov	r0, r4
 8020ee2:	f006 fbed 	bl	80276c0 <__cxa_guard_acquire>
 8020ee6:	b138      	cbz	r0, 8020ef8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020ee8:	4620      	mov	r0, r4
 8020eea:	f006 fbf5 	bl	80276d8 <__cxa_guard_release>
 8020eee:	4a0f      	ldr	r2, [pc, #60]	; (8020f2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020ef0:	490f      	ldr	r1, [pc, #60]	; (8020f30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8020ef2:	4810      	ldr	r0, [pc, #64]	; (8020f34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020ef4:	f006 fbda 	bl	80276ac <__aeabi_atexit>
 8020ef8:	4c0f      	ldr	r4, [pc, #60]	; (8020f38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8020efa:	7823      	ldrb	r3, [r4, #0]
 8020efc:	f3bf 8f5b 	dmb	ish
 8020f00:	07db      	lsls	r3, r3, #31
 8020f02:	d40b      	bmi.n	8020f1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020f04:	4620      	mov	r0, r4
 8020f06:	f006 fbdb 	bl	80276c0 <__cxa_guard_acquire>
 8020f0a:	b138      	cbz	r0, 8020f1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020f0c:	4620      	mov	r0, r4
 8020f0e:	f006 fbe3 	bl	80276d8 <__cxa_guard_release>
 8020f12:	4a06      	ldr	r2, [pc, #24]	; (8020f2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020f14:	4909      	ldr	r1, [pc, #36]	; (8020f3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8020f16:	480a      	ldr	r0, [pc, #40]	; (8020f40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020f18:	f006 fbc8 	bl	80276ac <__aeabi_atexit>
 8020f1c:	4b05      	ldr	r3, [pc, #20]	; (8020f34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020f1e:	642b      	str	r3, [r5, #64]	; 0x40
 8020f20:	4b07      	ldr	r3, [pc, #28]	; (8020f40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020f22:	646b      	str	r3, [r5, #68]	; 0x44
 8020f24:	bd38      	pop	{r3, r4, r5, pc}
 8020f26:	bf00      	nop
 8020f28:	2000b520 	.word	0x2000b520
 8020f2c:	20000000 	.word	0x20000000
 8020f30:	0801f5a3 	.word	0x0801f5a3
 8020f34:	2000007c 	.word	0x2000007c
 8020f38:	2000b524 	.word	0x2000b524
 8020f3c:	0801f5a1 	.word	0x0801f5a1
 8020f40:	20000080 	.word	0x20000080

08020f44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8020f44:	b538      	push	{r3, r4, r5, lr}
 8020f46:	4c15      	ldr	r4, [pc, #84]	; (8020f9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8020f48:	4605      	mov	r5, r0
 8020f4a:	7823      	ldrb	r3, [r4, #0]
 8020f4c:	f3bf 8f5b 	dmb	ish
 8020f50:	07da      	lsls	r2, r3, #31
 8020f52:	d40b      	bmi.n	8020f6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020f54:	4620      	mov	r0, r4
 8020f56:	f006 fbb3 	bl	80276c0 <__cxa_guard_acquire>
 8020f5a:	b138      	cbz	r0, 8020f6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020f5c:	4620      	mov	r0, r4
 8020f5e:	f006 fbbb 	bl	80276d8 <__cxa_guard_release>
 8020f62:	4a0f      	ldr	r2, [pc, #60]	; (8020fa0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020f64:	490f      	ldr	r1, [pc, #60]	; (8020fa4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8020f66:	4810      	ldr	r0, [pc, #64]	; (8020fa8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020f68:	f006 fba0 	bl	80276ac <__aeabi_atexit>
 8020f6c:	4c0f      	ldr	r4, [pc, #60]	; (8020fac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8020f6e:	7823      	ldrb	r3, [r4, #0]
 8020f70:	f3bf 8f5b 	dmb	ish
 8020f74:	07db      	lsls	r3, r3, #31
 8020f76:	d40b      	bmi.n	8020f90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020f78:	4620      	mov	r0, r4
 8020f7a:	f006 fba1 	bl	80276c0 <__cxa_guard_acquire>
 8020f7e:	b138      	cbz	r0, 8020f90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020f80:	4620      	mov	r0, r4
 8020f82:	f006 fba9 	bl	80276d8 <__cxa_guard_release>
 8020f86:	4a06      	ldr	r2, [pc, #24]	; (8020fa0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020f88:	4909      	ldr	r1, [pc, #36]	; (8020fb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8020f8a:	480a      	ldr	r0, [pc, #40]	; (8020fb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020f8c:	f006 fb8e 	bl	80276ac <__aeabi_atexit>
 8020f90:	4b05      	ldr	r3, [pc, #20]	; (8020fa8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020f92:	63ab      	str	r3, [r5, #56]	; 0x38
 8020f94:	4b07      	ldr	r3, [pc, #28]	; (8020fb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020f96:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020f98:	bd38      	pop	{r3, r4, r5, pc}
 8020f9a:	bf00      	nop
 8020f9c:	2000b500 	.word	0x2000b500
 8020fa0:	20000000 	.word	0x20000000
 8020fa4:	0801f5a7 	.word	0x0801f5a7
 8020fa8:	2000005c 	.word	0x2000005c
 8020fac:	2000b504 	.word	0x2000b504
 8020fb0:	0801f5a5 	.word	0x0801f5a5
 8020fb4:	20000060 	.word	0x20000060

08020fb8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8020fb8:	b510      	push	{r4, lr}
 8020fba:	4604      	mov	r4, r0
 8020fbc:	f7ff ff88 	bl	8020ed0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8020fc0:	4620      	mov	r0, r4
 8020fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020fc6:	f7ff bfbd 	b.w	8020f44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08020fcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8020fcc:	b538      	push	{r3, r4, r5, lr}
 8020fce:	4c15      	ldr	r4, [pc, #84]	; (8021024 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8020fd0:	4605      	mov	r5, r0
 8020fd2:	7823      	ldrb	r3, [r4, #0]
 8020fd4:	f3bf 8f5b 	dmb	ish
 8020fd8:	07da      	lsls	r2, r3, #31
 8020fda:	d40b      	bmi.n	8020ff4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020fdc:	4620      	mov	r0, r4
 8020fde:	f006 fb6f 	bl	80276c0 <__cxa_guard_acquire>
 8020fe2:	b138      	cbz	r0, 8020ff4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020fe4:	4620      	mov	r0, r4
 8020fe6:	f006 fb77 	bl	80276d8 <__cxa_guard_release>
 8020fea:	4a0f      	ldr	r2, [pc, #60]	; (8021028 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020fec:	490f      	ldr	r1, [pc, #60]	; (802102c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8020fee:	4810      	ldr	r0, [pc, #64]	; (8021030 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020ff0:	f006 fb5c 	bl	80276ac <__aeabi_atexit>
 8020ff4:	4c0f      	ldr	r4, [pc, #60]	; (8021034 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8020ff6:	7823      	ldrb	r3, [r4, #0]
 8020ff8:	f3bf 8f5b 	dmb	ish
 8020ffc:	07db      	lsls	r3, r3, #31
 8020ffe:	d40b      	bmi.n	8021018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021000:	4620      	mov	r0, r4
 8021002:	f006 fb5d 	bl	80276c0 <__cxa_guard_acquire>
 8021006:	b138      	cbz	r0, 8021018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021008:	4620      	mov	r0, r4
 802100a:	f006 fb65 	bl	80276d8 <__cxa_guard_release>
 802100e:	4a06      	ldr	r2, [pc, #24]	; (8021028 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021010:	4909      	ldr	r1, [pc, #36]	; (8021038 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021012:	480a      	ldr	r0, [pc, #40]	; (802103c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021014:	f006 fb4a 	bl	80276ac <__aeabi_atexit>
 8021018:	4b05      	ldr	r3, [pc, #20]	; (8021030 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802101a:	652b      	str	r3, [r5, #80]	; 0x50
 802101c:	4b07      	ldr	r3, [pc, #28]	; (802103c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802101e:	656b      	str	r3, [r5, #84]	; 0x54
 8021020:	bd38      	pop	{r3, r4, r5, pc}
 8021022:	bf00      	nop
 8021024:	2000b4f8 	.word	0x2000b4f8
 8021028:	20000000 	.word	0x20000000
 802102c:	0801f59b 	.word	0x0801f59b
 8021030:	20000054 	.word	0x20000054
 8021034:	2000b4fc 	.word	0x2000b4fc
 8021038:	0801f599 	.word	0x0801f599
 802103c:	20000058 	.word	0x20000058

08021040 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021040:	b538      	push	{r3, r4, r5, lr}
 8021042:	4c15      	ldr	r4, [pc, #84]	; (8021098 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021044:	4605      	mov	r5, r0
 8021046:	7823      	ldrb	r3, [r4, #0]
 8021048:	f3bf 8f5b 	dmb	ish
 802104c:	07da      	lsls	r2, r3, #31
 802104e:	d40b      	bmi.n	8021068 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021050:	4620      	mov	r0, r4
 8021052:	f006 fb35 	bl	80276c0 <__cxa_guard_acquire>
 8021056:	b138      	cbz	r0, 8021068 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021058:	4620      	mov	r0, r4
 802105a:	f006 fb3d 	bl	80276d8 <__cxa_guard_release>
 802105e:	4a0f      	ldr	r2, [pc, #60]	; (802109c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021060:	490f      	ldr	r1, [pc, #60]	; (80210a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021062:	4810      	ldr	r0, [pc, #64]	; (80210a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021064:	f006 fb22 	bl	80276ac <__aeabi_atexit>
 8021068:	4c0f      	ldr	r4, [pc, #60]	; (80210a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802106a:	7823      	ldrb	r3, [r4, #0]
 802106c:	f3bf 8f5b 	dmb	ish
 8021070:	07db      	lsls	r3, r3, #31
 8021072:	d40b      	bmi.n	802108c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021074:	4620      	mov	r0, r4
 8021076:	f006 fb23 	bl	80276c0 <__cxa_guard_acquire>
 802107a:	b138      	cbz	r0, 802108c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802107c:	4620      	mov	r0, r4
 802107e:	f006 fb2b 	bl	80276d8 <__cxa_guard_release>
 8021082:	4a06      	ldr	r2, [pc, #24]	; (802109c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021084:	4909      	ldr	r1, [pc, #36]	; (80210ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021086:	480a      	ldr	r0, [pc, #40]	; (80210b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021088:	f006 fb10 	bl	80276ac <__aeabi_atexit>
 802108c:	4b05      	ldr	r3, [pc, #20]	; (80210a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802108e:	64ab      	str	r3, [r5, #72]	; 0x48
 8021090:	4b07      	ldr	r3, [pc, #28]	; (80210b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021092:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021094:	bd38      	pop	{r3, r4, r5, pc}
 8021096:	bf00      	nop
 8021098:	2000b4e8 	.word	0x2000b4e8
 802109c:	20000000 	.word	0x20000000
 80210a0:	0801f59f 	.word	0x0801f59f
 80210a4:	20000044 	.word	0x20000044
 80210a8:	2000b4ec 	.word	0x2000b4ec
 80210ac:	0801f59d 	.word	0x0801f59d
 80210b0:	20000048 	.word	0x20000048

080210b4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80210b4:	b510      	push	{r4, lr}
 80210b6:	4604      	mov	r4, r0
 80210b8:	f7ff ff88 	bl	8020fcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80210bc:	4620      	mov	r0, r4
 80210be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210c2:	f7ff bfbd 	b.w	8021040 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080210c6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80210c6:	b510      	push	{r4, lr}
 80210c8:	4604      	mov	r4, r0
 80210ca:	f7ff fff3 	bl	80210b4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80210ce:	4620      	mov	r0, r4
 80210d0:	f7ff ff72 	bl	8020fb8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80210d4:	4620      	mov	r0, r4
 80210d6:	f7ff fe73 	bl	8020dc0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80210da:	4620      	mov	r0, r4
 80210dc:	f7ff fdf2 	bl	8020cc4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80210e0:	4620      	mov	r0, r4
 80210e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210e6:	f7ff bee9 	b.w	8020ebc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080210ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80210ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210f0:	b087      	sub	sp, #28
 80210f2:	7888      	ldrb	r0, [r1, #2]
 80210f4:	4616      	mov	r6, r2
 80210f6:	9001      	str	r0, [sp, #4]
 80210f8:	7848      	ldrb	r0, [r1, #1]
 80210fa:	9100      	str	r1, [sp, #0]
 80210fc:	9002      	str	r0, [sp, #8]
 80210fe:	7808      	ldrb	r0, [r1, #0]
 8021100:	9901      	ldr	r1, [sp, #4]
 8021102:	9003      	str	r0, [sp, #12]
 8021104:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021108:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 802110c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8021110:	9902      	ldr	r1, [sp, #8]
 8021112:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8021116:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 802111a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 802111e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8021122:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8021126:	9005      	str	r0, [sp, #20]
 8021128:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 802112c:	fb05 ca0e 	mla	sl, r5, lr, ip
 8021130:	2d00      	cmp	r5, #0
 8021132:	eb06 080a 	add.w	r8, r6, sl
 8021136:	db4a      	blt.n	80211ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021138:	45a9      	cmp	r9, r5
 802113a:	dd48      	ble.n	80211ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 802113c:	f1bc 0f00 	cmp.w	ip, #0
 8021140:	db43      	blt.n	80211ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8021142:	45e6      	cmp	lr, ip
 8021144:	dd41      	ble.n	80211ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8021146:	f816 600a 	ldrb.w	r6, [r6, sl]
 802114a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802114e:	441e      	add	r6, r3
 8021150:	f11c 0001 	adds.w	r0, ip, #1
 8021154:	d43e      	bmi.n	80211d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021156:	4586      	cmp	lr, r0
 8021158:	dd3c      	ble.n	80211d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802115a:	2a00      	cmp	r2, #0
 802115c:	d03a      	beq.n	80211d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802115e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8021162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021166:	4418      	add	r0, r3
 8021168:	3501      	adds	r5, #1
 802116a:	d437      	bmi.n	80211dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 802116c:	45a9      	cmp	r9, r5
 802116e:	dd35      	ble.n	80211dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021170:	b3a4      	cbz	r4, 80211dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021172:	f1bc 0f00 	cmp.w	ip, #0
 8021176:	db2f      	blt.n	80211d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8021178:	45e6      	cmp	lr, ip
 802117a:	dd2d      	ble.n	80211d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 802117c:	f818 500e 	ldrb.w	r5, [r8, lr]
 8021180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021184:	441d      	add	r5, r3
 8021186:	f11c 0c01 	adds.w	ip, ip, #1
 802118a:	d42a      	bmi.n	80211e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802118c:	45e6      	cmp	lr, ip
 802118e:	dd28      	ble.n	80211e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021190:	b33a      	cbz	r2, 80211e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021192:	44c6      	add	lr, r8
 8021194:	f89e c001 	ldrb.w	ip, [lr, #1]
 8021198:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802119c:	4463      	add	r3, ip
 802119e:	ea6f 0c07 	mvn.w	ip, r7
 80211a2:	2a0f      	cmp	r2, #15
 80211a4:	f896 a000 	ldrb.w	sl, [r6]
 80211a8:	fa5f fc8c 	uxtb.w	ip, ip
 80211ac:	f890 b000 	ldrb.w	fp, [r0]
 80211b0:	f895 9000 	ldrb.w	r9, [r5]
 80211b4:	7819      	ldrb	r1, [r3, #0]
 80211b6:	d801      	bhi.n	80211bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 80211b8:	2c0f      	cmp	r4, #15
 80211ba:	d914      	bls.n	80211e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80211bc:	4b40      	ldr	r3, [pc, #256]	; (80212c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80211be:	f240 11a5 	movw	r1, #421	; 0x1a5
 80211c2:	4a40      	ldr	r2, [pc, #256]	; (80212c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80211c4:	4840      	ldr	r0, [pc, #256]	; (80212c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80211c6:	f006 faa5 	bl	8027714 <__assert_func>
 80211ca:	ae05      	add	r6, sp, #20
 80211cc:	e7c0      	b.n	8021150 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 80211ce:	a805      	add	r0, sp, #20
 80211d0:	4606      	mov	r6, r0
 80211d2:	e7c9      	b.n	8021168 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80211d4:	a805      	add	r0, sp, #20
 80211d6:	e7c7      	b.n	8021168 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80211d8:	ad05      	add	r5, sp, #20
 80211da:	e7d4      	b.n	8021186 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 80211dc:	ab05      	add	r3, sp, #20
 80211de:	461d      	mov	r5, r3
 80211e0:	e7dd      	b.n	802119e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80211e2:	ab05      	add	r3, sp, #20
 80211e4:	e7db      	b.n	802119e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80211e6:	b292      	uxth	r2, r2
 80211e8:	b2a4      	uxth	r4, r4
 80211ea:	fa1f fc8c 	uxth.w	ip, ip
 80211ee:	fb02 f804 	mul.w	r8, r2, r4
 80211f2:	0112      	lsls	r2, r2, #4
 80211f4:	b2bf      	uxth	r7, r7
 80211f6:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80211fa:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80211fe:	eba2 0208 	sub.w	r2, r2, r8
 8021202:	b2a4      	uxth	r4, r4
 8021204:	b292      	uxth	r2, r2
 8021206:	ebae 0e04 	sub.w	lr, lr, r4
 802120a:	fb02 fb0b 	mul.w	fp, r2, fp
 802120e:	fa1f fe8e 	uxth.w	lr, lr
 8021212:	fb0e ba0a 	mla	sl, lr, sl, fp
 8021216:	fb04 aa09 	mla	sl, r4, r9, sl
 802121a:	fb08 aa01 	mla	sl, r8, r1, sl
 802121e:	9903      	ldr	r1, [sp, #12]
 8021220:	fb11 f90c 	smulbb	r9, r1, ip
 8021224:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8021228:	9900      	ldr	r1, [sp, #0]
 802122a:	fb0a 9a07 	mla	sl, sl, r7, r9
 802122e:	fa1f fa8a 	uxth.w	sl, sl
 8021232:	f10a 0901 	add.w	r9, sl, #1
 8021236:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 802123a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802123e:	f881 a000 	strb.w	sl, [r1]
 8021242:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021246:	f896 9001 	ldrb.w	r9, [r6, #1]
 802124a:	fb02 fa0a 	mul.w	sl, r2, sl
 802124e:	9902      	ldr	r1, [sp, #8]
 8021250:	fb0e aa09 	mla	sl, lr, r9, sl
 8021254:	f895 9001 	ldrb.w	r9, [r5, #1]
 8021258:	fb04 aa09 	mla	sl, r4, r9, sl
 802125c:	f893 9001 	ldrb.w	r9, [r3, #1]
 8021260:	fb08 a909 	mla	r9, r8, r9, sl
 8021264:	fb11 fa0c 	smulbb	sl, r1, ip
 8021268:	9900      	ldr	r1, [sp, #0]
 802126a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802126e:	fb09 a907 	mla	r9, r9, r7, sl
 8021272:	fa1f f989 	uxth.w	r9, r9
 8021276:	f109 0a01 	add.w	sl, r9, #1
 802127a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 802127e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021282:	f881 9001 	strb.w	r9, [r1, #1]
 8021286:	7880      	ldrb	r0, [r0, #2]
 8021288:	78b6      	ldrb	r6, [r6, #2]
 802128a:	4342      	muls	r2, r0
 802128c:	78a8      	ldrb	r0, [r5, #2]
 802128e:	789b      	ldrb	r3, [r3, #2]
 8021290:	fb0e 2206 	mla	r2, lr, r6, r2
 8021294:	fb04 2400 	mla	r4, r4, r0, r2
 8021298:	fb08 4803 	mla	r8, r8, r3, r4
 802129c:	9b01      	ldr	r3, [sp, #4]
 802129e:	fb13 fc0c 	smulbb	ip, r3, ip
 80212a2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80212a6:	fb08 c707 	mla	r7, r8, r7, ip
 80212aa:	b2bf      	uxth	r7, r7
 80212ac:	f107 0c01 	add.w	ip, r7, #1
 80212b0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80212b4:	123f      	asrs	r7, r7, #8
 80212b6:	708f      	strb	r7, [r1, #2]
 80212b8:	b007      	add	sp, #28
 80212ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212be:	bf00      	nop
 80212c0:	0802ce3d 	.word	0x0802ce3d
 80212c4:	0802d332 	.word	0x0802d332
 80212c8:	0802cf06 	.word	0x0802cf06

080212cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80212cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212d0:	ed2d 8b08 	vpush	{d8-d11}
 80212d4:	b095      	sub	sp, #84	; 0x54
 80212d6:	eeb0 aa40 	vmov.f32	s20, s0
 80212da:	eef0 9a60 	vmov.f32	s19, s1
 80212de:	930a      	str	r3, [sp, #40]	; 0x28
 80212e0:	eeb0 9a41 	vmov.f32	s18, s2
 80212e4:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80212e8:	eeb0 8a62 	vmov.f32	s16, s5
 80212ec:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80212ee:	eef0 8a43 	vmov.f32	s17, s6
 80212f2:	930c      	str	r3, [sp, #48]	; 0x30
 80212f4:	eef0 ba44 	vmov.f32	s23, s8
 80212f8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80212fc:	eeb0 ba64 	vmov.f32	s22, s9
 8021300:	9013      	str	r0, [sp, #76]	; 0x4c
 8021302:	eef0 aa45 	vmov.f32	s21, s10
 8021306:	9310      	str	r3, [sp, #64]	; 0x40
 8021308:	6860      	ldr	r0, [r4, #4]
 802130a:	910f      	str	r1, [sp, #60]	; 0x3c
 802130c:	9212      	str	r2, [sp, #72]	; 0x48
 802130e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021310:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8021314:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021318:	fb00 1303 	mla	r3, r0, r3, r1
 802131c:	6821      	ldr	r1, [r4, #0]
 802131e:	6854      	ldr	r4, [r2, #4]
 8021320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021324:	18cb      	adds	r3, r1, r3
 8021326:	930b      	str	r3, [sp, #44]	; 0x2c
 8021328:	6813      	ldr	r3, [r2, #0]
 802132a:	930e      	str	r3, [sp, #56]	; 0x38
 802132c:	1d23      	adds	r3, r4, #4
 802132e:	9309      	str	r3, [sp, #36]	; 0x24
 8021330:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021332:	43db      	mvns	r3, r3
 8021334:	b2db      	uxtb	r3, r3
 8021336:	930d      	str	r3, [sp, #52]	; 0x34
 8021338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802133a:	2b00      	cmp	r3, #0
 802133c:	dc03      	bgt.n	8021346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802133e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021340:	2b00      	cmp	r3, #0
 8021342:	f340 823c 	ble.w	80217be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8021346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021348:	2b00      	cmp	r3, #0
 802134a:	f340 8115 	ble.w	8021578 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 802134e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021350:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021352:	1412      	asrs	r2, r2, #16
 8021354:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021358:	d431      	bmi.n	80213be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802135a:	1c51      	adds	r1, r2, #1
 802135c:	428d      	cmp	r5, r1
 802135e:	dd31      	ble.n	80213c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021360:	2b00      	cmp	r3, #0
 8021362:	db2f      	blt.n	80213c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021364:	1c59      	adds	r1, r3, #1
 8021366:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021368:	4288      	cmp	r0, r1
 802136a:	dd2b      	ble.n	80213c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802136c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802136e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021370:	3b01      	subs	r3, #1
 8021372:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8021374:	fb02 1203 	mla	r2, r2, r3, r1
 8021378:	1412      	asrs	r2, r2, #16
 802137a:	d42d      	bmi.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802137c:	3201      	adds	r2, #1
 802137e:	4295      	cmp	r5, r2
 8021380:	dd2a      	ble.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8021382:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021384:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021386:	fb02 1303 	mla	r3, r2, r3, r1
 802138a:	141b      	asrs	r3, r3, #16
 802138c:	d424      	bmi.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802138e:	3301      	adds	r3, #1
 8021390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021392:	429a      	cmp	r2, r3
 8021394:	dd20      	ble.n	80213d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8021396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021398:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 802139c:	f103 0c03 	add.w	ip, r3, #3
 80213a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80213a2:	9311      	str	r3, [sp, #68]	; 0x44
 80213a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	f300 814f 	bgt.w	802164a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 80213ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80213ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80213b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80213b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213b8:	441a      	add	r2, r3
 80213ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80213bc:	e0de      	b.n	802157c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80213be:	1c51      	adds	r1, r2, #1
 80213c0:	f040 80cb 	bne.w	802155a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80213c4:	42aa      	cmp	r2, r5
 80213c6:	f280 80c8 	bge.w	802155a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80213ca:	1c5f      	adds	r7, r3, #1
 80213cc:	f2c0 80c5 	blt.w	802155a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80213d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80213d2:	4293      	cmp	r3, r2
 80213d4:	f280 80c1 	bge.w	802155a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80213d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80213da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80213dc:	9311      	str	r3, [sp, #68]	; 0x44
 80213de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	dde3      	ble.n	80213ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80213e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213e6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80213e8:	141a      	asrs	r2, r3, #16
 80213ea:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80213ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80213ee:	1400      	asrs	r0, r0, #16
 80213f0:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80213f4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80213f8:	f100 810e 	bmi.w	8021618 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80213fc:	1c46      	adds	r6, r0, #1
 80213fe:	42b5      	cmp	r5, r6
 8021400:	f340 810c 	ble.w	802161c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8021404:	2a00      	cmp	r2, #0
 8021406:	f2c0 8109 	blt.w	802161c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 802140a:	1c56      	adds	r6, r2, #1
 802140c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802140e:	42b4      	cmp	r4, r6
 8021410:	f340 8104 	ble.w	802161c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8021414:	fb02 0005 	mla	r0, r2, r5, r0
 8021418:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802141a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802141c:	f814 e000 	ldrb.w	lr, [r4, r0]
 8021420:	4402      	add	r2, r0
 8021422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021424:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021428:	eb00 080e 	add.w	r8, r0, lr
 802142c:	2b00      	cmp	r3, #0
 802142e:	f000 80e4 	beq.w	80215fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 8021432:	f892 c001 	ldrb.w	ip, [r2, #1]
 8021436:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802143a:	4484      	add	ip, r0
 802143c:	2900      	cmp	r1, #0
 802143e:	f000 80e5 	beq.w	802160c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8021442:	1950      	adds	r0, r2, r5
 8021444:	5d52      	ldrb	r2, [r2, r5]
 8021446:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021448:	7840      	ldrb	r0, [r0, #1]
 802144a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802144e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021452:	4422      	add	r2, r4
 8021454:	4420      	add	r0, r4
 8021456:	b29b      	uxth	r3, r3
 8021458:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802145a:	b289      	uxth	r1, r1
 802145c:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8021460:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8021464:	fb03 fa01 	mul.w	sl, r3, r1
 8021468:	011b      	lsls	r3, r3, #4
 802146a:	f89c e000 	ldrb.w	lr, [ip]
 802146e:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8021472:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8021476:	eba3 030a 	sub.w	r3, r3, sl
 802147a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802147c:	b289      	uxth	r1, r1
 802147e:	b29b      	uxth	r3, r3
 8021480:	eba9 0901 	sub.w	r9, r9, r1
 8021484:	fb03 fe0e 	mul.w	lr, r3, lr
 8021488:	fa1f f989 	uxth.w	r9, r9
 802148c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021490:	f892 b000 	ldrb.w	fp, [r2]
 8021494:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021498:	f890 b000 	ldrb.w	fp, [r0]
 802149c:	fb0a ee0b 	mla	lr, sl, fp, lr
 80214a0:	f897 b000 	ldrb.w	fp, [r7]
 80214a4:	fb1b fb04 	smulbb	fp, fp, r4
 80214a8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80214ac:	fb0e be06 	mla	lr, lr, r6, fp
 80214b0:	fa1f fe8e 	uxth.w	lr, lr
 80214b4:	f10e 0b01 	add.w	fp, lr, #1
 80214b8:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 80214bc:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80214c0:	f887 b000 	strb.w	fp, [r7]
 80214c4:	f89c e001 	ldrb.w	lr, [ip, #1]
 80214c8:	f898 b001 	ldrb.w	fp, [r8, #1]
 80214cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80214d0:	fb09 ee0b 	mla	lr, r9, fp, lr
 80214d4:	f892 b001 	ldrb.w	fp, [r2, #1]
 80214d8:	fb01 ee0b 	mla	lr, r1, fp, lr
 80214dc:	f890 b001 	ldrb.w	fp, [r0, #1]
 80214e0:	fb0a ee0b 	mla	lr, sl, fp, lr
 80214e4:	f897 b001 	ldrb.w	fp, [r7, #1]
 80214e8:	fb1b fb04 	smulbb	fp, fp, r4
 80214ec:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80214f0:	fb0e be06 	mla	lr, lr, r6, fp
 80214f4:	fa1f fe8e 	uxth.w	lr, lr
 80214f8:	f10e 0b01 	add.w	fp, lr, #1
 80214fc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021500:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021504:	f887 e001 	strb.w	lr, [r7, #1]
 8021508:	f89c c002 	ldrb.w	ip, [ip, #2]
 802150c:	f898 e002 	ldrb.w	lr, [r8, #2]
 8021510:	fb03 f30c 	mul.w	r3, r3, ip
 8021514:	fb09 330e 	mla	r3, r9, lr, r3
 8021518:	f892 e002 	ldrb.w	lr, [r2, #2]
 802151c:	7882      	ldrb	r2, [r0, #2]
 802151e:	fb01 310e 	mla	r1, r1, lr, r3
 8021522:	fb0a 1a02 	mla	sl, sl, r2, r1
 8021526:	78b9      	ldrb	r1, [r7, #2]
 8021528:	fb11 f104 	smulbb	r1, r1, r4
 802152c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8021530:	fb0a 1606 	mla	r6, sl, r6, r1
 8021534:	b2b6      	uxth	r6, r6
 8021536:	1c73      	adds	r3, r6, #1
 8021538:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802153c:	1236      	asrs	r6, r6, #8
 802153e:	70be      	strb	r6, [r7, #2]
 8021540:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021542:	3703      	adds	r7, #3
 8021544:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021546:	4413      	add	r3, r2
 8021548:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802154a:	9327      	str	r3, [sp, #156]	; 0x9c
 802154c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802154e:	4413      	add	r3, r2
 8021550:	9328      	str	r3, [sp, #160]	; 0xa0
 8021552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021554:	3b01      	subs	r3, #1
 8021556:	9311      	str	r3, [sp, #68]	; 0x44
 8021558:	e741      	b.n	80213de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 802155a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802155c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802155e:	4413      	add	r3, r2
 8021560:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021562:	9327      	str	r3, [sp, #156]	; 0x9c
 8021564:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021566:	4413      	add	r3, r2
 8021568:	9328      	str	r3, [sp, #160]	; 0xa0
 802156a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802156c:	3b01      	subs	r3, #1
 802156e:	930a      	str	r3, [sp, #40]	; 0x28
 8021570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021572:	3303      	adds	r3, #3
 8021574:	930b      	str	r3, [sp, #44]	; 0x2c
 8021576:	e6e6      	b.n	8021346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021578:	f47f aef8 	bne.w	802136c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 802157c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802157e:	2b00      	cmp	r3, #0
 8021580:	f340 811d 	ble.w	80217be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8021584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802158a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802158e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021592:	eef0 6a48 	vmov.f32	s13, s16
 8021596:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802159a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802159e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215a2:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 80215a6:	eef0 6a68 	vmov.f32	s13, s17
 80215aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215ae:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 80215b2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80215b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80215ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 80215be:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80215c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80215c6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80215ca:	ee18 2a10 	vmov	r2, s16
 80215ce:	eeb0 8a47 	vmov.f32	s16, s14
 80215d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80215d6:	ee18 2a90 	vmov	r2, s17
 80215da:	9329      	str	r3, [sp, #164]	; 0xa4
 80215dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80215de:	eef0 8a67 	vmov.f32	s17, s15
 80215e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80215e6:	932a      	str	r3, [sp, #168]	; 0xa8
 80215e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80215ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80215ec:	3b01      	subs	r3, #1
 80215ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80215f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80215f2:	bf08      	it	eq
 80215f4:	4613      	moveq	r3, r2
 80215f6:	930a      	str	r3, [sp, #40]	; 0x28
 80215f8:	e69e      	b.n	8021338 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80215fa:	b151      	cbz	r1, 8021612 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80215fc:	5d52      	ldrb	r2, [r2, r5]
 80215fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021600:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021604:	4402      	add	r2, r0
 8021606:	4640      	mov	r0, r8
 8021608:	46c4      	mov	ip, r8
 802160a:	e724      	b.n	8021456 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 802160c:	4640      	mov	r0, r8
 802160e:	4642      	mov	r2, r8
 8021610:	e721      	b.n	8021456 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8021612:	4640      	mov	r0, r8
 8021614:	4642      	mov	r2, r8
 8021616:	e7f7      	b.n	8021608 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8021618:	1c46      	adds	r6, r0, #1
 802161a:	d191      	bne.n	8021540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802161c:	4285      	cmp	r5, r0
 802161e:	dd8f      	ble.n	8021540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021620:	1c54      	adds	r4, r2, #1
 8021622:	db8d      	blt.n	8021540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021624:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021626:	4294      	cmp	r4, r2
 8021628:	dd8a      	ble.n	8021540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802162a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802162c:	9002      	str	r0, [sp, #8]
 802162e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021630:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8021634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021638:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802163c:	e9cd 5300 	strd	r5, r3, [sp]
 8021640:	4639      	mov	r1, r7
 8021642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021644:	f7ff fd52 	bl	80210ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8021648:	e77a      	b.n	8021540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802164a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802164c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802164e:	1410      	asrs	r0, r2, #16
 8021650:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021654:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021656:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021658:	1412      	asrs	r2, r2, #16
 802165a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802165e:	fb05 2000 	mla	r0, r5, r0, r2
 8021662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021664:	f814 8000 	ldrb.w	r8, [r4, r0]
 8021668:	4402      	add	r2, r0
 802166a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802166c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021670:	eb00 0708 	add.w	r7, r0, r8
 8021674:	2b00      	cmp	r3, #0
 8021676:	f000 8093 	beq.w	80217a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802167a:	7856      	ldrb	r6, [r2, #1]
 802167c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021680:	4406      	add	r6, r0
 8021682:	2900      	cmp	r1, #0
 8021684:	f000 8095 	beq.w	80217b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8021688:	1950      	adds	r0, r2, r5
 802168a:	5d52      	ldrb	r2, [r2, r5]
 802168c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802168e:	7840      	ldrb	r0, [r0, #1]
 8021690:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021694:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021698:	4422      	add	r2, r4
 802169a:	4420      	add	r0, r4
 802169c:	b29b      	uxth	r3, r3
 802169e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80216a0:	b289      	uxth	r1, r1
 80216a2:	f10c 0c03 	add.w	ip, ip, #3
 80216a6:	f814 b008 	ldrb.w	fp, [r4, r8]
 80216aa:	fb03 f901 	mul.w	r9, r3, r1
 80216ae:	011b      	lsls	r3, r3, #4
 80216b0:	f896 8000 	ldrb.w	r8, [r6]
 80216b4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80216b8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80216bc:	eba3 0309 	sub.w	r3, r3, r9
 80216c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80216c2:	b289      	uxth	r1, r1
 80216c4:	b29b      	uxth	r3, r3
 80216c6:	ebae 0e01 	sub.w	lr, lr, r1
 80216ca:	fb03 f808 	mul.w	r8, r3, r8
 80216ce:	fa1f fe8e 	uxth.w	lr, lr
 80216d2:	fb0e 880b 	mla	r8, lr, fp, r8
 80216d6:	f892 b000 	ldrb.w	fp, [r2]
 80216da:	fb01 880b 	mla	r8, r1, fp, r8
 80216de:	f890 b000 	ldrb.w	fp, [r0]
 80216e2:	fb09 880b 	mla	r8, r9, fp, r8
 80216e6:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 80216ea:	fb1b fb04 	smulbb	fp, fp, r4
 80216ee:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80216f2:	fb08 b80a 	mla	r8, r8, sl, fp
 80216f6:	fa1f f888 	uxth.w	r8, r8
 80216fa:	f108 0b01 	add.w	fp, r8, #1
 80216fe:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021702:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021706:	f80c 8c06 	strb.w	r8, [ip, #-6]
 802170a:	f896 8001 	ldrb.w	r8, [r6, #1]
 802170e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021712:	fb03 f808 	mul.w	r8, r3, r8
 8021716:	fb0e 880b 	mla	r8, lr, fp, r8
 802171a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802171e:	fb01 880b 	mla	r8, r1, fp, r8
 8021722:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021726:	fb09 880b 	mla	r8, r9, fp, r8
 802172a:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 802172e:	fb1b fb04 	smulbb	fp, fp, r4
 8021732:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8021736:	fb08 b80a 	mla	r8, r8, sl, fp
 802173a:	fa1f f888 	uxth.w	r8, r8
 802173e:	f108 0b01 	add.w	fp, r8, #1
 8021742:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021746:	ea4f 2828 	mov.w	r8, r8, asr #8
 802174a:	f80c 8c05 	strb.w	r8, [ip, #-5]
 802174e:	78b6      	ldrb	r6, [r6, #2]
 8021750:	78bf      	ldrb	r7, [r7, #2]
 8021752:	4373      	muls	r3, r6
 8021754:	7896      	ldrb	r6, [r2, #2]
 8021756:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021758:	fb0e 3307 	mla	r3, lr, r7, r3
 802175c:	fb01 3306 	mla	r3, r1, r6, r3
 8021760:	7886      	ldrb	r6, [r0, #2]
 8021762:	fb09 3906 	mla	r9, r9, r6, r3
 8021766:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 802176a:	fb13 f304 	smulbb	r3, r3, r4
 802176e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021772:	fb09 390a 	mla	r9, r9, sl, r3
 8021776:	fa1f f989 	uxth.w	r9, r9
 802177a:	f109 0301 	add.w	r3, r9, #1
 802177e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021782:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021784:	4413      	add	r3, r2
 8021786:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021788:	ea4f 2929 	mov.w	r9, r9, asr #8
 802178c:	9327      	str	r3, [sp, #156]	; 0x9c
 802178e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021790:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8021794:	4413      	add	r3, r2
 8021796:	9328      	str	r3, [sp, #160]	; 0xa0
 8021798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802179a:	3b01      	subs	r3, #1
 802179c:	9311      	str	r3, [sp, #68]	; 0x44
 802179e:	e601      	b.n	80213a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80217a0:	b151      	cbz	r1, 80217b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 80217a2:	5d52      	ldrb	r2, [r2, r5]
 80217a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80217a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80217aa:	4402      	add	r2, r0
 80217ac:	4638      	mov	r0, r7
 80217ae:	463e      	mov	r6, r7
 80217b0:	e774      	b.n	802169c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80217b2:	4638      	mov	r0, r7
 80217b4:	463a      	mov	r2, r7
 80217b6:	e771      	b.n	802169c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80217b8:	4638      	mov	r0, r7
 80217ba:	463a      	mov	r2, r7
 80217bc:	e7f7      	b.n	80217ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80217be:	b015      	add	sp, #84	; 0x54
 80217c0:	ecbd 8b08 	vpop	{d8-d11}
 80217c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80217c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217cc:	780d      	ldrb	r5, [r1, #0]
 80217ce:	f891 9002 	ldrb.w	r9, [r1, #2]
 80217d2:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 80217d6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80217da:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80217de:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80217e2:	f891 9001 	ldrb.w	r9, [r1, #1]
 80217e6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80217ea:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80217ee:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80217f2:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80217f6:	9501      	str	r5, [sp, #4]
 80217f8:	fb06 470c 	mla	r7, r6, ip, r4
 80217fc:	2e00      	cmp	r6, #0
 80217fe:	eb02 0e07 	add.w	lr, r2, r7
 8021802:	db46      	blt.n	8021892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8021804:	45b0      	cmp	r8, r6
 8021806:	dd44      	ble.n	8021892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8021808:	2c00      	cmp	r4, #0
 802180a:	db40      	blt.n	802188e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 802180c:	45a4      	cmp	ip, r4
 802180e:	dd3e      	ble.n	802188e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8021810:	5dd7      	ldrb	r7, [r2, r7]
 8021812:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021816:	441f      	add	r7, r3
 8021818:	1c62      	adds	r2, r4, #1
 802181a:	d43d      	bmi.n	8021898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 802181c:	4594      	cmp	ip, r2
 802181e:	dd3b      	ble.n	8021898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8021820:	f1ba 0f00 	cmp.w	sl, #0
 8021824:	d038      	beq.n	8021898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8021826:	f89e 5001 	ldrb.w	r5, [lr, #1]
 802182a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802182e:	441d      	add	r5, r3
 8021830:	3601      	adds	r6, #1
 8021832:	d435      	bmi.n	80218a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8021834:	45b0      	cmp	r8, r6
 8021836:	dd33      	ble.n	80218a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8021838:	b390      	cbz	r0, 80218a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 802183a:	2c00      	cmp	r4, #0
 802183c:	db2e      	blt.n	802189c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 802183e:	45a4      	cmp	ip, r4
 8021840:	dd2c      	ble.n	802189c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8021842:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8021846:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802184a:	441e      	add	r6, r3
 802184c:	1c62      	adds	r2, r4, #1
 802184e:	d42a      	bmi.n	80218a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8021850:	4594      	cmp	ip, r2
 8021852:	dd28      	ble.n	80218a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8021854:	f1ba 0f00 	cmp.w	sl, #0
 8021858:	d025      	beq.n	80218a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 802185a:	44f4      	add	ip, lr
 802185c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8021860:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021864:	4413      	add	r3, r2
 8021866:	f1ba 0f0f 	cmp.w	sl, #15
 802186a:	f897 8000 	ldrb.w	r8, [r7]
 802186e:	f895 9000 	ldrb.w	r9, [r5]
 8021872:	f896 e000 	ldrb.w	lr, [r6]
 8021876:	f893 c000 	ldrb.w	ip, [r3]
 802187a:	d801      	bhi.n	8021880 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 802187c:	280f      	cmp	r0, #15
 802187e:	d914      	bls.n	80218aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8021880:	4b29      	ldr	r3, [pc, #164]	; (8021928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8021882:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021886:	4a29      	ldr	r2, [pc, #164]	; (802192c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8021888:	4829      	ldr	r0, [pc, #164]	; (8021930 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 802188a:	f005 ff43 	bl	8027714 <__assert_func>
 802188e:	af01      	add	r7, sp, #4
 8021890:	e7c2      	b.n	8021818 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8021892:	ad01      	add	r5, sp, #4
 8021894:	462f      	mov	r7, r5
 8021896:	e7cb      	b.n	8021830 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8021898:	ad01      	add	r5, sp, #4
 802189a:	e7c9      	b.n	8021830 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802189c:	ae01      	add	r6, sp, #4
 802189e:	e7d5      	b.n	802184c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 80218a0:	ab01      	add	r3, sp, #4
 80218a2:	461e      	mov	r6, r3
 80218a4:	e7df      	b.n	8021866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80218a6:	ab01      	add	r3, sp, #4
 80218a8:	e7dd      	b.n	8021866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80218aa:	fa1f f48a 	uxth.w	r4, sl
 80218ae:	b280      	uxth	r0, r0
 80218b0:	fb04 fa00 	mul.w	sl, r4, r0
 80218b4:	0124      	lsls	r4, r4, #4
 80218b6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80218ba:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80218be:	b282      	uxth	r2, r0
 80218c0:	eba4 000a 	sub.w	r0, r4, sl
 80218c4:	ebab 0b02 	sub.w	fp, fp, r2
 80218c8:	b280      	uxth	r0, r0
 80218ca:	fa1f fb8b 	uxth.w	fp, fp
 80218ce:	fb00 f909 	mul.w	r9, r0, r9
 80218d2:	fb0b 9808 	mla	r8, fp, r8, r9
 80218d6:	fb02 8e0e 	mla	lr, r2, lr, r8
 80218da:	fb0a ec0c 	mla	ip, sl, ip, lr
 80218de:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80218e2:	f881 c000 	strb.w	ip, [r1]
 80218e6:	786c      	ldrb	r4, [r5, #1]
 80218e8:	f897 c001 	ldrb.w	ip, [r7, #1]
 80218ec:	4344      	muls	r4, r0
 80218ee:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80218f2:	7874      	ldrb	r4, [r6, #1]
 80218f4:	fb02 cc04 	mla	ip, r2, r4, ip
 80218f8:	785c      	ldrb	r4, [r3, #1]
 80218fa:	fb0a c404 	mla	r4, sl, r4, ip
 80218fe:	1224      	asrs	r4, r4, #8
 8021900:	704c      	strb	r4, [r1, #1]
 8021902:	78ad      	ldrb	r5, [r5, #2]
 8021904:	78bc      	ldrb	r4, [r7, #2]
 8021906:	4368      	muls	r0, r5
 8021908:	fb0b 0b04 	mla	fp, fp, r4, r0
 802190c:	78b0      	ldrb	r0, [r6, #2]
 802190e:	fb02 b000 	mla	r0, r2, r0, fp
 8021912:	789a      	ldrb	r2, [r3, #2]
 8021914:	fb0a 0a02 	mla	sl, sl, r2, r0
 8021918:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802191c:	f881 a002 	strb.w	sl, [r1, #2]
 8021920:	b003      	add	sp, #12
 8021922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021926:	bf00      	nop
 8021928:	0802ce3d 	.word	0x0802ce3d
 802192c:	0802d332 	.word	0x0802d332
 8021930:	0802cf06 	.word	0x0802cf06

08021934 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021938:	ed2d 8b0a 	vpush	{d8-d12}
 802193c:	b08f      	sub	sp, #60	; 0x3c
 802193e:	eeb0 aa40 	vmov.f32	s20, s0
 8021942:	eef0 9a60 	vmov.f32	s19, s1
 8021946:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8021948:	eeb0 9a41 	vmov.f32	s18, s2
 802194c:	9307      	str	r3, [sp, #28]
 802194e:	eeb0 8a62 	vmov.f32	s16, s5
 8021952:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8021956:	eef0 8a43 	vmov.f32	s17, s6
 802195a:	900d      	str	r0, [sp, #52]	; 0x34
 802195c:	eeb0 ca44 	vmov.f32	s24, s8
 8021960:	6860      	ldr	r0, [r4, #4]
 8021962:	eef0 ba64 	vmov.f32	s23, s9
 8021966:	9309      	str	r3, [sp, #36]	; 0x24
 8021968:	eeb0 ba45 	vmov.f32	s22, s10
 802196c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8021970:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8021974:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8021978:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802197c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802197e:	fb00 1303 	mla	r3, r0, r3, r1
 8021982:	6821      	ldr	r1, [r4, #0]
 8021984:	6854      	ldr	r4, [r2, #4]
 8021986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802198a:	3404      	adds	r4, #4
 802198c:	18cb      	adds	r3, r1, r3
 802198e:	9308      	str	r3, [sp, #32]
 8021990:	6813      	ldr	r3, [r2, #0]
 8021992:	930a      	str	r3, [sp, #40]	; 0x28
 8021994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021996:	2b00      	cmp	r3, #0
 8021998:	dc03      	bgt.n	80219a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802199a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802199c:	2b00      	cmp	r3, #0
 802199e:	f340 81d2 	ble.w	8021d46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80219a2:	9b07      	ldr	r3, [sp, #28]
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	f340 80e3 	ble.w	8021b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80219aa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80219ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80219ae:	1412      	asrs	r2, r2, #16
 80219b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80219b4:	d42f      	bmi.n	8021a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80219b6:	1c51      	adds	r1, r2, #1
 80219b8:	428d      	cmp	r5, r1
 80219ba:	dd2f      	ble.n	8021a1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80219bc:	2b00      	cmp	r3, #0
 80219be:	db2d      	blt.n	8021a1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80219c0:	1c59      	adds	r1, r3, #1
 80219c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80219c4:	4288      	cmp	r0, r1
 80219c6:	dd29      	ble.n	8021a1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80219c8:	9b07      	ldr	r3, [sp, #28]
 80219ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80219cc:	3b01      	subs	r3, #1
 80219ce:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80219d0:	fb02 1203 	mla	r2, r2, r3, r1
 80219d4:	1412      	asrs	r2, r2, #16
 80219d6:	d42b      	bmi.n	8021a30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80219d8:	3201      	adds	r2, #1
 80219da:	4295      	cmp	r5, r2
 80219dc:	dd28      	ble.n	8021a30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80219de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80219e0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80219e2:	fb02 1303 	mla	r3, r2, r3, r1
 80219e6:	141b      	asrs	r3, r3, #16
 80219e8:	d422      	bmi.n	8021a30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80219ea:	3301      	adds	r3, #1
 80219ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219ee:	429a      	cmp	r2, r3
 80219f0:	dd1e      	ble.n	8021a30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80219f2:	9b08      	ldr	r3, [sp, #32]
 80219f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80219f8:	f103 0803 	add.w	r8, r3, #3
 80219fc:	f1ba 0f00 	cmp.w	sl, #0
 8021a00:	f300 8119 	bgt.w	8021c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8021a04:	9b07      	ldr	r3, [sp, #28]
 8021a06:	9a08      	ldr	r2, [sp, #32]
 8021a08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021a0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021a10:	441a      	add	r2, r3
 8021a12:	9208      	str	r2, [sp, #32]
 8021a14:	e0ae      	b.n	8021b74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8021a16:	1c51      	adds	r1, r2, #1
 8021a18:	f040 809b 	bne.w	8021b52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8021a1c:	42aa      	cmp	r2, r5
 8021a1e:	f280 8098 	bge.w	8021b52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8021a22:	1c5a      	adds	r2, r3, #1
 8021a24:	f2c0 8095 	blt.w	8021b52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8021a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a2a:	4293      	cmp	r3, r2
 8021a2c:	f280 8091 	bge.w	8021b52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8021a30:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8021a34:	f1bb 0f00 	cmp.w	fp, #0
 8021a38:	dde4      	ble.n	8021a04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8021a3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a3c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021a3e:	141a      	asrs	r2, r3, #16
 8021a40:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021a42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021a44:	1400      	asrs	r0, r0, #16
 8021a46:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8021a4a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021a4e:	f100 80dc 	bmi.w	8021c0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8021a52:	1c47      	adds	r7, r0, #1
 8021a54:	42bd      	cmp	r5, r7
 8021a56:	f340 80da 	ble.w	8021c0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8021a5a:	2a00      	cmp	r2, #0
 8021a5c:	f2c0 80d7 	blt.w	8021c0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8021a60:	f102 0c01 	add.w	ip, r2, #1
 8021a64:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021a66:	4567      	cmp	r7, ip
 8021a68:	f340 80d1 	ble.w	8021c0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8021a6c:	fb02 0005 	mla	r0, r2, r5, r0
 8021a70:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021a74:	f817 8000 	ldrb.w	r8, [r7, r0]
 8021a78:	4402      	add	r2, r0
 8021a7a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021a7e:	eb04 0c08 	add.w	ip, r4, r8
 8021a82:	2b00      	cmp	r3, #0
 8021a84:	f000 80b3 	beq.w	8021bee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8021a88:	7857      	ldrb	r7, [r2, #1]
 8021a8a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021a8e:	4427      	add	r7, r4
 8021a90:	2900      	cmp	r1, #0
 8021a92:	f000 80b4 	beq.w	8021bfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8021a96:	1950      	adds	r0, r2, r5
 8021a98:	5d52      	ldrb	r2, [r2, r5]
 8021a9a:	7840      	ldrb	r0, [r0, #1]
 8021a9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021aa0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021aa4:	4422      	add	r2, r4
 8021aa6:	4420      	add	r0, r4
 8021aa8:	b29b      	uxth	r3, r3
 8021aaa:	f814 a008 	ldrb.w	sl, [r4, r8]
 8021aae:	b289      	uxth	r1, r1
 8021ab0:	f897 8000 	ldrb.w	r8, [r7]
 8021ab4:	fb03 f901 	mul.w	r9, r3, r1
 8021ab8:	011b      	lsls	r3, r3, #4
 8021aba:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021abe:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021ac2:	eba3 0309 	sub.w	r3, r3, r9
 8021ac6:	b289      	uxth	r1, r1
 8021ac8:	b29b      	uxth	r3, r3
 8021aca:	ebae 0e01 	sub.w	lr, lr, r1
 8021ace:	fb03 f808 	mul.w	r8, r3, r8
 8021ad2:	fa1f fe8e 	uxth.w	lr, lr
 8021ad6:	fb0e 880a 	mla	r8, lr, sl, r8
 8021ada:	f892 a000 	ldrb.w	sl, [r2]
 8021ade:	fb01 880a 	mla	r8, r1, sl, r8
 8021ae2:	f890 a000 	ldrb.w	sl, [r0]
 8021ae6:	fb09 880a 	mla	r8, r9, sl, r8
 8021aea:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021aee:	f886 8000 	strb.w	r8, [r6]
 8021af2:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021af6:	f89c a001 	ldrb.w	sl, [ip, #1]
 8021afa:	fb03 f808 	mul.w	r8, r3, r8
 8021afe:	fb0e 880a 	mla	r8, lr, sl, r8
 8021b02:	f892 a001 	ldrb.w	sl, [r2, #1]
 8021b06:	fb01 880a 	mla	r8, r1, sl, r8
 8021b0a:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021b0e:	fb09 880a 	mla	r8, r9, sl, r8
 8021b12:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021b16:	f886 8001 	strb.w	r8, [r6, #1]
 8021b1a:	78bf      	ldrb	r7, [r7, #2]
 8021b1c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8021b20:	437b      	muls	r3, r7
 8021b22:	7892      	ldrb	r2, [r2, #2]
 8021b24:	fb0e 330c 	mla	r3, lr, ip, r3
 8021b28:	fb01 3102 	mla	r1, r1, r2, r3
 8021b2c:	7882      	ldrb	r2, [r0, #2]
 8021b2e:	fb09 1902 	mla	r9, r9, r2, r1
 8021b32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021b36:	f886 9002 	strb.w	r9, [r6, #2]
 8021b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021b3c:	3603      	adds	r6, #3
 8021b3e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021b40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021b44:	4413      	add	r3, r2
 8021b46:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021b48:	9323      	str	r3, [sp, #140]	; 0x8c
 8021b4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b4c:	4413      	add	r3, r2
 8021b4e:	9324      	str	r3, [sp, #144]	; 0x90
 8021b50:	e770      	b.n	8021a34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8021b52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021b54:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021b56:	4413      	add	r3, r2
 8021b58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021b5a:	9323      	str	r3, [sp, #140]	; 0x8c
 8021b5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b5e:	4413      	add	r3, r2
 8021b60:	9324      	str	r3, [sp, #144]	; 0x90
 8021b62:	9b07      	ldr	r3, [sp, #28]
 8021b64:	3b01      	subs	r3, #1
 8021b66:	9307      	str	r3, [sp, #28]
 8021b68:	9b08      	ldr	r3, [sp, #32]
 8021b6a:	3303      	adds	r3, #3
 8021b6c:	9308      	str	r3, [sp, #32]
 8021b6e:	e718      	b.n	80219a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021b70:	f47f af2a 	bne.w	80219c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8021b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	f340 80e5 	ble.w	8021d46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8021b7c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021b82:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021b86:	eef0 6a48 	vmov.f32	s13, s16
 8021b8a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021b8e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021b92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b96:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8021b9a:	eef0 6a68 	vmov.f32	s13, s17
 8021b9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ba2:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8021ba6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021baa:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021bae:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021bb2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021bb6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021bba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021bbe:	ee18 2a10 	vmov	r2, s16
 8021bc2:	eeb0 8a47 	vmov.f32	s16, s14
 8021bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bca:	ee18 2a90 	vmov	r2, s17
 8021bce:	9325      	str	r3, [sp, #148]	; 0x94
 8021bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021bd2:	eef0 8a67 	vmov.f32	s17, s15
 8021bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bda:	9326      	str	r3, [sp, #152]	; 0x98
 8021bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021be0:	3b01      	subs	r3, #1
 8021be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021be4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021be6:	bf08      	it	eq
 8021be8:	4613      	moveq	r3, r2
 8021bea:	9307      	str	r3, [sp, #28]
 8021bec:	e6d2      	b.n	8021994 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8021bee:	b149      	cbz	r1, 8021c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021bf0:	5d52      	ldrb	r2, [r2, r5]
 8021bf2:	4660      	mov	r0, ip
 8021bf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021bf8:	4422      	add	r2, r4
 8021bfa:	4667      	mov	r7, ip
 8021bfc:	e754      	b.n	8021aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8021bfe:	4660      	mov	r0, ip
 8021c00:	4662      	mov	r2, ip
 8021c02:	e751      	b.n	8021aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8021c04:	4660      	mov	r0, ip
 8021c06:	4662      	mov	r2, ip
 8021c08:	e7f7      	b.n	8021bfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8021c0a:	1c47      	adds	r7, r0, #1
 8021c0c:	d195      	bne.n	8021b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021c0e:	4285      	cmp	r5, r0
 8021c10:	dd93      	ble.n	8021b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021c12:	1c57      	adds	r7, r2, #1
 8021c14:	db91      	blt.n	8021b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021c16:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021c18:	4297      	cmp	r7, r2
 8021c1a:	dd8e      	ble.n	8021b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021c1c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8021c20:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8021c24:	e9cd 5700 	strd	r5, r7, [sp]
 8021c28:	4623      	mov	r3, r4
 8021c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c2c:	4631      	mov	r1, r6
 8021c2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021c30:	f7ff fdca 	bl	80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8021c34:	e781      	b.n	8021b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021c36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021c38:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021c3a:	1410      	asrs	r0, r2, #16
 8021c3c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021c40:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021c42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021c44:	1412      	asrs	r2, r2, #16
 8021c46:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021c4a:	fb05 2000 	mla	r0, r5, r0, r2
 8021c4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c50:	f816 e000 	ldrb.w	lr, [r6, r0]
 8021c54:	4402      	add	r2, r0
 8021c56:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021c5a:	eb04 070e 	add.w	r7, r4, lr
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	d063      	beq.n	8021d2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8021c62:	7856      	ldrb	r6, [r2, #1]
 8021c64:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021c68:	4426      	add	r6, r4
 8021c6a:	2900      	cmp	r1, #0
 8021c6c:	d065      	beq.n	8021d3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021c6e:	1950      	adds	r0, r2, r5
 8021c70:	5d52      	ldrb	r2, [r2, r5]
 8021c72:	7840      	ldrb	r0, [r0, #1]
 8021c74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c7c:	4422      	add	r2, r4
 8021c7e:	4420      	add	r0, r4
 8021c80:	b29b      	uxth	r3, r3
 8021c82:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8021c86:	b289      	uxth	r1, r1
 8021c88:	f896 e000 	ldrb.w	lr, [r6]
 8021c8c:	f108 0803 	add.w	r8, r8, #3
 8021c90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021c94:	fb03 f901 	mul.w	r9, r3, r1
 8021c98:	011b      	lsls	r3, r3, #4
 8021c9a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021c9e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8021ca2:	eba3 0309 	sub.w	r3, r3, r9
 8021ca6:	b289      	uxth	r1, r1
 8021ca8:	b29b      	uxth	r3, r3
 8021caa:	ebac 0c01 	sub.w	ip, ip, r1
 8021cae:	fb03 fe0e 	mul.w	lr, r3, lr
 8021cb2:	fa1f fc8c 	uxth.w	ip, ip
 8021cb6:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021cba:	f892 b000 	ldrb.w	fp, [r2]
 8021cbe:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021cc2:	f890 b000 	ldrb.w	fp, [r0]
 8021cc6:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021cca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021cce:	f808 ec06 	strb.w	lr, [r8, #-6]
 8021cd2:	f896 e001 	ldrb.w	lr, [r6, #1]
 8021cd6:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021cda:	fb03 fe0e 	mul.w	lr, r3, lr
 8021cde:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021ce2:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021ce6:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021cea:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021cee:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021cf2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021cf6:	f808 ec05 	strb.w	lr, [r8, #-5]
 8021cfa:	78b6      	ldrb	r6, [r6, #2]
 8021cfc:	78bf      	ldrb	r7, [r7, #2]
 8021cfe:	4373      	muls	r3, r6
 8021d00:	7896      	ldrb	r6, [r2, #2]
 8021d02:	7882      	ldrb	r2, [r0, #2]
 8021d04:	fb0c 3307 	mla	r3, ip, r7, r3
 8021d08:	fb01 3306 	mla	r3, r1, r6, r3
 8021d0c:	fb09 3902 	mla	r9, r9, r2, r3
 8021d10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021d12:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021d14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021d18:	4413      	add	r3, r2
 8021d1a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021d1c:	f808 9c04 	strb.w	r9, [r8, #-4]
 8021d20:	9323      	str	r3, [sp, #140]	; 0x8c
 8021d22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d24:	4413      	add	r3, r2
 8021d26:	9324      	str	r3, [sp, #144]	; 0x90
 8021d28:	e668      	b.n	80219fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021d2a:	b149      	cbz	r1, 8021d40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8021d2c:	5d52      	ldrb	r2, [r2, r5]
 8021d2e:	4638      	mov	r0, r7
 8021d30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021d34:	4422      	add	r2, r4
 8021d36:	463e      	mov	r6, r7
 8021d38:	e7a2      	b.n	8021c80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021d3a:	4638      	mov	r0, r7
 8021d3c:	463a      	mov	r2, r7
 8021d3e:	e79f      	b.n	8021c80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021d40:	4638      	mov	r0, r7
 8021d42:	463a      	mov	r2, r7
 8021d44:	e7f7      	b.n	8021d36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8021d46:	b00f      	add	sp, #60	; 0x3c
 8021d48:	ecbd 8b0a 	vpop	{d8-d12}
 8021d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021d50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8021d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d54:	b087      	sub	sp, #28
 8021d56:	7888      	ldrb	r0, [r1, #2]
 8021d58:	9002      	str	r0, [sp, #8]
 8021d5a:	7848      	ldrb	r0, [r1, #1]
 8021d5c:	9e02      	ldr	r6, [sp, #8]
 8021d5e:	9003      	str	r0, [sp, #12]
 8021d60:	7808      	ldrb	r0, [r1, #0]
 8021d62:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8021d66:	9004      	str	r0, [sp, #16]
 8021d68:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021d6c:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8021d70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8021d74:	9e03      	ldr	r6, [sp, #12]
 8021d76:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8021d7a:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8021d7e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8021d82:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8021d86:	fb04 7508 	mla	r5, r4, r8, r7
 8021d8a:	2c00      	cmp	r4, #0
 8021d8c:	eb02 0905 	add.w	r9, r2, r5
 8021d90:	db45      	blt.n	8021e1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8021d92:	45a2      	cmp	sl, r4
 8021d94:	dd43      	ble.n	8021e1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8021d96:	2f00      	cmp	r7, #0
 8021d98:	db3f      	blt.n	8021e1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8021d9a:	45b8      	cmp	r8, r7
 8021d9c:	dd3d      	ble.n	8021e1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8021d9e:	5d52      	ldrb	r2, [r2, r5]
 8021da0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021da4:	1c7a      	adds	r2, r7, #1
 8021da6:	d43d      	bmi.n	8021e24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8021da8:	4590      	cmp	r8, r2
 8021daa:	dd3b      	ble.n	8021e24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8021dac:	f1bc 0f00 	cmp.w	ip, #0
 8021db0:	d038      	beq.n	8021e24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8021db2:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021db6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8021dba:	3401      	adds	r4, #1
 8021dbc:	d436      	bmi.n	8021e2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8021dbe:	45a2      	cmp	sl, r4
 8021dc0:	dd34      	ble.n	8021e2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8021dc2:	f1be 0f00 	cmp.w	lr, #0
 8021dc6:	d031      	beq.n	8021e2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8021dc8:	2f00      	cmp	r7, #0
 8021dca:	db2d      	blt.n	8021e28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8021dcc:	45b8      	cmp	r8, r7
 8021dce:	dd2b      	ble.n	8021e28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8021dd0:	f819 2008 	ldrb.w	r2, [r9, r8]
 8021dd4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8021dd8:	3701      	adds	r7, #1
 8021dda:	d409      	bmi.n	8021df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021ddc:	45b8      	cmp	r8, r7
 8021dde:	dd07      	ble.n	8021df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021de0:	f1bc 0f00 	cmp.w	ip, #0
 8021de4:	d004      	beq.n	8021df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021de6:	44c8      	add	r8, r9
 8021de8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021dec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021df0:	f1bc 0f0f 	cmp.w	ip, #15
 8021df4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021df8:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8021dfc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021e00:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021e04:	d802      	bhi.n	8021e0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8021e06:	f1be 0f0f 	cmp.w	lr, #15
 8021e0a:	d911      	bls.n	8021e30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8021e0c:	4b77      	ldr	r3, [pc, #476]	; (8021fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8021e0e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021e12:	4a77      	ldr	r2, [pc, #476]	; (8021ff0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8021e14:	4877      	ldr	r0, [pc, #476]	; (8021ff4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8021e16:	f005 fc7d 	bl	8027714 <__assert_func>
 8021e1a:	4606      	mov	r6, r0
 8021e1c:	e7c2      	b.n	8021da4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8021e1e:	4605      	mov	r5, r0
 8021e20:	4606      	mov	r6, r0
 8021e22:	e7ca      	b.n	8021dba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8021e24:	4605      	mov	r5, r0
 8021e26:	e7c8      	b.n	8021dba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8021e28:	4604      	mov	r4, r0
 8021e2a:	e7d5      	b.n	8021dd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8021e2c:	4604      	mov	r4, r0
 8021e2e:	e7df      	b.n	8021df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021e30:	fa1f fc8c 	uxth.w	ip, ip
 8021e34:	fa1f f28e 	uxth.w	r2, lr
 8021e38:	fb02 fe0c 	mul.w	lr, r2, ip
 8021e3c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021e40:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8021e44:	ebac 070e 	sub.w	r7, ip, lr
 8021e48:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8021e4c:	b292      	uxth	r2, r2
 8021e4e:	b2bf      	uxth	r7, r7
 8021e50:	1a9b      	subs	r3, r3, r2
 8021e52:	fb07 fc0a 	mul.w	ip, r7, sl
 8021e56:	b29b      	uxth	r3, r3
 8021e58:	fb03 cc0b 	mla	ip, r3, fp, ip
 8021e5c:	9301      	str	r3, [sp, #4]
 8021e5e:	fb02 cc09 	mla	ip, r2, r9, ip
 8021e62:	fb0e cc08 	mla	ip, lr, r8, ip
 8021e66:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021e6a:	9305      	str	r3, [sp, #20]
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	f000 80b9 	beq.w	8021fe4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8021e72:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021e76:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021e7a:	fb0b fc0c 	mul.w	ip, fp, ip
 8021e7e:	fb0b f606 	mul.w	r6, fp, r6
 8021e82:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021e86:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021e8a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021e8e:	44dc      	add	ip, fp
 8021e90:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021e94:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021e98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e9c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021ea0:	fb0a fa05 	mul.w	sl, sl, r5
 8021ea4:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8021ea8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021eac:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8021eb0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021eb4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021eb8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021ebc:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8021ec0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ec4:	0a36      	lsrs	r6, r6, #8
 8021ec6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021eca:	44dc      	add	ip, fp
 8021ecc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021ed0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021ed4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ed8:	fb09 fb0b 	mul.w	fp, r9, fp
 8021edc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ee0:	fb09 f904 	mul.w	r9, r9, r4
 8021ee4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021ee8:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8021eec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ef0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021ef4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021ef8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021efc:	fb0c fc07 	mul.w	ip, ip, r7
 8021f00:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021f04:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8021f08:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021f0c:	445d      	add	r5, fp
 8021f0e:	fb08 f404 	mul.w	r4, r8, r4
 8021f12:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f16:	fb08 f800 	mul.w	r8, r8, r0
 8021f1a:	0a2d      	lsrs	r5, r5, #8
 8021f1c:	0a20      	lsrs	r0, r4, #8
 8021f1e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021f22:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021f26:	fb07 f70a 	mul.w	r7, r7, sl
 8021f2a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021f2e:	4404      	add	r4, r0
 8021f30:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8021f34:	0a24      	lsrs	r4, r4, #8
 8021f36:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8021f3a:	9801      	ldr	r0, [sp, #4]
 8021f3c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021f40:	fb03 cc00 	mla	ip, r3, r0, ip
 8021f44:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021f48:	fb00 7606 	mla	r6, r0, r6, r7
 8021f4c:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8021f50:	fb04 cc0e 	mla	ip, r4, lr, ip
 8021f54:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021f58:	b280      	uxth	r0, r0
 8021f5a:	9c04      	ldr	r4, [sp, #16]
 8021f5c:	fb05 cc02 	mla	ip, r5, r2, ip
 8021f60:	fb0e 6e08 	mla	lr, lr, r8, r6
 8021f64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f68:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8021f6c:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8021f70:	fb02 ec0c 	mla	ip, r2, ip, lr
 8021f74:	9a05      	ldr	r2, [sp, #20]
 8021f76:	4342      	muls	r2, r0
 8021f78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f7c:	1c53      	adds	r3, r2, #1
 8021f7e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021f82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021f86:	ea45 0c0c 	orr.w	ip, r5, ip
 8021f8a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021f8e:	fa5f f28c 	uxtb.w	r2, ip
 8021f92:	b2db      	uxtb	r3, r3
 8021f94:	fb14 f403 	smulbb	r4, r4, r3
 8021f98:	fb02 4200 	mla	r2, r2, r0, r4
 8021f9c:	b292      	uxth	r2, r2
 8021f9e:	1c54      	adds	r4, r2, #1
 8021fa0:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8021fa4:	9c03      	ldr	r4, [sp, #12]
 8021fa6:	fb14 f403 	smulbb	r4, r4, r3
 8021faa:	1212      	asrs	r2, r2, #8
 8021fac:	700a      	strb	r2, [r1, #0]
 8021fae:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8021fb2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021fb6:	fb02 4200 	mla	r2, r2, r0, r4
 8021fba:	b292      	uxth	r2, r2
 8021fbc:	1c54      	adds	r4, r2, #1
 8021fbe:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8021fc2:	1212      	asrs	r2, r2, #8
 8021fc4:	704a      	strb	r2, [r1, #1]
 8021fc6:	9a02      	ldr	r2, [sp, #8]
 8021fc8:	fb12 f303 	smulbb	r3, r2, r3
 8021fcc:	fb0c 3c00 	mla	ip, ip, r0, r3
 8021fd0:	fa1f fc8c 	uxth.w	ip, ip
 8021fd4:	f10c 0301 	add.w	r3, ip, #1
 8021fd8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021fdc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021fe0:	f881 c002 	strb.w	ip, [r1, #2]
 8021fe4:	b007      	add	sp, #28
 8021fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fea:	bf00      	nop
 8021fec:	0802ce3d 	.word	0x0802ce3d
 8021ff0:	0802d332 	.word	0x0802d332
 8021ff4:	0802cf06 	.word	0x0802cf06

08021ff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ffc:	ed2d 8b08 	vpush	{d8-d11}
 8022000:	b09b      	sub	sp, #108	; 0x6c
 8022002:	eeb0 aa40 	vmov.f32	s20, s0
 8022006:	eef0 9a60 	vmov.f32	s19, s1
 802200a:	930a      	str	r3, [sp, #40]	; 0x28
 802200c:	eeb0 9a41 	vmov.f32	s18, s2
 8022010:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8022014:	eeb0 8a62 	vmov.f32	s16, s5
 8022018:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 802201a:	eef0 8a43 	vmov.f32	s17, s6
 802201e:	9312      	str	r3, [sp, #72]	; 0x48
 8022020:	eef0 ba44 	vmov.f32	s23, s8
 8022024:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022028:	eeb0 ba64 	vmov.f32	s22, s9
 802202c:	9019      	str	r0, [sp, #100]	; 0x64
 802202e:	eef0 aa45 	vmov.f32	s21, s10
 8022032:	9114      	str	r1, [sp, #80]	; 0x50
 8022034:	9317      	str	r3, [sp, #92]	; 0x5c
 8022036:	6868      	ldr	r0, [r5, #4]
 8022038:	9218      	str	r2, [sp, #96]	; 0x60
 802203a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802203c:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8022040:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022044:	fb00 1303 	mla	r3, r0, r3, r1
 8022048:	6829      	ldr	r1, [r5, #0]
 802204a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802204e:	18cb      	adds	r3, r1, r3
 8022050:	930d      	str	r3, [sp, #52]	; 0x34
 8022052:	6813      	ldr	r3, [r2, #0]
 8022054:	9313      	str	r3, [sp, #76]	; 0x4c
 8022056:	6853      	ldr	r3, [r2, #4]
 8022058:	3304      	adds	r3, #4
 802205a:	9309      	str	r3, [sp, #36]	; 0x24
 802205c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802205e:	2b00      	cmp	r3, #0
 8022060:	dc03      	bgt.n	802206a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022062:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022064:	2b00      	cmp	r3, #0
 8022066:	f340 8352 	ble.w	802270e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802206a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802206c:	2b00      	cmp	r3, #0
 802206e:	f340 81a2 	ble.w	80223b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8022072:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022074:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022076:	1412      	asrs	r2, r2, #16
 8022078:	ea4f 4323 	mov.w	r3, r3, asr #16
 802207c:	d431      	bmi.n	80220e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802207e:	1c51      	adds	r1, r2, #1
 8022080:	428c      	cmp	r4, r1
 8022082:	dd31      	ble.n	80220e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022084:	2b00      	cmp	r3, #0
 8022086:	db2f      	blt.n	80220e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022088:	1c59      	adds	r1, r3, #1
 802208a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802208c:	4288      	cmp	r0, r1
 802208e:	dd2b      	ble.n	80220e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022092:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022094:	3b01      	subs	r3, #1
 8022096:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8022098:	fb02 1203 	mla	r2, r2, r3, r1
 802209c:	1412      	asrs	r2, r2, #16
 802209e:	d42d      	bmi.n	80220fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80220a0:	3201      	adds	r2, #1
 80220a2:	4294      	cmp	r4, r2
 80220a4:	dd2a      	ble.n	80220fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80220a6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80220a8:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80220aa:	fb02 1303 	mla	r3, r2, r3, r1
 80220ae:	141b      	asrs	r3, r3, #16
 80220b0:	d424      	bmi.n	80220fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80220b2:	3301      	adds	r3, #1
 80220b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80220b6:	429a      	cmp	r2, r3
 80220b8:	dd20      	ble.n	80220fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80220ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80220bc:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80220c0:	f103 0e03 	add.w	lr, r3, #3
 80220c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220c6:	9315      	str	r3, [sp, #84]	; 0x54
 80220c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	f300 81de 	bgt.w	802248c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80220d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80220d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80220d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80220dc:	441a      	add	r2, r3
 80220de:	920d      	str	r2, [sp, #52]	; 0x34
 80220e0:	e16b      	b.n	80223ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80220e2:	1c51      	adds	r1, r2, #1
 80220e4:	f040 8158 	bne.w	8022398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80220e8:	42a2      	cmp	r2, r4
 80220ea:	f280 8155 	bge.w	8022398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80220ee:	1c5a      	adds	r2, r3, #1
 80220f0:	f2c0 8152 	blt.w	8022398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80220f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80220f6:	4293      	cmp	r3, r2
 80220f8:	f280 814e 	bge.w	8022398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80220fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220fe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022100:	9316      	str	r3, [sp, #88]	; 0x58
 8022102:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8022106:	9315      	str	r3, [sp, #84]	; 0x54
 8022108:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802210a:	2b00      	cmp	r3, #0
 802210c:	dde0      	ble.n	80220d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802210e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022110:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022112:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022116:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022118:	141b      	asrs	r3, r3, #16
 802211a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802211e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022120:	1412      	asrs	r2, r2, #16
 8022122:	f100 819a 	bmi.w	802245a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8022126:	1c55      	adds	r5, r2, #1
 8022128:	42ac      	cmp	r4, r5
 802212a:	f340 8198 	ble.w	802245e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802212e:	2b00      	cmp	r3, #0
 8022130:	f2c0 8195 	blt.w	802245e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022134:	1c5d      	adds	r5, r3, #1
 8022136:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022138:	42af      	cmp	r7, r5
 802213a:	f340 8190 	ble.w	802245e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802213e:	fb03 2304 	mla	r3, r3, r4, r2
 8022142:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022144:	18d5      	adds	r5, r2, r3
 8022146:	5cd3      	ldrb	r3, [r2, r3]
 8022148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802214e:	0e1f      	lsrs	r7, r3, #24
 8022150:	2800      	cmp	r0, #0
 8022152:	f000 8171 	beq.w	8022438 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8022156:	f895 c001 	ldrb.w	ip, [r5, #1]
 802215a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802215e:	920e      	str	r2, [sp, #56]	; 0x38
 8022160:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022164:	2900      	cmp	r1, #0
 8022166:	f000 8172 	beq.w	802244e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802216a:	eb05 0c04 	add.w	ip, r5, r4
 802216e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022170:	5d2d      	ldrb	r5, [r5, r4]
 8022172:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8022176:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802217a:	950b      	str	r5, [sp, #44]	; 0x2c
 802217c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022180:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022182:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022186:	0e15      	lsrs	r5, r2, #24
 8022188:	920f      	str	r2, [sp, #60]	; 0x3c
 802218a:	b280      	uxth	r0, r0
 802218c:	b289      	uxth	r1, r1
 802218e:	fb00 fa01 	mul.w	sl, r0, r1
 8022192:	0100      	lsls	r0, r0, #4
 8022194:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8022198:	eba0 080a 	sub.w	r8, r0, sl
 802219c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80221a0:	b289      	uxth	r1, r1
 80221a2:	fa1f f888 	uxth.w	r8, r8
 80221a6:	1a52      	subs	r2, r2, r1
 80221a8:	fb08 f00e 	mul.w	r0, r8, lr
 80221ac:	b292      	uxth	r2, r2
 80221ae:	fb02 0007 	mla	r0, r2, r7, r0
 80221b2:	fb01 0009 	mla	r0, r1, r9, r0
 80221b6:	fb0a 0005 	mla	r0, sl, r5, r0
 80221ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80221be:	2800      	cmp	r0, #0
 80221c0:	f000 80dd 	beq.w	802237e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80221c4:	2fff      	cmp	r7, #255	; 0xff
 80221c6:	d01a      	beq.n	80221fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80221c8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80221cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221d0:	fb07 fc0c 	mul.w	ip, r7, ip
 80221d4:	435f      	muls	r7, r3
 80221d6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80221da:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80221de:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80221e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221e6:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80221ea:	4463      	add	r3, ip
 80221ec:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80221f0:	0a1b      	lsrs	r3, r3, #8
 80221f2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80221f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221fa:	ea43 030b 	orr.w	r3, r3, fp
 80221fe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022202:	d01e      	beq.n	8022242 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8022204:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022206:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802220a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802220e:	fb0e fb0b 	mul.w	fp, lr, fp
 8022212:	fb0e fe07 	mul.w	lr, lr, r7
 8022216:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802221a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802221e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022222:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022226:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802222a:	44dc      	add	ip, fp
 802222c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022230:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022234:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022238:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802223c:	ea4c 070e 	orr.w	r7, ip, lr
 8022240:	970e      	str	r7, [sp, #56]	; 0x38
 8022242:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022246:	d01e      	beq.n	8022286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022248:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802224a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802224e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022252:	fb09 fe0e 	mul.w	lr, r9, lr
 8022256:	fb09 f907 	mul.w	r9, r9, r7
 802225a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802225e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022262:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022266:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802226a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802226e:	44f4      	add	ip, lr
 8022270:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022274:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022278:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802227c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022280:	ea4c 0709 	orr.w	r7, ip, r9
 8022284:	970b      	str	r7, [sp, #44]	; 0x2c
 8022286:	2dff      	cmp	r5, #255	; 0xff
 8022288:	d01c      	beq.n	80222c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 802228a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802228c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022290:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022294:	fb05 fe0e 	mul.w	lr, r5, lr
 8022298:	437d      	muls	r5, r7
 802229a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802229e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80222a2:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80222a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222aa:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80222ae:	44f4      	add	ip, lr
 80222b0:	0a2d      	lsrs	r5, r5, #8
 80222b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222b6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80222ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222be:	ea4c 0505 	orr.w	r5, ip, r5
 80222c2:	950f      	str	r5, [sp, #60]	; 0x3c
 80222c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80222c6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80222ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80222d2:	fb08 f505 	mul.w	r5, r8, r5
 80222d6:	fb02 5507 	mla	r5, r2, r7, r5
 80222da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80222dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222e0:	fb01 5507 	mla	r5, r1, r7, r5
 80222e4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80222e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222ea:	fb0a 5507 	mla	r5, sl, r7, r5
 80222ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80222f0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80222f4:	0a2d      	lsrs	r5, r5, #8
 80222f6:	fb08 f807 	mul.w	r8, r8, r7
 80222fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80222fe:	fb02 8303 	mla	r3, r2, r3, r8
 8022302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022304:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802230a:	fb01 330c 	mla	r3, r1, ip, r3
 802230e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022312:	fb0a 3a01 	mla	sl, sl, r1, r3
 8022316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022318:	9915      	ldr	r1, [sp, #84]	; 0x54
 802231a:	4343      	muls	r3, r0
 802231c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022320:	1c58      	adds	r0, r3, #1
 8022322:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022326:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802232a:	ea45 050a 	orr.w	r5, r5, sl
 802232e:	7833      	ldrb	r3, [r6, #0]
 8022330:	b2ea      	uxtb	r2, r5
 8022332:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022336:	fb12 f201 	smulbb	r2, r2, r1
 802233a:	b2c0      	uxtb	r0, r0
 802233c:	fb03 2300 	mla	r3, r3, r0, r2
 8022340:	b29b      	uxth	r3, r3
 8022342:	1c5a      	adds	r2, r3, #1
 8022344:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022348:	7872      	ldrb	r2, [r6, #1]
 802234a:	fb12 f200 	smulbb	r2, r2, r0
 802234e:	121b      	asrs	r3, r3, #8
 8022350:	7033      	strb	r3, [r6, #0]
 8022352:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022356:	0c2d      	lsrs	r5, r5, #16
 8022358:	fb03 2301 	mla	r3, r3, r1, r2
 802235c:	b29b      	uxth	r3, r3
 802235e:	1c5a      	adds	r2, r3, #1
 8022360:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022364:	121b      	asrs	r3, r3, #8
 8022366:	7073      	strb	r3, [r6, #1]
 8022368:	78b3      	ldrb	r3, [r6, #2]
 802236a:	fb13 f000 	smulbb	r0, r3, r0
 802236e:	fb05 0501 	mla	r5, r5, r1, r0
 8022372:	b2ad      	uxth	r5, r5
 8022374:	1c6b      	adds	r3, r5, #1
 8022376:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802237a:	122d      	asrs	r5, r5, #8
 802237c:	70b5      	strb	r5, [r6, #2]
 802237e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022380:	3603      	adds	r6, #3
 8022382:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022384:	4413      	add	r3, r2
 8022386:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022388:	932d      	str	r3, [sp, #180]	; 0xb4
 802238a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802238c:	4413      	add	r3, r2
 802238e:	932e      	str	r3, [sp, #184]	; 0xb8
 8022390:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022392:	3b01      	subs	r3, #1
 8022394:	9316      	str	r3, [sp, #88]	; 0x58
 8022396:	e6b7      	b.n	8022108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8022398:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802239a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802239c:	4413      	add	r3, r2
 802239e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80223a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80223a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80223a4:	4413      	add	r3, r2
 80223a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80223a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223aa:	3b01      	subs	r3, #1
 80223ac:	930a      	str	r3, [sp, #40]	; 0x28
 80223ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80223b0:	3303      	adds	r3, #3
 80223b2:	930d      	str	r3, [sp, #52]	; 0x34
 80223b4:	e659      	b.n	802206a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80223b6:	f47f ae6b 	bne.w	8022090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80223ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80223bc:	2b00      	cmp	r3, #0
 80223be:	f340 81a6 	ble.w	802270e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80223c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80223c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80223c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80223cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80223d0:	eef0 6a48 	vmov.f32	s13, s16
 80223d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80223d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80223dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223e0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80223e4:	eef0 6a68 	vmov.f32	s13, s17
 80223e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223ec:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80223f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80223f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80223f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80223fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022400:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022404:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022408:	ee18 2a10 	vmov	r2, s16
 802240c:	eeb0 8a47 	vmov.f32	s16, s14
 8022410:	fb92 f3f3 	sdiv	r3, r2, r3
 8022414:	ee18 2a90 	vmov	r2, s17
 8022418:	932f      	str	r3, [sp, #188]	; 0xbc
 802241a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802241c:	eef0 8a67 	vmov.f32	s17, s15
 8022420:	fb92 f3f3 	sdiv	r3, r2, r3
 8022424:	9330      	str	r3, [sp, #192]	; 0xc0
 8022426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022428:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802242a:	3b01      	subs	r3, #1
 802242c:	9314      	str	r3, [sp, #80]	; 0x50
 802242e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022430:	bf08      	it	eq
 8022432:	4613      	moveq	r3, r2
 8022434:	930a      	str	r3, [sp, #40]	; 0x28
 8022436:	e611      	b.n	802205c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022438:	b161      	cbz	r1, 8022454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 802243a:	5d2a      	ldrb	r2, [r5, r4]
 802243c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802243e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022442:	25ff      	movs	r5, #255	; 0xff
 8022444:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8022448:	920b      	str	r2, [sp, #44]	; 0x2c
 802244a:	46ae      	mov	lr, r5
 802244c:	e69d      	b.n	802218a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802244e:	25ff      	movs	r5, #255	; 0xff
 8022450:	46a9      	mov	r9, r5
 8022452:	e69a      	b.n	802218a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8022454:	25ff      	movs	r5, #255	; 0xff
 8022456:	46a9      	mov	r9, r5
 8022458:	e7f7      	b.n	802244a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 802245a:	1c57      	adds	r7, r2, #1
 802245c:	d18f      	bne.n	802237e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802245e:	4294      	cmp	r4, r2
 8022460:	dd8d      	ble.n	802237e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022462:	1c5d      	adds	r5, r3, #1
 8022464:	db8b      	blt.n	802237e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022466:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022468:	429d      	cmp	r5, r3
 802246a:	dd88      	ble.n	802237e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802246c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802246e:	9202      	str	r2, [sp, #8]
 8022470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022472:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8022476:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022478:	9819      	ldr	r0, [sp, #100]	; 0x64
 802247a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802247e:	e9cd 4300 	strd	r4, r3, [sp]
 8022482:	4631      	mov	r1, r6
 8022484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022486:	f7ff fc63 	bl	8021d50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802248a:	e778      	b.n	802237e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802248c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802248e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022490:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022494:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022496:	1412      	asrs	r2, r2, #16
 8022498:	f3c3 3003 	ubfx	r0, r3, #12, #4
 802249c:	141b      	asrs	r3, r3, #16
 802249e:	fb04 2303 	mla	r3, r4, r3, r2
 80224a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80224a4:	18d5      	adds	r5, r2, r3
 80224a6:	5cd3      	ldrb	r3, [r2, r3]
 80224a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80224aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80224ae:	0e1e      	lsrs	r6, r3, #24
 80224b0:	2900      	cmp	r1, #0
 80224b2:	f000 811b 	beq.w	80226ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80224b6:	786a      	ldrb	r2, [r5, #1]
 80224b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80224ba:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80224be:	9210      	str	r2, [sp, #64]	; 0x40
 80224c0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80224c4:	2800      	cmp	r0, #0
 80224c6:	f000 811c 	beq.w	8022702 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80224ca:	192a      	adds	r2, r5, r4
 80224cc:	5d2d      	ldrb	r5, [r5, r4]
 80224ce:	7852      	ldrb	r2, [r2, #1]
 80224d0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80224d4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80224d8:	950c      	str	r5, [sp, #48]	; 0x30
 80224da:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80224de:	0e15      	lsrs	r5, r2, #24
 80224e0:	9211      	str	r2, [sp, #68]	; 0x44
 80224e2:	b289      	uxth	r1, r1
 80224e4:	b280      	uxth	r0, r0
 80224e6:	fb01 fa00 	mul.w	sl, r1, r0
 80224ea:	0109      	lsls	r1, r1, #4
 80224ec:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80224f0:	eba1 080a 	sub.w	r8, r1, sl
 80224f4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80224f8:	b280      	uxth	r0, r0
 80224fa:	fa1f f888 	uxth.w	r8, r8
 80224fe:	1a12      	subs	r2, r2, r0
 8022500:	fb08 f10c 	mul.w	r1, r8, ip
 8022504:	b292      	uxth	r2, r2
 8022506:	fb02 1106 	mla	r1, r2, r6, r1
 802250a:	fb00 1109 	mla	r1, r0, r9, r1
 802250e:	fb0a 1105 	mla	r1, sl, r5, r1
 8022512:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022516:	2900      	cmp	r1, #0
 8022518:	f000 80da 	beq.w	80226d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 802251c:	2eff      	cmp	r6, #255	; 0xff
 802251e:	d016      	beq.n	802254e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8022520:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022524:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022528:	4377      	muls	r7, r6
 802252a:	435e      	muls	r6, r3
 802252c:	0a3b      	lsrs	r3, r7, #8
 802252e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022532:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022536:	443b      	add	r3, r7
 8022538:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802253c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022540:	0a1b      	lsrs	r3, r3, #8
 8022542:	0a3f      	lsrs	r7, r7, #8
 8022544:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022548:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802254c:	433b      	orrs	r3, r7
 802254e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022552:	d01d      	beq.n	8022590 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8022554:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022556:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022558:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802255c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022560:	fb0c f606 	mul.w	r6, ip, r6
 8022564:	fb0c fc07 	mul.w	ip, ip, r7
 8022568:	0a37      	lsrs	r7, r6, #8
 802256a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802256e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022572:	4437      	add	r7, r6
 8022574:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8022578:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802257c:	0a3f      	lsrs	r7, r7, #8
 802257e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022582:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022586:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802258a:	ea47 060c 	orr.w	r6, r7, ip
 802258e:	9610      	str	r6, [sp, #64]	; 0x40
 8022590:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022594:	d01d      	beq.n	80225d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8022596:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022598:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802259c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80225a0:	fb09 fc0c 	mul.w	ip, r9, ip
 80225a4:	fb09 f906 	mul.w	r9, r9, r6
 80225a8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80225ac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80225b0:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80225b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80225b8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80225bc:	4467      	add	r7, ip
 80225be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80225c2:	0a3f      	lsrs	r7, r7, #8
 80225c4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80225c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80225cc:	ea47 0609 	orr.w	r6, r7, r9
 80225d0:	960c      	str	r6, [sp, #48]	; 0x30
 80225d2:	2dff      	cmp	r5, #255	; 0xff
 80225d4:	d01a      	beq.n	802260c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80225d6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80225d8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80225dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80225e0:	fb05 fc0c 	mul.w	ip, r5, ip
 80225e4:	4375      	muls	r5, r6
 80225e6:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80225ea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80225ee:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80225f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80225f6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80225fa:	4467      	add	r7, ip
 80225fc:	0a2d      	lsrs	r5, r5, #8
 80225fe:	0a3f      	lsrs	r7, r7, #8
 8022600:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022604:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022608:	433d      	orrs	r5, r7
 802260a:	9511      	str	r5, [sp, #68]	; 0x44
 802260c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802260e:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8022612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022616:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802261a:	fb08 f505 	mul.w	r5, r8, r5
 802261e:	fb02 5506 	mla	r5, r2, r6, r5
 8022622:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022624:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022628:	fb00 5506 	mla	r5, r0, r6, r5
 802262c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802262e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022632:	fb0a 5506 	mla	r5, sl, r6, r5
 8022636:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022638:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802263c:	0a2d      	lsrs	r5, r5, #8
 802263e:	fb08 f806 	mul.w	r8, r8, r6
 8022642:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022646:	fb02 8303 	mla	r3, r2, r3, r8
 802264a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802264c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022650:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022652:	fb00 3307 	mla	r3, r0, r7, r3
 8022656:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802265a:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802265e:	fb01 f30b 	mul.w	r3, r1, fp
 8022662:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022666:	1c59      	adds	r1, r3, #1
 8022668:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802266c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022670:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022674:	ea45 050c 	orr.w	r5, r5, ip
 8022678:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802267c:	b2ea      	uxtb	r2, r5
 802267e:	b2c9      	uxtb	r1, r1
 8022680:	fb12 f20b 	smulbb	r2, r2, fp
 8022684:	fb03 2301 	mla	r3, r3, r1, r2
 8022688:	b29b      	uxth	r3, r3
 802268a:	1c5a      	adds	r2, r3, #1
 802268c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022690:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022694:	fb12 f201 	smulbb	r2, r2, r1
 8022698:	121b      	asrs	r3, r3, #8
 802269a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802269e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80226a2:	0c2d      	lsrs	r5, r5, #16
 80226a4:	fb03 230b 	mla	r3, r3, fp, r2
 80226a8:	b29b      	uxth	r3, r3
 80226aa:	1c5a      	adds	r2, r3, #1
 80226ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80226b0:	121b      	asrs	r3, r3, #8
 80226b2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80226b6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80226ba:	fb13 f101 	smulbb	r1, r3, r1
 80226be:	fb05 150b 	mla	r5, r5, fp, r1
 80226c2:	b2ad      	uxth	r5, r5
 80226c4:	1c69      	adds	r1, r5, #1
 80226c6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80226ca:	122d      	asrs	r5, r5, #8
 80226cc:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80226d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80226d2:	f10e 0e03 	add.w	lr, lr, #3
 80226d6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80226d8:	4413      	add	r3, r2
 80226da:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80226dc:	932d      	str	r3, [sp, #180]	; 0xb4
 80226de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80226e0:	4413      	add	r3, r2
 80226e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80226e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80226e6:	3b01      	subs	r3, #1
 80226e8:	9315      	str	r3, [sp, #84]	; 0x54
 80226ea:	e4ed      	b.n	80220c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80226ec:	b160      	cbz	r0, 8022708 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80226ee:	5d2a      	ldrb	r2, [r5, r4]
 80226f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80226f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80226f6:	25ff      	movs	r5, #255	; 0xff
 80226f8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80226fc:	920c      	str	r2, [sp, #48]	; 0x30
 80226fe:	46ac      	mov	ip, r5
 8022700:	e6ef      	b.n	80224e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8022702:	25ff      	movs	r5, #255	; 0xff
 8022704:	46a9      	mov	r9, r5
 8022706:	e6ec      	b.n	80224e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8022708:	25ff      	movs	r5, #255	; 0xff
 802270a:	46a9      	mov	r9, r5
 802270c:	e7f7      	b.n	80226fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 802270e:	b01b      	add	sp, #108	; 0x6c
 8022710:	ecbd 8b08 	vpop	{d8-d11}
 8022714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022718 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8022718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802271c:	b085      	sub	sp, #20
 802271e:	7888      	ldrb	r0, [r1, #2]
 8022720:	4692      	mov	sl, r2
 8022722:	4698      	mov	r8, r3
 8022724:	9000      	str	r0, [sp, #0]
 8022726:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802272a:	7848      	ldrb	r0, [r1, #1]
 802272c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8022730:	9001      	str	r0, [sp, #4]
 8022732:	7808      	ldrb	r0, [r1, #0]
 8022734:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8022738:	9002      	str	r0, [sp, #8]
 802273a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802273e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8022742:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8022746:	fb04 560c 	mla	r6, r4, ip, r5
 802274a:	2c00      	cmp	r4, #0
 802274c:	eb02 0e06 	add.w	lr, r2, r6
 8022750:	9a00      	ldr	r2, [sp, #0]
 8022752:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022756:	9a01      	ldr	r2, [sp, #4]
 8022758:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802275c:	db3e      	blt.n	80227dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802275e:	45a1      	cmp	r9, r4
 8022760:	dd3c      	ble.n	80227dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8022762:	2d00      	cmp	r5, #0
 8022764:	db38      	blt.n	80227d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8022766:	45ac      	cmp	ip, r5
 8022768:	dd36      	ble.n	80227d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802276a:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802276e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8022772:	1c6e      	adds	r6, r5, #1
 8022774:	d435      	bmi.n	80227e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8022776:	45b4      	cmp	ip, r6
 8022778:	dd33      	ble.n	80227e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802277a:	b393      	cbz	r3, 80227e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802277c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022780:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8022784:	3401      	adds	r4, #1
 8022786:	d430      	bmi.n	80227ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8022788:	45a1      	cmp	r9, r4
 802278a:	dd2e      	ble.n	80227ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802278c:	b36f      	cbz	r7, 80227ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802278e:	2d00      	cmp	r5, #0
 8022790:	db29      	blt.n	80227e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8022792:	45ac      	cmp	ip, r5
 8022794:	dd27      	ble.n	80227e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8022796:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802279a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802279e:	3501      	adds	r5, #1
 80227a0:	d407      	bmi.n	80227b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80227a2:	45ac      	cmp	ip, r5
 80227a4:	dd05      	ble.n	80227b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80227a6:	b123      	cbz	r3, 80227b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80227a8:	44f4      	add	ip, lr
 80227aa:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80227ae:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80227b2:	2b0f      	cmp	r3, #15
 80227b4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80227b8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80227bc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80227c0:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80227c4:	d801      	bhi.n	80227ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80227c6:	2f0f      	cmp	r7, #15
 80227c8:	d911      	bls.n	80227ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80227ca:	4b76      	ldr	r3, [pc, #472]	; (80229a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80227cc:	f240 11a5 	movw	r1, #421	; 0x1a5
 80227d0:	4a75      	ldr	r2, [pc, #468]	; (80229a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80227d2:	4876      	ldr	r0, [pc, #472]	; (80229ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80227d4:	f004 ff9e 	bl	8027714 <__assert_func>
 80227d8:	4602      	mov	r2, r0
 80227da:	e7ca      	b.n	8022772 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80227dc:	4606      	mov	r6, r0
 80227de:	4602      	mov	r2, r0
 80227e0:	e7d0      	b.n	8022784 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80227e2:	4606      	mov	r6, r0
 80227e4:	e7ce      	b.n	8022784 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80227e6:	4604      	mov	r4, r0
 80227e8:	e7d9      	b.n	802279e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80227ea:	4604      	mov	r4, r0
 80227ec:	e7e1      	b.n	80227b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80227ee:	b29b      	uxth	r3, r3
 80227f0:	b2bf      	uxth	r7, r7
 80227f2:	fb07 fe03 	mul.w	lr, r7, r3
 80227f6:	011b      	lsls	r3, r3, #4
 80227f8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80227fc:	eba3 0c0e 	sub.w	ip, r3, lr
 8022800:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8022804:	b2bf      	uxth	r7, r7
 8022806:	fa1f fc8c 	uxth.w	ip, ip
 802280a:	1bed      	subs	r5, r5, r7
 802280c:	fb0c f30a 	mul.w	r3, ip, sl
 8022810:	b2ad      	uxth	r5, r5
 8022812:	fb05 330b 	mla	r3, r5, fp, r3
 8022816:	fb07 3309 	mla	r3, r7, r9, r3
 802281a:	fb0e 3308 	mla	r3, lr, r8, r3
 802281e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022822:	9303      	str	r3, [sp, #12]
 8022824:	2b00      	cmp	r3, #0
 8022826:	f000 80b9 	beq.w	802299c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 802282a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802282e:	d018      	beq.n	8022862 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8022830:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022834:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022838:	fb0b f303 	mul.w	r3, fp, r3
 802283c:	fb0b fb02 	mul.w	fp, fp, r2
 8022840:	0a1a      	lsrs	r2, r3, #8
 8022842:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022846:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802284a:	441a      	add	r2, r3
 802284c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022850:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022854:	0a12      	lsrs	r2, r2, #8
 8022856:	0a1b      	lsrs	r3, r3, #8
 8022858:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802285c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022860:	431a      	orrs	r2, r3
 8022862:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022866:	d019      	beq.n	802289c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8022868:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802286c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022870:	fb0a fb0b 	mul.w	fp, sl, fp
 8022874:	fb0a fa06 	mul.w	sl, sl, r6
 8022878:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802287c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022880:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022884:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022888:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802288c:	445e      	add	r6, fp
 802288e:	0a1b      	lsrs	r3, r3, #8
 8022890:	0a36      	lsrs	r6, r6, #8
 8022892:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022896:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802289a:	431e      	orrs	r6, r3
 802289c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80228a0:	d019      	beq.n	80228d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 80228a2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80228a6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80228aa:	fb09 fa0a 	mul.w	sl, r9, sl
 80228ae:	fb09 f904 	mul.w	r9, r9, r4
 80228b2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80228b6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80228ba:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80228be:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80228c2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80228c6:	4454      	add	r4, sl
 80228c8:	0a1b      	lsrs	r3, r3, #8
 80228ca:	0a24      	lsrs	r4, r4, #8
 80228cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228d0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80228d4:	431c      	orrs	r4, r3
 80228d6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80228da:	d019      	beq.n	8022910 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80228dc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80228e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80228e4:	fb08 f909 	mul.w	r9, r8, r9
 80228e8:	fb08 f800 	mul.w	r8, r8, r0
 80228ec:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80228f0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80228f4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80228f8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80228fc:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022900:	4448      	add	r0, r9
 8022902:	0a1b      	lsrs	r3, r3, #8
 8022904:	0a00      	lsrs	r0, r0, #8
 8022906:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802290a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802290e:	4318      	orrs	r0, r3
 8022910:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022914:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022918:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802291c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022920:	fb0c f808 	mul.w	r8, ip, r8
 8022924:	fb0c f606 	mul.w	r6, ip, r6
 8022928:	fb05 8803 	mla	r8, r5, r3, r8
 802292c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022930:	fb05 6202 	mla	r2, r5, r2, r6
 8022934:	fb07 8803 	mla	r8, r7, r3, r8
 8022938:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802293c:	fb0e 8303 	mla	r3, lr, r3, r8
 8022940:	0a1b      	lsrs	r3, r3, #8
 8022942:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8022946:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 802294a:	9c02      	ldr	r4, [sp, #8]
 802294c:	fb07 2703 	mla	r7, r7, r3, r2
 8022950:	9a03      	ldr	r2, [sp, #12]
 8022952:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8022956:	43d2      	mvns	r2, r2
 8022958:	fb0e 7303 	mla	r3, lr, r3, r7
 802295c:	b2d2      	uxtb	r2, r2
 802295e:	0a1b      	lsrs	r3, r3, #8
 8022960:	4354      	muls	r4, r2
 8022962:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022966:	1c60      	adds	r0, r4, #1
 8022968:	ea48 0303 	orr.w	r3, r8, r3
 802296c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8022970:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022974:	7008      	strb	r0, [r1, #0]
 8022976:	9801      	ldr	r0, [sp, #4]
 8022978:	4350      	muls	r0, r2
 802297a:	1c44      	adds	r4, r0, #1
 802297c:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8022980:	0a18      	lsrs	r0, r3, #8
 8022982:	0c1b      	lsrs	r3, r3, #16
 8022984:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8022988:	7048      	strb	r0, [r1, #1]
 802298a:	9800      	ldr	r0, [sp, #0]
 802298c:	4350      	muls	r0, r2
 802298e:	4602      	mov	r2, r0
 8022990:	3001      	adds	r0, #1
 8022992:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022996:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802299a:	708b      	strb	r3, [r1, #2]
 802299c:	b005      	add	sp, #20
 802299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229a2:	bf00      	nop
 80229a4:	0802ce3d 	.word	0x0802ce3d
 80229a8:	0802d332 	.word	0x0802d332
 80229ac:	0802cf06 	.word	0x0802cf06

080229b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80229b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229b4:	ed2d 8b08 	vpush	{d8-d11}
 80229b8:	b097      	sub	sp, #92	; 0x5c
 80229ba:	eeb0 aa40 	vmov.f32	s20, s0
 80229be:	eef0 9a60 	vmov.f32	s19, s1
 80229c2:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80229c4:	eeb0 9a41 	vmov.f32	s18, s2
 80229c8:	9308      	str	r3, [sp, #32]
 80229ca:	eeb0 8a62 	vmov.f32	s16, s5
 80229ce:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80229d2:	eef0 8a43 	vmov.f32	s17, s6
 80229d6:	9015      	str	r0, [sp, #84]	; 0x54
 80229d8:	eef0 ba44 	vmov.f32	s23, s8
 80229dc:	6868      	ldr	r0, [r5, #4]
 80229de:	eeb0 ba64 	vmov.f32	s22, s9
 80229e2:	9112      	str	r1, [sp, #72]	; 0x48
 80229e4:	eef0 aa45 	vmov.f32	s21, s10
 80229e8:	9310      	str	r3, [sp, #64]	; 0x40
 80229ea:	9214      	str	r2, [sp, #80]	; 0x50
 80229ec:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80229ee:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80229f2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80229f6:	fb00 1303 	mla	r3, r0, r3, r1
 80229fa:	6829      	ldr	r1, [r5, #0]
 80229fc:	6855      	ldr	r5, [r2, #4]
 80229fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a02:	3504      	adds	r5, #4
 8022a04:	18cb      	adds	r3, r1, r3
 8022a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a08:	6813      	ldr	r3, [r2, #0]
 8022a0a:	9311      	str	r3, [sp, #68]	; 0x44
 8022a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022a0e:	2b00      	cmp	r3, #0
 8022a10:	dc03      	bgt.n	8022a1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022a12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022a14:	2b00      	cmp	r3, #0
 8022a16:	f340 8333 	ble.w	8023080 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8022a1a:	9b08      	ldr	r3, [sp, #32]
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	f340 8190 	ble.w	8022d42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022a22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022a24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022a26:	1412      	asrs	r2, r2, #16
 8022a28:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022a2c:	d42f      	bmi.n	8022a8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022a2e:	1c51      	adds	r1, r2, #1
 8022a30:	428c      	cmp	r4, r1
 8022a32:	dd2f      	ble.n	8022a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	db2d      	blt.n	8022a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8022a38:	1c59      	adds	r1, r3, #1
 8022a3a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022a3c:	4288      	cmp	r0, r1
 8022a3e:	dd29      	ble.n	8022a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8022a40:	9b08      	ldr	r3, [sp, #32]
 8022a42:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022a44:	3b01      	subs	r3, #1
 8022a46:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022a48:	fb02 1203 	mla	r2, r2, r3, r1
 8022a4c:	1412      	asrs	r2, r2, #16
 8022a4e:	d42b      	bmi.n	8022aa8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022a50:	3201      	adds	r2, #1
 8022a52:	4294      	cmp	r4, r2
 8022a54:	dd28      	ble.n	8022aa8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022a56:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022a58:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022a5a:	fb02 1303 	mla	r3, r2, r3, r1
 8022a5e:	141b      	asrs	r3, r3, #16
 8022a60:	d422      	bmi.n	8022aa8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022a62:	3301      	adds	r3, #1
 8022a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a66:	429a      	cmp	r2, r3
 8022a68:	dd1e      	ble.n	8022aa8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a6c:	f103 0803 	add.w	r8, r3, #3
 8022a70:	9b08      	ldr	r3, [sp, #32]
 8022a72:	9307      	str	r3, [sp, #28]
 8022a74:	9b07      	ldr	r3, [sp, #28]
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	f300 81ca 	bgt.w	8022e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8022a7c:	9b08      	ldr	r3, [sp, #32]
 8022a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022a80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022a84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a88:	441a      	add	r2, r3
 8022a8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8022a8c:	e15b      	b.n	8022d46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8022a8e:	1c51      	adds	r1, r2, #1
 8022a90:	f040 8148 	bne.w	8022d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8022a94:	42a2      	cmp	r2, r4
 8022a96:	f280 8145 	bge.w	8022d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8022a9a:	1c5a      	adds	r2, r3, #1
 8022a9c:	f2c0 8142 	blt.w	8022d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8022aa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022aa2:	4293      	cmp	r3, r2
 8022aa4:	f280 813e 	bge.w	8022d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8022aa8:	9b08      	ldr	r3, [sp, #32]
 8022aaa:	9313      	str	r3, [sp, #76]	; 0x4c
 8022aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022aae:	9307      	str	r3, [sp, #28]
 8022ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	dde2      	ble.n	8022a7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8022ab6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022ab8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022aba:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022abe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022ac0:	141b      	asrs	r3, r3, #16
 8022ac2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022ac6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022ac8:	1412      	asrs	r2, r2, #16
 8022aca:	f100 818b 	bmi.w	8022de4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8022ace:	1c56      	adds	r6, r2, #1
 8022ad0:	42b4      	cmp	r4, r6
 8022ad2:	f340 8189 	ble.w	8022de8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	f2c0 8186 	blt.w	8022de8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8022adc:	1c5e      	adds	r6, r3, #1
 8022ade:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022ae0:	42b7      	cmp	r7, r6
 8022ae2:	f340 8181 	ble.w	8022de8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8022ae6:	fb03 2304 	mla	r3, r3, r4, r2
 8022aea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022aec:	18d6      	adds	r6, r2, r3
 8022aee:	5cd3      	ldrb	r3, [r2, r3]
 8022af0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022af4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022af8:	2900      	cmp	r1, #0
 8022afa:	f000 8163 	beq.w	8022dc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022afe:	7872      	ldrb	r2, [r6, #1]
 8022b00:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022b04:	920c      	str	r2, [sp, #48]	; 0x30
 8022b06:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022b0a:	2800      	cmp	r0, #0
 8022b0c:	f000 8164 	beq.w	8022dd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8022b10:	1932      	adds	r2, r6, r4
 8022b12:	5d36      	ldrb	r6, [r6, r4]
 8022b14:	7852      	ldrb	r2, [r2, #1]
 8022b16:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8022b1a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022b1e:	9609      	str	r6, [sp, #36]	; 0x24
 8022b20:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022b24:	0e16      	lsrs	r6, r2, #24
 8022b26:	920d      	str	r2, [sp, #52]	; 0x34
 8022b28:	b289      	uxth	r1, r1
 8022b2a:	b280      	uxth	r0, r0
 8022b2c:	fb01 fb00 	mul.w	fp, r1, r0
 8022b30:	0109      	lsls	r1, r1, #4
 8022b32:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8022b36:	eba1 090b 	sub.w	r9, r1, fp
 8022b3a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8022b3e:	b280      	uxth	r0, r0
 8022b40:	fa1f f989 	uxth.w	r9, r9
 8022b44:	1a12      	subs	r2, r2, r0
 8022b46:	fb09 f108 	mul.w	r1, r9, r8
 8022b4a:	b292      	uxth	r2, r2
 8022b4c:	fb02 110c 	mla	r1, r2, ip, r1
 8022b50:	fb00 110a 	mla	r1, r0, sl, r1
 8022b54:	fb0b 1106 	mla	r1, fp, r6, r1
 8022b58:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022b5c:	2900      	cmp	r1, #0
 8022b5e:	f000 80d2 	beq.w	8022d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022b62:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022b66:	d01b      	beq.n	8022ba0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8022b68:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022b6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b70:	fb0c fe0e 	mul.w	lr, ip, lr
 8022b74:	fb0c fc03 	mul.w	ip, ip, r3
 8022b78:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022b7c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022b80:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b84:	4473      	add	r3, lr
 8022b86:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8022b8a:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022b8e:	0a1b      	lsrs	r3, r3, #8
 8022b90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b98:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022b9c:	ea43 030e 	orr.w	r3, r3, lr
 8022ba0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022ba4:	d01e      	beq.n	8022be4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8022ba6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022ba8:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022bac:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8022bb0:	fb08 fc0c 	mul.w	ip, r8, ip
 8022bb4:	fb08 f80e 	mul.w	r8, r8, lr
 8022bb8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022bbc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022bc0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022bc4:	44e6      	add	lr, ip
 8022bc6:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022bca:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022bce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022bd2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022bd6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022bda:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022bde:	ea4e 0708 	orr.w	r7, lr, r8
 8022be2:	970c      	str	r7, [sp, #48]	; 0x30
 8022be4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022be8:	d01e      	beq.n	8022c28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8022bea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022bec:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022bf0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022bf4:	fb0a f808 	mul.w	r8, sl, r8
 8022bf8:	fb0a fa0c 	mul.w	sl, sl, ip
 8022bfc:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022c00:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022c04:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022c08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c0c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022c10:	44c6      	add	lr, r8
 8022c12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c22:	ea4e 070a 	orr.w	r7, lr, sl
 8022c26:	9709      	str	r7, [sp, #36]	; 0x24
 8022c28:	2eff      	cmp	r6, #255	; 0xff
 8022c2a:	d01d      	beq.n	8022c68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8022c2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022c2e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022c32:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022c36:	fb06 f808 	mul.w	r8, r6, r8
 8022c3a:	fb06 f60c 	mul.w	r6, r6, ip
 8022c3e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022c42:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022c46:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022c4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c4e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022c52:	44c6      	add	lr, r8
 8022c54:	0a36      	lsrs	r6, r6, #8
 8022c56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c5a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022c5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c62:	ea4e 0606 	orr.w	r6, lr, r6
 8022c66:	960d      	str	r6, [sp, #52]	; 0x34
 8022c68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022c6a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022c6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022c70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022c74:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022c78:	43c9      	mvns	r1, r1
 8022c7a:	fb09 f606 	mul.w	r6, r9, r6
 8022c7e:	b2c9      	uxtb	r1, r1
 8022c80:	fb02 660c 	mla	r6, r2, ip, r6
 8022c84:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022c88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022c8a:	fb00 660c 	mla	r6, r0, ip, r6
 8022c8e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022c92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022c94:	fb0b 660c 	mla	r6, fp, ip, r6
 8022c98:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022c9c:	fb09 f90c 	mul.w	r9, r9, ip
 8022ca0:	0a36      	lsrs	r6, r6, #8
 8022ca2:	fb02 9303 	mla	r3, r2, r3, r9
 8022ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ca8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022cac:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022cb2:	fb00 330e 	mla	r3, r0, lr, r3
 8022cb6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8022cba:	fb0b 3b00 	mla	fp, fp, r0, r3
 8022cbe:	9b07      	ldr	r3, [sp, #28]
 8022cc0:	781b      	ldrb	r3, [r3, #0]
 8022cc2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022cc6:	fb03 f201 	mul.w	r2, r3, r1
 8022cca:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022cce:	1c53      	adds	r3, r2, #1
 8022cd0:	ea46 060b 	orr.w	r6, r6, fp
 8022cd4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022cd8:	9a07      	ldr	r2, [sp, #28]
 8022cda:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022cde:	7013      	strb	r3, [r2, #0]
 8022ce0:	7853      	ldrb	r3, [r2, #1]
 8022ce2:	434b      	muls	r3, r1
 8022ce4:	1c5a      	adds	r2, r3, #1
 8022ce6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022cea:	0a33      	lsrs	r3, r6, #8
 8022cec:	0c36      	lsrs	r6, r6, #16
 8022cee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022cf2:	9a07      	ldr	r2, [sp, #28]
 8022cf4:	7053      	strb	r3, [r2, #1]
 8022cf6:	7893      	ldrb	r3, [r2, #2]
 8022cf8:	4359      	muls	r1, r3
 8022cfa:	1c4b      	adds	r3, r1, #1
 8022cfc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022d00:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8022d04:	7096      	strb	r6, [r2, #2]
 8022d06:	9b07      	ldr	r3, [sp, #28]
 8022d08:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022d0a:	3303      	adds	r3, #3
 8022d0c:	9307      	str	r3, [sp, #28]
 8022d0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022d10:	4413      	add	r3, r2
 8022d12:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022d14:	9329      	str	r3, [sp, #164]	; 0xa4
 8022d16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022d18:	4413      	add	r3, r2
 8022d1a:	932a      	str	r3, [sp, #168]	; 0xa8
 8022d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022d1e:	3b01      	subs	r3, #1
 8022d20:	9313      	str	r3, [sp, #76]	; 0x4c
 8022d22:	e6c5      	b.n	8022ab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8022d24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022d26:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022d28:	4413      	add	r3, r2
 8022d2a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022d2c:	9329      	str	r3, [sp, #164]	; 0xa4
 8022d2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022d30:	4413      	add	r3, r2
 8022d32:	932a      	str	r3, [sp, #168]	; 0xa8
 8022d34:	9b08      	ldr	r3, [sp, #32]
 8022d36:	3b01      	subs	r3, #1
 8022d38:	9308      	str	r3, [sp, #32]
 8022d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d3c:	3303      	adds	r3, #3
 8022d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d40:	e66b      	b.n	8022a1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022d42:	f47f ae7d 	bne.w	8022a40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8022d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d48:	2b00      	cmp	r3, #0
 8022d4a:	f340 8199 	ble.w	8023080 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8022d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022d52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d54:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022d58:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022d5c:	eef0 6a48 	vmov.f32	s13, s16
 8022d60:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022d64:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022d68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d6c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022d70:	eef0 6a68 	vmov.f32	s13, s17
 8022d74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d78:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8022d7c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022d80:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022d84:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022d88:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022d8c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022d90:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022d94:	ee18 2a10 	vmov	r2, s16
 8022d98:	eeb0 8a47 	vmov.f32	s16, s14
 8022d9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022da0:	ee18 2a90 	vmov	r2, s17
 8022da4:	932b      	str	r3, [sp, #172]	; 0xac
 8022da6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022da8:	eef0 8a67 	vmov.f32	s17, s15
 8022dac:	fb92 f3f3 	sdiv	r3, r2, r3
 8022db0:	932c      	str	r3, [sp, #176]	; 0xb0
 8022db2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022db4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022db6:	3b01      	subs	r3, #1
 8022db8:	9312      	str	r3, [sp, #72]	; 0x48
 8022dba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022dbc:	bf08      	it	eq
 8022dbe:	4613      	moveq	r3, r2
 8022dc0:	9308      	str	r3, [sp, #32]
 8022dc2:	e623      	b.n	8022a0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8022dc4:	b158      	cbz	r0, 8022dde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022dc6:	5d32      	ldrb	r2, [r6, r4]
 8022dc8:	26ff      	movs	r6, #255	; 0xff
 8022dca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022dce:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8022dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8022dd4:	46b0      	mov	r8, r6
 8022dd6:	e6a7      	b.n	8022b28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8022dd8:	26ff      	movs	r6, #255	; 0xff
 8022dda:	46b2      	mov	sl, r6
 8022ddc:	e6a4      	b.n	8022b28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8022dde:	26ff      	movs	r6, #255	; 0xff
 8022de0:	46b2      	mov	sl, r6
 8022de2:	e7f7      	b.n	8022dd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022de4:	1c57      	adds	r7, r2, #1
 8022de6:	d18e      	bne.n	8022d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022de8:	4294      	cmp	r4, r2
 8022dea:	dd8c      	ble.n	8022d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022dec:	1c5e      	adds	r6, r3, #1
 8022dee:	db8a      	blt.n	8022d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022df0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022df2:	429e      	cmp	r6, r3
 8022df4:	dd87      	ble.n	8022d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022df6:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8022dfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022dfe:	e9cd 4600 	strd	r4, r6, [sp]
 8022e02:	462b      	mov	r3, r5
 8022e04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022e06:	9907      	ldr	r1, [sp, #28]
 8022e08:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022e0a:	f7ff fc85 	bl	8022718 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8022e0e:	e77a      	b.n	8022d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022e10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022e12:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022e14:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022e18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e1a:	1409      	asrs	r1, r1, #16
 8022e1c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8022e20:	141b      	asrs	r3, r3, #16
 8022e22:	fb04 1303 	mla	r3, r4, r3, r1
 8022e26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022e28:	18ce      	adds	r6, r1, r3
 8022e2a:	5ccb      	ldrb	r3, [r1, r3]
 8022e2c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022e30:	0e1f      	lsrs	r7, r3, #24
 8022e32:	2a00      	cmp	r2, #0
 8022e34:	f000 8114 	beq.w	8023060 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8022e38:	7871      	ldrb	r1, [r6, #1]
 8022e3a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022e3e:	910e      	str	r1, [sp, #56]	; 0x38
 8022e40:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022e44:	2800      	cmp	r0, #0
 8022e46:	f000 8115 	beq.w	8023074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8022e4a:	1931      	adds	r1, r6, r4
 8022e4c:	5d36      	ldrb	r6, [r6, r4]
 8022e4e:	7849      	ldrb	r1, [r1, #1]
 8022e50:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8022e54:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022e58:	960a      	str	r6, [sp, #40]	; 0x28
 8022e5a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022e5e:	0e0e      	lsrs	r6, r1, #24
 8022e60:	910f      	str	r1, [sp, #60]	; 0x3c
 8022e62:	b292      	uxth	r2, r2
 8022e64:	b280      	uxth	r0, r0
 8022e66:	fb02 fb00 	mul.w	fp, r2, r0
 8022e6a:	0112      	lsls	r2, r2, #4
 8022e6c:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8022e70:	eba2 090b 	sub.w	r9, r2, fp
 8022e74:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022e78:	b280      	uxth	r0, r0
 8022e7a:	fa1f f989 	uxth.w	r9, r9
 8022e7e:	1a09      	subs	r1, r1, r0
 8022e80:	fb09 f20e 	mul.w	r2, r9, lr
 8022e84:	b289      	uxth	r1, r1
 8022e86:	fb01 2207 	mla	r2, r1, r7, r2
 8022e8a:	fb00 220a 	mla	r2, r0, sl, r2
 8022e8e:	fb0b 2206 	mla	r2, fp, r6, r2
 8022e92:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022e96:	9213      	str	r2, [sp, #76]	; 0x4c
 8022e98:	2a00      	cmp	r2, #0
 8022e9a:	f000 80d4 	beq.w	8023046 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8022e9e:	2fff      	cmp	r7, #255	; 0xff
 8022ea0:	d01a      	beq.n	8022ed8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8022ea2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022ea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022eaa:	fb07 fc0c 	mul.w	ip, r7, ip
 8022eae:	435f      	muls	r7, r3
 8022eb0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022eb4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022eb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022ebc:	4463      	add	r3, ip
 8022ebe:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022ec2:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022ec6:	0a1b      	lsrs	r3, r3, #8
 8022ec8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ecc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022ed0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022ed4:	ea43 030c 	orr.w	r3, r3, ip
 8022ed8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022edc:	d01f      	beq.n	8022f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8022ede:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022ee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ee2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022ee6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022eea:	fb0e f707 	mul.w	r7, lr, r7
 8022eee:	fb0e fe0c 	mul.w	lr, lr, ip
 8022ef2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022ef6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022efa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022efe:	44bc      	add	ip, r7
 8022f00:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022f04:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022f08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f14:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022f18:	ea4c 020e 	orr.w	r2, ip, lr
 8022f1c:	920e      	str	r2, [sp, #56]	; 0x38
 8022f1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022f22:	d01e      	beq.n	8022f62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8022f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f26:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022f2a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022f2e:	fb0a fe0e 	mul.w	lr, sl, lr
 8022f32:	fb0a fa07 	mul.w	sl, sl, r7
 8022f36:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022f3a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022f3e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022f42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022f4a:	44f4      	add	ip, lr
 8022f4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022f50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022f58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f5c:	ea4c 020a 	orr.w	r2, ip, sl
 8022f60:	920a      	str	r2, [sp, #40]	; 0x28
 8022f62:	2eff      	cmp	r6, #255	; 0xff
 8022f64:	d01c      	beq.n	8022fa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8022f66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022f68:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022f6c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022f70:	fb06 fe0e 	mul.w	lr, r6, lr
 8022f74:	437e      	muls	r6, r7
 8022f76:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022f7a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022f7e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022f82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f86:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022f8a:	44f4      	add	ip, lr
 8022f8c:	0a36      	lsrs	r6, r6, #8
 8022f8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f92:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022f96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f9a:	ea4c 0206 	orr.w	r2, ip, r6
 8022f9e:	920f      	str	r2, [sp, #60]	; 0x3c
 8022fa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022fa2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022fa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022faa:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8022fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022fb0:	fb09 f606 	mul.w	r6, r9, r6
 8022fb4:	fb01 6607 	mla	r6, r1, r7, r6
 8022fb8:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8022fbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022fbe:	fb00 6607 	mla	r6, r0, r7, r6
 8022fc2:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8022fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022fc8:	fb0b 6607 	mla	r6, fp, r7, r6
 8022fcc:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022fd2:	fb09 f907 	mul.w	r9, r9, r7
 8022fd6:	0a36      	lsrs	r6, r6, #8
 8022fd8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022fdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022fde:	fb01 9303 	mla	r3, r1, r3, r9
 8022fe2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022fe6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022fea:	fb00 330c 	mla	r3, r0, ip, r3
 8022fee:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8022ff2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ff4:	43da      	mvns	r2, r3
 8022ff6:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8022ffa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ffe:	b2d2      	uxtb	r2, r2
 8023000:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023004:	fb03 f102 	mul.w	r1, r3, r2
 8023008:	ea46 060e 	orr.w	r6, r6, lr
 802300c:	1c4b      	adds	r3, r1, #1
 802300e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023012:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023016:	f808 3c03 	strb.w	r3, [r8, #-3]
 802301a:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 802301e:	4353      	muls	r3, r2
 8023020:	1c59      	adds	r1, r3, #1
 8023022:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023026:	0a33      	lsrs	r3, r6, #8
 8023028:	0c36      	lsrs	r6, r6, #16
 802302a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802302e:	f808 3c02 	strb.w	r3, [r8, #-2]
 8023032:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8023036:	435a      	muls	r2, r3
 8023038:	1c53      	adds	r3, r2, #1
 802303a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802303e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023042:	f808 6c01 	strb.w	r6, [r8, #-1]
 8023046:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023048:	f108 0803 	add.w	r8, r8, #3
 802304c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802304e:	4413      	add	r3, r2
 8023050:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023052:	9329      	str	r3, [sp, #164]	; 0xa4
 8023054:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023056:	4413      	add	r3, r2
 8023058:	932a      	str	r3, [sp, #168]	; 0xa8
 802305a:	9b07      	ldr	r3, [sp, #28]
 802305c:	3b01      	subs	r3, #1
 802305e:	e508      	b.n	8022a72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8023060:	b158      	cbz	r0, 802307a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8023062:	5d31      	ldrb	r1, [r6, r4]
 8023064:	26ff      	movs	r6, #255	; 0xff
 8023066:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802306a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802306e:	910a      	str	r1, [sp, #40]	; 0x28
 8023070:	46b6      	mov	lr, r6
 8023072:	e6f6      	b.n	8022e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023074:	26ff      	movs	r6, #255	; 0xff
 8023076:	46b2      	mov	sl, r6
 8023078:	e6f3      	b.n	8022e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802307a:	26ff      	movs	r6, #255	; 0xff
 802307c:	46b2      	mov	sl, r6
 802307e:	e7f7      	b.n	8023070 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8023080:	b017      	add	sp, #92	; 0x5c
 8023082:	ecbd 8b08 	vpop	{d8-d11}
 8023086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802308c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023090:	b08d      	sub	sp, #52	; 0x34
 8023092:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8023096:	9103      	str	r1, [sp, #12]
 8023098:	fb07 5803 	mla	r8, r7, r3, r5
 802309c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80230a0:	9803      	ldr	r0, [sp, #12]
 80230a2:	2f00      	cmp	r7, #0
 80230a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80230a6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80230aa:	9903      	ldr	r1, [sp, #12]
 80230ac:	9c03      	ldr	r4, [sp, #12]
 80230ae:	eb02 0608 	add.w	r6, r2, r8
 80230b2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80230b6:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80230ba:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80230be:	7809      	ldrb	r1, [r1, #0]
 80230c0:	7840      	ldrb	r0, [r0, #1]
 80230c2:	78a4      	ldrb	r4, [r4, #2]
 80230c4:	db51      	blt.n	802316a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80230c6:	45be      	cmp	lr, r7
 80230c8:	dd4f      	ble.n	802316a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80230ca:	2d00      	cmp	r5, #0
 80230cc:	db49      	blt.n	8023162 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80230ce:	42ab      	cmp	r3, r5
 80230d0:	dd47      	ble.n	8023162 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80230d2:	f812 2008 	ldrb.w	r2, [r2, r8]
 80230d6:	9204      	str	r2, [sp, #16]
 80230d8:	7872      	ldrb	r2, [r6, #1]
 80230da:	9205      	str	r2, [sp, #20]
 80230dc:	78b2      	ldrb	r2, [r6, #2]
 80230de:	9206      	str	r2, [sp, #24]
 80230e0:	1c6a      	adds	r2, r5, #1
 80230e2:	d449      	bmi.n	8023178 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80230e4:	4293      	cmp	r3, r2
 80230e6:	dd47      	ble.n	8023178 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80230e8:	f1bc 0f00 	cmp.w	ip, #0
 80230ec:	d044      	beq.n	8023178 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80230ee:	7972      	ldrb	r2, [r6, #5]
 80230f0:	f896 b003 	ldrb.w	fp, [r6, #3]
 80230f4:	f896 a004 	ldrb.w	sl, [r6, #4]
 80230f8:	9201      	str	r2, [sp, #4]
 80230fa:	3701      	adds	r7, #1
 80230fc:	d444      	bmi.n	8023188 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80230fe:	45be      	cmp	lr, r7
 8023100:	dd42      	ble.n	8023188 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8023102:	f1b9 0f00 	cmp.w	r9, #0
 8023106:	f000 80c1 	beq.w	802328c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 802310a:	2d00      	cmp	r5, #0
 802310c:	db38      	blt.n	8023180 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802310e:	42ab      	cmp	r3, r5
 8023110:	dd36      	ble.n	8023180 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8023112:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023116:	f816 8002 	ldrb.w	r8, [r6, r2]
 802311a:	2203      	movs	r2, #3
 802311c:	fb03 6702 	mla	r7, r3, r2, r6
 8023120:	fb03 6202 	mla	r2, r3, r2, r6
 8023124:	787f      	ldrb	r7, [r7, #1]
 8023126:	f892 e002 	ldrb.w	lr, [r2, #2]
 802312a:	9702      	str	r7, [sp, #8]
 802312c:	3501      	adds	r5, #1
 802312e:	d432      	bmi.n	8023196 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023130:	42ab      	cmp	r3, r5
 8023132:	dd30      	ble.n	8023196 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023134:	f1bc 0f00 	cmp.w	ip, #0
 8023138:	d031      	beq.n	802319e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 802313a:	2703      	movs	r7, #3
 802313c:	fb13 7207 	smlabb	r2, r3, r7, r7
 8023140:	5cb5      	ldrb	r5, [r6, r2]
 8023142:	fb03 6207 	mla	r2, r3, r7, r6
 8023146:	fb03 6307 	mla	r3, r3, r7, r6
 802314a:	7912      	ldrb	r2, [r2, #4]
 802314c:	795e      	ldrb	r6, [r3, #5]
 802314e:	f1bc 0f0f 	cmp.w	ip, #15
 8023152:	d927      	bls.n	80231a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8023154:	4b53      	ldr	r3, [pc, #332]	; (80232a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8023156:	f240 11a5 	movw	r1, #421	; 0x1a5
 802315a:	4a53      	ldr	r2, [pc, #332]	; (80232a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 802315c:	4853      	ldr	r0, [pc, #332]	; (80232ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802315e:	f004 fad9 	bl	8027714 <__assert_func>
 8023162:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8023166:	9104      	str	r1, [sp, #16]
 8023168:	e7ba      	b.n	80230e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802316a:	9401      	str	r4, [sp, #4]
 802316c:	4682      	mov	sl, r0
 802316e:	468b      	mov	fp, r1
 8023170:	9104      	str	r1, [sp, #16]
 8023172:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8023176:	e7c0      	b.n	80230fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023178:	9401      	str	r4, [sp, #4]
 802317a:	4682      	mov	sl, r0
 802317c:	468b      	mov	fp, r1
 802317e:	e7bc      	b.n	80230fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023180:	46a6      	mov	lr, r4
 8023182:	9002      	str	r0, [sp, #8]
 8023184:	4688      	mov	r8, r1
 8023186:	e7d1      	b.n	802312c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8023188:	4626      	mov	r6, r4
 802318a:	4602      	mov	r2, r0
 802318c:	460d      	mov	r5, r1
 802318e:	46a6      	mov	lr, r4
 8023190:	9002      	str	r0, [sp, #8]
 8023192:	4688      	mov	r8, r1
 8023194:	e7db      	b.n	802314e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8023196:	4626      	mov	r6, r4
 8023198:	4602      	mov	r2, r0
 802319a:	460d      	mov	r5, r1
 802319c:	e7d7      	b.n	802314e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802319e:	4626      	mov	r6, r4
 80231a0:	4602      	mov	r2, r0
 80231a2:	460d      	mov	r5, r1
 80231a4:	f1b9 0f0f 	cmp.w	r9, #15
 80231a8:	d8d4      	bhi.n	8023154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80231aa:	fa1f f38c 	uxth.w	r3, ip
 80231ae:	fa1f fc89 	uxth.w	ip, r9
 80231b2:	fb03 f70c 	mul.w	r7, r3, ip
 80231b6:	011b      	lsls	r3, r3, #4
 80231b8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80231bc:	9707      	str	r7, [sp, #28]
 80231be:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80231c2:	fa1f fc8c 	uxth.w	ip, ip
 80231c6:	eba7 070c 	sub.w	r7, r7, ip
 80231ca:	b2bf      	uxth	r7, r7
 80231cc:	9709      	str	r7, [sp, #36]	; 0x24
 80231ce:	9f07      	ldr	r7, [sp, #28]
 80231d0:	1bdb      	subs	r3, r3, r7
 80231d2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80231d6:	b29b      	uxth	r3, r3
 80231d8:	9708      	str	r7, [sp, #32]
 80231da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80231dc:	930a      	str	r3, [sp, #40]	; 0x28
 80231de:	ea6f 0907 	mvn.w	r9, r7
 80231e2:	fb03 fb0b 	mul.w	fp, r3, fp
 80231e6:	9f04      	ldr	r7, [sp, #16]
 80231e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231ea:	fa5f f989 	uxtb.w	r9, r9
 80231ee:	fb03 bb07 	mla	fp, r3, r7, fp
 80231f2:	9f07      	ldr	r7, [sp, #28]
 80231f4:	fb11 f109 	smulbb	r1, r1, r9
 80231f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231fa:	fb0c b808 	mla	r8, ip, r8, fp
 80231fe:	fb10 f009 	smulbb	r0, r0, r9
 8023202:	fb14 f409 	smulbb	r4, r4, r9
 8023206:	fb07 8805 	mla	r8, r7, r5, r8
 802320a:	9d08      	ldr	r5, [sp, #32]
 802320c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802320e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023212:	fb08 1805 	mla	r8, r8, r5, r1
 8023216:	9d05      	ldr	r5, [sp, #20]
 8023218:	fa1f f888 	uxth.w	r8, r8
 802321c:	f108 0101 	add.w	r1, r8, #1
 8023220:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023224:	9903      	ldr	r1, [sp, #12]
 8023226:	ea4f 2828 	mov.w	r8, r8, asr #8
 802322a:	f881 8000 	strb.w	r8, [r1]
 802322e:	fb03 f10a 	mul.w	r1, r3, sl
 8023232:	fb07 1105 	mla	r1, r7, r5, r1
 8023236:	9d02      	ldr	r5, [sp, #8]
 8023238:	fb0c 1105 	mla	r1, ip, r5, r1
 802323c:	9d07      	ldr	r5, [sp, #28]
 802323e:	fb05 1102 	mla	r1, r5, r2, r1
 8023242:	9a08      	ldr	r2, [sp, #32]
 8023244:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023248:	fb01 0102 	mla	r1, r1, r2, r0
 802324c:	9a03      	ldr	r2, [sp, #12]
 802324e:	b289      	uxth	r1, r1
 8023250:	1c48      	adds	r0, r1, #1
 8023252:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023256:	1209      	asrs	r1, r1, #8
 8023258:	7051      	strb	r1, [r2, #1]
 802325a:	9a01      	ldr	r2, [sp, #4]
 802325c:	4353      	muls	r3, r2
 802325e:	9a06      	ldr	r2, [sp, #24]
 8023260:	fb07 3702 	mla	r7, r7, r2, r3
 8023264:	9b08      	ldr	r3, [sp, #32]
 8023266:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802326a:	fb05 c606 	mla	r6, r5, r6, ip
 802326e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023272:	fb06 4603 	mla	r6, r6, r3, r4
 8023276:	9b03      	ldr	r3, [sp, #12]
 8023278:	b2b6      	uxth	r6, r6
 802327a:	f106 0e01 	add.w	lr, r6, #1
 802327e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023282:	1236      	asrs	r6, r6, #8
 8023284:	709e      	strb	r6, [r3, #2]
 8023286:	b00d      	add	sp, #52	; 0x34
 8023288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802328c:	f1bc 0f0f 	cmp.w	ip, #15
 8023290:	f63f af60 	bhi.w	8023154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8023294:	4626      	mov	r6, r4
 8023296:	4602      	mov	r2, r0
 8023298:	460d      	mov	r5, r1
 802329a:	46a6      	mov	lr, r4
 802329c:	9002      	str	r0, [sp, #8]
 802329e:	4688      	mov	r8, r1
 80232a0:	e783      	b.n	80231aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80232a2:	bf00      	nop
 80232a4:	0802ce3d 	.word	0x0802ce3d
 80232a8:	0802d332 	.word	0x0802d332
 80232ac:	0802cf06 	.word	0x0802cf06

080232b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80232b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232b4:	ed2d 8b08 	vpush	{d8-d11}
 80232b8:	b0a1      	sub	sp, #132	; 0x84
 80232ba:	eeb0 aa40 	vmov.f32	s20, s0
 80232be:	eef0 9a60 	vmov.f32	s19, s1
 80232c2:	9307      	str	r3, [sp, #28]
 80232c4:	eeb0 9a41 	vmov.f32	s18, s2
 80232c8:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80232cc:	eeb0 8a62 	vmov.f32	s16, s5
 80232d0:	9210      	str	r2, [sp, #64]	; 0x40
 80232d2:	eef0 8a43 	vmov.f32	s17, s6
 80232d6:	9308      	str	r3, [sp, #32]
 80232d8:	eef0 ba44 	vmov.f32	s23, s8
 80232dc:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80232e0:	eeb0 ba64 	vmov.f32	s22, s9
 80232e4:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80232e6:	eef0 aa45 	vmov.f32	s21, s10
 80232ea:	930a      	str	r3, [sp, #40]	; 0x28
 80232ec:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80232f0:	901f      	str	r0, [sp, #124]	; 0x7c
 80232f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80232f4:	6850      	ldr	r0, [r2, #4]
 80232f6:	910e      	str	r1, [sp, #56]	; 0x38
 80232f8:	6812      	ldr	r2, [r2, #0]
 80232fa:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80232fe:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8023302:	fb00 1303 	mla	r3, r0, r3, r1
 8023306:	9908      	ldr	r1, [sp, #32]
 8023308:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802330c:	18d3      	adds	r3, r2, r3
 802330e:	2203      	movs	r2, #3
 8023310:	9309      	str	r3, [sp, #36]	; 0x24
 8023312:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8023314:	681b      	ldr	r3, [r3, #0]
 8023316:	930c      	str	r3, [sp, #48]	; 0x30
 8023318:	f06f 0304 	mvn.w	r3, #4
 802331c:	fb11 3302 	smlabb	r3, r1, r2, r3
 8023320:	930d      	str	r3, [sp, #52]	; 0x34
 8023322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023324:	43db      	mvns	r3, r3
 8023326:	b2db      	uxtb	r3, r3
 8023328:	930b      	str	r3, [sp, #44]	; 0x2c
 802332a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802332c:	2b00      	cmp	r3, #0
 802332e:	dc03      	bgt.n	8023338 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8023330:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023332:	2b00      	cmp	r3, #0
 8023334:	f340 81df 	ble.w	80236f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023338:	9b07      	ldr	r3, [sp, #28]
 802333a:	2b00      	cmp	r3, #0
 802333c:	f340 80f2 	ble.w	8023524 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8023340:	ea5f 4228 	movs.w	r2, r8, asr #16
 8023344:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023348:	d430      	bmi.n	80233ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802334a:	1c51      	adds	r1, r2, #1
 802334c:	9808      	ldr	r0, [sp, #32]
 802334e:	4281      	cmp	r1, r0
 8023350:	da2f      	bge.n	80233b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023352:	2b00      	cmp	r3, #0
 8023354:	db2d      	blt.n	80233b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023356:	1c59      	adds	r1, r3, #1
 8023358:	980a      	ldr	r0, [sp, #40]	; 0x28
 802335a:	4288      	cmp	r0, r1
 802335c:	dd29      	ble.n	80233b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802335e:	9b07      	ldr	r3, [sp, #28]
 8023360:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8023362:	3b01      	subs	r3, #1
 8023364:	fb02 8203 	mla	r2, r2, r3, r8
 8023368:	1412      	asrs	r2, r2, #16
 802336a:	d42d      	bmi.n	80233c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802336c:	3201      	adds	r2, #1
 802336e:	9908      	ldr	r1, [sp, #32]
 8023370:	4291      	cmp	r1, r2
 8023372:	dd29      	ble.n	80233c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023374:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8023376:	fb02 b303 	mla	r3, r2, r3, fp
 802337a:	141b      	asrs	r3, r3, #16
 802337c:	d424      	bmi.n	80233c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802337e:	3301      	adds	r3, #1
 8023380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023382:	429a      	cmp	r2, r3
 8023384:	dd20      	ble.n	80233c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023388:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802338c:	1cde      	adds	r6, r3, #3
 802338e:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8023392:	f1bc 0f00 	cmp.w	ip, #0
 8023396:	f300 811f 	bgt.w	80235d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802339a:	9b07      	ldr	r3, [sp, #28]
 802339c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80233a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80233a6:	4423      	add	r3, r4
 80233a8:	9309      	str	r3, [sp, #36]	; 0x24
 80233aa:	e0bd      	b.n	8023528 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80233ac:	1c57      	adds	r7, r2, #1
 80233ae:	f040 80ae 	bne.w	802350e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80233b2:	9908      	ldr	r1, [sp, #32]
 80233b4:	428a      	cmp	r2, r1
 80233b6:	f280 80aa 	bge.w	802350e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80233ba:	1c5e      	adds	r6, r3, #1
 80233bc:	f2c0 80a7 	blt.w	802350e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80233c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80233c2:	4293      	cmp	r3, r2
 80233c4:	f280 80a3 	bge.w	802350e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80233c8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80233cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80233ce:	f1ba 0f00 	cmp.w	sl, #0
 80233d2:	dde2      	ble.n	802339a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80233d4:	ea5f 4028 	movs.w	r0, r8, asr #16
 80233d8:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80233dc:	ea4f 412b 	mov.w	r1, fp, asr #16
 80233e0:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80233e4:	f100 80df 	bmi.w	80235a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80233e8:	1c45      	adds	r5, r0, #1
 80233ea:	9f08      	ldr	r7, [sp, #32]
 80233ec:	42af      	cmp	r7, r5
 80233ee:	f340 80dc 	ble.w	80235aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80233f2:	2900      	cmp	r1, #0
 80233f4:	f2c0 80d9 	blt.w	80235aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80233f8:	1c4d      	adds	r5, r1, #1
 80233fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80233fc:	42af      	cmp	r7, r5
 80233fe:	f340 80d4 	ble.w	80235aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8023402:	9d08      	ldr	r5, [sp, #32]
 8023404:	fb05 0101 	mla	r1, r5, r1, r0
 8023408:	980c      	ldr	r0, [sp, #48]	; 0x30
 802340a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802340e:	1845      	adds	r5, r0, r1
 8023410:	5c40      	ldrb	r0, [r0, r1]
 8023412:	792f      	ldrb	r7, [r5, #4]
 8023414:	7869      	ldrb	r1, [r5, #1]
 8023416:	9711      	str	r7, [sp, #68]	; 0x44
 8023418:	796f      	ldrb	r7, [r5, #5]
 802341a:	f895 e002 	ldrb.w	lr, [r5, #2]
 802341e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8023422:	9712      	str	r7, [sp, #72]	; 0x48
 8023424:	b17a      	cbz	r2, 8023446 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8023426:	3505      	adds	r5, #5
 8023428:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802342a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802342c:	19ef      	adds	r7, r5, r7
 802342e:	5d2d      	ldrb	r5, [r5, r4]
 8023430:	787c      	ldrb	r4, [r7, #1]
 8023432:	9513      	str	r5, [sp, #76]	; 0x4c
 8023434:	9415      	str	r4, [sp, #84]	; 0x54
 8023436:	78bc      	ldrb	r4, [r7, #2]
 8023438:	9417      	str	r4, [sp, #92]	; 0x5c
 802343a:	78fc      	ldrb	r4, [r7, #3]
 802343c:	9414      	str	r4, [sp, #80]	; 0x50
 802343e:	793c      	ldrb	r4, [r7, #4]
 8023440:	9416      	str	r4, [sp, #88]	; 0x58
 8023442:	797c      	ldrb	r4, [r7, #5]
 8023444:	9418      	str	r4, [sp, #96]	; 0x60
 8023446:	b29b      	uxth	r3, r3
 8023448:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802344a:	b292      	uxth	r2, r2
 802344c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8023450:	fb03 f702 	mul.w	r7, r3, r2
 8023454:	011b      	lsls	r3, r3, #4
 8023456:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 802345a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802345e:	1bdb      	subs	r3, r3, r7
 8023460:	b292      	uxth	r2, r2
 8023462:	b29b      	uxth	r3, r3
 8023464:	ebac 0c02 	sub.w	ip, ip, r2
 8023468:	fb03 f909 	mul.w	r9, r3, r9
 802346c:	fa1f fc8c 	uxth.w	ip, ip
 8023470:	fb0c 9000 	mla	r0, ip, r0, r9
 8023474:	f896 9000 	ldrb.w	r9, [r6]
 8023478:	fb02 0004 	mla	r0, r2, r4, r0
 802347c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802347e:	fb07 0004 	mla	r0, r7, r4, r0
 8023482:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023484:	fb19 f904 	smulbb	r9, r9, r4
 8023488:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802348c:	fb00 9005 	mla	r0, r0, r5, r9
 8023490:	b280      	uxth	r0, r0
 8023492:	f100 0901 	add.w	r9, r0, #1
 8023496:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802349a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802349c:	4358      	muls	r0, r3
 802349e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80234a2:	fb0c 0101 	mla	r1, ip, r1, r0
 80234a6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80234a8:	f886 9000 	strb.w	r9, [r6]
 80234ac:	fb02 1100 	mla	r1, r2, r0, r1
 80234b0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80234b2:	fb07 1100 	mla	r1, r7, r0, r1
 80234b6:	7870      	ldrb	r0, [r6, #1]
 80234b8:	fb10 f004 	smulbb	r0, r0, r4
 80234bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80234c0:	fb01 0105 	mla	r1, r1, r5, r0
 80234c4:	b289      	uxth	r1, r1
 80234c6:	1c48      	adds	r0, r1, #1
 80234c8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80234cc:	1209      	asrs	r1, r1, #8
 80234ce:	7071      	strb	r1, [r6, #1]
 80234d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80234d2:	434b      	muls	r3, r1
 80234d4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80234d6:	fb0c 330e 	mla	r3, ip, lr, r3
 80234da:	fb02 3201 	mla	r2, r2, r1, r3
 80234de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80234e0:	fb07 2703 	mla	r7, r7, r3, r2
 80234e4:	78b2      	ldrb	r2, [r6, #2]
 80234e6:	fb12 f204 	smulbb	r2, r2, r4
 80234ea:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80234ee:	fb07 2505 	mla	r5, r7, r5, r2
 80234f2:	b2ad      	uxth	r5, r5
 80234f4:	1c6f      	adds	r7, r5, #1
 80234f6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80234fa:	122d      	asrs	r5, r5, #8
 80234fc:	70b5      	strb	r5, [r6, #2]
 80234fe:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8023500:	3603      	adds	r6, #3
 8023502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023506:	4498      	add	r8, r3
 8023508:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802350a:	449b      	add	fp, r3
 802350c:	e75f      	b.n	80233ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802350e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8023510:	4498      	add	r8, r3
 8023512:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023514:	449b      	add	fp, r3
 8023516:	9b07      	ldr	r3, [sp, #28]
 8023518:	3b01      	subs	r3, #1
 802351a:	9307      	str	r3, [sp, #28]
 802351c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802351e:	3303      	adds	r3, #3
 8023520:	9309      	str	r3, [sp, #36]	; 0x24
 8023522:	e709      	b.n	8023338 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8023524:	f47f af1b 	bne.w	802335e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8023528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802352a:	2b00      	cmp	r3, #0
 802352c:	f340 80e3 	ble.w	80236f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023534:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023536:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802353a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802353e:	eef0 6a48 	vmov.f32	s13, s16
 8023542:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023546:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802354a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802354e:	ee16 8a90 	vmov	r8, s13
 8023552:	eef0 6a68 	vmov.f32	s13, s17
 8023556:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802355a:	ee16 ba90 	vmov	fp, s13
 802355e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023562:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023566:	ee37 8a48 	vsub.f32	s16, s14, s16
 802356a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802356e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023572:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023576:	ee18 2a10 	vmov	r2, s16
 802357a:	eeb0 8a47 	vmov.f32	s16, s14
 802357e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023582:	ee18 2a90 	vmov	r2, s17
 8023586:	9335      	str	r3, [sp, #212]	; 0xd4
 8023588:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802358a:	eef0 8a67 	vmov.f32	s17, s15
 802358e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023592:	9336      	str	r3, [sp, #216]	; 0xd8
 8023594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023596:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023598:	3b01      	subs	r3, #1
 802359a:	930e      	str	r3, [sp, #56]	; 0x38
 802359c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802359e:	bf08      	it	eq
 80235a0:	4613      	moveq	r3, r2
 80235a2:	9307      	str	r3, [sp, #28]
 80235a4:	e6c1      	b.n	802332a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80235a6:	1c45      	adds	r5, r0, #1
 80235a8:	d1a9      	bne.n	80234fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80235aa:	9c08      	ldr	r4, [sp, #32]
 80235ac:	42a0      	cmp	r0, r4
 80235ae:	daa6      	bge.n	80234fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80235b0:	1c4c      	adds	r4, r1, #1
 80235b2:	dba4      	blt.n	80234fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80235b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80235b6:	428c      	cmp	r4, r1
 80235b8:	dda1      	ble.n	80234fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80235ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80235bc:	9001      	str	r0, [sp, #4]
 80235be:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80235c0:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80235c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235c6:	4631      	mov	r1, r6
 80235c8:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80235cc:	9300      	str	r3, [sp, #0]
 80235ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80235d0:	9b08      	ldr	r3, [sp, #32]
 80235d2:	f7ff fd5b 	bl	802308c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80235d6:	e792      	b.n	80234fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80235d8:	ea4f 4228 	mov.w	r2, r8, asr #16
 80235dc:	9c08      	ldr	r4, [sp, #32]
 80235de:	ea4f 402b 	mov.w	r0, fp, asr #16
 80235e2:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80235e6:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80235ea:	fb04 2000 	mla	r0, r4, r0, r2
 80235ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80235f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80235f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80235f6:	4402      	add	r2, r0
 80235f8:	5c25      	ldrb	r5, [r4, r0]
 80235fa:	7894      	ldrb	r4, [r2, #2]
 80235fc:	7850      	ldrb	r0, [r2, #1]
 80235fe:	9411      	str	r4, [sp, #68]	; 0x44
 8023600:	7954      	ldrb	r4, [r2, #5]
 8023602:	f892 a003 	ldrb.w	sl, [r2, #3]
 8023606:	f892 9004 	ldrb.w	r9, [r2, #4]
 802360a:	9412      	str	r4, [sp, #72]	; 0x48
 802360c:	b171      	cbz	r1, 802362c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802360e:	3205      	adds	r2, #5
 8023610:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023612:	1917      	adds	r7, r2, r4
 8023614:	5d12      	ldrb	r2, [r2, r4]
 8023616:	9219      	str	r2, [sp, #100]	; 0x64
 8023618:	787a      	ldrb	r2, [r7, #1]
 802361a:	921b      	str	r2, [sp, #108]	; 0x6c
 802361c:	78ba      	ldrb	r2, [r7, #2]
 802361e:	921d      	str	r2, [sp, #116]	; 0x74
 8023620:	78fa      	ldrb	r2, [r7, #3]
 8023622:	921a      	str	r2, [sp, #104]	; 0x68
 8023624:	793a      	ldrb	r2, [r7, #4]
 8023626:	921c      	str	r2, [sp, #112]	; 0x70
 8023628:	797a      	ldrb	r2, [r7, #5]
 802362a:	921e      	str	r2, [sp, #120]	; 0x78
 802362c:	b29b      	uxth	r3, r3
 802362e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8023630:	b289      	uxth	r1, r1
 8023632:	3603      	adds	r6, #3
 8023634:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023638:	fb03 f201 	mul.w	r2, r3, r1
 802363c:	011b      	lsls	r3, r3, #4
 802363e:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8023642:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8023646:	1a9b      	subs	r3, r3, r2
 8023648:	b289      	uxth	r1, r1
 802364a:	b29b      	uxth	r3, r3
 802364c:	1a7f      	subs	r7, r7, r1
 802364e:	fb03 fa0a 	mul.w	sl, r3, sl
 8023652:	b2bf      	uxth	r7, r7
 8023654:	fb03 f909 	mul.w	r9, r3, r9
 8023658:	fb07 a505 	mla	r5, r7, r5, sl
 802365c:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8023660:	fb07 9000 	mla	r0, r7, r0, r9
 8023664:	fb01 5504 	mla	r5, r1, r4, r5
 8023668:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802366a:	fb02 5504 	mla	r5, r2, r4, r5
 802366e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023670:	fb1a fa04 	smulbb	sl, sl, r4
 8023674:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023678:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 802367a:	fb05 a50e 	mla	r5, r5, lr, sl
 802367e:	fb01 0004 	mla	r0, r1, r4, r0
 8023682:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023684:	b2ad      	uxth	r5, r5
 8023686:	fb02 0004 	mla	r0, r2, r4, r0
 802368a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802368c:	f105 0a01 	add.w	sl, r5, #1
 8023690:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023694:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8023698:	122d      	asrs	r5, r5, #8
 802369a:	f806 5c06 	strb.w	r5, [r6, #-6]
 802369e:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 80236a2:	fb15 f504 	smulbb	r5, r5, r4
 80236a6:	fb00 500e 	mla	r0, r0, lr, r5
 80236aa:	b280      	uxth	r0, r0
 80236ac:	1c45      	adds	r5, r0, #1
 80236ae:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80236b2:	1200      	asrs	r0, r0, #8
 80236b4:	f806 0c05 	strb.w	r0, [r6, #-5]
 80236b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80236ba:	4343      	muls	r3, r0
 80236bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80236be:	fb07 3300 	mla	r3, r7, r0, r3
 80236c2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80236c4:	fb01 3100 	mla	r1, r1, r0, r3
 80236c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80236ca:	fb02 1203 	mla	r2, r2, r3, r1
 80236ce:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80236d2:	fb11 f104 	smulbb	r1, r1, r4
 80236d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80236da:	fb02 120e 	mla	r2, r2, lr, r1
 80236de:	b292      	uxth	r2, r2
 80236e0:	1c53      	adds	r3, r2, #1
 80236e2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80236e6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80236e8:	1212      	asrs	r2, r2, #8
 80236ea:	4498      	add	r8, r3
 80236ec:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80236ee:	f806 2c04 	strb.w	r2, [r6, #-4]
 80236f2:	449b      	add	fp, r3
 80236f4:	e64d      	b.n	8023392 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80236f6:	b021      	add	sp, #132	; 0x84
 80236f8:	ecbd 8b08 	vpop	{d8-d11}
 80236fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023700 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8023700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023704:	b085      	sub	sp, #20
 8023706:	784d      	ldrb	r5, [r1, #1]
 8023708:	788e      	ldrb	r6, [r1, #2]
 802370a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802370e:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8023712:	9403      	str	r4, [sp, #12]
 8023714:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8023718:	780c      	ldrb	r4, [r1, #0]
 802371a:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802371e:	fb07 ce03 	mla	lr, r7, r3, ip
 8023722:	2f00      	cmp	r7, #0
 8023724:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023728:	eb02 0b0e 	add.w	fp, r2, lr
 802372c:	db56      	blt.n	80237dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802372e:	45b9      	cmp	r9, r7
 8023730:	dd54      	ble.n	80237dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8023732:	f1bc 0f00 	cmp.w	ip, #0
 8023736:	db4d      	blt.n	80237d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8023738:	4563      	cmp	r3, ip
 802373a:	dd4b      	ble.n	80237d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 802373c:	f812 200e 	ldrb.w	r2, [r2, lr]
 8023740:	9200      	str	r2, [sp, #0]
 8023742:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8023746:	9201      	str	r2, [sp, #4]
 8023748:	f89b 2002 	ldrb.w	r2, [fp, #2]
 802374c:	9202      	str	r2, [sp, #8]
 802374e:	f11c 0201 	adds.w	r2, ip, #1
 8023752:	d44a      	bmi.n	80237ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8023754:	4293      	cmp	r3, r2
 8023756:	dd48      	ble.n	80237ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8023758:	2800      	cmp	r0, #0
 802375a:	d046      	beq.n	80237ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802375c:	f89b e003 	ldrb.w	lr, [fp, #3]
 8023760:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8023764:	f89b a005 	ldrb.w	sl, [fp, #5]
 8023768:	3701      	adds	r7, #1
 802376a:	d446      	bmi.n	80237fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802376c:	45b9      	cmp	r9, r7
 802376e:	dd44      	ble.n	80237fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8023770:	9a03      	ldr	r2, [sp, #12]
 8023772:	2a00      	cmp	r2, #0
 8023774:	d045      	beq.n	8023802 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8023776:	f1bc 0f00 	cmp.w	ip, #0
 802377a:	db3a      	blt.n	80237f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802377c:	4563      	cmp	r3, ip
 802377e:	dd38      	ble.n	80237f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8023780:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023784:	f04f 0903 	mov.w	r9, #3
 8023788:	f81b 7002 	ldrb.w	r7, [fp, r2]
 802378c:	fb03 b209 	mla	r2, r3, r9, fp
 8023790:	fb03 b909 	mla	r9, r3, r9, fp
 8023794:	7852      	ldrb	r2, [r2, #1]
 8023796:	f899 9002 	ldrb.w	r9, [r9, #2]
 802379a:	f11c 0c01 	adds.w	ip, ip, #1
 802379e:	d40d      	bmi.n	80237bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80237a0:	4563      	cmp	r3, ip
 80237a2:	dd0b      	ble.n	80237bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80237a4:	b160      	cbz	r0, 80237c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80237a6:	2603      	movs	r6, #3
 80237a8:	fb13 6406 	smlabb	r4, r3, r6, r6
 80237ac:	fb03 b506 	mla	r5, r3, r6, fp
 80237b0:	fb03 b306 	mla	r3, r3, r6, fp
 80237b4:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80237b8:	792d      	ldrb	r5, [r5, #4]
 80237ba:	795e      	ldrb	r6, [r3, #5]
 80237bc:	280f      	cmp	r0, #15
 80237be:	d802      	bhi.n	80237c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80237c0:	9b03      	ldr	r3, [sp, #12]
 80237c2:	2b0f      	cmp	r3, #15
 80237c4:	d922      	bls.n	802380c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80237c6:	4b2f      	ldr	r3, [pc, #188]	; (8023884 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80237c8:	f240 11a5 	movw	r1, #421	; 0x1a5
 80237cc:	4a2e      	ldr	r2, [pc, #184]	; (8023888 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80237ce:	482f      	ldr	r0, [pc, #188]	; (802388c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80237d0:	f003 ffa0 	bl	8027714 <__assert_func>
 80237d4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80237d8:	9400      	str	r4, [sp, #0]
 80237da:	e7b8      	b.n	802374e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80237dc:	46b2      	mov	sl, r6
 80237de:	46a8      	mov	r8, r5
 80237e0:	46a6      	mov	lr, r4
 80237e2:	9400      	str	r4, [sp, #0]
 80237e4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80237e8:	e7be      	b.n	8023768 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80237ea:	46b2      	mov	sl, r6
 80237ec:	46a8      	mov	r8, r5
 80237ee:	46a6      	mov	lr, r4
 80237f0:	e7ba      	b.n	8023768 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80237f2:	46b1      	mov	r9, r6
 80237f4:	462a      	mov	r2, r5
 80237f6:	4627      	mov	r7, r4
 80237f8:	e7cf      	b.n	802379a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80237fa:	46b1      	mov	r9, r6
 80237fc:	462a      	mov	r2, r5
 80237fe:	4627      	mov	r7, r4
 8023800:	e7dc      	b.n	80237bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8023802:	280f      	cmp	r0, #15
 8023804:	d8df      	bhi.n	80237c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8023806:	46b1      	mov	r9, r6
 8023808:	462a      	mov	r2, r5
 802380a:	4627      	mov	r7, r4
 802380c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8023810:	b280      	uxth	r0, r0
 8023812:	fb00 f30b 	mul.w	r3, r0, fp
 8023816:	0100      	lsls	r0, r0, #4
 8023818:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 802381c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8023820:	1ac0      	subs	r0, r0, r3
 8023822:	fa1f fb8b 	uxth.w	fp, fp
 8023826:	b280      	uxth	r0, r0
 8023828:	ebac 0c0b 	sub.w	ip, ip, fp
 802382c:	9003      	str	r0, [sp, #12]
 802382e:	fa1f fc8c 	uxth.w	ip, ip
 8023832:	fb00 fe0e 	mul.w	lr, r0, lr
 8023836:	9800      	ldr	r0, [sp, #0]
 8023838:	fb0c ee00 	mla	lr, ip, r0, lr
 802383c:	9803      	ldr	r0, [sp, #12]
 802383e:	fb00 f808 	mul.w	r8, r0, r8
 8023842:	9801      	ldr	r0, [sp, #4]
 8023844:	fb0b ee07 	mla	lr, fp, r7, lr
 8023848:	fb0c 8800 	mla	r8, ip, r0, r8
 802384c:	fb03 ee04 	mla	lr, r3, r4, lr
 8023850:	fb0b 8202 	mla	r2, fp, r2, r8
 8023854:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023858:	fb03 2505 	mla	r5, r3, r5, r2
 802385c:	9a03      	ldr	r2, [sp, #12]
 802385e:	f881 e000 	strb.w	lr, [r1]
 8023862:	fb02 f00a 	mul.w	r0, r2, sl
 8023866:	9a02      	ldr	r2, [sp, #8]
 8023868:	122d      	asrs	r5, r5, #8
 802386a:	fb0c 0c02 	mla	ip, ip, r2, r0
 802386e:	704d      	strb	r5, [r1, #1]
 8023870:	fb0b c909 	mla	r9, fp, r9, ip
 8023874:	fb03 9606 	mla	r6, r3, r6, r9
 8023878:	1236      	asrs	r6, r6, #8
 802387a:	708e      	strb	r6, [r1, #2]
 802387c:	b005      	add	sp, #20
 802387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023882:	bf00      	nop
 8023884:	0802ce3d 	.word	0x0802ce3d
 8023888:	0802d332 	.word	0x0802d332
 802388c:	0802cf06 	.word	0x0802cf06

08023890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023894:	ed2d 8b0a 	vpush	{d8-d12}
 8023898:	b09d      	sub	sp, #116	; 0x74
 802389a:	eeb0 aa40 	vmov.f32	s20, s0
 802389e:	eef0 9a60 	vmov.f32	s19, s1
 80238a2:	9306      	str	r3, [sp, #24]
 80238a4:	eeb0 9a41 	vmov.f32	s18, s2
 80238a8:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80238ac:	eeb0 8a62 	vmov.f32	s16, s5
 80238b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80238b2:	eef0 8a43 	vmov.f32	s17, s6
 80238b6:	9307      	str	r3, [sp, #28]
 80238b8:	eeb0 ca44 	vmov.f32	s24, s8
 80238bc:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80238c0:	eef0 ba64 	vmov.f32	s23, s9
 80238c4:	eeb0 ba45 	vmov.f32	s22, s10
 80238c8:	9309      	str	r3, [sp, #36]	; 0x24
 80238ca:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80238ce:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80238d2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80238d4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80238d8:	6850      	ldr	r0, [r2, #4]
 80238da:	6812      	ldr	r2, [r2, #0]
 80238dc:	fb00 1303 	mla	r3, r0, r3, r1
 80238e0:	9907      	ldr	r1, [sp, #28]
 80238e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238e6:	18d3      	adds	r3, r2, r3
 80238e8:	2203      	movs	r2, #3
 80238ea:	9308      	str	r3, [sp, #32]
 80238ec:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80238ee:	681b      	ldr	r3, [r3, #0]
 80238f0:	930a      	str	r3, [sp, #40]	; 0x28
 80238f2:	f06f 0304 	mvn.w	r3, #4
 80238f6:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80238fa:	fb11 3302 	smlabb	r3, r1, r2, r3
 80238fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8023900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023902:	2b00      	cmp	r3, #0
 8023904:	dc03      	bgt.n	802390e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8023906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023908:	2b00      	cmp	r3, #0
 802390a:	f340 8193 	ble.w	8023c34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802390e:	9b06      	ldr	r3, [sp, #24]
 8023910:	2b00      	cmp	r3, #0
 8023912:	f340 80d0 	ble.w	8023ab6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8023916:	1432      	asrs	r2, r6, #16
 8023918:	ea4f 4325 	mov.w	r3, r5, asr #16
 802391c:	d42f      	bmi.n	802397e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802391e:	1c51      	adds	r1, r2, #1
 8023920:	9807      	ldr	r0, [sp, #28]
 8023922:	4281      	cmp	r1, r0
 8023924:	da2e      	bge.n	8023984 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023926:	2b00      	cmp	r3, #0
 8023928:	db2c      	blt.n	8023984 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802392a:	1c59      	adds	r1, r3, #1
 802392c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802392e:	4288      	cmp	r0, r1
 8023930:	dd28      	ble.n	8023984 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023932:	9b06      	ldr	r3, [sp, #24]
 8023934:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8023936:	3b01      	subs	r3, #1
 8023938:	fb02 6203 	mla	r2, r2, r3, r6
 802393c:	1412      	asrs	r2, r2, #16
 802393e:	d42c      	bmi.n	802399a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8023940:	3201      	adds	r2, #1
 8023942:	9907      	ldr	r1, [sp, #28]
 8023944:	4291      	cmp	r1, r2
 8023946:	dd28      	ble.n	802399a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8023948:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802394a:	fb02 5303 	mla	r3, r2, r3, r5
 802394e:	141b      	asrs	r3, r3, #16
 8023950:	d423      	bmi.n	802399a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8023952:	3301      	adds	r3, #1
 8023954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023956:	429a      	cmp	r2, r3
 8023958:	dd1f      	ble.n	802399a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802395a:	9b08      	ldr	r3, [sp, #32]
 802395c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8023960:	f103 0c03 	add.w	ip, r3, #3
 8023964:	f1be 0f00 	cmp.w	lr, #0
 8023968:	f300 80fa 	bgt.w	8023b60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 802396c:	9b06      	ldr	r3, [sp, #24]
 802396e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023972:	9b08      	ldr	r3, [sp, #32]
 8023974:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023978:	4423      	add	r3, r4
 802397a:	9308      	str	r3, [sp, #32]
 802397c:	e09d      	b.n	8023aba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802397e:	1c51      	adds	r1, r2, #1
 8023980:	f040 808e 	bne.w	8023aa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8023984:	9907      	ldr	r1, [sp, #28]
 8023986:	428a      	cmp	r2, r1
 8023988:	f280 808a 	bge.w	8023aa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802398c:	1c5f      	adds	r7, r3, #1
 802398e:	f2c0 8087 	blt.w	8023aa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8023992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023994:	4293      	cmp	r3, r2
 8023996:	f280 8083 	bge.w	8023aa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802399a:	9f06      	ldr	r7, [sp, #24]
 802399c:	f8dd a020 	ldr.w	sl, [sp, #32]
 80239a0:	2f00      	cmp	r7, #0
 80239a2:	dde3      	ble.n	802396c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80239a4:	1432      	asrs	r2, r6, #16
 80239a6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80239aa:	ea4f 4325 	mov.w	r3, r5, asr #16
 80239ae:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80239b2:	f100 80bf 	bmi.w	8023b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80239b6:	1c50      	adds	r0, r2, #1
 80239b8:	9c07      	ldr	r4, [sp, #28]
 80239ba:	4284      	cmp	r4, r0
 80239bc:	f340 80bc 	ble.w	8023b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80239c0:	2b00      	cmp	r3, #0
 80239c2:	f2c0 80b9 	blt.w	8023b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80239c6:	1c58      	adds	r0, r3, #1
 80239c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80239ca:	4284      	cmp	r4, r0
 80239cc:	f340 80b4 	ble.w	8023b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80239d0:	9807      	ldr	r0, [sp, #28]
 80239d2:	fb00 2303 	mla	r3, r0, r3, r2
 80239d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80239d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80239da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80239de:	441a      	add	r2, r3
 80239e0:	f810 c003 	ldrb.w	ip, [r0, r3]
 80239e4:	7953      	ldrb	r3, [r2, #5]
 80239e6:	7850      	ldrb	r0, [r2, #1]
 80239e8:	f892 e002 	ldrb.w	lr, [r2, #2]
 80239ec:	f892 9003 	ldrb.w	r9, [r2, #3]
 80239f0:	f892 8004 	ldrb.w	r8, [r2, #4]
 80239f4:	930e      	str	r3, [sp, #56]	; 0x38
 80239f6:	f1bb 0f00 	cmp.w	fp, #0
 80239fa:	d00f      	beq.n	8023a1c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80239fc:	3205      	adds	r2, #5
 80239fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023a02:	18d3      	adds	r3, r2, r3
 8023a04:	5d12      	ldrb	r2, [r2, r4]
 8023a06:	920f      	str	r2, [sp, #60]	; 0x3c
 8023a08:	785a      	ldrb	r2, [r3, #1]
 8023a0a:	9211      	str	r2, [sp, #68]	; 0x44
 8023a0c:	789a      	ldrb	r2, [r3, #2]
 8023a0e:	9213      	str	r2, [sp, #76]	; 0x4c
 8023a10:	78da      	ldrb	r2, [r3, #3]
 8023a12:	9210      	str	r2, [sp, #64]	; 0x40
 8023a14:	791a      	ldrb	r2, [r3, #4]
 8023a16:	795b      	ldrb	r3, [r3, #5]
 8023a18:	9212      	str	r2, [sp, #72]	; 0x48
 8023a1a:	9314      	str	r3, [sp, #80]	; 0x50
 8023a1c:	b28b      	uxth	r3, r1
 8023a1e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a20:	fa1f f28b 	uxth.w	r2, fp
 8023a24:	fb03 fb02 	mul.w	fp, r3, r2
 8023a28:	011b      	lsls	r3, r3, #4
 8023a2a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8023a2e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8023a32:	eba3 030b 	sub.w	r3, r3, fp
 8023a36:	b292      	uxth	r2, r2
 8023a38:	b29b      	uxth	r3, r3
 8023a3a:	1a89      	subs	r1, r1, r2
 8023a3c:	fb03 f808 	mul.w	r8, r3, r8
 8023a40:	b289      	uxth	r1, r1
 8023a42:	fb03 f909 	mul.w	r9, r3, r9
 8023a46:	fb01 8800 	mla	r8, r1, r0, r8
 8023a4a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023a4c:	fb01 990c 	mla	r9, r1, ip, r9
 8023a50:	fb02 8800 	mla	r8, r2, r0, r8
 8023a54:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023a56:	fb02 9904 	mla	r9, r2, r4, r9
 8023a5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023a5c:	fb0b 8800 	mla	r8, fp, r0, r8
 8023a60:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023a62:	fb0b 9904 	mla	r9, fp, r4, r9
 8023a66:	4343      	muls	r3, r0
 8023a68:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023a6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023a70:	fb01 330e 	mla	r3, r1, lr, r3
 8023a74:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8023a76:	f88a 9000 	strb.w	r9, [sl]
 8023a7a:	fb02 3201 	mla	r2, r2, r1, r3
 8023a7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023a80:	f88a 8001 	strb.w	r8, [sl, #1]
 8023a84:	fb0b 2b03 	mla	fp, fp, r3, r2
 8023a88:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8023a8c:	f88a b002 	strb.w	fp, [sl, #2]
 8023a90:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023a92:	f10a 0a03 	add.w	sl, sl, #3
 8023a96:	3f01      	subs	r7, #1
 8023a98:	441e      	add	r6, r3
 8023a9a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023a9c:	441d      	add	r5, r3
 8023a9e:	e77f      	b.n	80239a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8023aa0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023aa2:	441e      	add	r6, r3
 8023aa4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023aa6:	441d      	add	r5, r3
 8023aa8:	9b06      	ldr	r3, [sp, #24]
 8023aaa:	3b01      	subs	r3, #1
 8023aac:	9306      	str	r3, [sp, #24]
 8023aae:	9b08      	ldr	r3, [sp, #32]
 8023ab0:	3303      	adds	r3, #3
 8023ab2:	9308      	str	r3, [sp, #32]
 8023ab4:	e72b      	b.n	802390e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8023ab6:	f47f af3c 	bne.w	8023932 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8023aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	f340 80b9 	ble.w	8023c34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8023ac2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023ac6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023ac8:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023acc:	eef0 6a48 	vmov.f32	s13, s16
 8023ad0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023ad4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023ad8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023adc:	ee16 6a90 	vmov	r6, s13
 8023ae0:	eef0 6a68 	vmov.f32	s13, s17
 8023ae4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ae8:	ee16 5a90 	vmov	r5, s13
 8023aec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023af0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023af4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023af8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023afc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023b00:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023b04:	ee18 2a10 	vmov	r2, s16
 8023b08:	eeb0 8a47 	vmov.f32	s16, s14
 8023b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b10:	ee18 2a90 	vmov	r2, s17
 8023b14:	9333      	str	r3, [sp, #204]	; 0xcc
 8023b16:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023b18:	eef0 8a67 	vmov.f32	s17, s15
 8023b1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b20:	9334      	str	r3, [sp, #208]	; 0xd0
 8023b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023b26:	3b01      	subs	r3, #1
 8023b28:	930c      	str	r3, [sp, #48]	; 0x30
 8023b2a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023b2c:	bf08      	it	eq
 8023b2e:	4613      	moveq	r3, r2
 8023b30:	9306      	str	r3, [sp, #24]
 8023b32:	e6e5      	b.n	8023900 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023b34:	1c54      	adds	r4, r2, #1
 8023b36:	d1ab      	bne.n	8023a90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023b38:	9807      	ldr	r0, [sp, #28]
 8023b3a:	4282      	cmp	r2, r0
 8023b3c:	daa8      	bge.n	8023a90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023b3e:	1c58      	adds	r0, r3, #1
 8023b40:	dba6      	blt.n	8023a90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023b42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023b44:	4298      	cmp	r0, r3
 8023b46:	dda3      	ble.n	8023a90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023b48:	9000      	str	r0, [sp, #0]
 8023b4a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023b4c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8023b50:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8023b54:	9b07      	ldr	r3, [sp, #28]
 8023b56:	4651      	mov	r1, sl
 8023b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b5a:	f7ff fdd1 	bl	8023700 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8023b5e:	e797      	b.n	8023a90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023b60:	1431      	asrs	r1, r6, #16
 8023b62:	9c07      	ldr	r4, [sp, #28]
 8023b64:	1428      	asrs	r0, r5, #16
 8023b66:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023b6a:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8023b6e:	fb04 1000 	mla	r0, r4, r0, r1
 8023b72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023b74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023b76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023b7a:	4401      	add	r1, r0
 8023b7c:	5c20      	ldrb	r0, [r4, r0]
 8023b7e:	f891 8002 	ldrb.w	r8, [r1, #2]
 8023b82:	900e      	str	r0, [sp, #56]	; 0x38
 8023b84:	f891 a003 	ldrb.w	sl, [r1, #3]
 8023b88:	7848      	ldrb	r0, [r1, #1]
 8023b8a:	f891 9004 	ldrb.w	r9, [r1, #4]
 8023b8e:	f891 b005 	ldrb.w	fp, [r1, #5]
 8023b92:	b172      	cbz	r2, 8023bb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8023b94:	3105      	adds	r1, #5
 8023b96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b98:	190f      	adds	r7, r1, r4
 8023b9a:	5d09      	ldrb	r1, [r1, r4]
 8023b9c:	9115      	str	r1, [sp, #84]	; 0x54
 8023b9e:	7879      	ldrb	r1, [r7, #1]
 8023ba0:	9117      	str	r1, [sp, #92]	; 0x5c
 8023ba2:	78b9      	ldrb	r1, [r7, #2]
 8023ba4:	9119      	str	r1, [sp, #100]	; 0x64
 8023ba6:	78f9      	ldrb	r1, [r7, #3]
 8023ba8:	9116      	str	r1, [sp, #88]	; 0x58
 8023baa:	7939      	ldrb	r1, [r7, #4]
 8023bac:	9118      	str	r1, [sp, #96]	; 0x60
 8023bae:	7979      	ldrb	r1, [r7, #5]
 8023bb0:	911a      	str	r1, [sp, #104]	; 0x68
 8023bb2:	b29b      	uxth	r3, r3
 8023bb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023bb6:	b292      	uxth	r2, r2
 8023bb8:	f10c 0c03 	add.w	ip, ip, #3
 8023bbc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023bc0:	fb03 f102 	mul.w	r1, r3, r2
 8023bc4:	011b      	lsls	r3, r3, #4
 8023bc6:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8023bca:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8023bce:	1a5b      	subs	r3, r3, r1
 8023bd0:	b292      	uxth	r2, r2
 8023bd2:	b29b      	uxth	r3, r3
 8023bd4:	1abf      	subs	r7, r7, r2
 8023bd6:	fb03 f909 	mul.w	r9, r3, r9
 8023bda:	b2bf      	uxth	r7, r7
 8023bdc:	fb03 fa0a 	mul.w	sl, r3, sl
 8023be0:	fb03 f30b 	mul.w	r3, r3, fp
 8023be4:	fb07 9900 	mla	r9, r7, r0, r9
 8023be8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023bea:	fb07 aa04 	mla	sl, r7, r4, sl
 8023bee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023bf0:	fb02 9900 	mla	r9, r2, r0, r9
 8023bf4:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023bf6:	fb07 3308 	mla	r3, r7, r8, r3
 8023bfa:	fb01 9900 	mla	r9, r1, r0, r9
 8023bfe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023c00:	fb02 aa04 	mla	sl, r2, r4, sl
 8023c04:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023c06:	fb02 3200 	mla	r2, r2, r0, r3
 8023c0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023c0c:	fb01 aa04 	mla	sl, r1, r4, sl
 8023c10:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023c14:	fb01 2103 	mla	r1, r1, r3, r2
 8023c18:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023c1a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023c1e:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8023c22:	1209      	asrs	r1, r1, #8
 8023c24:	441e      	add	r6, r3
 8023c26:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023c28:	f80c ac06 	strb.w	sl, [ip, #-6]
 8023c2c:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8023c30:	441d      	add	r5, r3
 8023c32:	e697      	b.n	8023964 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8023c34:	b01d      	add	sp, #116	; 0x74
 8023c36:	ecbd 8b0a 	vpop	{d8-d12}
 8023c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023c40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8023c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c44:	b085      	sub	sp, #20
 8023c46:	7888      	ldrb	r0, [r1, #2]
 8023c48:	4691      	mov	r9, r2
 8023c4a:	9000      	str	r0, [sp, #0]
 8023c4c:	7848      	ldrb	r0, [r1, #1]
 8023c4e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8023c52:	9001      	str	r0, [sp, #4]
 8023c54:	7808      	ldrb	r0, [r1, #0]
 8023c56:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023c5a:	9002      	str	r0, [sp, #8]
 8023c5c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023c60:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8023c64:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023c68:	fb04 c603 	mla	r6, r4, r3, ip
 8023c6c:	2c00      	cmp	r4, #0
 8023c6e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8023c72:	9a00      	ldr	r2, [sp, #0]
 8023c74:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023c78:	9a01      	ldr	r2, [sp, #4]
 8023c7a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023c7e:	db3a      	blt.n	8023cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8023c80:	45a0      	cmp	r8, r4
 8023c82:	dd38      	ble.n	8023cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8023c84:	f1bc 0f00 	cmp.w	ip, #0
 8023c88:	db33      	blt.n	8023cf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8023c8a:	4563      	cmp	r3, ip
 8023c8c:	dd31      	ble.n	8023cf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8023c8e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8023c92:	f11c 0601 	adds.w	r6, ip, #1
 8023c96:	d431      	bmi.n	8023cfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8023c98:	42b3      	cmp	r3, r6
 8023c9a:	dd2f      	ble.n	8023cfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8023c9c:	b375      	cbz	r5, 8023cfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8023c9e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8023ca2:	3401      	adds	r4, #1
 8023ca4:	d42e      	bmi.n	8023d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8023ca6:	45a0      	cmp	r8, r4
 8023ca8:	dd2c      	ble.n	8023d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8023caa:	b35f      	cbz	r7, 8023d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8023cac:	f1bc 0f00 	cmp.w	ip, #0
 8023cb0:	db26      	blt.n	8023d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8023cb2:	4563      	cmp	r3, ip
 8023cb4:	dd24      	ble.n	8023d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8023cb6:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8023cba:	f11c 0c01 	adds.w	ip, ip, #1
 8023cbe:	d405      	bmi.n	8023ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023cc0:	4563      	cmp	r3, ip
 8023cc2:	dd03      	ble.n	8023ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023cc4:	b115      	cbz	r5, 8023ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023cc6:	3301      	adds	r3, #1
 8023cc8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8023ccc:	2d0f      	cmp	r5, #15
 8023cce:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023cd2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023cd6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023cda:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023cde:	d801      	bhi.n	8023ce4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8023ce0:	2f0f      	cmp	r7, #15
 8023ce2:	d911      	bls.n	8023d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8023ce4:	4b80      	ldr	r3, [pc, #512]	; (8023ee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8023ce6:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023cea:	4a80      	ldr	r2, [pc, #512]	; (8023eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8023cec:	4880      	ldr	r0, [pc, #512]	; (8023ef0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8023cee:	f003 fd11 	bl	8027714 <__assert_func>
 8023cf2:	4602      	mov	r2, r0
 8023cf4:	e7cd      	b.n	8023c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8023cf6:	4606      	mov	r6, r0
 8023cf8:	4602      	mov	r2, r0
 8023cfa:	e7d2      	b.n	8023ca2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8023cfc:	4606      	mov	r6, r0
 8023cfe:	e7d0      	b.n	8023ca2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8023d00:	4604      	mov	r4, r0
 8023d02:	e7da      	b.n	8023cba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8023d04:	4604      	mov	r4, r0
 8023d06:	e7e1      	b.n	8023ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023d08:	b2ab      	uxth	r3, r5
 8023d0a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023d0e:	b2bf      	uxth	r7, r7
 8023d10:	fb03 fe07 	mul.w	lr, r3, r7
 8023d14:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023d18:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023d1c:	eba3 0c0e 	sub.w	ip, r3, lr
 8023d20:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8023d24:	b2bf      	uxth	r7, r7
 8023d26:	fa1f fc8c 	uxth.w	ip, ip
 8023d2a:	eba5 0507 	sub.w	r5, r5, r7
 8023d2e:	fb0c f30a 	mul.w	r3, ip, sl
 8023d32:	b2ad      	uxth	r5, r5
 8023d34:	fb05 330b 	mla	r3, r5, fp, r3
 8023d38:	fb07 3309 	mla	r3, r7, r9, r3
 8023d3c:	fb0e 3308 	mla	r3, lr, r8, r3
 8023d40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d44:	9303      	str	r3, [sp, #12]
 8023d46:	d018      	beq.n	8023d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8023d48:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023d4c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023d50:	fb0b f303 	mul.w	r3, fp, r3
 8023d54:	fb0b fb02 	mul.w	fp, fp, r2
 8023d58:	0a1a      	lsrs	r2, r3, #8
 8023d5a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023d5e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023d62:	441a      	add	r2, r3
 8023d64:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023d68:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023d6c:	0a12      	lsrs	r2, r2, #8
 8023d6e:	0a1b      	lsrs	r3, r3, #8
 8023d70:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023d74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d78:	431a      	orrs	r2, r3
 8023d7a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023d7e:	d019      	beq.n	8023db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8023d80:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023d84:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023d88:	fb0a fb0b 	mul.w	fp, sl, fp
 8023d8c:	fb0a fa06 	mul.w	sl, sl, r6
 8023d90:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023d94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023d98:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023d9c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023da0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023da4:	445e      	add	r6, fp
 8023da6:	0a1b      	lsrs	r3, r3, #8
 8023da8:	0a36      	lsrs	r6, r6, #8
 8023daa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023dae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023db2:	431e      	orrs	r6, r3
 8023db4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023db8:	d019      	beq.n	8023dee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8023dba:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023dbe:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023dc2:	fb09 fa0a 	mul.w	sl, r9, sl
 8023dc6:	fb09 f904 	mul.w	r9, r9, r4
 8023dca:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023dce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023dd2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8023dd6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023dda:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023dde:	4454      	add	r4, sl
 8023de0:	0a1b      	lsrs	r3, r3, #8
 8023de2:	0a24      	lsrs	r4, r4, #8
 8023de4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023de8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023dec:	431c      	orrs	r4, r3
 8023dee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023df2:	d019      	beq.n	8023e28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8023df4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023df8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023dfc:	fb08 f909 	mul.w	r9, r8, r9
 8023e00:	fb08 f800 	mul.w	r8, r8, r0
 8023e04:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023e08:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023e0c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023e10:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023e14:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023e18:	4448      	add	r0, r9
 8023e1a:	0a1b      	lsrs	r3, r3, #8
 8023e1c:	0a00      	lsrs	r0, r0, #8
 8023e1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e22:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023e26:	4318      	orrs	r0, r3
 8023e28:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023e2c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023e30:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023e34:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023e38:	fb0c f808 	mul.w	r8, ip, r8
 8023e3c:	fb0c f606 	mul.w	r6, ip, r6
 8023e40:	fb05 8803 	mla	r8, r5, r3, r8
 8023e44:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023e48:	fb05 6202 	mla	r2, r5, r2, r6
 8023e4c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023e50:	fb07 8803 	mla	r8, r7, r3, r8
 8023e54:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023e58:	fb07 2704 	mla	r7, r7, r4, r2
 8023e5c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023e60:	fb0e 8303 	mla	r3, lr, r3, r8
 8023e64:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8023e68:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023e6c:	9803      	ldr	r0, [sp, #12]
 8023e6e:	b292      	uxth	r2, r2
 8023e70:	9c02      	ldr	r4, [sp, #8]
 8023e72:	0a1b      	lsrs	r3, r3, #8
 8023e74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e78:	4350      	muls	r0, r2
 8023e7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e7e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023e82:	ea43 0e0e 	orr.w	lr, r3, lr
 8023e86:	1c43      	adds	r3, r0, #1
 8023e88:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023e8c:	fa5f f08e 	uxtb.w	r0, lr
 8023e90:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023e94:	b2db      	uxtb	r3, r3
 8023e96:	fb14 f403 	smulbb	r4, r4, r3
 8023e9a:	fb00 4002 	mla	r0, r0, r2, r4
 8023e9e:	b280      	uxth	r0, r0
 8023ea0:	1c44      	adds	r4, r0, #1
 8023ea2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023ea6:	9c01      	ldr	r4, [sp, #4]
 8023ea8:	fb14 f403 	smulbb	r4, r4, r3
 8023eac:	1200      	asrs	r0, r0, #8
 8023eae:	7008      	strb	r0, [r1, #0]
 8023eb0:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8023eb4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8023eb8:	fb00 4002 	mla	r0, r0, r2, r4
 8023ebc:	b280      	uxth	r0, r0
 8023ebe:	1c44      	adds	r4, r0, #1
 8023ec0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023ec4:	1200      	asrs	r0, r0, #8
 8023ec6:	7048      	strb	r0, [r1, #1]
 8023ec8:	9800      	ldr	r0, [sp, #0]
 8023eca:	fb10 f303 	smulbb	r3, r0, r3
 8023ece:	fb0e 3202 	mla	r2, lr, r2, r3
 8023ed2:	b292      	uxth	r2, r2
 8023ed4:	f102 0e01 	add.w	lr, r2, #1
 8023ed8:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023edc:	1212      	asrs	r2, r2, #8
 8023ede:	708a      	strb	r2, [r1, #2]
 8023ee0:	b005      	add	sp, #20
 8023ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ee6:	bf00      	nop
 8023ee8:	0802ce3d 	.word	0x0802ce3d
 8023eec:	0802d332 	.word	0x0802d332
 8023ef0:	0802cf06 	.word	0x0802cf06

08023ef4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ef8:	ed2d 8b08 	vpush	{d8-d11}
 8023efc:	b099      	sub	sp, #100	; 0x64
 8023efe:	eeb0 aa40 	vmov.f32	s20, s0
 8023f02:	eef0 9a60 	vmov.f32	s19, s1
 8023f06:	9306      	str	r3, [sp, #24]
 8023f08:	eeb0 9a41 	vmov.f32	s18, s2
 8023f0c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8023f10:	eeb0 8a62 	vmov.f32	s16, s5
 8023f14:	9216      	str	r2, [sp, #88]	; 0x58
 8023f16:	eef0 8a43 	vmov.f32	s17, s6
 8023f1a:	9307      	str	r3, [sp, #28]
 8023f1c:	eef0 ba44 	vmov.f32	s23, s8
 8023f20:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8023f24:	eeb0 ba64 	vmov.f32	s22, s9
 8023f28:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023f2a:	eef0 aa45 	vmov.f32	s21, s10
 8023f2e:	9310      	str	r3, [sp, #64]	; 0x40
 8023f30:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8023f34:	9017      	str	r0, [sp, #92]	; 0x5c
 8023f36:	9112      	str	r1, [sp, #72]	; 0x48
 8023f38:	6850      	ldr	r0, [r2, #4]
 8023f3a:	9315      	str	r3, [sp, #84]	; 0x54
 8023f3c:	6812      	ldr	r2, [r2, #0]
 8023f3e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8023f40:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8023f44:	fb00 1303 	mla	r3, r0, r3, r1
 8023f48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023f4c:	18d3      	adds	r3, r2, r3
 8023f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8023f50:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023f52:	681b      	ldr	r3, [r3, #0]
 8023f54:	9311      	str	r3, [sp, #68]	; 0x44
 8023f56:	9b07      	ldr	r3, [sp, #28]
 8023f58:	009b      	lsls	r3, r3, #2
 8023f5a:	930e      	str	r3, [sp, #56]	; 0x38
 8023f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023f5e:	2b00      	cmp	r3, #0
 8023f60:	dc03      	bgt.n	8023f6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023f62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	f340 833b 	ble.w	80245e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8023f6a:	9b06      	ldr	r3, [sp, #24]
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	f340 8197 	ble.w	80242a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8023f72:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023f74:	1423      	asrs	r3, r4, #16
 8023f76:	1412      	asrs	r2, r2, #16
 8023f78:	d432      	bmi.n	8023fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8023f7a:	1c51      	adds	r1, r2, #1
 8023f7c:	9807      	ldr	r0, [sp, #28]
 8023f7e:	4288      	cmp	r0, r1
 8023f80:	dd31      	ble.n	8023fe6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023f82:	2b00      	cmp	r3, #0
 8023f84:	db2f      	blt.n	8023fe6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023f86:	1c59      	adds	r1, r3, #1
 8023f88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023f8a:	4288      	cmp	r0, r1
 8023f8c:	dd2b      	ble.n	8023fe6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023f8e:	9b06      	ldr	r3, [sp, #24]
 8023f90:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023f92:	3b01      	subs	r3, #1
 8023f94:	992b      	ldr	r1, [sp, #172]	; 0xac
 8023f96:	fb02 1203 	mla	r2, r2, r3, r1
 8023f9a:	1412      	asrs	r2, r2, #16
 8023f9c:	d42e      	bmi.n	8023ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8023f9e:	3201      	adds	r2, #1
 8023fa0:	9907      	ldr	r1, [sp, #28]
 8023fa2:	4291      	cmp	r1, r2
 8023fa4:	dd2a      	ble.n	8023ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8023fa6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023fa8:	fb02 4303 	mla	r3, r2, r3, r4
 8023fac:	141b      	asrs	r3, r3, #16
 8023fae:	d425      	bmi.n	8023ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8023fb0:	3301      	adds	r3, #1
 8023fb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023fb4:	429a      	cmp	r2, r3
 8023fb6:	dd21      	ble.n	8023ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8023fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023fba:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8023fbe:	f103 0e03 	add.w	lr, r3, #3
 8023fc2:	9b06      	ldr	r3, [sp, #24]
 8023fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8023fc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023fc8:	2b00      	cmp	r3, #0
 8023fca:	f300 81d2 	bgt.w	8024372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8023fce:	9b06      	ldr	r3, [sp, #24]
 8023fd0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023fd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023fda:	4423      	add	r3, r4
 8023fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8023fde:	e161      	b.n	80242a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8023fe0:	1c51      	adds	r1, r2, #1
 8023fe2:	f040 8150 	bne.w	8024286 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023fe6:	9907      	ldr	r1, [sp, #28]
 8023fe8:	428a      	cmp	r2, r1
 8023fea:	f280 814c 	bge.w	8024286 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023fee:	1c5a      	adds	r2, r3, #1
 8023ff0:	f2c0 8149 	blt.w	8024286 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023ff6:	4293      	cmp	r3, r2
 8023ff8:	f280 8145 	bge.w	8024286 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023ffc:	9b06      	ldr	r3, [sp, #24]
 8023ffe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024000:	9314      	str	r3, [sp, #80]	; 0x50
 8024002:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8024006:	9313      	str	r3, [sp, #76]	; 0x4c
 8024008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802400a:	2b00      	cmp	r3, #0
 802400c:	dddf      	ble.n	8023fce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 802400e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024010:	1423      	asrs	r3, r4, #16
 8024012:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024016:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802401a:	1412      	asrs	r2, r2, #16
 802401c:	f100 8190 	bmi.w	8024340 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8024020:	1c55      	adds	r5, r2, #1
 8024022:	9f07      	ldr	r7, [sp, #28]
 8024024:	42af      	cmp	r7, r5
 8024026:	f340 818d 	ble.w	8024344 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802402a:	2b00      	cmp	r3, #0
 802402c:	f2c0 818a 	blt.w	8024344 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024030:	1c5d      	adds	r5, r3, #1
 8024032:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024034:	42af      	cmp	r7, r5
 8024036:	f340 8185 	ble.w	8024344 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802403a:	9d07      	ldr	r5, [sp, #28]
 802403c:	fb03 2305 	mla	r3, r3, r5, r2
 8024040:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024042:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8024046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802404a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802404e:	2800      	cmp	r0, #0
 8024050:	f000 8167 	beq.w	8024322 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024054:	686a      	ldr	r2, [r5, #4]
 8024056:	920b      	str	r2, [sp, #44]	; 0x2c
 8024058:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802405c:	2900      	cmp	r1, #0
 802405e:	f000 8169 	beq.w	8024334 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8024062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024064:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024066:	18aa      	adds	r2, r5, r2
 8024068:	59ed      	ldr	r5, [r5, r7]
 802406a:	6852      	ldr	r2, [r2, #4]
 802406c:	9508      	str	r5, [sp, #32]
 802406e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8024072:	0e15      	lsrs	r5, r2, #24
 8024074:	920c      	str	r2, [sp, #48]	; 0x30
 8024076:	b280      	uxth	r0, r0
 8024078:	b289      	uxth	r1, r1
 802407a:	fb00 fb01 	mul.w	fp, r0, r1
 802407e:	0100      	lsls	r0, r0, #4
 8024080:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8024084:	eba0 090b 	sub.w	r9, r0, fp
 8024088:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802408c:	b289      	uxth	r1, r1
 802408e:	fa1f f989 	uxth.w	r9, r9
 8024092:	1a52      	subs	r2, r2, r1
 8024094:	fb09 f008 	mul.w	r0, r9, r8
 8024098:	b292      	uxth	r2, r2
 802409a:	fb02 000c 	mla	r0, r2, ip, r0
 802409e:	fb01 000a 	mla	r0, r1, sl, r0
 80240a2:	fb0b 0005 	mla	r0, fp, r5, r0
 80240a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80240aa:	2800      	cmp	r0, #0
 80240ac:	f000 80e0 	beq.w	8024270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80240b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80240b4:	d01b      	beq.n	80240ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80240b6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80240ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80240be:	fb0c fe0e 	mul.w	lr, ip, lr
 80240c2:	fb0c fc03 	mul.w	ip, ip, r3
 80240c6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80240ca:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80240ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80240d2:	4473      	add	r3, lr
 80240d4:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80240d8:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80240dc:	0a1b      	lsrs	r3, r3, #8
 80240de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80240e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80240e6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80240ea:	ea43 030e 	orr.w	r3, r3, lr
 80240ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80240f2:	d01e      	beq.n	8024132 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80240f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80240f6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80240fa:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80240fe:	fb08 fc0c 	mul.w	ip, r8, ip
 8024102:	fb08 f80e 	mul.w	r8, r8, lr
 8024106:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802410a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802410e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024112:	44e6      	add	lr, ip
 8024114:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8024118:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802411c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024120:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024124:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024128:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802412c:	ea4e 0708 	orr.w	r7, lr, r8
 8024130:	970b      	str	r7, [sp, #44]	; 0x2c
 8024132:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024136:	d01e      	beq.n	8024176 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024138:	9f08      	ldr	r7, [sp, #32]
 802413a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802413e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024142:	fb0a f808 	mul.w	r8, sl, r8
 8024146:	fb0a fa0c 	mul.w	sl, sl, ip
 802414a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802414e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024152:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024156:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802415a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802415e:	44c6      	add	lr, r8
 8024160:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024164:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024168:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802416c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024170:	ea4e 070a 	orr.w	r7, lr, sl
 8024174:	9708      	str	r7, [sp, #32]
 8024176:	2dff      	cmp	r5, #255	; 0xff
 8024178:	d01d      	beq.n	80241b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 802417a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802417c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024180:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024184:	fb05 f808 	mul.w	r8, r5, r8
 8024188:	fb05 f50c 	mul.w	r5, r5, ip
 802418c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024190:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024194:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024198:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802419c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80241a0:	44c6      	add	lr, r8
 80241a2:	0a2d      	lsrs	r5, r5, #8
 80241a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80241a8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80241ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80241b0:	ea4e 0505 	orr.w	r5, lr, r5
 80241b4:	950c      	str	r5, [sp, #48]	; 0x30
 80241b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80241b8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80241bc:	9f08      	ldr	r7, [sp, #32]
 80241be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80241c2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80241c6:	fb09 f505 	mul.w	r5, r9, r5
 80241ca:	fb02 550c 	mla	r5, r2, ip, r5
 80241ce:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80241d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80241d4:	fb01 550c 	mla	r5, r1, ip, r5
 80241d8:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80241dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80241de:	fb0b 550c 	mla	r5, fp, ip, r5
 80241e2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80241e6:	fb09 f90c 	mul.w	r9, r9, ip
 80241ea:	0a2d      	lsrs	r5, r5, #8
 80241ec:	fb02 9303 	mla	r3, r2, r3, r9
 80241f0:	9a08      	ldr	r2, [sp, #32]
 80241f2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80241f6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80241fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80241fc:	fb01 330e 	mla	r3, r1, lr, r3
 8024200:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024204:	fb0b 3b01 	mla	fp, fp, r1, r3
 8024208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802420a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802420c:	4343      	muls	r3, r0
 802420e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024212:	1c58      	adds	r0, r3, #1
 8024214:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024218:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802421c:	ea45 050b 	orr.w	r5, r5, fp
 8024220:	7833      	ldrb	r3, [r6, #0]
 8024222:	b2ea      	uxtb	r2, r5
 8024224:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024228:	fb12 f201 	smulbb	r2, r2, r1
 802422c:	b2c0      	uxtb	r0, r0
 802422e:	fb03 2300 	mla	r3, r3, r0, r2
 8024232:	b29b      	uxth	r3, r3
 8024234:	1c5a      	adds	r2, r3, #1
 8024236:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802423a:	7872      	ldrb	r2, [r6, #1]
 802423c:	fb12 f200 	smulbb	r2, r2, r0
 8024240:	121b      	asrs	r3, r3, #8
 8024242:	7033      	strb	r3, [r6, #0]
 8024244:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8024248:	0c2d      	lsrs	r5, r5, #16
 802424a:	fb03 2301 	mla	r3, r3, r1, r2
 802424e:	b29b      	uxth	r3, r3
 8024250:	1c5a      	adds	r2, r3, #1
 8024252:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024256:	121b      	asrs	r3, r3, #8
 8024258:	7073      	strb	r3, [r6, #1]
 802425a:	78b3      	ldrb	r3, [r6, #2]
 802425c:	fb13 f000 	smulbb	r0, r3, r0
 8024260:	fb05 0501 	mla	r5, r5, r1, r0
 8024264:	b2ad      	uxth	r5, r5
 8024266:	1c6b      	adds	r3, r5, #1
 8024268:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802426c:	122d      	asrs	r5, r5, #8
 802426e:	70b5      	strb	r5, [r6, #2]
 8024270:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024272:	3603      	adds	r6, #3
 8024274:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024276:	4413      	add	r3, r2
 8024278:	932b      	str	r3, [sp, #172]	; 0xac
 802427a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802427c:	441c      	add	r4, r3
 802427e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024280:	3b01      	subs	r3, #1
 8024282:	9314      	str	r3, [sp, #80]	; 0x50
 8024284:	e6c0      	b.n	8024008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8024286:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024288:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802428a:	4413      	add	r3, r2
 802428c:	932b      	str	r3, [sp, #172]	; 0xac
 802428e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024290:	441c      	add	r4, r3
 8024292:	9b06      	ldr	r3, [sp, #24]
 8024294:	3b01      	subs	r3, #1
 8024296:	9306      	str	r3, [sp, #24]
 8024298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802429a:	3303      	adds	r3, #3
 802429c:	930a      	str	r3, [sp, #40]	; 0x28
 802429e:	e664      	b.n	8023f6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80242a0:	f47f ae75 	bne.w	8023f8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80242a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	f340 819a 	ble.w	80245e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80242ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80242b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80242b2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80242b6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80242ba:	eef0 6a48 	vmov.f32	s13, s16
 80242be:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80242c2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80242c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242ca:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80242ce:	eef0 6a68 	vmov.f32	s13, s17
 80242d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242d6:	ee16 4a90 	vmov	r4, s13
 80242da:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80242de:	ee69 7a27 	vmul.f32	s15, s18, s15
 80242e2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80242e6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80242ea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80242ee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80242f2:	ee18 2a10 	vmov	r2, s16
 80242f6:	eeb0 8a47 	vmov.f32	s16, s14
 80242fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80242fe:	ee18 2a90 	vmov	r2, s17
 8024302:	932d      	str	r3, [sp, #180]	; 0xb4
 8024304:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024306:	eef0 8a67 	vmov.f32	s17, s15
 802430a:	fb92 f3f3 	sdiv	r3, r2, r3
 802430e:	932e      	str	r3, [sp, #184]	; 0xb8
 8024310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024312:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024314:	3b01      	subs	r3, #1
 8024316:	9312      	str	r3, [sp, #72]	; 0x48
 8024318:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802431a:	bf08      	it	eq
 802431c:	4613      	moveq	r3, r2
 802431e:	9306      	str	r3, [sp, #24]
 8024320:	e61c      	b.n	8023f5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024322:	b151      	cbz	r1, 802433a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8024324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024326:	58aa      	ldr	r2, [r5, r2]
 8024328:	25ff      	movs	r5, #255	; 0xff
 802432a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802432e:	9208      	str	r2, [sp, #32]
 8024330:	46a8      	mov	r8, r5
 8024332:	e6a0      	b.n	8024076 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8024334:	25ff      	movs	r5, #255	; 0xff
 8024336:	46aa      	mov	sl, r5
 8024338:	e69d      	b.n	8024076 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802433a:	25ff      	movs	r5, #255	; 0xff
 802433c:	46aa      	mov	sl, r5
 802433e:	e7f7      	b.n	8024330 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8024340:	1c57      	adds	r7, r2, #1
 8024342:	d195      	bne.n	8024270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024344:	9d07      	ldr	r5, [sp, #28]
 8024346:	4295      	cmp	r5, r2
 8024348:	dd92      	ble.n	8024270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802434a:	1c5d      	adds	r5, r3, #1
 802434c:	db90      	blt.n	8024270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802434e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024350:	429d      	cmp	r5, r3
 8024352:	dd8d      	ble.n	8024270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024354:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024356:	9201      	str	r2, [sp, #4]
 8024358:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802435a:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802435e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024360:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024362:	9300      	str	r3, [sp, #0]
 8024364:	9b07      	ldr	r3, [sp, #28]
 8024366:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802436a:	4631      	mov	r1, r6
 802436c:	f7ff fc68 	bl	8023c40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8024370:	e77e      	b.n	8024270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024372:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024374:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024378:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802437a:	9d07      	ldr	r5, [sp, #28]
 802437c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024380:	1412      	asrs	r2, r2, #16
 8024382:	1423      	asrs	r3, r4, #16
 8024384:	fb05 2303 	mla	r3, r5, r3, r2
 8024388:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802438a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802438e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024392:	0e1e      	lsrs	r6, r3, #24
 8024394:	2900      	cmp	r1, #0
 8024396:	f000 8114 	beq.w	80245c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802439a:	686a      	ldr	r2, [r5, #4]
 802439c:	920d      	str	r2, [sp, #52]	; 0x34
 802439e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80243a2:	2800      	cmp	r0, #0
 80243a4:	f000 8116 	beq.w	80245d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80243a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80243aa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80243ac:	18aa      	adds	r2, r5, r2
 80243ae:	59ed      	ldr	r5, [r5, r7]
 80243b0:	6852      	ldr	r2, [r2, #4]
 80243b2:	9509      	str	r5, [sp, #36]	; 0x24
 80243b4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80243b8:	0e15      	lsrs	r5, r2, #24
 80243ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80243bc:	b289      	uxth	r1, r1
 80243be:	b280      	uxth	r0, r0
 80243c0:	fb01 fa00 	mul.w	sl, r1, r0
 80243c4:	0109      	lsls	r1, r1, #4
 80243c6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80243ca:	eba1 080a 	sub.w	r8, r1, sl
 80243ce:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80243d2:	b280      	uxth	r0, r0
 80243d4:	fa1f f888 	uxth.w	r8, r8
 80243d8:	1a12      	subs	r2, r2, r0
 80243da:	fb08 f10c 	mul.w	r1, r8, ip
 80243de:	b292      	uxth	r2, r2
 80243e0:	fb02 1106 	mla	r1, r2, r6, r1
 80243e4:	fb00 1109 	mla	r1, r0, r9, r1
 80243e8:	fb0a 1105 	mla	r1, sl, r5, r1
 80243ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80243f0:	2900      	cmp	r1, #0
 80243f2:	f000 80da 	beq.w	80245aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80243f6:	2eff      	cmp	r6, #255	; 0xff
 80243f8:	d016      	beq.n	8024428 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80243fa:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80243fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024402:	4377      	muls	r7, r6
 8024404:	435e      	muls	r6, r3
 8024406:	0a3b      	lsrs	r3, r7, #8
 8024408:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802440c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024410:	443b      	add	r3, r7
 8024412:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024416:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802441a:	0a1b      	lsrs	r3, r3, #8
 802441c:	0a3f      	lsrs	r7, r7, #8
 802441e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024422:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024426:	433b      	orrs	r3, r7
 8024428:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802442c:	d01d      	beq.n	802446a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802442e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024430:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024432:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024436:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802443a:	fb0c f606 	mul.w	r6, ip, r6
 802443e:	fb0c fc07 	mul.w	ip, ip, r7
 8024442:	0a37      	lsrs	r7, r6, #8
 8024444:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024448:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802444c:	4437      	add	r7, r6
 802444e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8024452:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8024456:	0a3f      	lsrs	r7, r7, #8
 8024458:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802445c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024460:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024464:	ea47 060c 	orr.w	r6, r7, ip
 8024468:	960d      	str	r6, [sp, #52]	; 0x34
 802446a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802446e:	d01d      	beq.n	80244ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8024470:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024472:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024476:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802447a:	fb09 fc0c 	mul.w	ip, r9, ip
 802447e:	fb09 f906 	mul.w	r9, r9, r6
 8024482:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8024486:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802448a:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802448e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024492:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8024496:	4467      	add	r7, ip
 8024498:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802449c:	0a3f      	lsrs	r7, r7, #8
 802449e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80244a2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80244a6:	ea47 0609 	orr.w	r6, r7, r9
 80244aa:	9609      	str	r6, [sp, #36]	; 0x24
 80244ac:	2dff      	cmp	r5, #255	; 0xff
 80244ae:	d01a      	beq.n	80244e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80244b0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80244b2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80244b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80244ba:	fb05 fc0c 	mul.w	ip, r5, ip
 80244be:	4375      	muls	r5, r6
 80244c0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80244c4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80244c8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80244cc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80244d0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80244d4:	4467      	add	r7, ip
 80244d6:	0a2d      	lsrs	r5, r5, #8
 80244d8:	0a3f      	lsrs	r7, r7, #8
 80244da:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80244de:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80244e2:	433d      	orrs	r5, r7
 80244e4:	950f      	str	r5, [sp, #60]	; 0x3c
 80244e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80244e8:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80244ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80244f0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80244f4:	fb08 f505 	mul.w	r5, r8, r5
 80244f8:	fb02 5506 	mla	r5, r2, r6, r5
 80244fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80244fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024502:	fb00 5506 	mla	r5, r0, r6, r5
 8024506:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024508:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802450c:	fb0a 5506 	mla	r5, sl, r6, r5
 8024510:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024512:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024516:	0a2d      	lsrs	r5, r5, #8
 8024518:	fb08 f806 	mul.w	r8, r8, r6
 802451c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024520:	fb02 8303 	mla	r3, r2, r3, r8
 8024524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024526:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802452a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802452c:	fb00 3307 	mla	r3, r0, r7, r3
 8024530:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024534:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8024538:	fb01 f30b 	mul.w	r3, r1, fp
 802453c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024540:	1c59      	adds	r1, r3, #1
 8024542:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024546:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802454a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802454e:	ea45 050c 	orr.w	r5, r5, ip
 8024552:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024556:	b2ea      	uxtb	r2, r5
 8024558:	b2c9      	uxtb	r1, r1
 802455a:	fb12 f20b 	smulbb	r2, r2, fp
 802455e:	fb03 2301 	mla	r3, r3, r1, r2
 8024562:	b29b      	uxth	r3, r3
 8024564:	1c5a      	adds	r2, r3, #1
 8024566:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802456a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802456e:	fb12 f201 	smulbb	r2, r2, r1
 8024572:	121b      	asrs	r3, r3, #8
 8024574:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024578:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802457c:	0c2d      	lsrs	r5, r5, #16
 802457e:	fb03 230b 	mla	r3, r3, fp, r2
 8024582:	b29b      	uxth	r3, r3
 8024584:	1c5a      	adds	r2, r3, #1
 8024586:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802458a:	121b      	asrs	r3, r3, #8
 802458c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024590:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024594:	fb13 f101 	smulbb	r1, r3, r1
 8024598:	fb05 150b 	mla	r5, r5, fp, r1
 802459c:	b2ad      	uxth	r5, r5
 802459e:	1c69      	adds	r1, r5, #1
 80245a0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80245a4:	122d      	asrs	r5, r5, #8
 80245a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80245aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80245ac:	f10e 0e03 	add.w	lr, lr, #3
 80245b0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80245b2:	4413      	add	r3, r2
 80245b4:	932b      	str	r3, [sp, #172]	; 0xac
 80245b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80245b8:	441c      	add	r4, r3
 80245ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80245bc:	3b01      	subs	r3, #1
 80245be:	9313      	str	r3, [sp, #76]	; 0x4c
 80245c0:	e501      	b.n	8023fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80245c2:	b150      	cbz	r0, 80245da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80245c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80245c6:	58aa      	ldr	r2, [r5, r2]
 80245c8:	25ff      	movs	r5, #255	; 0xff
 80245ca:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80245ce:	9209      	str	r2, [sp, #36]	; 0x24
 80245d0:	46ac      	mov	ip, r5
 80245d2:	e6f3      	b.n	80243bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80245d4:	25ff      	movs	r5, #255	; 0xff
 80245d6:	46a9      	mov	r9, r5
 80245d8:	e6f0      	b.n	80243bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80245da:	25ff      	movs	r5, #255	; 0xff
 80245dc:	46a9      	mov	r9, r5
 80245de:	e7f7      	b.n	80245d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80245e0:	b019      	add	sp, #100	; 0x64
 80245e2:	ecbd 8b08 	vpop	{d8-d11}
 80245e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080245ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80245ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245f0:	b085      	sub	sp, #20
 80245f2:	7888      	ldrb	r0, [r1, #2]
 80245f4:	4691      	mov	r9, r2
 80245f6:	9000      	str	r0, [sp, #0]
 80245f8:	7848      	ldrb	r0, [r1, #1]
 80245fa:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80245fe:	9001      	str	r0, [sp, #4]
 8024600:	7808      	ldrb	r0, [r1, #0]
 8024602:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024606:	9002      	str	r0, [sp, #8]
 8024608:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802460c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8024610:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8024614:	fb04 c603 	mla	r6, r4, r3, ip
 8024618:	2c00      	cmp	r4, #0
 802461a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802461e:	9a00      	ldr	r2, [sp, #0]
 8024620:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024624:	9a01      	ldr	r2, [sp, #4]
 8024626:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802462a:	db3a      	blt.n	80246a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802462c:	45a0      	cmp	r8, r4
 802462e:	dd38      	ble.n	80246a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8024630:	f1bc 0f00 	cmp.w	ip, #0
 8024634:	db33      	blt.n	802469e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8024636:	4563      	cmp	r3, ip
 8024638:	dd31      	ble.n	802469e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802463a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802463e:	f11c 0601 	adds.w	r6, ip, #1
 8024642:	d431      	bmi.n	80246a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8024644:	42b3      	cmp	r3, r6
 8024646:	dd2f      	ble.n	80246a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8024648:	b375      	cbz	r5, 80246a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802464a:	f8de 6004 	ldr.w	r6, [lr, #4]
 802464e:	3401      	adds	r4, #1
 8024650:	d42e      	bmi.n	80246b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8024652:	45a0      	cmp	r8, r4
 8024654:	dd2c      	ble.n	80246b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8024656:	b35f      	cbz	r7, 80246b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8024658:	f1bc 0f00 	cmp.w	ip, #0
 802465c:	db26      	blt.n	80246ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802465e:	4563      	cmp	r3, ip
 8024660:	dd24      	ble.n	80246ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8024662:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8024666:	f11c 0c01 	adds.w	ip, ip, #1
 802466a:	d405      	bmi.n	8024678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802466c:	4563      	cmp	r3, ip
 802466e:	dd03      	ble.n	8024678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024670:	b115      	cbz	r5, 8024678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024672:	3301      	adds	r3, #1
 8024674:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8024678:	2d0f      	cmp	r5, #15
 802467a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802467e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024682:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024686:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802468a:	d801      	bhi.n	8024690 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 802468c:	2f0f      	cmp	r7, #15
 802468e:	d911      	bls.n	80246b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8024690:	4b77      	ldr	r3, [pc, #476]	; (8024870 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8024692:	f240 11a5 	movw	r1, #421	; 0x1a5
 8024696:	4a77      	ldr	r2, [pc, #476]	; (8024874 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8024698:	4877      	ldr	r0, [pc, #476]	; (8024878 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 802469a:	f003 f83b 	bl	8027714 <__assert_func>
 802469e:	4602      	mov	r2, r0
 80246a0:	e7cd      	b.n	802463e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 80246a2:	4606      	mov	r6, r0
 80246a4:	4602      	mov	r2, r0
 80246a6:	e7d2      	b.n	802464e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80246a8:	4606      	mov	r6, r0
 80246aa:	e7d0      	b.n	802464e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80246ac:	4604      	mov	r4, r0
 80246ae:	e7da      	b.n	8024666 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80246b0:	4604      	mov	r4, r0
 80246b2:	e7e1      	b.n	8024678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80246b4:	b2ab      	uxth	r3, r5
 80246b6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80246ba:	b2bf      	uxth	r7, r7
 80246bc:	fb03 fe07 	mul.w	lr, r3, r7
 80246c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80246c4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80246c8:	eba3 0c0e 	sub.w	ip, r3, lr
 80246cc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80246d0:	b2bf      	uxth	r7, r7
 80246d2:	fa1f fc8c 	uxth.w	ip, ip
 80246d6:	eba5 0507 	sub.w	r5, r5, r7
 80246da:	fb0c f30a 	mul.w	r3, ip, sl
 80246de:	b2ad      	uxth	r5, r5
 80246e0:	fb05 330b 	mla	r3, r5, fp, r3
 80246e4:	fb07 3309 	mla	r3, r7, r9, r3
 80246e8:	fb0e 3308 	mla	r3, lr, r8, r3
 80246ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80246f0:	9303      	str	r3, [sp, #12]
 80246f2:	d018      	beq.n	8024726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80246f4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80246f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80246fc:	fb0b f303 	mul.w	r3, fp, r3
 8024700:	fb0b fb02 	mul.w	fp, fp, r2
 8024704:	0a1a      	lsrs	r2, r3, #8
 8024706:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802470a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802470e:	441a      	add	r2, r3
 8024710:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8024714:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8024718:	0a12      	lsrs	r2, r2, #8
 802471a:	0a1b      	lsrs	r3, r3, #8
 802471c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024720:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024724:	431a      	orrs	r2, r3
 8024726:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802472a:	d019      	beq.n	8024760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 802472c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024730:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024734:	fb0a fb0b 	mul.w	fp, sl, fp
 8024738:	fb0a fa06 	mul.w	sl, sl, r6
 802473c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024740:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024744:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8024748:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802474c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024750:	445e      	add	r6, fp
 8024752:	0a1b      	lsrs	r3, r3, #8
 8024754:	0a36      	lsrs	r6, r6, #8
 8024756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802475a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802475e:	431e      	orrs	r6, r3
 8024760:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024764:	d019      	beq.n	802479a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8024766:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802476a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802476e:	fb09 fa0a 	mul.w	sl, r9, sl
 8024772:	fb09 f904 	mul.w	r9, r9, r4
 8024776:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802477a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802477e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8024782:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024786:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802478a:	4454      	add	r4, sl
 802478c:	0a1b      	lsrs	r3, r3, #8
 802478e:	0a24      	lsrs	r4, r4, #8
 8024790:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024794:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024798:	431c      	orrs	r4, r3
 802479a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802479e:	d019      	beq.n	80247d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 80247a0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80247a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80247a8:	fb08 f909 	mul.w	r9, r8, r9
 80247ac:	fb08 f800 	mul.w	r8, r8, r0
 80247b0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80247b4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80247b8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80247bc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80247c0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80247c4:	4448      	add	r0, r9
 80247c6:	0a1b      	lsrs	r3, r3, #8
 80247c8:	0a00      	lsrs	r0, r0, #8
 80247ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80247ce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80247d2:	4318      	orrs	r0, r3
 80247d4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80247d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80247dc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80247e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80247e4:	fb0c f808 	mul.w	r8, ip, r8
 80247e8:	fb0c f606 	mul.w	r6, ip, r6
 80247ec:	fb05 8803 	mla	r8, r5, r3, r8
 80247f0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80247f4:	fb05 6202 	mla	r2, r5, r2, r6
 80247f8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80247fc:	fb07 8803 	mla	r8, r7, r3, r8
 8024800:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8024804:	fb07 2704 	mla	r7, r7, r4, r2
 8024808:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802480c:	fb0e 8303 	mla	r3, lr, r3, r8
 8024810:	fb0e 7e00 	mla	lr, lr, r0, r7
 8024814:	9802      	ldr	r0, [sp, #8]
 8024816:	0a1b      	lsrs	r3, r3, #8
 8024818:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802481c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024820:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024824:	ea43 0e0e 	orr.w	lr, r3, lr
 8024828:	9b03      	ldr	r3, [sp, #12]
 802482a:	43db      	mvns	r3, r3
 802482c:	b2db      	uxtb	r3, r3
 802482e:	4358      	muls	r0, r3
 8024830:	1c42      	adds	r2, r0, #1
 8024832:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024836:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802483a:	700a      	strb	r2, [r1, #0]
 802483c:	9a01      	ldr	r2, [sp, #4]
 802483e:	435a      	muls	r2, r3
 8024840:	1c50      	adds	r0, r2, #1
 8024842:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024846:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802484a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802484e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024852:	704a      	strb	r2, [r1, #1]
 8024854:	9a00      	ldr	r2, [sp, #0]
 8024856:	435a      	muls	r2, r3
 8024858:	4613      	mov	r3, r2
 802485a:	3201      	adds	r2, #1
 802485c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024860:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8024864:	f881 e002 	strb.w	lr, [r1, #2]
 8024868:	b005      	add	sp, #20
 802486a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802486e:	bf00      	nop
 8024870:	0802ce3d 	.word	0x0802ce3d
 8024874:	0802d332 	.word	0x0802d332
 8024878:	0802cf06 	.word	0x0802cf06

0802487c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024880:	ed2d 8b08 	vpush	{d8-d11}
 8024884:	b097      	sub	sp, #92	; 0x5c
 8024886:	eeb0 aa40 	vmov.f32	s20, s0
 802488a:	eef0 9a60 	vmov.f32	s19, s1
 802488e:	9306      	str	r3, [sp, #24]
 8024890:	eeb0 9a41 	vmov.f32	s18, s2
 8024894:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8024898:	eeb0 8a62 	vmov.f32	s16, s5
 802489c:	9214      	str	r2, [sp, #80]	; 0x50
 802489e:	eef0 8a43 	vmov.f32	s17, s6
 80248a2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80248a4:	eef0 ba44 	vmov.f32	s23, s8
 80248a8:	9307      	str	r3, [sp, #28]
 80248aa:	eeb0 ba64 	vmov.f32	s22, s9
 80248ae:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80248b2:	eef0 aa45 	vmov.f32	s21, s10
 80248b6:	9015      	str	r0, [sp, #84]	; 0x54
 80248b8:	9112      	str	r1, [sp, #72]	; 0x48
 80248ba:	6850      	ldr	r0, [r2, #4]
 80248bc:	9310      	str	r3, [sp, #64]	; 0x40
 80248be:	6812      	ldr	r2, [r2, #0]
 80248c0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80248c2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80248c6:	fb00 1303 	mla	r3, r0, r3, r1
 80248ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80248ce:	18d3      	adds	r3, r2, r3
 80248d0:	930a      	str	r3, [sp, #40]	; 0x28
 80248d2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80248d4:	681b      	ldr	r3, [r3, #0]
 80248d6:	9311      	str	r3, [sp, #68]	; 0x44
 80248d8:	9b07      	ldr	r3, [sp, #28]
 80248da:	009b      	lsls	r3, r3, #2
 80248dc:	930e      	str	r3, [sp, #56]	; 0x38
 80248de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80248e0:	2b00      	cmp	r3, #0
 80248e2:	dc03      	bgt.n	80248ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80248e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80248e6:	2b00      	cmp	r3, #0
 80248e8:	f340 832e 	ble.w	8024f48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80248ec:	9b06      	ldr	r3, [sp, #24]
 80248ee:	2b00      	cmp	r3, #0
 80248f0:	f340 8186 	ble.w	8024c00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80248f4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80248f6:	1423      	asrs	r3, r4, #16
 80248f8:	1412      	asrs	r2, r2, #16
 80248fa:	d42f      	bmi.n	802495c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80248fc:	1c51      	adds	r1, r2, #1
 80248fe:	9807      	ldr	r0, [sp, #28]
 8024900:	4288      	cmp	r0, r1
 8024902:	dd2e      	ble.n	8024962 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8024904:	2b00      	cmp	r3, #0
 8024906:	db2c      	blt.n	8024962 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8024908:	1c59      	adds	r1, r3, #1
 802490a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802490c:	4288      	cmp	r0, r1
 802490e:	dd28      	ble.n	8024962 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8024910:	9b06      	ldr	r3, [sp, #24]
 8024912:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024914:	3b01      	subs	r3, #1
 8024916:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024918:	fb02 1203 	mla	r2, r2, r3, r1
 802491c:	1412      	asrs	r2, r2, #16
 802491e:	d42b      	bmi.n	8024978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024920:	3201      	adds	r2, #1
 8024922:	9907      	ldr	r1, [sp, #28]
 8024924:	4291      	cmp	r1, r2
 8024926:	dd27      	ble.n	8024978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024928:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802492a:	fb02 4303 	mla	r3, r2, r3, r4
 802492e:	141b      	asrs	r3, r3, #16
 8024930:	d422      	bmi.n	8024978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024932:	3301      	adds	r3, #1
 8024934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024936:	429a      	cmp	r2, r3
 8024938:	dd1e      	ble.n	8024978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802493a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802493c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024940:	1cdd      	adds	r5, r3, #3
 8024942:	f1bb 0f00 	cmp.w	fp, #0
 8024946:	f300 81c4 	bgt.w	8024cd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802494a:	9b06      	ldr	r3, [sp, #24]
 802494c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024952:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024956:	4423      	add	r3, r4
 8024958:	930a      	str	r3, [sp, #40]	; 0x28
 802495a:	e153      	b.n	8024c04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 802495c:	1c51      	adds	r1, r2, #1
 802495e:	f040 8142 	bne.w	8024be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8024962:	9907      	ldr	r1, [sp, #28]
 8024964:	428a      	cmp	r2, r1
 8024966:	f280 813e 	bge.w	8024be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802496a:	1c5a      	adds	r2, r3, #1
 802496c:	f2c0 813b 	blt.w	8024be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8024970:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024972:	4293      	cmp	r3, r2
 8024974:	f280 8137 	bge.w	8024be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8024978:	9b06      	ldr	r3, [sp, #24]
 802497a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802497c:	9313      	str	r3, [sp, #76]	; 0x4c
 802497e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024980:	2b00      	cmp	r3, #0
 8024982:	dde2      	ble.n	802494a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8024984:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024986:	1423      	asrs	r3, r4, #16
 8024988:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802498a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802498e:	1409      	asrs	r1, r1, #16
 8024990:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8024994:	f100 8187 	bmi.w	8024ca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8024998:	1c4e      	adds	r6, r1, #1
 802499a:	9f07      	ldr	r7, [sp, #28]
 802499c:	42b7      	cmp	r7, r6
 802499e:	f340 8184 	ble.w	8024caa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80249a2:	2b00      	cmp	r3, #0
 80249a4:	f2c0 8181 	blt.w	8024caa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80249a8:	1c5e      	adds	r6, r3, #1
 80249aa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80249ac:	42b7      	cmp	r7, r6
 80249ae:	f340 817c 	ble.w	8024caa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80249b2:	9e07      	ldr	r6, [sp, #28]
 80249b4:	fb03 1306 	mla	r3, r3, r6, r1
 80249b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80249ba:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80249be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80249c2:	0e1f      	lsrs	r7, r3, #24
 80249c4:	2a00      	cmp	r2, #0
 80249c6:	f000 815c 	beq.w	8024c82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80249ca:	6871      	ldr	r1, [r6, #4]
 80249cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80249ce:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80249d2:	2800      	cmp	r0, #0
 80249d4:	f000 815e 	beq.w	8024c94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80249d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80249da:	eb06 0c01 	add.w	ip, r6, r1
 80249de:	5876      	ldr	r6, [r6, r1]
 80249e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80249e4:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80249e8:	9608      	str	r6, [sp, #32]
 80249ea:	0e0e      	lsrs	r6, r1, #24
 80249ec:	910c      	str	r1, [sp, #48]	; 0x30
 80249ee:	b292      	uxth	r2, r2
 80249f0:	b280      	uxth	r0, r0
 80249f2:	fb02 fa00 	mul.w	sl, r2, r0
 80249f6:	0112      	lsls	r2, r2, #4
 80249f8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80249fc:	eba2 080a 	sub.w	r8, r2, sl
 8024a00:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024a04:	b280      	uxth	r0, r0
 8024a06:	fa1f f888 	uxth.w	r8, r8
 8024a0a:	1a09      	subs	r1, r1, r0
 8024a0c:	fb08 f20e 	mul.w	r2, r8, lr
 8024a10:	b289      	uxth	r1, r1
 8024a12:	fb01 2207 	mla	r2, r1, r7, r2
 8024a16:	fb00 2209 	mla	r2, r0, r9, r2
 8024a1a:	fb0a 2206 	mla	r2, sl, r6, r2
 8024a1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024a22:	2a00      	cmp	r2, #0
 8024a24:	f000 80d4 	beq.w	8024bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024a28:	2fff      	cmp	r7, #255	; 0xff
 8024a2a:	d01a      	beq.n	8024a62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8024a2c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024a30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a34:	fb07 fc0c 	mul.w	ip, r7, ip
 8024a38:	435f      	muls	r7, r3
 8024a3a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024a3e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024a42:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8024a46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024a4a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8024a4e:	4463      	add	r3, ip
 8024a50:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024a54:	0a1b      	lsrs	r3, r3, #8
 8024a56:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024a5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024a5e:	ea43 030b 	orr.w	r3, r3, fp
 8024a62:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024a66:	d01e      	beq.n	8024aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8024a68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024a6a:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8024a6e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024a72:	fb0e fb0b 	mul.w	fp, lr, fp
 8024a76:	fb0e fe07 	mul.w	lr, lr, r7
 8024a7a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024a7e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024a82:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8024a86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a8a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8024a8e:	44dc      	add	ip, fp
 8024a90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a98:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024a9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024aa0:	ea4c 070e 	orr.w	r7, ip, lr
 8024aa4:	970b      	str	r7, [sp, #44]	; 0x2c
 8024aa6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024aaa:	d01e      	beq.n	8024aea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024aac:	9f08      	ldr	r7, [sp, #32]
 8024aae:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024ab2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024ab6:	fb09 fe0e 	mul.w	lr, r9, lr
 8024aba:	fb09 f907 	mul.w	r9, r9, r7
 8024abe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024ac2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024ac6:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8024aca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ace:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8024ad2:	44f4      	add	ip, lr
 8024ad4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024ad8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024adc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024ae0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ae4:	ea4c 0709 	orr.w	r7, ip, r9
 8024ae8:	9708      	str	r7, [sp, #32]
 8024aea:	2eff      	cmp	r6, #255	; 0xff
 8024aec:	d01c      	beq.n	8024b28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8024aee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024af0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024af4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024af8:	fb06 fe0e 	mul.w	lr, r6, lr
 8024afc:	437e      	muls	r6, r7
 8024afe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024b02:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024b06:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024b0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b0e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8024b12:	44f4      	add	ip, lr
 8024b14:	0a36      	lsrs	r6, r6, #8
 8024b16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b1a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024b1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b22:	ea4c 0606 	orr.w	r6, ip, r6
 8024b26:	960c      	str	r6, [sp, #48]	; 0x30
 8024b28:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8024b2a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8024b2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b32:	2aff      	cmp	r2, #255	; 0xff
 8024b34:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024b38:	fb08 f606 	mul.w	r6, r8, r6
 8024b3c:	fb01 6607 	mla	r6, r1, r7, r6
 8024b40:	9f08      	ldr	r7, [sp, #32]
 8024b42:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024b46:	fb00 6607 	mla	r6, r0, r7, r6
 8024b4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024b4c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024b50:	fb0a 6607 	mla	r6, sl, r7, r6
 8024b54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024b56:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024b5a:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8024b5e:	fb08 f807 	mul.w	r8, r8, r7
 8024b62:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024b66:	fb01 8303 	mla	r3, r1, r3, r8
 8024b6a:	9908      	ldr	r1, [sp, #32]
 8024b6c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024b70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024b72:	fb00 330c 	mla	r3, r0, ip, r3
 8024b76:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8024b7a:	fb0a 3a00 	mla	sl, sl, r0, r3
 8024b7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b86:	ea46 060a 	orr.w	r6, r6, sl
 8024b8a:	b2f0      	uxtb	r0, r6
 8024b8c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8024b90:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8024b94:	f000 8084 	beq.w	8024ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8024b98:	43d2      	mvns	r2, r2
 8024b9a:	782b      	ldrb	r3, [r5, #0]
 8024b9c:	b2d2      	uxtb	r2, r2
 8024b9e:	fb03 f702 	mul.w	r7, r3, r2
 8024ba2:	1c7b      	adds	r3, r7, #1
 8024ba4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024ba8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024bac:	702b      	strb	r3, [r5, #0]
 8024bae:	786b      	ldrb	r3, [r5, #1]
 8024bb0:	fb03 f002 	mul.w	r0, r3, r2
 8024bb4:	1c43      	adds	r3, r0, #1
 8024bb6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024bba:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024bbe:	706b      	strb	r3, [r5, #1]
 8024bc0:	78ab      	ldrb	r3, [r5, #2]
 8024bc2:	4353      	muls	r3, r2
 8024bc4:	1c5a      	adds	r2, r3, #1
 8024bc6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024bca:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024bce:	70ae      	strb	r6, [r5, #2]
 8024bd0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024bd2:	3503      	adds	r5, #3
 8024bd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024bd6:	4413      	add	r3, r2
 8024bd8:	9329      	str	r3, [sp, #164]	; 0xa4
 8024bda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024bdc:	441c      	add	r4, r3
 8024bde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024be0:	3b01      	subs	r3, #1
 8024be2:	9313      	str	r3, [sp, #76]	; 0x4c
 8024be4:	e6cb      	b.n	802497e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8024be6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024be8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024bea:	4413      	add	r3, r2
 8024bec:	9329      	str	r3, [sp, #164]	; 0xa4
 8024bee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024bf0:	441c      	add	r4, r3
 8024bf2:	9b06      	ldr	r3, [sp, #24]
 8024bf4:	3b01      	subs	r3, #1
 8024bf6:	9306      	str	r3, [sp, #24]
 8024bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024bfa:	3303      	adds	r3, #3
 8024bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8024bfe:	e675      	b.n	80248ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8024c00:	f47f ae86 	bne.w	8024910 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8024c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024c06:	2b00      	cmp	r3, #0
 8024c08:	f340 819e 	ble.w	8024f48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8024c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024c10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c12:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024c16:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024c1a:	eef0 6a48 	vmov.f32	s13, s16
 8024c1e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024c22:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024c26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c2a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8024c2e:	eef0 6a68 	vmov.f32	s13, s17
 8024c32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c36:	ee16 4a90 	vmov	r4, s13
 8024c3a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024c3e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024c42:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024c46:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024c4a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024c4e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024c52:	ee18 2a10 	vmov	r2, s16
 8024c56:	eeb0 8a47 	vmov.f32	s16, s14
 8024c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c5e:	ee18 2a90 	vmov	r2, s17
 8024c62:	932b      	str	r3, [sp, #172]	; 0xac
 8024c64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c66:	eef0 8a67 	vmov.f32	s17, s15
 8024c6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c6e:	932c      	str	r3, [sp, #176]	; 0xb0
 8024c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024c72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024c74:	3b01      	subs	r3, #1
 8024c76:	9312      	str	r3, [sp, #72]	; 0x48
 8024c78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c7a:	bf08      	it	eq
 8024c7c:	4613      	moveq	r3, r2
 8024c7e:	9306      	str	r3, [sp, #24]
 8024c80:	e62d      	b.n	80248de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8024c82:	b150      	cbz	r0, 8024c9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8024c84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024c86:	5871      	ldr	r1, [r6, r1]
 8024c88:	26ff      	movs	r6, #255	; 0xff
 8024c8a:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8024c8e:	9108      	str	r1, [sp, #32]
 8024c90:	46b6      	mov	lr, r6
 8024c92:	e6ac      	b.n	80249ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8024c94:	26ff      	movs	r6, #255	; 0xff
 8024c96:	46b1      	mov	r9, r6
 8024c98:	e6a9      	b.n	80249ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8024c9a:	26ff      	movs	r6, #255	; 0xff
 8024c9c:	46b1      	mov	r9, r6
 8024c9e:	e7f7      	b.n	8024c90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024ca0:	7028      	strb	r0, [r5, #0]
 8024ca2:	7069      	strb	r1, [r5, #1]
 8024ca4:	e793      	b.n	8024bce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8024ca6:	1c4f      	adds	r7, r1, #1
 8024ca8:	d192      	bne.n	8024bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024caa:	9e07      	ldr	r6, [sp, #28]
 8024cac:	428e      	cmp	r6, r1
 8024cae:	dd8f      	ble.n	8024bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024cb0:	1c5e      	adds	r6, r3, #1
 8024cb2:	db8d      	blt.n	8024bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024cb4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8024cb6:	429e      	cmp	r6, r3
 8024cb8:	dd8a      	ble.n	8024bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024cba:	9600      	str	r6, [sp, #0]
 8024cbc:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8024cc0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8024cc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024cc6:	4629      	mov	r1, r5
 8024cc8:	9b07      	ldr	r3, [sp, #28]
 8024cca:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024ccc:	f7ff fc8e 	bl	80245ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8024cd0:	e77e      	b.n	8024bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024cd2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024cd4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024cd8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024cda:	9e07      	ldr	r6, [sp, #28]
 8024cdc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024ce0:	1409      	asrs	r1, r1, #16
 8024ce2:	1423      	asrs	r3, r4, #16
 8024ce4:	fb06 1303 	mla	r3, r6, r3, r1
 8024ce8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024cea:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8024cee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024cf2:	0e1f      	lsrs	r7, r3, #24
 8024cf4:	2a00      	cmp	r2, #0
 8024cf6:	f000 8113 	beq.w	8024f20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8024cfa:	6871      	ldr	r1, [r6, #4]
 8024cfc:	910d      	str	r1, [sp, #52]	; 0x34
 8024cfe:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8024d02:	2800      	cmp	r0, #0
 8024d04:	f000 8115 	beq.w	8024f32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8024d08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024d0a:	eb06 0c01 	add.w	ip, r6, r1
 8024d0e:	5876      	ldr	r6, [r6, r1]
 8024d10:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8024d14:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8024d18:	9609      	str	r6, [sp, #36]	; 0x24
 8024d1a:	0e0e      	lsrs	r6, r1, #24
 8024d1c:	910f      	str	r1, [sp, #60]	; 0x3c
 8024d1e:	b292      	uxth	r2, r2
 8024d20:	b280      	uxth	r0, r0
 8024d22:	fb02 fa00 	mul.w	sl, r2, r0
 8024d26:	0112      	lsls	r2, r2, #4
 8024d28:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024d2c:	eba2 080a 	sub.w	r8, r2, sl
 8024d30:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024d34:	b280      	uxth	r0, r0
 8024d36:	fa1f f888 	uxth.w	r8, r8
 8024d3a:	1a09      	subs	r1, r1, r0
 8024d3c:	fb08 f20e 	mul.w	r2, r8, lr
 8024d40:	b289      	uxth	r1, r1
 8024d42:	fb01 2207 	mla	r2, r1, r7, r2
 8024d46:	fb00 2209 	mla	r2, r0, r9, r2
 8024d4a:	fb0a 2206 	mla	r2, sl, r6, r2
 8024d4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024d52:	2a00      	cmp	r2, #0
 8024d54:	f000 80da 	beq.w	8024f0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8024d58:	2fff      	cmp	r7, #255	; 0xff
 8024d5a:	d01a      	beq.n	8024d92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8024d5c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024d60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d64:	fb07 fc0c 	mul.w	ip, r7, ip
 8024d68:	435f      	muls	r7, r3
 8024d6a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024d6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024d72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d76:	4463      	add	r3, ip
 8024d78:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8024d7c:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8024d80:	0a1b      	lsrs	r3, r3, #8
 8024d82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024d8e:	ea43 030c 	orr.w	r3, r3, ip
 8024d92:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024d96:	d021      	beq.n	8024ddc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8024d98:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024d9a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024d9e:	fb0e f707 	mul.w	r7, lr, r7
 8024da2:	9713      	str	r7, [sp, #76]	; 0x4c
 8024da4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024da6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024daa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8024dac:	fb0e fe0c 	mul.w	lr, lr, ip
 8024db0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024db4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024db8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024dbc:	44bc      	add	ip, r7
 8024dbe:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8024dc2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8024dc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024dca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024dce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024dd2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024dd6:	ea4c 070e 	orr.w	r7, ip, lr
 8024dda:	970d      	str	r7, [sp, #52]	; 0x34
 8024ddc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024de0:	d01e      	beq.n	8024e20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8024de2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024de4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024de8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024dec:	fb09 fe0e 	mul.w	lr, r9, lr
 8024df0:	fb09 f907 	mul.w	r9, r9, r7
 8024df4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024df8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024dfc:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8024e00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e04:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8024e08:	44f4      	add	ip, lr
 8024e0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024e0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e12:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024e16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e1a:	ea4c 0709 	orr.w	r7, ip, r9
 8024e1e:	9709      	str	r7, [sp, #36]	; 0x24
 8024e20:	2eff      	cmp	r6, #255	; 0xff
 8024e22:	d01c      	beq.n	8024e5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8024e24:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024e26:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024e2a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024e2e:	fb06 fe0e 	mul.w	lr, r6, lr
 8024e32:	437e      	muls	r6, r7
 8024e34:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024e38:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024e3c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024e40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e44:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8024e48:	44f4      	add	ip, lr
 8024e4a:	0a36      	lsrs	r6, r6, #8
 8024e4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e50:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024e54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e58:	ea4c 0606 	orr.w	r6, ip, r6
 8024e5c:	960f      	str	r6, [sp, #60]	; 0x3c
 8024e5e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024e60:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8024e64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e68:	2aff      	cmp	r2, #255	; 0xff
 8024e6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024e6e:	fb08 f606 	mul.w	r6, r8, r6
 8024e72:	fb01 6607 	mla	r6, r1, r7, r6
 8024e76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024e78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024e7c:	fb00 6607 	mla	r6, r0, r7, r6
 8024e80:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024e82:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024e86:	fb0a 6607 	mla	r6, sl, r7, r6
 8024e8a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024e8c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024e90:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8024e94:	fb08 f807 	mul.w	r8, r8, r7
 8024e98:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024e9c:	fb01 8303 	mla	r3, r1, r3, r8
 8024ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024ea2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024ea6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024ea8:	fb00 330c 	mla	r3, r0, ip, r3
 8024eac:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8024eb0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8024eb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024eb8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024ebc:	ea46 060e 	orr.w	r6, r6, lr
 8024ec0:	b2f0      	uxtb	r0, r6
 8024ec2:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8024ec6:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8024eca:	d038      	beq.n	8024f3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8024ecc:	43d2      	mvns	r2, r2
 8024ece:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8024ed2:	b2d2      	uxtb	r2, r2
 8024ed4:	4357      	muls	r7, r2
 8024ed6:	1c7b      	adds	r3, r7, #1
 8024ed8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024edc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024ee0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8024ee4:	4350      	muls	r0, r2
 8024ee6:	f805 3c03 	strb.w	r3, [r5, #-3]
 8024eea:	1c43      	adds	r3, r0, #1
 8024eec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024ef0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024ef4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024ef8:	4353      	muls	r3, r2
 8024efa:	f805 1c02 	strb.w	r1, [r5, #-2]
 8024efe:	1c5a      	adds	r2, r3, #1
 8024f00:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024f04:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024f08:	f805 6c01 	strb.w	r6, [r5, #-1]
 8024f0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024f0e:	3503      	adds	r5, #3
 8024f10:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024f12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024f16:	4413      	add	r3, r2
 8024f18:	9329      	str	r3, [sp, #164]	; 0xa4
 8024f1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f1c:	441c      	add	r4, r3
 8024f1e:	e510      	b.n	8024942 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8024f20:	b150      	cbz	r0, 8024f38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8024f22:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024f24:	5871      	ldr	r1, [r6, r1]
 8024f26:	26ff      	movs	r6, #255	; 0xff
 8024f28:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8024f2c:	9109      	str	r1, [sp, #36]	; 0x24
 8024f2e:	46b6      	mov	lr, r6
 8024f30:	e6f5      	b.n	8024d1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024f32:	26ff      	movs	r6, #255	; 0xff
 8024f34:	46b1      	mov	r9, r6
 8024f36:	e6f2      	b.n	8024d1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024f38:	26ff      	movs	r6, #255	; 0xff
 8024f3a:	46b1      	mov	r9, r6
 8024f3c:	e7f7      	b.n	8024f2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8024f3e:	f805 0c03 	strb.w	r0, [r5, #-3]
 8024f42:	f805 1c02 	strb.w	r1, [r5, #-2]
 8024f46:	e7df      	b.n	8024f08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8024f48:	b017      	add	sp, #92	; 0x5c
 8024f4a:	ecbd 8b08 	vpop	{d8-d11}
 8024f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024f54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8024f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f58:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024f5c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024f60:	2800      	cmp	r0, #0
 8024f62:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8024f66:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8024f6a:	fb0c 0e03 	mla	lr, ip, r3, r0
 8024f6e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024f72:	db6b      	blt.n	802504c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024f74:	4580      	cmp	r8, r0
 8024f76:	dd69      	ble.n	802504c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024f78:	f1bc 0f00 	cmp.w	ip, #0
 8024f7c:	db66      	blt.n	802504c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024f7e:	45e1      	cmp	r9, ip
 8024f80:	dd64      	ble.n	802504c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024f82:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024f86:	f01e 0f01 	tst.w	lr, #1
 8024f8a:	5d16      	ldrb	r6, [r2, r4]
 8024f8c:	bf0c      	ite	eq
 8024f8e:	f006 060f 	andeq.w	r6, r6, #15
 8024f92:	1136      	asrne	r6, r6, #4
 8024f94:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024f98:	b2f6      	uxtb	r6, r6
 8024f9a:	f110 0a01 	adds.w	sl, r0, #1
 8024f9e:	d457      	bmi.n	8025050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024fa0:	45d0      	cmp	r8, sl
 8024fa2:	dd55      	ble.n	8025050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024fa4:	f1bc 0f00 	cmp.w	ip, #0
 8024fa8:	db52      	blt.n	8025050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024faa:	45e1      	cmp	r9, ip
 8024fac:	dd50      	ble.n	8025050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024fae:	2f00      	cmp	r7, #0
 8024fb0:	f000 80ac 	beq.w	802510c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8024fb4:	f10e 0b01 	add.w	fp, lr, #1
 8024fb8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8024fbc:	f01b 0f01 	tst.w	fp, #1
 8024fc0:	5d14      	ldrb	r4, [r2, r4]
 8024fc2:	bf0c      	ite	eq
 8024fc4:	f004 040f 	andeq.w	r4, r4, #15
 8024fc8:	1124      	asrne	r4, r4, #4
 8024fca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024fce:	b2e4      	uxtb	r4, r4
 8024fd0:	2d00      	cmp	r5, #0
 8024fd2:	f000 8096 	beq.w	8025102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8024fd6:	2800      	cmp	r0, #0
 8024fd8:	f10c 0c01 	add.w	ip, ip, #1
 8024fdc:	db3c      	blt.n	8025058 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024fde:	4580      	cmp	r8, r0
 8024fe0:	dd3a      	ble.n	8025058 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024fe2:	f1bc 0f00 	cmp.w	ip, #0
 8024fe6:	db37      	blt.n	8025058 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024fe8:	45e1      	cmp	r9, ip
 8024fea:	dd35      	ble.n	8025058 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024fec:	eb03 0b0e 	add.w	fp, r3, lr
 8024ff0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024ff4:	f01b 0f01 	tst.w	fp, #1
 8024ff8:	5c10      	ldrb	r0, [r2, r0]
 8024ffa:	bf0c      	ite	eq
 8024ffc:	f000 000f 	andeq.w	r0, r0, #15
 8025000:	1100      	asrne	r0, r0, #4
 8025002:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025006:	b2c0      	uxtb	r0, r0
 8025008:	f1ba 0f00 	cmp.w	sl, #0
 802500c:	db26      	blt.n	802505c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802500e:	45d0      	cmp	r8, sl
 8025010:	dd24      	ble.n	802505c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025012:	f1bc 0f00 	cmp.w	ip, #0
 8025016:	db21      	blt.n	802505c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025018:	45e1      	cmp	r9, ip
 802501a:	dd1f      	ble.n	802505c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802501c:	b307      	cbz	r7, 8025060 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802501e:	3301      	adds	r3, #1
 8025020:	449e      	add	lr, r3
 8025022:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025026:	f01e 0f01 	tst.w	lr, #1
 802502a:	5cd3      	ldrb	r3, [r2, r3]
 802502c:	bf0c      	ite	eq
 802502e:	f003 030f 	andeq.w	r3, r3, #15
 8025032:	111b      	asrne	r3, r3, #4
 8025034:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025038:	b2db      	uxtb	r3, r3
 802503a:	2f0f      	cmp	r7, #15
 802503c:	d911      	bls.n	8025062 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802503e:	4b35      	ldr	r3, [pc, #212]	; (8025114 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8025040:	f240 11a5 	movw	r1, #421	; 0x1a5
 8025044:	4a34      	ldr	r2, [pc, #208]	; (8025118 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8025046:	4835      	ldr	r0, [pc, #212]	; (802511c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8025048:	f002 fb64 	bl	8027714 <__assert_func>
 802504c:	2600      	movs	r6, #0
 802504e:	e7a4      	b.n	8024f9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8025050:	2400      	movs	r4, #0
 8025052:	e7bd      	b.n	8024fd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8025054:	463c      	mov	r4, r7
 8025056:	e7be      	b.n	8024fd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8025058:	2000      	movs	r0, #0
 802505a:	e7d5      	b.n	8025008 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 802505c:	2300      	movs	r3, #0
 802505e:	e7ec      	b.n	802503a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8025060:	463b      	mov	r3, r7
 8025062:	2d0f      	cmp	r5, #15
 8025064:	d8eb      	bhi.n	802503e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025066:	b2bf      	uxth	r7, r7
 8025068:	b2ad      	uxth	r5, r5
 802506a:	fb07 f205 	mul.w	r2, r7, r5
 802506e:	013f      	lsls	r7, r7, #4
 8025070:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025074:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8025078:	1abf      	subs	r7, r7, r2
 802507a:	b2ad      	uxth	r5, r5
 802507c:	b2bf      	uxth	r7, r7
 802507e:	ebac 0c05 	sub.w	ip, ip, r5
 8025082:	437c      	muls	r4, r7
 8025084:	fa1f fc8c 	uxth.w	ip, ip
 8025088:	fb06 440c 	mla	r4, r6, ip, r4
 802508c:	fb05 4400 	mla	r4, r5, r0, r4
 8025090:	fb02 4203 	mla	r2, r2, r3, r4
 8025094:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025098:	b38a      	cbz	r2, 80250fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 802509a:	4b21      	ldr	r3, [pc, #132]	; (8025120 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 802509c:	681c      	ldr	r4, [r3, #0]
 802509e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80250a2:	b2e5      	uxtb	r5, r4
 80250a4:	4353      	muls	r3, r2
 80250a6:	1c5a      	adds	r2, r3, #1
 80250a8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80250ac:	1212      	asrs	r2, r2, #8
 80250ae:	b290      	uxth	r0, r2
 80250b0:	43d2      	mvns	r2, r2
 80250b2:	fb15 f500 	smulbb	r5, r5, r0
 80250b6:	b2d3      	uxtb	r3, r2
 80250b8:	780a      	ldrb	r2, [r1, #0]
 80250ba:	fb02 5203 	mla	r2, r2, r3, r5
 80250be:	b292      	uxth	r2, r2
 80250c0:	1c55      	adds	r5, r2, #1
 80250c2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80250c6:	784d      	ldrb	r5, [r1, #1]
 80250c8:	fb15 f503 	smulbb	r5, r5, r3
 80250cc:	1212      	asrs	r2, r2, #8
 80250ce:	700a      	strb	r2, [r1, #0]
 80250d0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80250d4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80250d8:	fb02 5200 	mla	r2, r2, r0, r5
 80250dc:	b292      	uxth	r2, r2
 80250de:	1c55      	adds	r5, r2, #1
 80250e0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80250e4:	1212      	asrs	r2, r2, #8
 80250e6:	704a      	strb	r2, [r1, #1]
 80250e8:	788a      	ldrb	r2, [r1, #2]
 80250ea:	fb12 f303 	smulbb	r3, r2, r3
 80250ee:	fb04 3300 	mla	r3, r4, r0, r3
 80250f2:	b29b      	uxth	r3, r3
 80250f4:	1c5a      	adds	r2, r3, #1
 80250f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80250fa:	121b      	asrs	r3, r3, #8
 80250fc:	708b      	strb	r3, [r1, #2]
 80250fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025102:	2f0f      	cmp	r7, #15
 8025104:	d89b      	bhi.n	802503e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025106:	462b      	mov	r3, r5
 8025108:	4628      	mov	r0, r5
 802510a:	e7ac      	b.n	8025066 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 802510c:	2d00      	cmp	r5, #0
 802510e:	d1a1      	bne.n	8025054 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8025110:	462c      	mov	r4, r5
 8025112:	e7f8      	b.n	8025106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8025114:	0802ce3d 	.word	0x0802ce3d
 8025118:	0802d332 	.word	0x0802d332
 802511c:	0802cf06 	.word	0x0802cf06
 8025120:	2000b444 	.word	0x2000b444

08025124 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025128:	ed2d 8b08 	vpush	{d8-d11}
 802512c:	b097      	sub	sp, #92	; 0x5c
 802512e:	eeb0 aa40 	vmov.f32	s20, s0
 8025132:	eef0 9a60 	vmov.f32	s19, s1
 8025136:	9308      	str	r3, [sp, #32]
 8025138:	eeb0 9a41 	vmov.f32	s18, s2
 802513c:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025140:	eeb0 8a62 	vmov.f32	s16, s5
 8025144:	9214      	str	r2, [sp, #80]	; 0x50
 8025146:	eef0 8a43 	vmov.f32	s17, s6
 802514a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802514c:	eef0 ba44 	vmov.f32	s23, s8
 8025150:	9309      	str	r3, [sp, #36]	; 0x24
 8025152:	eeb0 ba64 	vmov.f32	s22, s9
 8025156:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 802515a:	eef0 aa45 	vmov.f32	s21, s10
 802515e:	9015      	str	r0, [sp, #84]	; 0x54
 8025160:	910c      	str	r1, [sp, #48]	; 0x30
 8025162:	930e      	str	r3, [sp, #56]	; 0x38
 8025164:	6850      	ldr	r0, [r2, #4]
 8025166:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 802516a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802516e:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8025172:	fb00 1803 	mla	r8, r0, r3, r1
 8025176:	6813      	ldr	r3, [r2, #0]
 8025178:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802517c:	4498      	add	r8, r3
 802517e:	f10b 0301 	add.w	r3, fp, #1
 8025182:	f023 0301 	bic.w	r3, r3, #1
 8025186:	930f      	str	r3, [sp, #60]	; 0x3c
 8025188:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802518a:	681f      	ldr	r7, [r3, #0]
 802518c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802518e:	2b00      	cmp	r3, #0
 8025190:	dc03      	bgt.n	802519a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8025192:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025194:	2b00      	cmp	r3, #0
 8025196:	f340 8238 	ble.w	802560a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802519a:	9b08      	ldr	r3, [sp, #32]
 802519c:	2b00      	cmp	r3, #0
 802519e:	f340 810c 	ble.w	80253ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80251a2:	142a      	asrs	r2, r5, #16
 80251a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80251a8:	d42c      	bmi.n	8025204 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80251aa:	1c51      	adds	r1, r2, #1
 80251ac:	458b      	cmp	fp, r1
 80251ae:	dd2c      	ble.n	802520a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80251b0:	2b00      	cmp	r3, #0
 80251b2:	db2a      	blt.n	802520a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80251b4:	1c59      	adds	r1, r3, #1
 80251b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80251b8:	4288      	cmp	r0, r1
 80251ba:	dd26      	ble.n	802520a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80251bc:	9b08      	ldr	r3, [sp, #32]
 80251be:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80251c0:	3b01      	subs	r3, #1
 80251c2:	fb02 5203 	mla	r2, r2, r3, r5
 80251c6:	1412      	asrs	r2, r2, #16
 80251c8:	d429      	bmi.n	802521e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80251ca:	3201      	adds	r2, #1
 80251cc:	4593      	cmp	fp, r2
 80251ce:	dd26      	ble.n	802521e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80251d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80251d2:	fb02 6303 	mla	r3, r2, r3, r6
 80251d6:	141b      	asrs	r3, r3, #16
 80251d8:	d421      	bmi.n	802521e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80251da:	3301      	adds	r3, #1
 80251dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80251de:	429a      	cmp	r2, r3
 80251e0:	dd1d      	ble.n	802521e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80251e2:	f108 0e03 	add.w	lr, r8, #3
 80251e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80251ea:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80251ee:	f1b9 0f00 	cmp.w	r9, #0
 80251f2:	f300 814f 	bgt.w	8025494 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80251f6:	9b08      	ldr	r3, [sp, #32]
 80251f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80251fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025200:	44a0      	add	r8, r4
 8025202:	e0dc      	b.n	80253be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8025204:	1c51      	adds	r1, r2, #1
 8025206:	f040 80ce 	bne.w	80253a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802520a:	4593      	cmp	fp, r2
 802520c:	f340 80cb 	ble.w	80253a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025210:	1c5a      	adds	r2, r3, #1
 8025212:	f2c0 80c8 	blt.w	80253a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025218:	4293      	cmp	r3, r2
 802521a:	f280 80c4 	bge.w	80253a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802521e:	9b08      	ldr	r3, [sp, #32]
 8025220:	46c1      	mov	r9, r8
 8025222:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8025226:	930d      	str	r3, [sp, #52]	; 0x34
 8025228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802522a:	2b00      	cmp	r3, #0
 802522c:	dde3      	ble.n	80251f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802522e:	1428      	asrs	r0, r5, #16
 8025230:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025234:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025238:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802523c:	f100 8111 	bmi.w	8025462 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8025240:	f100 0c01 	add.w	ip, r0, #1
 8025244:	45e3      	cmp	fp, ip
 8025246:	f340 810e 	ble.w	8025466 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802524a:	2b00      	cmp	r3, #0
 802524c:	f2c0 810b 	blt.w	8025466 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025250:	f103 0c01 	add.w	ip, r3, #1
 8025254:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025256:	4564      	cmp	r4, ip
 8025258:	f340 8105 	ble.w	8025466 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802525c:	fb03 030a 	mla	r3, r3, sl, r0
 8025260:	0858      	lsrs	r0, r3, #1
 8025262:	07dc      	lsls	r4, r3, #31
 8025264:	5c38      	ldrb	r0, [r7, r0]
 8025266:	bf54      	ite	pl
 8025268:	f000 000f 	andpl.w	r0, r0, #15
 802526c:	1100      	asrmi	r0, r0, #4
 802526e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025272:	b2c0      	uxtb	r0, r0
 8025274:	2a00      	cmp	r2, #0
 8025276:	f000 80e1 	beq.w	802543c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 802527a:	f103 0e01 	add.w	lr, r3, #1
 802527e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025282:	f01e 0f01 	tst.w	lr, #1
 8025286:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802528a:	bf0c      	ite	eq
 802528c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025290:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025294:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025298:	fa5f f48c 	uxtb.w	r4, ip
 802529c:	9410      	str	r4, [sp, #64]	; 0x40
 802529e:	b1f9      	cbz	r1, 80252e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80252a0:	4453      	add	r3, sl
 80252a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80252a6:	07dc      	lsls	r4, r3, #31
 80252a8:	f103 0301 	add.w	r3, r3, #1
 80252ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80252b0:	bf54      	ite	pl
 80252b2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80252b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80252ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80252be:	fa5f f48c 	uxtb.w	r4, ip
 80252c2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80252c6:	940a      	str	r4, [sp, #40]	; 0x28
 80252c8:	07dc      	lsls	r4, r3, #31
 80252ca:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80252ce:	bf54      	ite	pl
 80252d0:	f00c 030f 	andpl.w	r3, ip, #15
 80252d4:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80252d8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80252dc:	b2db      	uxtb	r3, r3
 80252de:	9311      	str	r3, [sp, #68]	; 0x44
 80252e0:	b292      	uxth	r2, r2
 80252e2:	b289      	uxth	r1, r1
 80252e4:	0113      	lsls	r3, r2, #4
 80252e6:	fb02 fc01 	mul.w	ip, r2, r1
 80252ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80252ec:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80252f0:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80252f4:	eba3 030c 	sub.w	r3, r3, ip
 80252f8:	b289      	uxth	r1, r1
 80252fa:	b29b      	uxth	r3, r3
 80252fc:	ebae 0e01 	sub.w	lr, lr, r1
 8025300:	4353      	muls	r3, r2
 8025302:	fa1f fe8e 	uxth.w	lr, lr
 8025306:	fb00 320e 	mla	r2, r0, lr, r3
 802530a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802530c:	fb01 2203 	mla	r2, r1, r3, r2
 8025310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025312:	fb0c 2203 	mla	r2, ip, r3, r2
 8025316:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802531a:	2a00      	cmp	r2, #0
 802531c:	d039      	beq.n	8025392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802531e:	4bbd      	ldr	r3, [pc, #756]	; (8025614 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8025320:	6819      	ldr	r1, [r3, #0]
 8025322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025324:	fa5f fc81 	uxtb.w	ip, r1
 8025328:	435a      	muls	r2, r3
 802532a:	1c53      	adds	r3, r2, #1
 802532c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025330:	1212      	asrs	r2, r2, #8
 8025332:	b290      	uxth	r0, r2
 8025334:	43d2      	mvns	r2, r2
 8025336:	fb1c fc00 	smulbb	ip, ip, r0
 802533a:	b2d3      	uxtb	r3, r2
 802533c:	f899 2000 	ldrb.w	r2, [r9]
 8025340:	fb02 c203 	mla	r2, r2, r3, ip
 8025344:	b292      	uxth	r2, r2
 8025346:	f102 0c01 	add.w	ip, r2, #1
 802534a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802534e:	f899 c001 	ldrb.w	ip, [r9, #1]
 8025352:	fb1c fc03 	smulbb	ip, ip, r3
 8025356:	1212      	asrs	r2, r2, #8
 8025358:	f889 2000 	strb.w	r2, [r9]
 802535c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8025360:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8025364:	fb02 c200 	mla	r2, r2, r0, ip
 8025368:	b292      	uxth	r2, r2
 802536a:	f102 0c01 	add.w	ip, r2, #1
 802536e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025372:	1212      	asrs	r2, r2, #8
 8025374:	f889 2001 	strb.w	r2, [r9, #1]
 8025378:	f899 2002 	ldrb.w	r2, [r9, #2]
 802537c:	fb12 f303 	smulbb	r3, r2, r3
 8025380:	fb01 3300 	mla	r3, r1, r0, r3
 8025384:	b29b      	uxth	r3, r3
 8025386:	1c5a      	adds	r2, r3, #1
 8025388:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802538c:	121b      	asrs	r3, r3, #8
 802538e:	f889 3002 	strb.w	r3, [r9, #2]
 8025392:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025394:	f109 0903 	add.w	r9, r9, #3
 8025398:	441d      	add	r5, r3
 802539a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802539c:	441e      	add	r6, r3
 802539e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80253a0:	3b01      	subs	r3, #1
 80253a2:	930d      	str	r3, [sp, #52]	; 0x34
 80253a4:	e740      	b.n	8025228 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80253a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80253a8:	f108 0803 	add.w	r8, r8, #3
 80253ac:	441d      	add	r5, r3
 80253ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80253b0:	441e      	add	r6, r3
 80253b2:	9b08      	ldr	r3, [sp, #32]
 80253b4:	3b01      	subs	r3, #1
 80253b6:	9308      	str	r3, [sp, #32]
 80253b8:	e6ef      	b.n	802519a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80253ba:	f47f aeff 	bne.w	80251bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80253be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80253c0:	2b00      	cmp	r3, #0
 80253c2:	f340 8122 	ble.w	802560a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80253c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80253ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253cc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80253d0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80253d4:	eef0 6a48 	vmov.f32	s13, s16
 80253d8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80253dc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80253e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253e4:	ee16 5a90 	vmov	r5, s13
 80253e8:	eef0 6a68 	vmov.f32	s13, s17
 80253ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253f0:	ee16 6a90 	vmov	r6, s13
 80253f4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80253f8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80253fc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025400:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025404:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025408:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802540c:	ee18 2a10 	vmov	r2, s16
 8025410:	eeb0 8a47 	vmov.f32	s16, s14
 8025414:	fb92 f3f3 	sdiv	r3, r2, r3
 8025418:	ee18 2a90 	vmov	r2, s17
 802541c:	932b      	str	r3, [sp, #172]	; 0xac
 802541e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025420:	eef0 8a67 	vmov.f32	s17, s15
 8025424:	fb92 f3f3 	sdiv	r3, r2, r3
 8025428:	932c      	str	r3, [sp, #176]	; 0xb0
 802542a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802542c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802542e:	3b01      	subs	r3, #1
 8025430:	930c      	str	r3, [sp, #48]	; 0x30
 8025432:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025434:	bf08      	it	eq
 8025436:	4613      	moveq	r3, r2
 8025438:	9308      	str	r3, [sp, #32]
 802543a:	e6a7      	b.n	802518c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802543c:	2900      	cmp	r1, #0
 802543e:	f43f af4f 	beq.w	80252e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8025442:	4453      	add	r3, sl
 8025444:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025448:	07db      	lsls	r3, r3, #31
 802544a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802544e:	bf54      	ite	pl
 8025450:	f00c 030f 	andpl.w	r3, ip, #15
 8025454:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8025458:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802545c:	b2db      	uxtb	r3, r3
 802545e:	930a      	str	r3, [sp, #40]	; 0x28
 8025460:	e73e      	b.n	80252e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8025462:	1c44      	adds	r4, r0, #1
 8025464:	d195      	bne.n	8025392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025466:	4583      	cmp	fp, r0
 8025468:	dd93      	ble.n	8025392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802546a:	1c5c      	adds	r4, r3, #1
 802546c:	db91      	blt.n	8025392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802546e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025470:	429c      	cmp	r4, r3
 8025472:	dd8e      	ble.n	8025392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025474:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025476:	9002      	str	r0, [sp, #8]
 8025478:	9815      	ldr	r0, [sp, #84]	; 0x54
 802547a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802547e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025480:	463a      	mov	r2, r7
 8025482:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025486:	e9cd b300 	strd	fp, r3, [sp]
 802548a:	4649      	mov	r1, r9
 802548c:	4653      	mov	r3, sl
 802548e:	f7ff fd61 	bl	8024f54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8025492:	e77e      	b.n	8025392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025494:	142a      	asrs	r2, r5, #16
 8025496:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802549a:	1433      	asrs	r3, r6, #16
 802549c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80254a0:	fb0a 2303 	mla	r3, sl, r3, r2
 80254a4:	085a      	lsrs	r2, r3, #1
 80254a6:	07dc      	lsls	r4, r3, #31
 80254a8:	5cba      	ldrb	r2, [r7, r2]
 80254aa:	bf54      	ite	pl
 80254ac:	f002 020f 	andpl.w	r2, r2, #15
 80254b0:	1112      	asrmi	r2, r2, #4
 80254b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80254b6:	b2d2      	uxtb	r2, r2
 80254b8:	2900      	cmp	r1, #0
 80254ba:	f000 8093 	beq.w	80255e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80254be:	1c5c      	adds	r4, r3, #1
 80254c0:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80254c4:	07e4      	lsls	r4, r4, #31
 80254c6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80254ca:	bf54      	ite	pl
 80254cc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80254d0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80254d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80254d8:	fa5f f48c 	uxtb.w	r4, ip
 80254dc:	9412      	str	r4, [sp, #72]	; 0x48
 80254de:	b300      	cbz	r0, 8025522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80254e0:	4453      	add	r3, sl
 80254e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80254e6:	07dc      	lsls	r4, r3, #31
 80254e8:	f103 0301 	add.w	r3, r3, #1
 80254ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80254f0:	bf54      	ite	pl
 80254f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80254f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80254fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80254fe:	fa5f f48c 	uxtb.w	r4, ip
 8025502:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025506:	940b      	str	r4, [sp, #44]	; 0x2c
 8025508:	07dc      	lsls	r4, r3, #31
 802550a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802550e:	bf54      	ite	pl
 8025510:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025514:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025518:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802551c:	fa5f f38c 	uxtb.w	r3, ip
 8025520:	9313      	str	r3, [sp, #76]	; 0x4c
 8025522:	b289      	uxth	r1, r1
 8025524:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025526:	b280      	uxth	r0, r0
 8025528:	fb01 f300 	mul.w	r3, r1, r0
 802552c:	0109      	lsls	r1, r1, #4
 802552e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8025532:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8025536:	1ac9      	subs	r1, r1, r3
 8025538:	b280      	uxth	r0, r0
 802553a:	b289      	uxth	r1, r1
 802553c:	ebac 0c00 	sub.w	ip, ip, r0
 8025540:	4361      	muls	r1, r4
 8025542:	fa1f fc8c 	uxth.w	ip, ip
 8025546:	fb02 120c 	mla	r2, r2, ip, r1
 802554a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802554c:	fb00 2001 	mla	r0, r0, r1, r2
 8025550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025552:	fb03 0302 	mla	r3, r3, r2, r0
 8025556:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802555a:	2b00      	cmp	r3, #0
 802555c:	d039      	beq.n	80255d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802555e:	4a2d      	ldr	r2, [pc, #180]	; (8025614 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8025560:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8025564:	6810      	ldr	r0, [r2, #0]
 8025566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025568:	fa5f fc80 	uxtb.w	ip, r0
 802556c:	4353      	muls	r3, r2
 802556e:	1c5a      	adds	r2, r3, #1
 8025570:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025574:	121b      	asrs	r3, r3, #8
 8025576:	b29a      	uxth	r2, r3
 8025578:	43db      	mvns	r3, r3
 802557a:	fb1c fc02 	smulbb	ip, ip, r2
 802557e:	b2db      	uxtb	r3, r3
 8025580:	fb01 c103 	mla	r1, r1, r3, ip
 8025584:	b289      	uxth	r1, r1
 8025586:	f101 0c01 	add.w	ip, r1, #1
 802558a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802558e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8025592:	fb1c fc03 	smulbb	ip, ip, r3
 8025596:	1209      	asrs	r1, r1, #8
 8025598:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802559c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80255a0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80255a4:	fb01 c102 	mla	r1, r1, r2, ip
 80255a8:	b289      	uxth	r1, r1
 80255aa:	f101 0c01 	add.w	ip, r1, #1
 80255ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80255b2:	1209      	asrs	r1, r1, #8
 80255b4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80255b8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80255bc:	fb11 f303 	smulbb	r3, r1, r3
 80255c0:	fb00 3002 	mla	r0, r0, r2, r3
 80255c4:	b280      	uxth	r0, r0
 80255c6:	1c42      	adds	r2, r0, #1
 80255c8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80255cc:	1200      	asrs	r0, r0, #8
 80255ce:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80255d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80255d4:	f10e 0e03 	add.w	lr, lr, #3
 80255d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80255dc:	441d      	add	r5, r3
 80255de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80255e0:	441e      	add	r6, r3
 80255e2:	e604      	b.n	80251ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80255e4:	2800      	cmp	r0, #0
 80255e6:	d09c      	beq.n	8025522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80255e8:	4453      	add	r3, sl
 80255ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80255ee:	07db      	lsls	r3, r3, #31
 80255f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80255f4:	bf54      	ite	pl
 80255f6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80255fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80255fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025602:	fa5f f38c 	uxtb.w	r3, ip
 8025606:	930b      	str	r3, [sp, #44]	; 0x2c
 8025608:	e78b      	b.n	8025522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802560a:	b017      	add	sp, #92	; 0x5c
 802560c:	ecbd 8b08 	vpop	{d8-d11}
 8025610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025614:	2000b444 	.word	0x2000b444

08025618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8025618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802561c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8025620:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025624:	2800      	cmp	r0, #0
 8025626:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802562a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802562e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8025632:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8025636:	db6b      	blt.n	8025710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8025638:	4580      	cmp	r8, r0
 802563a:	dd69      	ble.n	8025710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802563c:	f1bc 0f00 	cmp.w	ip, #0
 8025640:	db66      	blt.n	8025710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8025642:	45e1      	cmp	r9, ip
 8025644:	dd64      	ble.n	8025710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8025646:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802564a:	f01e 0f01 	tst.w	lr, #1
 802564e:	5d16      	ldrb	r6, [r2, r4]
 8025650:	bf0c      	ite	eq
 8025652:	f006 060f 	andeq.w	r6, r6, #15
 8025656:	1136      	asrne	r6, r6, #4
 8025658:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802565c:	b2f6      	uxtb	r6, r6
 802565e:	f110 0a01 	adds.w	sl, r0, #1
 8025662:	d457      	bmi.n	8025714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025664:	45d0      	cmp	r8, sl
 8025666:	dd55      	ble.n	8025714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025668:	f1bc 0f00 	cmp.w	ip, #0
 802566c:	db52      	blt.n	8025714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802566e:	45e1      	cmp	r9, ip
 8025670:	dd50      	ble.n	8025714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025672:	2f00      	cmp	r7, #0
 8025674:	f000 80a5 	beq.w	80257c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8025678:	f10e 0b01 	add.w	fp, lr, #1
 802567c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025680:	f01b 0f01 	tst.w	fp, #1
 8025684:	5d14      	ldrb	r4, [r2, r4]
 8025686:	bf0c      	ite	eq
 8025688:	f004 040f 	andeq.w	r4, r4, #15
 802568c:	1124      	asrne	r4, r4, #4
 802568e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025692:	b2e4      	uxtb	r4, r4
 8025694:	2d00      	cmp	r5, #0
 8025696:	f000 808f 	beq.w	80257b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802569a:	2800      	cmp	r0, #0
 802569c:	f10c 0c01 	add.w	ip, ip, #1
 80256a0:	db3c      	blt.n	802571c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80256a2:	4580      	cmp	r8, r0
 80256a4:	dd3a      	ble.n	802571c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80256a6:	f1bc 0f00 	cmp.w	ip, #0
 80256aa:	db37      	blt.n	802571c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80256ac:	45e1      	cmp	r9, ip
 80256ae:	dd35      	ble.n	802571c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80256b0:	eb03 0b0e 	add.w	fp, r3, lr
 80256b4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80256b8:	f01b 0f01 	tst.w	fp, #1
 80256bc:	5c10      	ldrb	r0, [r2, r0]
 80256be:	bf0c      	ite	eq
 80256c0:	f000 000f 	andeq.w	r0, r0, #15
 80256c4:	1100      	asrne	r0, r0, #4
 80256c6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80256ca:	b2c0      	uxtb	r0, r0
 80256cc:	f1ba 0f00 	cmp.w	sl, #0
 80256d0:	db26      	blt.n	8025720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80256d2:	45d0      	cmp	r8, sl
 80256d4:	dd24      	ble.n	8025720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80256d6:	f1bc 0f00 	cmp.w	ip, #0
 80256da:	db21      	blt.n	8025720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80256dc:	45e1      	cmp	r9, ip
 80256de:	dd1f      	ble.n	8025720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80256e0:	b307      	cbz	r7, 8025724 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80256e2:	3301      	adds	r3, #1
 80256e4:	449e      	add	lr, r3
 80256e6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80256ea:	f01e 0f01 	tst.w	lr, #1
 80256ee:	5cd3      	ldrb	r3, [r2, r3]
 80256f0:	bf0c      	ite	eq
 80256f2:	f003 030f 	andeq.w	r3, r3, #15
 80256f6:	111b      	asrne	r3, r3, #4
 80256f8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80256fc:	b2db      	uxtb	r3, r3
 80256fe:	2f0f      	cmp	r7, #15
 8025700:	d911      	bls.n	8025726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8025702:	4b32      	ldr	r3, [pc, #200]	; (80257cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8025704:	f240 11a5 	movw	r1, #421	; 0x1a5
 8025708:	4a31      	ldr	r2, [pc, #196]	; (80257d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802570a:	4832      	ldr	r0, [pc, #200]	; (80257d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802570c:	f002 f802 	bl	8027714 <__assert_func>
 8025710:	2600      	movs	r6, #0
 8025712:	e7a4      	b.n	802565e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8025714:	2400      	movs	r4, #0
 8025716:	e7bd      	b.n	8025694 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8025718:	463c      	mov	r4, r7
 802571a:	e7be      	b.n	802569a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802571c:	2000      	movs	r0, #0
 802571e:	e7d5      	b.n	80256cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8025720:	2300      	movs	r3, #0
 8025722:	e7ec      	b.n	80256fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8025724:	463b      	mov	r3, r7
 8025726:	2d0f      	cmp	r5, #15
 8025728:	d8eb      	bhi.n	8025702 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802572a:	b2bf      	uxth	r7, r7
 802572c:	b2ad      	uxth	r5, r5
 802572e:	fb07 f205 	mul.w	r2, r7, r5
 8025732:	013f      	lsls	r7, r7, #4
 8025734:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025738:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802573c:	1abf      	subs	r7, r7, r2
 802573e:	b2ad      	uxth	r5, r5
 8025740:	b2bf      	uxth	r7, r7
 8025742:	ebac 0c05 	sub.w	ip, ip, r5
 8025746:	437c      	muls	r4, r7
 8025748:	fa1f fc8c 	uxth.w	ip, ip
 802574c:	fb06 440c 	mla	r4, r6, ip, r4
 8025750:	fb05 4400 	mla	r4, r5, r0, r4
 8025754:	fb02 4303 	mla	r3, r2, r3, r4
 8025758:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802575c:	b353      	cbz	r3, 80257b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802575e:	4a1e      	ldr	r2, [pc, #120]	; (80257d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8025760:	7808      	ldrb	r0, [r1, #0]
 8025762:	6814      	ldr	r4, [r2, #0]
 8025764:	b29a      	uxth	r2, r3
 8025766:	43db      	mvns	r3, r3
 8025768:	b2e5      	uxtb	r5, r4
 802576a:	b2db      	uxtb	r3, r3
 802576c:	fb15 f502 	smulbb	r5, r5, r2
 8025770:	fb00 5003 	mla	r0, r0, r3, r5
 8025774:	b280      	uxth	r0, r0
 8025776:	1c45      	adds	r5, r0, #1
 8025778:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802577c:	784d      	ldrb	r5, [r1, #1]
 802577e:	fb15 f503 	smulbb	r5, r5, r3
 8025782:	1200      	asrs	r0, r0, #8
 8025784:	7008      	strb	r0, [r1, #0]
 8025786:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802578a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802578e:	fb00 5002 	mla	r0, r0, r2, r5
 8025792:	b280      	uxth	r0, r0
 8025794:	1c45      	adds	r5, r0, #1
 8025796:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802579a:	1200      	asrs	r0, r0, #8
 802579c:	7048      	strb	r0, [r1, #1]
 802579e:	7888      	ldrb	r0, [r1, #2]
 80257a0:	fb10 f303 	smulbb	r3, r0, r3
 80257a4:	fb04 3202 	mla	r2, r4, r2, r3
 80257a8:	b292      	uxth	r2, r2
 80257aa:	1c53      	adds	r3, r2, #1
 80257ac:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80257b0:	1212      	asrs	r2, r2, #8
 80257b2:	708a      	strb	r2, [r1, #2]
 80257b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257b8:	2f0f      	cmp	r7, #15
 80257ba:	d8a2      	bhi.n	8025702 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80257bc:	462b      	mov	r3, r5
 80257be:	4628      	mov	r0, r5
 80257c0:	e7b3      	b.n	802572a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80257c2:	2d00      	cmp	r5, #0
 80257c4:	d1a8      	bne.n	8025718 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80257c6:	462c      	mov	r4, r5
 80257c8:	e7f8      	b.n	80257bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80257ca:	bf00      	nop
 80257cc:	0802ce3d 	.word	0x0802ce3d
 80257d0:	0802d332 	.word	0x0802d332
 80257d4:	0802cf06 	.word	0x0802cf06
 80257d8:	2000b444 	.word	0x2000b444

080257dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80257dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257e0:	ed2d 8b08 	vpush	{d8-d11}
 80257e4:	b095      	sub	sp, #84	; 0x54
 80257e6:	461c      	mov	r4, r3
 80257e8:	eeb0 aa40 	vmov.f32	s20, s0
 80257ec:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80257f0:	eef0 9a60 	vmov.f32	s19, s1
 80257f4:	920e      	str	r2, [sp, #56]	; 0x38
 80257f6:	eeb0 9a41 	vmov.f32	s18, s2
 80257fa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80257fc:	eeb0 8a62 	vmov.f32	s16, s5
 8025800:	9307      	str	r3, [sp, #28]
 8025802:	eef0 8a43 	vmov.f32	s17, s6
 8025806:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802580a:	eef0 ba44 	vmov.f32	s23, s8
 802580e:	9013      	str	r0, [sp, #76]	; 0x4c
 8025810:	eeb0 ba64 	vmov.f32	s22, s9
 8025814:	9109      	str	r1, [sp, #36]	; 0x24
 8025816:	eef0 aa45 	vmov.f32	s21, s10
 802581a:	9308      	str	r3, [sp, #32]
 802581c:	6850      	ldr	r0, [r2, #4]
 802581e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8025822:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8025826:	fb00 1803 	mla	r8, r0, r3, r1
 802582a:	6813      	ldr	r3, [r2, #0]
 802582c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025830:	4498      	add	r8, r3
 8025832:	9b07      	ldr	r3, [sp, #28]
 8025834:	3301      	adds	r3, #1
 8025836:	f023 0301 	bic.w	r3, r3, #1
 802583a:	930b      	str	r3, [sp, #44]	; 0x2c
 802583c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802583e:	681f      	ldr	r7, [r3, #0]
 8025840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025842:	2b00      	cmp	r3, #0
 8025844:	dc03      	bgt.n	802584e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8025846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025848:	2b00      	cmp	r3, #0
 802584a:	f340 8238 	ble.w	8025cbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802584e:	2c00      	cmp	r4, #0
 8025850:	f340 8109 	ble.w	8025a66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8025854:	142a      	asrs	r2, r5, #16
 8025856:	ea4f 4326 	mov.w	r3, r6, asr #16
 802585a:	d42b      	bmi.n	80258b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802585c:	1c51      	adds	r1, r2, #1
 802585e:	9807      	ldr	r0, [sp, #28]
 8025860:	4288      	cmp	r0, r1
 8025862:	dd2a      	ble.n	80258ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8025864:	2b00      	cmp	r3, #0
 8025866:	db28      	blt.n	80258ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8025868:	1c59      	adds	r1, r3, #1
 802586a:	9808      	ldr	r0, [sp, #32]
 802586c:	4288      	cmp	r0, r1
 802586e:	dd24      	ble.n	80258ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8025870:	1e63      	subs	r3, r4, #1
 8025872:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025874:	fb02 5203 	mla	r2, r2, r3, r5
 8025878:	1412      	asrs	r2, r2, #16
 802587a:	d429      	bmi.n	80258d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802587c:	3201      	adds	r2, #1
 802587e:	9907      	ldr	r1, [sp, #28]
 8025880:	4291      	cmp	r1, r2
 8025882:	dd25      	ble.n	80258d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8025884:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025886:	fb02 6303 	mla	r3, r2, r3, r6
 802588a:	141b      	asrs	r3, r3, #16
 802588c:	d420      	bmi.n	80258d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802588e:	3301      	adds	r3, #1
 8025890:	9a08      	ldr	r2, [sp, #32]
 8025892:	429a      	cmp	r2, r3
 8025894:	dd1c      	ble.n	80258d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8025896:	f108 0e03 	add.w	lr, r8, #3
 802589a:	46a1      	mov	r9, r4
 802589c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80258a0:	f1b9 0f00 	cmp.w	r9, #0
 80258a4:	f300 8155 	bgt.w	8025b52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80258a8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80258ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80258b0:	44a0      	add	r8, r4
 80258b2:	e0da      	b.n	8025a6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80258b4:	1c50      	adds	r0, r2, #1
 80258b6:	f040 80ce 	bne.w	8025a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80258ba:	9907      	ldr	r1, [sp, #28]
 80258bc:	4291      	cmp	r1, r2
 80258be:	f340 80ca 	ble.w	8025a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80258c2:	1c59      	adds	r1, r3, #1
 80258c4:	f2c0 80c7 	blt.w	8025a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80258c8:	9a08      	ldr	r2, [sp, #32]
 80258ca:	4293      	cmp	r3, r2
 80258cc:	f280 80c3 	bge.w	8025a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80258d0:	46a3      	mov	fp, r4
 80258d2:	46c1      	mov	r9, r8
 80258d4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80258d8:	f1bb 0f00 	cmp.w	fp, #0
 80258dc:	dde4      	ble.n	80258a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80258de:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80258e2:	1428      	asrs	r0, r5, #16
 80258e4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80258e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80258ec:	920a      	str	r2, [sp, #40]	; 0x28
 80258ee:	f100 8116 	bmi.w	8025b1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80258f2:	f100 0c01 	add.w	ip, r0, #1
 80258f6:	9a07      	ldr	r2, [sp, #28]
 80258f8:	4562      	cmp	r2, ip
 80258fa:	f340 8112 	ble.w	8025b22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80258fe:	2b00      	cmp	r3, #0
 8025900:	f2c0 810f 	blt.w	8025b22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8025904:	f103 0c01 	add.w	ip, r3, #1
 8025908:	9a08      	ldr	r2, [sp, #32]
 802590a:	4562      	cmp	r2, ip
 802590c:	f340 8109 	ble.w	8025b22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8025910:	fb03 030a 	mla	r3, r3, sl, r0
 8025914:	0858      	lsrs	r0, r3, #1
 8025916:	07da      	lsls	r2, r3, #31
 8025918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802591a:	5c38      	ldrb	r0, [r7, r0]
 802591c:	bf54      	ite	pl
 802591e:	f000 000f 	andpl.w	r0, r0, #15
 8025922:	1100      	asrmi	r0, r0, #4
 8025924:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025928:	b2c0      	uxtb	r0, r0
 802592a:	2a00      	cmp	r2, #0
 802592c:	f000 80dd 	beq.w	8025aea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8025930:	f103 0e01 	add.w	lr, r3, #1
 8025934:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025938:	f01e 0f01 	tst.w	lr, #1
 802593c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025940:	bf0c      	ite	eq
 8025942:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025946:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802594a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802594e:	fa5f fc8c 	uxtb.w	ip, ip
 8025952:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8025956:	b301      	cbz	r1, 802599a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8025958:	4453      	add	r3, sl
 802595a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802595e:	07da      	lsls	r2, r3, #31
 8025960:	f103 0301 	add.w	r3, r3, #1
 8025964:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025968:	bf54      	ite	pl
 802596a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802596e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025972:	07da      	lsls	r2, r3, #31
 8025974:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025978:	fa5f fc8c 	uxtb.w	ip, ip
 802597c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8025980:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025984:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025988:	bf54      	ite	pl
 802598a:	f00c 030f 	andpl.w	r3, ip, #15
 802598e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8025992:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025996:	b2db      	uxtb	r3, r3
 8025998:	9310      	str	r3, [sp, #64]	; 0x40
 802599a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802599e:	b289      	uxth	r1, r1
 80259a0:	fb02 f301 	mul.w	r3, r2, r1
 80259a4:	0112      	lsls	r2, r2, #4
 80259a6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80259aa:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80259ae:	1ad2      	subs	r2, r2, r3
 80259b0:	fa1f fe81 	uxth.w	lr, r1
 80259b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80259b6:	b292      	uxth	r2, r2
 80259b8:	ebac 0c0e 	sub.w	ip, ip, lr
 80259bc:	434a      	muls	r2, r1
 80259be:	fa1f fc8c 	uxth.w	ip, ip
 80259c2:	fb00 200c 	mla	r0, r0, ip, r2
 80259c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80259c8:	fb0e 0002 	mla	r0, lr, r2, r0
 80259cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80259ce:	fb03 0002 	mla	r0, r3, r2, r0
 80259d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80259d6:	b3a8      	cbz	r0, 8025a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80259d8:	4bbb      	ldr	r3, [pc, #748]	; (8025cc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80259da:	28ff      	cmp	r0, #255	; 0xff
 80259dc:	681b      	ldr	r3, [r3, #0]
 80259de:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80259e2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80259e6:	b2db      	uxtb	r3, r3
 80259e8:	f000 8092 	beq.w	8025b10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80259ec:	b282      	uxth	r2, r0
 80259ee:	43c0      	mvns	r0, r0
 80259f0:	f899 e000 	ldrb.w	lr, [r9]
 80259f4:	fb13 f302 	smulbb	r3, r3, r2
 80259f8:	b2c0      	uxtb	r0, r0
 80259fa:	fb11 f102 	smulbb	r1, r1, r2
 80259fe:	fb0e 3300 	mla	r3, lr, r0, r3
 8025a02:	fb1c f202 	smulbb	r2, ip, r2
 8025a06:	b29b      	uxth	r3, r3
 8025a08:	f103 0e01 	add.w	lr, r3, #1
 8025a0c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8025a10:	121b      	asrs	r3, r3, #8
 8025a12:	f889 3000 	strb.w	r3, [r9]
 8025a16:	f899 3001 	ldrb.w	r3, [r9, #1]
 8025a1a:	fb03 1100 	mla	r1, r3, r0, r1
 8025a1e:	b289      	uxth	r1, r1
 8025a20:	1c4b      	adds	r3, r1, #1
 8025a22:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025a26:	f899 3002 	ldrb.w	r3, [r9, #2]
 8025a2a:	fb03 2000 	mla	r0, r3, r0, r2
 8025a2e:	1209      	asrs	r1, r1, #8
 8025a30:	b280      	uxth	r0, r0
 8025a32:	f889 1001 	strb.w	r1, [r9, #1]
 8025a36:	f100 0c01 	add.w	ip, r0, #1
 8025a3a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8025a3e:	1200      	asrs	r0, r0, #8
 8025a40:	f889 0002 	strb.w	r0, [r9, #2]
 8025a44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025a46:	f109 0903 	add.w	r9, r9, #3
 8025a4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025a4e:	441d      	add	r5, r3
 8025a50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025a52:	441e      	add	r6, r3
 8025a54:	e740      	b.n	80258d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025a56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025a58:	3c01      	subs	r4, #1
 8025a5a:	f108 0803 	add.w	r8, r8, #3
 8025a5e:	441d      	add	r5, r3
 8025a60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025a62:	441e      	add	r6, r3
 8025a64:	e6f3      	b.n	802584e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8025a66:	f47f af03 	bne.w	8025870 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8025a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	f340 8126 	ble.w	8025cbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8025a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025a76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025a78:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025a7c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025a80:	eef0 6a48 	vmov.f32	s13, s16
 8025a84:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025a88:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025a8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a90:	ee16 5a90 	vmov	r5, s13
 8025a94:	eef0 6a68 	vmov.f32	s13, s17
 8025a98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a9c:	ee16 6a90 	vmov	r6, s13
 8025aa0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025aa4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025aa8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025aac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025ab0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025ab4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025ab8:	ee18 2a10 	vmov	r2, s16
 8025abc:	eeb0 8a47 	vmov.f32	s16, s14
 8025ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ac4:	ee18 2a90 	vmov	r2, s17
 8025ac8:	9329      	str	r3, [sp, #164]	; 0xa4
 8025aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025acc:	eef0 8a67 	vmov.f32	s17, s15
 8025ad0:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ad4:	932a      	str	r3, [sp, #168]	; 0xa8
 8025ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025ada:	3b01      	subs	r3, #1
 8025adc:	9309      	str	r3, [sp, #36]	; 0x24
 8025ade:	bf08      	it	eq
 8025ae0:	4614      	moveq	r4, r2
 8025ae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025ae4:	bf18      	it	ne
 8025ae6:	461c      	movne	r4, r3
 8025ae8:	e6aa      	b.n	8025840 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8025aea:	2900      	cmp	r1, #0
 8025aec:	f43f af55 	beq.w	802599a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8025af0:	4453      	add	r3, sl
 8025af2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025af6:	07db      	lsls	r3, r3, #31
 8025af8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025afc:	bf54      	ite	pl
 8025afe:	f00c 030f 	andpl.w	r3, ip, #15
 8025b02:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8025b06:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025b0a:	b2db      	uxtb	r3, r3
 8025b0c:	930c      	str	r3, [sp, #48]	; 0x30
 8025b0e:	e744      	b.n	802599a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8025b10:	f889 3000 	strb.w	r3, [r9]
 8025b14:	f889 1001 	strb.w	r1, [r9, #1]
 8025b18:	f889 c002 	strb.w	ip, [r9, #2]
 8025b1c:	e792      	b.n	8025a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025b1e:	1c42      	adds	r2, r0, #1
 8025b20:	d190      	bne.n	8025a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025b22:	9a07      	ldr	r2, [sp, #28]
 8025b24:	4282      	cmp	r2, r0
 8025b26:	dd8d      	ble.n	8025a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025b28:	1c5a      	adds	r2, r3, #1
 8025b2a:	db8b      	blt.n	8025a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025b2c:	9a08      	ldr	r2, [sp, #32]
 8025b2e:	429a      	cmp	r2, r3
 8025b30:	dd88      	ble.n	8025a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025b34:	9105      	str	r1, [sp, #20]
 8025b36:	4649      	mov	r1, r9
 8025b38:	9002      	str	r0, [sp, #8]
 8025b3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025b3c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8025b40:	9b08      	ldr	r3, [sp, #32]
 8025b42:	463a      	mov	r2, r7
 8025b44:	9301      	str	r3, [sp, #4]
 8025b46:	9b07      	ldr	r3, [sp, #28]
 8025b48:	9300      	str	r3, [sp, #0]
 8025b4a:	4653      	mov	r3, sl
 8025b4c:	f7ff fd64 	bl	8025618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8025b50:	e778      	b.n	8025a44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025b52:	142a      	asrs	r2, r5, #16
 8025b54:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025b58:	1433      	asrs	r3, r6, #16
 8025b5a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025b5e:	fb0a 2303 	mla	r3, sl, r3, r2
 8025b62:	085a      	lsrs	r2, r3, #1
 8025b64:	07d9      	lsls	r1, r3, #31
 8025b66:	5cba      	ldrb	r2, [r7, r2]
 8025b68:	bf54      	ite	pl
 8025b6a:	f002 020f 	andpl.w	r2, r2, #15
 8025b6e:	1112      	asrmi	r2, r2, #4
 8025b70:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025b74:	b2d2      	uxtb	r2, r2
 8025b76:	2800      	cmp	r0, #0
 8025b78:	f000 808a 	beq.w	8025c90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8025b7c:	f103 0b01 	add.w	fp, r3, #1
 8025b80:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8025b84:	f01b 0f01 	tst.w	fp, #1
 8025b88:	5c79      	ldrb	r1, [r7, r1]
 8025b8a:	bf0c      	ite	eq
 8025b8c:	f001 010f 	andeq.w	r1, r1, #15
 8025b90:	1109      	asrne	r1, r1, #4
 8025b92:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025b96:	b2c9      	uxtb	r1, r1
 8025b98:	9111      	str	r1, [sp, #68]	; 0x44
 8025b9a:	f1bc 0f00 	cmp.w	ip, #0
 8025b9e:	d019      	beq.n	8025bd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8025ba0:	4453      	add	r3, sl
 8025ba2:	0859      	lsrs	r1, r3, #1
 8025ba4:	f013 0f01 	tst.w	r3, #1
 8025ba8:	f103 0301 	add.w	r3, r3, #1
 8025bac:	5c79      	ldrb	r1, [r7, r1]
 8025bae:	bf0c      	ite	eq
 8025bb0:	f001 010f 	andeq.w	r1, r1, #15
 8025bb4:	1109      	asrne	r1, r1, #4
 8025bb6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025bba:	b2c9      	uxtb	r1, r1
 8025bbc:	910d      	str	r1, [sp, #52]	; 0x34
 8025bbe:	0859      	lsrs	r1, r3, #1
 8025bc0:	07db      	lsls	r3, r3, #31
 8025bc2:	5c79      	ldrb	r1, [r7, r1]
 8025bc4:	bf54      	ite	pl
 8025bc6:	f001 010f 	andpl.w	r1, r1, #15
 8025bca:	1109      	asrmi	r1, r1, #4
 8025bcc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025bd0:	b2c9      	uxtb	r1, r1
 8025bd2:	9112      	str	r1, [sp, #72]	; 0x48
 8025bd4:	b280      	uxth	r0, r0
 8025bd6:	fa1f fc8c 	uxth.w	ip, ip
 8025bda:	fb00 f30c 	mul.w	r3, r0, ip
 8025bde:	0100      	lsls	r0, r0, #4
 8025be0:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8025be4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025be8:	1ac0      	subs	r0, r0, r3
 8025bea:	fa1f fc8c 	uxth.w	ip, ip
 8025bee:	b280      	uxth	r0, r0
 8025bf0:	eba1 010c 	sub.w	r1, r1, ip
 8025bf4:	fa1f fb81 	uxth.w	fp, r1
 8025bf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025bfa:	4348      	muls	r0, r1
 8025bfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025bfe:	fb02 020b 	mla	r2, r2, fp, r0
 8025c02:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025c08:	fb03 c302 	mla	r3, r3, r2, ip
 8025c0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025c10:	b3ab      	cbz	r3, 8025c7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025c12:	4a2d      	ldr	r2, [pc, #180]	; (8025cc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8025c14:	2bff      	cmp	r3, #255	; 0xff
 8025c16:	6811      	ldr	r1, [r2, #0]
 8025c18:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8025c1c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8025c20:	b2c9      	uxtb	r1, r1
 8025c22:	d045      	beq.n	8025cb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8025c24:	b298      	uxth	r0, r3
 8025c26:	43db      	mvns	r3, r3
 8025c28:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8025c2c:	fb11 f100 	smulbb	r1, r1, r0
 8025c30:	b2db      	uxtb	r3, r3
 8025c32:	fb1c fc00 	smulbb	ip, ip, r0
 8025c36:	fb02 1103 	mla	r1, r2, r3, r1
 8025c3a:	fb1b f000 	smulbb	r0, fp, r0
 8025c3e:	b289      	uxth	r1, r1
 8025c40:	1c4a      	adds	r2, r1, #1
 8025c42:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025c46:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025c4a:	fb02 cc03 	mla	ip, r2, r3, ip
 8025c4e:	1209      	asrs	r1, r1, #8
 8025c50:	fa1f fc8c 	uxth.w	ip, ip
 8025c54:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025c58:	f10c 0201 	add.w	r2, ip, #1
 8025c5c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8025c60:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8025c64:	fb02 0303 	mla	r3, r2, r3, r0
 8025c68:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025c6c:	b29b      	uxth	r3, r3
 8025c6e:	f80e cc02 	strb.w	ip, [lr, #-2]
 8025c72:	1c5a      	adds	r2, r3, #1
 8025c74:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025c78:	121b      	asrs	r3, r3, #8
 8025c7a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8025c7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025c80:	f10e 0e03 	add.w	lr, lr, #3
 8025c84:	f109 39ff 	add.w	r9, r9, #4294967295
 8025c88:	441d      	add	r5, r3
 8025c8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025c8c:	441e      	add	r6, r3
 8025c8e:	e607      	b.n	80258a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8025c90:	f1bc 0f00 	cmp.w	ip, #0
 8025c94:	d09e      	beq.n	8025bd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8025c96:	4453      	add	r3, sl
 8025c98:	0859      	lsrs	r1, r3, #1
 8025c9a:	07db      	lsls	r3, r3, #31
 8025c9c:	5c79      	ldrb	r1, [r7, r1]
 8025c9e:	bf54      	ite	pl
 8025ca0:	f001 010f 	andpl.w	r1, r1, #15
 8025ca4:	1109      	asrmi	r1, r1, #4
 8025ca6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025caa:	b2c9      	uxtb	r1, r1
 8025cac:	910d      	str	r1, [sp, #52]	; 0x34
 8025cae:	e791      	b.n	8025bd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8025cb0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025cb4:	f80e cc02 	strb.w	ip, [lr, #-2]
 8025cb8:	f80e bc01 	strb.w	fp, [lr, #-1]
 8025cbc:	e7df      	b.n	8025c7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025cbe:	b015      	add	sp, #84	; 0x54
 8025cc0:	ecbd 8b08 	vpop	{d8-d11}
 8025cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025cc8:	2000b444 	.word	0x2000b444

08025ccc <CRC_Lock>:
 8025ccc:	4a1d      	ldr	r2, [pc, #116]	; (8025d44 <CRC_Lock+0x78>)
 8025cce:	b530      	push	{r4, r5, lr}
 8025cd0:	6813      	ldr	r3, [r2, #0]
 8025cd2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8025cd6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025cda:	f023 0301 	bic.w	r3, r3, #1
 8025cde:	6013      	str	r3, [r2, #0]
 8025ce0:	4b19      	ldr	r3, [pc, #100]	; (8025d48 <CRC_Lock+0x7c>)
 8025ce2:	681a      	ldr	r2, [r3, #0]
 8025ce4:	4022      	ands	r2, r4
 8025ce6:	42aa      	cmp	r2, r5
 8025ce8:	d005      	beq.n	8025cf6 <CRC_Lock+0x2a>
 8025cea:	681b      	ldr	r3, [r3, #0]
 8025cec:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025cf0:	4023      	ands	r3, r4
 8025cf2:	4293      	cmp	r3, r2
 8025cf4:	d11d      	bne.n	8025d32 <CRC_Lock+0x66>
 8025cf6:	4b15      	ldr	r3, [pc, #84]	; (8025d4c <CRC_Lock+0x80>)
 8025cf8:	681b      	ldr	r3, [r3, #0]
 8025cfa:	b9d3      	cbnz	r3, 8025d32 <CRC_Lock+0x66>
 8025cfc:	4a14      	ldr	r2, [pc, #80]	; (8025d50 <CRC_Lock+0x84>)
 8025cfe:	6813      	ldr	r3, [r2, #0]
 8025d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025d04:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8025d08:	d006      	beq.n	8025d18 <CRC_Lock+0x4c>
 8025d0a:	6813      	ldr	r3, [r2, #0]
 8025d0c:	f240 4283 	movw	r2, #1155	; 0x483
 8025d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025d14:	4293      	cmp	r3, r2
 8025d16:	d10c      	bne.n	8025d32 <CRC_Lock+0x66>
 8025d18:	4b0e      	ldr	r3, [pc, #56]	; (8025d54 <CRC_Lock+0x88>)
 8025d1a:	2201      	movs	r2, #1
 8025d1c:	601a      	str	r2, [r3, #0]
 8025d1e:	681a      	ldr	r2, [r3, #0]
 8025d20:	2a00      	cmp	r2, #0
 8025d22:	d1fc      	bne.n	8025d1e <CRC_Lock+0x52>
 8025d24:	4b0c      	ldr	r3, [pc, #48]	; (8025d58 <CRC_Lock+0x8c>)
 8025d26:	6018      	str	r0, [r3, #0]
 8025d28:	6818      	ldr	r0, [r3, #0]
 8025d2a:	1a43      	subs	r3, r0, r1
 8025d2c:	4258      	negs	r0, r3
 8025d2e:	4158      	adcs	r0, r3
 8025d30:	bd30      	pop	{r4, r5, pc}
 8025d32:	4b0a      	ldr	r3, [pc, #40]	; (8025d5c <CRC_Lock+0x90>)
 8025d34:	2201      	movs	r2, #1
 8025d36:	601a      	str	r2, [r3, #0]
 8025d38:	681a      	ldr	r2, [r3, #0]
 8025d3a:	2a00      	cmp	r2, #0
 8025d3c:	d1fc      	bne.n	8025d38 <CRC_Lock+0x6c>
 8025d3e:	4b08      	ldr	r3, [pc, #32]	; (8025d60 <CRC_Lock+0x94>)
 8025d40:	e7f1      	b.n	8025d26 <CRC_Lock+0x5a>
 8025d42:	bf00      	nop
 8025d44:	e0002000 	.word	0xe0002000
 8025d48:	e000ed00 	.word	0xe000ed00
 8025d4c:	e0042000 	.word	0xe0042000
 8025d50:	5c001000 	.word	0x5c001000
 8025d54:	58024c08 	.word	0x58024c08
 8025d58:	58024c00 	.word	0x58024c00
 8025d5c:	40023008 	.word	0x40023008
 8025d60:	40023000 	.word	0x40023000

08025d64 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025d64:	6101      	str	r1, [r0, #16]
 8025d66:	4770      	bx	lr

08025d68 <_ZN8touchgfx8Gestures4tickEv>:
 8025d68:	7b83      	ldrb	r3, [r0, #14]
 8025d6a:	b14b      	cbz	r3, 8025d80 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025d6c:	8903      	ldrh	r3, [r0, #8]
 8025d6e:	3301      	adds	r3, #1
 8025d70:	b29b      	uxth	r3, r3
 8025d72:	2b07      	cmp	r3, #7
 8025d74:	8103      	strh	r3, [r0, #8]
 8025d76:	bf81      	itttt	hi
 8025d78:	2300      	movhi	r3, #0
 8025d7a:	8143      	strhhi	r3, [r0, #10]
 8025d7c:	8183      	strhhi	r3, [r0, #12]
 8025d7e:	7383      	strbhi	r3, [r0, #14]
 8025d80:	4770      	bx	lr
	...

08025d84 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025d84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025d88:	4604      	mov	r4, r0
 8025d8a:	4698      	mov	r8, r3
 8025d8c:	8880      	ldrh	r0, [r0, #4]
 8025d8e:	4617      	mov	r7, r2
 8025d90:	4b1d      	ldr	r3, [pc, #116]	; (8025e08 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8025d92:	460e      	mov	r6, r1
 8025d94:	f8ad 0006 	strh.w	r0, [sp, #6]
 8025d98:	eba8 0000 	sub.w	r0, r8, r0
 8025d9c:	9300      	str	r3, [sp, #0]
 8025d9e:	2300      	movs	r3, #0
 8025da0:	b280      	uxth	r0, r0
 8025da2:	8aa2      	ldrh	r2, [r4, #20]
 8025da4:	f88d 3004 	strb.w	r3, [sp, #4]
 8025da8:	b203      	sxth	r3, r0
 8025daa:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8025dae:	88e1      	ldrh	r1, [r4, #6]
 8025db0:	2b00      	cmp	r3, #0
 8025db2:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025db6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8025dba:	bfb8      	it	lt
 8025dbc:	4240      	neglt	r0, r0
 8025dbe:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025dc2:	bfb8      	it	lt
 8025dc4:	b203      	sxthlt	r3, r0
 8025dc6:	4293      	cmp	r3, r2
 8025dc8:	dc08      	bgt.n	8025ddc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8025dca:	1a69      	subs	r1, r5, r1
 8025dcc:	b289      	uxth	r1, r1
 8025dce:	b20b      	sxth	r3, r1
 8025dd0:	2b00      	cmp	r3, #0
 8025dd2:	bfbc      	itt	lt
 8025dd4:	4249      	neglt	r1, r1
 8025dd6:	b20b      	sxthlt	r3, r1
 8025dd8:	429a      	cmp	r2, r3
 8025dda:	da13      	bge.n	8025e04 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8025ddc:	6920      	ldr	r0, [r4, #16]
 8025dde:	4669      	mov	r1, sp
 8025de0:	eba8 0606 	sub.w	r6, r8, r6
 8025de4:	1bef      	subs	r7, r5, r7
 8025de6:	6803      	ldr	r3, [r0, #0]
 8025de8:	685b      	ldr	r3, [r3, #4]
 8025dea:	4798      	blx	r3
 8025dec:	2300      	movs	r3, #0
 8025dee:	2001      	movs	r0, #1
 8025df0:	8166      	strh	r6, [r4, #10]
 8025df2:	8123      	strh	r3, [r4, #8]
 8025df4:	81a7      	strh	r7, [r4, #12]
 8025df6:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025dfa:	80e5      	strh	r5, [r4, #6]
 8025dfc:	73a0      	strb	r0, [r4, #14]
 8025dfe:	b004      	add	sp, #16
 8025e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e04:	2000      	movs	r0, #0
 8025e06:	e7fa      	b.n	8025dfe <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8025e08:	0802c298 	.word	0x0802c298

08025e0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025e0e:	461e      	mov	r6, r3
 8025e10:	1e4b      	subs	r3, r1, #1
 8025e12:	b085      	sub	sp, #20
 8025e14:	4604      	mov	r4, r0
 8025e16:	2b01      	cmp	r3, #1
 8025e18:	460d      	mov	r5, r1
 8025e1a:	4617      	mov	r7, r2
 8025e1c:	d84b      	bhi.n	8025eb6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025e1e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025e22:	1cd3      	adds	r3, r2, #3
 8025e24:	b29b      	uxth	r3, r3
 8025e26:	2b06      	cmp	r3, #6
 8025e28:	d916      	bls.n	8025e58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025e2a:	f8df c098 	ldr.w	ip, [pc, #152]	; 8025ec4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8025e2e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025e32:	f8cd c004 	str.w	ip, [sp, #4]
 8025e36:	f04f 0c00 	mov.w	ip, #0
 8025e3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025e3e:	6900      	ldr	r0, [r0, #16]
 8025e40:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025e44:	a901      	add	r1, sp, #4
 8025e46:	f88d c008 	strb.w	ip, [sp, #8]
 8025e4a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025e4e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025e52:	6803      	ldr	r3, [r0, #0]
 8025e54:	689b      	ldr	r3, [r3, #8]
 8025e56:	4798      	blx	r3
 8025e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025e5c:	1cd3      	adds	r3, r2, #3
 8025e5e:	b29b      	uxth	r3, r3
 8025e60:	2b06      	cmp	r3, #6
 8025e62:	d916      	bls.n	8025e92 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025e64:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8025ec4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8025e68:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025e6c:	f8cd c004 	str.w	ip, [sp, #4]
 8025e70:	f04f 0c01 	mov.w	ip, #1
 8025e74:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025e78:	6920      	ldr	r0, [r4, #16]
 8025e7a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025e7e:	a901      	add	r1, sp, #4
 8025e80:	f88d c008 	strb.w	ip, [sp, #8]
 8025e84:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025e88:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025e8c:	6803      	ldr	r3, [r0, #0]
 8025e8e:	689b      	ldr	r3, [r3, #8]
 8025e90:	4798      	blx	r3
 8025e92:	4b0b      	ldr	r3, [pc, #44]	; (8025ec0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8025e94:	a901      	add	r1, sp, #4
 8025e96:	6920      	ldr	r0, [r4, #16]
 8025e98:	9301      	str	r3, [sp, #4]
 8025e9a:	2300      	movs	r3, #0
 8025e9c:	f88d 5008 	strb.w	r5, [sp, #8]
 8025ea0:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025ea4:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025ea8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025eac:	6803      	ldr	r3, [r0, #0]
 8025eae:	681b      	ldr	r3, [r3, #0]
 8025eb0:	4798      	blx	r3
 8025eb2:	b005      	add	sp, #20
 8025eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025eb6:	2900      	cmp	r1, #0
 8025eb8:	d1eb      	bne.n	8025e92 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025eba:	80a2      	strh	r2, [r4, #4]
 8025ebc:	80c6      	strh	r6, [r0, #6]
 8025ebe:	e7e8      	b.n	8025e92 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025ec0:	0802c284 	.word	0x0802c284
 8025ec4:	0802c2ac 	.word	0x0802c2ac

08025ec8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8025ec8:	10c9      	asrs	r1, r1, #3
 8025eca:	2900      	cmp	r1, #0
 8025ecc:	bfb8      	it	lt
 8025ece:	4249      	neglt	r1, r1
 8025ed0:	2801      	cmp	r0, #1
 8025ed2:	d108      	bne.n	8025ee6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8025ed4:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025ed8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8025edc:	4601      	mov	r1, r0
 8025ede:	dd02      	ble.n	8025ee6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8025ee0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8025ee4:	4770      	bx	lr
 8025ee6:	29ff      	cmp	r1, #255	; 0xff
 8025ee8:	bfa8      	it	ge
 8025eea:	21ff      	movge	r1, #255	; 0xff
 8025eec:	4608      	mov	r0, r1
 8025eee:	4770      	bx	lr

08025ef0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8025ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ef4:	688c      	ldr	r4, [r1, #8]
 8025ef6:	b087      	sub	sp, #28
 8025ef8:	4607      	mov	r7, r0
 8025efa:	2c00      	cmp	r4, #0
 8025efc:	db2b      	blt.n	8025f56 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8025efe:	6803      	ldr	r3, [r0, #0]
 8025f00:	691a      	ldr	r2, [r3, #16]
 8025f02:	42a2      	cmp	r2, r4
 8025f04:	dd27      	ble.n	8025f56 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8025f06:	685a      	ldr	r2, [r3, #4]
 8025f08:	695e      	ldr	r6, [r3, #20]
 8025f0a:	68cd      	ldr	r5, [r1, #12]
 8025f0c:	fb06 2604 	mla	r6, r6, r4, r2
 8025f10:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8025f14:	698a      	ldr	r2, [r1, #24]
 8025f16:	f893 a008 	ldrb.w	sl, [r3, #8]
 8025f1a:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8025f1e:	9205      	str	r2, [sp, #20]
 8025f20:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8025f24:	9b05      	ldr	r3, [sp, #20]
 8025f26:	6839      	ldr	r1, [r7, #0]
 8025f28:	eb03 0c02 	add.w	ip, r3, r2
 8025f2c:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8025f30:	68c9      	ldr	r1, [r1, #12]
 8025f32:	1898      	adds	r0, r3, r2
 8025f34:	4288      	cmp	r0, r1
 8025f36:	db02      	blt.n	8025f3e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8025f38:	1a8b      	subs	r3, r1, r2
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	dd09      	ble.n	8025f52 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8025f3e:	6878      	ldr	r0, [r7, #4]
 8025f40:	6801      	ldr	r1, [r0, #0]
 8025f42:	9400      	str	r4, [sp, #0]
 8025f44:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8025f48:	4653      	mov	r3, sl
 8025f4a:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8025f4e:	4631      	mov	r1, r6
 8025f50:	47d8      	blx	fp
 8025f52:	3d01      	subs	r5, #1
 8025f54:	d1e4      	bne.n	8025f20 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8025f56:	b007      	add	sp, #28
 8025f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025f5c <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025f5c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8025f60:	b90b      	cbnz	r3, 8025f66 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8025f62:	f001 b970 	b.w	8027246 <_ZN8touchgfx7Outline6lineToEii>
 8025f66:	4770      	bx	lr

08025f68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8025f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025f6c:	4604      	mov	r4, r0
 8025f6e:	2600      	movs	r6, #0
 8025f70:	4b8e      	ldr	r3, [pc, #568]	; (80261ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8025f72:	f100 0518 	add.w	r5, r0, #24
 8025f76:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8025f7a:	b086      	sub	sp, #24
 8025f7c:	4690      	mov	r8, r2
 8025f7e:	e9c0 3100 	strd	r3, r1, [r0]
 8025f82:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8025f86:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8025f8a:	4628      	mov	r0, r5
 8025f8c:	f001 fb7a 	bl	8027684 <_ZN8touchgfx15RenderingBufferC1Ev>
 8025f90:	4638      	mov	r0, r7
 8025f92:	f000 fb41 	bl	8026618 <_ZN8touchgfx7OutlineC1Ev>
 8025f96:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8025f9a:	f001 fb1f 	bl	80275dc <_ZN8touchgfx8ScanlineC1Ev>
 8025f9e:	2301      	movs	r3, #1
 8025fa0:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8025fa4:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8025fa8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025fac:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8025fb0:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8025fb4:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8025fb8:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8025fbc:	f7f4 fde2 	bl	801ab84 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8025fc0:	b928      	cbnz	r0, 8025fce <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8025fc2:	4b7b      	ldr	r3, [pc, #492]	; (80261b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8025fc4:	2118      	movs	r1, #24
 8025fc6:	4a7b      	ldr	r2, [pc, #492]	; (80261b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8025fc8:	487b      	ldr	r0, [pc, #492]	; (80261b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8025fca:	f001 fba3 	bl	8027714 <__assert_func>
 8025fce:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025fd2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025fd6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025fda:	4410      	add	r0, r2
 8025fdc:	9602      	str	r6, [sp, #8]
 8025fde:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8025fe2:	b280      	uxth	r0, r0
 8025fe4:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8025fe8:	fa0f fa80 	sxth.w	sl, r0
 8025fec:	f1ba 0f00 	cmp.w	sl, #0
 8025ff0:	dd70      	ble.n	80260d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025ff2:	4591      	cmp	r9, r2
 8025ff4:	dd6e      	ble.n	80260d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025ff6:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025ffa:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025ffe:	440b      	add	r3, r1
 8026000:	b29b      	uxth	r3, r3
 8026002:	b21e      	sxth	r6, r3
 8026004:	2e00      	cmp	r6, #0
 8026006:	dd65      	ble.n	80260d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026008:	458e      	cmp	lr, r1
 802600a:	dd63      	ble.n	80260d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802600c:	45d1      	cmp	r9, sl
 802600e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8026012:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026016:	bfb8      	it	lt
 8026018:	fa1f f089 	uxthlt.w	r0, r9
 802601c:	45b6      	cmp	lr, r6
 802601e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8026022:	bfb8      	it	lt
 8026024:	fa1f f38e 	uxthlt.w	r3, lr
 8026028:	1a80      	subs	r0, r0, r2
 802602a:	f8ad 100a 	strh.w	r1, [sp, #10]
 802602e:	1a5b      	subs	r3, r3, r1
 8026030:	f8ad 000c 	strh.w	r0, [sp, #12]
 8026034:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026038:	f10d 0808 	add.w	r8, sp, #8
 802603c:	ae04      	add	r6, sp, #16
 802603e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8026042:	e886 0003 	stmia.w	r6, {r0, r1}
 8026046:	f8dc 3000 	ldr.w	r3, [ip]
 802604a:	4660      	mov	r0, ip
 802604c:	4631      	mov	r1, r6
 802604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026050:	4798      	blx	r3
 8026052:	6861      	ldr	r1, [r4, #4]
 8026054:	4640      	mov	r0, r8
 8026056:	3104      	adds	r1, #4
 8026058:	f7f5 fc00 	bl	801b85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802605c:	4630      	mov	r0, r6
 802605e:	f7f5 fc15 	bl	801b88c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026062:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8026066:	f7f4 fd1d 	bl	801aaa4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802606a:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802606e:	4638      	mov	r0, r7
 8026070:	f000 faae 	bl	80265d0 <_ZN8touchgfx7Outline5resetEv>
 8026074:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8026078:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802607c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8026080:	015b      	lsls	r3, r3, #5
 8026082:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8026086:	0152      	lsls	r2, r2, #5
 8026088:	60e3      	str	r3, [r4, #12]
 802608a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802608e:	60a2      	str	r2, [r4, #8]
 8026090:	015b      	lsls	r3, r3, #5
 8026092:	6123      	str	r3, [r4, #16]
 8026094:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8026098:	015b      	lsls	r3, r3, #5
 802609a:	6163      	str	r3, [r4, #20]
 802609c:	4b47      	ldr	r3, [pc, #284]	; (80261bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802609e:	6818      	ldr	r0, [r3, #0]
 80260a0:	6803      	ldr	r3, [r0, #0]
 80260a2:	6a1b      	ldr	r3, [r3, #32]
 80260a4:	4798      	blx	r3
 80260a6:	4606      	mov	r6, r0
 80260a8:	f7e9 fb94 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 80260ac:	6803      	ldr	r3, [r0, #0]
 80260ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80260b0:	4798      	blx	r3
 80260b2:	4607      	mov	r7, r0
 80260b4:	f7e9 fb8e 	bl	800f7d4 <_ZN8touchgfx3HAL3lcdEv>
 80260b8:	6803      	ldr	r3, [r0, #0]
 80260ba:	6a1b      	ldr	r3, [r3, #32]
 80260bc:	4798      	blx	r3
 80260be:	280c      	cmp	r0, #12
 80260c0:	d854      	bhi.n	802616c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80260c2:	e8df f000 	tbb	[pc, r0]
 80260c6:	554b      	.short	0x554b
 80260c8:	2b6e0a66 	.word	0x2b6e0a66
 80260cc:	5f5f5f3b 	.word	0x5f5f5f3b
 80260d0:	5f5f      	.short	0x5f5f
 80260d2:	6e          	.byte	0x6e
 80260d3:	00          	.byte	0x00
 80260d4:	2300      	movs	r3, #0
 80260d6:	9303      	str	r3, [sp, #12]
 80260d8:	e7ae      	b.n	8026038 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80260da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80260de:	2108      	movs	r1, #8
 80260e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80260e4:	fb92 f1f1 	sdiv	r1, r2, r1
 80260e8:	fb07 1303 	mla	r3, r7, r3, r1
 80260ec:	441e      	add	r6, r3
 80260ee:	4253      	negs	r3, r2
 80260f0:	f002 0207 	and.w	r2, r2, #7
 80260f4:	f003 0307 	and.w	r3, r3, #7
 80260f8:	bf58      	it	pl
 80260fa:	425a      	negpl	r2, r3
 80260fc:	b2d2      	uxtb	r2, r2
 80260fe:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8026102:	4628      	mov	r0, r5
 8026104:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8026108:	6721      	str	r1, [r4, #112]	; 0x70
 802610a:	e9cd 1700 	strd	r1, r7, [sp]
 802610e:	4631      	mov	r1, r6
 8026110:	f001 fac4 	bl	802769c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8026114:	4620      	mov	r0, r4
 8026116:	b006      	add	sp, #24
 8026118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802611c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026120:	2104      	movs	r1, #4
 8026122:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026126:	fb92 f1f1 	sdiv	r1, r2, r1
 802612a:	fb07 1303 	mla	r3, r7, r3, r1
 802612e:	441e      	add	r6, r3
 8026130:	4253      	negs	r3, r2
 8026132:	f002 0203 	and.w	r2, r2, #3
 8026136:	f003 0303 	and.w	r3, r3, #3
 802613a:	e7dd      	b.n	80260f8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 802613c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026140:	2102      	movs	r1, #2
 8026142:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026146:	2a00      	cmp	r2, #0
 8026148:	fb92 f1f1 	sdiv	r1, r2, r1
 802614c:	f002 0201 	and.w	r2, r2, #1
 8026150:	fb07 1303 	mla	r3, r7, r3, r1
 8026154:	bfb8      	it	lt
 8026156:	4252      	neglt	r2, r2
 8026158:	441e      	add	r6, r3
 802615a:	e7cf      	b.n	80260fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802615c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026160:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026164:	437b      	muls	r3, r7
 8026166:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802616a:	441e      	add	r6, r3
 802616c:	2200      	movs	r2, #0
 802616e:	e7c6      	b.n	80260fe <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8026170:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026174:	2103      	movs	r1, #3
 8026176:	fb07 f203 	mul.w	r2, r7, r3
 802617a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802617e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8026182:	e7f2      	b.n	802616a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8026184:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026188:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802618c:	fb07 2303 	mla	r3, r7, r3, r2
 8026190:	e7eb      	b.n	802616a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8026192:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026196:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802619a:	437b      	muls	r3, r7
 802619c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80261a0:	e7e3      	b.n	802616a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80261a2:	4b07      	ldr	r3, [pc, #28]	; (80261c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80261a4:	2156      	movs	r1, #86	; 0x56
 80261a6:	4a03      	ldr	r2, [pc, #12]	; (80261b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80261a8:	e70e      	b.n	8025fc8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80261aa:	bf00      	nop
 80261ac:	0802d658 	.word	0x0802d658
 80261b0:	0802d5a2 	.word	0x0802d5a2
 80261b4:	0802d660 	.word	0x0802d660
 80261b8:	0802d5fe 	.word	0x0802d5fe
 80261bc:	2000b41c 	.word	0x2000b41c
 80261c0:	0802d632 	.word	0x0802d632

080261c4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80261c4:	6812      	ldr	r2, [r2, #0]
 80261c6:	2a00      	cmp	r2, #0
 80261c8:	db0b      	blt.n	80261e2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80261ca:	9800      	ldr	r0, [sp, #0]
 80261cc:	6800      	ldr	r0, [r0, #0]
 80261ce:	4290      	cmp	r0, r2
 80261d0:	bfd4      	ite	le
 80261d2:	2002      	movle	r0, #2
 80261d4:	2000      	movgt	r0, #0
 80261d6:	680a      	ldr	r2, [r1, #0]
 80261d8:	2a00      	cmp	r2, #0
 80261da:	da04      	bge.n	80261e6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80261dc:	f040 0004 	orr.w	r0, r0, #4
 80261e0:	4770      	bx	lr
 80261e2:	2001      	movs	r0, #1
 80261e4:	e7f7      	b.n	80261d6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80261e6:	681b      	ldr	r3, [r3, #0]
 80261e8:	4293      	cmp	r3, r2
 80261ea:	bfd8      	it	le
 80261ec:	f040 0008 	orrle.w	r0, r0, #8
 80261f0:	4770      	bx	lr
	...

080261f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80261f4:	4b07      	ldr	r3, [pc, #28]	; (8026214 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80261f6:	b510      	push	{r4, lr}
 80261f8:	781b      	ldrb	r3, [r3, #0]
 80261fa:	2b01      	cmp	r3, #1
 80261fc:	d108      	bne.n	8026210 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80261fe:	6843      	ldr	r3, [r0, #4]
 8026200:	6814      	ldr	r4, [r2, #0]
 8026202:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026206:	680b      	ldr	r3, [r1, #0]
 8026208:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802620c:	6013      	str	r3, [r2, #0]
 802620e:	600c      	str	r4, [r1, #0]
 8026210:	bd10      	pop	{r4, pc}
 8026212:	bf00      	nop
 8026214:	2000b414 	.word	0x2000b414

08026218 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8026218:	b5f0      	push	{r4, r5, r6, r7, lr}
 802621a:	b085      	sub	sp, #20
 802621c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8026220:	4604      	mov	r4, r0
 8026222:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8026226:	b33b      	cbz	r3, 8026278 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8026228:	aa02      	add	r2, sp, #8
 802622a:	a903      	add	r1, sp, #12
 802622c:	f7ff ffe2 	bl	80261f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026230:	68a3      	ldr	r3, [r4, #8]
 8026232:	9e03      	ldr	r6, [sp, #12]
 8026234:	aa02      	add	r2, sp, #8
 8026236:	9f02      	ldr	r7, [sp, #8]
 8026238:	a903      	add	r1, sp, #12
 802623a:	1af6      	subs	r6, r6, r3
 802623c:	68e3      	ldr	r3, [r4, #12]
 802623e:	4620      	mov	r0, r4
 8026240:	1aff      	subs	r7, r7, r3
 8026242:	f104 0314 	add.w	r3, r4, #20
 8026246:	9603      	str	r6, [sp, #12]
 8026248:	9300      	str	r3, [sp, #0]
 802624a:	f104 0310 	add.w	r3, r4, #16
 802624e:	9702      	str	r7, [sp, #8]
 8026250:	f7ff ffb8 	bl	80261c4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8026254:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8026258:	4605      	mov	r5, r0
 802625a:	b97b      	cbnz	r3, 802627c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802625c:	463a      	mov	r2, r7
 802625e:	4631      	mov	r1, r6
 8026260:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8026264:	f7ff fe7a 	bl	8025f5c <_ZN8touchgfx10Rasterizer6lineToEii>
 8026268:	9b03      	ldr	r3, [sp, #12]
 802626a:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802626e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8026272:	9b02      	ldr	r3, [sp, #8]
 8026274:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8026278:	b005      	add	sp, #20
 802627a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802627c:	b110      	cbz	r0, 8026284 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802627e:	ea13 0200 	ands.w	r2, r3, r0
 8026282:	d11c      	bne.n	80262be <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8026284:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8026288:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802628c:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8026290:	b188      	cbz	r0, 80262b6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8026292:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8026296:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802629a:	b913      	cbnz	r3, 80262a2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802629c:	4630      	mov	r0, r6
 802629e:	f001 f802 	bl	80272a6 <_ZN8touchgfx7Outline6moveToEii>
 80262a2:	2300      	movs	r3, #0
 80262a4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80262a8:	2301      	movs	r3, #1
 80262aa:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80262ae:	4630      	mov	r0, r6
 80262b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80262b4:	e7d6      	b.n	8026264 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80262b6:	4630      	mov	r0, r6
 80262b8:	f7ff fe50 	bl	8025f5c <_ZN8touchgfx10Rasterizer6lineToEii>
 80262bc:	e7f7      	b.n	80262ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80262be:	4615      	mov	r5, r2
 80262c0:	e7d2      	b.n	8026268 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080262c2 <_ZN8touchgfx6Canvas5closeEv>:
 80262c2:	b538      	push	{r3, r4, r5, lr}
 80262c4:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80262c8:	4604      	mov	r4, r0
 80262ca:	b993      	cbnz	r3, 80262f2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80262cc:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80262d0:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 80262d4:	4213      	tst	r3, r2
 80262d6:	d10c      	bne.n	80262f2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80262d8:	f100 0530 	add.w	r5, r0, #48	; 0x30
 80262dc:	b123      	cbz	r3, 80262e8 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80262de:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 80262e2:	4628      	mov	r0, r5
 80262e4:	f7ff fe3a 	bl	8025f5c <_ZN8touchgfx10Rasterizer6lineToEii>
 80262e8:	4628      	mov	r0, r5
 80262ea:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 80262ee:	f7ff fe35 	bl	8025f5c <_ZN8touchgfx10Rasterizer6lineToEii>
 80262f2:	2300      	movs	r3, #0
 80262f4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80262f8:	bd38      	pop	{r3, r4, r5, pc}

080262fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80262fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80262fc:	b085      	sub	sp, #20
 80262fe:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8026302:	4604      	mov	r4, r0
 8026304:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8026308:	b353      	cbz	r3, 8026360 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802630a:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802630e:	b90b      	cbnz	r3, 8026314 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8026310:	f7ff ffd7 	bl	80262c2 <_ZN8touchgfx6Canvas5closeEv>
 8026314:	aa02      	add	r2, sp, #8
 8026316:	a903      	add	r1, sp, #12
 8026318:	4620      	mov	r0, r4
 802631a:	f7ff ff6b 	bl	80261f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802631e:	68a3      	ldr	r3, [r4, #8]
 8026320:	9d03      	ldr	r5, [sp, #12]
 8026322:	aa02      	add	r2, sp, #8
 8026324:	9e02      	ldr	r6, [sp, #8]
 8026326:	a903      	add	r1, sp, #12
 8026328:	1aed      	subs	r5, r5, r3
 802632a:	68e3      	ldr	r3, [r4, #12]
 802632c:	4620      	mov	r0, r4
 802632e:	1af6      	subs	r6, r6, r3
 8026330:	f104 0314 	add.w	r3, r4, #20
 8026334:	9503      	str	r5, [sp, #12]
 8026336:	9300      	str	r3, [sp, #0]
 8026338:	f104 0310 	add.w	r3, r4, #16
 802633c:	9602      	str	r6, [sp, #8]
 802633e:	f7ff ff41 	bl	80261c4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8026342:	4607      	mov	r7, r0
 8026344:	b170      	cbz	r0, 8026364 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8026346:	2301      	movs	r3, #1
 8026348:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802634c:	9a03      	ldr	r2, [sp, #12]
 802634e:	9b02      	ldr	r3, [sp, #8]
 8026350:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8026354:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8026358:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802635c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8026360:	b005      	add	sp, #20
 8026362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026364:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8026368:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802636c:	b92b      	cbnz	r3, 802637a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802636e:	4632      	mov	r2, r6
 8026370:	4629      	mov	r1, r5
 8026372:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8026376:	f000 ff96 	bl	80272a6 <_ZN8touchgfx7Outline6moveToEii>
 802637a:	2300      	movs	r3, #0
 802637c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026380:	2301      	movs	r3, #1
 8026382:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8026386:	e7e1      	b.n	802634c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08026388 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8026388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802638c:	4604      	mov	r4, r0
 802638e:	b087      	sub	sp, #28
 8026390:	9105      	str	r1, [sp, #20]
 8026392:	f001 f8cc 	bl	802752e <_ZN8touchgfx7Outline8getCellsEv>
 8026396:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802639a:	4605      	mov	r5, r0
 802639c:	f1b9 0f00 	cmp.w	r9, #0
 80263a0:	d103      	bne.n	80263aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80263a2:	2001      	movs	r0, #1
 80263a4:	b007      	add	sp, #28
 80263a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263aa:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80263ae:	2e00      	cmp	r6, #0
 80263b0:	d139      	bne.n	8026426 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80263b2:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80263b6:	f105 0708 	add.w	r7, r5, #8
 80263ba:	4640      	mov	r0, r8
 80263bc:	f001 f8f9 	bl	80275b2 <_ZN8touchgfx8Scanline5resetEv>
 80263c0:	f109 33ff 	add.w	r3, r9, #4294967295
 80263c4:	9303      	str	r3, [sp, #12]
 80263c6:	f9b5 b000 	ldrsh.w	fp, [r5]
 80263ca:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80263ce:	46da      	mov	sl, fp
 80263d0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80263d4:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80263d8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80263dc:	9b03      	ldr	r3, [sp, #12]
 80263de:	4416      	add	r6, r2
 80263e0:	9504      	str	r5, [sp, #16]
 80263e2:	463d      	mov	r5, r7
 80263e4:	3b01      	subs	r3, #1
 80263e6:	9303      	str	r3, [sp, #12]
 80263e8:	3301      	adds	r3, #1
 80263ea:	d01e      	beq.n	802642a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80263ec:	3708      	adds	r7, #8
 80263ee:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80263f2:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80263f6:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80263fa:	4290      	cmp	r0, r2
 80263fc:	d11e      	bne.n	802643c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80263fe:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8026402:	4411      	add	r1, r2
 8026404:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8026408:	e7e8      	b.n	80263dc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802640a:	1c91      	adds	r1, r2, #2
 802640c:	f04f 0301 	mov.w	r3, #1
 8026410:	65e1      	str	r1, [r4, #92]	; 0x5c
 8026412:	8053      	strh	r3, [r2, #2]
 8026414:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8026416:	1c91      	adds	r1, r2, #2
 8026418:	65a1      	str	r1, [r4, #88]	; 0x58
 802641a:	f8a2 b002 	strh.w	fp, [r2, #2]
 802641e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8026420:	3201      	adds	r2, #1
 8026422:	6562      	str	r2, [r4, #84]	; 0x54
 8026424:	e03a      	b.n	802649c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8026426:	2000      	movs	r0, #0
 8026428:	e7bc      	b.n	80263a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802642a:	b951      	cbnz	r1, 8026442 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802642c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802642e:	2b00      	cmp	r3, #0
 8026430:	d0b7      	beq.n	80263a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8026432:	4641      	mov	r1, r8
 8026434:	9805      	ldr	r0, [sp, #20]
 8026436:	f7ff fd5b 	bl	8025ef0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802643a:	e7b2      	b.n	80263a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802643c:	2900      	cmp	r1, #0
 802643e:	d035      	beq.n	80264ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8026440:	9504      	str	r5, [sp, #16]
 8026442:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8026446:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802644a:	f7ff fd3d 	bl	8025ec8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 802644e:	4605      	mov	r5, r0
 8026450:	b330      	cbz	r0, 80264a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8026452:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8026454:	b182      	cbz	r2, 8026478 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8026456:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8026458:	454a      	cmp	r2, r9
 802645a:	d00d      	beq.n	8026478 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802645c:	4641      	mov	r1, r8
 802645e:	9805      	ldr	r0, [sp, #20]
 8026460:	f7ff fd46 	bl	8025ef0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8026464:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026468:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802646a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802646e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8026470:	2300      	movs	r3, #0
 8026472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026474:	6563      	str	r3, [r4, #84]	; 0x54
 8026476:	65a2      	str	r2, [r4, #88]	; 0x58
 8026478:	f1bb 0f00 	cmp.w	fp, #0
 802647c:	db10      	blt.n	80264a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802647e:	f7f4 fb8f 	bl	801aba0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026482:	4583      	cmp	fp, r0
 8026484:	d20c      	bcs.n	80264a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8026486:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8026488:	f802 500b 	strb.w	r5, [r2, fp]
 802648c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802648e:	3201      	adds	r2, #1
 8026490:	455a      	cmp	r2, fp
 8026492:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8026494:	d1b9      	bne.n	802640a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8026496:	8811      	ldrh	r1, [r2, #0]
 8026498:	3101      	adds	r1, #1
 802649a:	8011      	strh	r1, [r2, #0]
 802649c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80264a0:	9b03      	ldr	r3, [sp, #12]
 80264a2:	3301      	adds	r3, #1
 80264a4:	d0c2      	beq.n	802642c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80264a6:	f10b 0a01 	add.w	sl, fp, #1
 80264aa:	9d04      	ldr	r5, [sp, #16]
 80264ac:	f9b5 3000 	ldrsh.w	r3, [r5]
 80264b0:	4553      	cmp	r3, sl
 80264b2:	dd88      	ble.n	80263c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80264b4:	01b1      	lsls	r1, r6, #6
 80264b6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80264ba:	f7ff fd05 	bl	8025ec8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 80264be:	4683      	mov	fp, r0
 80264c0:	2800      	cmp	r0, #0
 80264c2:	d080      	beq.n	80263c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80264c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80264c6:	b183      	cbz	r3, 80264ea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80264c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80264ca:	454b      	cmp	r3, r9
 80264cc:	d00d      	beq.n	80264ea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80264ce:	4641      	mov	r1, r8
 80264d0:	9805      	ldr	r0, [sp, #20]
 80264d2:	f7ff fd0d 	bl	8025ef0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80264d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80264da:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80264de:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80264e0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80264e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80264e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80264e6:	2300      	movs	r3, #0
 80264e8:	6563      	str	r3, [r4, #84]	; 0x54
 80264ea:	f9b5 3000 	ldrsh.w	r3, [r5]
 80264ee:	464a      	mov	r2, r9
 80264f0:	f8cd b000 	str.w	fp, [sp]
 80264f4:	4651      	mov	r1, sl
 80264f6:	eba3 030a 	sub.w	r3, r3, sl
 80264fa:	4640      	mov	r0, r8
 80264fc:	f001 f880 	bl	8027600 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8026500:	e761      	b.n	80263c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08026502 <_ZN8touchgfx6Canvas6renderEv>:
 8026502:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026504:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8026508:	4604      	mov	r4, r0
 802650a:	b913      	cbnz	r3, 8026512 <_ZN8touchgfx6Canvas6renderEv+0x10>
 802650c:	2001      	movs	r0, #1
 802650e:	b003      	add	sp, #12
 8026510:	bd30      	pop	{r4, r5, pc}
 8026512:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8026516:	2b00      	cmp	r3, #0
 8026518:	d12e      	bne.n	8026578 <_ZN8touchgfx6Canvas6renderEv+0x76>
 802651a:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802651e:	2b00      	cmp	r3, #0
 8026520:	d0f4      	beq.n	802650c <_ZN8touchgfx6Canvas6renderEv+0xa>
 8026522:	6840      	ldr	r0, [r0, #4]
 8026524:	6803      	ldr	r3, [r0, #0]
 8026526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8026528:	4798      	blx	r3
 802652a:	2800      	cmp	r0, #0
 802652c:	d0ee      	beq.n	802650c <_ZN8touchgfx6Canvas6renderEv+0xa>
 802652e:	4620      	mov	r0, r4
 8026530:	f7ff fec7 	bl	80262c2 <_ZN8touchgfx6Canvas5closeEv>
 8026534:	6860      	ldr	r0, [r4, #4]
 8026536:	6803      	ldr	r3, [r0, #0]
 8026538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802653a:	4798      	blx	r3
 802653c:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8026540:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8026544:	8082      	strh	r2, [r0, #4]
 8026546:	80c3      	strh	r3, [r0, #6]
 8026548:	6860      	ldr	r0, [r4, #4]
 802654a:	6803      	ldr	r3, [r0, #0]
 802654c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802654e:	4798      	blx	r3
 8026550:	4605      	mov	r5, r0
 8026552:	6860      	ldr	r0, [r4, #4]
 8026554:	6803      	ldr	r3, [r0, #0]
 8026556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8026558:	4798      	blx	r3
 802655a:	7228      	strb	r0, [r5, #8]
 802655c:	6860      	ldr	r0, [r4, #4]
 802655e:	6803      	ldr	r3, [r0, #0]
 8026560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8026562:	4798      	blx	r3
 8026564:	f104 0318 	add.w	r3, r4, #24
 8026568:	4669      	mov	r1, sp
 802656a:	e9cd 3000 	strd	r3, r0, [sp]
 802656e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8026572:	f7ff ff09 	bl	8026388 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8026576:	e7ca      	b.n	802650e <_ZN8touchgfx6Canvas6renderEv+0xc>
 8026578:	2000      	movs	r0, #0
 802657a:	e7c8      	b.n	802650e <_ZN8touchgfx6Canvas6renderEv+0xc>

0802657c <_ZN8touchgfx6CanvasD1Ev>:
 802657c:	b538      	push	{r3, r4, r5, lr}
 802657e:	4605      	mov	r5, r0
 8026580:	4b08      	ldr	r3, [pc, #32]	; (80265a4 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8026582:	4604      	mov	r4, r0
 8026584:	f845 3b30 	str.w	r3, [r5], #48
 8026588:	4b07      	ldr	r3, [pc, #28]	; (80265a8 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802658a:	6818      	ldr	r0, [r3, #0]
 802658c:	6803      	ldr	r3, [r0, #0]
 802658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026590:	4798      	blx	r3
 8026592:	4628      	mov	r0, r5
 8026594:	f000 f814 	bl	80265c0 <_ZN8touchgfx7OutlineD1Ev>
 8026598:	f104 0018 	add.w	r0, r4, #24
 802659c:	f001 f869 	bl	8027672 <_ZN8touchgfx15RenderingBufferD1Ev>
 80265a0:	4620      	mov	r0, r4
 80265a2:	bd38      	pop	{r3, r4, r5, pc}
 80265a4:	0802d658 	.word	0x0802d658
 80265a8:	2000b41c 	.word	0x2000b41c

080265ac <_ZN8touchgfx6CanvasD0Ev>:
 80265ac:	b510      	push	{r4, lr}
 80265ae:	4604      	mov	r4, r0
 80265b0:	f7ff ffe4 	bl	802657c <_ZN8touchgfx6CanvasD1Ev>
 80265b4:	21bc      	movs	r1, #188	; 0xbc
 80265b6:	4620      	mov	r0, r4
 80265b8:	f001 f880 	bl	80276bc <_ZdlPvj>
 80265bc:	4620      	mov	r0, r4
 80265be:	bd10      	pop	{r4, pc}

080265c0 <_ZN8touchgfx7OutlineD1Ev>:
 80265c0:	4770      	bx	lr

080265c2 <_ZN8touchgfx7OutlineD0Ev>:
 80265c2:	b510      	push	{r4, lr}
 80265c4:	4604      	mov	r4, r0
 80265c6:	2148      	movs	r1, #72	; 0x48
 80265c8:	f001 f878 	bl	80276bc <_ZdlPvj>
 80265cc:	4620      	mov	r0, r4
 80265ce:	bd10      	pop	{r4, pc}

080265d0 <_ZN8touchgfx7Outline5resetEv>:
 80265d0:	b510      	push	{r4, lr}
 80265d2:	4604      	mov	r4, r0
 80265d4:	f7f4 fafc 	bl	801abd0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80265d8:	60e0      	str	r0, [r4, #12]
 80265da:	f7f4 faff 	bl	801abdc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80265de:	68e3      	ldr	r3, [r4, #12]
 80265e0:	2200      	movs	r2, #0
 80265e2:	08c0      	lsrs	r0, r0, #3
 80265e4:	6123      	str	r3, [r4, #16]
 80265e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80265ea:	6060      	str	r0, [r4, #4]
 80265ec:	82a3      	strh	r3, [r4, #20]
 80265ee:	82e3      	strh	r3, [r4, #22]
 80265f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80265f2:	60a2      	str	r2, [r4, #8]
 80265f4:	f023 0301 	bic.w	r3, r3, #1
 80265f8:	8322      	strh	r2, [r4, #24]
 80265fa:	8362      	strh	r2, [r4, #26]
 80265fc:	f043 0302 	orr.w	r3, r3, #2
 8026600:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026604:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026606:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802660a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802660e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8026612:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8026616:	bd10      	pop	{r4, pc}

08026618 <_ZN8touchgfx7OutlineC1Ev>:
 8026618:	4b0f      	ldr	r3, [pc, #60]	; (8026658 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802661a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802661e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8026622:	b510      	push	{r4, lr}
 8026624:	6003      	str	r3, [r0, #0]
 8026626:	2300      	movs	r3, #0
 8026628:	4604      	mov	r4, r0
 802662a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802662e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8026632:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026636:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802663a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802663e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8026642:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8026646:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802664a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802664e:	f7ff ffbf 	bl	80265d0 <_ZN8touchgfx7Outline5resetEv>
 8026652:	4620      	mov	r0, r4
 8026654:	bd10      	pop	{r4, pc}
 8026656:	bf00      	nop
 8026658:	0802d6b8 	.word	0x0802d6b8

0802665c <_ZN8touchgfx7Outline10renderLineEiiii>:
 802665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026660:	b093      	sub	sp, #76	; 0x4c
 8026662:	4604      	mov	r4, r0
 8026664:	1156      	asrs	r6, r2, #5
 8026666:	f002 0e1f 	and.w	lr, r2, #31
 802666a:	981c      	ldr	r0, [sp, #112]	; 0x70
 802666c:	9305      	str	r3, [sp, #20]
 802666e:	1143      	asrs	r3, r0, #5
 8026670:	1145      	asrs	r5, r0, #5
 8026672:	930c      	str	r3, [sp, #48]	; 0x30
 8026674:	f000 031f 	and.w	r3, r0, #31
 8026678:	9303      	str	r3, [sp, #12]
 802667a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802667c:	42b3      	cmp	r3, r6
 802667e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026680:	bfc8      	it	gt
 8026682:	6326      	strgt	r6, [r4, #48]	; 0x30
 8026684:	42b3      	cmp	r3, r6
 8026686:	bfdc      	itt	le
 8026688:	1c73      	addle	r3, r6, #1
 802668a:	63a3      	strle	r3, [r4, #56]	; 0x38
 802668c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802668e:	42ab      	cmp	r3, r5
 8026690:	bfc8      	it	gt
 8026692:	462b      	movgt	r3, r5
 8026694:	ea4f 1560 	mov.w	r5, r0, asr #5
 8026698:	bfc8      	it	gt
 802669a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802669c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802669e:	42ab      	cmp	r3, r5
 80266a0:	bfd8      	it	le
 80266a2:	462b      	movle	r3, r5
 80266a4:	ea4f 1561 	mov.w	r5, r1, asr #5
 80266a8:	bfdc      	itt	le
 80266aa:	3301      	addle	r3, #1
 80266ac:	63a3      	strle	r3, [r4, #56]	; 0x38
 80266ae:	9b05      	ldr	r3, [sp, #20]
 80266b0:	eba3 0a01 	sub.w	sl, r3, r1
 80266b4:	1143      	asrs	r3, r0, #5
 80266b6:	429e      	cmp	r6, r3
 80266b8:	f040 8119 	bne.w	80268ee <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80266bc:	9b05      	ldr	r3, [sp, #20]
 80266be:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80266c2:	9b03      	ldr	r3, [sp, #12]
 80266c4:	459e      	cmp	lr, r3
 80266c6:	d12c      	bne.n	8026722 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80266c8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80266cc:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80266d0:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80266d4:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80266d8:	4291      	cmp	r1, r2
 80266da:	d037      	beq.n	802674c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80266dc:	8b61      	ldrh	r1, [r4, #26]
 80266de:	8b22      	ldrh	r2, [r4, #24]
 80266e0:	430a      	orrs	r2, r1
 80266e2:	d00b      	beq.n	80266fc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80266e4:	2b00      	cmp	r3, #0
 80266e6:	db09      	blt.n	80266fc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80266e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80266ea:	429a      	cmp	r2, r3
 80266ec:	dd06      	ble.n	80266fc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80266ee:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80266f2:	429a      	cmp	r2, r3
 80266f4:	d308      	bcc.n	8026708 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80266f6:	2301      	movs	r3, #1
 80266f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80266fc:	f8a4 c014 	strh.w	ip, [r4, #20]
 8026700:	82e6      	strh	r6, [r4, #22]
 8026702:	2300      	movs	r3, #0
 8026704:	8323      	strh	r3, [r4, #24]
 8026706:	e0c6      	b.n	8026896 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8026708:	f104 0314 	add.w	r3, r4, #20
 802670c:	6922      	ldr	r2, [r4, #16]
 802670e:	cb03      	ldmia	r3!, {r0, r1}
 8026710:	6010      	str	r0, [r2, #0]
 8026712:	6051      	str	r1, [r2, #4]
 8026714:	6923      	ldr	r3, [r4, #16]
 8026716:	3308      	adds	r3, #8
 8026718:	6123      	str	r3, [r4, #16]
 802671a:	68a3      	ldr	r3, [r4, #8]
 802671c:	3301      	adds	r3, #1
 802671e:	60a3      	str	r3, [r4, #8]
 8026720:	e7ec      	b.n	80266fc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026722:	9b05      	ldr	r3, [sp, #20]
 8026724:	45ac      	cmp	ip, r5
 8026726:	f001 011f 	and.w	r1, r1, #31
 802672a:	8b20      	ldrh	r0, [r4, #24]
 802672c:	f003 031f 	and.w	r3, r3, #31
 8026730:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8026734:	9304      	str	r3, [sp, #16]
 8026736:	9b03      	ldr	r3, [sp, #12]
 8026738:	eba3 020e 	sub.w	r2, r3, lr
 802673c:	d109      	bne.n	8026752 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 802673e:	9b04      	ldr	r3, [sp, #16]
 8026740:	4410      	add	r0, r2
 8026742:	4419      	add	r1, r3
 8026744:	8320      	strh	r0, [r4, #24]
 8026746:	fb02 8201 	mla	r2, r2, r1, r8
 802674a:	8362      	strh	r2, [r4, #26]
 802674c:	b013      	add	sp, #76	; 0x4c
 802674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026752:	f1ba 0f00 	cmp.w	sl, #0
 8026756:	f2c0 80a0 	blt.w	802689a <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802675a:	f1c1 0320 	rsb	r3, r1, #32
 802675e:	f04f 0b20 	mov.w	fp, #32
 8026762:	435a      	muls	r2, r3
 8026764:	2301      	movs	r3, #1
 8026766:	9302      	str	r3, [sp, #8]
 8026768:	4459      	add	r1, fp
 802676a:	fb92 f7fa 	sdiv	r7, r2, sl
 802676e:	fb0a 2217 	mls	r2, sl, r7, r2
 8026772:	2a00      	cmp	r2, #0
 8026774:	bfbc      	itt	lt
 8026776:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802677a:	4452      	addlt	r2, sl
 802677c:	fb07 8101 	mla	r1, r7, r1, r8
 8026780:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8026784:	4438      	add	r0, r7
 8026786:	b20b      	sxth	r3, r1
 8026788:	9902      	ldr	r1, [sp, #8]
 802678a:	b200      	sxth	r0, r0
 802678c:	9301      	str	r3, [sp, #4]
 802678e:	8363      	strh	r3, [r4, #26]
 8026790:	186b      	adds	r3, r5, r1
 8026792:	0435      	lsls	r5, r6, #16
 8026794:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026798:	8320      	strh	r0, [r4, #24]
 802679a:	eb03 0905 	add.w	r9, r3, r5
 802679e:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80267a2:	9300      	str	r3, [sp, #0]
 80267a4:	45c1      	cmp	r9, r8
 80267a6:	9505      	str	r5, [sp, #20]
 80267a8:	d014      	beq.n	80267d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80267aa:	9b01      	ldr	r3, [sp, #4]
 80267ac:	4303      	orrs	r3, r0
 80267ae:	d00b      	beq.n	80267c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80267b0:	2900      	cmp	r1, #0
 80267b2:	db09      	blt.n	80267c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80267b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80267b6:	428b      	cmp	r3, r1
 80267b8:	dd06      	ble.n	80267c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80267ba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80267be:	4299      	cmp	r1, r3
 80267c0:	d374      	bcc.n	80268ac <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80267c2:	2301      	movs	r3, #1
 80267c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80267c8:	9b00      	ldr	r3, [sp, #0]
 80267ca:	82e6      	strh	r6, [r4, #22]
 80267cc:	82a3      	strh	r3, [r4, #20]
 80267ce:	2300      	movs	r3, #0
 80267d0:	8323      	strh	r3, [r4, #24]
 80267d2:	8363      	strh	r3, [r4, #26]
 80267d4:	9900      	ldr	r1, [sp, #0]
 80267d6:	eb0e 0307 	add.w	r3, lr, r7
 80267da:	458c      	cmp	ip, r1
 80267dc:	d04e      	beq.n	802687c <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80267de:	9903      	ldr	r1, [sp, #12]
 80267e0:	eba2 020a 	sub.w	r2, r2, sl
 80267e4:	1ac9      	subs	r1, r1, r3
 80267e6:	9201      	str	r2, [sp, #4]
 80267e8:	440f      	add	r7, r1
 80267ea:	017f      	lsls	r7, r7, #5
 80267ec:	fb97 fefa 	sdiv	lr, r7, sl
 80267f0:	fb0a 771e 	mls	r7, sl, lr, r7
 80267f4:	2f00      	cmp	r7, #0
 80267f6:	bfbc      	itt	lt
 80267f8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80267fc:	4457      	addlt	r7, sl
 80267fe:	f10e 0101 	add.w	r1, lr, #1
 8026802:	9106      	str	r1, [sp, #24]
 8026804:	9a01      	ldr	r2, [sp, #4]
 8026806:	8b20      	ldrh	r0, [r4, #24]
 8026808:	19d2      	adds	r2, r2, r7
 802680a:	8b61      	ldrh	r1, [r4, #26]
 802680c:	9d02      	ldr	r5, [sp, #8]
 802680e:	9201      	str	r2, [sp, #4]
 8026810:	bf5b      	ittet	pl
 8026812:	eba2 020a 	subpl.w	r2, r2, sl
 8026816:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802681a:	46f0      	movmi	r8, lr
 802681c:	9201      	strpl	r2, [sp, #4]
 802681e:	9a00      	ldr	r2, [sp, #0]
 8026820:	4440      	add	r0, r8
 8026822:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8026826:	4443      	add	r3, r8
 8026828:	442a      	add	r2, r5
 802682a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802682e:	9d05      	ldr	r5, [sp, #20]
 8026830:	b200      	sxth	r0, r0
 8026832:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026836:	b209      	sxth	r1, r1
 8026838:	4415      	add	r5, r2
 802683a:	8320      	strh	r0, [r4, #24]
 802683c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026840:	8361      	strh	r1, [r4, #26]
 8026842:	9200      	str	r2, [sp, #0]
 8026844:	454d      	cmp	r5, r9
 8026846:	d016      	beq.n	8026876 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8026848:	4301      	orrs	r1, r0
 802684a:	d00d      	beq.n	8026868 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802684c:	f1b8 0f00 	cmp.w	r8, #0
 8026850:	db0a      	blt.n	8026868 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8026852:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026854:	4541      	cmp	r1, r8
 8026856:	dd07      	ble.n	8026868 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8026858:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802685c:	4288      	cmp	r0, r1
 802685e:	d335      	bcc.n	80268cc <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8026860:	f04f 0101 	mov.w	r1, #1
 8026864:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8026868:	9900      	ldr	r1, [sp, #0]
 802686a:	82e6      	strh	r6, [r4, #22]
 802686c:	82a1      	strh	r1, [r4, #20]
 802686e:	f04f 0100 	mov.w	r1, #0
 8026872:	8321      	strh	r1, [r4, #24]
 8026874:	8361      	strh	r1, [r4, #26]
 8026876:	9a00      	ldr	r2, [sp, #0]
 8026878:	4594      	cmp	ip, r2
 802687a:	d1c3      	bne.n	8026804 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 802687c:	9a03      	ldr	r2, [sp, #12]
 802687e:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8026882:	1ad3      	subs	r3, r2, r3
 8026884:	8b22      	ldrh	r2, [r4, #24]
 8026886:	441a      	add	r2, r3
 8026888:	8322      	strh	r2, [r4, #24]
 802688a:	9a04      	ldr	r2, [sp, #16]
 802688c:	3220      	adds	r2, #32
 802688e:	eba2 020b 	sub.w	r2, r2, fp
 8026892:	fb03 c302 	mla	r3, r3, r2, ip
 8026896:	8363      	strh	r3, [r4, #26]
 8026898:	e758      	b.n	802674c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802689a:	f04f 33ff 	mov.w	r3, #4294967295
 802689e:	434a      	muls	r2, r1
 80268a0:	f1ca 0a00 	rsb	sl, sl, #0
 80268a4:	f04f 0b00 	mov.w	fp, #0
 80268a8:	9302      	str	r3, [sp, #8]
 80268aa:	e75d      	b.n	8026768 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80268ac:	f104 0314 	add.w	r3, r4, #20
 80268b0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80268b4:	cb03      	ldmia	r3!, {r0, r1}
 80268b6:	f8c8 0000 	str.w	r0, [r8]
 80268ba:	f8c8 1004 	str.w	r1, [r8, #4]
 80268be:	6923      	ldr	r3, [r4, #16]
 80268c0:	3308      	adds	r3, #8
 80268c2:	6123      	str	r3, [r4, #16]
 80268c4:	68a3      	ldr	r3, [r4, #8]
 80268c6:	3301      	adds	r3, #1
 80268c8:	60a3      	str	r3, [r4, #8]
 80268ca:	e77d      	b.n	80267c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80268cc:	f104 0814 	add.w	r8, r4, #20
 80268d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80268d4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80268d8:	f8c9 0000 	str.w	r0, [r9]
 80268dc:	f8c9 1004 	str.w	r1, [r9, #4]
 80268e0:	6921      	ldr	r1, [r4, #16]
 80268e2:	3108      	adds	r1, #8
 80268e4:	6121      	str	r1, [r4, #16]
 80268e6:	68a1      	ldr	r1, [r4, #8]
 80268e8:	3101      	adds	r1, #1
 80268ea:	60a1      	str	r1, [r4, #8]
 80268ec:	e7bc      	b.n	8026868 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80268ee:	1a83      	subs	r3, r0, r2
 80268f0:	9301      	str	r3, [sp, #4]
 80268f2:	f1ba 0f00 	cmp.w	sl, #0
 80268f6:	f040 8094 	bne.w	8026a22 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80268fa:	9a01      	ldr	r2, [sp, #4]
 80268fc:	0049      	lsls	r1, r1, #1
 80268fe:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8026902:	2a00      	cmp	r2, #0
 8026904:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8026908:	8b62      	ldrh	r2, [r4, #26]
 802690a:	bfaa      	itet	ge
 802690c:	f04f 0a20 	movge.w	sl, #32
 8026910:	f04f 38ff 	movlt.w	r8, #4294967295
 8026914:	f04f 0801 	movge.w	r8, #1
 8026918:	8b21      	ldrh	r1, [r4, #24]
 802691a:	ebaa 0e0e 	sub.w	lr, sl, lr
 802691e:	4471      	add	r1, lr
 8026920:	fb0e 2e03 	mla	lr, lr, r3, r2
 8026924:	eb08 0206 	add.w	r2, r8, r6
 8026928:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 802692c:	b209      	sxth	r1, r1
 802692e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8026932:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8026936:	8321      	strh	r1, [r4, #24]
 8026938:	fa0f fe8e 	sxth.w	lr, lr
 802693c:	42b7      	cmp	r7, r6
 802693e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8026942:	d013      	beq.n	802696c <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8026944:	ea51 010e 	orrs.w	r1, r1, lr
 8026948:	d00b      	beq.n	8026962 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802694a:	2800      	cmp	r0, #0
 802694c:	db09      	blt.n	8026962 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802694e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026950:	4281      	cmp	r1, r0
 8026952:	dd06      	ble.n	8026962 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026954:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026958:	4288      	cmp	r0, r1
 802695a:	d339      	bcc.n	80269d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 802695c:	2101      	movs	r1, #1
 802695e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8026962:	2100      	movs	r1, #0
 8026964:	82a5      	strh	r5, [r4, #20]
 8026966:	82e2      	strh	r2, [r4, #22]
 8026968:	8321      	strh	r1, [r4, #24]
 802696a:	8361      	strh	r1, [r4, #26]
 802696c:	f1aa 0610 	sub.w	r6, sl, #16
 8026970:	f04f 0e00 	mov.w	lr, #0
 8026974:	f04f 0b01 	mov.w	fp, #1
 8026978:	0076      	lsls	r6, r6, #1
 802697a:	fb06 f703 	mul.w	r7, r6, r3
 802697e:	b236      	sxth	r6, r6
 8026980:	b23f      	sxth	r7, r7
 8026982:	ea46 0107 	orr.w	r1, r6, r7
 8026986:	9100      	str	r1, [sp, #0]
 8026988:	990c      	ldr	r1, [sp, #48]	; 0x30
 802698a:	428a      	cmp	r2, r1
 802698c:	d03e      	beq.n	8026a0c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802698e:	4442      	add	r2, r8
 8026990:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026994:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8026998:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 802699c:	8326      	strh	r6, [r4, #24]
 802699e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80269a2:	8367      	strh	r7, [r4, #26]
 80269a4:	4584      	cmp	ip, r0
 80269a6:	d0ef      	beq.n	8026988 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80269a8:	9800      	ldr	r0, [sp, #0]
 80269aa:	b150      	cbz	r0, 80269c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80269ac:	2900      	cmp	r1, #0
 80269ae:	db08      	blt.n	80269c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80269b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80269b2:	4288      	cmp	r0, r1
 80269b4:	dd05      	ble.n	80269c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80269b6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80269ba:	4288      	cmp	r0, r1
 80269bc:	d315      	bcc.n	80269ea <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80269be:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80269c2:	82a5      	strh	r5, [r4, #20]
 80269c4:	82e2      	strh	r2, [r4, #22]
 80269c6:	f8a4 e018 	strh.w	lr, [r4, #24]
 80269ca:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80269ce:	e7db      	b.n	8026988 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80269d0:	f104 0614 	add.w	r6, r4, #20
 80269d4:	6927      	ldr	r7, [r4, #16]
 80269d6:	ce03      	ldmia	r6!, {r0, r1}
 80269d8:	6038      	str	r0, [r7, #0]
 80269da:	6079      	str	r1, [r7, #4]
 80269dc:	6921      	ldr	r1, [r4, #16]
 80269de:	3108      	adds	r1, #8
 80269e0:	6121      	str	r1, [r4, #16]
 80269e2:	68a1      	ldr	r1, [r4, #8]
 80269e4:	3101      	adds	r1, #1
 80269e6:	60a1      	str	r1, [r4, #8]
 80269e8:	e7bb      	b.n	8026962 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80269ea:	f104 0c14 	add.w	ip, r4, #20
 80269ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80269f2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80269f6:	f8c9 0000 	str.w	r0, [r9]
 80269fa:	f8c9 1004 	str.w	r1, [r9, #4]
 80269fe:	6921      	ldr	r1, [r4, #16]
 8026a00:	3108      	adds	r1, #8
 8026a02:	6121      	str	r1, [r4, #16]
 8026a04:	68a1      	ldr	r1, [r4, #8]
 8026a06:	3101      	adds	r1, #1
 8026a08:	60a1      	str	r1, [r4, #8]
 8026a0a:	e7da      	b.n	80269c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8026a0c:	9a03      	ldr	r2, [sp, #12]
 8026a0e:	8b61      	ldrh	r1, [r4, #26]
 8026a10:	f1a2 0c20 	sub.w	ip, r2, #32
 8026a14:	8b22      	ldrh	r2, [r4, #24]
 8026a16:	44d4      	add	ip, sl
 8026a18:	4462      	add	r2, ip
 8026a1a:	fb0c 1303 	mla	r3, ip, r3, r1
 8026a1e:	8322      	strh	r2, [r4, #24]
 8026a20:	e739      	b.n	8026896 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8026a22:	9b01      	ldr	r3, [sp, #4]
 8026a24:	2b00      	cmp	r3, #0
 8026a26:	db3f      	blt.n	8026aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8026a28:	2201      	movs	r2, #1
 8026a2a:	f1ce 0320 	rsb	r3, lr, #32
 8026a2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8026a30:	2220      	movs	r2, #32
 8026a32:	fb0a f303 	mul.w	r3, sl, r3
 8026a36:	9202      	str	r2, [sp, #8]
 8026a38:	9a01      	ldr	r2, [sp, #4]
 8026a3a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026a3e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026a42:	fb93 f7f2 	sdiv	r7, r3, r2
 8026a46:	fb02 3317 	mls	r3, r2, r7, r3
 8026a4a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026a4e:	2b00      	cmp	r3, #0
 8026a50:	9308      	str	r3, [sp, #32]
 8026a52:	bfbc      	itt	lt
 8026a54:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8026a58:	189b      	addlt	r3, r3, r2
 8026a5a:	eb07 0b01 	add.w	fp, r7, r1
 8026a5e:	bfb8      	it	lt
 8026a60:	9308      	strlt	r3, [sp, #32]
 8026a62:	ea4f 136b 	mov.w	r3, fp, asr #5
 8026a66:	9304      	str	r3, [sp, #16]
 8026a68:	9b02      	ldr	r3, [sp, #8]
 8026a6a:	4573      	cmp	r3, lr
 8026a6c:	d133      	bne.n	8026ad6 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8026a6e:	9b04      	ldr	r3, [sp, #16]
 8026a70:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8026a74:	454b      	cmp	r3, r9
 8026a76:	d045      	beq.n	8026b04 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8026a78:	8b62      	ldrh	r2, [r4, #26]
 8026a7a:	8b23      	ldrh	r3, [r4, #24]
 8026a7c:	4313      	orrs	r3, r2
 8026a7e:	d00c      	beq.n	8026a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026a80:	f1b8 0f00 	cmp.w	r8, #0
 8026a84:	db09      	blt.n	8026a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026a88:	4543      	cmp	r3, r8
 8026a8a:	dd06      	ble.n	8026a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026a8c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8026a90:	429a      	cmp	r2, r3
 8026a92:	d313      	bcc.n	8026abc <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8026a94:	2301      	movs	r3, #1
 8026a96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026a9a:	9b04      	ldr	r3, [sp, #16]
 8026a9c:	82e6      	strh	r6, [r4, #22]
 8026a9e:	82a3      	strh	r3, [r4, #20]
 8026aa0:	2300      	movs	r3, #0
 8026aa2:	8323      	strh	r3, [r4, #24]
 8026aa4:	8363      	strh	r3, [r4, #26]
 8026aa6:	e02d      	b.n	8026b04 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8026aa8:	9a01      	ldr	r2, [sp, #4]
 8026aaa:	fb0a f30e 	mul.w	r3, sl, lr
 8026aae:	4252      	negs	r2, r2
 8026ab0:	9201      	str	r2, [sp, #4]
 8026ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8026ab6:	920b      	str	r2, [sp, #44]	; 0x2c
 8026ab8:	2200      	movs	r2, #0
 8026aba:	e7bc      	b.n	8026a36 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8026abc:	f104 0314 	add.w	r3, r4, #20
 8026ac0:	6922      	ldr	r2, [r4, #16]
 8026ac2:	cb03      	ldmia	r3!, {r0, r1}
 8026ac4:	6010      	str	r0, [r2, #0]
 8026ac6:	6051      	str	r1, [r2, #4]
 8026ac8:	6923      	ldr	r3, [r4, #16]
 8026aca:	3308      	adds	r3, #8
 8026acc:	6123      	str	r3, [r4, #16]
 8026ace:	68a3      	ldr	r3, [r4, #8]
 8026ad0:	3301      	adds	r3, #1
 8026ad2:	60a3      	str	r3, [r4, #8]
 8026ad4:	e7e1      	b.n	8026a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8026ad6:	f00b 031f 	and.w	r3, fp, #31
 8026ada:	f001 011f 	and.w	r1, r1, #31
 8026ade:	8b20      	ldrh	r0, [r4, #24]
 8026ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8026ae2:	9b02      	ldr	r3, [sp, #8]
 8026ae4:	eba3 020e 	sub.w	r2, r3, lr
 8026ae8:	8b63      	ldrh	r3, [r4, #26]
 8026aea:	9300      	str	r3, [sp, #0]
 8026aec:	9b04      	ldr	r3, [sp, #16]
 8026aee:	42ab      	cmp	r3, r5
 8026af0:	f040 80ef 	bne.w	8026cd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8026af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026af6:	4410      	add	r0, r2
 8026af8:	4419      	add	r1, r3
 8026afa:	9b00      	ldr	r3, [sp, #0]
 8026afc:	8320      	strh	r0, [r4, #24]
 8026afe:	fb02 3101 	mla	r1, r2, r1, r3
 8026b02:	8361      	strh	r1, [r4, #26]
 8026b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026b06:	9904      	ldr	r1, [sp, #16]
 8026b08:	4433      	add	r3, r6
 8026b0a:	9300      	str	r3, [sp, #0]
 8026b0c:	9a00      	ldr	r2, [sp, #0]
 8026b0e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026b12:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8026b16:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026b1a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026b1e:	4288      	cmp	r0, r1
 8026b20:	d018      	beq.n	8026b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8026b22:	8b60      	ldrh	r0, [r4, #26]
 8026b24:	8b21      	ldrh	r1, [r4, #24]
 8026b26:	ea50 0201 	orrs.w	r2, r0, r1
 8026b2a:	d00c      	beq.n	8026b46 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026b2c:	2b00      	cmp	r3, #0
 8026b2e:	db0a      	blt.n	8026b46 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026b30:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026b32:	4299      	cmp	r1, r3
 8026b34:	dd07      	ble.n	8026b46 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026b36:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026b3a:	4299      	cmp	r1, r3
 8026b3c:	f0c0 818b 	bcc.w	8026e56 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8026b40:	2301      	movs	r3, #1
 8026b42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026b46:	9b04      	ldr	r3, [sp, #16]
 8026b48:	82a3      	strh	r3, [r4, #20]
 8026b4a:	9b00      	ldr	r3, [sp, #0]
 8026b4c:	82e3      	strh	r3, [r4, #22]
 8026b4e:	2300      	movs	r3, #0
 8026b50:	8323      	strh	r3, [r4, #24]
 8026b52:	8363      	strh	r3, [r4, #26]
 8026b54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026b56:	9a00      	ldr	r2, [sp, #0]
 8026b58:	4293      	cmp	r3, r2
 8026b5a:	f000 808d 	beq.w	8026c78 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8026b5e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8026b62:	9901      	ldr	r1, [sp, #4]
 8026b64:	9801      	ldr	r0, [sp, #4]
 8026b66:	fb93 f1f1 	sdiv	r1, r3, r1
 8026b6a:	fb00 3311 	mls	r3, r0, r1, r3
 8026b6e:	9106      	str	r1, [sp, #24]
 8026b70:	2b00      	cmp	r3, #0
 8026b72:	9307      	str	r3, [sp, #28]
 8026b74:	da04      	bge.n	8026b80 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8026b76:	1e4b      	subs	r3, r1, #1
 8026b78:	9306      	str	r3, [sp, #24]
 8026b7a:	9b07      	ldr	r3, [sp, #28]
 8026b7c:	4403      	add	r3, r0
 8026b7e:	9307      	str	r3, [sp, #28]
 8026b80:	9b08      	ldr	r3, [sp, #32]
 8026b82:	f04f 0c00 	mov.w	ip, #0
 8026b86:	9901      	ldr	r1, [sp, #4]
 8026b88:	1a5b      	subs	r3, r3, r1
 8026b8a:	4659      	mov	r1, fp
 8026b8c:	9308      	str	r3, [sp, #32]
 8026b8e:	9b02      	ldr	r3, [sp, #8]
 8026b90:	f1c3 0320 	rsb	r3, r3, #32
 8026b94:	930a      	str	r3, [sp, #40]	; 0x28
 8026b96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026b98:	9b02      	ldr	r3, [sp, #8]
 8026b9a:	1a1b      	subs	r3, r3, r0
 8026b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8026b9e:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8026ba2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8026ba6:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8026baa:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8026bae:	181b      	adds	r3, r3, r0
 8026bb0:	bf58      	it	pl
 8026bb2:	9801      	ldrpl	r0, [sp, #4]
 8026bb4:	9308      	str	r3, [sp, #32]
 8026bb6:	bf54      	ite	pl
 8026bb8:	1a1b      	subpl	r3, r3, r0
 8026bba:	9d06      	ldrmi	r5, [sp, #24]
 8026bbc:	9802      	ldr	r0, [sp, #8]
 8026bbe:	bf5e      	ittt	pl
 8026bc0:	9308      	strpl	r3, [sp, #32]
 8026bc2:	9b06      	ldrpl	r3, [sp, #24]
 8026bc4:	1c5d      	addpl	r5, r3, #1
 8026bc6:	44ab      	add	fp, r5
 8026bc8:	ea4f 136b 	mov.w	r3, fp, asr #5
 8026bcc:	9304      	str	r3, [sp, #16]
 8026bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026bd0:	4283      	cmp	r3, r0
 8026bd2:	f040 815a 	bne.w	8026e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8026bd6:	9b04      	ldr	r3, [sp, #16]
 8026bd8:	9a00      	ldr	r2, [sp, #0]
 8026bda:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8026bde:	4543      	cmp	r3, r8
 8026be0:	d01a      	beq.n	8026c18 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8026be2:	8b61      	ldrh	r1, [r4, #26]
 8026be4:	8b23      	ldrh	r3, [r4, #24]
 8026be6:	430b      	orrs	r3, r1
 8026be8:	d00e      	beq.n	8026c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026bea:	f1be 0f00 	cmp.w	lr, #0
 8026bee:	db0b      	blt.n	8026c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026bf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026bf2:	4573      	cmp	r3, lr
 8026bf4:	dd08      	ble.n	8026c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026bf6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026bfa:	4299      	cmp	r1, r3
 8026bfc:	f0c0 8138 	bcc.w	8026e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8026c00:	f04f 0301 	mov.w	r3, #1
 8026c04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026c08:	9b04      	ldr	r3, [sp, #16]
 8026c0a:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026c0e:	82a3      	strh	r3, [r4, #20]
 8026c10:	9b00      	ldr	r3, [sp, #0]
 8026c12:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026c16:	82e3      	strh	r3, [r4, #22]
 8026c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026c1a:	9a00      	ldr	r2, [sp, #0]
 8026c1c:	441a      	add	r2, r3
 8026c1e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026c22:	9200      	str	r2, [sp, #0]
 8026c24:	9900      	ldr	r1, [sp, #0]
 8026c26:	9a04      	ldr	r2, [sp, #16]
 8026c28:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8026c2c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026c30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026c34:	4288      	cmp	r0, r1
 8026c36:	d01a      	beq.n	8026c6e <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8026c38:	8b60      	ldrh	r0, [r4, #26]
 8026c3a:	8b21      	ldrh	r1, [r4, #24]
 8026c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8026c40:	d00d      	beq.n	8026c5e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026c42:	2b00      	cmp	r3, #0
 8026c44:	db0b      	blt.n	8026c5e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026c46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026c48:	4299      	cmp	r1, r3
 8026c4a:	dd08      	ble.n	8026c5e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026c4c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026c50:	4299      	cmp	r1, r3
 8026c52:	f0c0 81f9 	bcc.w	8027048 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8026c56:	f04f 0301 	mov.w	r3, #1
 8026c5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026c5e:	9b04      	ldr	r3, [sp, #16]
 8026c60:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026c64:	82a3      	strh	r3, [r4, #20]
 8026c66:	9b00      	ldr	r3, [sp, #0]
 8026c68:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026c6c:	82e3      	strh	r3, [r4, #22]
 8026c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026c70:	4659      	mov	r1, fp
 8026c72:	9a00      	ldr	r2, [sp, #0]
 8026c74:	4293      	cmp	r3, r2
 8026c76:	d192      	bne.n	8026b9e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8026c78:	9b02      	ldr	r3, [sp, #8]
 8026c7a:	f1c3 0c20 	rsb	ip, r3, #32
 8026c7e:	9b05      	ldr	r3, [sp, #20]
 8026c80:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8026c84:	9b03      	ldr	r3, [sp, #12]
 8026c86:	459c      	cmp	ip, r3
 8026c88:	f040 81f8 	bne.w	802707c <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8026c8c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026c90:	9a00      	ldr	r2, [sp, #0]
 8026c92:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026c96:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8026c9a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026c9e:	4288      	cmp	r0, r1
 8026ca0:	f43f ad54 	beq.w	802674c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026ca4:	8b60      	ldrh	r0, [r4, #26]
 8026ca6:	8b21      	ldrh	r1, [r4, #24]
 8026ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8026cac:	d00c      	beq.n	8026cc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8026cae:	2b00      	cmp	r3, #0
 8026cb0:	db0a      	blt.n	8026cc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8026cb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026cb4:	4299      	cmp	r1, r3
 8026cb6:	dd07      	ble.n	8026cc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8026cb8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026cbc:	4299      	cmp	r1, r3
 8026cbe:	f0c0 81d0 	bcc.w	8027062 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8026cc2:	2301      	movs	r3, #1
 8026cc4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026cc8:	9b00      	ldr	r3, [sp, #0]
 8026cca:	f8a4 e014 	strh.w	lr, [r4, #20]
 8026cce:	82e3      	strh	r3, [r4, #22]
 8026cd0:	e517      	b.n	8026702 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8026cd2:	2f00      	cmp	r7, #0
 8026cd4:	f2c0 8097 	blt.w	8026e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8026cd8:	2301      	movs	r3, #1
 8026cda:	f1c1 0c20 	rsb	ip, r1, #32
 8026cde:	9307      	str	r3, [sp, #28]
 8026ce0:	2320      	movs	r3, #32
 8026ce2:	fb02 f20c 	mul.w	r2, r2, ip
 8026ce6:	9306      	str	r3, [sp, #24]
 8026ce8:	9b06      	ldr	r3, [sp, #24]
 8026cea:	fb92 fcf7 	sdiv	ip, r2, r7
 8026cee:	fb07 221c 	mls	r2, r7, ip, r2
 8026cf2:	4419      	add	r1, r3
 8026cf4:	9b00      	ldr	r3, [sp, #0]
 8026cf6:	2a00      	cmp	r2, #0
 8026cf8:	bfbc      	itt	lt
 8026cfa:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8026cfe:	19d2      	addlt	r2, r2, r7
 8026d00:	fb0c 3101 	mla	r1, ip, r1, r3
 8026d04:	9b07      	ldr	r3, [sp, #28]
 8026d06:	4460      	add	r0, ip
 8026d08:	441d      	add	r5, r3
 8026d0a:	0433      	lsls	r3, r6, #16
 8026d0c:	b200      	sxth	r0, r0
 8026d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8026d10:	18eb      	adds	r3, r5, r3
 8026d12:	b209      	sxth	r1, r1
 8026d14:	8320      	strh	r0, [r4, #24]
 8026d16:	454b      	cmp	r3, r9
 8026d18:	8361      	strh	r1, [r4, #26]
 8026d1a:	d014      	beq.n	8026d46 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8026d1c:	ea50 0301 	orrs.w	r3, r0, r1
 8026d20:	d00c      	beq.n	8026d3c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026d22:	f1b8 0f00 	cmp.w	r8, #0
 8026d26:	db09      	blt.n	8026d3c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026d2a:	4543      	cmp	r3, r8
 8026d2c:	dd06      	ble.n	8026d3c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026d2e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026d32:	4299      	cmp	r1, r3
 8026d34:	d36e      	bcc.n	8026e14 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8026d36:	2301      	movs	r3, #1
 8026d38:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026d3c:	2300      	movs	r3, #0
 8026d3e:	82a5      	strh	r5, [r4, #20]
 8026d40:	82e6      	strh	r6, [r4, #22]
 8026d42:	8323      	strh	r3, [r4, #24]
 8026d44:	8363      	strh	r3, [r4, #26]
 8026d46:	9904      	ldr	r1, [sp, #16]
 8026d48:	eb0e 030c 	add.w	r3, lr, ip
 8026d4c:	42a9      	cmp	r1, r5
 8026d4e:	d04d      	beq.n	8026dec <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8026d50:	9902      	ldr	r1, [sp, #8]
 8026d52:	1bd2      	subs	r2, r2, r7
 8026d54:	1ac9      	subs	r1, r1, r3
 8026d56:	9200      	str	r2, [sp, #0]
 8026d58:	448c      	add	ip, r1
 8026d5a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8026d5e:	fb9c fef7 	sdiv	lr, ip, r7
 8026d62:	fb07 cc1e 	mls	ip, r7, lr, ip
 8026d66:	f1bc 0f00 	cmp.w	ip, #0
 8026d6a:	bfbc      	itt	lt
 8026d6c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8026d70:	44bc      	addlt	ip, r7
 8026d72:	f10e 0101 	add.w	r1, lr, #1
 8026d76:	910d      	str	r1, [sp, #52]	; 0x34
 8026d78:	9a00      	ldr	r2, [sp, #0]
 8026d7a:	8b20      	ldrh	r0, [r4, #24]
 8026d7c:	eb12 020c 	adds.w	r2, r2, ip
 8026d80:	8b61      	ldrh	r1, [r4, #26]
 8026d82:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026d86:	9200      	str	r2, [sp, #0]
 8026d88:	bf5b      	ittet	pl
 8026d8a:	1bd2      	subpl	r2, r2, r7
 8026d8c:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8026d90:	46f0      	movmi	r8, lr
 8026d92:	9200      	strpl	r2, [sp, #0]
 8026d94:	9a07      	ldr	r2, [sp, #28]
 8026d96:	4440      	add	r0, r8
 8026d98:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8026d9c:	4443      	add	r3, r8
 8026d9e:	4415      	add	r5, r2
 8026da0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026da6:	b200      	sxth	r0, r0
 8026da8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026dac:	442a      	add	r2, r5
 8026dae:	b209      	sxth	r1, r1
 8026db0:	8320      	strh	r0, [r4, #24]
 8026db2:	454a      	cmp	r2, r9
 8026db4:	8361      	strh	r1, [r4, #26]
 8026db6:	d016      	beq.n	8026de6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8026db8:	ea50 0201 	orrs.w	r2, r0, r1
 8026dbc:	d00d      	beq.n	8026dda <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026dbe:	f1b8 0f00 	cmp.w	r8, #0
 8026dc2:	db0a      	blt.n	8026dda <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026dc4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026dc6:	4541      	cmp	r1, r8
 8026dc8:	dd07      	ble.n	8026dda <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026dca:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026dce:	4288      	cmp	r0, r1
 8026dd0:	d330      	bcc.n	8026e34 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8026dd2:	f04f 0201 	mov.w	r2, #1
 8026dd6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026dda:	f04f 0200 	mov.w	r2, #0
 8026dde:	82a5      	strh	r5, [r4, #20]
 8026de0:	82e6      	strh	r6, [r4, #22]
 8026de2:	8322      	strh	r2, [r4, #24]
 8026de4:	8362      	strh	r2, [r4, #26]
 8026de6:	9904      	ldr	r1, [sp, #16]
 8026de8:	42a9      	cmp	r1, r5
 8026dea:	d1c5      	bne.n	8026d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8026dec:	9a02      	ldr	r2, [sp, #8]
 8026dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026df0:	1ad3      	subs	r3, r2, r3
 8026df2:	8b22      	ldrh	r2, [r4, #24]
 8026df4:	3120      	adds	r1, #32
 8026df6:	441a      	add	r2, r3
 8026df8:	8322      	strh	r2, [r4, #24]
 8026dfa:	9a06      	ldr	r2, [sp, #24]
 8026dfc:	1a89      	subs	r1, r1, r2
 8026dfe:	8b62      	ldrh	r2, [r4, #26]
 8026e00:	fb03 2301 	mla	r3, r3, r1, r2
 8026e04:	e64e      	b.n	8026aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8026e06:	f04f 33ff 	mov.w	r3, #4294967295
 8026e0a:	434a      	muls	r2, r1
 8026e0c:	427f      	negs	r7, r7
 8026e0e:	9307      	str	r3, [sp, #28]
 8026e10:	2300      	movs	r3, #0
 8026e12:	e768      	b.n	8026ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8026e14:	f104 0314 	add.w	r3, r4, #20
 8026e18:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8026e1c:	cb03      	ldmia	r3!, {r0, r1}
 8026e1e:	f8c8 0000 	str.w	r0, [r8]
 8026e22:	f8c8 1004 	str.w	r1, [r8, #4]
 8026e26:	6923      	ldr	r3, [r4, #16]
 8026e28:	3308      	adds	r3, #8
 8026e2a:	6123      	str	r3, [r4, #16]
 8026e2c:	68a3      	ldr	r3, [r4, #8]
 8026e2e:	3301      	adds	r3, #1
 8026e30:	60a3      	str	r3, [r4, #8]
 8026e32:	e783      	b.n	8026d3c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026e34:	f104 0814 	add.w	r8, r4, #20
 8026e38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026e3c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026e40:	f8c9 0000 	str.w	r0, [r9]
 8026e44:	f8c9 1004 	str.w	r1, [r9, #4]
 8026e48:	6921      	ldr	r1, [r4, #16]
 8026e4a:	3108      	adds	r1, #8
 8026e4c:	6121      	str	r1, [r4, #16]
 8026e4e:	68a1      	ldr	r1, [r4, #8]
 8026e50:	3101      	adds	r1, #1
 8026e52:	60a1      	str	r1, [r4, #8]
 8026e54:	e7c1      	b.n	8026dda <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026e56:	f104 0314 	add.w	r3, r4, #20
 8026e5a:	6925      	ldr	r5, [r4, #16]
 8026e5c:	cb03      	ldmia	r3!, {r0, r1}
 8026e5e:	6028      	str	r0, [r5, #0]
 8026e60:	6069      	str	r1, [r5, #4]
 8026e62:	6923      	ldr	r3, [r4, #16]
 8026e64:	3308      	adds	r3, #8
 8026e66:	6123      	str	r3, [r4, #16]
 8026e68:	68a3      	ldr	r3, [r4, #8]
 8026e6a:	3301      	adds	r3, #1
 8026e6c:	60a3      	str	r3, [r4, #8]
 8026e6e:	e66a      	b.n	8026b46 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026e70:	f104 0314 	add.w	r3, r4, #20
 8026e74:	6925      	ldr	r5, [r4, #16]
 8026e76:	cb03      	ldmia	r3!, {r0, r1}
 8026e78:	6028      	str	r0, [r5, #0]
 8026e7a:	6069      	str	r1, [r5, #4]
 8026e7c:	6923      	ldr	r3, [r4, #16]
 8026e7e:	3308      	adds	r3, #8
 8026e80:	6123      	str	r3, [r4, #16]
 8026e82:	68a3      	ldr	r3, [r4, #8]
 8026e84:	3301      	adds	r3, #1
 8026e86:	60a3      	str	r3, [r4, #8]
 8026e88:	e6be      	b.n	8026c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026e8a:	f00b 031f 	and.w	r3, fp, #31
 8026e8e:	114f      	asrs	r7, r1, #5
 8026e90:	8b20      	ldrh	r0, [r4, #24]
 8026e92:	f001 011f 	and.w	r1, r1, #31
 8026e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8026e98:	9b04      	ldr	r3, [sp, #16]
 8026e9a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8026e9e:	429f      	cmp	r7, r3
 8026ea0:	d10a      	bne.n	8026eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8026ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ea4:	4418      	add	r0, r3
 8026ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026ea8:	4419      	add	r1, r3
 8026eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026eac:	8320      	strh	r0, [r4, #24]
 8026eae:	fb03 9901 	mla	r9, r3, r1, r9
 8026eb2:	f8a4 901a 	strh.w	r9, [r4, #26]
 8026eb6:	e6af      	b.n	8026c18 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8026eb8:	2d00      	cmp	r5, #0
 8026eba:	f2c0 809b 	blt.w	8026ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8026ebe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8026ec0:	f1c1 0320 	rsb	r3, r1, #32
 8026ec4:	4373      	muls	r3, r6
 8026ec6:	2601      	movs	r6, #1
 8026ec8:	960e      	str	r6, [sp, #56]	; 0x38
 8026eca:	2620      	movs	r6, #32
 8026ecc:	960d      	str	r6, [sp, #52]	; 0x34
 8026ece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026ed0:	fb93 f6f5 	sdiv	r6, r3, r5
 8026ed4:	4411      	add	r1, r2
 8026ed6:	fb05 3316 	mls	r3, r5, r6, r3
 8026eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026edc:	2b00      	cmp	r3, #0
 8026ede:	4417      	add	r7, r2
 8026ee0:	9a00      	ldr	r2, [sp, #0]
 8026ee2:	bfbc      	itt	lt
 8026ee4:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8026ee8:	195b      	addlt	r3, r3, r5
 8026eea:	0412      	lsls	r2, r2, #16
 8026eec:	fb06 9101 	mla	r1, r6, r1, r9
 8026ef0:	4430      	add	r0, r6
 8026ef2:	eb07 0902 	add.w	r9, r7, r2
 8026ef6:	9210      	str	r2, [sp, #64]	; 0x40
 8026ef8:	b200      	sxth	r0, r0
 8026efa:	b209      	sxth	r1, r1
 8026efc:	45c1      	cmp	r9, r8
 8026efe:	8320      	strh	r0, [r4, #24]
 8026f00:	8361      	strh	r1, [r4, #26]
 8026f02:	d017      	beq.n	8026f34 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8026f04:	ea50 0201 	orrs.w	r2, r0, r1
 8026f08:	d00d      	beq.n	8026f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026f0a:	f1be 0f00 	cmp.w	lr, #0
 8026f0e:	db0a      	blt.n	8026f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026f10:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026f12:	4571      	cmp	r1, lr
 8026f14:	dd07      	ble.n	8026f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026f16:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026f1a:	4288      	cmp	r0, r1
 8026f1c:	d372      	bcc.n	8027004 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8026f1e:	f04f 0201 	mov.w	r2, #1
 8026f22:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026f26:	9a00      	ldr	r2, [sp, #0]
 8026f28:	82a7      	strh	r7, [r4, #20]
 8026f2a:	82e2      	strh	r2, [r4, #22]
 8026f2c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026f30:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026f36:	eb02 0e06 	add.w	lr, r2, r6
 8026f3a:	9a04      	ldr	r2, [sp, #16]
 8026f3c:	42ba      	cmp	r2, r7
 8026f3e:	d049      	beq.n	8026fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8026f40:	9a02      	ldr	r2, [sp, #8]
 8026f42:	1b5b      	subs	r3, r3, r5
 8026f44:	eba2 010e 	sub.w	r1, r2, lr
 8026f48:	440e      	add	r6, r1
 8026f4a:	0176      	lsls	r6, r6, #5
 8026f4c:	fb96 f8f5 	sdiv	r8, r6, r5
 8026f50:	fb05 6618 	mls	r6, r5, r8, r6
 8026f54:	2e00      	cmp	r6, #0
 8026f56:	bfbc      	itt	lt
 8026f58:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8026f5c:	1976      	addlt	r6, r6, r5
 8026f5e:	f108 0201 	add.w	r2, r8, #1
 8026f62:	9211      	str	r2, [sp, #68]	; 0x44
 8026f64:	199b      	adds	r3, r3, r6
 8026f66:	8b20      	ldrh	r0, [r4, #24]
 8026f68:	8b61      	ldrh	r1, [r4, #26]
 8026f6a:	bf54      	ite	pl
 8026f6c:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8026f70:	46c1      	movmi	r9, r8
 8026f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026f74:	bf58      	it	pl
 8026f76:	1b5b      	subpl	r3, r3, r5
 8026f78:	4448      	add	r0, r9
 8026f7a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8026f7e:	4417      	add	r7, r2
 8026f80:	44ce      	add	lr, r9
 8026f82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026f84:	b200      	sxth	r0, r0
 8026f86:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8026f8a:	b209      	sxth	r1, r1
 8026f8c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8026f90:	443a      	add	r2, r7
 8026f92:	8320      	strh	r0, [r4, #24]
 8026f94:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8026f98:	8361      	strh	r1, [r4, #26]
 8026f9a:	4552      	cmp	r2, sl
 8026f9c:	d017      	beq.n	8026fce <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8026f9e:	ea50 0201 	orrs.w	r2, r0, r1
 8026fa2:	d00d      	beq.n	8026fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8026fa4:	f1b9 0f00 	cmp.w	r9, #0
 8026fa8:	db0a      	blt.n	8026fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8026faa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026fac:	4549      	cmp	r1, r9
 8026fae:	dd07      	ble.n	8026fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8026fb0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026fb4:	4288      	cmp	r0, r1
 8026fb6:	d336      	bcc.n	8027026 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8026fb8:	f04f 0201 	mov.w	r2, #1
 8026fbc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026fc0:	9a00      	ldr	r2, [sp, #0]
 8026fc2:	82a7      	strh	r7, [r4, #20]
 8026fc4:	82e2      	strh	r2, [r4, #22]
 8026fc6:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026fca:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026fce:	9a04      	ldr	r2, [sp, #16]
 8026fd0:	42ba      	cmp	r2, r7
 8026fd2:	d1c7      	bne.n	8026f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8026fd4:	9b02      	ldr	r3, [sp, #8]
 8026fd6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026fd8:	eba3 0e0e 	sub.w	lr, r3, lr
 8026fdc:	8b23      	ldrh	r3, [r4, #24]
 8026fde:	3120      	adds	r1, #32
 8026fe0:	4473      	add	r3, lr
 8026fe2:	8323      	strh	r3, [r4, #24]
 8026fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026fe6:	1ac9      	subs	r1, r1, r3
 8026fe8:	8b63      	ldrh	r3, [r4, #26]
 8026fea:	fb0e 3e01 	mla	lr, lr, r1, r3
 8026fee:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8026ff2:	e611      	b.n	8026c18 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8026ff4:	f04f 36ff 	mov.w	r6, #4294967295
 8026ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ffa:	426d      	negs	r5, r5
 8026ffc:	960e      	str	r6, [sp, #56]	; 0x38
 8026ffe:	2600      	movs	r6, #0
 8027000:	434b      	muls	r3, r1
 8027002:	e763      	b.n	8026ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8027004:	f104 0e14 	add.w	lr, r4, #20
 8027008:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802700c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8027010:	f8c8 0000 	str.w	r0, [r8]
 8027014:	f8c8 1004 	str.w	r1, [r8, #4]
 8027018:	6921      	ldr	r1, [r4, #16]
 802701a:	3108      	adds	r1, #8
 802701c:	6121      	str	r1, [r4, #16]
 802701e:	68a1      	ldr	r1, [r4, #8]
 8027020:	3101      	adds	r1, #1
 8027022:	60a1      	str	r1, [r4, #8]
 8027024:	e77f      	b.n	8026f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027026:	f104 0914 	add.w	r9, r4, #20
 802702a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802702e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027032:	f8ca 0000 	str.w	r0, [sl]
 8027036:	f8ca 1004 	str.w	r1, [sl, #4]
 802703a:	6921      	ldr	r1, [r4, #16]
 802703c:	3108      	adds	r1, #8
 802703e:	6121      	str	r1, [r4, #16]
 8027040:	68a1      	ldr	r1, [r4, #8]
 8027042:	3101      	adds	r1, #1
 8027044:	60a1      	str	r1, [r4, #8]
 8027046:	e7bb      	b.n	8026fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027048:	f104 0314 	add.w	r3, r4, #20
 802704c:	6925      	ldr	r5, [r4, #16]
 802704e:	cb03      	ldmia	r3!, {r0, r1}
 8027050:	6028      	str	r0, [r5, #0]
 8027052:	6069      	str	r1, [r5, #4]
 8027054:	6923      	ldr	r3, [r4, #16]
 8027056:	3308      	adds	r3, #8
 8027058:	6123      	str	r3, [r4, #16]
 802705a:	68a3      	ldr	r3, [r4, #8]
 802705c:	3301      	adds	r3, #1
 802705e:	60a3      	str	r3, [r4, #8]
 8027060:	e5fd      	b.n	8026c5e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027062:	f104 0314 	add.w	r3, r4, #20
 8027066:	6925      	ldr	r5, [r4, #16]
 8027068:	cb03      	ldmia	r3!, {r0, r1}
 802706a:	6028      	str	r0, [r5, #0]
 802706c:	6069      	str	r1, [r5, #4]
 802706e:	6923      	ldr	r3, [r4, #16]
 8027070:	3308      	adds	r3, #8
 8027072:	6123      	str	r3, [r4, #16]
 8027074:	68a3      	ldr	r3, [r4, #8]
 8027076:	3301      	adds	r3, #1
 8027078:	60a3      	str	r3, [r4, #8]
 802707a:	e625      	b.n	8026cc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802707c:	9b05      	ldr	r3, [sp, #20]
 802707e:	ea4f 176b 	mov.w	r7, fp, asr #5
 8027082:	f00b 081f 	and.w	r8, fp, #31
 8027086:	8b20      	ldrh	r0, [r4, #24]
 8027088:	f003 031f 	and.w	r3, r3, #31
 802708c:	4577      	cmp	r7, lr
 802708e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027092:	9302      	str	r3, [sp, #8]
 8027094:	9b03      	ldr	r3, [sp, #12]
 8027096:	eba3 050c 	sub.w	r5, r3, ip
 802709a:	d108      	bne.n	80270ae <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 802709c:	9b02      	ldr	r3, [sp, #8]
 802709e:	4428      	add	r0, r5
 80270a0:	4498      	add	r8, r3
 80270a2:	8320      	strh	r0, [r4, #24]
 80270a4:	fb05 9508 	mla	r5, r5, r8, r9
 80270a8:	8365      	strh	r5, [r4, #26]
 80270aa:	f7ff bb4f 	b.w	802674c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80270ae:	9b05      	ldr	r3, [sp, #20]
 80270b0:	ebb3 030b 	subs.w	r3, r3, fp
 80270b4:	f100 809c 	bmi.w	80271f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80270b8:	f1c8 0120 	rsb	r1, r8, #32
 80270bc:	2201      	movs	r2, #1
 80270be:	f04f 0b20 	mov.w	fp, #32
 80270c2:	434d      	muls	r5, r1
 80270c4:	9201      	str	r2, [sp, #4]
 80270c6:	9a01      	ldr	r2, [sp, #4]
 80270c8:	44d8      	add	r8, fp
 80270ca:	fb95 f6f3 	sdiv	r6, r5, r3
 80270ce:	fb03 5516 	mls	r5, r3, r6, r5
 80270d2:	4417      	add	r7, r2
 80270d4:	9a00      	ldr	r2, [sp, #0]
 80270d6:	2d00      	cmp	r5, #0
 80270d8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80270dc:	bfbc      	itt	lt
 80270de:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80270e2:	18ed      	addlt	r5, r5, r3
 80270e4:	eb07 0a02 	add.w	sl, r7, r2
 80270e8:	9204      	str	r2, [sp, #16]
 80270ea:	fb06 9808 	mla	r8, r6, r8, r9
 80270ee:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80270f2:	4430      	add	r0, r6
 80270f4:	fa0f f188 	sxth.w	r1, r8
 80270f8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80270fc:	b200      	sxth	r0, r0
 80270fe:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027102:	8361      	strh	r1, [r4, #26]
 8027104:	8320      	strh	r0, [r4, #24]
 8027106:	45ca      	cmp	sl, r9
 8027108:	d015      	beq.n	8027136 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802710a:	ea50 0201 	orrs.w	r2, r0, r1
 802710e:	d00c      	beq.n	802712a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027110:	f1b8 0f00 	cmp.w	r8, #0
 8027114:	db09      	blt.n	802712a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027116:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027118:	4541      	cmp	r1, r8
 802711a:	dd06      	ble.n	802712a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802711c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027120:	4288      	cmp	r0, r1
 8027122:	d36e      	bcc.n	8027202 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8027124:	2101      	movs	r1, #1
 8027126:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802712a:	2100      	movs	r1, #0
 802712c:	9a00      	ldr	r2, [sp, #0]
 802712e:	82a7      	strh	r7, [r4, #20]
 8027130:	82e2      	strh	r2, [r4, #22]
 8027132:	8321      	strh	r1, [r4, #24]
 8027134:	8361      	strh	r1, [r4, #26]
 8027136:	45be      	cmp	lr, r7
 8027138:	44b4      	add	ip, r6
 802713a:	d048      	beq.n	80271ce <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802713c:	9a03      	ldr	r2, [sp, #12]
 802713e:	1aed      	subs	r5, r5, r3
 8027140:	eba2 010c 	sub.w	r1, r2, ip
 8027144:	440e      	add	r6, r1
 8027146:	0176      	lsls	r6, r6, #5
 8027148:	fb96 f8f3 	sdiv	r8, r6, r3
 802714c:	fb03 6618 	mls	r6, r3, r8, r6
 8027150:	2e00      	cmp	r6, #0
 8027152:	bfbc      	itt	lt
 8027154:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8027158:	18f6      	addlt	r6, r6, r3
 802715a:	f108 0201 	add.w	r2, r8, #1
 802715e:	9205      	str	r2, [sp, #20]
 8027160:	19ad      	adds	r5, r5, r6
 8027162:	8b20      	ldrh	r0, [r4, #24]
 8027164:	8b61      	ldrh	r1, [r4, #26]
 8027166:	bf54      	ite	pl
 8027168:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802716c:	46c1      	movmi	r9, r8
 802716e:	9a01      	ldr	r2, [sp, #4]
 8027170:	bf58      	it	pl
 8027172:	1aed      	subpl	r5, r5, r3
 8027174:	4448      	add	r0, r9
 8027176:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802717a:	4417      	add	r7, r2
 802717c:	44cc      	add	ip, r9
 802717e:	9a04      	ldr	r2, [sp, #16]
 8027180:	b200      	sxth	r0, r0
 8027182:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027186:	b209      	sxth	r1, r1
 8027188:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802718c:	443a      	add	r2, r7
 802718e:	8320      	strh	r0, [r4, #24]
 8027190:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027194:	8361      	strh	r1, [r4, #26]
 8027196:	4552      	cmp	r2, sl
 8027198:	d017      	beq.n	80271ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802719a:	ea50 0201 	orrs.w	r2, r0, r1
 802719e:	d00d      	beq.n	80271bc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80271a0:	f1b9 0f00 	cmp.w	r9, #0
 80271a4:	db0a      	blt.n	80271bc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80271a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80271a8:	4549      	cmp	r1, r9
 80271aa:	dd07      	ble.n	80271bc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80271ac:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80271b0:	4288      	cmp	r0, r1
 80271b2:	d337      	bcc.n	8027224 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80271b4:	f04f 0201 	mov.w	r2, #1
 80271b8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80271bc:	9a00      	ldr	r2, [sp, #0]
 80271be:	82a7      	strh	r7, [r4, #20]
 80271c0:	82e2      	strh	r2, [r4, #22]
 80271c2:	f04f 0200 	mov.w	r2, #0
 80271c6:	8322      	strh	r2, [r4, #24]
 80271c8:	8362      	strh	r2, [r4, #26]
 80271ca:	45be      	cmp	lr, r7
 80271cc:	d1c8      	bne.n	8027160 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80271ce:	9b03      	ldr	r3, [sp, #12]
 80271d0:	8b62      	ldrh	r2, [r4, #26]
 80271d2:	eba3 0c0c 	sub.w	ip, r3, ip
 80271d6:	8b23      	ldrh	r3, [r4, #24]
 80271d8:	4463      	add	r3, ip
 80271da:	8323      	strh	r3, [r4, #24]
 80271dc:	9b02      	ldr	r3, [sp, #8]
 80271de:	3320      	adds	r3, #32
 80271e0:	eba3 030b 	sub.w	r3, r3, fp
 80271e4:	fb0c 2c03 	mla	ip, ip, r3, r2
 80271e8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80271ec:	f7ff baae 	b.w	802674c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80271f0:	f04f 32ff 	mov.w	r2, #4294967295
 80271f4:	fb05 f508 	mul.w	r5, r5, r8
 80271f8:	425b      	negs	r3, r3
 80271fa:	f04f 0b00 	mov.w	fp, #0
 80271fe:	9201      	str	r2, [sp, #4]
 8027200:	e761      	b.n	80270c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8027202:	f104 0814 	add.w	r8, r4, #20
 8027206:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802720a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802720e:	f8c9 0000 	str.w	r0, [r9]
 8027212:	f8c9 1004 	str.w	r1, [r9, #4]
 8027216:	6921      	ldr	r1, [r4, #16]
 8027218:	3108      	adds	r1, #8
 802721a:	6121      	str	r1, [r4, #16]
 802721c:	68a1      	ldr	r1, [r4, #8]
 802721e:	3101      	adds	r1, #1
 8027220:	60a1      	str	r1, [r4, #8]
 8027222:	e782      	b.n	802712a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027224:	f104 0914 	add.w	r9, r4, #20
 8027228:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802722c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027230:	f8ca 0000 	str.w	r0, [sl]
 8027234:	f8ca 1004 	str.w	r1, [sl, #4]
 8027238:	6921      	ldr	r1, [r4, #16]
 802723a:	3108      	adds	r1, #8
 802723c:	6121      	str	r1, [r4, #16]
 802723e:	68a1      	ldr	r1, [r4, #8]
 8027240:	3101      	adds	r1, #1
 8027242:	60a1      	str	r1, [r4, #8]
 8027244:	e7ba      	b.n	80271bc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08027246 <_ZN8touchgfx7Outline6lineToEii>:
 8027246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027248:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802724a:	4604      	mov	r4, r0
 802724c:	460d      	mov	r5, r1
 802724e:	4616      	mov	r6, r2
 8027250:	079b      	lsls	r3, r3, #30
 8027252:	d526      	bpl.n	80272a2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027254:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8027258:	ea85 0001 	eor.w	r0, r5, r1
 802725c:	ea86 0302 	eor.w	r3, r6, r2
 8027260:	4303      	orrs	r3, r0
 8027262:	d01e      	beq.n	80272a2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027264:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027266:	114b      	asrs	r3, r1, #5
 8027268:	9600      	str	r6, [sp, #0]
 802726a:	4283      	cmp	r3, r0
 802726c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802726e:	bfb8      	it	lt
 8027270:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027272:	3301      	adds	r3, #1
 8027274:	4283      	cmp	r3, r0
 8027276:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027278:	bfc8      	it	gt
 802727a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802727c:	116b      	asrs	r3, r5, #5
 802727e:	4283      	cmp	r3, r0
 8027280:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8027282:	bfb8      	it	lt
 8027284:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027286:	3301      	adds	r3, #1
 8027288:	4283      	cmp	r3, r0
 802728a:	4620      	mov	r0, r4
 802728c:	bfc8      	it	gt
 802728e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027290:	462b      	mov	r3, r5
 8027292:	f7ff f9e3 	bl	802665c <_ZN8touchgfx7Outline10renderLineEiiii>
 8027296:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027298:	f043 0301 	orr.w	r3, r3, #1
 802729c:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80272a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80272a2:	b002      	add	sp, #8
 80272a4:	bd70      	pop	{r4, r5, r6, pc}

080272a6 <_ZN8touchgfx7Outline6moveToEii>:
 80272a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80272aa:	4615      	mov	r5, r2
 80272ac:	4604      	mov	r4, r0
 80272ae:	460e      	mov	r6, r1
 80272b0:	079a      	lsls	r2, r3, #30
 80272b2:	d401      	bmi.n	80272b8 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80272b4:	f7ff f98c 	bl	80265d0 <_ZN8touchgfx7Outline5resetEv>
 80272b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80272ba:	07db      	lsls	r3, r3, #31
 80272bc:	d504      	bpl.n	80272c8 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80272be:	4620      	mov	r0, r4
 80272c0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80272c4:	f7ff ffbf 	bl	8027246 <_ZN8touchgfx7Outline6lineToEii>
 80272c8:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80272cc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80272d0:	116f      	asrs	r7, r5, #5
 80272d2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80272d6:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80272da:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80272de:	4291      	cmp	r1, r2
 80272e0:	d015      	beq.n	802730e <_ZN8touchgfx7Outline6moveToEii+0x68>
 80272e2:	8b61      	ldrh	r1, [r4, #26]
 80272e4:	8b22      	ldrh	r2, [r4, #24]
 80272e6:	430a      	orrs	r2, r1
 80272e8:	d00b      	beq.n	8027302 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80272ea:	2b00      	cmp	r3, #0
 80272ec:	db09      	blt.n	8027302 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80272ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80272f0:	429a      	cmp	r2, r3
 80272f2:	dd06      	ble.n	8027302 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80272f4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80272f8:	429a      	cmp	r2, r3
 80272fa:	d30d      	bcc.n	8027318 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80272fc:	2301      	movs	r3, #1
 80272fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027302:	2300      	movs	r3, #0
 8027304:	f8a4 c014 	strh.w	ip, [r4, #20]
 8027308:	82e7      	strh	r7, [r4, #22]
 802730a:	8323      	strh	r3, [r4, #24]
 802730c:	8363      	strh	r3, [r4, #26]
 802730e:	61e6      	str	r6, [r4, #28]
 8027310:	62a5      	str	r5, [r4, #40]	; 0x28
 8027312:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8027316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027318:	f104 0314 	add.w	r3, r4, #20
 802731c:	6922      	ldr	r2, [r4, #16]
 802731e:	cb03      	ldmia	r3!, {r0, r1}
 8027320:	6010      	str	r0, [r2, #0]
 8027322:	6051      	str	r1, [r2, #4]
 8027324:	6923      	ldr	r3, [r4, #16]
 8027326:	3308      	adds	r3, #8
 8027328:	6123      	str	r3, [r4, #16]
 802732a:	68a3      	ldr	r3, [r4, #8]
 802732c:	3301      	adds	r3, #1
 802732e:	60a3      	str	r3, [r4, #8]
 8027330:	e7e7      	b.n	8027302 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08027332 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8027332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027336:	b0d1      	sub	sp, #324	; 0x144
 8027338:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802733c:	466c      	mov	r4, sp
 802733e:	1a0d      	subs	r5, r1, r0
 8027340:	f100 0208 	add.w	r2, r0, #8
 8027344:	2d48      	cmp	r5, #72	; 0x48
 8027346:	f340 80ba 	ble.w	80274be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802734a:	112d      	asrs	r5, r5, #4
 802734c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8027350:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8027354:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8027358:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802735c:	f9b0 8000 	ldrsh.w	r8, [r0]
 8027360:	681e      	ldr	r6, [r3, #0]
 8027362:	6006      	str	r6, [r0, #0]
 8027364:	685e      	ldr	r6, [r3, #4]
 8027366:	6046      	str	r6, [r0, #4]
 8027368:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802736c:	f8a3 c004 	strh.w	ip, [r3, #4]
 8027370:	f8a3 e002 	strh.w	lr, [r3, #2]
 8027374:	80df      	strh	r7, [r3, #6]
 8027376:	f1a1 0308 	sub.w	r3, r1, #8
 802737a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802737e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8027382:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8027386:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802738a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802738e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8027392:	45ac      	cmp	ip, r5
 8027394:	dd0f      	ble.n	80273b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8027396:	681d      	ldr	r5, [r3, #0]
 8027398:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802739c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80273a0:	6015      	str	r5, [r2, #0]
 80273a2:	685d      	ldr	r5, [r3, #4]
 80273a4:	6055      	str	r5, [r2, #4]
 80273a6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80273aa:	f821 6c06 	strh.w	r6, [r1, #-6]
 80273ae:	f821 ec04 	strh.w	lr, [r1, #-4]
 80273b2:	f821 cc02 	strh.w	ip, [r1, #-2]
 80273b6:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80273ba:	f9b0 7000 	ldrsh.w	r7, [r0]
 80273be:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80273c2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80273c6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80273ca:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80273ce:	4565      	cmp	r5, ip
 80273d0:	dd0d      	ble.n	80273ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80273d2:	6815      	ldr	r5, [r2, #0]
 80273d4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80273d8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80273dc:	6005      	str	r5, [r0, #0]
 80273de:	6855      	ldr	r5, [r2, #4]
 80273e0:	8107      	strh	r7, [r0, #8]
 80273e2:	6045      	str	r5, [r0, #4]
 80273e4:	8146      	strh	r6, [r0, #10]
 80273e6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80273ea:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80273ee:	f9b0 7000 	ldrsh.w	r7, [r0]
 80273f2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80273f6:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80273fa:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80273fe:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8027402:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8027406:	45ac      	cmp	ip, r5
 8027408:	dd0f      	ble.n	802742a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802740a:	681d      	ldr	r5, [r3, #0]
 802740c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8027410:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8027414:	6005      	str	r5, [r0, #0]
 8027416:	685d      	ldr	r5, [r3, #4]
 8027418:	6045      	str	r5, [r0, #4]
 802741a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802741e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8027422:	f821 ec04 	strh.w	lr, [r1, #-4]
 8027426:	f821 cc02 	strh.w	ip, [r1, #-2]
 802742a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802742e:	f102 0508 	add.w	r5, r2, #8
 8027432:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8027436:	f9b0 e000 	ldrsh.w	lr, [r0]
 802743a:	462f      	mov	r7, r5
 802743c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8027440:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8027444:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8027448:	45b2      	cmp	sl, r6
 802744a:	dc18      	bgt.n	802747e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802744c:	3b08      	subs	r3, #8
 802744e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8027452:	f9b3 6000 	ldrsh.w	r6, [r3]
 8027456:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802745a:	45b2      	cmp	sl, r6
 802745c:	dbf6      	blt.n	802744c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802745e:	42ab      	cmp	r3, r5
 8027460:	681e      	ldr	r6, [r3, #0]
 8027462:	d30e      	bcc.n	8027482 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8027464:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8027468:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802746c:	602e      	str	r6, [r5, #0]
 802746e:	685e      	ldr	r6, [r3, #4]
 8027470:	606e      	str	r6, [r5, #4]
 8027472:	f8a3 9000 	strh.w	r9, [r3]
 8027476:	f8a3 8002 	strh.w	r8, [r3, #2]
 802747a:	809f      	strh	r7, [r3, #4]
 802747c:	80da      	strh	r2, [r3, #6]
 802747e:	462a      	mov	r2, r5
 8027480:	e7d3      	b.n	802742a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8027482:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8027486:	6006      	str	r6, [r0, #0]
 8027488:	685e      	ldr	r6, [r3, #4]
 802748a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802748e:	6046      	str	r6, [r0, #4]
 8027490:	1a1e      	subs	r6, r3, r0
 8027492:	80da      	strh	r2, [r3, #6]
 8027494:	1b4a      	subs	r2, r1, r5
 8027496:	f8a3 e000 	strh.w	lr, [r3]
 802749a:	10d2      	asrs	r2, r2, #3
 802749c:	f8a3 c002 	strh.w	ip, [r3, #2]
 80274a0:	f8a3 8004 	strh.w	r8, [r3, #4]
 80274a4:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80274a8:	bfb5      	itete	lt
 80274aa:	e9c4 0300 	strdlt	r0, r3, [r4]
 80274ae:	4607      	movge	r7, r0
 80274b0:	460b      	movlt	r3, r1
 80274b2:	e9c4 5100 	strdge	r5, r1, [r4]
 80274b6:	4638      	mov	r0, r7
 80274b8:	3408      	adds	r4, #8
 80274ba:	4619      	mov	r1, r3
 80274bc:	e73f      	b.n	802733e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80274be:	4291      	cmp	r1, r2
 80274c0:	d925      	bls.n	802750e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80274c2:	f1a2 0310 	sub.w	r3, r2, #16
 80274c6:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80274ca:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80274ce:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80274d2:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80274d6:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80274da:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80274de:	42b5      	cmp	r5, r6
 80274e0:	dd13      	ble.n	802750a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80274e2:	461d      	mov	r5, r3
 80274e4:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80274e8:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80274ec:	3b08      	subs	r3, #8
 80274ee:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80274f2:	619e      	str	r6, [r3, #24]
 80274f4:	42a8      	cmp	r0, r5
 80274f6:	686e      	ldr	r6, [r5, #4]
 80274f8:	f8a3 c010 	strh.w	ip, [r3, #16]
 80274fc:	61de      	str	r6, [r3, #28]
 80274fe:	825f      	strh	r7, [r3, #18]
 8027500:	f8a3 8014 	strh.w	r8, [r3, #20]
 8027504:	f8a3 e016 	strh.w	lr, [r3, #22]
 8027508:	d1dd      	bne.n	80274c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802750a:	3208      	adds	r2, #8
 802750c:	e7d7      	b.n	80274be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802750e:	466b      	mov	r3, sp
 8027510:	429c      	cmp	r4, r3
 8027512:	d903      	bls.n	802751c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8027514:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8027518:	3c08      	subs	r4, #8
 802751a:	e710      	b.n	802733e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802751c:	b051      	add	sp, #324	; 0x144
 802751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027522 <_ZN8touchgfx7Outline9sortCellsEv>:
 8027522:	6881      	ldr	r1, [r0, #8]
 8027524:	b111      	cbz	r1, 802752c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8027526:	68c0      	ldr	r0, [r0, #12]
 8027528:	f7ff bf03 	b.w	8027332 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802752c:	4770      	bx	lr

0802752e <_ZN8touchgfx7Outline8getCellsEv>:
 802752e:	b510      	push	{r4, lr}
 8027530:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027532:	4604      	mov	r4, r0
 8027534:	07da      	lsls	r2, r3, #31
 8027536:	d507      	bpl.n	8027548 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8027538:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802753c:	f7ff fe83 	bl	8027246 <_ZN8touchgfx7Outline6lineToEii>
 8027540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027542:	f023 0301 	bic.w	r3, r3, #1
 8027546:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802754a:	079b      	lsls	r3, r3, #30
 802754c:	d51a      	bpl.n	8027584 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802754e:	8b62      	ldrh	r2, [r4, #26]
 8027550:	8b23      	ldrh	r3, [r4, #24]
 8027552:	4313      	orrs	r3, r2
 8027554:	d00d      	beq.n	8027572 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8027556:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802755a:	2b00      	cmp	r3, #0
 802755c:	db09      	blt.n	8027572 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802755e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8027560:	4293      	cmp	r3, r2
 8027562:	da06      	bge.n	8027572 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8027564:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8027568:	429a      	cmp	r2, r3
 802756a:	d80d      	bhi.n	8027588 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802756c:	2301      	movs	r3, #1
 802756e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027572:	68a0      	ldr	r0, [r4, #8]
 8027574:	b138      	cbz	r0, 8027586 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8027576:	4620      	mov	r0, r4
 8027578:	f7ff ffd3 	bl	8027522 <_ZN8touchgfx7Outline9sortCellsEv>
 802757c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802757e:	f023 0302 	bic.w	r3, r3, #2
 8027582:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027584:	68e0      	ldr	r0, [r4, #12]
 8027586:	bd10      	pop	{r4, pc}
 8027588:	f104 0314 	add.w	r3, r4, #20
 802758c:	6922      	ldr	r2, [r4, #16]
 802758e:	cb03      	ldmia	r3!, {r0, r1}
 8027590:	6010      	str	r0, [r2, #0]
 8027592:	6051      	str	r1, [r2, #4]
 8027594:	6923      	ldr	r3, [r4, #16]
 8027596:	3308      	adds	r3, #8
 8027598:	6123      	str	r3, [r4, #16]
 802759a:	68a3      	ldr	r3, [r4, #8]
 802759c:	3301      	adds	r3, #1
 802759e:	60a3      	str	r3, [r4, #8]
 80275a0:	e7e7      	b.n	8027572 <_ZN8touchgfx7Outline8getCellsEv+0x44>

080275a2 <_ZN8touchgfx8ScanlineD1Ev>:
 80275a2:	4770      	bx	lr

080275a4 <_ZN8touchgfx8ScanlineD0Ev>:
 80275a4:	b510      	push	{r4, lr}
 80275a6:	4604      	mov	r4, r0
 80275a8:	2124      	movs	r1, #36	; 0x24
 80275aa:	f000 f887 	bl	80276bc <_ZdlPvj>
 80275ae:	4620      	mov	r0, r4
 80275b0:	bd10      	pop	{r4, pc}

080275b2 <_ZN8touchgfx8Scanline5resetEv>:
 80275b2:	b510      	push	{r4, lr}
 80275b4:	4604      	mov	r4, r0
 80275b6:	f7f3 faf9 	bl	801abac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80275ba:	61a0      	str	r0, [r4, #24]
 80275bc:	f7f3 fafc 	bl	801abb8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80275c0:	61e0      	str	r0, [r4, #28]
 80275c2:	f7f3 faff 	bl	801abc4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80275c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80275ca:	6220      	str	r0, [r4, #32]
 80275cc:	6160      	str	r0, [r4, #20]
 80275ce:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80275d2:	69e3      	ldr	r3, [r4, #28]
 80275d4:	6123      	str	r3, [r4, #16]
 80275d6:	2300      	movs	r3, #0
 80275d8:	60e3      	str	r3, [r4, #12]
 80275da:	bd10      	pop	{r4, pc}

080275dc <_ZN8touchgfx8ScanlineC1Ev>:
 80275dc:	4b07      	ldr	r3, [pc, #28]	; (80275fc <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80275de:	b510      	push	{r4, lr}
 80275e0:	6003      	str	r3, [r0, #0]
 80275e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80275e6:	4604      	mov	r4, r0
 80275e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80275ec:	2300      	movs	r3, #0
 80275ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80275f2:	6143      	str	r3, [r0, #20]
 80275f4:	f7ff ffdd 	bl	80275b2 <_ZN8touchgfx8Scanline5resetEv>
 80275f8:	4620      	mov	r0, r4
 80275fa:	bd10      	pop	{r4, pc}
 80275fc:	0802d6c8 	.word	0x0802d6c8

08027600 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8027600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027604:	1e0c      	subs	r4, r1, #0
 8027606:	4605      	mov	r5, r0
 8027608:	4617      	mov	r7, r2
 802760a:	461e      	mov	r6, r3
 802760c:	da03      	bge.n	8027616 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802760e:	4426      	add	r6, r4
 8027610:	2e01      	cmp	r6, #1
 8027612:	d421      	bmi.n	8027658 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8027614:	2400      	movs	r4, #0
 8027616:	f7f3 fac3 	bl	801aba0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802761a:	42a0      	cmp	r0, r4
 802761c:	d91c      	bls.n	8027658 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802761e:	eb04 0806 	add.w	r8, r4, r6
 8027622:	f7f3 fabd 	bl	801aba0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027626:	4580      	cmp	r8, r0
 8027628:	d902      	bls.n	8027630 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802762a:	f7f3 fab9 	bl	801aba0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802762e:	1b06      	subs	r6, r0, r4
 8027630:	69a8      	ldr	r0, [r5, #24]
 8027632:	4632      	mov	r2, r6
 8027634:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8027638:	4420      	add	r0, r4
 802763a:	f7f4 ffd3 	bl	801c5e4 <_ZN8touchgfx6memsetEPvhm>
 802763e:	686b      	ldr	r3, [r5, #4]
 8027640:	b2b2      	uxth	r2, r6
 8027642:	3301      	adds	r3, #1
 8027644:	42a3      	cmp	r3, r4
 8027646:	696b      	ldr	r3, [r5, #20]
 8027648:	d108      	bne.n	802765c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802764a:	8819      	ldrh	r1, [r3, #0]
 802764c:	440a      	add	r2, r1
 802764e:	801a      	strh	r2, [r3, #0]
 8027650:	3c01      	subs	r4, #1
 8027652:	4434      	add	r4, r6
 8027654:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8027658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802765c:	1c99      	adds	r1, r3, #2
 802765e:	6169      	str	r1, [r5, #20]
 8027660:	805a      	strh	r2, [r3, #2]
 8027662:	692b      	ldr	r3, [r5, #16]
 8027664:	1c9a      	adds	r2, r3, #2
 8027666:	612a      	str	r2, [r5, #16]
 8027668:	805c      	strh	r4, [r3, #2]
 802766a:	68eb      	ldr	r3, [r5, #12]
 802766c:	3301      	adds	r3, #1
 802766e:	60eb      	str	r3, [r5, #12]
 8027670:	e7ee      	b.n	8027650 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08027672 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8027672:	4770      	bx	lr

08027674 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8027674:	b510      	push	{r4, lr}
 8027676:	4604      	mov	r4, r0
 8027678:	2118      	movs	r1, #24
 802767a:	f000 f81f 	bl	80276bc <_ZdlPvj>
 802767e:	4620      	mov	r0, r4
 8027680:	bd10      	pop	{r4, pc}
	...

08027684 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8027684:	4a04      	ldr	r2, [pc, #16]	; (8027698 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8027686:	6002      	str	r2, [r0, #0]
 8027688:	2200      	movs	r2, #0
 802768a:	6042      	str	r2, [r0, #4]
 802768c:	7202      	strb	r2, [r0, #8]
 802768e:	6142      	str	r2, [r0, #20]
 8027690:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8027694:	4770      	bx	lr
 8027696:	bf00      	nop
 8027698:	0802d6d8 	.word	0x0802d6d8

0802769c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802769c:	60c3      	str	r3, [r0, #12]
 802769e:	9b00      	ldr	r3, [sp, #0]
 80276a0:	6041      	str	r1, [r0, #4]
 80276a2:	6103      	str	r3, [r0, #16]
 80276a4:	9b01      	ldr	r3, [sp, #4]
 80276a6:	7202      	strb	r2, [r0, #8]
 80276a8:	6143      	str	r3, [r0, #20]
 80276aa:	4770      	bx	lr

080276ac <__aeabi_atexit>:
 80276ac:	460b      	mov	r3, r1
 80276ae:	4601      	mov	r1, r0
 80276b0:	4618      	mov	r0, r3
 80276b2:	f000 b853 	b.w	802775c <__cxa_atexit>

080276b6 <__cxa_pure_virtual>:
 80276b6:	b508      	push	{r3, lr}
 80276b8:	f000 f820 	bl	80276fc <_ZSt9terminatev>

080276bc <_ZdlPvj>:
 80276bc:	f000 b80f 	b.w	80276de <_ZdlPv>

080276c0 <__cxa_guard_acquire>:
 80276c0:	6803      	ldr	r3, [r0, #0]
 80276c2:	07db      	lsls	r3, r3, #31
 80276c4:	d406      	bmi.n	80276d4 <__cxa_guard_acquire+0x14>
 80276c6:	7843      	ldrb	r3, [r0, #1]
 80276c8:	b103      	cbz	r3, 80276cc <__cxa_guard_acquire+0xc>
 80276ca:	deff      	udf	#255	; 0xff
 80276cc:	2301      	movs	r3, #1
 80276ce:	7043      	strb	r3, [r0, #1]
 80276d0:	4618      	mov	r0, r3
 80276d2:	4770      	bx	lr
 80276d4:	2000      	movs	r0, #0
 80276d6:	4770      	bx	lr

080276d8 <__cxa_guard_release>:
 80276d8:	2301      	movs	r3, #1
 80276da:	6003      	str	r3, [r0, #0]
 80276dc:	4770      	bx	lr

080276de <_ZdlPv>:
 80276de:	f000 b88f 	b.w	8027800 <free>

080276e2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80276e2:	b508      	push	{r3, lr}
 80276e4:	4780      	blx	r0
 80276e6:	f000 f80e 	bl	8027706 <abort>
	...

080276ec <_ZSt13get_terminatev>:
 80276ec:	4b02      	ldr	r3, [pc, #8]	; (80276f8 <_ZSt13get_terminatev+0xc>)
 80276ee:	6818      	ldr	r0, [r3, #0]
 80276f0:	f3bf 8f5b 	dmb	ish
 80276f4:	4770      	bx	lr
 80276f6:	bf00      	nop
 80276f8:	20000094 	.word	0x20000094

080276fc <_ZSt9terminatev>:
 80276fc:	b508      	push	{r3, lr}
 80276fe:	f7ff fff5 	bl	80276ec <_ZSt13get_terminatev>
 8027702:	f7ff ffee 	bl	80276e2 <_ZN10__cxxabiv111__terminateEPFvvE>

08027706 <abort>:
 8027706:	b508      	push	{r3, lr}
 8027708:	2006      	movs	r0, #6
 802770a:	f000 fc3d 	bl	8027f88 <raise>
 802770e:	2001      	movs	r0, #1
 8027710:	f7db fba4 	bl	8002e5c <_exit>

08027714 <__assert_func>:
 8027714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027716:	461c      	mov	r4, r3
 8027718:	4b09      	ldr	r3, [pc, #36]	; (8027740 <__assert_func+0x2c>)
 802771a:	681b      	ldr	r3, [r3, #0]
 802771c:	4605      	mov	r5, r0
 802771e:	68d8      	ldr	r0, [r3, #12]
 8027720:	b152      	cbz	r2, 8027738 <__assert_func+0x24>
 8027722:	4b08      	ldr	r3, [pc, #32]	; (8027744 <__assert_func+0x30>)
 8027724:	9100      	str	r1, [sp, #0]
 8027726:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802772a:	4907      	ldr	r1, [pc, #28]	; (8027748 <__assert_func+0x34>)
 802772c:	462b      	mov	r3, r5
 802772e:	4622      	mov	r2, r4
 8027730:	f000 f828 	bl	8027784 <fiprintf>
 8027734:	f7ff ffe7 	bl	8027706 <abort>
 8027738:	4b04      	ldr	r3, [pc, #16]	; (802774c <__assert_func+0x38>)
 802773a:	461a      	mov	r2, r3
 802773c:	e7f2      	b.n	8027724 <__assert_func+0x10>
 802773e:	bf00      	nop
 8027740:	20000098 	.word	0x20000098
 8027744:	0802d6e0 	.word	0x0802d6e0
 8027748:	0802d6ed 	.word	0x0802d6ed
 802774c:	0802d71b 	.word	0x0802d71b

08027750 <atexit>:
 8027750:	2300      	movs	r3, #0
 8027752:	4601      	mov	r1, r0
 8027754:	461a      	mov	r2, r3
 8027756:	4618      	mov	r0, r3
 8027758:	f000 bcf2 	b.w	8028140 <__register_exitproc>

0802775c <__cxa_atexit>:
 802775c:	b510      	push	{r4, lr}
 802775e:	4c05      	ldr	r4, [pc, #20]	; (8027774 <__cxa_atexit+0x18>)
 8027760:	4613      	mov	r3, r2
 8027762:	b12c      	cbz	r4, 8027770 <__cxa_atexit+0x14>
 8027764:	460a      	mov	r2, r1
 8027766:	4601      	mov	r1, r0
 8027768:	2002      	movs	r0, #2
 802776a:	f000 fce9 	bl	8028140 <__register_exitproc>
 802776e:	bd10      	pop	{r4, pc}
 8027770:	4620      	mov	r0, r4
 8027772:	e7fc      	b.n	802776e <__cxa_atexit+0x12>
 8027774:	08028141 	.word	0x08028141

08027778 <__errno>:
 8027778:	4b01      	ldr	r3, [pc, #4]	; (8027780 <__errno+0x8>)
 802777a:	6818      	ldr	r0, [r3, #0]
 802777c:	4770      	bx	lr
 802777e:	bf00      	nop
 8027780:	20000098 	.word	0x20000098

08027784 <fiprintf>:
 8027784:	b40e      	push	{r1, r2, r3}
 8027786:	b503      	push	{r0, r1, lr}
 8027788:	4601      	mov	r1, r0
 802778a:	ab03      	add	r3, sp, #12
 802778c:	4805      	ldr	r0, [pc, #20]	; (80277a4 <fiprintf+0x20>)
 802778e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027792:	6800      	ldr	r0, [r0, #0]
 8027794:	9301      	str	r3, [sp, #4]
 8027796:	f000 f921 	bl	80279dc <_vfiprintf_r>
 802779a:	b002      	add	sp, #8
 802779c:	f85d eb04 	ldr.w	lr, [sp], #4
 80277a0:	b003      	add	sp, #12
 80277a2:	4770      	bx	lr
 80277a4:	20000098 	.word	0x20000098

080277a8 <__libc_init_array>:
 80277a8:	b570      	push	{r4, r5, r6, lr}
 80277aa:	4e0d      	ldr	r6, [pc, #52]	; (80277e0 <__libc_init_array+0x38>)
 80277ac:	4c0d      	ldr	r4, [pc, #52]	; (80277e4 <__libc_init_array+0x3c>)
 80277ae:	1ba4      	subs	r4, r4, r6
 80277b0:	10a4      	asrs	r4, r4, #2
 80277b2:	2500      	movs	r5, #0
 80277b4:	42a5      	cmp	r5, r4
 80277b6:	d109      	bne.n	80277cc <__libc_init_array+0x24>
 80277b8:	4e0b      	ldr	r6, [pc, #44]	; (80277e8 <__libc_init_array+0x40>)
 80277ba:	4c0c      	ldr	r4, [pc, #48]	; (80277ec <__libc_init_array+0x44>)
 80277bc:	f000 ffb0 	bl	8028720 <_init>
 80277c0:	1ba4      	subs	r4, r4, r6
 80277c2:	10a4      	asrs	r4, r4, #2
 80277c4:	2500      	movs	r5, #0
 80277c6:	42a5      	cmp	r5, r4
 80277c8:	d105      	bne.n	80277d6 <__libc_init_array+0x2e>
 80277ca:	bd70      	pop	{r4, r5, r6, pc}
 80277cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80277d0:	4798      	blx	r3
 80277d2:	3501      	adds	r5, #1
 80277d4:	e7ee      	b.n	80277b4 <__libc_init_array+0xc>
 80277d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80277da:	4798      	blx	r3
 80277dc:	3501      	adds	r5, #1
 80277de:	e7f2      	b.n	80277c6 <__libc_init_array+0x1e>
 80277e0:	080c130c 	.word	0x080c130c
 80277e4:	080c130c 	.word	0x080c130c
 80277e8:	080c130c 	.word	0x080c130c
 80277ec:	080c1320 	.word	0x080c1320

080277f0 <malloc>:
 80277f0:	4b02      	ldr	r3, [pc, #8]	; (80277fc <malloc+0xc>)
 80277f2:	4601      	mov	r1, r0
 80277f4:	6818      	ldr	r0, [r3, #0]
 80277f6:	f000 b86d 	b.w	80278d4 <_malloc_r>
 80277fa:	bf00      	nop
 80277fc:	20000098 	.word	0x20000098

08027800 <free>:
 8027800:	4b02      	ldr	r3, [pc, #8]	; (802780c <free+0xc>)
 8027802:	4601      	mov	r1, r0
 8027804:	6818      	ldr	r0, [r3, #0]
 8027806:	f000 b817 	b.w	8027838 <_free_r>
 802780a:	bf00      	nop
 802780c:	20000098 	.word	0x20000098

08027810 <memcpy>:
 8027810:	b510      	push	{r4, lr}
 8027812:	1e43      	subs	r3, r0, #1
 8027814:	440a      	add	r2, r1
 8027816:	4291      	cmp	r1, r2
 8027818:	d100      	bne.n	802781c <memcpy+0xc>
 802781a:	bd10      	pop	{r4, pc}
 802781c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027824:	e7f7      	b.n	8027816 <memcpy+0x6>

08027826 <memset>:
 8027826:	4402      	add	r2, r0
 8027828:	4603      	mov	r3, r0
 802782a:	4293      	cmp	r3, r2
 802782c:	d100      	bne.n	8027830 <memset+0xa>
 802782e:	4770      	bx	lr
 8027830:	f803 1b01 	strb.w	r1, [r3], #1
 8027834:	e7f9      	b.n	802782a <memset+0x4>
	...

08027838 <_free_r>:
 8027838:	b538      	push	{r3, r4, r5, lr}
 802783a:	4605      	mov	r5, r0
 802783c:	2900      	cmp	r1, #0
 802783e:	d045      	beq.n	80278cc <_free_r+0x94>
 8027840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027844:	1f0c      	subs	r4, r1, #4
 8027846:	2b00      	cmp	r3, #0
 8027848:	bfb8      	it	lt
 802784a:	18e4      	addlt	r4, r4, r3
 802784c:	f000 feba 	bl	80285c4 <__malloc_lock>
 8027850:	4a1f      	ldr	r2, [pc, #124]	; (80278d0 <_free_r+0x98>)
 8027852:	6813      	ldr	r3, [r2, #0]
 8027854:	4610      	mov	r0, r2
 8027856:	b933      	cbnz	r3, 8027866 <_free_r+0x2e>
 8027858:	6063      	str	r3, [r4, #4]
 802785a:	6014      	str	r4, [r2, #0]
 802785c:	4628      	mov	r0, r5
 802785e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027862:	f000 beb0 	b.w	80285c6 <__malloc_unlock>
 8027866:	42a3      	cmp	r3, r4
 8027868:	d90c      	bls.n	8027884 <_free_r+0x4c>
 802786a:	6821      	ldr	r1, [r4, #0]
 802786c:	1862      	adds	r2, r4, r1
 802786e:	4293      	cmp	r3, r2
 8027870:	bf04      	itt	eq
 8027872:	681a      	ldreq	r2, [r3, #0]
 8027874:	685b      	ldreq	r3, [r3, #4]
 8027876:	6063      	str	r3, [r4, #4]
 8027878:	bf04      	itt	eq
 802787a:	1852      	addeq	r2, r2, r1
 802787c:	6022      	streq	r2, [r4, #0]
 802787e:	6004      	str	r4, [r0, #0]
 8027880:	e7ec      	b.n	802785c <_free_r+0x24>
 8027882:	4613      	mov	r3, r2
 8027884:	685a      	ldr	r2, [r3, #4]
 8027886:	b10a      	cbz	r2, 802788c <_free_r+0x54>
 8027888:	42a2      	cmp	r2, r4
 802788a:	d9fa      	bls.n	8027882 <_free_r+0x4a>
 802788c:	6819      	ldr	r1, [r3, #0]
 802788e:	1858      	adds	r0, r3, r1
 8027890:	42a0      	cmp	r0, r4
 8027892:	d10b      	bne.n	80278ac <_free_r+0x74>
 8027894:	6820      	ldr	r0, [r4, #0]
 8027896:	4401      	add	r1, r0
 8027898:	1858      	adds	r0, r3, r1
 802789a:	4282      	cmp	r2, r0
 802789c:	6019      	str	r1, [r3, #0]
 802789e:	d1dd      	bne.n	802785c <_free_r+0x24>
 80278a0:	6810      	ldr	r0, [r2, #0]
 80278a2:	6852      	ldr	r2, [r2, #4]
 80278a4:	605a      	str	r2, [r3, #4]
 80278a6:	4401      	add	r1, r0
 80278a8:	6019      	str	r1, [r3, #0]
 80278aa:	e7d7      	b.n	802785c <_free_r+0x24>
 80278ac:	d902      	bls.n	80278b4 <_free_r+0x7c>
 80278ae:	230c      	movs	r3, #12
 80278b0:	602b      	str	r3, [r5, #0]
 80278b2:	e7d3      	b.n	802785c <_free_r+0x24>
 80278b4:	6820      	ldr	r0, [r4, #0]
 80278b6:	1821      	adds	r1, r4, r0
 80278b8:	428a      	cmp	r2, r1
 80278ba:	bf04      	itt	eq
 80278bc:	6811      	ldreq	r1, [r2, #0]
 80278be:	6852      	ldreq	r2, [r2, #4]
 80278c0:	6062      	str	r2, [r4, #4]
 80278c2:	bf04      	itt	eq
 80278c4:	1809      	addeq	r1, r1, r0
 80278c6:	6021      	streq	r1, [r4, #0]
 80278c8:	605c      	str	r4, [r3, #4]
 80278ca:	e7c7      	b.n	802785c <_free_r+0x24>
 80278cc:	bd38      	pop	{r3, r4, r5, pc}
 80278ce:	bf00      	nop
 80278d0:	2000b538 	.word	0x2000b538

080278d4 <_malloc_r>:
 80278d4:	b570      	push	{r4, r5, r6, lr}
 80278d6:	1ccd      	adds	r5, r1, #3
 80278d8:	f025 0503 	bic.w	r5, r5, #3
 80278dc:	3508      	adds	r5, #8
 80278de:	2d0c      	cmp	r5, #12
 80278e0:	bf38      	it	cc
 80278e2:	250c      	movcc	r5, #12
 80278e4:	2d00      	cmp	r5, #0
 80278e6:	4606      	mov	r6, r0
 80278e8:	db01      	blt.n	80278ee <_malloc_r+0x1a>
 80278ea:	42a9      	cmp	r1, r5
 80278ec:	d903      	bls.n	80278f6 <_malloc_r+0x22>
 80278ee:	230c      	movs	r3, #12
 80278f0:	6033      	str	r3, [r6, #0]
 80278f2:	2000      	movs	r0, #0
 80278f4:	bd70      	pop	{r4, r5, r6, pc}
 80278f6:	f000 fe65 	bl	80285c4 <__malloc_lock>
 80278fa:	4a21      	ldr	r2, [pc, #132]	; (8027980 <_malloc_r+0xac>)
 80278fc:	6814      	ldr	r4, [r2, #0]
 80278fe:	4621      	mov	r1, r4
 8027900:	b991      	cbnz	r1, 8027928 <_malloc_r+0x54>
 8027902:	4c20      	ldr	r4, [pc, #128]	; (8027984 <_malloc_r+0xb0>)
 8027904:	6823      	ldr	r3, [r4, #0]
 8027906:	b91b      	cbnz	r3, 8027910 <_malloc_r+0x3c>
 8027908:	4630      	mov	r0, r6
 802790a:	f000 fb05 	bl	8027f18 <_sbrk_r>
 802790e:	6020      	str	r0, [r4, #0]
 8027910:	4629      	mov	r1, r5
 8027912:	4630      	mov	r0, r6
 8027914:	f000 fb00 	bl	8027f18 <_sbrk_r>
 8027918:	1c43      	adds	r3, r0, #1
 802791a:	d124      	bne.n	8027966 <_malloc_r+0x92>
 802791c:	230c      	movs	r3, #12
 802791e:	6033      	str	r3, [r6, #0]
 8027920:	4630      	mov	r0, r6
 8027922:	f000 fe50 	bl	80285c6 <__malloc_unlock>
 8027926:	e7e4      	b.n	80278f2 <_malloc_r+0x1e>
 8027928:	680b      	ldr	r3, [r1, #0]
 802792a:	1b5b      	subs	r3, r3, r5
 802792c:	d418      	bmi.n	8027960 <_malloc_r+0x8c>
 802792e:	2b0b      	cmp	r3, #11
 8027930:	d90f      	bls.n	8027952 <_malloc_r+0x7e>
 8027932:	600b      	str	r3, [r1, #0]
 8027934:	50cd      	str	r5, [r1, r3]
 8027936:	18cc      	adds	r4, r1, r3
 8027938:	4630      	mov	r0, r6
 802793a:	f000 fe44 	bl	80285c6 <__malloc_unlock>
 802793e:	f104 000b 	add.w	r0, r4, #11
 8027942:	1d23      	adds	r3, r4, #4
 8027944:	f020 0007 	bic.w	r0, r0, #7
 8027948:	1ac3      	subs	r3, r0, r3
 802794a:	d0d3      	beq.n	80278f4 <_malloc_r+0x20>
 802794c:	425a      	negs	r2, r3
 802794e:	50e2      	str	r2, [r4, r3]
 8027950:	e7d0      	b.n	80278f4 <_malloc_r+0x20>
 8027952:	428c      	cmp	r4, r1
 8027954:	684b      	ldr	r3, [r1, #4]
 8027956:	bf16      	itet	ne
 8027958:	6063      	strne	r3, [r4, #4]
 802795a:	6013      	streq	r3, [r2, #0]
 802795c:	460c      	movne	r4, r1
 802795e:	e7eb      	b.n	8027938 <_malloc_r+0x64>
 8027960:	460c      	mov	r4, r1
 8027962:	6849      	ldr	r1, [r1, #4]
 8027964:	e7cc      	b.n	8027900 <_malloc_r+0x2c>
 8027966:	1cc4      	adds	r4, r0, #3
 8027968:	f024 0403 	bic.w	r4, r4, #3
 802796c:	42a0      	cmp	r0, r4
 802796e:	d005      	beq.n	802797c <_malloc_r+0xa8>
 8027970:	1a21      	subs	r1, r4, r0
 8027972:	4630      	mov	r0, r6
 8027974:	f000 fad0 	bl	8027f18 <_sbrk_r>
 8027978:	3001      	adds	r0, #1
 802797a:	d0cf      	beq.n	802791c <_malloc_r+0x48>
 802797c:	6025      	str	r5, [r4, #0]
 802797e:	e7db      	b.n	8027938 <_malloc_r+0x64>
 8027980:	2000b538 	.word	0x2000b538
 8027984:	2000b53c 	.word	0x2000b53c

08027988 <__sfputc_r>:
 8027988:	6893      	ldr	r3, [r2, #8]
 802798a:	3b01      	subs	r3, #1
 802798c:	2b00      	cmp	r3, #0
 802798e:	b410      	push	{r4}
 8027990:	6093      	str	r3, [r2, #8]
 8027992:	da08      	bge.n	80279a6 <__sfputc_r+0x1e>
 8027994:	6994      	ldr	r4, [r2, #24]
 8027996:	42a3      	cmp	r3, r4
 8027998:	db01      	blt.n	802799e <__sfputc_r+0x16>
 802799a:	290a      	cmp	r1, #10
 802799c:	d103      	bne.n	80279a6 <__sfputc_r+0x1e>
 802799e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80279a2:	f000 bb0d 	b.w	8027fc0 <__swbuf_r>
 80279a6:	6813      	ldr	r3, [r2, #0]
 80279a8:	1c58      	adds	r0, r3, #1
 80279aa:	6010      	str	r0, [r2, #0]
 80279ac:	7019      	strb	r1, [r3, #0]
 80279ae:	4608      	mov	r0, r1
 80279b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80279b4:	4770      	bx	lr

080279b6 <__sfputs_r>:
 80279b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80279b8:	4606      	mov	r6, r0
 80279ba:	460f      	mov	r7, r1
 80279bc:	4614      	mov	r4, r2
 80279be:	18d5      	adds	r5, r2, r3
 80279c0:	42ac      	cmp	r4, r5
 80279c2:	d101      	bne.n	80279c8 <__sfputs_r+0x12>
 80279c4:	2000      	movs	r0, #0
 80279c6:	e007      	b.n	80279d8 <__sfputs_r+0x22>
 80279c8:	463a      	mov	r2, r7
 80279ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80279ce:	4630      	mov	r0, r6
 80279d0:	f7ff ffda 	bl	8027988 <__sfputc_r>
 80279d4:	1c43      	adds	r3, r0, #1
 80279d6:	d1f3      	bne.n	80279c0 <__sfputs_r+0xa>
 80279d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080279dc <_vfiprintf_r>:
 80279dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279e0:	460c      	mov	r4, r1
 80279e2:	b09d      	sub	sp, #116	; 0x74
 80279e4:	4617      	mov	r7, r2
 80279e6:	461d      	mov	r5, r3
 80279e8:	4606      	mov	r6, r0
 80279ea:	b118      	cbz	r0, 80279f4 <_vfiprintf_r+0x18>
 80279ec:	6983      	ldr	r3, [r0, #24]
 80279ee:	b90b      	cbnz	r3, 80279f4 <_vfiprintf_r+0x18>
 80279f0:	f000 fcfa 	bl	80283e8 <__sinit>
 80279f4:	4b7c      	ldr	r3, [pc, #496]	; (8027be8 <_vfiprintf_r+0x20c>)
 80279f6:	429c      	cmp	r4, r3
 80279f8:	d158      	bne.n	8027aac <_vfiprintf_r+0xd0>
 80279fa:	6874      	ldr	r4, [r6, #4]
 80279fc:	89a3      	ldrh	r3, [r4, #12]
 80279fe:	0718      	lsls	r0, r3, #28
 8027a00:	d55e      	bpl.n	8027ac0 <_vfiprintf_r+0xe4>
 8027a02:	6923      	ldr	r3, [r4, #16]
 8027a04:	2b00      	cmp	r3, #0
 8027a06:	d05b      	beq.n	8027ac0 <_vfiprintf_r+0xe4>
 8027a08:	2300      	movs	r3, #0
 8027a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8027a0c:	2320      	movs	r3, #32
 8027a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027a12:	2330      	movs	r3, #48	; 0x30
 8027a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027a18:	9503      	str	r5, [sp, #12]
 8027a1a:	f04f 0b01 	mov.w	fp, #1
 8027a1e:	46b8      	mov	r8, r7
 8027a20:	4645      	mov	r5, r8
 8027a22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027a26:	b10b      	cbz	r3, 8027a2c <_vfiprintf_r+0x50>
 8027a28:	2b25      	cmp	r3, #37	; 0x25
 8027a2a:	d154      	bne.n	8027ad6 <_vfiprintf_r+0xfa>
 8027a2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8027a30:	d00b      	beq.n	8027a4a <_vfiprintf_r+0x6e>
 8027a32:	4653      	mov	r3, sl
 8027a34:	463a      	mov	r2, r7
 8027a36:	4621      	mov	r1, r4
 8027a38:	4630      	mov	r0, r6
 8027a3a:	f7ff ffbc 	bl	80279b6 <__sfputs_r>
 8027a3e:	3001      	adds	r0, #1
 8027a40:	f000 80c2 	beq.w	8027bc8 <_vfiprintf_r+0x1ec>
 8027a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a46:	4453      	add	r3, sl
 8027a48:	9309      	str	r3, [sp, #36]	; 0x24
 8027a4a:	f898 3000 	ldrb.w	r3, [r8]
 8027a4e:	2b00      	cmp	r3, #0
 8027a50:	f000 80ba 	beq.w	8027bc8 <_vfiprintf_r+0x1ec>
 8027a54:	2300      	movs	r3, #0
 8027a56:	f04f 32ff 	mov.w	r2, #4294967295
 8027a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027a5e:	9304      	str	r3, [sp, #16]
 8027a60:	9307      	str	r3, [sp, #28]
 8027a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027a66:	931a      	str	r3, [sp, #104]	; 0x68
 8027a68:	46a8      	mov	r8, r5
 8027a6a:	2205      	movs	r2, #5
 8027a6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8027a70:	485e      	ldr	r0, [pc, #376]	; (8027bec <_vfiprintf_r+0x210>)
 8027a72:	f7d8 fbcd 	bl	8000210 <memchr>
 8027a76:	9b04      	ldr	r3, [sp, #16]
 8027a78:	bb78      	cbnz	r0, 8027ada <_vfiprintf_r+0xfe>
 8027a7a:	06d9      	lsls	r1, r3, #27
 8027a7c:	bf44      	itt	mi
 8027a7e:	2220      	movmi	r2, #32
 8027a80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8027a84:	071a      	lsls	r2, r3, #28
 8027a86:	bf44      	itt	mi
 8027a88:	222b      	movmi	r2, #43	; 0x2b
 8027a8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8027a8e:	782a      	ldrb	r2, [r5, #0]
 8027a90:	2a2a      	cmp	r2, #42	; 0x2a
 8027a92:	d02a      	beq.n	8027aea <_vfiprintf_r+0x10e>
 8027a94:	9a07      	ldr	r2, [sp, #28]
 8027a96:	46a8      	mov	r8, r5
 8027a98:	2000      	movs	r0, #0
 8027a9a:	250a      	movs	r5, #10
 8027a9c:	4641      	mov	r1, r8
 8027a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027aa2:	3b30      	subs	r3, #48	; 0x30
 8027aa4:	2b09      	cmp	r3, #9
 8027aa6:	d969      	bls.n	8027b7c <_vfiprintf_r+0x1a0>
 8027aa8:	b360      	cbz	r0, 8027b04 <_vfiprintf_r+0x128>
 8027aaa:	e024      	b.n	8027af6 <_vfiprintf_r+0x11a>
 8027aac:	4b50      	ldr	r3, [pc, #320]	; (8027bf0 <_vfiprintf_r+0x214>)
 8027aae:	429c      	cmp	r4, r3
 8027ab0:	d101      	bne.n	8027ab6 <_vfiprintf_r+0xda>
 8027ab2:	68b4      	ldr	r4, [r6, #8]
 8027ab4:	e7a2      	b.n	80279fc <_vfiprintf_r+0x20>
 8027ab6:	4b4f      	ldr	r3, [pc, #316]	; (8027bf4 <_vfiprintf_r+0x218>)
 8027ab8:	429c      	cmp	r4, r3
 8027aba:	bf08      	it	eq
 8027abc:	68f4      	ldreq	r4, [r6, #12]
 8027abe:	e79d      	b.n	80279fc <_vfiprintf_r+0x20>
 8027ac0:	4621      	mov	r1, r4
 8027ac2:	4630      	mov	r0, r6
 8027ac4:	f000 face 	bl	8028064 <__swsetup_r>
 8027ac8:	2800      	cmp	r0, #0
 8027aca:	d09d      	beq.n	8027a08 <_vfiprintf_r+0x2c>
 8027acc:	f04f 30ff 	mov.w	r0, #4294967295
 8027ad0:	b01d      	add	sp, #116	; 0x74
 8027ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ad6:	46a8      	mov	r8, r5
 8027ad8:	e7a2      	b.n	8027a20 <_vfiprintf_r+0x44>
 8027ada:	4a44      	ldr	r2, [pc, #272]	; (8027bec <_vfiprintf_r+0x210>)
 8027adc:	1a80      	subs	r0, r0, r2
 8027ade:	fa0b f000 	lsl.w	r0, fp, r0
 8027ae2:	4318      	orrs	r0, r3
 8027ae4:	9004      	str	r0, [sp, #16]
 8027ae6:	4645      	mov	r5, r8
 8027ae8:	e7be      	b.n	8027a68 <_vfiprintf_r+0x8c>
 8027aea:	9a03      	ldr	r2, [sp, #12]
 8027aec:	1d11      	adds	r1, r2, #4
 8027aee:	6812      	ldr	r2, [r2, #0]
 8027af0:	9103      	str	r1, [sp, #12]
 8027af2:	2a00      	cmp	r2, #0
 8027af4:	db01      	blt.n	8027afa <_vfiprintf_r+0x11e>
 8027af6:	9207      	str	r2, [sp, #28]
 8027af8:	e004      	b.n	8027b04 <_vfiprintf_r+0x128>
 8027afa:	4252      	negs	r2, r2
 8027afc:	f043 0302 	orr.w	r3, r3, #2
 8027b00:	9207      	str	r2, [sp, #28]
 8027b02:	9304      	str	r3, [sp, #16]
 8027b04:	f898 3000 	ldrb.w	r3, [r8]
 8027b08:	2b2e      	cmp	r3, #46	; 0x2e
 8027b0a:	d10e      	bne.n	8027b2a <_vfiprintf_r+0x14e>
 8027b0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8027b10:	2b2a      	cmp	r3, #42	; 0x2a
 8027b12:	d138      	bne.n	8027b86 <_vfiprintf_r+0x1aa>
 8027b14:	9b03      	ldr	r3, [sp, #12]
 8027b16:	1d1a      	adds	r2, r3, #4
 8027b18:	681b      	ldr	r3, [r3, #0]
 8027b1a:	9203      	str	r2, [sp, #12]
 8027b1c:	2b00      	cmp	r3, #0
 8027b1e:	bfb8      	it	lt
 8027b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8027b24:	f108 0802 	add.w	r8, r8, #2
 8027b28:	9305      	str	r3, [sp, #20]
 8027b2a:	4d33      	ldr	r5, [pc, #204]	; (8027bf8 <_vfiprintf_r+0x21c>)
 8027b2c:	f898 1000 	ldrb.w	r1, [r8]
 8027b30:	2203      	movs	r2, #3
 8027b32:	4628      	mov	r0, r5
 8027b34:	f7d8 fb6c 	bl	8000210 <memchr>
 8027b38:	b140      	cbz	r0, 8027b4c <_vfiprintf_r+0x170>
 8027b3a:	2340      	movs	r3, #64	; 0x40
 8027b3c:	1b40      	subs	r0, r0, r5
 8027b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8027b42:	9b04      	ldr	r3, [sp, #16]
 8027b44:	4303      	orrs	r3, r0
 8027b46:	f108 0801 	add.w	r8, r8, #1
 8027b4a:	9304      	str	r3, [sp, #16]
 8027b4c:	f898 1000 	ldrb.w	r1, [r8]
 8027b50:	482a      	ldr	r0, [pc, #168]	; (8027bfc <_vfiprintf_r+0x220>)
 8027b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027b56:	2206      	movs	r2, #6
 8027b58:	f108 0701 	add.w	r7, r8, #1
 8027b5c:	f7d8 fb58 	bl	8000210 <memchr>
 8027b60:	2800      	cmp	r0, #0
 8027b62:	d037      	beq.n	8027bd4 <_vfiprintf_r+0x1f8>
 8027b64:	4b26      	ldr	r3, [pc, #152]	; (8027c00 <_vfiprintf_r+0x224>)
 8027b66:	bb1b      	cbnz	r3, 8027bb0 <_vfiprintf_r+0x1d4>
 8027b68:	9b03      	ldr	r3, [sp, #12]
 8027b6a:	3307      	adds	r3, #7
 8027b6c:	f023 0307 	bic.w	r3, r3, #7
 8027b70:	3308      	adds	r3, #8
 8027b72:	9303      	str	r3, [sp, #12]
 8027b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b76:	444b      	add	r3, r9
 8027b78:	9309      	str	r3, [sp, #36]	; 0x24
 8027b7a:	e750      	b.n	8027a1e <_vfiprintf_r+0x42>
 8027b7c:	fb05 3202 	mla	r2, r5, r2, r3
 8027b80:	2001      	movs	r0, #1
 8027b82:	4688      	mov	r8, r1
 8027b84:	e78a      	b.n	8027a9c <_vfiprintf_r+0xc0>
 8027b86:	2300      	movs	r3, #0
 8027b88:	f108 0801 	add.w	r8, r8, #1
 8027b8c:	9305      	str	r3, [sp, #20]
 8027b8e:	4619      	mov	r1, r3
 8027b90:	250a      	movs	r5, #10
 8027b92:	4640      	mov	r0, r8
 8027b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027b98:	3a30      	subs	r2, #48	; 0x30
 8027b9a:	2a09      	cmp	r2, #9
 8027b9c:	d903      	bls.n	8027ba6 <_vfiprintf_r+0x1ca>
 8027b9e:	2b00      	cmp	r3, #0
 8027ba0:	d0c3      	beq.n	8027b2a <_vfiprintf_r+0x14e>
 8027ba2:	9105      	str	r1, [sp, #20]
 8027ba4:	e7c1      	b.n	8027b2a <_vfiprintf_r+0x14e>
 8027ba6:	fb05 2101 	mla	r1, r5, r1, r2
 8027baa:	2301      	movs	r3, #1
 8027bac:	4680      	mov	r8, r0
 8027bae:	e7f0      	b.n	8027b92 <_vfiprintf_r+0x1b6>
 8027bb0:	ab03      	add	r3, sp, #12
 8027bb2:	9300      	str	r3, [sp, #0]
 8027bb4:	4622      	mov	r2, r4
 8027bb6:	4b13      	ldr	r3, [pc, #76]	; (8027c04 <_vfiprintf_r+0x228>)
 8027bb8:	a904      	add	r1, sp, #16
 8027bba:	4630      	mov	r0, r6
 8027bbc:	f3af 8000 	nop.w
 8027bc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8027bc4:	4681      	mov	r9, r0
 8027bc6:	d1d5      	bne.n	8027b74 <_vfiprintf_r+0x198>
 8027bc8:	89a3      	ldrh	r3, [r4, #12]
 8027bca:	065b      	lsls	r3, r3, #25
 8027bcc:	f53f af7e 	bmi.w	8027acc <_vfiprintf_r+0xf0>
 8027bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027bd2:	e77d      	b.n	8027ad0 <_vfiprintf_r+0xf4>
 8027bd4:	ab03      	add	r3, sp, #12
 8027bd6:	9300      	str	r3, [sp, #0]
 8027bd8:	4622      	mov	r2, r4
 8027bda:	4b0a      	ldr	r3, [pc, #40]	; (8027c04 <_vfiprintf_r+0x228>)
 8027bdc:	a904      	add	r1, sp, #16
 8027bde:	4630      	mov	r0, r6
 8027be0:	f000 f888 	bl	8027cf4 <_printf_i>
 8027be4:	e7ec      	b.n	8027bc0 <_vfiprintf_r+0x1e4>
 8027be6:	bf00      	nop
 8027be8:	0802d778 	.word	0x0802d778
 8027bec:	0802d720 	.word	0x0802d720
 8027bf0:	0802d798 	.word	0x0802d798
 8027bf4:	0802d758 	.word	0x0802d758
 8027bf8:	0802d726 	.word	0x0802d726
 8027bfc:	0802d72a 	.word	0x0802d72a
 8027c00:	00000000 	.word	0x00000000
 8027c04:	080279b7 	.word	0x080279b7

08027c08 <_printf_common>:
 8027c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027c0c:	4691      	mov	r9, r2
 8027c0e:	461f      	mov	r7, r3
 8027c10:	688a      	ldr	r2, [r1, #8]
 8027c12:	690b      	ldr	r3, [r1, #16]
 8027c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027c18:	4293      	cmp	r3, r2
 8027c1a:	bfb8      	it	lt
 8027c1c:	4613      	movlt	r3, r2
 8027c1e:	f8c9 3000 	str.w	r3, [r9]
 8027c22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027c26:	4606      	mov	r6, r0
 8027c28:	460c      	mov	r4, r1
 8027c2a:	b112      	cbz	r2, 8027c32 <_printf_common+0x2a>
 8027c2c:	3301      	adds	r3, #1
 8027c2e:	f8c9 3000 	str.w	r3, [r9]
 8027c32:	6823      	ldr	r3, [r4, #0]
 8027c34:	0699      	lsls	r1, r3, #26
 8027c36:	bf42      	ittt	mi
 8027c38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8027c3c:	3302      	addmi	r3, #2
 8027c3e:	f8c9 3000 	strmi.w	r3, [r9]
 8027c42:	6825      	ldr	r5, [r4, #0]
 8027c44:	f015 0506 	ands.w	r5, r5, #6
 8027c48:	d107      	bne.n	8027c5a <_printf_common+0x52>
 8027c4a:	f104 0a19 	add.w	sl, r4, #25
 8027c4e:	68e3      	ldr	r3, [r4, #12]
 8027c50:	f8d9 2000 	ldr.w	r2, [r9]
 8027c54:	1a9b      	subs	r3, r3, r2
 8027c56:	42ab      	cmp	r3, r5
 8027c58:	dc28      	bgt.n	8027cac <_printf_common+0xa4>
 8027c5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8027c5e:	6822      	ldr	r2, [r4, #0]
 8027c60:	3300      	adds	r3, #0
 8027c62:	bf18      	it	ne
 8027c64:	2301      	movne	r3, #1
 8027c66:	0692      	lsls	r2, r2, #26
 8027c68:	d42d      	bmi.n	8027cc6 <_printf_common+0xbe>
 8027c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027c6e:	4639      	mov	r1, r7
 8027c70:	4630      	mov	r0, r6
 8027c72:	47c0      	blx	r8
 8027c74:	3001      	adds	r0, #1
 8027c76:	d020      	beq.n	8027cba <_printf_common+0xb2>
 8027c78:	6823      	ldr	r3, [r4, #0]
 8027c7a:	68e5      	ldr	r5, [r4, #12]
 8027c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8027c80:	f003 0306 	and.w	r3, r3, #6
 8027c84:	2b04      	cmp	r3, #4
 8027c86:	bf08      	it	eq
 8027c88:	1aad      	subeq	r5, r5, r2
 8027c8a:	68a3      	ldr	r3, [r4, #8]
 8027c8c:	6922      	ldr	r2, [r4, #16]
 8027c8e:	bf0c      	ite	eq
 8027c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027c94:	2500      	movne	r5, #0
 8027c96:	4293      	cmp	r3, r2
 8027c98:	bfc4      	itt	gt
 8027c9a:	1a9b      	subgt	r3, r3, r2
 8027c9c:	18ed      	addgt	r5, r5, r3
 8027c9e:	f04f 0900 	mov.w	r9, #0
 8027ca2:	341a      	adds	r4, #26
 8027ca4:	454d      	cmp	r5, r9
 8027ca6:	d11a      	bne.n	8027cde <_printf_common+0xd6>
 8027ca8:	2000      	movs	r0, #0
 8027caa:	e008      	b.n	8027cbe <_printf_common+0xb6>
 8027cac:	2301      	movs	r3, #1
 8027cae:	4652      	mov	r2, sl
 8027cb0:	4639      	mov	r1, r7
 8027cb2:	4630      	mov	r0, r6
 8027cb4:	47c0      	blx	r8
 8027cb6:	3001      	adds	r0, #1
 8027cb8:	d103      	bne.n	8027cc2 <_printf_common+0xba>
 8027cba:	f04f 30ff 	mov.w	r0, #4294967295
 8027cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027cc2:	3501      	adds	r5, #1
 8027cc4:	e7c3      	b.n	8027c4e <_printf_common+0x46>
 8027cc6:	18e1      	adds	r1, r4, r3
 8027cc8:	1c5a      	adds	r2, r3, #1
 8027cca:	2030      	movs	r0, #48	; 0x30
 8027ccc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027cd0:	4422      	add	r2, r4
 8027cd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027cd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027cda:	3302      	adds	r3, #2
 8027cdc:	e7c5      	b.n	8027c6a <_printf_common+0x62>
 8027cde:	2301      	movs	r3, #1
 8027ce0:	4622      	mov	r2, r4
 8027ce2:	4639      	mov	r1, r7
 8027ce4:	4630      	mov	r0, r6
 8027ce6:	47c0      	blx	r8
 8027ce8:	3001      	adds	r0, #1
 8027cea:	d0e6      	beq.n	8027cba <_printf_common+0xb2>
 8027cec:	f109 0901 	add.w	r9, r9, #1
 8027cf0:	e7d8      	b.n	8027ca4 <_printf_common+0x9c>
	...

08027cf4 <_printf_i>:
 8027cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027cf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8027cfc:	460c      	mov	r4, r1
 8027cfe:	7e09      	ldrb	r1, [r1, #24]
 8027d00:	b085      	sub	sp, #20
 8027d02:	296e      	cmp	r1, #110	; 0x6e
 8027d04:	4617      	mov	r7, r2
 8027d06:	4606      	mov	r6, r0
 8027d08:	4698      	mov	r8, r3
 8027d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027d0c:	f000 80b3 	beq.w	8027e76 <_printf_i+0x182>
 8027d10:	d822      	bhi.n	8027d58 <_printf_i+0x64>
 8027d12:	2963      	cmp	r1, #99	; 0x63
 8027d14:	d036      	beq.n	8027d84 <_printf_i+0x90>
 8027d16:	d80a      	bhi.n	8027d2e <_printf_i+0x3a>
 8027d18:	2900      	cmp	r1, #0
 8027d1a:	f000 80b9 	beq.w	8027e90 <_printf_i+0x19c>
 8027d1e:	2958      	cmp	r1, #88	; 0x58
 8027d20:	f000 8083 	beq.w	8027e2a <_printf_i+0x136>
 8027d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027d28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8027d2c:	e032      	b.n	8027d94 <_printf_i+0xa0>
 8027d2e:	2964      	cmp	r1, #100	; 0x64
 8027d30:	d001      	beq.n	8027d36 <_printf_i+0x42>
 8027d32:	2969      	cmp	r1, #105	; 0x69
 8027d34:	d1f6      	bne.n	8027d24 <_printf_i+0x30>
 8027d36:	6820      	ldr	r0, [r4, #0]
 8027d38:	6813      	ldr	r3, [r2, #0]
 8027d3a:	0605      	lsls	r5, r0, #24
 8027d3c:	f103 0104 	add.w	r1, r3, #4
 8027d40:	d52a      	bpl.n	8027d98 <_printf_i+0xa4>
 8027d42:	681b      	ldr	r3, [r3, #0]
 8027d44:	6011      	str	r1, [r2, #0]
 8027d46:	2b00      	cmp	r3, #0
 8027d48:	da03      	bge.n	8027d52 <_printf_i+0x5e>
 8027d4a:	222d      	movs	r2, #45	; 0x2d
 8027d4c:	425b      	negs	r3, r3
 8027d4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8027d52:	486f      	ldr	r0, [pc, #444]	; (8027f10 <_printf_i+0x21c>)
 8027d54:	220a      	movs	r2, #10
 8027d56:	e039      	b.n	8027dcc <_printf_i+0xd8>
 8027d58:	2973      	cmp	r1, #115	; 0x73
 8027d5a:	f000 809d 	beq.w	8027e98 <_printf_i+0x1a4>
 8027d5e:	d808      	bhi.n	8027d72 <_printf_i+0x7e>
 8027d60:	296f      	cmp	r1, #111	; 0x6f
 8027d62:	d020      	beq.n	8027da6 <_printf_i+0xb2>
 8027d64:	2970      	cmp	r1, #112	; 0x70
 8027d66:	d1dd      	bne.n	8027d24 <_printf_i+0x30>
 8027d68:	6823      	ldr	r3, [r4, #0]
 8027d6a:	f043 0320 	orr.w	r3, r3, #32
 8027d6e:	6023      	str	r3, [r4, #0]
 8027d70:	e003      	b.n	8027d7a <_printf_i+0x86>
 8027d72:	2975      	cmp	r1, #117	; 0x75
 8027d74:	d017      	beq.n	8027da6 <_printf_i+0xb2>
 8027d76:	2978      	cmp	r1, #120	; 0x78
 8027d78:	d1d4      	bne.n	8027d24 <_printf_i+0x30>
 8027d7a:	2378      	movs	r3, #120	; 0x78
 8027d7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027d80:	4864      	ldr	r0, [pc, #400]	; (8027f14 <_printf_i+0x220>)
 8027d82:	e055      	b.n	8027e30 <_printf_i+0x13c>
 8027d84:	6813      	ldr	r3, [r2, #0]
 8027d86:	1d19      	adds	r1, r3, #4
 8027d88:	681b      	ldr	r3, [r3, #0]
 8027d8a:	6011      	str	r1, [r2, #0]
 8027d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027d94:	2301      	movs	r3, #1
 8027d96:	e08c      	b.n	8027eb2 <_printf_i+0x1be>
 8027d98:	681b      	ldr	r3, [r3, #0]
 8027d9a:	6011      	str	r1, [r2, #0]
 8027d9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027da0:	bf18      	it	ne
 8027da2:	b21b      	sxthne	r3, r3
 8027da4:	e7cf      	b.n	8027d46 <_printf_i+0x52>
 8027da6:	6813      	ldr	r3, [r2, #0]
 8027da8:	6825      	ldr	r5, [r4, #0]
 8027daa:	1d18      	adds	r0, r3, #4
 8027dac:	6010      	str	r0, [r2, #0]
 8027dae:	0628      	lsls	r0, r5, #24
 8027db0:	d501      	bpl.n	8027db6 <_printf_i+0xc2>
 8027db2:	681b      	ldr	r3, [r3, #0]
 8027db4:	e002      	b.n	8027dbc <_printf_i+0xc8>
 8027db6:	0668      	lsls	r0, r5, #25
 8027db8:	d5fb      	bpl.n	8027db2 <_printf_i+0xbe>
 8027dba:	881b      	ldrh	r3, [r3, #0]
 8027dbc:	4854      	ldr	r0, [pc, #336]	; (8027f10 <_printf_i+0x21c>)
 8027dbe:	296f      	cmp	r1, #111	; 0x6f
 8027dc0:	bf14      	ite	ne
 8027dc2:	220a      	movne	r2, #10
 8027dc4:	2208      	moveq	r2, #8
 8027dc6:	2100      	movs	r1, #0
 8027dc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027dcc:	6865      	ldr	r5, [r4, #4]
 8027dce:	60a5      	str	r5, [r4, #8]
 8027dd0:	2d00      	cmp	r5, #0
 8027dd2:	f2c0 8095 	blt.w	8027f00 <_printf_i+0x20c>
 8027dd6:	6821      	ldr	r1, [r4, #0]
 8027dd8:	f021 0104 	bic.w	r1, r1, #4
 8027ddc:	6021      	str	r1, [r4, #0]
 8027dde:	2b00      	cmp	r3, #0
 8027de0:	d13d      	bne.n	8027e5e <_printf_i+0x16a>
 8027de2:	2d00      	cmp	r5, #0
 8027de4:	f040 808e 	bne.w	8027f04 <_printf_i+0x210>
 8027de8:	4665      	mov	r5, ip
 8027dea:	2a08      	cmp	r2, #8
 8027dec:	d10b      	bne.n	8027e06 <_printf_i+0x112>
 8027dee:	6823      	ldr	r3, [r4, #0]
 8027df0:	07db      	lsls	r3, r3, #31
 8027df2:	d508      	bpl.n	8027e06 <_printf_i+0x112>
 8027df4:	6923      	ldr	r3, [r4, #16]
 8027df6:	6862      	ldr	r2, [r4, #4]
 8027df8:	429a      	cmp	r2, r3
 8027dfa:	bfde      	ittt	le
 8027dfc:	2330      	movle	r3, #48	; 0x30
 8027dfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027e02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027e06:	ebac 0305 	sub.w	r3, ip, r5
 8027e0a:	6123      	str	r3, [r4, #16]
 8027e0c:	f8cd 8000 	str.w	r8, [sp]
 8027e10:	463b      	mov	r3, r7
 8027e12:	aa03      	add	r2, sp, #12
 8027e14:	4621      	mov	r1, r4
 8027e16:	4630      	mov	r0, r6
 8027e18:	f7ff fef6 	bl	8027c08 <_printf_common>
 8027e1c:	3001      	adds	r0, #1
 8027e1e:	d14d      	bne.n	8027ebc <_printf_i+0x1c8>
 8027e20:	f04f 30ff 	mov.w	r0, #4294967295
 8027e24:	b005      	add	sp, #20
 8027e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027e2a:	4839      	ldr	r0, [pc, #228]	; (8027f10 <_printf_i+0x21c>)
 8027e2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8027e30:	6813      	ldr	r3, [r2, #0]
 8027e32:	6821      	ldr	r1, [r4, #0]
 8027e34:	1d1d      	adds	r5, r3, #4
 8027e36:	681b      	ldr	r3, [r3, #0]
 8027e38:	6015      	str	r5, [r2, #0]
 8027e3a:	060a      	lsls	r2, r1, #24
 8027e3c:	d50b      	bpl.n	8027e56 <_printf_i+0x162>
 8027e3e:	07ca      	lsls	r2, r1, #31
 8027e40:	bf44      	itt	mi
 8027e42:	f041 0120 	orrmi.w	r1, r1, #32
 8027e46:	6021      	strmi	r1, [r4, #0]
 8027e48:	b91b      	cbnz	r3, 8027e52 <_printf_i+0x15e>
 8027e4a:	6822      	ldr	r2, [r4, #0]
 8027e4c:	f022 0220 	bic.w	r2, r2, #32
 8027e50:	6022      	str	r2, [r4, #0]
 8027e52:	2210      	movs	r2, #16
 8027e54:	e7b7      	b.n	8027dc6 <_printf_i+0xd2>
 8027e56:	064d      	lsls	r5, r1, #25
 8027e58:	bf48      	it	mi
 8027e5a:	b29b      	uxthmi	r3, r3
 8027e5c:	e7ef      	b.n	8027e3e <_printf_i+0x14a>
 8027e5e:	4665      	mov	r5, ip
 8027e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8027e64:	fb02 3311 	mls	r3, r2, r1, r3
 8027e68:	5cc3      	ldrb	r3, [r0, r3]
 8027e6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8027e6e:	460b      	mov	r3, r1
 8027e70:	2900      	cmp	r1, #0
 8027e72:	d1f5      	bne.n	8027e60 <_printf_i+0x16c>
 8027e74:	e7b9      	b.n	8027dea <_printf_i+0xf6>
 8027e76:	6813      	ldr	r3, [r2, #0]
 8027e78:	6825      	ldr	r5, [r4, #0]
 8027e7a:	6961      	ldr	r1, [r4, #20]
 8027e7c:	1d18      	adds	r0, r3, #4
 8027e7e:	6010      	str	r0, [r2, #0]
 8027e80:	0628      	lsls	r0, r5, #24
 8027e82:	681b      	ldr	r3, [r3, #0]
 8027e84:	d501      	bpl.n	8027e8a <_printf_i+0x196>
 8027e86:	6019      	str	r1, [r3, #0]
 8027e88:	e002      	b.n	8027e90 <_printf_i+0x19c>
 8027e8a:	066a      	lsls	r2, r5, #25
 8027e8c:	d5fb      	bpl.n	8027e86 <_printf_i+0x192>
 8027e8e:	8019      	strh	r1, [r3, #0]
 8027e90:	2300      	movs	r3, #0
 8027e92:	6123      	str	r3, [r4, #16]
 8027e94:	4665      	mov	r5, ip
 8027e96:	e7b9      	b.n	8027e0c <_printf_i+0x118>
 8027e98:	6813      	ldr	r3, [r2, #0]
 8027e9a:	1d19      	adds	r1, r3, #4
 8027e9c:	6011      	str	r1, [r2, #0]
 8027e9e:	681d      	ldr	r5, [r3, #0]
 8027ea0:	6862      	ldr	r2, [r4, #4]
 8027ea2:	2100      	movs	r1, #0
 8027ea4:	4628      	mov	r0, r5
 8027ea6:	f7d8 f9b3 	bl	8000210 <memchr>
 8027eaa:	b108      	cbz	r0, 8027eb0 <_printf_i+0x1bc>
 8027eac:	1b40      	subs	r0, r0, r5
 8027eae:	6060      	str	r0, [r4, #4]
 8027eb0:	6863      	ldr	r3, [r4, #4]
 8027eb2:	6123      	str	r3, [r4, #16]
 8027eb4:	2300      	movs	r3, #0
 8027eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027eba:	e7a7      	b.n	8027e0c <_printf_i+0x118>
 8027ebc:	6923      	ldr	r3, [r4, #16]
 8027ebe:	462a      	mov	r2, r5
 8027ec0:	4639      	mov	r1, r7
 8027ec2:	4630      	mov	r0, r6
 8027ec4:	47c0      	blx	r8
 8027ec6:	3001      	adds	r0, #1
 8027ec8:	d0aa      	beq.n	8027e20 <_printf_i+0x12c>
 8027eca:	6823      	ldr	r3, [r4, #0]
 8027ecc:	079b      	lsls	r3, r3, #30
 8027ece:	d413      	bmi.n	8027ef8 <_printf_i+0x204>
 8027ed0:	68e0      	ldr	r0, [r4, #12]
 8027ed2:	9b03      	ldr	r3, [sp, #12]
 8027ed4:	4298      	cmp	r0, r3
 8027ed6:	bfb8      	it	lt
 8027ed8:	4618      	movlt	r0, r3
 8027eda:	e7a3      	b.n	8027e24 <_printf_i+0x130>
 8027edc:	2301      	movs	r3, #1
 8027ede:	464a      	mov	r2, r9
 8027ee0:	4639      	mov	r1, r7
 8027ee2:	4630      	mov	r0, r6
 8027ee4:	47c0      	blx	r8
 8027ee6:	3001      	adds	r0, #1
 8027ee8:	d09a      	beq.n	8027e20 <_printf_i+0x12c>
 8027eea:	3501      	adds	r5, #1
 8027eec:	68e3      	ldr	r3, [r4, #12]
 8027eee:	9a03      	ldr	r2, [sp, #12]
 8027ef0:	1a9b      	subs	r3, r3, r2
 8027ef2:	42ab      	cmp	r3, r5
 8027ef4:	dcf2      	bgt.n	8027edc <_printf_i+0x1e8>
 8027ef6:	e7eb      	b.n	8027ed0 <_printf_i+0x1dc>
 8027ef8:	2500      	movs	r5, #0
 8027efa:	f104 0919 	add.w	r9, r4, #25
 8027efe:	e7f5      	b.n	8027eec <_printf_i+0x1f8>
 8027f00:	2b00      	cmp	r3, #0
 8027f02:	d1ac      	bne.n	8027e5e <_printf_i+0x16a>
 8027f04:	7803      	ldrb	r3, [r0, #0]
 8027f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027f0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027f0e:	e76c      	b.n	8027dea <_printf_i+0xf6>
 8027f10:	0802d731 	.word	0x0802d731
 8027f14:	0802d742 	.word	0x0802d742

08027f18 <_sbrk_r>:
 8027f18:	b538      	push	{r3, r4, r5, lr}
 8027f1a:	4c06      	ldr	r4, [pc, #24]	; (8027f34 <_sbrk_r+0x1c>)
 8027f1c:	2300      	movs	r3, #0
 8027f1e:	4605      	mov	r5, r0
 8027f20:	4608      	mov	r0, r1
 8027f22:	6023      	str	r3, [r4, #0]
 8027f24:	f7db f812 	bl	8002f4c <_sbrk>
 8027f28:	1c43      	adds	r3, r0, #1
 8027f2a:	d102      	bne.n	8027f32 <_sbrk_r+0x1a>
 8027f2c:	6823      	ldr	r3, [r4, #0]
 8027f2e:	b103      	cbz	r3, 8027f32 <_sbrk_r+0x1a>
 8027f30:	602b      	str	r3, [r5, #0]
 8027f32:	bd38      	pop	{r3, r4, r5, pc}
 8027f34:	2000c264 	.word	0x2000c264

08027f38 <_raise_r>:
 8027f38:	291f      	cmp	r1, #31
 8027f3a:	b538      	push	{r3, r4, r5, lr}
 8027f3c:	4604      	mov	r4, r0
 8027f3e:	460d      	mov	r5, r1
 8027f40:	d904      	bls.n	8027f4c <_raise_r+0x14>
 8027f42:	2316      	movs	r3, #22
 8027f44:	6003      	str	r3, [r0, #0]
 8027f46:	f04f 30ff 	mov.w	r0, #4294967295
 8027f4a:	bd38      	pop	{r3, r4, r5, pc}
 8027f4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027f4e:	b112      	cbz	r2, 8027f56 <_raise_r+0x1e>
 8027f50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027f54:	b94b      	cbnz	r3, 8027f6a <_raise_r+0x32>
 8027f56:	4620      	mov	r0, r4
 8027f58:	f000 f830 	bl	8027fbc <_getpid_r>
 8027f5c:	462a      	mov	r2, r5
 8027f5e:	4601      	mov	r1, r0
 8027f60:	4620      	mov	r0, r4
 8027f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027f66:	f000 b817 	b.w	8027f98 <_kill_r>
 8027f6a:	2b01      	cmp	r3, #1
 8027f6c:	d00a      	beq.n	8027f84 <_raise_r+0x4c>
 8027f6e:	1c59      	adds	r1, r3, #1
 8027f70:	d103      	bne.n	8027f7a <_raise_r+0x42>
 8027f72:	2316      	movs	r3, #22
 8027f74:	6003      	str	r3, [r0, #0]
 8027f76:	2001      	movs	r0, #1
 8027f78:	e7e7      	b.n	8027f4a <_raise_r+0x12>
 8027f7a:	2400      	movs	r4, #0
 8027f7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027f80:	4628      	mov	r0, r5
 8027f82:	4798      	blx	r3
 8027f84:	2000      	movs	r0, #0
 8027f86:	e7e0      	b.n	8027f4a <_raise_r+0x12>

08027f88 <raise>:
 8027f88:	4b02      	ldr	r3, [pc, #8]	; (8027f94 <raise+0xc>)
 8027f8a:	4601      	mov	r1, r0
 8027f8c:	6818      	ldr	r0, [r3, #0]
 8027f8e:	f7ff bfd3 	b.w	8027f38 <_raise_r>
 8027f92:	bf00      	nop
 8027f94:	20000098 	.word	0x20000098

08027f98 <_kill_r>:
 8027f98:	b538      	push	{r3, r4, r5, lr}
 8027f9a:	4c07      	ldr	r4, [pc, #28]	; (8027fb8 <_kill_r+0x20>)
 8027f9c:	2300      	movs	r3, #0
 8027f9e:	4605      	mov	r5, r0
 8027fa0:	4608      	mov	r0, r1
 8027fa2:	4611      	mov	r1, r2
 8027fa4:	6023      	str	r3, [r4, #0]
 8027fa6:	f7da ff49 	bl	8002e3c <_kill>
 8027faa:	1c43      	adds	r3, r0, #1
 8027fac:	d102      	bne.n	8027fb4 <_kill_r+0x1c>
 8027fae:	6823      	ldr	r3, [r4, #0]
 8027fb0:	b103      	cbz	r3, 8027fb4 <_kill_r+0x1c>
 8027fb2:	602b      	str	r3, [r5, #0]
 8027fb4:	bd38      	pop	{r3, r4, r5, pc}
 8027fb6:	bf00      	nop
 8027fb8:	2000c264 	.word	0x2000c264

08027fbc <_getpid_r>:
 8027fbc:	f7da bf36 	b.w	8002e2c <_getpid>

08027fc0 <__swbuf_r>:
 8027fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027fc2:	460e      	mov	r6, r1
 8027fc4:	4614      	mov	r4, r2
 8027fc6:	4605      	mov	r5, r0
 8027fc8:	b118      	cbz	r0, 8027fd2 <__swbuf_r+0x12>
 8027fca:	6983      	ldr	r3, [r0, #24]
 8027fcc:	b90b      	cbnz	r3, 8027fd2 <__swbuf_r+0x12>
 8027fce:	f000 fa0b 	bl	80283e8 <__sinit>
 8027fd2:	4b21      	ldr	r3, [pc, #132]	; (8028058 <__swbuf_r+0x98>)
 8027fd4:	429c      	cmp	r4, r3
 8027fd6:	d12a      	bne.n	802802e <__swbuf_r+0x6e>
 8027fd8:	686c      	ldr	r4, [r5, #4]
 8027fda:	69a3      	ldr	r3, [r4, #24]
 8027fdc:	60a3      	str	r3, [r4, #8]
 8027fde:	89a3      	ldrh	r3, [r4, #12]
 8027fe0:	071a      	lsls	r2, r3, #28
 8027fe2:	d52e      	bpl.n	8028042 <__swbuf_r+0x82>
 8027fe4:	6923      	ldr	r3, [r4, #16]
 8027fe6:	b363      	cbz	r3, 8028042 <__swbuf_r+0x82>
 8027fe8:	6923      	ldr	r3, [r4, #16]
 8027fea:	6820      	ldr	r0, [r4, #0]
 8027fec:	1ac0      	subs	r0, r0, r3
 8027fee:	6963      	ldr	r3, [r4, #20]
 8027ff0:	b2f6      	uxtb	r6, r6
 8027ff2:	4283      	cmp	r3, r0
 8027ff4:	4637      	mov	r7, r6
 8027ff6:	dc04      	bgt.n	8028002 <__swbuf_r+0x42>
 8027ff8:	4621      	mov	r1, r4
 8027ffa:	4628      	mov	r0, r5
 8027ffc:	f000 f98a 	bl	8028314 <_fflush_r>
 8028000:	bb28      	cbnz	r0, 802804e <__swbuf_r+0x8e>
 8028002:	68a3      	ldr	r3, [r4, #8]
 8028004:	3b01      	subs	r3, #1
 8028006:	60a3      	str	r3, [r4, #8]
 8028008:	6823      	ldr	r3, [r4, #0]
 802800a:	1c5a      	adds	r2, r3, #1
 802800c:	6022      	str	r2, [r4, #0]
 802800e:	701e      	strb	r6, [r3, #0]
 8028010:	6963      	ldr	r3, [r4, #20]
 8028012:	3001      	adds	r0, #1
 8028014:	4283      	cmp	r3, r0
 8028016:	d004      	beq.n	8028022 <__swbuf_r+0x62>
 8028018:	89a3      	ldrh	r3, [r4, #12]
 802801a:	07db      	lsls	r3, r3, #31
 802801c:	d519      	bpl.n	8028052 <__swbuf_r+0x92>
 802801e:	2e0a      	cmp	r6, #10
 8028020:	d117      	bne.n	8028052 <__swbuf_r+0x92>
 8028022:	4621      	mov	r1, r4
 8028024:	4628      	mov	r0, r5
 8028026:	f000 f975 	bl	8028314 <_fflush_r>
 802802a:	b190      	cbz	r0, 8028052 <__swbuf_r+0x92>
 802802c:	e00f      	b.n	802804e <__swbuf_r+0x8e>
 802802e:	4b0b      	ldr	r3, [pc, #44]	; (802805c <__swbuf_r+0x9c>)
 8028030:	429c      	cmp	r4, r3
 8028032:	d101      	bne.n	8028038 <__swbuf_r+0x78>
 8028034:	68ac      	ldr	r4, [r5, #8]
 8028036:	e7d0      	b.n	8027fda <__swbuf_r+0x1a>
 8028038:	4b09      	ldr	r3, [pc, #36]	; (8028060 <__swbuf_r+0xa0>)
 802803a:	429c      	cmp	r4, r3
 802803c:	bf08      	it	eq
 802803e:	68ec      	ldreq	r4, [r5, #12]
 8028040:	e7cb      	b.n	8027fda <__swbuf_r+0x1a>
 8028042:	4621      	mov	r1, r4
 8028044:	4628      	mov	r0, r5
 8028046:	f000 f80d 	bl	8028064 <__swsetup_r>
 802804a:	2800      	cmp	r0, #0
 802804c:	d0cc      	beq.n	8027fe8 <__swbuf_r+0x28>
 802804e:	f04f 37ff 	mov.w	r7, #4294967295
 8028052:	4638      	mov	r0, r7
 8028054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028056:	bf00      	nop
 8028058:	0802d778 	.word	0x0802d778
 802805c:	0802d798 	.word	0x0802d798
 8028060:	0802d758 	.word	0x0802d758

08028064 <__swsetup_r>:
 8028064:	4b32      	ldr	r3, [pc, #200]	; (8028130 <__swsetup_r+0xcc>)
 8028066:	b570      	push	{r4, r5, r6, lr}
 8028068:	681d      	ldr	r5, [r3, #0]
 802806a:	4606      	mov	r6, r0
 802806c:	460c      	mov	r4, r1
 802806e:	b125      	cbz	r5, 802807a <__swsetup_r+0x16>
 8028070:	69ab      	ldr	r3, [r5, #24]
 8028072:	b913      	cbnz	r3, 802807a <__swsetup_r+0x16>
 8028074:	4628      	mov	r0, r5
 8028076:	f000 f9b7 	bl	80283e8 <__sinit>
 802807a:	4b2e      	ldr	r3, [pc, #184]	; (8028134 <__swsetup_r+0xd0>)
 802807c:	429c      	cmp	r4, r3
 802807e:	d10f      	bne.n	80280a0 <__swsetup_r+0x3c>
 8028080:	686c      	ldr	r4, [r5, #4]
 8028082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028086:	b29a      	uxth	r2, r3
 8028088:	0715      	lsls	r5, r2, #28
 802808a:	d42c      	bmi.n	80280e6 <__swsetup_r+0x82>
 802808c:	06d0      	lsls	r0, r2, #27
 802808e:	d411      	bmi.n	80280b4 <__swsetup_r+0x50>
 8028090:	2209      	movs	r2, #9
 8028092:	6032      	str	r2, [r6, #0]
 8028094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028098:	81a3      	strh	r3, [r4, #12]
 802809a:	f04f 30ff 	mov.w	r0, #4294967295
 802809e:	e03e      	b.n	802811e <__swsetup_r+0xba>
 80280a0:	4b25      	ldr	r3, [pc, #148]	; (8028138 <__swsetup_r+0xd4>)
 80280a2:	429c      	cmp	r4, r3
 80280a4:	d101      	bne.n	80280aa <__swsetup_r+0x46>
 80280a6:	68ac      	ldr	r4, [r5, #8]
 80280a8:	e7eb      	b.n	8028082 <__swsetup_r+0x1e>
 80280aa:	4b24      	ldr	r3, [pc, #144]	; (802813c <__swsetup_r+0xd8>)
 80280ac:	429c      	cmp	r4, r3
 80280ae:	bf08      	it	eq
 80280b0:	68ec      	ldreq	r4, [r5, #12]
 80280b2:	e7e6      	b.n	8028082 <__swsetup_r+0x1e>
 80280b4:	0751      	lsls	r1, r2, #29
 80280b6:	d512      	bpl.n	80280de <__swsetup_r+0x7a>
 80280b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80280ba:	b141      	cbz	r1, 80280ce <__swsetup_r+0x6a>
 80280bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80280c0:	4299      	cmp	r1, r3
 80280c2:	d002      	beq.n	80280ca <__swsetup_r+0x66>
 80280c4:	4630      	mov	r0, r6
 80280c6:	f7ff fbb7 	bl	8027838 <_free_r>
 80280ca:	2300      	movs	r3, #0
 80280cc:	6363      	str	r3, [r4, #52]	; 0x34
 80280ce:	89a3      	ldrh	r3, [r4, #12]
 80280d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80280d4:	81a3      	strh	r3, [r4, #12]
 80280d6:	2300      	movs	r3, #0
 80280d8:	6063      	str	r3, [r4, #4]
 80280da:	6923      	ldr	r3, [r4, #16]
 80280dc:	6023      	str	r3, [r4, #0]
 80280de:	89a3      	ldrh	r3, [r4, #12]
 80280e0:	f043 0308 	orr.w	r3, r3, #8
 80280e4:	81a3      	strh	r3, [r4, #12]
 80280e6:	6923      	ldr	r3, [r4, #16]
 80280e8:	b94b      	cbnz	r3, 80280fe <__swsetup_r+0x9a>
 80280ea:	89a3      	ldrh	r3, [r4, #12]
 80280ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80280f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80280f4:	d003      	beq.n	80280fe <__swsetup_r+0x9a>
 80280f6:	4621      	mov	r1, r4
 80280f8:	4630      	mov	r0, r6
 80280fa:	f000 fa23 	bl	8028544 <__smakebuf_r>
 80280fe:	89a2      	ldrh	r2, [r4, #12]
 8028100:	f012 0301 	ands.w	r3, r2, #1
 8028104:	d00c      	beq.n	8028120 <__swsetup_r+0xbc>
 8028106:	2300      	movs	r3, #0
 8028108:	60a3      	str	r3, [r4, #8]
 802810a:	6963      	ldr	r3, [r4, #20]
 802810c:	425b      	negs	r3, r3
 802810e:	61a3      	str	r3, [r4, #24]
 8028110:	6923      	ldr	r3, [r4, #16]
 8028112:	b953      	cbnz	r3, 802812a <__swsetup_r+0xc6>
 8028114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028118:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802811c:	d1ba      	bne.n	8028094 <__swsetup_r+0x30>
 802811e:	bd70      	pop	{r4, r5, r6, pc}
 8028120:	0792      	lsls	r2, r2, #30
 8028122:	bf58      	it	pl
 8028124:	6963      	ldrpl	r3, [r4, #20]
 8028126:	60a3      	str	r3, [r4, #8]
 8028128:	e7f2      	b.n	8028110 <__swsetup_r+0xac>
 802812a:	2000      	movs	r0, #0
 802812c:	e7f7      	b.n	802811e <__swsetup_r+0xba>
 802812e:	bf00      	nop
 8028130:	20000098 	.word	0x20000098
 8028134:	0802d778 	.word	0x0802d778
 8028138:	0802d798 	.word	0x0802d798
 802813c:	0802d758 	.word	0x0802d758

08028140 <__register_exitproc>:
 8028140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028144:	4d2c      	ldr	r5, [pc, #176]	; (80281f8 <__register_exitproc+0xb8>)
 8028146:	682c      	ldr	r4, [r5, #0]
 8028148:	4607      	mov	r7, r0
 802814a:	460e      	mov	r6, r1
 802814c:	4691      	mov	r9, r2
 802814e:	4698      	mov	r8, r3
 8028150:	b934      	cbnz	r4, 8028160 <__register_exitproc+0x20>
 8028152:	4b2a      	ldr	r3, [pc, #168]	; (80281fc <__register_exitproc+0xbc>)
 8028154:	4c2a      	ldr	r4, [pc, #168]	; (8028200 <__register_exitproc+0xc0>)
 8028156:	602c      	str	r4, [r5, #0]
 8028158:	b113      	cbz	r3, 8028160 <__register_exitproc+0x20>
 802815a:	681b      	ldr	r3, [r3, #0]
 802815c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028160:	6863      	ldr	r3, [r4, #4]
 8028162:	2b1f      	cmp	r3, #31
 8028164:	dd3d      	ble.n	80281e2 <__register_exitproc+0xa2>
 8028166:	4b27      	ldr	r3, [pc, #156]	; (8028204 <__register_exitproc+0xc4>)
 8028168:	b91b      	cbnz	r3, 8028172 <__register_exitproc+0x32>
 802816a:	f04f 30ff 	mov.w	r0, #4294967295
 802816e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028172:	208c      	movs	r0, #140	; 0x8c
 8028174:	f7ff fb3c 	bl	80277f0 <malloc>
 8028178:	4604      	mov	r4, r0
 802817a:	2800      	cmp	r0, #0
 802817c:	d0f5      	beq.n	802816a <__register_exitproc+0x2a>
 802817e:	2300      	movs	r3, #0
 8028180:	682a      	ldr	r2, [r5, #0]
 8028182:	6002      	str	r2, [r0, #0]
 8028184:	6043      	str	r3, [r0, #4]
 8028186:	6028      	str	r0, [r5, #0]
 8028188:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802818c:	b30f      	cbz	r7, 80281d2 <__register_exitproc+0x92>
 802818e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028192:	f7ff fb2d 	bl	80277f0 <malloc>
 8028196:	2800      	cmp	r0, #0
 8028198:	d0e7      	beq.n	802816a <__register_exitproc+0x2a>
 802819a:	2300      	movs	r3, #0
 802819c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80281a0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80281a4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80281a8:	6862      	ldr	r2, [r4, #4]
 80281aa:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80281ae:	2301      	movs	r3, #1
 80281b0:	4093      	lsls	r3, r2
 80281b2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80281b6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80281ba:	431a      	orrs	r2, r3
 80281bc:	2f02      	cmp	r7, #2
 80281be:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80281c2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80281c6:	bf02      	ittt	eq
 80281c8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80281cc:	4313      	orreq	r3, r2
 80281ce:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80281d2:	6863      	ldr	r3, [r4, #4]
 80281d4:	1c5a      	adds	r2, r3, #1
 80281d6:	3302      	adds	r3, #2
 80281d8:	6062      	str	r2, [r4, #4]
 80281da:	2000      	movs	r0, #0
 80281dc:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80281e0:	e7c5      	b.n	802816e <__register_exitproc+0x2e>
 80281e2:	2f00      	cmp	r7, #0
 80281e4:	d0f5      	beq.n	80281d2 <__register_exitproc+0x92>
 80281e6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80281ea:	2800      	cmp	r0, #0
 80281ec:	d1dc      	bne.n	80281a8 <__register_exitproc+0x68>
 80281ee:	4b05      	ldr	r3, [pc, #20]	; (8028204 <__register_exitproc+0xc4>)
 80281f0:	2b00      	cmp	r3, #0
 80281f2:	d0ba      	beq.n	802816a <__register_exitproc+0x2a>
 80281f4:	e7cb      	b.n	802818e <__register_exitproc+0x4e>
 80281f6:	bf00      	nop
 80281f8:	2000b6d4 	.word	0x2000b6d4
 80281fc:	0802d754 	.word	0x0802d754
 8028200:	2000b648 	.word	0x2000b648
 8028204:	080277f1 	.word	0x080277f1

08028208 <__sflush_r>:
 8028208:	898a      	ldrh	r2, [r1, #12]
 802820a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802820e:	4605      	mov	r5, r0
 8028210:	0710      	lsls	r0, r2, #28
 8028212:	460c      	mov	r4, r1
 8028214:	d458      	bmi.n	80282c8 <__sflush_r+0xc0>
 8028216:	684b      	ldr	r3, [r1, #4]
 8028218:	2b00      	cmp	r3, #0
 802821a:	dc05      	bgt.n	8028228 <__sflush_r+0x20>
 802821c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802821e:	2b00      	cmp	r3, #0
 8028220:	dc02      	bgt.n	8028228 <__sflush_r+0x20>
 8028222:	2000      	movs	r0, #0
 8028224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802822a:	2e00      	cmp	r6, #0
 802822c:	d0f9      	beq.n	8028222 <__sflush_r+0x1a>
 802822e:	2300      	movs	r3, #0
 8028230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028234:	682f      	ldr	r7, [r5, #0]
 8028236:	6a21      	ldr	r1, [r4, #32]
 8028238:	602b      	str	r3, [r5, #0]
 802823a:	d032      	beq.n	80282a2 <__sflush_r+0x9a>
 802823c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802823e:	89a3      	ldrh	r3, [r4, #12]
 8028240:	075a      	lsls	r2, r3, #29
 8028242:	d505      	bpl.n	8028250 <__sflush_r+0x48>
 8028244:	6863      	ldr	r3, [r4, #4]
 8028246:	1ac0      	subs	r0, r0, r3
 8028248:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802824a:	b10b      	cbz	r3, 8028250 <__sflush_r+0x48>
 802824c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802824e:	1ac0      	subs	r0, r0, r3
 8028250:	2300      	movs	r3, #0
 8028252:	4602      	mov	r2, r0
 8028254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028256:	6a21      	ldr	r1, [r4, #32]
 8028258:	4628      	mov	r0, r5
 802825a:	47b0      	blx	r6
 802825c:	1c43      	adds	r3, r0, #1
 802825e:	89a3      	ldrh	r3, [r4, #12]
 8028260:	d106      	bne.n	8028270 <__sflush_r+0x68>
 8028262:	6829      	ldr	r1, [r5, #0]
 8028264:	291d      	cmp	r1, #29
 8028266:	d848      	bhi.n	80282fa <__sflush_r+0xf2>
 8028268:	4a29      	ldr	r2, [pc, #164]	; (8028310 <__sflush_r+0x108>)
 802826a:	40ca      	lsrs	r2, r1
 802826c:	07d6      	lsls	r6, r2, #31
 802826e:	d544      	bpl.n	80282fa <__sflush_r+0xf2>
 8028270:	2200      	movs	r2, #0
 8028272:	6062      	str	r2, [r4, #4]
 8028274:	04d9      	lsls	r1, r3, #19
 8028276:	6922      	ldr	r2, [r4, #16]
 8028278:	6022      	str	r2, [r4, #0]
 802827a:	d504      	bpl.n	8028286 <__sflush_r+0x7e>
 802827c:	1c42      	adds	r2, r0, #1
 802827e:	d101      	bne.n	8028284 <__sflush_r+0x7c>
 8028280:	682b      	ldr	r3, [r5, #0]
 8028282:	b903      	cbnz	r3, 8028286 <__sflush_r+0x7e>
 8028284:	6560      	str	r0, [r4, #84]	; 0x54
 8028286:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028288:	602f      	str	r7, [r5, #0]
 802828a:	2900      	cmp	r1, #0
 802828c:	d0c9      	beq.n	8028222 <__sflush_r+0x1a>
 802828e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028292:	4299      	cmp	r1, r3
 8028294:	d002      	beq.n	802829c <__sflush_r+0x94>
 8028296:	4628      	mov	r0, r5
 8028298:	f7ff face 	bl	8027838 <_free_r>
 802829c:	2000      	movs	r0, #0
 802829e:	6360      	str	r0, [r4, #52]	; 0x34
 80282a0:	e7c0      	b.n	8028224 <__sflush_r+0x1c>
 80282a2:	2301      	movs	r3, #1
 80282a4:	4628      	mov	r0, r5
 80282a6:	47b0      	blx	r6
 80282a8:	1c41      	adds	r1, r0, #1
 80282aa:	d1c8      	bne.n	802823e <__sflush_r+0x36>
 80282ac:	682b      	ldr	r3, [r5, #0]
 80282ae:	2b00      	cmp	r3, #0
 80282b0:	d0c5      	beq.n	802823e <__sflush_r+0x36>
 80282b2:	2b1d      	cmp	r3, #29
 80282b4:	d001      	beq.n	80282ba <__sflush_r+0xb2>
 80282b6:	2b16      	cmp	r3, #22
 80282b8:	d101      	bne.n	80282be <__sflush_r+0xb6>
 80282ba:	602f      	str	r7, [r5, #0]
 80282bc:	e7b1      	b.n	8028222 <__sflush_r+0x1a>
 80282be:	89a3      	ldrh	r3, [r4, #12]
 80282c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80282c4:	81a3      	strh	r3, [r4, #12]
 80282c6:	e7ad      	b.n	8028224 <__sflush_r+0x1c>
 80282c8:	690f      	ldr	r7, [r1, #16]
 80282ca:	2f00      	cmp	r7, #0
 80282cc:	d0a9      	beq.n	8028222 <__sflush_r+0x1a>
 80282ce:	0793      	lsls	r3, r2, #30
 80282d0:	680e      	ldr	r6, [r1, #0]
 80282d2:	bf08      	it	eq
 80282d4:	694b      	ldreq	r3, [r1, #20]
 80282d6:	600f      	str	r7, [r1, #0]
 80282d8:	bf18      	it	ne
 80282da:	2300      	movne	r3, #0
 80282dc:	eba6 0807 	sub.w	r8, r6, r7
 80282e0:	608b      	str	r3, [r1, #8]
 80282e2:	f1b8 0f00 	cmp.w	r8, #0
 80282e6:	dd9c      	ble.n	8028222 <__sflush_r+0x1a>
 80282e8:	4643      	mov	r3, r8
 80282ea:	463a      	mov	r2, r7
 80282ec:	6a21      	ldr	r1, [r4, #32]
 80282ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80282f0:	4628      	mov	r0, r5
 80282f2:	47b0      	blx	r6
 80282f4:	2800      	cmp	r0, #0
 80282f6:	dc06      	bgt.n	8028306 <__sflush_r+0xfe>
 80282f8:	89a3      	ldrh	r3, [r4, #12]
 80282fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80282fe:	81a3      	strh	r3, [r4, #12]
 8028300:	f04f 30ff 	mov.w	r0, #4294967295
 8028304:	e78e      	b.n	8028224 <__sflush_r+0x1c>
 8028306:	4407      	add	r7, r0
 8028308:	eba8 0800 	sub.w	r8, r8, r0
 802830c:	e7e9      	b.n	80282e2 <__sflush_r+0xda>
 802830e:	bf00      	nop
 8028310:	20400001 	.word	0x20400001

08028314 <_fflush_r>:
 8028314:	b538      	push	{r3, r4, r5, lr}
 8028316:	690b      	ldr	r3, [r1, #16]
 8028318:	4605      	mov	r5, r0
 802831a:	460c      	mov	r4, r1
 802831c:	b1db      	cbz	r3, 8028356 <_fflush_r+0x42>
 802831e:	b118      	cbz	r0, 8028328 <_fflush_r+0x14>
 8028320:	6983      	ldr	r3, [r0, #24]
 8028322:	b90b      	cbnz	r3, 8028328 <_fflush_r+0x14>
 8028324:	f000 f860 	bl	80283e8 <__sinit>
 8028328:	4b0c      	ldr	r3, [pc, #48]	; (802835c <_fflush_r+0x48>)
 802832a:	429c      	cmp	r4, r3
 802832c:	d109      	bne.n	8028342 <_fflush_r+0x2e>
 802832e:	686c      	ldr	r4, [r5, #4]
 8028330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028334:	b17b      	cbz	r3, 8028356 <_fflush_r+0x42>
 8028336:	4621      	mov	r1, r4
 8028338:	4628      	mov	r0, r5
 802833a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802833e:	f7ff bf63 	b.w	8028208 <__sflush_r>
 8028342:	4b07      	ldr	r3, [pc, #28]	; (8028360 <_fflush_r+0x4c>)
 8028344:	429c      	cmp	r4, r3
 8028346:	d101      	bne.n	802834c <_fflush_r+0x38>
 8028348:	68ac      	ldr	r4, [r5, #8]
 802834a:	e7f1      	b.n	8028330 <_fflush_r+0x1c>
 802834c:	4b05      	ldr	r3, [pc, #20]	; (8028364 <_fflush_r+0x50>)
 802834e:	429c      	cmp	r4, r3
 8028350:	bf08      	it	eq
 8028352:	68ec      	ldreq	r4, [r5, #12]
 8028354:	e7ec      	b.n	8028330 <_fflush_r+0x1c>
 8028356:	2000      	movs	r0, #0
 8028358:	bd38      	pop	{r3, r4, r5, pc}
 802835a:	bf00      	nop
 802835c:	0802d778 	.word	0x0802d778
 8028360:	0802d798 	.word	0x0802d798
 8028364:	0802d758 	.word	0x0802d758

08028368 <std>:
 8028368:	2300      	movs	r3, #0
 802836a:	b510      	push	{r4, lr}
 802836c:	4604      	mov	r4, r0
 802836e:	e9c0 3300 	strd	r3, r3, [r0]
 8028372:	6083      	str	r3, [r0, #8]
 8028374:	8181      	strh	r1, [r0, #12]
 8028376:	6643      	str	r3, [r0, #100]	; 0x64
 8028378:	81c2      	strh	r2, [r0, #14]
 802837a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802837e:	6183      	str	r3, [r0, #24]
 8028380:	4619      	mov	r1, r3
 8028382:	2208      	movs	r2, #8
 8028384:	305c      	adds	r0, #92	; 0x5c
 8028386:	f7ff fa4e 	bl	8027826 <memset>
 802838a:	4b05      	ldr	r3, [pc, #20]	; (80283a0 <std+0x38>)
 802838c:	6263      	str	r3, [r4, #36]	; 0x24
 802838e:	4b05      	ldr	r3, [pc, #20]	; (80283a4 <std+0x3c>)
 8028390:	62a3      	str	r3, [r4, #40]	; 0x28
 8028392:	4b05      	ldr	r3, [pc, #20]	; (80283a8 <std+0x40>)
 8028394:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028396:	4b05      	ldr	r3, [pc, #20]	; (80283ac <std+0x44>)
 8028398:	6224      	str	r4, [r4, #32]
 802839a:	6323      	str	r3, [r4, #48]	; 0x30
 802839c:	bd10      	pop	{r4, pc}
 802839e:	bf00      	nop
 80283a0:	080285c9 	.word	0x080285c9
 80283a4:	080285eb 	.word	0x080285eb
 80283a8:	08028623 	.word	0x08028623
 80283ac:	08028647 	.word	0x08028647

080283b0 <_cleanup_r>:
 80283b0:	4901      	ldr	r1, [pc, #4]	; (80283b8 <_cleanup_r+0x8>)
 80283b2:	f000 b885 	b.w	80284c0 <_fwalk_reent>
 80283b6:	bf00      	nop
 80283b8:	08028315 	.word	0x08028315

080283bc <__sfmoreglue>:
 80283bc:	b570      	push	{r4, r5, r6, lr}
 80283be:	1e4a      	subs	r2, r1, #1
 80283c0:	2568      	movs	r5, #104	; 0x68
 80283c2:	4355      	muls	r5, r2
 80283c4:	460e      	mov	r6, r1
 80283c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80283ca:	f7ff fa83 	bl	80278d4 <_malloc_r>
 80283ce:	4604      	mov	r4, r0
 80283d0:	b140      	cbz	r0, 80283e4 <__sfmoreglue+0x28>
 80283d2:	2100      	movs	r1, #0
 80283d4:	e9c0 1600 	strd	r1, r6, [r0]
 80283d8:	300c      	adds	r0, #12
 80283da:	60a0      	str	r0, [r4, #8]
 80283dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80283e0:	f7ff fa21 	bl	8027826 <memset>
 80283e4:	4620      	mov	r0, r4
 80283e6:	bd70      	pop	{r4, r5, r6, pc}

080283e8 <__sinit>:
 80283e8:	6983      	ldr	r3, [r0, #24]
 80283ea:	b510      	push	{r4, lr}
 80283ec:	4604      	mov	r4, r0
 80283ee:	bb33      	cbnz	r3, 802843e <__sinit+0x56>
 80283f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80283f4:	6503      	str	r3, [r0, #80]	; 0x50
 80283f6:	4b12      	ldr	r3, [pc, #72]	; (8028440 <__sinit+0x58>)
 80283f8:	4a12      	ldr	r2, [pc, #72]	; (8028444 <__sinit+0x5c>)
 80283fa:	681b      	ldr	r3, [r3, #0]
 80283fc:	6282      	str	r2, [r0, #40]	; 0x28
 80283fe:	4298      	cmp	r0, r3
 8028400:	bf04      	itt	eq
 8028402:	2301      	moveq	r3, #1
 8028404:	6183      	streq	r3, [r0, #24]
 8028406:	f000 f81f 	bl	8028448 <__sfp>
 802840a:	6060      	str	r0, [r4, #4]
 802840c:	4620      	mov	r0, r4
 802840e:	f000 f81b 	bl	8028448 <__sfp>
 8028412:	60a0      	str	r0, [r4, #8]
 8028414:	4620      	mov	r0, r4
 8028416:	f000 f817 	bl	8028448 <__sfp>
 802841a:	2200      	movs	r2, #0
 802841c:	60e0      	str	r0, [r4, #12]
 802841e:	2104      	movs	r1, #4
 8028420:	6860      	ldr	r0, [r4, #4]
 8028422:	f7ff ffa1 	bl	8028368 <std>
 8028426:	2201      	movs	r2, #1
 8028428:	2109      	movs	r1, #9
 802842a:	68a0      	ldr	r0, [r4, #8]
 802842c:	f7ff ff9c 	bl	8028368 <std>
 8028430:	2202      	movs	r2, #2
 8028432:	2112      	movs	r1, #18
 8028434:	68e0      	ldr	r0, [r4, #12]
 8028436:	f7ff ff97 	bl	8028368 <std>
 802843a:	2301      	movs	r3, #1
 802843c:	61a3      	str	r3, [r4, #24]
 802843e:	bd10      	pop	{r4, pc}
 8028440:	0802d71c 	.word	0x0802d71c
 8028444:	080283b1 	.word	0x080283b1

08028448 <__sfp>:
 8028448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802844a:	4b1b      	ldr	r3, [pc, #108]	; (80284b8 <__sfp+0x70>)
 802844c:	681e      	ldr	r6, [r3, #0]
 802844e:	69b3      	ldr	r3, [r6, #24]
 8028450:	4607      	mov	r7, r0
 8028452:	b913      	cbnz	r3, 802845a <__sfp+0x12>
 8028454:	4630      	mov	r0, r6
 8028456:	f7ff ffc7 	bl	80283e8 <__sinit>
 802845a:	3648      	adds	r6, #72	; 0x48
 802845c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028460:	3b01      	subs	r3, #1
 8028462:	d503      	bpl.n	802846c <__sfp+0x24>
 8028464:	6833      	ldr	r3, [r6, #0]
 8028466:	b133      	cbz	r3, 8028476 <__sfp+0x2e>
 8028468:	6836      	ldr	r6, [r6, #0]
 802846a:	e7f7      	b.n	802845c <__sfp+0x14>
 802846c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028470:	b16d      	cbz	r5, 802848e <__sfp+0x46>
 8028472:	3468      	adds	r4, #104	; 0x68
 8028474:	e7f4      	b.n	8028460 <__sfp+0x18>
 8028476:	2104      	movs	r1, #4
 8028478:	4638      	mov	r0, r7
 802847a:	f7ff ff9f 	bl	80283bc <__sfmoreglue>
 802847e:	6030      	str	r0, [r6, #0]
 8028480:	2800      	cmp	r0, #0
 8028482:	d1f1      	bne.n	8028468 <__sfp+0x20>
 8028484:	230c      	movs	r3, #12
 8028486:	603b      	str	r3, [r7, #0]
 8028488:	4604      	mov	r4, r0
 802848a:	4620      	mov	r0, r4
 802848c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802848e:	4b0b      	ldr	r3, [pc, #44]	; (80284bc <__sfp+0x74>)
 8028490:	6665      	str	r5, [r4, #100]	; 0x64
 8028492:	e9c4 5500 	strd	r5, r5, [r4]
 8028496:	60a5      	str	r5, [r4, #8]
 8028498:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802849c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80284a0:	2208      	movs	r2, #8
 80284a2:	4629      	mov	r1, r5
 80284a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80284a8:	f7ff f9bd 	bl	8027826 <memset>
 80284ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80284b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80284b4:	e7e9      	b.n	802848a <__sfp+0x42>
 80284b6:	bf00      	nop
 80284b8:	0802d71c 	.word	0x0802d71c
 80284bc:	ffff0001 	.word	0xffff0001

080284c0 <_fwalk_reent>:
 80284c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80284c4:	4680      	mov	r8, r0
 80284c6:	4689      	mov	r9, r1
 80284c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80284cc:	2600      	movs	r6, #0
 80284ce:	b914      	cbnz	r4, 80284d6 <_fwalk_reent+0x16>
 80284d0:	4630      	mov	r0, r6
 80284d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80284d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80284da:	3f01      	subs	r7, #1
 80284dc:	d501      	bpl.n	80284e2 <_fwalk_reent+0x22>
 80284de:	6824      	ldr	r4, [r4, #0]
 80284e0:	e7f5      	b.n	80284ce <_fwalk_reent+0xe>
 80284e2:	89ab      	ldrh	r3, [r5, #12]
 80284e4:	2b01      	cmp	r3, #1
 80284e6:	d907      	bls.n	80284f8 <_fwalk_reent+0x38>
 80284e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80284ec:	3301      	adds	r3, #1
 80284ee:	d003      	beq.n	80284f8 <_fwalk_reent+0x38>
 80284f0:	4629      	mov	r1, r5
 80284f2:	4640      	mov	r0, r8
 80284f4:	47c8      	blx	r9
 80284f6:	4306      	orrs	r6, r0
 80284f8:	3568      	adds	r5, #104	; 0x68
 80284fa:	e7ee      	b.n	80284da <_fwalk_reent+0x1a>

080284fc <__swhatbuf_r>:
 80284fc:	b570      	push	{r4, r5, r6, lr}
 80284fe:	460e      	mov	r6, r1
 8028500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028504:	2900      	cmp	r1, #0
 8028506:	b096      	sub	sp, #88	; 0x58
 8028508:	4614      	mov	r4, r2
 802850a:	461d      	mov	r5, r3
 802850c:	da07      	bge.n	802851e <__swhatbuf_r+0x22>
 802850e:	2300      	movs	r3, #0
 8028510:	602b      	str	r3, [r5, #0]
 8028512:	89b3      	ldrh	r3, [r6, #12]
 8028514:	061a      	lsls	r2, r3, #24
 8028516:	d410      	bmi.n	802853a <__swhatbuf_r+0x3e>
 8028518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802851c:	e00e      	b.n	802853c <__swhatbuf_r+0x40>
 802851e:	466a      	mov	r2, sp
 8028520:	f000 f8b8 	bl	8028694 <_fstat_r>
 8028524:	2800      	cmp	r0, #0
 8028526:	dbf2      	blt.n	802850e <__swhatbuf_r+0x12>
 8028528:	9a01      	ldr	r2, [sp, #4]
 802852a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802852e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028532:	425a      	negs	r2, r3
 8028534:	415a      	adcs	r2, r3
 8028536:	602a      	str	r2, [r5, #0]
 8028538:	e7ee      	b.n	8028518 <__swhatbuf_r+0x1c>
 802853a:	2340      	movs	r3, #64	; 0x40
 802853c:	2000      	movs	r0, #0
 802853e:	6023      	str	r3, [r4, #0]
 8028540:	b016      	add	sp, #88	; 0x58
 8028542:	bd70      	pop	{r4, r5, r6, pc}

08028544 <__smakebuf_r>:
 8028544:	898b      	ldrh	r3, [r1, #12]
 8028546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028548:	079d      	lsls	r5, r3, #30
 802854a:	4606      	mov	r6, r0
 802854c:	460c      	mov	r4, r1
 802854e:	d507      	bpl.n	8028560 <__smakebuf_r+0x1c>
 8028550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028554:	6023      	str	r3, [r4, #0]
 8028556:	6123      	str	r3, [r4, #16]
 8028558:	2301      	movs	r3, #1
 802855a:	6163      	str	r3, [r4, #20]
 802855c:	b002      	add	sp, #8
 802855e:	bd70      	pop	{r4, r5, r6, pc}
 8028560:	ab01      	add	r3, sp, #4
 8028562:	466a      	mov	r2, sp
 8028564:	f7ff ffca 	bl	80284fc <__swhatbuf_r>
 8028568:	9900      	ldr	r1, [sp, #0]
 802856a:	4605      	mov	r5, r0
 802856c:	4630      	mov	r0, r6
 802856e:	f7ff f9b1 	bl	80278d4 <_malloc_r>
 8028572:	b948      	cbnz	r0, 8028588 <__smakebuf_r+0x44>
 8028574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028578:	059a      	lsls	r2, r3, #22
 802857a:	d4ef      	bmi.n	802855c <__smakebuf_r+0x18>
 802857c:	f023 0303 	bic.w	r3, r3, #3
 8028580:	f043 0302 	orr.w	r3, r3, #2
 8028584:	81a3      	strh	r3, [r4, #12]
 8028586:	e7e3      	b.n	8028550 <__smakebuf_r+0xc>
 8028588:	4b0d      	ldr	r3, [pc, #52]	; (80285c0 <__smakebuf_r+0x7c>)
 802858a:	62b3      	str	r3, [r6, #40]	; 0x28
 802858c:	89a3      	ldrh	r3, [r4, #12]
 802858e:	6020      	str	r0, [r4, #0]
 8028590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028594:	81a3      	strh	r3, [r4, #12]
 8028596:	9b00      	ldr	r3, [sp, #0]
 8028598:	6163      	str	r3, [r4, #20]
 802859a:	9b01      	ldr	r3, [sp, #4]
 802859c:	6120      	str	r0, [r4, #16]
 802859e:	b15b      	cbz	r3, 80285b8 <__smakebuf_r+0x74>
 80285a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80285a4:	4630      	mov	r0, r6
 80285a6:	f000 f887 	bl	80286b8 <_isatty_r>
 80285aa:	b128      	cbz	r0, 80285b8 <__smakebuf_r+0x74>
 80285ac:	89a3      	ldrh	r3, [r4, #12]
 80285ae:	f023 0303 	bic.w	r3, r3, #3
 80285b2:	f043 0301 	orr.w	r3, r3, #1
 80285b6:	81a3      	strh	r3, [r4, #12]
 80285b8:	89a3      	ldrh	r3, [r4, #12]
 80285ba:	431d      	orrs	r5, r3
 80285bc:	81a5      	strh	r5, [r4, #12]
 80285be:	e7cd      	b.n	802855c <__smakebuf_r+0x18>
 80285c0:	080283b1 	.word	0x080283b1

080285c4 <__malloc_lock>:
 80285c4:	4770      	bx	lr

080285c6 <__malloc_unlock>:
 80285c6:	4770      	bx	lr

080285c8 <__sread>:
 80285c8:	b510      	push	{r4, lr}
 80285ca:	460c      	mov	r4, r1
 80285cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80285d0:	f000 f894 	bl	80286fc <_read_r>
 80285d4:	2800      	cmp	r0, #0
 80285d6:	bfab      	itete	ge
 80285d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80285da:	89a3      	ldrhlt	r3, [r4, #12]
 80285dc:	181b      	addge	r3, r3, r0
 80285de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80285e2:	bfac      	ite	ge
 80285e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80285e6:	81a3      	strhlt	r3, [r4, #12]
 80285e8:	bd10      	pop	{r4, pc}

080285ea <__swrite>:
 80285ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80285ee:	461f      	mov	r7, r3
 80285f0:	898b      	ldrh	r3, [r1, #12]
 80285f2:	05db      	lsls	r3, r3, #23
 80285f4:	4605      	mov	r5, r0
 80285f6:	460c      	mov	r4, r1
 80285f8:	4616      	mov	r6, r2
 80285fa:	d505      	bpl.n	8028608 <__swrite+0x1e>
 80285fc:	2302      	movs	r3, #2
 80285fe:	2200      	movs	r2, #0
 8028600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028604:	f000 f868 	bl	80286d8 <_lseek_r>
 8028608:	89a3      	ldrh	r3, [r4, #12]
 802860a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802860e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028612:	81a3      	strh	r3, [r4, #12]
 8028614:	4632      	mov	r2, r6
 8028616:	463b      	mov	r3, r7
 8028618:	4628      	mov	r0, r5
 802861a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802861e:	f000 b817 	b.w	8028650 <_write_r>

08028622 <__sseek>:
 8028622:	b510      	push	{r4, lr}
 8028624:	460c      	mov	r4, r1
 8028626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802862a:	f000 f855 	bl	80286d8 <_lseek_r>
 802862e:	1c43      	adds	r3, r0, #1
 8028630:	89a3      	ldrh	r3, [r4, #12]
 8028632:	bf15      	itete	ne
 8028634:	6560      	strne	r0, [r4, #84]	; 0x54
 8028636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802863a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802863e:	81a3      	strheq	r3, [r4, #12]
 8028640:	bf18      	it	ne
 8028642:	81a3      	strhne	r3, [r4, #12]
 8028644:	bd10      	pop	{r4, pc}

08028646 <__sclose>:
 8028646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802864a:	f000 b813 	b.w	8028674 <_close_r>
	...

08028650 <_write_r>:
 8028650:	b538      	push	{r3, r4, r5, lr}
 8028652:	4c07      	ldr	r4, [pc, #28]	; (8028670 <_write_r+0x20>)
 8028654:	4605      	mov	r5, r0
 8028656:	4608      	mov	r0, r1
 8028658:	4611      	mov	r1, r2
 802865a:	2200      	movs	r2, #0
 802865c:	6022      	str	r2, [r4, #0]
 802865e:	461a      	mov	r2, r3
 8028660:	f7da fc23 	bl	8002eaa <_write>
 8028664:	1c43      	adds	r3, r0, #1
 8028666:	d102      	bne.n	802866e <_write_r+0x1e>
 8028668:	6823      	ldr	r3, [r4, #0]
 802866a:	b103      	cbz	r3, 802866e <_write_r+0x1e>
 802866c:	602b      	str	r3, [r5, #0]
 802866e:	bd38      	pop	{r3, r4, r5, pc}
 8028670:	2000c264 	.word	0x2000c264

08028674 <_close_r>:
 8028674:	b538      	push	{r3, r4, r5, lr}
 8028676:	4c06      	ldr	r4, [pc, #24]	; (8028690 <_close_r+0x1c>)
 8028678:	2300      	movs	r3, #0
 802867a:	4605      	mov	r5, r0
 802867c:	4608      	mov	r0, r1
 802867e:	6023      	str	r3, [r4, #0]
 8028680:	f7da fc2f 	bl	8002ee2 <_close>
 8028684:	1c43      	adds	r3, r0, #1
 8028686:	d102      	bne.n	802868e <_close_r+0x1a>
 8028688:	6823      	ldr	r3, [r4, #0]
 802868a:	b103      	cbz	r3, 802868e <_close_r+0x1a>
 802868c:	602b      	str	r3, [r5, #0]
 802868e:	bd38      	pop	{r3, r4, r5, pc}
 8028690:	2000c264 	.word	0x2000c264

08028694 <_fstat_r>:
 8028694:	b538      	push	{r3, r4, r5, lr}
 8028696:	4c07      	ldr	r4, [pc, #28]	; (80286b4 <_fstat_r+0x20>)
 8028698:	2300      	movs	r3, #0
 802869a:	4605      	mov	r5, r0
 802869c:	4608      	mov	r0, r1
 802869e:	4611      	mov	r1, r2
 80286a0:	6023      	str	r3, [r4, #0]
 80286a2:	f7da fc2a 	bl	8002efa <_fstat>
 80286a6:	1c43      	adds	r3, r0, #1
 80286a8:	d102      	bne.n	80286b0 <_fstat_r+0x1c>
 80286aa:	6823      	ldr	r3, [r4, #0]
 80286ac:	b103      	cbz	r3, 80286b0 <_fstat_r+0x1c>
 80286ae:	602b      	str	r3, [r5, #0]
 80286b0:	bd38      	pop	{r3, r4, r5, pc}
 80286b2:	bf00      	nop
 80286b4:	2000c264 	.word	0x2000c264

080286b8 <_isatty_r>:
 80286b8:	b538      	push	{r3, r4, r5, lr}
 80286ba:	4c06      	ldr	r4, [pc, #24]	; (80286d4 <_isatty_r+0x1c>)
 80286bc:	2300      	movs	r3, #0
 80286be:	4605      	mov	r5, r0
 80286c0:	4608      	mov	r0, r1
 80286c2:	6023      	str	r3, [r4, #0]
 80286c4:	f7da fc29 	bl	8002f1a <_isatty>
 80286c8:	1c43      	adds	r3, r0, #1
 80286ca:	d102      	bne.n	80286d2 <_isatty_r+0x1a>
 80286cc:	6823      	ldr	r3, [r4, #0]
 80286ce:	b103      	cbz	r3, 80286d2 <_isatty_r+0x1a>
 80286d0:	602b      	str	r3, [r5, #0]
 80286d2:	bd38      	pop	{r3, r4, r5, pc}
 80286d4:	2000c264 	.word	0x2000c264

080286d8 <_lseek_r>:
 80286d8:	b538      	push	{r3, r4, r5, lr}
 80286da:	4c07      	ldr	r4, [pc, #28]	; (80286f8 <_lseek_r+0x20>)
 80286dc:	4605      	mov	r5, r0
 80286de:	4608      	mov	r0, r1
 80286e0:	4611      	mov	r1, r2
 80286e2:	2200      	movs	r2, #0
 80286e4:	6022      	str	r2, [r4, #0]
 80286e6:	461a      	mov	r2, r3
 80286e8:	f7da fc22 	bl	8002f30 <_lseek>
 80286ec:	1c43      	adds	r3, r0, #1
 80286ee:	d102      	bne.n	80286f6 <_lseek_r+0x1e>
 80286f0:	6823      	ldr	r3, [r4, #0]
 80286f2:	b103      	cbz	r3, 80286f6 <_lseek_r+0x1e>
 80286f4:	602b      	str	r3, [r5, #0]
 80286f6:	bd38      	pop	{r3, r4, r5, pc}
 80286f8:	2000c264 	.word	0x2000c264

080286fc <_read_r>:
 80286fc:	b538      	push	{r3, r4, r5, lr}
 80286fe:	4c07      	ldr	r4, [pc, #28]	; (802871c <_read_r+0x20>)
 8028700:	4605      	mov	r5, r0
 8028702:	4608      	mov	r0, r1
 8028704:	4611      	mov	r1, r2
 8028706:	2200      	movs	r2, #0
 8028708:	6022      	str	r2, [r4, #0]
 802870a:	461a      	mov	r2, r3
 802870c:	f7da fbb0 	bl	8002e70 <_read>
 8028710:	1c43      	adds	r3, r0, #1
 8028712:	d102      	bne.n	802871a <_read_r+0x1e>
 8028714:	6823      	ldr	r3, [r4, #0]
 8028716:	b103      	cbz	r3, 802871a <_read_r+0x1e>
 8028718:	602b      	str	r3, [r5, #0]
 802871a:	bd38      	pop	{r3, r4, r5, pc}
 802871c:	2000c264 	.word	0x2000c264

08028720 <_init>:
 8028720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028722:	bf00      	nop
 8028724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028726:	bc08      	pop	{r3}
 8028728:	469e      	mov	lr, r3
 802872a:	4770      	bx	lr

0802872c <_fini>:
 802872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802872e:	bf00      	nop
 8028730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028732:	bc08      	pop	{r3}
 8028734:	469e      	mov	lr, r3
 8028736:	4770      	bx	lr
